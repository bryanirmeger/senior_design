
base_robot_comm-robot_side.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c94  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003e8c  08003e8c  00004e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003eb4  08003eb4  0000501c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003eb4  08003eb4  00004eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ebc  08003ebc  0000501c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ebc  08003ebc  00004ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ec0  08003ec0  00004ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08003ec4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000001c  08003ee0  0000501c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08003ee0  000050d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000501c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aaee  00000000  00000000  0000504a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a6b  00000000  00000000  0000fb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000800  00000000  00000000  000115a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000061f  00000000  00000000  00011da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026957  00000000  00000000  000123c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab51  00000000  00000000  00038d1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f09e9  00000000  00000000  0004386f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00134258  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fac  00000000  00000000  0013429c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009c  00000000  00000000  00136248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000001c 	.word	0x2000001c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003e74 	.word	0x08003e74

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000020 	.word	0x20000020
 8000234:	08003e74 	.word	0x08003e74

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b988 	b.w	8000560 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	468e      	mov	lr, r1
 8000270:	4604      	mov	r4, r0
 8000272:	4688      	mov	r8, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d962      	bls.n	8000344 <__udivmoddi4+0xdc>
 800027e:	fab2 f682 	clz	r6, r2
 8000282:	b14e      	cbz	r6, 8000298 <__udivmoddi4+0x30>
 8000284:	f1c6 0320 	rsb	r3, r6, #32
 8000288:	fa01 f806 	lsl.w	r8, r1, r6
 800028c:	fa20 f303 	lsr.w	r3, r0, r3
 8000290:	40b7      	lsls	r7, r6
 8000292:	ea43 0808 	orr.w	r8, r3, r8
 8000296:	40b4      	lsls	r4, r6
 8000298:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800029c:	fa1f fc87 	uxth.w	ip, r7
 80002a0:	fbb8 f1fe 	udiv	r1, r8, lr
 80002a4:	0c23      	lsrs	r3, r4, #16
 80002a6:	fb0e 8811 	mls	r8, lr, r1, r8
 80002aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ae:	fb01 f20c 	mul.w	r2, r1, ip
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002bc:	f080 80ea 	bcs.w	8000494 <__udivmoddi4+0x22c>
 80002c0:	429a      	cmp	r2, r3
 80002c2:	f240 80e7 	bls.w	8000494 <__udivmoddi4+0x22c>
 80002c6:	3902      	subs	r1, #2
 80002c8:	443b      	add	r3, r7
 80002ca:	1a9a      	subs	r2, r3, r2
 80002cc:	b2a3      	uxth	r3, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002da:	fb00 fc0c 	mul.w	ip, r0, ip
 80002de:	459c      	cmp	ip, r3
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0x8e>
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e8:	f080 80d6 	bcs.w	8000498 <__udivmoddi4+0x230>
 80002ec:	459c      	cmp	ip, r3
 80002ee:	f240 80d3 	bls.w	8000498 <__udivmoddi4+0x230>
 80002f2:	443b      	add	r3, r7
 80002f4:	3802      	subs	r0, #2
 80002f6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fa:	eba3 030c 	sub.w	r3, r3, ip
 80002fe:	2100      	movs	r1, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0xa2>
 8000302:	40f3      	lsrs	r3, r6
 8000304:	2200      	movs	r2, #0
 8000306:	e9c5 3200 	strd	r3, r2, [r5]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d905      	bls.n	800031e <__udivmoddi4+0xb6>
 8000312:	b10d      	cbz	r5, 8000318 <__udivmoddi4+0xb0>
 8000314:	e9c5 0100 	strd	r0, r1, [r5]
 8000318:	2100      	movs	r1, #0
 800031a:	4608      	mov	r0, r1
 800031c:	e7f5      	b.n	800030a <__udivmoddi4+0xa2>
 800031e:	fab3 f183 	clz	r1, r3
 8000322:	2900      	cmp	r1, #0
 8000324:	d146      	bne.n	80003b4 <__udivmoddi4+0x14c>
 8000326:	4573      	cmp	r3, lr
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xc8>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 8105 	bhi.w	800053a <__udivmoddi4+0x2d2>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb6e 0203 	sbc.w	r2, lr, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4690      	mov	r8, r2
 800033a:	2d00      	cmp	r5, #0
 800033c:	d0e5      	beq.n	800030a <__udivmoddi4+0xa2>
 800033e:	e9c5 4800 	strd	r4, r8, [r5]
 8000342:	e7e2      	b.n	800030a <__udivmoddi4+0xa2>
 8000344:	2a00      	cmp	r2, #0
 8000346:	f000 8090 	beq.w	800046a <__udivmoddi4+0x202>
 800034a:	fab2 f682 	clz	r6, r2
 800034e:	2e00      	cmp	r6, #0
 8000350:	f040 80a4 	bne.w	800049c <__udivmoddi4+0x234>
 8000354:	1a8a      	subs	r2, r1, r2
 8000356:	0c03      	lsrs	r3, r0, #16
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	b280      	uxth	r0, r0
 800035e:	b2bc      	uxth	r4, r7
 8000360:	2101      	movs	r1, #1
 8000362:	fbb2 fcfe 	udiv	ip, r2, lr
 8000366:	fb0e 221c 	mls	r2, lr, ip, r2
 800036a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800036e:	fb04 f20c 	mul.w	r2, r4, ip
 8000372:	429a      	cmp	r2, r3
 8000374:	d907      	bls.n	8000386 <__udivmoddi4+0x11e>
 8000376:	18fb      	adds	r3, r7, r3
 8000378:	f10c 38ff 	add.w	r8, ip, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x11c>
 800037e:	429a      	cmp	r2, r3
 8000380:	f200 80e0 	bhi.w	8000544 <__udivmoddi4+0x2dc>
 8000384:	46c4      	mov	ip, r8
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	fbb3 f2fe 	udiv	r2, r3, lr
 800038c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000390:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000394:	fb02 f404 	mul.w	r4, r2, r4
 8000398:	429c      	cmp	r4, r3
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x144>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f102 30ff 	add.w	r0, r2, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x142>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f200 80ca 	bhi.w	800053e <__udivmoddi4+0x2d6>
 80003aa:	4602      	mov	r2, r0
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0x98>
 80003b4:	f1c1 0620 	rsb	r6, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 f706 	lsr.w	r7, r2, r6
 80003be:	431f      	orrs	r7, r3
 80003c0:	fa0e f401 	lsl.w	r4, lr, r1
 80003c4:	fa20 f306 	lsr.w	r3, r0, r6
 80003c8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003cc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d0:	4323      	orrs	r3, r4
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	fa1f fc87 	uxth.w	ip, r7
 80003da:	fbbe f0f9 	udiv	r0, lr, r9
 80003de:	0c1c      	lsrs	r4, r3, #16
 80003e0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003e4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003ec:	45a6      	cmp	lr, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d909      	bls.n	8000408 <__udivmoddi4+0x1a0>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003fa:	f080 809c 	bcs.w	8000536 <__udivmoddi4+0x2ce>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f240 8099 	bls.w	8000536 <__udivmoddi4+0x2ce>
 8000404:	3802      	subs	r0, #2
 8000406:	443c      	add	r4, r7
 8000408:	eba4 040e 	sub.w	r4, r4, lr
 800040c:	fa1f fe83 	uxth.w	lr, r3
 8000410:	fbb4 f3f9 	udiv	r3, r4, r9
 8000414:	fb09 4413 	mls	r4, r9, r3, r4
 8000418:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800041c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000420:	45a4      	cmp	ip, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1ce>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f103 3eff 	add.w	lr, r3, #4294967295
 800042a:	f080 8082 	bcs.w	8000532 <__udivmoddi4+0x2ca>
 800042e:	45a4      	cmp	ip, r4
 8000430:	d97f      	bls.n	8000532 <__udivmoddi4+0x2ca>
 8000432:	3b02      	subs	r3, #2
 8000434:	443c      	add	r4, r7
 8000436:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000442:	4564      	cmp	r4, ip
 8000444:	4673      	mov	r3, lr
 8000446:	46e1      	mov	r9, ip
 8000448:	d362      	bcc.n	8000510 <__udivmoddi4+0x2a8>
 800044a:	d05f      	beq.n	800050c <__udivmoddi4+0x2a4>
 800044c:	b15d      	cbz	r5, 8000466 <__udivmoddi4+0x1fe>
 800044e:	ebb8 0203 	subs.w	r2, r8, r3
 8000452:	eb64 0409 	sbc.w	r4, r4, r9
 8000456:	fa04 f606 	lsl.w	r6, r4, r6
 800045a:	fa22 f301 	lsr.w	r3, r2, r1
 800045e:	431e      	orrs	r6, r3
 8000460:	40cc      	lsrs	r4, r1
 8000462:	e9c5 6400 	strd	r6, r4, [r5]
 8000466:	2100      	movs	r1, #0
 8000468:	e74f      	b.n	800030a <__udivmoddi4+0xa2>
 800046a:	fbb1 fcf2 	udiv	ip, r1, r2
 800046e:	0c01      	lsrs	r1, r0, #16
 8000470:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000474:	b280      	uxth	r0, r0
 8000476:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800047a:	463b      	mov	r3, r7
 800047c:	4638      	mov	r0, r7
 800047e:	463c      	mov	r4, r7
 8000480:	46b8      	mov	r8, r7
 8000482:	46be      	mov	lr, r7
 8000484:	2620      	movs	r6, #32
 8000486:	fbb1 f1f7 	udiv	r1, r1, r7
 800048a:	eba2 0208 	sub.w	r2, r2, r8
 800048e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000492:	e766      	b.n	8000362 <__udivmoddi4+0xfa>
 8000494:	4601      	mov	r1, r0
 8000496:	e718      	b.n	80002ca <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e72c      	b.n	80002f6 <__udivmoddi4+0x8e>
 800049c:	f1c6 0220 	rsb	r2, r6, #32
 80004a0:	fa2e f302 	lsr.w	r3, lr, r2
 80004a4:	40b7      	lsls	r7, r6
 80004a6:	40b1      	lsls	r1, r6
 80004a8:	fa20 f202 	lsr.w	r2, r0, r2
 80004ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b0:	430a      	orrs	r2, r1
 80004b2:	fbb3 f8fe 	udiv	r8, r3, lr
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	fb0e 3318 	mls	r3, lr, r8, r3
 80004bc:	0c11      	lsrs	r1, r2, #16
 80004be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c2:	fb08 f904 	mul.w	r9, r8, r4
 80004c6:	40b0      	lsls	r0, r6
 80004c8:	4589      	cmp	r9, r1
 80004ca:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ce:	b280      	uxth	r0, r0
 80004d0:	d93e      	bls.n	8000550 <__udivmoddi4+0x2e8>
 80004d2:	1879      	adds	r1, r7, r1
 80004d4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d8:	d201      	bcs.n	80004de <__udivmoddi4+0x276>
 80004da:	4589      	cmp	r9, r1
 80004dc:	d81f      	bhi.n	800051e <__udivmoddi4+0x2b6>
 80004de:	eba1 0109 	sub.w	r1, r1, r9
 80004e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e6:	fb09 f804 	mul.w	r8, r9, r4
 80004ea:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ee:	b292      	uxth	r2, r2
 80004f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f4:	4542      	cmp	r2, r8
 80004f6:	d229      	bcs.n	800054c <__udivmoddi4+0x2e4>
 80004f8:	18ba      	adds	r2, r7, r2
 80004fa:	f109 31ff 	add.w	r1, r9, #4294967295
 80004fe:	d2c4      	bcs.n	800048a <__udivmoddi4+0x222>
 8000500:	4542      	cmp	r2, r8
 8000502:	d2c2      	bcs.n	800048a <__udivmoddi4+0x222>
 8000504:	f1a9 0102 	sub.w	r1, r9, #2
 8000508:	443a      	add	r2, r7
 800050a:	e7be      	b.n	800048a <__udivmoddi4+0x222>
 800050c:	45f0      	cmp	r8, lr
 800050e:	d29d      	bcs.n	800044c <__udivmoddi4+0x1e4>
 8000510:	ebbe 0302 	subs.w	r3, lr, r2
 8000514:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000518:	3801      	subs	r0, #1
 800051a:	46e1      	mov	r9, ip
 800051c:	e796      	b.n	800044c <__udivmoddi4+0x1e4>
 800051e:	eba7 0909 	sub.w	r9, r7, r9
 8000522:	4449      	add	r1, r9
 8000524:	f1a8 0c02 	sub.w	ip, r8, #2
 8000528:	fbb1 f9fe 	udiv	r9, r1, lr
 800052c:	fb09 f804 	mul.w	r8, r9, r4
 8000530:	e7db      	b.n	80004ea <__udivmoddi4+0x282>
 8000532:	4673      	mov	r3, lr
 8000534:	e77f      	b.n	8000436 <__udivmoddi4+0x1ce>
 8000536:	4650      	mov	r0, sl
 8000538:	e766      	b.n	8000408 <__udivmoddi4+0x1a0>
 800053a:	4608      	mov	r0, r1
 800053c:	e6fd      	b.n	800033a <__udivmoddi4+0xd2>
 800053e:	443b      	add	r3, r7
 8000540:	3a02      	subs	r2, #2
 8000542:	e733      	b.n	80003ac <__udivmoddi4+0x144>
 8000544:	f1ac 0c02 	sub.w	ip, ip, #2
 8000548:	443b      	add	r3, r7
 800054a:	e71c      	b.n	8000386 <__udivmoddi4+0x11e>
 800054c:	4649      	mov	r1, r9
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x222>
 8000550:	eba1 0109 	sub.w	r1, r1, r9
 8000554:	46c4      	mov	ip, r8
 8000556:	fbb1 f9fe 	udiv	r9, r1, lr
 800055a:	fb09 f804 	mul.w	r8, r9, r4
 800055e:	e7c4      	b.n	80004ea <__udivmoddi4+0x282>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <Interpret_Commands>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Interpret commands
void Interpret_Commands(uint8_t *rx_buffer) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	if (strstr((const char * ) rx_buffer, "jrdy")) {
 800056c:	490d      	ldr	r1, [pc, #52]	@ (80005a4 <Interpret_Commands+0x40>)
 800056e:	6878      	ldr	r0, [r7, #4]
 8000570:	f003 fc45 	bl	8003dfe <strstr>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d004      	beq.n	8000584 <Interpret_Commands+0x20>
		Send_to_Base('0', test1, 1);
 800057a:	2201      	movs	r2, #1
 800057c:	490a      	ldr	r1, [pc, #40]	@ (80005a8 <Interpret_Commands+0x44>)
 800057e:	2030      	movs	r0, #48	@ 0x30
 8000580:	f000 f818 	bl	80005b4 <Send_to_Base>
	}
	if (strstr((const char * ) rx_buffer, "poll")) {
 8000584:	4909      	ldr	r1, [pc, #36]	@ (80005ac <Interpret_Commands+0x48>)
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	f003 fc39 	bl	8003dfe <strstr>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d004      	beq.n	800059c <Interpret_Commands+0x38>
		Send_to_Base('0', test2, 1);
 8000592:	2201      	movs	r2, #1
 8000594:	4906      	ldr	r1, [pc, #24]	@ (80005b0 <Interpret_Commands+0x4c>)
 8000596:	2030      	movs	r0, #48	@ 0x30
 8000598:	f000 f80c 	bl	80005b4 <Send_to_Base>
	}
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	08003e8c 	.word	0x08003e8c
 80005a8:	20000000 	.word	0x20000000
 80005ac:	08003e94 	.word	0x08003e94
 80005b0:	20000008 	.word	0x20000008

080005b4 <Send_to_Base>:

// Function to send bytes to Base
void Send_to_Base (uint8_t addr, uint8_t *data, uint8_t is_ready) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	6039      	str	r1, [r7, #0]
 80005be:	71fb      	strb	r3, [r7, #7]
 80005c0:	4613      	mov	r3, r2
 80005c2:	71bb      	strb	r3, [r7, #6]
	while (base_state != BASE_STATE_READY) {}
 80005c4:	bf00      	nop
 80005c6:	4b17      	ldr	r3, [pc, #92]	@ (8000624 <Send_to_Base+0x70>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d1fa      	bne.n	80005c6 <Send_to_Base+0x12>
	// Assign address
	base_tx_buffer[0] = addr;
 80005d0:	4a15      	ldr	r2, [pc, #84]	@ (8000628 <Send_to_Base+0x74>)
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	7013      	strb	r3, [r2, #0]
	// Assign data (until before the last byte)
	for (int i = 1; i < BUFFER_SIZE - 1; i++) {
 80005d6:	2301      	movs	r3, #1
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	e00c      	b.n	80005f6 <Send_to_Base+0x42>
		base_tx_buffer[i] = data[i - 1];
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	3b01      	subs	r3, #1
 80005e0:	683a      	ldr	r2, [r7, #0]
 80005e2:	4413      	add	r3, r2
 80005e4:	7819      	ldrb	r1, [r3, #0]
 80005e6:	4a10      	ldr	r2, [pc, #64]	@ (8000628 <Send_to_Base+0x74>)
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4413      	add	r3, r2
 80005ec:	460a      	mov	r2, r1
 80005ee:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < BUFFER_SIZE - 1; i++) {
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	3301      	adds	r3, #1
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	ddef      	ble.n	80005dc <Send_to_Base+0x28>
	}
	// Assign status byte
	if (is_ready) {
 80005fc:	79bb      	ldrb	r3, [r7, #6]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d003      	beq.n	800060a <Send_to_Base+0x56>
		base_tx_buffer[BUFFER_SIZE - 1] = 'r';
 8000602:	4b09      	ldr	r3, [pc, #36]	@ (8000628 <Send_to_Base+0x74>)
 8000604:	2272      	movs	r2, #114	@ 0x72
 8000606:	71da      	strb	r2, [r3, #7]
 8000608:	e002      	b.n	8000610 <Send_to_Base+0x5c>
	}
	else {
		base_tx_buffer[BUFFER_SIZE - 1] = 'n';
 800060a:	4b07      	ldr	r3, [pc, #28]	@ (8000628 <Send_to_Base+0x74>)
 800060c:	226e      	movs	r2, #110	@ 0x6e
 800060e:	71da      	strb	r2, [r3, #7]
	}
	// Transmit data packet
	HAL_UART_Transmit_IT(&huart2, base_tx_buffer, BUFFER_SIZE);
 8000610:	2208      	movs	r2, #8
 8000612:	4905      	ldr	r1, [pc, #20]	@ (8000628 <Send_to_Base+0x74>)
 8000614:	4805      	ldr	r0, [pc, #20]	@ (800062c <Send_to_Base+0x78>)
 8000616:	f002 f857 	bl	80026c8 <HAL_UART_Transmit_IT>
}
 800061a:	bf00      	nop
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200000d0 	.word	0x200000d0
 8000628:	200000c8 	.word	0x200000c8
 800062c:	20000038 	.word	0x20000038

08000630 <Receive_from_Base>:

// Function to Receive bytes from Base
void Receive_from_Base(void) {
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, base_rx_buffer, BUFFER_SIZE);
 8000634:	2208      	movs	r2, #8
 8000636:	4903      	ldr	r1, [pc, #12]	@ (8000644 <Receive_from_Base+0x14>)
 8000638:	4803      	ldr	r0, [pc, #12]	@ (8000648 <Receive_from_Base+0x18>)
 800063a:	f002 f8a3 	bl	8002784 <HAL_UART_Receive_IT>
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	200000c0 	.word	0x200000c0
 8000648:	20000038 	.word	0x20000038

0800064c <HAL_UART_TxCpltCallback>:

// Callback function after transmitting data
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart2.Instance) {
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <HAL_UART_TxCpltCallback+0x28>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	429a      	cmp	r2, r3
 800065e:	d104      	bne.n	800066a <HAL_UART_TxCpltCallback+0x1e>
		// Transmission fully complete, now wait until robot sends data
		base_state = BASE_STATE_BUSY;
 8000660:	4b05      	ldr	r3, [pc, #20]	@ (8000678 <HAL_UART_TxCpltCallback+0x2c>)
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]
		Receive_from_Base();
 8000666:	f7ff ffe3 	bl	8000630 <Receive_from_Base>
	}
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000038 	.word	0x20000038
 8000678:	200000d0 	.word	0x200000d0

0800067c <HAL_UART_RxCpltCallback>:

// Callback function after receiving data
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart2.Instance) {
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	4b0a      	ldr	r3, [pc, #40]	@ (80006b4 <HAL_UART_RxCpltCallback+0x38>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	429a      	cmp	r2, r3
 800068e:	d10d      	bne.n	80006ac <HAL_UART_RxCpltCallback+0x30>
		// Ready?
		if (base_rx_buffer[BUFFER_SIZE - 1] == 'r') {
 8000690:	4b09      	ldr	r3, [pc, #36]	@ (80006b8 <HAL_UART_RxCpltCallback+0x3c>)
 8000692:	79db      	ldrb	r3, [r3, #7]
 8000694:	2b72      	cmp	r3, #114	@ 0x72
 8000696:	d102      	bne.n	800069e <HAL_UART_RxCpltCallback+0x22>
			base_state = BASE_STATE_READY;
 8000698:	4b08      	ldr	r3, [pc, #32]	@ (80006bc <HAL_UART_RxCpltCallback+0x40>)
 800069a:	2201      	movs	r2, #1
 800069c:	701a      	strb	r2, [r3, #0]
		}
		// Is this for Robot?
		if (base_rx_buffer[0] == '2') {
 800069e:	4b06      	ldr	r3, [pc, #24]	@ (80006b8 <HAL_UART_RxCpltCallback+0x3c>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b32      	cmp	r3, #50	@ 0x32
 80006a4:	d102      	bne.n	80006ac <HAL_UART_RxCpltCallback+0x30>
			// Interpret commands
			Interpret_Commands(base_rx_buffer);
 80006a6:	4804      	ldr	r0, [pc, #16]	@ (80006b8 <HAL_UART_RxCpltCallback+0x3c>)
 80006a8:	f7ff ff5c 	bl	8000564 <Interpret_Commands>
		}
	}
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000038 	.word	0x20000038
 80006b8:	200000c0 	.word	0x200000c0
 80006bc:	200000d0 	.word	0x200000d0

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006c4:	f000 f8f8 	bl	80008b8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c8:	f000 fa27 	bl	8000b1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006cc:	f000 f814 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d0:	f000 f8b2 	bl	8000838 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006d4:	f000 f880 	bl	80007d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Receive_from_Base();  // Start receiving from base
 80006d8:	f7ff ffaa 	bl	8000630 <Receive_from_Base>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 80006dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006e0:	4804      	ldr	r0, [pc, #16]	@ (80006f4 <main+0x34>)
 80006e2:	f000 fe7c 	bl	80013de <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80006e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006ea:	f000 fa73 	bl	8000bd4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 80006ee:	bf00      	nop
 80006f0:	e7f4      	b.n	80006dc <main+0x1c>
 80006f2:	bf00      	nop
 80006f4:	40020400 	.word	0x40020400

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b094      	sub	sp, #80	@ 0x50
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	2234      	movs	r2, #52	@ 0x34
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f003 fb71 	bl	8003dee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800071c:	4b2c      	ldr	r3, [pc, #176]	@ (80007d0 <SystemClock_Config+0xd8>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000720:	4a2b      	ldr	r2, [pc, #172]	@ (80007d0 <SystemClock_Config+0xd8>)
 8000722:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000726:	6413      	str	r3, [r2, #64]	@ 0x40
 8000728:	4b29      	ldr	r3, [pc, #164]	@ (80007d0 <SystemClock_Config+0xd8>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000734:	4b27      	ldr	r3, [pc, #156]	@ (80007d4 <SystemClock_Config+0xdc>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800073c:	4a25      	ldr	r2, [pc, #148]	@ (80007d4 <SystemClock_Config+0xdc>)
 800073e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000742:	6013      	str	r3, [r2, #0]
 8000744:	4b23      	ldr	r3, [pc, #140]	@ (80007d4 <SystemClock_Config+0xdc>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000750:	2302      	movs	r3, #2
 8000752:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000754:	2301      	movs	r3, #1
 8000756:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000758:	2310      	movs	r3, #16
 800075a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075c:	2302      	movs	r3, #2
 800075e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000760:	2300      	movs	r3, #0
 8000762:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000764:	2310      	movs	r3, #16
 8000766:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000768:	23c0      	movs	r3, #192	@ 0xc0
 800076a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800076c:	2302      	movs	r3, #2
 800076e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000770:	2302      	movs	r3, #2
 8000772:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000774:	2302      	movs	r3, #2
 8000776:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000778:	f107 031c 	add.w	r3, r7, #28
 800077c:	4618      	mov	r0, r3
 800077e:	f000 fe99 	bl	80014b4 <HAL_RCC_OscConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000788:	f000 f8c2 	bl	8000910 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800078c:	f000 fe42 	bl	8001414 <HAL_PWREx_EnableOverDrive>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000796:	f000 f8bb 	bl	8000910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079a:	230f      	movs	r3, #15
 800079c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079e:	2302      	movs	r3, #2
 80007a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007b0:	f107 0308 	add.w	r3, r7, #8
 80007b4:	2103      	movs	r1, #3
 80007b6:	4618      	mov	r0, r3
 80007b8:	f001 f92a 	bl	8001a10 <HAL_RCC_ClockConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80007c2:	f000 f8a5 	bl	8000910 <Error_Handler>
  }
}
 80007c6:	bf00      	nop
 80007c8:	3750      	adds	r7, #80	@ 0x50
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40007000 	.word	0x40007000

080007d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007dc:	4b14      	ldr	r3, [pc, #80]	@ (8000830 <MX_USART2_UART_Init+0x58>)
 80007de:	4a15      	ldr	r2, [pc, #84]	@ (8000834 <MX_USART2_UART_Init+0x5c>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007e2:	4b13      	ldr	r3, [pc, #76]	@ (8000830 <MX_USART2_UART_Init+0x58>)
 80007e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <MX_USART2_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <MX_USART2_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <MX_USART2_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <MX_USART2_UART_Init+0x58>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	@ (8000830 <MX_USART2_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <MX_USART2_UART_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080e:	4b08      	ldr	r3, [pc, #32]	@ (8000830 <MX_USART2_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000814:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <MX_USART2_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	@ (8000830 <MX_USART2_UART_Init+0x58>)
 800081c:	f001 ff06 	bl	800262c <HAL_UART_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000826:	f000 f873 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000038 	.word	0x20000038
 8000834:	40004400 	.word	0x40004400

08000838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	4b18      	ldr	r3, [pc, #96]	@ (80008b0 <MX_GPIO_Init+0x78>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a17      	ldr	r2, [pc, #92]	@ (80008b0 <MX_GPIO_Init+0x78>)
 8000854:	f043 0302 	orr.w	r3, r3, #2
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b15      	ldr	r3, [pc, #84]	@ (80008b0 <MX_GPIO_Init+0x78>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000866:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <MX_GPIO_Init+0x78>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a11      	ldr	r2, [pc, #68]	@ (80008b0 <MX_GPIO_Init+0x78>)
 800086c:	f043 0308 	orr.w	r3, r3, #8
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <MX_GPIO_Init+0x78>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0308 	and.w	r3, r3, #8
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000884:	480b      	ldr	r0, [pc, #44]	@ (80008b4 <MX_GPIO_Init+0x7c>)
 8000886:	f000 fd91 	bl	80013ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800088a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800088e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	4619      	mov	r1, r3
 80008a2:	4804      	ldr	r0, [pc, #16]	@ (80008b4 <MX_GPIO_Init+0x7c>)
 80008a4:	f000 fbd6 	bl	8001054 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008a8:	bf00      	nop
 80008aa:	3720      	adds	r7, #32
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40020400 	.word	0x40020400

080008b8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80008be:	463b      	mov	r3, r7
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80008ca:	f000 fab9 	bl	8000e40 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80008ce:	2301      	movs	r3, #1
 80008d0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80008da:	231f      	movs	r3, #31
 80008dc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80008de:	2387      	movs	r3, #135	@ 0x87
 80008e0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80008e6:	2300      	movs	r3, #0
 80008e8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80008ea:	2301      	movs	r3, #1
 80008ec:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80008ee:	2301      	movs	r3, #1
 80008f0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80008f2:	2300      	movs	r3, #0
 80008f4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008fa:	463b      	mov	r3, r7
 80008fc:	4618      	mov	r0, r3
 80008fe:	f000 fad7 	bl	8000eb0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000902:	2004      	movs	r0, #4
 8000904:	f000 fab4 	bl	8000e70 <HAL_MPU_Enable>

}
 8000908:	bf00      	nop
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
}
 8000916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <Error_Handler+0x8>

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <HAL_MspInit+0x44>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000926:	4a0e      	ldr	r2, [pc, #56]	@ (8000960 <HAL_MspInit+0x44>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800092c:	6413      	str	r3, [r2, #64]	@ 0x40
 800092e:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <HAL_MspInit+0x44>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <HAL_MspInit+0x44>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093e:	4a08      	ldr	r2, [pc, #32]	@ (8000960 <HAL_MspInit+0x44>)
 8000940:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000944:	6453      	str	r3, [r2, #68]	@ 0x44
 8000946:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <HAL_MspInit+0x44>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800

08000964 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b0ae      	sub	sp, #184	@ 0xb8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	2290      	movs	r2, #144	@ 0x90
 8000982:	2100      	movs	r1, #0
 8000984:	4618      	mov	r0, r3
 8000986:	f003 fa32 	bl	8003dee <memset>
  if(huart->Instance==USART2)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a25      	ldr	r2, [pc, #148]	@ (8000a24 <HAL_UART_MspInit+0xc0>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d142      	bne.n	8000a1a <HAL_UART_MspInit+0xb6>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000994:	2380      	movs	r3, #128	@ 0x80
 8000996:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000998:	2300      	movs	r3, #0
 800099a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4618      	mov	r0, r3
 80009a2:	f001 fa1b 	bl	8001ddc <HAL_RCCEx_PeriphCLKConfig>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009ac:	f7ff ffb0 	bl	8000910 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <HAL_UART_MspInit+0xc4>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b4:	4a1c      	ldr	r2, [pc, #112]	@ (8000a28 <HAL_UART_MspInit+0xc4>)
 80009b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80009bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a28 <HAL_UART_MspInit+0xc4>)
 80009be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c8:	4b17      	ldr	r3, [pc, #92]	@ (8000a28 <HAL_UART_MspInit+0xc4>)
 80009ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009cc:	4a16      	ldr	r2, [pc, #88]	@ (8000a28 <HAL_UART_MspInit+0xc4>)
 80009ce:	f043 0308 	orr.w	r3, r3, #8
 80009d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d4:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <HAL_UART_MspInit+0xc4>)
 80009d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d8:	f003 0308 	and.w	r3, r3, #8
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80009e0:	2360      	movs	r3, #96	@ 0x60
 80009e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009f8:	2307      	movs	r3, #7
 80009fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009fe:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000a02:	4619      	mov	r1, r3
 8000a04:	4809      	ldr	r0, [pc, #36]	@ (8000a2c <HAL_UART_MspInit+0xc8>)
 8000a06:	f000 fb25 	bl	8001054 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	2026      	movs	r0, #38	@ 0x26
 8000a10:	f000 f9df 	bl	8000dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a14:	2026      	movs	r0, #38	@ 0x26
 8000a16:	f000 f9f8 	bl	8000e0a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a1a:	bf00      	nop
 8000a1c:	37b8      	adds	r7, #184	@ 0xb8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40004400 	.word	0x40004400
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020c00 	.word	0x40020c00

08000a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <NMI_Handler+0x4>

08000a38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <HardFault_Handler+0x4>

08000a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <MemManage_Handler+0x4>

08000a48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <BusFault_Handler+0x4>

08000a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <UsageFault_Handler+0x4>

08000a58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a86:	f000 f885 	bl	8000b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a94:	4802      	ldr	r0, [pc, #8]	@ (8000aa0 <USART2_IRQHandler+0x10>)
 8000a96:	f001 feb9 	bl	800280c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000038 	.word	0x20000038

08000aa4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa8:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <SystemInit+0x20>)
 8000aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aae:	4a05      	ldr	r2, [pc, #20]	@ (8000ac4 <SystemInit+0x20>)
 8000ab0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ab4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ac8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000acc:	f7ff ffea 	bl	8000aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ad0:	480c      	ldr	r0, [pc, #48]	@ (8000b04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ad2:	490d      	ldr	r1, [pc, #52]	@ (8000b08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8000b0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad8:	e002      	b.n	8000ae0 <LoopCopyDataInit>

08000ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ade:	3304      	adds	r3, #4

08000ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae4:	d3f9      	bcc.n	8000ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ae8:	4c0a      	ldr	r4, [pc, #40]	@ (8000b14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aec:	e001      	b.n	8000af2 <LoopFillZerobss>

08000aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af0:	3204      	adds	r2, #4

08000af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af4:	d3fb      	bcc.n	8000aee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000af6:	f003 f999 	bl	8003e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000afa:	f7ff fde1 	bl	80006c0 <main>
  bx  lr    
 8000afe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b00:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b08:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000b0c:	08003ec4 	.word	0x08003ec4
  ldr r2, =_sbss
 8000b10:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000b14:	200000d8 	.word	0x200000d8

08000b18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b18:	e7fe      	b.n	8000b18 <ADC_IRQHandler>

08000b1a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b1e:	2003      	movs	r0, #3
 8000b20:	f000 f94c 	bl	8000dbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b24:	200f      	movs	r0, #15
 8000b26:	f000 f805 	bl	8000b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b2a:	f7ff fef7 	bl	800091c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b2e:	2300      	movs	r3, #0
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b3c:	4b12      	ldr	r3, [pc, #72]	@ (8000b88 <HAL_InitTick+0x54>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b12      	ldr	r3, [pc, #72]	@ (8000b8c <HAL_InitTick+0x58>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	4619      	mov	r1, r3
 8000b46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 f967 	bl	8000e26 <HAL_SYSTICK_Config>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e00e      	b.n	8000b80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b0f      	cmp	r3, #15
 8000b66:	d80a      	bhi.n	8000b7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	6879      	ldr	r1, [r7, #4]
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b70:	f000 f92f 	bl	8000dd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b74:	4a06      	ldr	r2, [pc, #24]	@ (8000b90 <HAL_InitTick+0x5c>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e000      	b.n	8000b80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000010 	.word	0x20000010
 8000b8c:	20000018 	.word	0x20000018
 8000b90:	20000014 	.word	0x20000014

08000b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b98:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <HAL_IncTick+0x20>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <HAL_IncTick+0x24>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	4a04      	ldr	r2, [pc, #16]	@ (8000bb8 <HAL_IncTick+0x24>)
 8000ba6:	6013      	str	r3, [r2, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	20000018 	.word	0x20000018
 8000bb8:	200000d4 	.word	0x200000d4

08000bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc0:	4b03      	ldr	r3, [pc, #12]	@ (8000bd0 <HAL_GetTick+0x14>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	200000d4 	.word	0x200000d4

08000bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bdc:	f7ff ffee 	bl	8000bbc <HAL_GetTick>
 8000be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bec:	d005      	beq.n	8000bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bee:	4b0a      	ldr	r3, [pc, #40]	@ (8000c18 <HAL_Delay+0x44>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bfa:	bf00      	nop
 8000bfc:	f7ff ffde 	bl	8000bbc <HAL_GetTick>
 8000c00:	4602      	mov	r2, r0
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d8f7      	bhi.n	8000bfc <HAL_Delay+0x28>
  {
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	bf00      	nop
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000018 	.word	0x20000018

08000c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c5c <__NVIC_SetPriorityGrouping+0x40>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c44:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <__NVIC_SetPriorityGrouping+0x44>)
 8000c46:	4313      	orrs	r3, r2
 8000c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4a:	4a04      	ldr	r2, [pc, #16]	@ (8000c5c <__NVIC_SetPriorityGrouping+0x40>)
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	60d3      	str	r3, [r2, #12]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00
 8000c60:	05fa0000 	.word	0x05fa0000

08000c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c68:	4b04      	ldr	r3, [pc, #16]	@ (8000c7c <__NVIC_GetPriorityGrouping+0x18>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	0a1b      	lsrs	r3, r3, #8
 8000c6e:	f003 0307 	and.w	r3, r3, #7
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	db0b      	blt.n	8000caa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	f003 021f 	and.w	r2, r3, #31
 8000c98:	4907      	ldr	r1, [pc, #28]	@ (8000cb8 <__NVIC_EnableIRQ+0x38>)
 8000c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9e:	095b      	lsrs	r3, r3, #5
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000e100 	.word	0xe000e100

08000cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	6039      	str	r1, [r7, #0]
 8000cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	db0a      	blt.n	8000ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	490c      	ldr	r1, [pc, #48]	@ (8000d08 <__NVIC_SetPriority+0x4c>)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	0112      	lsls	r2, r2, #4
 8000cdc:	b2d2      	uxtb	r2, r2
 8000cde:	440b      	add	r3, r1
 8000ce0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce4:	e00a      	b.n	8000cfc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4908      	ldr	r1, [pc, #32]	@ (8000d0c <__NVIC_SetPriority+0x50>)
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	f003 030f 	and.w	r3, r3, #15
 8000cf2:	3b04      	subs	r3, #4
 8000cf4:	0112      	lsls	r2, r2, #4
 8000cf6:	b2d2      	uxtb	r2, r2
 8000cf8:	440b      	add	r3, r1
 8000cfa:	761a      	strb	r2, [r3, #24]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000e100 	.word	0xe000e100
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b089      	sub	sp, #36	@ 0x24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	f1c3 0307 	rsb	r3, r3, #7
 8000d2a:	2b04      	cmp	r3, #4
 8000d2c:	bf28      	it	cs
 8000d2e:	2304      	movcs	r3, #4
 8000d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3304      	adds	r3, #4
 8000d36:	2b06      	cmp	r3, #6
 8000d38:	d902      	bls.n	8000d40 <NVIC_EncodePriority+0x30>
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3b03      	subs	r3, #3
 8000d3e:	e000      	b.n	8000d42 <NVIC_EncodePriority+0x32>
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d44:	f04f 32ff 	mov.w	r2, #4294967295
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43da      	mvns	r2, r3
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	401a      	ands	r2, r3
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d58:	f04f 31ff 	mov.w	r1, #4294967295
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d62:	43d9      	mvns	r1, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	4313      	orrs	r3, r2
         );
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3724      	adds	r7, #36	@ 0x24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
	...

08000d78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d88:	d301      	bcc.n	8000d8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e00f      	b.n	8000dae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000db8 <SysTick_Config+0x40>)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d96:	210f      	movs	r1, #15
 8000d98:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9c:	f7ff ff8e 	bl	8000cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da0:	4b05      	ldr	r3, [pc, #20]	@ (8000db8 <SysTick_Config+0x40>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da6:	4b04      	ldr	r3, [pc, #16]	@ (8000db8 <SysTick_Config+0x40>)
 8000da8:	2207      	movs	r2, #7
 8000daa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	e000e010 	.word	0xe000e010

08000dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff ff29 	bl	8000c1c <__NVIC_SetPriorityGrouping>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b086      	sub	sp, #24
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	4603      	mov	r3, r0
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	607a      	str	r2, [r7, #4]
 8000dde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de4:	f7ff ff3e 	bl	8000c64 <__NVIC_GetPriorityGrouping>
 8000de8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	68b9      	ldr	r1, [r7, #8]
 8000dee:	6978      	ldr	r0, [r7, #20]
 8000df0:	f7ff ff8e 	bl	8000d10 <NVIC_EncodePriority>
 8000df4:	4602      	mov	r2, r0
 8000df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff5d 	bl	8000cbc <__NVIC_SetPriority>
}
 8000e02:	bf00      	nop
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	4603      	mov	r3, r0
 8000e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff31 	bl	8000c80 <__NVIC_EnableIRQ>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff ffa2 	bl	8000d78 <SysTick_Config>
 8000e34:	4603      	mov	r3, r0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000e44:	f3bf 8f5f 	dmb	sy
}
 8000e48:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000e4a:	4b07      	ldr	r3, [pc, #28]	@ (8000e68 <HAL_MPU_Disable+0x28>)
 8000e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e4e:	4a06      	ldr	r2, [pc, #24]	@ (8000e68 <HAL_MPU_Disable+0x28>)
 8000e50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e54:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000e56:	4b05      	ldr	r3, [pc, #20]	@ (8000e6c <HAL_MPU_Disable+0x2c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	605a      	str	r2, [r3, #4]
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000ed00 	.word	0xe000ed00
 8000e6c:	e000ed90 	.word	0xe000ed90

08000e70 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000e78:	4a0b      	ldr	r2, [pc, #44]	@ (8000ea8 <HAL_MPU_Enable+0x38>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000e82:	4b0a      	ldr	r3, [pc, #40]	@ (8000eac <HAL_MPU_Enable+0x3c>)
 8000e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e86:	4a09      	ldr	r2, [pc, #36]	@ (8000eac <HAL_MPU_Enable+0x3c>)
 8000e88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e8c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000e8e:	f3bf 8f4f 	dsb	sy
}
 8000e92:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e94:	f3bf 8f6f 	isb	sy
}
 8000e98:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000ed90 	.word	0xe000ed90
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	785a      	ldrb	r2, [r3, #1]
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f2c <HAL_MPU_ConfigRegion+0x7c>)
 8000ebe:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f2c <HAL_MPU_ConfigRegion+0x7c>)
 8000ec2:	691b      	ldr	r3, [r3, #16]
 8000ec4:	4a19      	ldr	r2, [pc, #100]	@ (8000f2c <HAL_MPU_ConfigRegion+0x7c>)
 8000ec6:	f023 0301 	bic.w	r3, r3, #1
 8000eca:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000ecc:	4a17      	ldr	r2, [pc, #92]	@ (8000f2c <HAL_MPU_ConfigRegion+0x7c>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	7b1b      	ldrb	r3, [r3, #12]
 8000ed8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	7adb      	ldrb	r3, [r3, #11]
 8000ede:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ee0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	7a9b      	ldrb	r3, [r3, #10]
 8000ee6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000ee8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	7b5b      	ldrb	r3, [r3, #13]
 8000eee:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000ef0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	7b9b      	ldrb	r3, [r3, #14]
 8000ef6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000ef8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	7bdb      	ldrb	r3, [r3, #15]
 8000efe:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000f00:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	7a5b      	ldrb	r3, [r3, #9]
 8000f06:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000f08:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	7a1b      	ldrb	r3, [r3, #8]
 8000f0e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000f10:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	7812      	ldrb	r2, [r2, #0]
 8000f16:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f18:	4a04      	ldr	r2, [pc, #16]	@ (8000f2c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000f1a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f1c:	6113      	str	r3, [r2, #16]
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000ed90 	.word	0xe000ed90

08000f30 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f3c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f3e:	f7ff fe3d 	bl	8000bbc <HAL_GetTick>
 8000f42:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d008      	beq.n	8000f62 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2280      	movs	r2, #128	@ 0x80
 8000f54:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e052      	b.n	8001008 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f022 0216 	bic.w	r2, r2, #22
 8000f70:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	695a      	ldr	r2, [r3, #20]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000f80:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d103      	bne.n	8000f92 <HAL_DMA_Abort+0x62>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d007      	beq.n	8000fa2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f022 0208 	bic.w	r2, r2, #8
 8000fa0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f022 0201 	bic.w	r2, r2, #1
 8000fb0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fb2:	e013      	b.n	8000fdc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fb4:	f7ff fe02 	bl	8000bbc <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b05      	cmp	r3, #5
 8000fc0:	d90c      	bls.n	8000fdc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2220      	movs	r2, #32
 8000fc6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2203      	movs	r2, #3
 8000fcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	e015      	b.n	8001008 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1e4      	bne.n	8000fb4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fee:	223f      	movs	r2, #63	@ 0x3f
 8000ff0:	409a      	lsls	r2, r3
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001006:	2300      	movs	r3, #0
}
 8001008:	4618      	mov	r0, r3
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d004      	beq.n	800102e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2280      	movs	r2, #128	@ 0x80
 8001028:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e00c      	b.n	8001048 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2205      	movs	r2, #5
 8001032:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f022 0201 	bic.w	r2, r2, #1
 8001044:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	@ 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001066:	2300      	movs	r3, #0
 8001068:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800106a:	2300      	movs	r3, #0
 800106c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
 8001072:	e175      	b.n	8001360 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001074:	2201      	movs	r2, #1
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	429a      	cmp	r2, r3
 800108e:	f040 8164 	bne.w	800135a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	2b01      	cmp	r3, #1
 800109c:	d005      	beq.n	80010aa <HAL_GPIO_Init+0x56>
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d130      	bne.n	800110c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	2203      	movs	r2, #3
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	68da      	ldr	r2, [r3, #12]
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010e0:	2201      	movs	r2, #1
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	091b      	lsrs	r3, r3, #4
 80010f6:	f003 0201 	and.w	r2, r3, #1
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 0303 	and.w	r3, r3, #3
 8001114:	2b03      	cmp	r3, #3
 8001116:	d017      	beq.n	8001148 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	2203      	movs	r2, #3
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d123      	bne.n	800119c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	08da      	lsrs	r2, r3, #3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3208      	adds	r2, #8
 800115c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	f003 0307 	and.w	r3, r3, #7
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	220f      	movs	r2, #15
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	691a      	ldr	r2, [r3, #16]
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	08da      	lsrs	r2, r3, #3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3208      	adds	r2, #8
 8001196:	69b9      	ldr	r1, [r7, #24]
 8001198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	2203      	movs	r2, #3
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 0203 	and.w	r2, r3, #3
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f000 80be 	beq.w	800135a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011de:	4b66      	ldr	r3, [pc, #408]	@ (8001378 <HAL_GPIO_Init+0x324>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e2:	4a65      	ldr	r2, [pc, #404]	@ (8001378 <HAL_GPIO_Init+0x324>)
 80011e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ea:	4b63      	ldr	r3, [pc, #396]	@ (8001378 <HAL_GPIO_Init+0x324>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80011f6:	4a61      	ldr	r2, [pc, #388]	@ (800137c <HAL_GPIO_Init+0x328>)
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	089b      	lsrs	r3, r3, #2
 80011fc:	3302      	adds	r3, #2
 80011fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	220f      	movs	r2, #15
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a58      	ldr	r2, [pc, #352]	@ (8001380 <HAL_GPIO_Init+0x32c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d037      	beq.n	8001292 <HAL_GPIO_Init+0x23e>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a57      	ldr	r2, [pc, #348]	@ (8001384 <HAL_GPIO_Init+0x330>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d031      	beq.n	800128e <HAL_GPIO_Init+0x23a>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a56      	ldr	r2, [pc, #344]	@ (8001388 <HAL_GPIO_Init+0x334>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d02b      	beq.n	800128a <HAL_GPIO_Init+0x236>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a55      	ldr	r2, [pc, #340]	@ (800138c <HAL_GPIO_Init+0x338>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d025      	beq.n	8001286 <HAL_GPIO_Init+0x232>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a54      	ldr	r2, [pc, #336]	@ (8001390 <HAL_GPIO_Init+0x33c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d01f      	beq.n	8001282 <HAL_GPIO_Init+0x22e>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a53      	ldr	r2, [pc, #332]	@ (8001394 <HAL_GPIO_Init+0x340>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d019      	beq.n	800127e <HAL_GPIO_Init+0x22a>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a52      	ldr	r2, [pc, #328]	@ (8001398 <HAL_GPIO_Init+0x344>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d013      	beq.n	800127a <HAL_GPIO_Init+0x226>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a51      	ldr	r2, [pc, #324]	@ (800139c <HAL_GPIO_Init+0x348>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d00d      	beq.n	8001276 <HAL_GPIO_Init+0x222>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a50      	ldr	r2, [pc, #320]	@ (80013a0 <HAL_GPIO_Init+0x34c>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d007      	beq.n	8001272 <HAL_GPIO_Init+0x21e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4f      	ldr	r2, [pc, #316]	@ (80013a4 <HAL_GPIO_Init+0x350>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d101      	bne.n	800126e <HAL_GPIO_Init+0x21a>
 800126a:	2309      	movs	r3, #9
 800126c:	e012      	b.n	8001294 <HAL_GPIO_Init+0x240>
 800126e:	230a      	movs	r3, #10
 8001270:	e010      	b.n	8001294 <HAL_GPIO_Init+0x240>
 8001272:	2308      	movs	r3, #8
 8001274:	e00e      	b.n	8001294 <HAL_GPIO_Init+0x240>
 8001276:	2307      	movs	r3, #7
 8001278:	e00c      	b.n	8001294 <HAL_GPIO_Init+0x240>
 800127a:	2306      	movs	r3, #6
 800127c:	e00a      	b.n	8001294 <HAL_GPIO_Init+0x240>
 800127e:	2305      	movs	r3, #5
 8001280:	e008      	b.n	8001294 <HAL_GPIO_Init+0x240>
 8001282:	2304      	movs	r3, #4
 8001284:	e006      	b.n	8001294 <HAL_GPIO_Init+0x240>
 8001286:	2303      	movs	r3, #3
 8001288:	e004      	b.n	8001294 <HAL_GPIO_Init+0x240>
 800128a:	2302      	movs	r3, #2
 800128c:	e002      	b.n	8001294 <HAL_GPIO_Init+0x240>
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <HAL_GPIO_Init+0x240>
 8001292:	2300      	movs	r3, #0
 8001294:	69fa      	ldr	r2, [r7, #28]
 8001296:	f002 0203 	and.w	r2, r2, #3
 800129a:	0092      	lsls	r2, r2, #2
 800129c:	4093      	lsls	r3, r2
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80012a4:	4935      	ldr	r1, [pc, #212]	@ (800137c <HAL_GPIO_Init+0x328>)
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	089b      	lsrs	r3, r3, #2
 80012aa:	3302      	adds	r3, #2
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012b2:	4b3d      	ldr	r3, [pc, #244]	@ (80013a8 <HAL_GPIO_Init+0x354>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012d6:	4a34      	ldr	r2, [pc, #208]	@ (80013a8 <HAL_GPIO_Init+0x354>)
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012dc:	4b32      	ldr	r3, [pc, #200]	@ (80013a8 <HAL_GPIO_Init+0x354>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001300:	4a29      	ldr	r2, [pc, #164]	@ (80013a8 <HAL_GPIO_Init+0x354>)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001306:	4b28      	ldr	r3, [pc, #160]	@ (80013a8 <HAL_GPIO_Init+0x354>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800132a:	4a1f      	ldr	r2, [pc, #124]	@ (80013a8 <HAL_GPIO_Init+0x354>)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001330:	4b1d      	ldr	r3, [pc, #116]	@ (80013a8 <HAL_GPIO_Init+0x354>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d003      	beq.n	8001354 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001354:	4a14      	ldr	r2, [pc, #80]	@ (80013a8 <HAL_GPIO_Init+0x354>)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3301      	adds	r3, #1
 800135e:	61fb      	str	r3, [r7, #28]
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	2b0f      	cmp	r3, #15
 8001364:	f67f ae86 	bls.w	8001074 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	3724      	adds	r7, #36	@ 0x24
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800
 800137c:	40013800 	.word	0x40013800
 8001380:	40020000 	.word	0x40020000
 8001384:	40020400 	.word	0x40020400
 8001388:	40020800 	.word	0x40020800
 800138c:	40020c00 	.word	0x40020c00
 8001390:	40021000 	.word	0x40021000
 8001394:	40021400 	.word	0x40021400
 8001398:	40021800 	.word	0x40021800
 800139c:	40021c00 	.word	0x40021c00
 80013a0:	40022000 	.word	0x40022000
 80013a4:	40022400 	.word	0x40022400
 80013a8:	40013c00 	.word	0x40013c00

080013ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]
 80013b8:	4613      	mov	r3, r2
 80013ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013bc:	787b      	ldrb	r3, [r7, #1]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013c2:	887a      	ldrh	r2, [r7, #2]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80013c8:	e003      	b.n	80013d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80013ca:	887b      	ldrh	r3, [r7, #2]
 80013cc:	041a      	lsls	r2, r3, #16
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	619a      	str	r2, [r3, #24]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013de:	b480      	push	{r7}
 80013e0:	b085      	sub	sp, #20
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	460b      	mov	r3, r1
 80013e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013f0:	887a      	ldrh	r2, [r7, #2]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	4013      	ands	r3, r2
 80013f6:	041a      	lsls	r2, r3, #16
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	43d9      	mvns	r1, r3
 80013fc:	887b      	ldrh	r3, [r7, #2]
 80013fe:	400b      	ands	r3, r1
 8001400:	431a      	orrs	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	619a      	str	r2, [r3, #24]
}
 8001406:	bf00      	nop
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800141e:	4b23      	ldr	r3, [pc, #140]	@ (80014ac <HAL_PWREx_EnableOverDrive+0x98>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001422:	4a22      	ldr	r2, [pc, #136]	@ (80014ac <HAL_PWREx_EnableOverDrive+0x98>)
 8001424:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001428:	6413      	str	r3, [r2, #64]	@ 0x40
 800142a:	4b20      	ldr	r3, [pc, #128]	@ (80014ac <HAL_PWREx_EnableOverDrive+0x98>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001432:	603b      	str	r3, [r7, #0]
 8001434:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001436:	4b1e      	ldr	r3, [pc, #120]	@ (80014b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a1d      	ldr	r2, [pc, #116]	@ (80014b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800143c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001440:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001442:	f7ff fbbb 	bl	8000bbc <HAL_GetTick>
 8001446:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001448:	e009      	b.n	800145e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800144a:	f7ff fbb7 	bl	8000bbc <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001458:	d901      	bls.n	800145e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e022      	b.n	80014a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800145e:	4b14      	ldr	r3, [pc, #80]	@ (80014b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001466:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800146a:	d1ee      	bne.n	800144a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800146c:	4b10      	ldr	r3, [pc, #64]	@ (80014b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a0f      	ldr	r2, [pc, #60]	@ (80014b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001472:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001476:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001478:	f7ff fba0 	bl	8000bbc <HAL_GetTick>
 800147c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800147e:	e009      	b.n	8001494 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001480:	f7ff fb9c 	bl	8000bbc <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800148e:	d901      	bls.n	8001494 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e007      	b.n	80014a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001494:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800149c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80014a0:	d1ee      	bne.n	8001480 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40007000 	.word	0x40007000

080014b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80014bc:	2300      	movs	r3, #0
 80014be:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e29b      	b.n	8001a02 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f000 8087 	beq.w	80015e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014d8:	4b96      	ldr	r3, [pc, #600]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f003 030c 	and.w	r3, r3, #12
 80014e0:	2b04      	cmp	r3, #4
 80014e2:	d00c      	beq.n	80014fe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014e4:	4b93      	ldr	r3, [pc, #588]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f003 030c 	and.w	r3, r3, #12
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	d112      	bne.n	8001516 <HAL_RCC_OscConfig+0x62>
 80014f0:	4b90      	ldr	r3, [pc, #576]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80014fc:	d10b      	bne.n	8001516 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014fe:	4b8d      	ldr	r3, [pc, #564]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d06c      	beq.n	80015e4 <HAL_RCC_OscConfig+0x130>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d168      	bne.n	80015e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e275      	b.n	8001a02 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800151e:	d106      	bne.n	800152e <HAL_RCC_OscConfig+0x7a>
 8001520:	4b84      	ldr	r3, [pc, #528]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a83      	ldr	r2, [pc, #524]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001526:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800152a:	6013      	str	r3, [r2, #0]
 800152c:	e02e      	b.n	800158c <HAL_RCC_OscConfig+0xd8>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10c      	bne.n	8001550 <HAL_RCC_OscConfig+0x9c>
 8001536:	4b7f      	ldr	r3, [pc, #508]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a7e      	ldr	r2, [pc, #504]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 800153c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	4b7c      	ldr	r3, [pc, #496]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a7b      	ldr	r2, [pc, #492]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001548:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	e01d      	b.n	800158c <HAL_RCC_OscConfig+0xd8>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001558:	d10c      	bne.n	8001574 <HAL_RCC_OscConfig+0xc0>
 800155a:	4b76      	ldr	r3, [pc, #472]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a75      	ldr	r2, [pc, #468]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001560:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	4b73      	ldr	r3, [pc, #460]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a72      	ldr	r2, [pc, #456]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 800156c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	e00b      	b.n	800158c <HAL_RCC_OscConfig+0xd8>
 8001574:	4b6f      	ldr	r3, [pc, #444]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a6e      	ldr	r2, [pc, #440]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 800157a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800157e:	6013      	str	r3, [r2, #0]
 8001580:	4b6c      	ldr	r3, [pc, #432]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a6b      	ldr	r2, [pc, #428]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001586:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800158a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d013      	beq.n	80015bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001594:	f7ff fb12 	bl	8000bbc <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800159c:	f7ff fb0e 	bl	8000bbc <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b64      	cmp	r3, #100	@ 0x64
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e229      	b.n	8001a02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ae:	4b61      	ldr	r3, [pc, #388]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0f0      	beq.n	800159c <HAL_RCC_OscConfig+0xe8>
 80015ba:	e014      	b.n	80015e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015bc:	f7ff fafe 	bl	8000bbc <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c4:	f7ff fafa 	bl	8000bbc <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b64      	cmp	r3, #100	@ 0x64
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e215      	b.n	8001a02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015d6:	4b57      	ldr	r3, [pc, #348]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x110>
 80015e2:	e000      	b.n	80015e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d069      	beq.n	80016c6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015f2:	4b50      	ldr	r3, [pc, #320]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 030c 	and.w	r3, r3, #12
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00b      	beq.n	8001616 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015fe:	4b4d      	ldr	r3, [pc, #308]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 030c 	and.w	r3, r3, #12
 8001606:	2b08      	cmp	r3, #8
 8001608:	d11c      	bne.n	8001644 <HAL_RCC_OscConfig+0x190>
 800160a:	4b4a      	ldr	r3, [pc, #296]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d116      	bne.n	8001644 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001616:	4b47      	ldr	r3, [pc, #284]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d005      	beq.n	800162e <HAL_RCC_OscConfig+0x17a>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d001      	beq.n	800162e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e1e9      	b.n	8001a02 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162e:	4b41      	ldr	r3, [pc, #260]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	493d      	ldr	r1, [pc, #244]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 800163e:	4313      	orrs	r3, r2
 8001640:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001642:	e040      	b.n	80016c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d023      	beq.n	8001694 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800164c:	4b39      	ldr	r3, [pc, #228]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a38      	ldr	r2, [pc, #224]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001658:	f7ff fab0 	bl	8000bbc <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001660:	f7ff faac 	bl	8000bbc <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e1c7      	b.n	8001a02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001672:	4b30      	ldr	r3, [pc, #192]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167e:	4b2d      	ldr	r3, [pc, #180]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	4929      	ldr	r1, [pc, #164]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 800168e:	4313      	orrs	r3, r2
 8001690:	600b      	str	r3, [r1, #0]
 8001692:	e018      	b.n	80016c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001694:	4b27      	ldr	r3, [pc, #156]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a26      	ldr	r2, [pc, #152]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 800169a:	f023 0301 	bic.w	r3, r3, #1
 800169e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a0:	f7ff fa8c 	bl	8000bbc <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a8:	f7ff fa88 	bl	8000bbc <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e1a3      	b.n	8001a02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f0      	bne.n	80016a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d038      	beq.n	8001744 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d019      	beq.n	800170e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016da:	4b16      	ldr	r3, [pc, #88]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 80016dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016de:	4a15      	ldr	r2, [pc, #84]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e6:	f7ff fa69 	bl	8000bbc <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ee:	f7ff fa65 	bl	8000bbc <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e180      	b.n	8001a02 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001700:	4b0c      	ldr	r3, [pc, #48]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0f0      	beq.n	80016ee <HAL_RCC_OscConfig+0x23a>
 800170c:	e01a      	b.n	8001744 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800170e:	4b09      	ldr	r3, [pc, #36]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001710:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001712:	4a08      	ldr	r2, [pc, #32]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001714:	f023 0301 	bic.w	r3, r3, #1
 8001718:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171a:	f7ff fa4f 	bl	8000bbc <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001720:	e00a      	b.n	8001738 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001722:	f7ff fa4b 	bl	8000bbc <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d903      	bls.n	8001738 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e166      	b.n	8001a02 <HAL_RCC_OscConfig+0x54e>
 8001734:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001738:	4b92      	ldr	r3, [pc, #584]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 800173a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1ee      	bne.n	8001722 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 80a4 	beq.w	800189a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001752:	4b8c      	ldr	r3, [pc, #560]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10d      	bne.n	800177a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800175e:	4b89      	ldr	r3, [pc, #548]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001762:	4a88      	ldr	r2, [pc, #544]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 8001764:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001768:	6413      	str	r3, [r2, #64]	@ 0x40
 800176a:	4b86      	ldr	r3, [pc, #536]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001776:	2301      	movs	r3, #1
 8001778:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800177a:	4b83      	ldr	r3, [pc, #524]	@ (8001988 <HAL_RCC_OscConfig+0x4d4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001782:	2b00      	cmp	r3, #0
 8001784:	d118      	bne.n	80017b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001786:	4b80      	ldr	r3, [pc, #512]	@ (8001988 <HAL_RCC_OscConfig+0x4d4>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a7f      	ldr	r2, [pc, #508]	@ (8001988 <HAL_RCC_OscConfig+0x4d4>)
 800178c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001790:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001792:	f7ff fa13 	bl	8000bbc <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800179a:	f7ff fa0f 	bl	8000bbc <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b64      	cmp	r3, #100	@ 0x64
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e12a      	b.n	8001a02 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ac:	4b76      	ldr	r3, [pc, #472]	@ (8001988 <HAL_RCC_OscConfig+0x4d4>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0f0      	beq.n	800179a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d106      	bne.n	80017ce <HAL_RCC_OscConfig+0x31a>
 80017c0:	4b70      	ldr	r3, [pc, #448]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 80017c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017c4:	4a6f      	ldr	r2, [pc, #444]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80017cc:	e02d      	b.n	800182a <HAL_RCC_OscConfig+0x376>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10c      	bne.n	80017f0 <HAL_RCC_OscConfig+0x33c>
 80017d6:	4b6b      	ldr	r3, [pc, #428]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 80017d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017da:	4a6a      	ldr	r2, [pc, #424]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 80017dc:	f023 0301 	bic.w	r3, r3, #1
 80017e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80017e2:	4b68      	ldr	r3, [pc, #416]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 80017e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017e6:	4a67      	ldr	r2, [pc, #412]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 80017e8:	f023 0304 	bic.w	r3, r3, #4
 80017ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80017ee:	e01c      	b.n	800182a <HAL_RCC_OscConfig+0x376>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	2b05      	cmp	r3, #5
 80017f6:	d10c      	bne.n	8001812 <HAL_RCC_OscConfig+0x35e>
 80017f8:	4b62      	ldr	r3, [pc, #392]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 80017fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017fc:	4a61      	ldr	r2, [pc, #388]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 80017fe:	f043 0304 	orr.w	r3, r3, #4
 8001802:	6713      	str	r3, [r2, #112]	@ 0x70
 8001804:	4b5f      	ldr	r3, [pc, #380]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 8001806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001808:	4a5e      	ldr	r2, [pc, #376]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001810:	e00b      	b.n	800182a <HAL_RCC_OscConfig+0x376>
 8001812:	4b5c      	ldr	r3, [pc, #368]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 8001814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001816:	4a5b      	ldr	r2, [pc, #364]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 8001818:	f023 0301 	bic.w	r3, r3, #1
 800181c:	6713      	str	r3, [r2, #112]	@ 0x70
 800181e:	4b59      	ldr	r3, [pc, #356]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 8001820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001822:	4a58      	ldr	r2, [pc, #352]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 8001824:	f023 0304 	bic.w	r3, r3, #4
 8001828:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d015      	beq.n	800185e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001832:	f7ff f9c3 	bl	8000bbc <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001838:	e00a      	b.n	8001850 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800183a:	f7ff f9bf 	bl	8000bbc <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001848:	4293      	cmp	r3, r2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e0d8      	b.n	8001a02 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001850:	4b4c      	ldr	r3, [pc, #304]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 8001852:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0ee      	beq.n	800183a <HAL_RCC_OscConfig+0x386>
 800185c:	e014      	b.n	8001888 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185e:	f7ff f9ad 	bl	8000bbc <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001864:	e00a      	b.n	800187c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001866:	f7ff f9a9 	bl	8000bbc <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001874:	4293      	cmp	r3, r2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e0c2      	b.n	8001a02 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800187c:	4b41      	ldr	r3, [pc, #260]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 800187e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1ee      	bne.n	8001866 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001888:	7dfb      	ldrb	r3, [r7, #23]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d105      	bne.n	800189a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800188e:	4b3d      	ldr	r3, [pc, #244]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001892:	4a3c      	ldr	r2, [pc, #240]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 8001894:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001898:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 80ae 	beq.w	8001a00 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018a4:	4b37      	ldr	r3, [pc, #220]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 030c 	and.w	r3, r3, #12
 80018ac:	2b08      	cmp	r3, #8
 80018ae:	d06d      	beq.n	800198c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d14b      	bne.n	8001950 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b8:	4b32      	ldr	r3, [pc, #200]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a31      	ldr	r2, [pc, #196]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 80018be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c4:	f7ff f97a 	bl	8000bbc <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018cc:	f7ff f976 	bl	8000bbc <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e091      	b.n	8001a02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018de:	4b29      	ldr	r3, [pc, #164]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69da      	ldr	r2, [r3, #28]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f8:	019b      	lsls	r3, r3, #6
 80018fa:	431a      	orrs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001900:	085b      	lsrs	r3, r3, #1
 8001902:	3b01      	subs	r3, #1
 8001904:	041b      	lsls	r3, r3, #16
 8001906:	431a      	orrs	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800190c:	061b      	lsls	r3, r3, #24
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001914:	071b      	lsls	r3, r3, #28
 8001916:	491b      	ldr	r1, [pc, #108]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 8001918:	4313      	orrs	r3, r2
 800191a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800191c:	4b19      	ldr	r3, [pc, #100]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a18      	ldr	r2, [pc, #96]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 8001922:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001928:	f7ff f948 	bl	8000bbc <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001930:	f7ff f944 	bl	8000bbc <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e05f      	b.n	8001a02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001942:	4b10      	ldr	r3, [pc, #64]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0f0      	beq.n	8001930 <HAL_RCC_OscConfig+0x47c>
 800194e:	e057      	b.n	8001a00 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001950:	4b0c      	ldr	r3, [pc, #48]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a0b      	ldr	r2, [pc, #44]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 8001956:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800195a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195c:	f7ff f92e 	bl	8000bbc <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001964:	f7ff f92a 	bl	8000bbc <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e045      	b.n	8001a02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001976:	4b03      	ldr	r3, [pc, #12]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f0      	bne.n	8001964 <HAL_RCC_OscConfig+0x4b0>
 8001982:	e03d      	b.n	8001a00 <HAL_RCC_OscConfig+0x54c>
 8001984:	40023800 	.word	0x40023800
 8001988:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800198c:	4b1f      	ldr	r3, [pc, #124]	@ (8001a0c <HAL_RCC_OscConfig+0x558>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d030      	beq.n	80019fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d129      	bne.n	80019fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d122      	bne.n	80019fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80019bc:	4013      	ands	r3, r2
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80019c2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d119      	bne.n	80019fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d2:	085b      	lsrs	r3, r3, #1
 80019d4:	3b01      	subs	r3, #1
 80019d6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019d8:	429a      	cmp	r2, r3
 80019da:	d10f      	bne.n	80019fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d107      	bne.n	80019fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d001      	beq.n	8001a00 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e000      	b.n	8001a02 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40023800 	.word	0x40023800

08001a10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e0d0      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a28:	4b6a      	ldr	r3, [pc, #424]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 030f 	and.w	r3, r3, #15
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d910      	bls.n	8001a58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a36:	4b67      	ldr	r3, [pc, #412]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f023 020f 	bic.w	r2, r3, #15
 8001a3e:	4965      	ldr	r1, [pc, #404]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a46:	4b63      	ldr	r3, [pc, #396]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d001      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e0b8      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d020      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d005      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a70:	4b59      	ldr	r3, [pc, #356]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	4a58      	ldr	r2, [pc, #352]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0308 	and.w	r3, r3, #8
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d005      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a88:	4b53      	ldr	r3, [pc, #332]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	4a52      	ldr	r2, [pc, #328]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a94:	4b50      	ldr	r3, [pc, #320]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	494d      	ldr	r1, [pc, #308]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d040      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d107      	bne.n	8001aca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aba:	4b47      	ldr	r3, [pc, #284]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d115      	bne.n	8001af2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e07f      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d107      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad2:	4b41      	ldr	r3, [pc, #260]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d109      	bne.n	8001af2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e073      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae2:	4b3d      	ldr	r3, [pc, #244]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e06b      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001af2:	4b39      	ldr	r3, [pc, #228]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f023 0203 	bic.w	r2, r3, #3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	4936      	ldr	r1, [pc, #216]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b04:	f7ff f85a 	bl	8000bbc <HAL_GetTick>
 8001b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0a:	e00a      	b.n	8001b22 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b0c:	f7ff f856 	bl	8000bbc <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e053      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b22:	4b2d      	ldr	r3, [pc, #180]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 020c 	and.w	r2, r3, #12
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d1eb      	bne.n	8001b0c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b34:	4b27      	ldr	r3, [pc, #156]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 030f 	and.w	r3, r3, #15
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d210      	bcs.n	8001b64 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b42:	4b24      	ldr	r3, [pc, #144]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f023 020f 	bic.w	r2, r3, #15
 8001b4a:	4922      	ldr	r1, [pc, #136]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b52:	4b20      	ldr	r3, [pc, #128]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d001      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e032      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d008      	beq.n	8001b82 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b70:	4b19      	ldr	r3, [pc, #100]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	4916      	ldr	r1, [pc, #88]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d009      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b8e:	4b12      	ldr	r3, [pc, #72]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	490e      	ldr	r1, [pc, #56]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ba2:	f000 f821 	bl	8001be8 <HAL_RCC_GetSysClockFreq>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	091b      	lsrs	r3, r3, #4
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	490a      	ldr	r1, [pc, #40]	@ (8001bdc <HAL_RCC_ClockConfig+0x1cc>)
 8001bb4:	5ccb      	ldrb	r3, [r1, r3]
 8001bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bba:	4a09      	ldr	r2, [pc, #36]	@ (8001be0 <HAL_RCC_ClockConfig+0x1d0>)
 8001bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bbe:	4b09      	ldr	r3, [pc, #36]	@ (8001be4 <HAL_RCC_ClockConfig+0x1d4>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7fe ffb6 	bl	8000b34 <HAL_InitTick>

  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40023c00 	.word	0x40023c00
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	08003e9c 	.word	0x08003e9c
 8001be0:	20000010 	.word	0x20000010
 8001be4:	20000014 	.word	0x20000014

08001be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bec:	b090      	sub	sp, #64	@ 0x40
 8001bee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c00:	4b59      	ldr	r3, [pc, #356]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 030c 	and.w	r3, r3, #12
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d00d      	beq.n	8001c28 <HAL_RCC_GetSysClockFreq+0x40>
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	f200 80a1 	bhi.w	8001d54 <HAL_RCC_GetSysClockFreq+0x16c>
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d002      	beq.n	8001c1c <HAL_RCC_GetSysClockFreq+0x34>
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	d003      	beq.n	8001c22 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c1a:	e09b      	b.n	8001d54 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c1c:	4b53      	ldr	r3, [pc, #332]	@ (8001d6c <HAL_RCC_GetSysClockFreq+0x184>)
 8001c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c20:	e09b      	b.n	8001d5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c22:	4b53      	ldr	r3, [pc, #332]	@ (8001d70 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c24:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c26:	e098      	b.n	8001d5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c28:	4b4f      	ldr	r3, [pc, #316]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c30:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001c32:	4b4d      	ldr	r3, [pc, #308]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d028      	beq.n	8001c90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c3e:	4b4a      	ldr	r3, [pc, #296]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	099b      	lsrs	r3, r3, #6
 8001c44:	2200      	movs	r2, #0
 8001c46:	623b      	str	r3, [r7, #32]
 8001c48:	627a      	str	r2, [r7, #36]	@ 0x24
 8001c4a:	6a3b      	ldr	r3, [r7, #32]
 8001c4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c50:	2100      	movs	r1, #0
 8001c52:	4b47      	ldr	r3, [pc, #284]	@ (8001d70 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c54:	fb03 f201 	mul.w	r2, r3, r1
 8001c58:	2300      	movs	r3, #0
 8001c5a:	fb00 f303 	mul.w	r3, r0, r3
 8001c5e:	4413      	add	r3, r2
 8001c60:	4a43      	ldr	r2, [pc, #268]	@ (8001d70 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c62:	fba0 1202 	umull	r1, r2, r0, r2
 8001c66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c68:	460a      	mov	r2, r1
 8001c6a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001c6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c6e:	4413      	add	r3, r2
 8001c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c74:	2200      	movs	r2, #0
 8001c76:	61bb      	str	r3, [r7, #24]
 8001c78:	61fa      	str	r2, [r7, #28]
 8001c7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001c82:	f7fe fad9 	bl	8000238 <__aeabi_uldivmod>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c8e:	e053      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c90:	4b35      	ldr	r3, [pc, #212]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	099b      	lsrs	r3, r3, #6
 8001c96:	2200      	movs	r2, #0
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	617a      	str	r2, [r7, #20]
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001ca2:	f04f 0b00 	mov.w	fp, #0
 8001ca6:	4652      	mov	r2, sl
 8001ca8:	465b      	mov	r3, fp
 8001caa:	f04f 0000 	mov.w	r0, #0
 8001cae:	f04f 0100 	mov.w	r1, #0
 8001cb2:	0159      	lsls	r1, r3, #5
 8001cb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cb8:	0150      	lsls	r0, r2, #5
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	ebb2 080a 	subs.w	r8, r2, sl
 8001cc2:	eb63 090b 	sbc.w	r9, r3, fp
 8001cc6:	f04f 0200 	mov.w	r2, #0
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001cd2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001cd6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001cda:	ebb2 0408 	subs.w	r4, r2, r8
 8001cde:	eb63 0509 	sbc.w	r5, r3, r9
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	f04f 0300 	mov.w	r3, #0
 8001cea:	00eb      	lsls	r3, r5, #3
 8001cec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cf0:	00e2      	lsls	r2, r4, #3
 8001cf2:	4614      	mov	r4, r2
 8001cf4:	461d      	mov	r5, r3
 8001cf6:	eb14 030a 	adds.w	r3, r4, sl
 8001cfa:	603b      	str	r3, [r7, #0]
 8001cfc:	eb45 030b 	adc.w	r3, r5, fp
 8001d00:	607b      	str	r3, [r7, #4]
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	f04f 0300 	mov.w	r3, #0
 8001d0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d0e:	4629      	mov	r1, r5
 8001d10:	028b      	lsls	r3, r1, #10
 8001d12:	4621      	mov	r1, r4
 8001d14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d18:	4621      	mov	r1, r4
 8001d1a:	028a      	lsls	r2, r1, #10
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	4619      	mov	r1, r3
 8001d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d22:	2200      	movs	r2, #0
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	60fa      	str	r2, [r7, #12]
 8001d28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d2c:	f7fe fa84 	bl	8000238 <__aeabi_uldivmod>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4613      	mov	r3, r2
 8001d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001d38:	4b0b      	ldr	r3, [pc, #44]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	0c1b      	lsrs	r3, r3, #16
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	3301      	adds	r3, #1
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001d48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d50:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d52:	e002      	b.n	8001d5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d54:	4b05      	ldr	r3, [pc, #20]	@ (8001d6c <HAL_RCC_GetSysClockFreq+0x184>)
 8001d56:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3740      	adds	r7, #64	@ 0x40
 8001d60:	46bd      	mov	sp, r7
 8001d62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	00f42400 	.word	0x00f42400
 8001d70:	017d7840 	.word	0x017d7840

08001d74 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d78:	4b03      	ldr	r3, [pc, #12]	@ (8001d88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	20000010 	.word	0x20000010

08001d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d90:	f7ff fff0 	bl	8001d74 <HAL_RCC_GetHCLKFreq>
 8001d94:	4602      	mov	r2, r0
 8001d96:	4b05      	ldr	r3, [pc, #20]	@ (8001dac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	0a9b      	lsrs	r3, r3, #10
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	4903      	ldr	r1, [pc, #12]	@ (8001db0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001da2:	5ccb      	ldrb	r3, [r1, r3]
 8001da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40023800 	.word	0x40023800
 8001db0:	08003eac 	.word	0x08003eac

08001db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001db8:	f7ff ffdc 	bl	8001d74 <HAL_RCC_GetHCLKFreq>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	4b05      	ldr	r3, [pc, #20]	@ (8001dd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	0b5b      	lsrs	r3, r3, #13
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	4903      	ldr	r1, [pc, #12]	@ (8001dd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dca:	5ccb      	ldrb	r3, [r1, r3]
 8001dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	08003eac 	.word	0x08003eac

08001ddc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b088      	sub	sp, #32
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d012      	beq.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001e04:	4b69      	ldr	r3, [pc, #420]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	4a68      	ldr	r2, [pc, #416]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e0a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001e0e:	6093      	str	r3, [r2, #8]
 8001e10:	4b66      	ldr	r3, [pc, #408]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e18:	4964      	ldr	r1, [pc, #400]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001e26:	2301      	movs	r3, #1
 8001e28:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d017      	beq.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e36:	4b5d      	ldr	r3, [pc, #372]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e3c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e44:	4959      	ldr	r1, [pc, #356]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001e54:	d101      	bne.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001e56:	2301      	movs	r3, #1
 8001e58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001e62:	2301      	movs	r3, #1
 8001e64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d017      	beq.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e72:	4b4e      	ldr	r3, [pc, #312]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e78:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e80:	494a      	ldr	r1, [pc, #296]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e90:	d101      	bne.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001e92:	2301      	movs	r3, #1
 8001e94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0320 	and.w	r3, r3, #32
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 808b 	beq.w	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ec0:	4b3a      	ldr	r3, [pc, #232]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec4:	4a39      	ldr	r2, [pc, #228]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ec6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eca:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ecc:	4b37      	ldr	r3, [pc, #220]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed4:	60bb      	str	r3, [r7, #8]
 8001ed6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ed8:	4b35      	ldr	r3, [pc, #212]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a34      	ldr	r2, [pc, #208]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ede:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ee2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ee4:	f7fe fe6a 	bl	8000bbc <HAL_GetTick>
 8001ee8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eec:	f7fe fe66 	bl	8000bbc <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b64      	cmp	r3, #100	@ 0x64
 8001ef8:	d901      	bls.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e38f      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001efe:	4b2c      	ldr	r3, [pc, #176]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f0a:	4b28      	ldr	r3, [pc, #160]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f12:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d035      	beq.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d02e      	beq.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f28:	4b20      	ldr	r3, [pc, #128]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f30:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f32:	4b1e      	ldr	r3, [pc, #120]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f36:	4a1d      	ldr	r2, [pc, #116]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f3c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f42:	4a1a      	ldr	r2, [pc, #104]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f48:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001f4a:	4a18      	ldr	r2, [pc, #96]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f50:	4b16      	ldr	r3, [pc, #88]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d114      	bne.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5c:	f7fe fe2e 	bl	8000bbc <HAL_GetTick>
 8001f60:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f62:	e00a      	b.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f64:	f7fe fe2a 	bl	8000bbc <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e351      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0ee      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001f92:	d111      	bne.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001f94:	4b05      	ldr	r3, [pc, #20]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001fa0:	4b04      	ldr	r3, [pc, #16]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001fa2:	400b      	ands	r3, r1
 8001fa4:	4901      	ldr	r1, [pc, #4]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	608b      	str	r3, [r1, #8]
 8001faa:	e00b      	b.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40007000 	.word	0x40007000
 8001fb4:	0ffffcff 	.word	0x0ffffcff
 8001fb8:	4bac      	ldr	r3, [pc, #688]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	4aab      	ldr	r2, [pc, #684]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fbe:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001fc2:	6093      	str	r3, [r2, #8]
 8001fc4:	4ba9      	ldr	r3, [pc, #676]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fc6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fd0:	49a6      	ldr	r1, [pc, #664]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0310 	and.w	r3, r3, #16
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d010      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001fe2:	4ba2      	ldr	r3, [pc, #648]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fe8:	4aa0      	ldr	r2, [pc, #640]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ff2:	4b9e      	ldr	r3, [pc, #632]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ff4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ffc:	499b      	ldr	r1, [pc, #620]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00a      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002010:	4b96      	ldr	r3, [pc, #600]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002016:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800201e:	4993      	ldr	r1, [pc, #588]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002020:	4313      	orrs	r3, r2
 8002022:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00a      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002032:	4b8e      	ldr	r3, [pc, #568]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002034:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002038:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002040:	498a      	ldr	r1, [pc, #552]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002042:	4313      	orrs	r3, r2
 8002044:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00a      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002054:	4b85      	ldr	r3, [pc, #532]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800205a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002062:	4982      	ldr	r1, [pc, #520]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002064:	4313      	orrs	r3, r2
 8002066:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00a      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002076:	4b7d      	ldr	r3, [pc, #500]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800207c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002084:	4979      	ldr	r1, [pc, #484]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002086:	4313      	orrs	r3, r2
 8002088:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00a      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002098:	4b74      	ldr	r3, [pc, #464]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800209a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800209e:	f023 0203 	bic.w	r2, r3, #3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a6:	4971      	ldr	r1, [pc, #452]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00a      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020ba:	4b6c      	ldr	r3, [pc, #432]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c0:	f023 020c 	bic.w	r2, r3, #12
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020c8:	4968      	ldr	r1, [pc, #416]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00a      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020dc:	4b63      	ldr	r3, [pc, #396]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020e2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ea:	4960      	ldr	r1, [pc, #384]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00a      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020fe:	4b5b      	ldr	r3, [pc, #364]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002104:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800210c:	4957      	ldr	r1, [pc, #348]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800210e:	4313      	orrs	r3, r2
 8002110:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00a      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002120:	4b52      	ldr	r3, [pc, #328]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002126:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800212e:	494f      	ldr	r1, [pc, #316]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002130:	4313      	orrs	r3, r2
 8002132:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00a      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002142:	4b4a      	ldr	r3, [pc, #296]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002148:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002150:	4946      	ldr	r1, [pc, #280]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002152:	4313      	orrs	r3, r2
 8002154:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00a      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002164:	4b41      	ldr	r3, [pc, #260]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800216a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002172:	493e      	ldr	r1, [pc, #248]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002174:	4313      	orrs	r3, r2
 8002176:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00a      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002186:	4b39      	ldr	r3, [pc, #228]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800218c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002194:	4935      	ldr	r1, [pc, #212]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002196:	4313      	orrs	r3, r2
 8002198:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00a      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80021a8:	4b30      	ldr	r3, [pc, #192]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ae:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80021b6:	492d      	ldr	r1, [pc, #180]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d011      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80021ca:	4b28      	ldr	r3, [pc, #160]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021d0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80021d8:	4924      	ldr	r1, [pc, #144]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80021e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021e8:	d101      	bne.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80021ea:	2301      	movs	r3, #1
 80021ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80021fa:	2301      	movs	r3, #1
 80021fc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00a      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800220a:	4b18      	ldr	r3, [pc, #96]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800220c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002210:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002218:	4914      	ldr	r1, [pc, #80]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800221a:	4313      	orrs	r3, r2
 800221c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00b      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800222c:	4b0f      	ldr	r3, [pc, #60]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800222e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002232:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800223c:	490b      	ldr	r1, [pc, #44]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800223e:	4313      	orrs	r3, r2
 8002240:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00f      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002250:	4b06      	ldr	r3, [pc, #24]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002256:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002260:	4902      	ldr	r1, [pc, #8]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002262:	4313      	orrs	r3, r2
 8002264:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002268:	e002      	b.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800226a:	bf00      	nop
 800226c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00b      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800227c:	4b8a      	ldr	r3, [pc, #552]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800227e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002282:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800228c:	4986      	ldr	r1, [pc, #536]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800228e:	4313      	orrs	r3, r2
 8002290:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00b      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80022a0:	4b81      	ldr	r3, [pc, #516]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022a6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022b0:	497d      	ldr	r1, [pc, #500]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d006      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 80d6 	beq.w	8002478 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80022cc:	4b76      	ldr	r3, [pc, #472]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a75      	ldr	r2, [pc, #468]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80022d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022d8:	f7fe fc70 	bl	8000bbc <HAL_GetTick>
 80022dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80022e0:	f7fe fc6c 	bl	8000bbc <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b64      	cmp	r3, #100	@ 0x64
 80022ec:	d901      	bls.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e195      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022f2:	4b6d      	ldr	r3, [pc, #436]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f0      	bne.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d021      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800230e:	2b00      	cmp	r3, #0
 8002310:	d11d      	bne.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002312:	4b65      	ldr	r3, [pc, #404]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002314:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002318:	0c1b      	lsrs	r3, r3, #16
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002320:	4b61      	ldr	r3, [pc, #388]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002322:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002326:	0e1b      	lsrs	r3, r3, #24
 8002328:	f003 030f 	and.w	r3, r3, #15
 800232c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	019a      	lsls	r2, r3, #6
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	041b      	lsls	r3, r3, #16
 8002338:	431a      	orrs	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	061b      	lsls	r3, r3, #24
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	071b      	lsls	r3, r3, #28
 8002346:	4958      	ldr	r1, [pc, #352]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002348:	4313      	orrs	r3, r2
 800234a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d004      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800235e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002362:	d00a      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800236c:	2b00      	cmp	r3, #0
 800236e:	d02e      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002374:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002378:	d129      	bne.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800237a:	4b4b      	ldr	r3, [pc, #300]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800237c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002380:	0c1b      	lsrs	r3, r3, #16
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002388:	4b47      	ldr	r3, [pc, #284]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800238a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800238e:	0f1b      	lsrs	r3, r3, #28
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	019a      	lsls	r2, r3, #6
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	041b      	lsls	r3, r3, #16
 80023a0:	431a      	orrs	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	061b      	lsls	r3, r3, #24
 80023a8:	431a      	orrs	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	071b      	lsls	r3, r3, #28
 80023ae:	493e      	ldr	r1, [pc, #248]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80023b6:	4b3c      	ldr	r3, [pc, #240]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023bc:	f023 021f 	bic.w	r2, r3, #31
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c4:	3b01      	subs	r3, #1
 80023c6:	4938      	ldr	r1, [pc, #224]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d01d      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80023da:	4b33      	ldr	r3, [pc, #204]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023e0:	0e1b      	lsrs	r3, r3, #24
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80023e8:	4b2f      	ldr	r3, [pc, #188]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023ee:	0f1b      	lsrs	r3, r3, #28
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	019a      	lsls	r2, r3, #6
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	041b      	lsls	r3, r3, #16
 8002402:	431a      	orrs	r2, r3
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	061b      	lsls	r3, r3, #24
 8002408:	431a      	orrs	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	071b      	lsls	r3, r3, #28
 800240e:	4926      	ldr	r1, [pc, #152]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002410:	4313      	orrs	r3, r2
 8002412:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d011      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	019a      	lsls	r2, r3, #6
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	041b      	lsls	r3, r3, #16
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	061b      	lsls	r3, r3, #24
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	071b      	lsls	r3, r3, #28
 800243e:	491a      	ldr	r1, [pc, #104]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002440:	4313      	orrs	r3, r2
 8002442:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002446:	4b18      	ldr	r3, [pc, #96]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a17      	ldr	r2, [pc, #92]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800244c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002450:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002452:	f7fe fbb3 	bl	8000bbc <HAL_GetTick>
 8002456:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002458:	e008      	b.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800245a:	f7fe fbaf 	bl	8000bbc <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b64      	cmp	r3, #100	@ 0x64
 8002466:	d901      	bls.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e0d8      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800246c:	4b0e      	ldr	r3, [pc, #56]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0f0      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	2b01      	cmp	r3, #1
 800247c:	f040 80ce 	bne.w	800261c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002480:	4b09      	ldr	r3, [pc, #36]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a08      	ldr	r2, [pc, #32]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002486:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800248a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800248c:	f7fe fb96 	bl	8000bbc <HAL_GetTick>
 8002490:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002492:	e00b      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002494:	f7fe fb92 	bl	8000bbc <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b64      	cmp	r3, #100	@ 0x64
 80024a0:	d904      	bls.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e0bb      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80024a6:	bf00      	nop
 80024a8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80024ac:	4b5e      	ldr	r3, [pc, #376]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80024b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024b8:	d0ec      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d009      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d02e      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d12a      	bne.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80024e2:	4b51      	ldr	r3, [pc, #324]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024e8:	0c1b      	lsrs	r3, r3, #16
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80024f0:	4b4d      	ldr	r3, [pc, #308]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024f6:	0f1b      	lsrs	r3, r3, #28
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	019a      	lsls	r2, r3, #6
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	041b      	lsls	r3, r3, #16
 8002508:	431a      	orrs	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	061b      	lsls	r3, r3, #24
 8002510:	431a      	orrs	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	071b      	lsls	r3, r3, #28
 8002516:	4944      	ldr	r1, [pc, #272]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002518:	4313      	orrs	r3, r2
 800251a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800251e:	4b42      	ldr	r3, [pc, #264]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002520:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002524:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252c:	3b01      	subs	r3, #1
 800252e:	021b      	lsls	r3, r3, #8
 8002530:	493d      	ldr	r1, [pc, #244]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002532:	4313      	orrs	r3, r2
 8002534:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d022      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002548:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800254c:	d11d      	bne.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800254e:	4b36      	ldr	r3, [pc, #216]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002554:	0e1b      	lsrs	r3, r3, #24
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800255c:	4b32      	ldr	r3, [pc, #200]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800255e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002562:	0f1b      	lsrs	r3, r3, #28
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	019a      	lsls	r2, r3, #6
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	041b      	lsls	r3, r3, #16
 8002576:	431a      	orrs	r2, r3
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	061b      	lsls	r3, r3, #24
 800257c:	431a      	orrs	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	071b      	lsls	r3, r3, #28
 8002582:	4929      	ldr	r1, [pc, #164]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b00      	cmp	r3, #0
 8002594:	d028      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002596:	4b24      	ldr	r3, [pc, #144]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800259c:	0e1b      	lsrs	r3, r3, #24
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80025a4:	4b20      	ldr	r3, [pc, #128]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025aa:	0c1b      	lsrs	r3, r3, #16
 80025ac:	f003 0303 	and.w	r3, r3, #3
 80025b0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	019a      	lsls	r2, r3, #6
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	041b      	lsls	r3, r3, #16
 80025bc:	431a      	orrs	r2, r3
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	061b      	lsls	r3, r3, #24
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	071b      	lsls	r3, r3, #28
 80025ca:	4917      	ldr	r1, [pc, #92]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80025d2:	4b15      	ldr	r3, [pc, #84]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e0:	4911      	ldr	r1, [pc, #68]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80025e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a0e      	ldr	r2, [pc, #56]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025f4:	f7fe fae2 	bl	8000bbc <HAL_GetTick>
 80025f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80025fc:	f7fe fade 	bl	8000bbc <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b64      	cmp	r3, #100	@ 0x64
 8002608:	d901      	bls.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e007      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800260e:	4b06      	ldr	r3, [pc, #24]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002616:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800261a:	d1ef      	bne.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3720      	adds	r7, #32
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40023800 	.word	0x40023800

0800262c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e040      	b.n	80026c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002642:	2b00      	cmp	r3, #0
 8002644:	d106      	bne.n	8002654 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7fe f988 	bl	8000964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2224      	movs	r2, #36	@ 0x24
 8002658:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 0201 	bic.w	r2, r2, #1
 8002668:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266e:	2b00      	cmp	r3, #0
 8002670:	d002      	beq.n	8002678 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 fe36 	bl	80032e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 fbcf 	bl	8002e1c <UART_SetConfig>
 800267e:	4603      	mov	r3, r0
 8002680:	2b01      	cmp	r3, #1
 8002682:	d101      	bne.n	8002688 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e01b      	b.n	80026c0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002696:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80026a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 0201 	orr.w	r2, r2, #1
 80026b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 feb5 	bl	8003428 <UART_CheckIdleState>
 80026be:	4603      	mov	r3, r0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b08b      	sub	sp, #44	@ 0x2c
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	4613      	mov	r3, r2
 80026d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026da:	2b20      	cmp	r3, #32
 80026dc:	d147      	bne.n	800276e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d002      	beq.n	80026ea <HAL_UART_Transmit_IT+0x22>
 80026e4:	88fb      	ldrh	r3, [r7, #6]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e040      	b.n	8002770 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	88fa      	ldrh	r2, [r7, #6]
 80026f8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	88fa      	ldrh	r2, [r7, #6]
 8002700:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2221      	movs	r2, #33	@ 0x21
 8002716:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002720:	d107      	bne.n	8002732 <HAL_UART_Transmit_IT+0x6a>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d103      	bne.n	8002732 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	4a13      	ldr	r2, [pc, #76]	@ (800277c <HAL_UART_Transmit_IT+0xb4>)
 800272e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8002730:	e002      	b.n	8002738 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4a12      	ldr	r2, [pc, #72]	@ (8002780 <HAL_UART_Transmit_IT+0xb8>)
 8002736:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	e853 3f00 	ldrex	r3, [r3]
 8002744:	613b      	str	r3, [r7, #16]
   return(result);
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800274c:	627b      	str	r3, [r7, #36]	@ 0x24
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	461a      	mov	r2, r3
 8002754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002756:	623b      	str	r3, [r7, #32]
 8002758:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800275a:	69f9      	ldr	r1, [r7, #28]
 800275c:	6a3a      	ldr	r2, [r7, #32]
 800275e:	e841 2300 	strex	r3, r2, [r1]
 8002762:	61bb      	str	r3, [r7, #24]
   return(result);
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1e6      	bne.n	8002738 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	e000      	b.n	8002770 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800276e:	2302      	movs	r3, #2
  }
}
 8002770:	4618      	mov	r0, r3
 8002772:	372c      	adds	r7, #44	@ 0x2c
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	0800398b 	.word	0x0800398b
 8002780:	080038d5 	.word	0x080038d5

08002784 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b08a      	sub	sp, #40	@ 0x28
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	4613      	mov	r3, r2
 8002790:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002798:	2b20      	cmp	r3, #32
 800279a:	d132      	bne.n	8002802 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d002      	beq.n	80027a8 <HAL_UART_Receive_IT+0x24>
 80027a2:	88fb      	ldrh	r3, [r7, #6]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e02b      	b.n	8002804 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d018      	beq.n	80027f2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	e853 3f00 	ldrex	r3, [r3]
 80027cc:	613b      	str	r3, [r7, #16]
   return(result);
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80027d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	461a      	mov	r2, r3
 80027dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027de:	623b      	str	r3, [r7, #32]
 80027e0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e2:	69f9      	ldr	r1, [r7, #28]
 80027e4:	6a3a      	ldr	r2, [r7, #32]
 80027e6:	e841 2300 	strex	r3, r2, [r1]
 80027ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1e6      	bne.n	80027c0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80027f2:	88fb      	ldrh	r3, [r7, #6]
 80027f4:	461a      	mov	r2, r3
 80027f6:	68b9      	ldr	r1, [r7, #8]
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 ff2b 	bl	8003654 <UART_Start_Receive_IT>
 80027fe:	4603      	mov	r3, r0
 8002800:	e000      	b.n	8002804 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002802:	2302      	movs	r3, #2
  }
}
 8002804:	4618      	mov	r0, r3
 8002806:	3728      	adds	r7, #40	@ 0x28
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b0ba      	sub	sp, #232	@ 0xe8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002832:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002836:	f640 030f 	movw	r3, #2063	@ 0x80f
 800283a:	4013      	ands	r3, r2
 800283c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002840:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002844:	2b00      	cmp	r3, #0
 8002846:	d115      	bne.n	8002874 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800284c:	f003 0320 	and.w	r3, r3, #32
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00f      	beq.n	8002874 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002858:	f003 0320 	and.w	r3, r3, #32
 800285c:	2b00      	cmp	r3, #0
 800285e:	d009      	beq.n	8002874 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 82ac 	beq.w	8002dc2 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	4798      	blx	r3
      }
      return;
 8002872:	e2a6      	b.n	8002dc2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002874:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 8117 	beq.w	8002aac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800287e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d106      	bne.n	8002898 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800288a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800288e:	4b85      	ldr	r3, [pc, #532]	@ (8002aa4 <HAL_UART_IRQHandler+0x298>)
 8002890:	4013      	ands	r3, r2
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 810a 	beq.w	8002aac <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d011      	beq.n	80028c8 <HAL_UART_IRQHandler+0xbc>
 80028a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00b      	beq.n	80028c8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2201      	movs	r2, #1
 80028b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028be:	f043 0201 	orr.w	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d011      	beq.n	80028f8 <HAL_UART_IRQHandler+0xec>
 80028d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00b      	beq.n	80028f8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2202      	movs	r2, #2
 80028e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028ee:	f043 0204 	orr.w	r2, r3, #4
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b00      	cmp	r3, #0
 8002902:	d011      	beq.n	8002928 <HAL_UART_IRQHandler+0x11c>
 8002904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00b      	beq.n	8002928 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2204      	movs	r2, #4
 8002916:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800291e:	f043 0202 	orr.w	r2, r3, #2
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b00      	cmp	r3, #0
 8002932:	d017      	beq.n	8002964 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002938:	f003 0320 	and.w	r3, r3, #32
 800293c:	2b00      	cmp	r3, #0
 800293e:	d105      	bne.n	800294c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002940:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002944:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00b      	beq.n	8002964 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2208      	movs	r2, #8
 8002952:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800295a:	f043 0208 	orr.w	r2, r3, #8
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002968:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800296c:	2b00      	cmp	r3, #0
 800296e:	d012      	beq.n	8002996 <HAL_UART_IRQHandler+0x18a>
 8002970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002974:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00c      	beq.n	8002996 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002984:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800298c:	f043 0220 	orr.w	r2, r3, #32
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 8212 	beq.w	8002dc6 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80029a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029a6:	f003 0320 	and.w	r3, r3, #32
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00d      	beq.n	80029ca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80029ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029b2:	f003 0320 	and.w	r3, r3, #32
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d007      	beq.n	80029ca <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029de:	2b40      	cmp	r3, #64	@ 0x40
 80029e0:	d005      	beq.n	80029ee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80029e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80029e6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d04f      	beq.n	8002a8e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 fef6 	bl	80037e0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029fe:	2b40      	cmp	r3, #64	@ 0x40
 8002a00:	d141      	bne.n	8002a86 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	3308      	adds	r3, #8
 8002a08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a10:	e853 3f00 	ldrex	r3, [r3]
 8002a14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002a18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	3308      	adds	r3, #8
 8002a2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002a2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002a32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002a3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002a3e:	e841 2300 	strex	r3, r2, [r1]
 8002a42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002a46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1d9      	bne.n	8002a02 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d013      	beq.n	8002a7e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a5a:	4a13      	ldr	r2, [pc, #76]	@ (8002aa8 <HAL_UART_IRQHandler+0x29c>)
 8002a5c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fe fad4 	bl	8001010 <HAL_DMA_Abort_IT>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d017      	beq.n	8002a9e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002a78:	4610      	mov	r0, r2
 8002a7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a7c:	e00f      	b.n	8002a9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f9ac 	bl	8002ddc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a84:	e00b      	b.n	8002a9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f9a8 	bl	8002ddc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a8c:	e007      	b.n	8002a9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f9a4 	bl	8002ddc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002a9c:	e193      	b.n	8002dc6 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a9e:	bf00      	nop
    return;
 8002aa0:	e191      	b.n	8002dc6 <HAL_UART_IRQHandler+0x5ba>
 8002aa2:	bf00      	nop
 8002aa4:	04000120 	.word	0x04000120
 8002aa8:	080038a9 	.word	0x080038a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	f040 814c 	bne.w	8002d4e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002aba:	f003 0310 	and.w	r3, r3, #16
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 8145 	beq.w	8002d4e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ac8:	f003 0310 	and.w	r3, r3, #16
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 813e 	beq.w	8002d4e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2210      	movs	r2, #16
 8002ad8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ae4:	2b40      	cmp	r3, #64	@ 0x40
 8002ae6:	f040 80b6 	bne.w	8002c56 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002af6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 8165 	beq.w	8002dca <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002b06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	f080 815d 	bcs.w	8002dca <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b16:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b24:	f000 8086 	beq.w	8002c34 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b34:	e853 3f00 	ldrex	r3, [r3]
 8002b38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002b3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002b56:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002b5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002b62:	e841 2300 	strex	r3, r2, [r1]
 8002b66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002b6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1da      	bne.n	8002b28 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	3308      	adds	r3, #8
 8002b78:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b7c:	e853 3f00 	ldrex	r3, [r3]
 8002b80:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002b82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b84:	f023 0301 	bic.w	r3, r3, #1
 8002b88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	3308      	adds	r3, #8
 8002b92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002b96:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002b9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b9c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002b9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002ba2:	e841 2300 	strex	r3, r2, [r1]
 8002ba6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002ba8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1e1      	bne.n	8002b72 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	3308      	adds	r3, #8
 8002bb4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002bb8:	e853 3f00 	ldrex	r3, [r3]
 8002bbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002bbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	3308      	adds	r3, #8
 8002bce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002bd2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002bd4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002bd8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002bda:	e841 2300 	strex	r3, r2, [r1]
 8002bde:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002be0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1e3      	bne.n	8002bae <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2220      	movs	r2, #32
 8002bea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bfc:	e853 3f00 	ldrex	r3, [r3]
 8002c00:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002c02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c04:	f023 0310 	bic.w	r3, r3, #16
 8002c08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	461a      	mov	r2, r3
 8002c12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c18:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c1e:	e841 2300 	strex	r3, r2, [r1]
 8002c22:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002c24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1e4      	bne.n	8002bf4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fe f97e 	bl	8000f30 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2202      	movs	r2, #2
 8002c38:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f8ce 	bl	8002df0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c54:	e0b9      	b.n	8002dca <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 80ab 	beq.w	8002dce <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8002c78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 80a6 	beq.w	8002dce <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c8a:	e853 3f00 	ldrex	r3, [r3]
 8002c8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002ca4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ca6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002caa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002cac:	e841 2300 	strex	r3, r2, [r1]
 8002cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002cb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1e4      	bne.n	8002c82 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	3308      	adds	r3, #8
 8002cbe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc2:	e853 3f00 	ldrex	r3, [r3]
 8002cc6:	623b      	str	r3, [r7, #32]
   return(result);
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	f023 0301 	bic.w	r3, r3, #1
 8002cce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	3308      	adds	r3, #8
 8002cd8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002cdc:	633a      	str	r2, [r7, #48]	@ 0x30
 8002cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ce2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ce4:	e841 2300 	strex	r3, r2, [r1]
 8002ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1e3      	bne.n	8002cb8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	e853 3f00 	ldrex	r3, [r3]
 8002d10:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f023 0310 	bic.w	r3, r3, #16
 8002d18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	461a      	mov	r2, r3
 8002d22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d26:	61fb      	str	r3, [r7, #28]
 8002d28:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d2a:	69b9      	ldr	r1, [r7, #24]
 8002d2c:	69fa      	ldr	r2, [r7, #28]
 8002d2e:	e841 2300 	strex	r3, r2, [r1]
 8002d32:	617b      	str	r3, [r7, #20]
   return(result);
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1e4      	bne.n	8002d04 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002d44:	4619      	mov	r1, r3
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f852 	bl	8002df0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d4c:	e03f      	b.n	8002dce <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00e      	beq.n	8002d78 <HAL_UART_IRQHandler+0x56c>
 8002d5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d008      	beq.n	8002d78 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002d6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 f849 	bl	8002e08 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d76:	e02d      	b.n	8002dd4 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00e      	beq.n	8002da2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d008      	beq.n	8002da2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d01c      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	4798      	blx	r3
    }
    return;
 8002da0:	e017      	b.n	8002dd2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d012      	beq.n	8002dd4 <HAL_UART_IRQHandler+0x5c8>
 8002dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00c      	beq.n	8002dd4 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 fe45 	bl	8003a4a <UART_EndTransmit_IT>
    return;
 8002dc0:	e008      	b.n	8002dd4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8002dc2:	bf00      	nop
 8002dc4:	e006      	b.n	8002dd4 <HAL_UART_IRQHandler+0x5c8>
    return;
 8002dc6:	bf00      	nop
 8002dc8:	e004      	b.n	8002dd4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8002dca:	bf00      	nop
 8002dcc:	e002      	b.n	8002dd4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8002dce:	bf00      	nop
 8002dd0:	e000      	b.n	8002dd4 <HAL_UART_IRQHandler+0x5c8>
    return;
 8002dd2:	bf00      	nop
  }

}
 8002dd4:	37e8      	adds	r7, #232	@ 0xe8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop

08002ddc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b088      	sub	sp, #32
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	431a      	orrs	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	4ba6      	ldr	r3, [pc, #664]	@ (80030e0 <UART_SetConfig+0x2c4>)
 8002e48:	4013      	ands	r3, r2
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6812      	ldr	r2, [r2, #0]
 8002e4e:	6979      	ldr	r1, [r7, #20]
 8002e50:	430b      	orrs	r3, r1
 8002e52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a94      	ldr	r2, [pc, #592]	@ (80030e4 <UART_SetConfig+0x2c8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d120      	bne.n	8002eda <UART_SetConfig+0xbe>
 8002e98:	4b93      	ldr	r3, [pc, #588]	@ (80030e8 <UART_SetConfig+0x2cc>)
 8002e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	2b03      	cmp	r3, #3
 8002ea4:	d816      	bhi.n	8002ed4 <UART_SetConfig+0xb8>
 8002ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8002eac <UART_SetConfig+0x90>)
 8002ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eac:	08002ebd 	.word	0x08002ebd
 8002eb0:	08002ec9 	.word	0x08002ec9
 8002eb4:	08002ec3 	.word	0x08002ec3
 8002eb8:	08002ecf 	.word	0x08002ecf
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	77fb      	strb	r3, [r7, #31]
 8002ec0:	e150      	b.n	8003164 <UART_SetConfig+0x348>
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	77fb      	strb	r3, [r7, #31]
 8002ec6:	e14d      	b.n	8003164 <UART_SetConfig+0x348>
 8002ec8:	2304      	movs	r3, #4
 8002eca:	77fb      	strb	r3, [r7, #31]
 8002ecc:	e14a      	b.n	8003164 <UART_SetConfig+0x348>
 8002ece:	2308      	movs	r3, #8
 8002ed0:	77fb      	strb	r3, [r7, #31]
 8002ed2:	e147      	b.n	8003164 <UART_SetConfig+0x348>
 8002ed4:	2310      	movs	r3, #16
 8002ed6:	77fb      	strb	r3, [r7, #31]
 8002ed8:	e144      	b.n	8003164 <UART_SetConfig+0x348>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a83      	ldr	r2, [pc, #524]	@ (80030ec <UART_SetConfig+0x2d0>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d132      	bne.n	8002f4a <UART_SetConfig+0x12e>
 8002ee4:	4b80      	ldr	r3, [pc, #512]	@ (80030e8 <UART_SetConfig+0x2cc>)
 8002ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eea:	f003 030c 	and.w	r3, r3, #12
 8002eee:	2b0c      	cmp	r3, #12
 8002ef0:	d828      	bhi.n	8002f44 <UART_SetConfig+0x128>
 8002ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ef8 <UART_SetConfig+0xdc>)
 8002ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef8:	08002f2d 	.word	0x08002f2d
 8002efc:	08002f45 	.word	0x08002f45
 8002f00:	08002f45 	.word	0x08002f45
 8002f04:	08002f45 	.word	0x08002f45
 8002f08:	08002f39 	.word	0x08002f39
 8002f0c:	08002f45 	.word	0x08002f45
 8002f10:	08002f45 	.word	0x08002f45
 8002f14:	08002f45 	.word	0x08002f45
 8002f18:	08002f33 	.word	0x08002f33
 8002f1c:	08002f45 	.word	0x08002f45
 8002f20:	08002f45 	.word	0x08002f45
 8002f24:	08002f45 	.word	0x08002f45
 8002f28:	08002f3f 	.word	0x08002f3f
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	77fb      	strb	r3, [r7, #31]
 8002f30:	e118      	b.n	8003164 <UART_SetConfig+0x348>
 8002f32:	2302      	movs	r3, #2
 8002f34:	77fb      	strb	r3, [r7, #31]
 8002f36:	e115      	b.n	8003164 <UART_SetConfig+0x348>
 8002f38:	2304      	movs	r3, #4
 8002f3a:	77fb      	strb	r3, [r7, #31]
 8002f3c:	e112      	b.n	8003164 <UART_SetConfig+0x348>
 8002f3e:	2308      	movs	r3, #8
 8002f40:	77fb      	strb	r3, [r7, #31]
 8002f42:	e10f      	b.n	8003164 <UART_SetConfig+0x348>
 8002f44:	2310      	movs	r3, #16
 8002f46:	77fb      	strb	r3, [r7, #31]
 8002f48:	e10c      	b.n	8003164 <UART_SetConfig+0x348>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a68      	ldr	r2, [pc, #416]	@ (80030f0 <UART_SetConfig+0x2d4>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d120      	bne.n	8002f96 <UART_SetConfig+0x17a>
 8002f54:	4b64      	ldr	r3, [pc, #400]	@ (80030e8 <UART_SetConfig+0x2cc>)
 8002f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f5a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002f5e:	2b30      	cmp	r3, #48	@ 0x30
 8002f60:	d013      	beq.n	8002f8a <UART_SetConfig+0x16e>
 8002f62:	2b30      	cmp	r3, #48	@ 0x30
 8002f64:	d814      	bhi.n	8002f90 <UART_SetConfig+0x174>
 8002f66:	2b20      	cmp	r3, #32
 8002f68:	d009      	beq.n	8002f7e <UART_SetConfig+0x162>
 8002f6a:	2b20      	cmp	r3, #32
 8002f6c:	d810      	bhi.n	8002f90 <UART_SetConfig+0x174>
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d002      	beq.n	8002f78 <UART_SetConfig+0x15c>
 8002f72:	2b10      	cmp	r3, #16
 8002f74:	d006      	beq.n	8002f84 <UART_SetConfig+0x168>
 8002f76:	e00b      	b.n	8002f90 <UART_SetConfig+0x174>
 8002f78:	2300      	movs	r3, #0
 8002f7a:	77fb      	strb	r3, [r7, #31]
 8002f7c:	e0f2      	b.n	8003164 <UART_SetConfig+0x348>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	77fb      	strb	r3, [r7, #31]
 8002f82:	e0ef      	b.n	8003164 <UART_SetConfig+0x348>
 8002f84:	2304      	movs	r3, #4
 8002f86:	77fb      	strb	r3, [r7, #31]
 8002f88:	e0ec      	b.n	8003164 <UART_SetConfig+0x348>
 8002f8a:	2308      	movs	r3, #8
 8002f8c:	77fb      	strb	r3, [r7, #31]
 8002f8e:	e0e9      	b.n	8003164 <UART_SetConfig+0x348>
 8002f90:	2310      	movs	r3, #16
 8002f92:	77fb      	strb	r3, [r7, #31]
 8002f94:	e0e6      	b.n	8003164 <UART_SetConfig+0x348>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a56      	ldr	r2, [pc, #344]	@ (80030f4 <UART_SetConfig+0x2d8>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d120      	bne.n	8002fe2 <UART_SetConfig+0x1c6>
 8002fa0:	4b51      	ldr	r3, [pc, #324]	@ (80030e8 <UART_SetConfig+0x2cc>)
 8002fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fa6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002faa:	2bc0      	cmp	r3, #192	@ 0xc0
 8002fac:	d013      	beq.n	8002fd6 <UART_SetConfig+0x1ba>
 8002fae:	2bc0      	cmp	r3, #192	@ 0xc0
 8002fb0:	d814      	bhi.n	8002fdc <UART_SetConfig+0x1c0>
 8002fb2:	2b80      	cmp	r3, #128	@ 0x80
 8002fb4:	d009      	beq.n	8002fca <UART_SetConfig+0x1ae>
 8002fb6:	2b80      	cmp	r3, #128	@ 0x80
 8002fb8:	d810      	bhi.n	8002fdc <UART_SetConfig+0x1c0>
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d002      	beq.n	8002fc4 <UART_SetConfig+0x1a8>
 8002fbe:	2b40      	cmp	r3, #64	@ 0x40
 8002fc0:	d006      	beq.n	8002fd0 <UART_SetConfig+0x1b4>
 8002fc2:	e00b      	b.n	8002fdc <UART_SetConfig+0x1c0>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	77fb      	strb	r3, [r7, #31]
 8002fc8:	e0cc      	b.n	8003164 <UART_SetConfig+0x348>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	77fb      	strb	r3, [r7, #31]
 8002fce:	e0c9      	b.n	8003164 <UART_SetConfig+0x348>
 8002fd0:	2304      	movs	r3, #4
 8002fd2:	77fb      	strb	r3, [r7, #31]
 8002fd4:	e0c6      	b.n	8003164 <UART_SetConfig+0x348>
 8002fd6:	2308      	movs	r3, #8
 8002fd8:	77fb      	strb	r3, [r7, #31]
 8002fda:	e0c3      	b.n	8003164 <UART_SetConfig+0x348>
 8002fdc:	2310      	movs	r3, #16
 8002fde:	77fb      	strb	r3, [r7, #31]
 8002fe0:	e0c0      	b.n	8003164 <UART_SetConfig+0x348>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a44      	ldr	r2, [pc, #272]	@ (80030f8 <UART_SetConfig+0x2dc>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d125      	bne.n	8003038 <UART_SetConfig+0x21c>
 8002fec:	4b3e      	ldr	r3, [pc, #248]	@ (80030e8 <UART_SetConfig+0x2cc>)
 8002fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ff2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ff6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ffa:	d017      	beq.n	800302c <UART_SetConfig+0x210>
 8002ffc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003000:	d817      	bhi.n	8003032 <UART_SetConfig+0x216>
 8003002:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003006:	d00b      	beq.n	8003020 <UART_SetConfig+0x204>
 8003008:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800300c:	d811      	bhi.n	8003032 <UART_SetConfig+0x216>
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <UART_SetConfig+0x1fe>
 8003012:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003016:	d006      	beq.n	8003026 <UART_SetConfig+0x20a>
 8003018:	e00b      	b.n	8003032 <UART_SetConfig+0x216>
 800301a:	2300      	movs	r3, #0
 800301c:	77fb      	strb	r3, [r7, #31]
 800301e:	e0a1      	b.n	8003164 <UART_SetConfig+0x348>
 8003020:	2302      	movs	r3, #2
 8003022:	77fb      	strb	r3, [r7, #31]
 8003024:	e09e      	b.n	8003164 <UART_SetConfig+0x348>
 8003026:	2304      	movs	r3, #4
 8003028:	77fb      	strb	r3, [r7, #31]
 800302a:	e09b      	b.n	8003164 <UART_SetConfig+0x348>
 800302c:	2308      	movs	r3, #8
 800302e:	77fb      	strb	r3, [r7, #31]
 8003030:	e098      	b.n	8003164 <UART_SetConfig+0x348>
 8003032:	2310      	movs	r3, #16
 8003034:	77fb      	strb	r3, [r7, #31]
 8003036:	e095      	b.n	8003164 <UART_SetConfig+0x348>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a2f      	ldr	r2, [pc, #188]	@ (80030fc <UART_SetConfig+0x2e0>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d125      	bne.n	800308e <UART_SetConfig+0x272>
 8003042:	4b29      	ldr	r3, [pc, #164]	@ (80030e8 <UART_SetConfig+0x2cc>)
 8003044:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003048:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800304c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003050:	d017      	beq.n	8003082 <UART_SetConfig+0x266>
 8003052:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003056:	d817      	bhi.n	8003088 <UART_SetConfig+0x26c>
 8003058:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800305c:	d00b      	beq.n	8003076 <UART_SetConfig+0x25a>
 800305e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003062:	d811      	bhi.n	8003088 <UART_SetConfig+0x26c>
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <UART_SetConfig+0x254>
 8003068:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800306c:	d006      	beq.n	800307c <UART_SetConfig+0x260>
 800306e:	e00b      	b.n	8003088 <UART_SetConfig+0x26c>
 8003070:	2301      	movs	r3, #1
 8003072:	77fb      	strb	r3, [r7, #31]
 8003074:	e076      	b.n	8003164 <UART_SetConfig+0x348>
 8003076:	2302      	movs	r3, #2
 8003078:	77fb      	strb	r3, [r7, #31]
 800307a:	e073      	b.n	8003164 <UART_SetConfig+0x348>
 800307c:	2304      	movs	r3, #4
 800307e:	77fb      	strb	r3, [r7, #31]
 8003080:	e070      	b.n	8003164 <UART_SetConfig+0x348>
 8003082:	2308      	movs	r3, #8
 8003084:	77fb      	strb	r3, [r7, #31]
 8003086:	e06d      	b.n	8003164 <UART_SetConfig+0x348>
 8003088:	2310      	movs	r3, #16
 800308a:	77fb      	strb	r3, [r7, #31]
 800308c:	e06a      	b.n	8003164 <UART_SetConfig+0x348>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a1b      	ldr	r2, [pc, #108]	@ (8003100 <UART_SetConfig+0x2e4>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d138      	bne.n	800310a <UART_SetConfig+0x2ee>
 8003098:	4b13      	ldr	r3, [pc, #76]	@ (80030e8 <UART_SetConfig+0x2cc>)
 800309a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800309e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80030a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80030a6:	d017      	beq.n	80030d8 <UART_SetConfig+0x2bc>
 80030a8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80030ac:	d82a      	bhi.n	8003104 <UART_SetConfig+0x2e8>
 80030ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030b2:	d00b      	beq.n	80030cc <UART_SetConfig+0x2b0>
 80030b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030b8:	d824      	bhi.n	8003104 <UART_SetConfig+0x2e8>
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <UART_SetConfig+0x2aa>
 80030be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030c2:	d006      	beq.n	80030d2 <UART_SetConfig+0x2b6>
 80030c4:	e01e      	b.n	8003104 <UART_SetConfig+0x2e8>
 80030c6:	2300      	movs	r3, #0
 80030c8:	77fb      	strb	r3, [r7, #31]
 80030ca:	e04b      	b.n	8003164 <UART_SetConfig+0x348>
 80030cc:	2302      	movs	r3, #2
 80030ce:	77fb      	strb	r3, [r7, #31]
 80030d0:	e048      	b.n	8003164 <UART_SetConfig+0x348>
 80030d2:	2304      	movs	r3, #4
 80030d4:	77fb      	strb	r3, [r7, #31]
 80030d6:	e045      	b.n	8003164 <UART_SetConfig+0x348>
 80030d8:	2308      	movs	r3, #8
 80030da:	77fb      	strb	r3, [r7, #31]
 80030dc:	e042      	b.n	8003164 <UART_SetConfig+0x348>
 80030de:	bf00      	nop
 80030e0:	efff69f3 	.word	0xefff69f3
 80030e4:	40011000 	.word	0x40011000
 80030e8:	40023800 	.word	0x40023800
 80030ec:	40004400 	.word	0x40004400
 80030f0:	40004800 	.word	0x40004800
 80030f4:	40004c00 	.word	0x40004c00
 80030f8:	40005000 	.word	0x40005000
 80030fc:	40011400 	.word	0x40011400
 8003100:	40007800 	.word	0x40007800
 8003104:	2310      	movs	r3, #16
 8003106:	77fb      	strb	r3, [r7, #31]
 8003108:	e02c      	b.n	8003164 <UART_SetConfig+0x348>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a72      	ldr	r2, [pc, #456]	@ (80032d8 <UART_SetConfig+0x4bc>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d125      	bne.n	8003160 <UART_SetConfig+0x344>
 8003114:	4b71      	ldr	r3, [pc, #452]	@ (80032dc <UART_SetConfig+0x4c0>)
 8003116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800311a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800311e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003122:	d017      	beq.n	8003154 <UART_SetConfig+0x338>
 8003124:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003128:	d817      	bhi.n	800315a <UART_SetConfig+0x33e>
 800312a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800312e:	d00b      	beq.n	8003148 <UART_SetConfig+0x32c>
 8003130:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003134:	d811      	bhi.n	800315a <UART_SetConfig+0x33e>
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <UART_SetConfig+0x326>
 800313a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800313e:	d006      	beq.n	800314e <UART_SetConfig+0x332>
 8003140:	e00b      	b.n	800315a <UART_SetConfig+0x33e>
 8003142:	2300      	movs	r3, #0
 8003144:	77fb      	strb	r3, [r7, #31]
 8003146:	e00d      	b.n	8003164 <UART_SetConfig+0x348>
 8003148:	2302      	movs	r3, #2
 800314a:	77fb      	strb	r3, [r7, #31]
 800314c:	e00a      	b.n	8003164 <UART_SetConfig+0x348>
 800314e:	2304      	movs	r3, #4
 8003150:	77fb      	strb	r3, [r7, #31]
 8003152:	e007      	b.n	8003164 <UART_SetConfig+0x348>
 8003154:	2308      	movs	r3, #8
 8003156:	77fb      	strb	r3, [r7, #31]
 8003158:	e004      	b.n	8003164 <UART_SetConfig+0x348>
 800315a:	2310      	movs	r3, #16
 800315c:	77fb      	strb	r3, [r7, #31]
 800315e:	e001      	b.n	8003164 <UART_SetConfig+0x348>
 8003160:	2310      	movs	r3, #16
 8003162:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800316c:	d15b      	bne.n	8003226 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800316e:	7ffb      	ldrb	r3, [r7, #31]
 8003170:	2b08      	cmp	r3, #8
 8003172:	d828      	bhi.n	80031c6 <UART_SetConfig+0x3aa>
 8003174:	a201      	add	r2, pc, #4	@ (adr r2, 800317c <UART_SetConfig+0x360>)
 8003176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317a:	bf00      	nop
 800317c:	080031a1 	.word	0x080031a1
 8003180:	080031a9 	.word	0x080031a9
 8003184:	080031b1 	.word	0x080031b1
 8003188:	080031c7 	.word	0x080031c7
 800318c:	080031b7 	.word	0x080031b7
 8003190:	080031c7 	.word	0x080031c7
 8003194:	080031c7 	.word	0x080031c7
 8003198:	080031c7 	.word	0x080031c7
 800319c:	080031bf 	.word	0x080031bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031a0:	f7fe fdf4 	bl	8001d8c <HAL_RCC_GetPCLK1Freq>
 80031a4:	61b8      	str	r0, [r7, #24]
        break;
 80031a6:	e013      	b.n	80031d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031a8:	f7fe fe04 	bl	8001db4 <HAL_RCC_GetPCLK2Freq>
 80031ac:	61b8      	str	r0, [r7, #24]
        break;
 80031ae:	e00f      	b.n	80031d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031b0:	4b4b      	ldr	r3, [pc, #300]	@ (80032e0 <UART_SetConfig+0x4c4>)
 80031b2:	61bb      	str	r3, [r7, #24]
        break;
 80031b4:	e00c      	b.n	80031d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031b6:	f7fe fd17 	bl	8001be8 <HAL_RCC_GetSysClockFreq>
 80031ba:	61b8      	str	r0, [r7, #24]
        break;
 80031bc:	e008      	b.n	80031d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031c2:	61bb      	str	r3, [r7, #24]
        break;
 80031c4:	e004      	b.n	80031d0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	77bb      	strb	r3, [r7, #30]
        break;
 80031ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d074      	beq.n	80032c0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	005a      	lsls	r2, r3, #1
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	085b      	lsrs	r3, r3, #1
 80031e0:	441a      	add	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	2b0f      	cmp	r3, #15
 80031f0:	d916      	bls.n	8003220 <UART_SetConfig+0x404>
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031f8:	d212      	bcs.n	8003220 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	f023 030f 	bic.w	r3, r3, #15
 8003202:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	085b      	lsrs	r3, r3, #1
 8003208:	b29b      	uxth	r3, r3
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	b29a      	uxth	r2, r3
 8003210:	89fb      	ldrh	r3, [r7, #14]
 8003212:	4313      	orrs	r3, r2
 8003214:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	89fa      	ldrh	r2, [r7, #14]
 800321c:	60da      	str	r2, [r3, #12]
 800321e:	e04f      	b.n	80032c0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	77bb      	strb	r3, [r7, #30]
 8003224:	e04c      	b.n	80032c0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003226:	7ffb      	ldrb	r3, [r7, #31]
 8003228:	2b08      	cmp	r3, #8
 800322a:	d828      	bhi.n	800327e <UART_SetConfig+0x462>
 800322c:	a201      	add	r2, pc, #4	@ (adr r2, 8003234 <UART_SetConfig+0x418>)
 800322e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003232:	bf00      	nop
 8003234:	08003259 	.word	0x08003259
 8003238:	08003261 	.word	0x08003261
 800323c:	08003269 	.word	0x08003269
 8003240:	0800327f 	.word	0x0800327f
 8003244:	0800326f 	.word	0x0800326f
 8003248:	0800327f 	.word	0x0800327f
 800324c:	0800327f 	.word	0x0800327f
 8003250:	0800327f 	.word	0x0800327f
 8003254:	08003277 	.word	0x08003277
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003258:	f7fe fd98 	bl	8001d8c <HAL_RCC_GetPCLK1Freq>
 800325c:	61b8      	str	r0, [r7, #24]
        break;
 800325e:	e013      	b.n	8003288 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003260:	f7fe fda8 	bl	8001db4 <HAL_RCC_GetPCLK2Freq>
 8003264:	61b8      	str	r0, [r7, #24]
        break;
 8003266:	e00f      	b.n	8003288 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003268:	4b1d      	ldr	r3, [pc, #116]	@ (80032e0 <UART_SetConfig+0x4c4>)
 800326a:	61bb      	str	r3, [r7, #24]
        break;
 800326c:	e00c      	b.n	8003288 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800326e:	f7fe fcbb 	bl	8001be8 <HAL_RCC_GetSysClockFreq>
 8003272:	61b8      	str	r0, [r7, #24]
        break;
 8003274:	e008      	b.n	8003288 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003276:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800327a:	61bb      	str	r3, [r7, #24]
        break;
 800327c:	e004      	b.n	8003288 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	77bb      	strb	r3, [r7, #30]
        break;
 8003286:	bf00      	nop
    }

    if (pclk != 0U)
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d018      	beq.n	80032c0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	085a      	lsrs	r2, r3, #1
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	441a      	add	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	2b0f      	cmp	r3, #15
 80032a6:	d909      	bls.n	80032bc <UART_SetConfig+0x4a0>
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032ae:	d205      	bcs.n	80032bc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	60da      	str	r2, [r3, #12]
 80032ba:	e001      	b.n	80032c0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80032cc:	7fbb      	ldrb	r3, [r7, #30]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3720      	adds	r7, #32
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40007c00 	.word	0x40007c00
 80032dc:	40023800 	.word	0x40023800
 80032e0:	00f42400 	.word	0x00f42400

080032e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f0:	f003 0308 	and.w	r3, r3, #8
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00a      	beq.n	800330e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00a      	beq.n	8003330 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003356:	f003 0304 	and.w	r3, r3, #4
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003378:	f003 0310 	and.w	r3, r3, #16
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339a:	f003 0320 	and.w	r3, r3, #32
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d01a      	beq.n	80033fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033e2:	d10a      	bne.n	80033fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00a      	beq.n	800341c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	430a      	orrs	r2, r1
 800341a:	605a      	str	r2, [r3, #4]
  }
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b098      	sub	sp, #96	@ 0x60
 800342c:	af02      	add	r7, sp, #8
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003438:	f7fd fbc0 	bl	8000bbc <HAL_GetTick>
 800343c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b08      	cmp	r3, #8
 800344a:	d12e      	bne.n	80034aa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800344c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003454:	2200      	movs	r2, #0
 8003456:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f88c 	bl	8003578 <UART_WaitOnFlagUntilTimeout>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d021      	beq.n	80034aa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800346e:	e853 3f00 	ldrex	r3, [r3]
 8003472:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003476:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800347a:	653b      	str	r3, [r7, #80]	@ 0x50
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	461a      	mov	r2, r3
 8003482:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003484:	647b      	str	r3, [r7, #68]	@ 0x44
 8003486:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003488:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800348a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800348c:	e841 2300 	strex	r3, r2, [r1]
 8003490:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1e6      	bne.n	8003466 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2220      	movs	r2, #32
 800349c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e062      	b.n	8003570 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d149      	bne.n	800354c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034c0:	2200      	movs	r2, #0
 80034c2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f856 	bl	8003578 <UART_WaitOnFlagUntilTimeout>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d03c      	beq.n	800354c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034da:	e853 3f00 	ldrex	r3, [r3]
 80034de:	623b      	str	r3, [r7, #32]
   return(result);
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	461a      	mov	r2, r3
 80034ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80034f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034f8:	e841 2300 	strex	r3, r2, [r1]
 80034fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1e6      	bne.n	80034d2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	3308      	adds	r3, #8
 800350a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	e853 3f00 	ldrex	r3, [r3]
 8003512:	60fb      	str	r3, [r7, #12]
   return(result);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f023 0301 	bic.w	r3, r3, #1
 800351a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	3308      	adds	r3, #8
 8003522:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003524:	61fa      	str	r2, [r7, #28]
 8003526:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003528:	69b9      	ldr	r1, [r7, #24]
 800352a:	69fa      	ldr	r2, [r7, #28]
 800352c:	e841 2300 	strex	r3, r2, [r1]
 8003530:	617b      	str	r3, [r7, #20]
   return(result);
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1e5      	bne.n	8003504 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2220      	movs	r2, #32
 800353c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e011      	b.n	8003570 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2220      	movs	r2, #32
 8003550:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2220      	movs	r2, #32
 8003556:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3758      	adds	r7, #88	@ 0x58
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	603b      	str	r3, [r7, #0]
 8003584:	4613      	mov	r3, r2
 8003586:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003588:	e04f      	b.n	800362a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003590:	d04b      	beq.n	800362a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003592:	f7fd fb13 	bl	8000bbc <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d302      	bcc.n	80035a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d101      	bne.n	80035ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e04e      	b.n	800364a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0304 	and.w	r3, r3, #4
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d037      	beq.n	800362a <UART_WaitOnFlagUntilTimeout+0xb2>
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	2b80      	cmp	r3, #128	@ 0x80
 80035be:	d034      	beq.n	800362a <UART_WaitOnFlagUntilTimeout+0xb2>
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	2b40      	cmp	r3, #64	@ 0x40
 80035c4:	d031      	beq.n	800362a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	f003 0308 	and.w	r3, r3, #8
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d110      	bne.n	80035f6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2208      	movs	r2, #8
 80035da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f000 f8ff 	bl	80037e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2208      	movs	r2, #8
 80035e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e029      	b.n	800364a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003600:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003604:	d111      	bne.n	800362a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800360e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f000 f8e5 	bl	80037e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2220      	movs	r2, #32
 800361a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e00f      	b.n	800364a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	69da      	ldr	r2, [r3, #28]
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	4013      	ands	r3, r2
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	429a      	cmp	r2, r3
 8003638:	bf0c      	ite	eq
 800363a:	2301      	moveq	r3, #1
 800363c:	2300      	movne	r3, #0
 800363e:	b2db      	uxtb	r3, r3
 8003640:	461a      	mov	r2, r3
 8003642:	79fb      	ldrb	r3, [r7, #7]
 8003644:	429a      	cmp	r2, r3
 8003646:	d0a0      	beq.n	800358a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
	...

08003654 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003654:	b480      	push	{r7}
 8003656:	b097      	sub	sp, #92	@ 0x5c
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	4613      	mov	r3, r2
 8003660:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	88fa      	ldrh	r2, [r7, #6]
 800366c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	88fa      	ldrh	r2, [r7, #6]
 8003674:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003686:	d10e      	bne.n	80036a6 <UART_Start_Receive_IT+0x52>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d105      	bne.n	800369c <UART_Start_Receive_IT+0x48>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003696:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800369a:	e02d      	b.n	80036f8 <UART_Start_Receive_IT+0xa4>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	22ff      	movs	r2, #255	@ 0xff
 80036a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80036a4:	e028      	b.n	80036f8 <UART_Start_Receive_IT+0xa4>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10d      	bne.n	80036ca <UART_Start_Receive_IT+0x76>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d104      	bne.n	80036c0 <UART_Start_Receive_IT+0x6c>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	22ff      	movs	r2, #255	@ 0xff
 80036ba:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80036be:	e01b      	b.n	80036f8 <UART_Start_Receive_IT+0xa4>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	227f      	movs	r2, #127	@ 0x7f
 80036c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80036c8:	e016      	b.n	80036f8 <UART_Start_Receive_IT+0xa4>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036d2:	d10d      	bne.n	80036f0 <UART_Start_Receive_IT+0x9c>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d104      	bne.n	80036e6 <UART_Start_Receive_IT+0x92>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	227f      	movs	r2, #127	@ 0x7f
 80036e0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80036e4:	e008      	b.n	80036f8 <UART_Start_Receive_IT+0xa4>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	223f      	movs	r2, #63	@ 0x3f
 80036ea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80036ee:	e003      	b.n	80036f8 <UART_Start_Receive_IT+0xa4>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2222      	movs	r2, #34	@ 0x22
 8003704:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	3308      	adds	r3, #8
 800370e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003710:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003712:	e853 3f00 	ldrex	r3, [r3]
 8003716:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800371a:	f043 0301 	orr.w	r3, r3, #1
 800371e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	3308      	adds	r3, #8
 8003726:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003728:	64ba      	str	r2, [r7, #72]	@ 0x48
 800372a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800372e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003730:	e841 2300 	strex	r3, r2, [r1]
 8003734:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003736:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1e5      	bne.n	8003708 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003744:	d107      	bne.n	8003756 <UART_Start_Receive_IT+0x102>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d103      	bne.n	8003756 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	4a21      	ldr	r2, [pc, #132]	@ (80037d8 <UART_Start_Receive_IT+0x184>)
 8003752:	669a      	str	r2, [r3, #104]	@ 0x68
 8003754:	e002      	b.n	800375c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4a20      	ldr	r2, [pc, #128]	@ (80037dc <UART_Start_Receive_IT+0x188>)
 800375a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d019      	beq.n	8003798 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800376c:	e853 3f00 	ldrex	r3, [r3]
 8003770:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003774:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003778:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003782:	637b      	str	r3, [r7, #52]	@ 0x34
 8003784:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003786:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003788:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800378a:	e841 2300 	strex	r3, r2, [r1]
 800378e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1e6      	bne.n	8003764 <UART_Start_Receive_IT+0x110>
 8003796:	e018      	b.n	80037ca <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	e853 3f00 	ldrex	r3, [r3]
 80037a4:	613b      	str	r3, [r7, #16]
   return(result);
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	f043 0320 	orr.w	r3, r3, #32
 80037ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	461a      	mov	r2, r3
 80037b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037b6:	623b      	str	r3, [r7, #32]
 80037b8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ba:	69f9      	ldr	r1, [r7, #28]
 80037bc:	6a3a      	ldr	r2, [r7, #32]
 80037be:	e841 2300 	strex	r3, r2, [r1]
 80037c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1e6      	bne.n	8003798 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	375c      	adds	r7, #92	@ 0x5c
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	08003c47 	.word	0x08003c47
 80037dc:	08003a9f 	.word	0x08003a9f

080037e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b095      	sub	sp, #84	@ 0x54
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037f0:	e853 3f00 	ldrex	r3, [r3]
 80037f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80037f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	461a      	mov	r2, r3
 8003804:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003806:	643b      	str	r3, [r7, #64]	@ 0x40
 8003808:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800380c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800380e:	e841 2300 	strex	r3, r2, [r1]
 8003812:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1e6      	bne.n	80037e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	3308      	adds	r3, #8
 8003820:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	e853 3f00 	ldrex	r3, [r3]
 8003828:	61fb      	str	r3, [r7, #28]
   return(result);
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	f023 0301 	bic.w	r3, r3, #1
 8003830:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	3308      	adds	r3, #8
 8003838:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800383a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800383c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003840:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003842:	e841 2300 	strex	r3, r2, [r1]
 8003846:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1e5      	bne.n	800381a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003852:	2b01      	cmp	r3, #1
 8003854:	d118      	bne.n	8003888 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	e853 3f00 	ldrex	r3, [r3]
 8003862:	60bb      	str	r3, [r7, #8]
   return(result);
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f023 0310 	bic.w	r3, r3, #16
 800386a:	647b      	str	r3, [r7, #68]	@ 0x44
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	461a      	mov	r2, r3
 8003872:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003874:	61bb      	str	r3, [r7, #24]
 8003876:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003878:	6979      	ldr	r1, [r7, #20]
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	e841 2300 	strex	r3, r2, [r1]
 8003880:	613b      	str	r3, [r7, #16]
   return(result);
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1e6      	bne.n	8003856 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2220      	movs	r2, #32
 800388c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800389c:	bf00      	nop
 800389e:	3754      	adds	r7, #84	@ 0x54
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f7ff fa88 	bl	8002ddc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038cc:	bf00      	nop
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b08f      	sub	sp, #60	@ 0x3c
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038e0:	2b21      	cmp	r3, #33	@ 0x21
 80038e2:	d14c      	bne.n	800397e <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d132      	bne.n	8003956 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f6:	6a3b      	ldr	r3, [r7, #32]
 80038f8:	e853 3f00 	ldrex	r3, [r3]
 80038fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003904:	637b      	str	r3, [r7, #52]	@ 0x34
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	461a      	mov	r2, r3
 800390c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800390e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003910:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003912:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003914:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003916:	e841 2300 	strex	r3, r2, [r1]
 800391a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800391c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1e6      	bne.n	80038f0 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	e853 3f00 	ldrex	r3, [r3]
 800392e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003936:	633b      	str	r3, [r7, #48]	@ 0x30
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	461a      	mov	r2, r3
 800393e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003940:	61bb      	str	r3, [r7, #24]
 8003942:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003944:	6979      	ldr	r1, [r7, #20]
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	e841 2300 	strex	r3, r2, [r1]
 800394c:	613b      	str	r3, [r7, #16]
   return(result);
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1e6      	bne.n	8003922 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003954:	e013      	b.n	800397e <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800395a:	781a      	ldrb	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003972:	b29b      	uxth	r3, r3
 8003974:	3b01      	subs	r3, #1
 8003976:	b29a      	uxth	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800397e:	bf00      	nop
 8003980:	373c      	adds	r7, #60	@ 0x3c
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr

0800398a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800398a:	b480      	push	{r7}
 800398c:	b091      	sub	sp, #68	@ 0x44
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003996:	2b21      	cmp	r3, #33	@ 0x21
 8003998:	d151      	bne.n	8003a3e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d132      	bne.n	8003a0c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ae:	e853 3f00 	ldrex	r3, [r3]
 80039b2:	623b      	str	r3, [r7, #32]
   return(result);
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	461a      	mov	r2, r3
 80039c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80039c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039cc:	e841 2300 	strex	r3, r2, [r1]
 80039d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80039d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1e6      	bne.n	80039a6 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	e853 3f00 	ldrex	r3, [r3]
 80039e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	461a      	mov	r2, r3
 80039f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039f6:	61fb      	str	r3, [r7, #28]
 80039f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fa:	69b9      	ldr	r1, [r7, #24]
 80039fc:	69fa      	ldr	r2, [r7, #28]
 80039fe:	e841 2300 	strex	r3, r2, [r1]
 8003a02:	617b      	str	r3, [r7, #20]
   return(result);
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1e6      	bne.n	80039d8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003a0a:	e018      	b.n	8003a3e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003a12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	461a      	mov	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a20:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a26:	1c9a      	adds	r2, r3, #2
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8003a3e:	bf00      	nop
 8003a40:	3744      	adds	r7, #68	@ 0x44
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b088      	sub	sp, #32
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	e853 3f00 	ldrex	r3, [r3]
 8003a5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a66:	61fb      	str	r3, [r7, #28]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	61bb      	str	r3, [r7, #24]
 8003a72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a74:	6979      	ldr	r1, [r7, #20]
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	e841 2300 	strex	r3, r2, [r1]
 8003a7c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1e6      	bne.n	8003a52 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2220      	movs	r2, #32
 8003a88:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7fc fddb 	bl	800064c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a96:	bf00      	nop
 8003a98:	3720      	adds	r7, #32
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b09c      	sub	sp, #112	@ 0x70
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003aac:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ab6:	2b22      	cmp	r3, #34	@ 0x22
 8003ab8:	f040 80b9 	bne.w	8003c2e <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003ac6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003aca:	b2d9      	uxtb	r1, r3
 8003acc:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ad6:	400a      	ands	r2, r1
 8003ad8:	b2d2      	uxtb	r2, r2
 8003ada:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f040 809c 	bne.w	8003c3e <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b0e:	e853 3f00 	ldrex	r3, [r3]
 8003b12:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b1a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	461a      	mov	r2, r3
 8003b22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b24:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b26:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b28:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b2a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b2c:	e841 2300 	strex	r3, r2, [r1]
 8003b30:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1e6      	bne.n	8003b06 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	3308      	adds	r3, #8
 8003b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b42:	e853 3f00 	ldrex	r3, [r3]
 8003b46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b4a:	f023 0301 	bic.w	r3, r3, #1
 8003b4e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	3308      	adds	r3, #8
 8003b56:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003b58:	647a      	str	r2, [r7, #68]	@ 0x44
 8003b5a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b60:	e841 2300 	strex	r3, r2, [r1]
 8003b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1e5      	bne.n	8003b38 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d018      	beq.n	8003bc0 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b96:	e853 3f00 	ldrex	r3, [r3]
 8003b9a:	623b      	str	r3, [r7, #32]
   return(result);
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003ba2:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003bac:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bb4:	e841 2300 	strex	r3, r2, [r1]
 8003bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1e6      	bne.n	8003b8e <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d12e      	bne.n	8003c26 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	e853 3f00 	ldrex	r3, [r3]
 8003bda:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f023 0310 	bic.w	r3, r3, #16
 8003be2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	461a      	mov	r2, r3
 8003bea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bec:	61fb      	str	r3, [r7, #28]
 8003bee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf0:	69b9      	ldr	r1, [r7, #24]
 8003bf2:	69fa      	ldr	r2, [r7, #28]
 8003bf4:	e841 2300 	strex	r3, r2, [r1]
 8003bf8:	617b      	str	r3, [r7, #20]
   return(result);
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1e6      	bne.n	8003bce <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	f003 0310 	and.w	r3, r3, #16
 8003c0a:	2b10      	cmp	r3, #16
 8003c0c:	d103      	bne.n	8003c16 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2210      	movs	r2, #16
 8003c14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7ff f8e6 	bl	8002df0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c24:	e00b      	b.n	8003c3e <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7fc fd28 	bl	800067c <HAL_UART_RxCpltCallback>
}
 8003c2c:	e007      	b.n	8003c3e <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699a      	ldr	r2, [r3, #24]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f042 0208 	orr.w	r2, r2, #8
 8003c3c:	619a      	str	r2, [r3, #24]
}
 8003c3e:	bf00      	nop
 8003c40:	3770      	adds	r7, #112	@ 0x70
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b09c      	sub	sp, #112	@ 0x70
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003c54:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c5e:	2b22      	cmp	r3, #34	@ 0x22
 8003c60:	f040 80b9 	bne.w	8003dd6 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c72:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003c74:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8003c78:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c82:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c88:	1c9a      	adds	r2, r3, #2
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	3b01      	subs	r3, #1
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f040 809c 	bne.w	8003de6 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cb6:	e853 3f00 	ldrex	r3, [r3]
 8003cba:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003cbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cbe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cc2:	667b      	str	r3, [r7, #100]	@ 0x64
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	461a      	mov	r2, r3
 8003cca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ccc:	657b      	str	r3, [r7, #84]	@ 0x54
 8003cce:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003cd2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003cd4:	e841 2300 	strex	r3, r2, [r1]
 8003cd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003cda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1e6      	bne.n	8003cae <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	3308      	adds	r3, #8
 8003ce6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cea:	e853 3f00 	ldrex	r3, [r3]
 8003cee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf2:	f023 0301 	bic.w	r3, r3, #1
 8003cf6:	663b      	str	r3, [r7, #96]	@ 0x60
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3308      	adds	r3, #8
 8003cfe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003d00:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d08:	e841 2300 	strex	r3, r2, [r1]
 8003d0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1e5      	bne.n	8003ce0 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d018      	beq.n	8003d68 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
 8003d3e:	e853 3f00 	ldrex	r3, [r3]
 8003d42:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	461a      	mov	r2, r3
 8003d52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d56:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d5c:	e841 2300 	strex	r3, r2, [r1]
 8003d60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1e6      	bne.n	8003d36 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d12e      	bne.n	8003dce <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	e853 3f00 	ldrex	r3, [r3]
 8003d82:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	f023 0310 	bic.w	r3, r3, #16
 8003d8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	461a      	mov	r2, r3
 8003d92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d94:	61bb      	str	r3, [r7, #24]
 8003d96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d98:	6979      	ldr	r1, [r7, #20]
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	e841 2300 	strex	r3, r2, [r1]
 8003da0:	613b      	str	r3, [r7, #16]
   return(result);
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1e6      	bne.n	8003d76 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	69db      	ldr	r3, [r3, #28]
 8003dae:	f003 0310 	and.w	r3, r3, #16
 8003db2:	2b10      	cmp	r3, #16
 8003db4:	d103      	bne.n	8003dbe <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2210      	movs	r2, #16
 8003dbc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7ff f812 	bl	8002df0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003dcc:	e00b      	b.n	8003de6 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7fc fc54 	bl	800067c <HAL_UART_RxCpltCallback>
}
 8003dd4:	e007      	b.n	8003de6 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	699a      	ldr	r2, [r3, #24]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f042 0208 	orr.w	r2, r2, #8
 8003de4:	619a      	str	r2, [r3, #24]
}
 8003de6:	bf00      	nop
 8003de8:	3770      	adds	r7, #112	@ 0x70
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <memset>:
 8003dee:	4402      	add	r2, r0
 8003df0:	4603      	mov	r3, r0
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d100      	bne.n	8003df8 <memset+0xa>
 8003df6:	4770      	bx	lr
 8003df8:	f803 1b01 	strb.w	r1, [r3], #1
 8003dfc:	e7f9      	b.n	8003df2 <memset+0x4>

08003dfe <strstr>:
 8003dfe:	780a      	ldrb	r2, [r1, #0]
 8003e00:	b570      	push	{r4, r5, r6, lr}
 8003e02:	b96a      	cbnz	r2, 8003e20 <strstr+0x22>
 8003e04:	bd70      	pop	{r4, r5, r6, pc}
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d109      	bne.n	8003e1e <strstr+0x20>
 8003e0a:	460c      	mov	r4, r1
 8003e0c:	4605      	mov	r5, r0
 8003e0e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0f6      	beq.n	8003e04 <strstr+0x6>
 8003e16:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003e1a:	429e      	cmp	r6, r3
 8003e1c:	d0f7      	beq.n	8003e0e <strstr+0x10>
 8003e1e:	3001      	adds	r0, #1
 8003e20:	7803      	ldrb	r3, [r0, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1ef      	bne.n	8003e06 <strstr+0x8>
 8003e26:	4618      	mov	r0, r3
 8003e28:	e7ec      	b.n	8003e04 <strstr+0x6>
	...

08003e2c <__libc_init_array>:
 8003e2c:	b570      	push	{r4, r5, r6, lr}
 8003e2e:	4d0d      	ldr	r5, [pc, #52]	@ (8003e64 <__libc_init_array+0x38>)
 8003e30:	4c0d      	ldr	r4, [pc, #52]	@ (8003e68 <__libc_init_array+0x3c>)
 8003e32:	1b64      	subs	r4, r4, r5
 8003e34:	10a4      	asrs	r4, r4, #2
 8003e36:	2600      	movs	r6, #0
 8003e38:	42a6      	cmp	r6, r4
 8003e3a:	d109      	bne.n	8003e50 <__libc_init_array+0x24>
 8003e3c:	4d0b      	ldr	r5, [pc, #44]	@ (8003e6c <__libc_init_array+0x40>)
 8003e3e:	4c0c      	ldr	r4, [pc, #48]	@ (8003e70 <__libc_init_array+0x44>)
 8003e40:	f000 f818 	bl	8003e74 <_init>
 8003e44:	1b64      	subs	r4, r4, r5
 8003e46:	10a4      	asrs	r4, r4, #2
 8003e48:	2600      	movs	r6, #0
 8003e4a:	42a6      	cmp	r6, r4
 8003e4c:	d105      	bne.n	8003e5a <__libc_init_array+0x2e>
 8003e4e:	bd70      	pop	{r4, r5, r6, pc}
 8003e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e54:	4798      	blx	r3
 8003e56:	3601      	adds	r6, #1
 8003e58:	e7ee      	b.n	8003e38 <__libc_init_array+0xc>
 8003e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e5e:	4798      	blx	r3
 8003e60:	3601      	adds	r6, #1
 8003e62:	e7f2      	b.n	8003e4a <__libc_init_array+0x1e>
 8003e64:	08003ebc 	.word	0x08003ebc
 8003e68:	08003ebc 	.word	0x08003ebc
 8003e6c:	08003ebc 	.word	0x08003ebc
 8003e70:	08003ec0 	.word	0x08003ec0

08003e74 <_init>:
 8003e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e76:	bf00      	nop
 8003e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e7a:	bc08      	pop	{r3}
 8003e7c:	469e      	mov	lr, r3
 8003e7e:	4770      	bx	lr

08003e80 <_fini>:
 8003e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e82:	bf00      	nop
 8003e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e86:	bc08      	pop	{r3}
 8003e88:	469e      	mov	lr, r3
 8003e8a:	4770      	bx	lr
