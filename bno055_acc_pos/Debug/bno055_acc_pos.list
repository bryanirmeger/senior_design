
bno055_acc_pos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000362c  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003824  08003824  00004824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003850  08003850  00005014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003850  08003850  00004850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003858  08003858  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003858  08003858  00004858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800385c  0800385c  0000485c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08003860  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000014  08003874  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08003874  00005118  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ff9  00000000  00000000  00005042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c86  00000000  00000000  0000f03b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000890  00000000  00000000  00010cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000672  00000000  00000000  00011558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a9f  00000000  00000000  00011bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be9d  00000000  00000000  00038669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed53d  00000000  00000000  00044506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00131a43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000216c  00000000  00000000  00131a88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00133bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000014 	.word	0x20000014
 8000214:	00000000 	.word	0x00000000
 8000218:	0800380c 	.word	0x0800380c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000018 	.word	0x20000018
 8000234:	0800380c 	.word	0x0800380c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b988 	b.w	8000560 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	468e      	mov	lr, r1
 8000270:	4604      	mov	r4, r0
 8000272:	4688      	mov	r8, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d962      	bls.n	8000344 <__udivmoddi4+0xdc>
 800027e:	fab2 f682 	clz	r6, r2
 8000282:	b14e      	cbz	r6, 8000298 <__udivmoddi4+0x30>
 8000284:	f1c6 0320 	rsb	r3, r6, #32
 8000288:	fa01 f806 	lsl.w	r8, r1, r6
 800028c:	fa20 f303 	lsr.w	r3, r0, r3
 8000290:	40b7      	lsls	r7, r6
 8000292:	ea43 0808 	orr.w	r8, r3, r8
 8000296:	40b4      	lsls	r4, r6
 8000298:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800029c:	fa1f fc87 	uxth.w	ip, r7
 80002a0:	fbb8 f1fe 	udiv	r1, r8, lr
 80002a4:	0c23      	lsrs	r3, r4, #16
 80002a6:	fb0e 8811 	mls	r8, lr, r1, r8
 80002aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ae:	fb01 f20c 	mul.w	r2, r1, ip
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002bc:	f080 80ea 	bcs.w	8000494 <__udivmoddi4+0x22c>
 80002c0:	429a      	cmp	r2, r3
 80002c2:	f240 80e7 	bls.w	8000494 <__udivmoddi4+0x22c>
 80002c6:	3902      	subs	r1, #2
 80002c8:	443b      	add	r3, r7
 80002ca:	1a9a      	subs	r2, r3, r2
 80002cc:	b2a3      	uxth	r3, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002da:	fb00 fc0c 	mul.w	ip, r0, ip
 80002de:	459c      	cmp	ip, r3
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0x8e>
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e8:	f080 80d6 	bcs.w	8000498 <__udivmoddi4+0x230>
 80002ec:	459c      	cmp	ip, r3
 80002ee:	f240 80d3 	bls.w	8000498 <__udivmoddi4+0x230>
 80002f2:	443b      	add	r3, r7
 80002f4:	3802      	subs	r0, #2
 80002f6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fa:	eba3 030c 	sub.w	r3, r3, ip
 80002fe:	2100      	movs	r1, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0xa2>
 8000302:	40f3      	lsrs	r3, r6
 8000304:	2200      	movs	r2, #0
 8000306:	e9c5 3200 	strd	r3, r2, [r5]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d905      	bls.n	800031e <__udivmoddi4+0xb6>
 8000312:	b10d      	cbz	r5, 8000318 <__udivmoddi4+0xb0>
 8000314:	e9c5 0100 	strd	r0, r1, [r5]
 8000318:	2100      	movs	r1, #0
 800031a:	4608      	mov	r0, r1
 800031c:	e7f5      	b.n	800030a <__udivmoddi4+0xa2>
 800031e:	fab3 f183 	clz	r1, r3
 8000322:	2900      	cmp	r1, #0
 8000324:	d146      	bne.n	80003b4 <__udivmoddi4+0x14c>
 8000326:	4573      	cmp	r3, lr
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xc8>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 8105 	bhi.w	800053a <__udivmoddi4+0x2d2>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb6e 0203 	sbc.w	r2, lr, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4690      	mov	r8, r2
 800033a:	2d00      	cmp	r5, #0
 800033c:	d0e5      	beq.n	800030a <__udivmoddi4+0xa2>
 800033e:	e9c5 4800 	strd	r4, r8, [r5]
 8000342:	e7e2      	b.n	800030a <__udivmoddi4+0xa2>
 8000344:	2a00      	cmp	r2, #0
 8000346:	f000 8090 	beq.w	800046a <__udivmoddi4+0x202>
 800034a:	fab2 f682 	clz	r6, r2
 800034e:	2e00      	cmp	r6, #0
 8000350:	f040 80a4 	bne.w	800049c <__udivmoddi4+0x234>
 8000354:	1a8a      	subs	r2, r1, r2
 8000356:	0c03      	lsrs	r3, r0, #16
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	b280      	uxth	r0, r0
 800035e:	b2bc      	uxth	r4, r7
 8000360:	2101      	movs	r1, #1
 8000362:	fbb2 fcfe 	udiv	ip, r2, lr
 8000366:	fb0e 221c 	mls	r2, lr, ip, r2
 800036a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800036e:	fb04 f20c 	mul.w	r2, r4, ip
 8000372:	429a      	cmp	r2, r3
 8000374:	d907      	bls.n	8000386 <__udivmoddi4+0x11e>
 8000376:	18fb      	adds	r3, r7, r3
 8000378:	f10c 38ff 	add.w	r8, ip, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x11c>
 800037e:	429a      	cmp	r2, r3
 8000380:	f200 80e0 	bhi.w	8000544 <__udivmoddi4+0x2dc>
 8000384:	46c4      	mov	ip, r8
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	fbb3 f2fe 	udiv	r2, r3, lr
 800038c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000390:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000394:	fb02 f404 	mul.w	r4, r2, r4
 8000398:	429c      	cmp	r4, r3
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x144>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f102 30ff 	add.w	r0, r2, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x142>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f200 80ca 	bhi.w	800053e <__udivmoddi4+0x2d6>
 80003aa:	4602      	mov	r2, r0
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0x98>
 80003b4:	f1c1 0620 	rsb	r6, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 f706 	lsr.w	r7, r2, r6
 80003be:	431f      	orrs	r7, r3
 80003c0:	fa0e f401 	lsl.w	r4, lr, r1
 80003c4:	fa20 f306 	lsr.w	r3, r0, r6
 80003c8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003cc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d0:	4323      	orrs	r3, r4
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	fa1f fc87 	uxth.w	ip, r7
 80003da:	fbbe f0f9 	udiv	r0, lr, r9
 80003de:	0c1c      	lsrs	r4, r3, #16
 80003e0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003e4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003ec:	45a6      	cmp	lr, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d909      	bls.n	8000408 <__udivmoddi4+0x1a0>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003fa:	f080 809c 	bcs.w	8000536 <__udivmoddi4+0x2ce>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f240 8099 	bls.w	8000536 <__udivmoddi4+0x2ce>
 8000404:	3802      	subs	r0, #2
 8000406:	443c      	add	r4, r7
 8000408:	eba4 040e 	sub.w	r4, r4, lr
 800040c:	fa1f fe83 	uxth.w	lr, r3
 8000410:	fbb4 f3f9 	udiv	r3, r4, r9
 8000414:	fb09 4413 	mls	r4, r9, r3, r4
 8000418:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800041c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000420:	45a4      	cmp	ip, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1ce>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f103 3eff 	add.w	lr, r3, #4294967295
 800042a:	f080 8082 	bcs.w	8000532 <__udivmoddi4+0x2ca>
 800042e:	45a4      	cmp	ip, r4
 8000430:	d97f      	bls.n	8000532 <__udivmoddi4+0x2ca>
 8000432:	3b02      	subs	r3, #2
 8000434:	443c      	add	r4, r7
 8000436:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000442:	4564      	cmp	r4, ip
 8000444:	4673      	mov	r3, lr
 8000446:	46e1      	mov	r9, ip
 8000448:	d362      	bcc.n	8000510 <__udivmoddi4+0x2a8>
 800044a:	d05f      	beq.n	800050c <__udivmoddi4+0x2a4>
 800044c:	b15d      	cbz	r5, 8000466 <__udivmoddi4+0x1fe>
 800044e:	ebb8 0203 	subs.w	r2, r8, r3
 8000452:	eb64 0409 	sbc.w	r4, r4, r9
 8000456:	fa04 f606 	lsl.w	r6, r4, r6
 800045a:	fa22 f301 	lsr.w	r3, r2, r1
 800045e:	431e      	orrs	r6, r3
 8000460:	40cc      	lsrs	r4, r1
 8000462:	e9c5 6400 	strd	r6, r4, [r5]
 8000466:	2100      	movs	r1, #0
 8000468:	e74f      	b.n	800030a <__udivmoddi4+0xa2>
 800046a:	fbb1 fcf2 	udiv	ip, r1, r2
 800046e:	0c01      	lsrs	r1, r0, #16
 8000470:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000474:	b280      	uxth	r0, r0
 8000476:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800047a:	463b      	mov	r3, r7
 800047c:	4638      	mov	r0, r7
 800047e:	463c      	mov	r4, r7
 8000480:	46b8      	mov	r8, r7
 8000482:	46be      	mov	lr, r7
 8000484:	2620      	movs	r6, #32
 8000486:	fbb1 f1f7 	udiv	r1, r1, r7
 800048a:	eba2 0208 	sub.w	r2, r2, r8
 800048e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000492:	e766      	b.n	8000362 <__udivmoddi4+0xfa>
 8000494:	4601      	mov	r1, r0
 8000496:	e718      	b.n	80002ca <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e72c      	b.n	80002f6 <__udivmoddi4+0x8e>
 800049c:	f1c6 0220 	rsb	r2, r6, #32
 80004a0:	fa2e f302 	lsr.w	r3, lr, r2
 80004a4:	40b7      	lsls	r7, r6
 80004a6:	40b1      	lsls	r1, r6
 80004a8:	fa20 f202 	lsr.w	r2, r0, r2
 80004ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b0:	430a      	orrs	r2, r1
 80004b2:	fbb3 f8fe 	udiv	r8, r3, lr
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	fb0e 3318 	mls	r3, lr, r8, r3
 80004bc:	0c11      	lsrs	r1, r2, #16
 80004be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c2:	fb08 f904 	mul.w	r9, r8, r4
 80004c6:	40b0      	lsls	r0, r6
 80004c8:	4589      	cmp	r9, r1
 80004ca:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ce:	b280      	uxth	r0, r0
 80004d0:	d93e      	bls.n	8000550 <__udivmoddi4+0x2e8>
 80004d2:	1879      	adds	r1, r7, r1
 80004d4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d8:	d201      	bcs.n	80004de <__udivmoddi4+0x276>
 80004da:	4589      	cmp	r9, r1
 80004dc:	d81f      	bhi.n	800051e <__udivmoddi4+0x2b6>
 80004de:	eba1 0109 	sub.w	r1, r1, r9
 80004e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e6:	fb09 f804 	mul.w	r8, r9, r4
 80004ea:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ee:	b292      	uxth	r2, r2
 80004f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f4:	4542      	cmp	r2, r8
 80004f6:	d229      	bcs.n	800054c <__udivmoddi4+0x2e4>
 80004f8:	18ba      	adds	r2, r7, r2
 80004fa:	f109 31ff 	add.w	r1, r9, #4294967295
 80004fe:	d2c4      	bcs.n	800048a <__udivmoddi4+0x222>
 8000500:	4542      	cmp	r2, r8
 8000502:	d2c2      	bcs.n	800048a <__udivmoddi4+0x222>
 8000504:	f1a9 0102 	sub.w	r1, r9, #2
 8000508:	443a      	add	r2, r7
 800050a:	e7be      	b.n	800048a <__udivmoddi4+0x222>
 800050c:	45f0      	cmp	r8, lr
 800050e:	d29d      	bcs.n	800044c <__udivmoddi4+0x1e4>
 8000510:	ebbe 0302 	subs.w	r3, lr, r2
 8000514:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000518:	3801      	subs	r0, #1
 800051a:	46e1      	mov	r9, ip
 800051c:	e796      	b.n	800044c <__udivmoddi4+0x1e4>
 800051e:	eba7 0909 	sub.w	r9, r7, r9
 8000522:	4449      	add	r1, r9
 8000524:	f1a8 0c02 	sub.w	ip, r8, #2
 8000528:	fbb1 f9fe 	udiv	r9, r1, lr
 800052c:	fb09 f804 	mul.w	r8, r9, r4
 8000530:	e7db      	b.n	80004ea <__udivmoddi4+0x282>
 8000532:	4673      	mov	r3, lr
 8000534:	e77f      	b.n	8000436 <__udivmoddi4+0x1ce>
 8000536:	4650      	mov	r0, sl
 8000538:	e766      	b.n	8000408 <__udivmoddi4+0x1a0>
 800053a:	4608      	mov	r0, r1
 800053c:	e6fd      	b.n	800033a <__udivmoddi4+0xd2>
 800053e:	443b      	add	r3, r7
 8000540:	3a02      	subs	r2, #2
 8000542:	e733      	b.n	80003ac <__udivmoddi4+0x144>
 8000544:	f1ac 0c02 	sub.w	ip, ip, #2
 8000548:	443b      	add	r3, r7
 800054a:	e71c      	b.n	8000386 <__udivmoddi4+0x11e>
 800054c:	4649      	mov	r1, r9
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x222>
 8000550:	eba1 0109 	sub.w	r1, r1, r9
 8000554:	46c4      	mov	ip, r8
 8000556:	fbb1 f9fe 	udiv	r9, r1, lr
 800055a:	fb09 f804 	mul.w	r8, r9, r4
 800055e:	e7c4      	b.n	80004ea <__udivmoddi4+0x282>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <BNO055_Init_I2C>:
const char reset_sensor[3]	= {REG_WRITE, BNO055_SYS_TRIGGER, 0x01 << 5};
uint8_t get_readings[1] 	= {BNO055_ACC_DATA_X_LSB};


// Configure BNO sensor
void BNO055_Init_I2C(I2C_HandleTypeDef* hi2c_device) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b08e      	sub	sp, #56	@ 0x38
 8000568:	af02      	add	r7, sp, #8
 800056a:	6078      	str	r0, [r7, #4]
	// Select BNO055 config mode
	uint8_t opr_config_mode[2] = {BNO055_OPR_MODE, CONFIGMODE};
 800056c:	233d      	movs	r3, #61	@ 0x3d
 800056e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, opr_config_mode, sizeof(opr_config_mode), 10);
 8000570:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8000574:	230a      	movs	r3, #10
 8000576:	9300      	str	r3, [sp, #0]
 8000578:	2302      	movs	r3, #2
 800057a:	2150      	movs	r1, #80	@ 0x50
 800057c:	6878      	ldr	r0, [r7, #4]
 800057e:	f001 fb09 	bl	8001b94 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8000582:	200a      	movs	r0, #10
 8000584:	f000 fed2 	bl	800132c <HAL_Delay>

	// Select page 1 to configure sensors
	uint8_t conf_page1[2] = {BNO055_PAGE_ID, 0x01};
 8000588:	f240 1307 	movw	r3, #263	@ 0x107
 800058c:	853b      	strh	r3, [r7, #40]	@ 0x28
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_page1, sizeof(conf_page1), 10);
 800058e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000592:	230a      	movs	r3, #10
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	2302      	movs	r3, #2
 8000598:	2150      	movs	r1, #80	@ 0x50
 800059a:	6878      	ldr	r0, [r7, #4]
 800059c:	f001 fafa 	bl	8001b94 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80005a0:	200a      	movs	r0, #10
 80005a2:	f000 fec3 	bl	800132c <HAL_Delay>

	// Configure ACC (Page 1; 0x08)
	uint8_t conf_acc[2] = {BNO055_ACC_CONFIG, APwrMode << 5 | Abw << 2 | Ascale};
 80005a6:	2308      	movs	r3, #8
 80005a8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80005ac:	4b52      	ldr	r3, [pc, #328]	@ (80006f8 <BNO055_Init_I2C+0x194>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	b25b      	sxtb	r3, r3
 80005b2:	015b      	lsls	r3, r3, #5
 80005b4:	b25a      	sxtb	r2, r3
 80005b6:	4b51      	ldr	r3, [pc, #324]	@ (80006fc <BNO055_Init_I2C+0x198>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	b25b      	sxtb	r3, r3
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	b25b      	sxtb	r3, r3
 80005c0:	4313      	orrs	r3, r2
 80005c2:	b25a      	sxtb	r2, r3
 80005c4:	4b4e      	ldr	r3, [pc, #312]	@ (8000700 <BNO055_Init_I2C+0x19c>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	b25b      	sxtb	r3, r3
 80005ca:	4313      	orrs	r3, r2
 80005cc:	b25b      	sxtb	r3, r3
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_acc, sizeof(conf_acc), 10);
 80005d4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80005d8:	230a      	movs	r3, #10
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2302      	movs	r3, #2
 80005de:	2150      	movs	r1, #80	@ 0x50
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f001 fad7 	bl	8001b94 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80005e6:	200a      	movs	r0, #10
 80005e8:	f000 fea0 	bl	800132c <HAL_Delay>

	// Configure GYR
	uint8_t conf_gyro[2] = {BNO055_GYRO_CONFIG_0, Gbw << 3 | Gscale};
 80005ec:	230a      	movs	r3, #10
 80005ee:	f887 3020 	strb.w	r3, [r7, #32]
 80005f2:	4b44      	ldr	r3, [pc, #272]	@ (8000704 <BNO055_Init_I2C+0x1a0>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	b25b      	sxtb	r3, r3
 80005f8:	00db      	lsls	r3, r3, #3
 80005fa:	b25a      	sxtb	r2, r3
 80005fc:	4b42      	ldr	r3, [pc, #264]	@ (8000708 <BNO055_Init_I2C+0x1a4>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	b25b      	sxtb	r3, r3
 8000602:	4313      	orrs	r3, r2
 8000604:	b25b      	sxtb	r3, r3
 8000606:	b2db      	uxtb	r3, r3
 8000608:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_gyro, sizeof(conf_gyro), 10);
 800060c:	f107 0220 	add.w	r2, r7, #32
 8000610:	230a      	movs	r3, #10
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	2302      	movs	r3, #2
 8000616:	2150      	movs	r1, #80	@ 0x50
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f001 fabb 	bl	8001b94 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 800061e:	200a      	movs	r0, #10
 8000620:	f000 fe84 	bl	800132c <HAL_Delay>

	uint8_t conf_gyro_pwr[2] = {BNO055_GYRO_CONFIG_1, GPwrMode};
 8000624:	230b      	movs	r3, #11
 8000626:	773b      	strb	r3, [r7, #28]
 8000628:	4b38      	ldr	r3, [pc, #224]	@ (800070c <BNO055_Init_I2C+0x1a8>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	777b      	strb	r3, [r7, #29]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_gyro_pwr, sizeof(conf_gyro_pwr), 10);
 800062e:	f107 021c 	add.w	r2, r7, #28
 8000632:	230a      	movs	r3, #10
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2302      	movs	r3, #2
 8000638:	2150      	movs	r1, #80	@ 0x50
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f001 faaa 	bl	8001b94 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8000640:	200a      	movs	r0, #10
 8000642:	f000 fe73 	bl	800132c <HAL_Delay>

	// Configure MAG
	uint8_t conf_mag_pwr[4] = {REG_WRITE, BNO055_MAG_CONFIG, 0x01, MPwrMode << 5 | MOpMode << 3 | Modr};
 8000646:	2300      	movs	r3, #0
 8000648:	763b      	strb	r3, [r7, #24]
 800064a:	2309      	movs	r3, #9
 800064c:	767b      	strb	r3, [r7, #25]
 800064e:	2301      	movs	r3, #1
 8000650:	76bb      	strb	r3, [r7, #26]
 8000652:	4b2f      	ldr	r3, [pc, #188]	@ (8000710 <BNO055_Init_I2C+0x1ac>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	b25b      	sxtb	r3, r3
 8000658:	015b      	lsls	r3, r3, #5
 800065a:	b25a      	sxtb	r2, r3
 800065c:	4b2d      	ldr	r3, [pc, #180]	@ (8000714 <BNO055_Init_I2C+0x1b0>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	b25b      	sxtb	r3, r3
 8000662:	00db      	lsls	r3, r3, #3
 8000664:	b25b      	sxtb	r3, r3
 8000666:	4313      	orrs	r3, r2
 8000668:	b25a      	sxtb	r2, r3
 800066a:	4b2b      	ldr	r3, [pc, #172]	@ (8000718 <BNO055_Init_I2C+0x1b4>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	b25b      	sxtb	r3, r3
 8000670:	4313      	orrs	r3, r2
 8000672:	b25b      	sxtb	r3, r3
 8000674:	b2db      	uxtb	r3, r3
 8000676:	76fb      	strb	r3, [r7, #27]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_mag_pwr, sizeof(conf_mag_pwr), 10);
 8000678:	f107 0218 	add.w	r2, r7, #24
 800067c:	230a      	movs	r3, #10
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	2304      	movs	r3, #4
 8000682:	2150      	movs	r1, #80	@ 0x50
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f001 fa85 	bl	8001b94 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 800068a:	200a      	movs	r0, #10
 800068c:	f000 fe4e 	bl	800132c <HAL_Delay>

	// Select BNO055 gyro temperature source 
	//PutHexString(START_BYTE, BNO055_TEMP_SOURCE, 0x01 );
	
	// Select page 0
	uint8_t conf_page0[2] = {BNO055_PAGE_ID, 0x00};
 8000690:	2307      	movs	r3, #7
 8000692:	82bb      	strh	r3, [r7, #20]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_page0, sizeof(conf_page0), 10);
 8000694:	f107 0214 	add.w	r2, r7, #20
 8000698:	230a      	movs	r3, #10
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	2302      	movs	r3, #2
 800069e:	2150      	movs	r1, #80	@ 0x50
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f001 fa77 	bl	8001b94 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80006a6:	200a      	movs	r0, #10
 80006a8:	f000 fe40 	bl	800132c <HAL_Delay>
	//const char conf_units[4] = {REG_WRITE, BNO055_UNIT_SEL, 0x01, 0x82};
	//SendAccelData(USART1, (uint8_t*)conf_units);
	//HAL_Delay(50);

	// Select BNO055 system power mode (Page 0; 0x3E)
	uint8_t pwr_pwrmode[2] = {BNO055_PWR_MODE, PWRMode};
 80006ac:	233e      	movs	r3, #62	@ 0x3e
 80006ae:	743b      	strb	r3, [r7, #16]
 80006b0:	4b1a      	ldr	r3, [pc, #104]	@ (800071c <BNO055_Init_I2C+0x1b8>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, pwr_pwrmode, sizeof(pwr_pwrmode), 10);
 80006b6:	f107 0210 	add.w	r2, r7, #16
 80006ba:	230a      	movs	r3, #10
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	2302      	movs	r3, #2
 80006c0:	2150      	movs	r1, #80	@ 0x50
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f001 fa66 	bl	8001b94 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80006c8:	200a      	movs	r0, #10
 80006ca:	f000 fe2f 	bl	800132c <HAL_Delay>

	// Select BNO055 system operation mode (Page 0; 0x3D)
	uint8_t opr_oprmode[2] = {BNO055_OPR_MODE, OPRMode};
 80006ce:	233d      	movs	r3, #61	@ 0x3d
 80006d0:	733b      	strb	r3, [r7, #12]
 80006d2:	4b13      	ldr	r3, [pc, #76]	@ (8000720 <BNO055_Init_I2C+0x1bc>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, opr_oprmode, sizeof(opr_oprmode), 10);
 80006d8:	f107 020c 	add.w	r2, r7, #12
 80006dc:	230a      	movs	r3, #10
 80006de:	9300      	str	r3, [sp, #0]
 80006e0:	2302      	movs	r3, #2
 80006e2:	2150      	movs	r1, #80	@ 0x50
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f001 fa55 	bl	8001b94 <HAL_I2C_Master_Transmit>
	HAL_Delay(50);
 80006ea:	2032      	movs	r0, #50	@ 0x32
 80006ec:	f000 fe1e 	bl	800132c <HAL_Delay>
}
 80006f0:	bf00      	nop
 80006f2:	3730      	adds	r7, #48	@ 0x30
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000032 	.word	0x20000032
 80006fc:	20000002 	.word	0x20000002
 8000700:	20000001 	.word	0x20000001
 8000704:	20000000 	.word	0x20000000
 8000708:	20000031 	.word	0x20000031
 800070c:	20000030 	.word	0x20000030
 8000710:	20000033 	.word	0x20000033
 8000714:	20000003 	.word	0x20000003
 8000718:	20000004 	.word	0x20000004
 800071c:	20000034 	.word	0x20000034
 8000720:	20000005 	.word	0x20000005

08000724 <GetLinearAccelData>:
  //while (HAL_I2C_GetState(hi2c_device) != HAL_I2C_STATE_READY) {} 
	return status;
}

// Get the LINEAR acceleration data via I2C
uint8_t GetLinearAccelData(I2C_HandleTypeDef* hi2c_device, uint8_t* str) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b088      	sub	sp, #32
 8000728:	af04      	add	r7, sp, #16
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	6039      	str	r1, [r7, #0]
	uint8_t status;
	// Same as function above, but gets the LINEAR acceleration
	status = HAL_I2C_Mem_Read(hi2c_device, BNO055_I2C_ADDR_LO<<1, BNO055_LIA_DATA_X_LSB, I2C_MEMADD_SIZE_8BIT, str, IMU_NUMBER_OF_BYTES, 100);
 800072e:	2364      	movs	r3, #100	@ 0x64
 8000730:	9302      	str	r3, [sp, #8]
 8000732:	2312      	movs	r3, #18
 8000734:	9301      	str	r3, [sp, #4]
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2301      	movs	r3, #1
 800073c:	2228      	movs	r2, #40	@ 0x28
 800073e:	2150      	movs	r1, #80	@ 0x50
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f001 fb3f 	bl	8001dc4 <HAL_I2C_Mem_Read>
 8000746:	4603      	mov	r3, r0
 8000748:	73fb      	strb	r3, [r7, #15]
	return status;
 800074a:	7bfb      	ldrb	r3, [r7, #15]
}
 800074c:	4618      	mov	r0, r3
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af02      	add	r7, sp, #8
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	f023 030f 	bic.w	r3, r3, #15
 8000764:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	011b      	lsls	r3, r3, #4
 800076a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800076c:	7bfb      	ldrb	r3, [r7, #15]
 800076e:	f043 030c 	orr.w	r3, r3, #12
 8000772:	b2db      	uxtb	r3, r3
 8000774:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000776:	7bfb      	ldrb	r3, [r7, #15]
 8000778:	f043 0308 	orr.w	r3, r3, #8
 800077c:	b2db      	uxtb	r3, r3
 800077e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000780:	7bbb      	ldrb	r3, [r7, #14]
 8000782:	f043 030c 	orr.w	r3, r3, #12
 8000786:	b2db      	uxtb	r3, r3
 8000788:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800078a:	7bbb      	ldrb	r3, [r7, #14]
 800078c:	f043 0308 	orr.w	r3, r3, #8
 8000790:	b2db      	uxtb	r3, r3
 8000792:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000794:	f107 0208 	add.w	r2, r7, #8
 8000798:	2364      	movs	r3, #100	@ 0x64
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	2304      	movs	r3, #4
 800079e:	214e      	movs	r1, #78	@ 0x4e
 80007a0:	4803      	ldr	r0, [pc, #12]	@ (80007b0 <lcd_send_cmd+0x5c>)
 80007a2:	f001 f9f7 	bl	8001b94 <HAL_I2C_Master_Transmit>
}
 80007a6:	bf00      	nop
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000038 	.word	0x20000038

080007b4 <lcd_send_data>:

void lcd_send_data (char data)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af02      	add	r7, sp, #8
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	f023 030f 	bic.w	r3, r3, #15
 80007c4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	011b      	lsls	r3, r3, #4
 80007ca:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	f043 030d 	orr.w	r3, r3, #13
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80007d6:	7bfb      	ldrb	r3, [r7, #15]
 80007d8:	f043 0309 	orr.w	r3, r3, #9
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80007e0:	7bbb      	ldrb	r3, [r7, #14]
 80007e2:	f043 030d 	orr.w	r3, r3, #13
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80007ea:	7bbb      	ldrb	r3, [r7, #14]
 80007ec:	f043 0309 	orr.w	r3, r3, #9
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80007f4:	f107 0208 	add.w	r2, r7, #8
 80007f8:	2364      	movs	r3, #100	@ 0x64
 80007fa:	9300      	str	r3, [sp, #0]
 80007fc:	2304      	movs	r3, #4
 80007fe:	214e      	movs	r1, #78	@ 0x4e
 8000800:	4803      	ldr	r0, [pc, #12]	@ (8000810 <lcd_send_data+0x5c>)
 8000802:	f001 f9c7 	bl	8001b94 <HAL_I2C_Master_Transmit>
}
 8000806:	bf00      	nop
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000038 	.word	0x20000038

08000814 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
    switch (row)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d003      	beq.n	800082c <lcd_put_cur+0x18>
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d005      	beq.n	8000836 <lcd_put_cur+0x22>
 800082a:	e009      	b.n	8000840 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000832:	603b      	str	r3, [r7, #0]
            break;
 8000834:	e004      	b.n	8000840 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800083c:	603b      	str	r3, [r7, #0]
            break;
 800083e:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ff85 	bl	8000754 <lcd_send_cmd>
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <lcd_init>:


void lcd_init (void)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000856:	2032      	movs	r0, #50	@ 0x32
 8000858:	f000 fd68 	bl	800132c <HAL_Delay>
	lcd_send_cmd (0x30);
 800085c:	2030      	movs	r0, #48	@ 0x30
 800085e:	f7ff ff79 	bl	8000754 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000862:	2005      	movs	r0, #5
 8000864:	f000 fd62 	bl	800132c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000868:	2030      	movs	r0, #48	@ 0x30
 800086a:	f7ff ff73 	bl	8000754 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800086e:	2001      	movs	r0, #1
 8000870:	f000 fd5c 	bl	800132c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000874:	2030      	movs	r0, #48	@ 0x30
 8000876:	f7ff ff6d 	bl	8000754 <lcd_send_cmd>
	HAL_Delay(10);
 800087a:	200a      	movs	r0, #10
 800087c:	f000 fd56 	bl	800132c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000880:	2020      	movs	r0, #32
 8000882:	f7ff ff67 	bl	8000754 <lcd_send_cmd>
	HAL_Delay(10);
 8000886:	200a      	movs	r0, #10
 8000888:	f000 fd50 	bl	800132c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800088c:	2028      	movs	r0, #40	@ 0x28
 800088e:	f7ff ff61 	bl	8000754 <lcd_send_cmd>
	HAL_Delay(1);
 8000892:	2001      	movs	r0, #1
 8000894:	f000 fd4a 	bl	800132c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000898:	2008      	movs	r0, #8
 800089a:	f7ff ff5b 	bl	8000754 <lcd_send_cmd>
	HAL_Delay(1);
 800089e:	2001      	movs	r0, #1
 80008a0:	f000 fd44 	bl	800132c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80008a4:	2001      	movs	r0, #1
 80008a6:	f7ff ff55 	bl	8000754 <lcd_send_cmd>
	HAL_Delay(1);
 80008aa:	2001      	movs	r0, #1
 80008ac:	f000 fd3e 	bl	800132c <HAL_Delay>
	HAL_Delay(1);
 80008b0:	2001      	movs	r0, #1
 80008b2:	f000 fd3b 	bl	800132c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80008b6:	2006      	movs	r0, #6
 80008b8:	f7ff ff4c 	bl	8000754 <lcd_send_cmd>
	HAL_Delay(1);
 80008bc:	2001      	movs	r0, #1
 80008be:	f000 fd35 	bl	800132c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80008c2:	200c      	movs	r0, #12
 80008c4:	f7ff ff46 	bl	8000754 <lcd_send_cmd>
}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}

080008cc <lcd_send_string>:

void lcd_send_string (char *str)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80008d4:	e006      	b.n	80008e4 <lcd_send_string+0x18>
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	1c5a      	adds	r2, r3, #1
 80008da:	607a      	str	r2, [r7, #4]
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff ff68 	bl	80007b4 <lcd_send_data>
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d1f4      	bne.n	80008d6 <lcd_send_string+0xa>
}
 80008ec:	bf00      	nop
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80008fc:	f000 fb4c 	bl	8000f98 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000900:	f000 fcb7 	bl	8001272 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000904:	f000 fa00 	bl	8000d08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000908:	f000 faee 	bl	8000ee8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800090c:	f000 fa6c 	bl	8000de8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000910:	f000 faaa 	bl	8000e68 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000914:	2201      	movs	r2, #1
 8000916:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800091a:	48ba      	ldr	r0, [pc, #744]	@ (8000c04 <main+0x30c>)
 800091c:	f001 f860 	bl	80019e0 <HAL_GPIO_WritePin>
  lcd_init();
 8000920:	f7ff ff97 	bl	8000852 <lcd_init>
  lcd_send_string("X=    Y=    Z=");
 8000924:	48b8      	ldr	r0, [pc, #736]	@ (8000c08 <main+0x310>)
 8000926:	f7ff ffd1 	bl	80008cc <lcd_send_string>
  BNO055_Init_I2C(&hi2c2);
 800092a:	48b8      	ldr	r0, [pc, #736]	@ (8000c0c <main+0x314>)
 800092c:	f7ff fe1a 	bl	8000564 <BNO055_Init_I2C>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(100);
 8000930:	2064      	movs	r0, #100	@ 0x64
 8000932:	f000 fcfb 	bl	800132c <HAL_Delay>
	  // Read LINEAR acceleration data
	  // Turn the MSB and LSB into a signed 16-bit value
	  GetLinearAccelData(&hi2c2, (uint8_t*)imu_readings);
 8000936:	49b6      	ldr	r1, [pc, #728]	@ (8000c10 <main+0x318>)
 8000938:	48b4      	ldr	r0, [pc, #720]	@ (8000c0c <main+0x314>)
 800093a:	f7ff fef3 	bl	8000724 <GetLinearAccelData>
	  accel_data[0] = (((int16_t)((uint8_t *)(imu_readings))[1] << 8) | ((uint8_t *)(imu_readings))[0]);
 800093e:	4bb4      	ldr	r3, [pc, #720]	@ (8000c10 <main+0x318>)
 8000940:	785b      	ldrb	r3, [r3, #1]
 8000942:	b21b      	sxth	r3, r3
 8000944:	021b      	lsls	r3, r3, #8
 8000946:	b21a      	sxth	r2, r3
 8000948:	4bb1      	ldr	r3, [pc, #708]	@ (8000c10 <main+0x318>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	b21b      	sxth	r3, r3
 800094e:	4313      	orrs	r3, r2
 8000950:	b21a      	sxth	r2, r3
 8000952:	4bb0      	ldr	r3, [pc, #704]	@ (8000c14 <main+0x31c>)
 8000954:	801a      	strh	r2, [r3, #0]
	  accel_data[1] = (((int16_t)((uint8_t *)(imu_readings))[3] << 8) | ((uint8_t *)(imu_readings))[2]);
 8000956:	4bae      	ldr	r3, [pc, #696]	@ (8000c10 <main+0x318>)
 8000958:	78db      	ldrb	r3, [r3, #3]
 800095a:	b21b      	sxth	r3, r3
 800095c:	021b      	lsls	r3, r3, #8
 800095e:	b21a      	sxth	r2, r3
 8000960:	4bab      	ldr	r3, [pc, #684]	@ (8000c10 <main+0x318>)
 8000962:	789b      	ldrb	r3, [r3, #2]
 8000964:	b21b      	sxth	r3, r3
 8000966:	4313      	orrs	r3, r2
 8000968:	b21a      	sxth	r2, r3
 800096a:	4baa      	ldr	r3, [pc, #680]	@ (8000c14 <main+0x31c>)
 800096c:	805a      	strh	r2, [r3, #2]
	  accel_data[2] = (((int16_t)((uint8_t *)(imu_readings))[5] << 8) | ((uint8_t *)(imu_readings))[4]);
 800096e:	4ba8      	ldr	r3, [pc, #672]	@ (8000c10 <main+0x318>)
 8000970:	795b      	ldrb	r3, [r3, #5]
 8000972:	b21b      	sxth	r3, r3
 8000974:	021b      	lsls	r3, r3, #8
 8000976:	b21a      	sxth	r2, r3
 8000978:	4ba5      	ldr	r3, [pc, #660]	@ (8000c10 <main+0x318>)
 800097a:	791b      	ldrb	r3, [r3, #4]
 800097c:	b21b      	sxth	r3, r3
 800097e:	4313      	orrs	r3, r2
 8000980:	b21a      	sxth	r2, r3
 8000982:	4ba4      	ldr	r3, [pc, #656]	@ (8000c14 <main+0x31c>)
 8000984:	809a      	strh	r2, [r3, #4]

	  // Get acceleration data in m/s2
	  acc_x = ((float)(accel_data[0]))/100.0f;
 8000986:	4ba3      	ldr	r3, [pc, #652]	@ (8000c14 <main+0x31c>)
 8000988:	f9b3 3000 	ldrsh.w	r3, [r3]
 800098c:	ee07 3a90 	vmov	s15, r3
 8000990:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000994:	eddf 6aa0 	vldr	s13, [pc, #640]	@ 8000c18 <main+0x320>
 8000998:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800099c:	4b9f      	ldr	r3, [pc, #636]	@ (8000c1c <main+0x324>)
 800099e:	edc3 7a00 	vstr	s15, [r3]
	  acc_y = ((float)(accel_data[1]))/100.0f;
 80009a2:	4b9c      	ldr	r3, [pc, #624]	@ (8000c14 <main+0x31c>)
 80009a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80009a8:	ee07 3a90 	vmov	s15, r3
 80009ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009b0:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8000c18 <main+0x320>
 80009b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009b8:	4b99      	ldr	r3, [pc, #612]	@ (8000c20 <main+0x328>)
 80009ba:	edc3 7a00 	vstr	s15, [r3]
	  acc_z = ((float)(accel_data[2]))/100.0f;
 80009be:	4b95      	ldr	r3, [pc, #596]	@ (8000c14 <main+0x31c>)
 80009c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80009c4:	ee07 3a90 	vmov	s15, r3
 80009c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009cc:	eddf 6a92 	vldr	s13, [pc, #584]	@ 8000c18 <main+0x320>
 80009d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009d4:	4b93      	ldr	r3, [pc, #588]	@ (8000c24 <main+0x32c>)
 80009d6:	edc3 7a00 	vstr	s15, [r3]

	  // Get acceleration magnitude (take absolute value)
	  acc_x_abs = (acc_x < 0) ? -acc_x : acc_x;
 80009da:	4b90      	ldr	r3, [pc, #576]	@ (8000c1c <main+0x324>)
 80009dc:	edd3 7a00 	vldr	s15, [r3]
 80009e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80009e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009e8:	d505      	bpl.n	80009f6 <main+0xfe>
 80009ea:	4b8c      	ldr	r3, [pc, #560]	@ (8000c1c <main+0x324>)
 80009ec:	edd3 7a00 	vldr	s15, [r3]
 80009f0:	eef1 7a67 	vneg.f32	s15, s15
 80009f4:	e002      	b.n	80009fc <main+0x104>
 80009f6:	4b89      	ldr	r3, [pc, #548]	@ (8000c1c <main+0x324>)
 80009f8:	edd3 7a00 	vldr	s15, [r3]
 80009fc:	4b8a      	ldr	r3, [pc, #552]	@ (8000c28 <main+0x330>)
 80009fe:	edc3 7a00 	vstr	s15, [r3]
	  acc_y_abs = (acc_y < 0) ? -acc_y : acc_y;
 8000a02:	4b87      	ldr	r3, [pc, #540]	@ (8000c20 <main+0x328>)
 8000a04:	edd3 7a00 	vldr	s15, [r3]
 8000a08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a10:	d505      	bpl.n	8000a1e <main+0x126>
 8000a12:	4b83      	ldr	r3, [pc, #524]	@ (8000c20 <main+0x328>)
 8000a14:	edd3 7a00 	vldr	s15, [r3]
 8000a18:	eef1 7a67 	vneg.f32	s15, s15
 8000a1c:	e002      	b.n	8000a24 <main+0x12c>
 8000a1e:	4b80      	ldr	r3, [pc, #512]	@ (8000c20 <main+0x328>)
 8000a20:	edd3 7a00 	vldr	s15, [r3]
 8000a24:	4b81      	ldr	r3, [pc, #516]	@ (8000c2c <main+0x334>)
 8000a26:	edc3 7a00 	vstr	s15, [r3]
	  acc_z_abs = (acc_z < 0) ? -acc_z : acc_z;
 8000a2a:	4b7e      	ldr	r3, [pc, #504]	@ (8000c24 <main+0x32c>)
 8000a2c:	edd3 7a00 	vldr	s15, [r3]
 8000a30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a38:	d505      	bpl.n	8000a46 <main+0x14e>
 8000a3a:	4b7a      	ldr	r3, [pc, #488]	@ (8000c24 <main+0x32c>)
 8000a3c:	edd3 7a00 	vldr	s15, [r3]
 8000a40:	eef1 7a67 	vneg.f32	s15, s15
 8000a44:	e002      	b.n	8000a4c <main+0x154>
 8000a46:	4b77      	ldr	r3, [pc, #476]	@ (8000c24 <main+0x32c>)
 8000a48:	edd3 7a00 	vldr	s15, [r3]
 8000a4c:	4b78      	ldr	r3, [pc, #480]	@ (8000c30 <main+0x338>)
 8000a4e:	edc3 7a00 	vstr	s15, [r3]

	  // Print acc_x
	  lcd_put_cur(1, 0);
 8000a52:	2100      	movs	r1, #0
 8000a54:	2001      	movs	r0, #1
 8000a56:	f7ff fedd 	bl	8000814 <lcd_put_cur>
	  lcd_send_string((acc_x < 0) ? "-" : "+");
 8000a5a:	4b70      	ldr	r3, [pc, #448]	@ (8000c1c <main+0x324>)
 8000a5c:	edd3 7a00 	vldr	s15, [r3]
 8000a60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a68:	d501      	bpl.n	8000a6e <main+0x176>
 8000a6a:	4b72      	ldr	r3, [pc, #456]	@ (8000c34 <main+0x33c>)
 8000a6c:	e000      	b.n	8000a70 <main+0x178>
 8000a6e:	4b72      	ldr	r3, [pc, #456]	@ (8000c38 <main+0x340>)
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ff2b 	bl	80008cc <lcd_send_string>
	  lcd_send_data((int)(acc_x_abs) % 10 + 48); // Ones
 8000a76:	4b6c      	ldr	r3, [pc, #432]	@ (8000c28 <main+0x330>)
 8000a78:	edd3 7a00 	vldr	s15, [r3]
 8000a7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a80:	ee17 1a90 	vmov	r1, s15
 8000a84:	4b6d      	ldr	r3, [pc, #436]	@ (8000c3c <main+0x344>)
 8000a86:	fb83 2301 	smull	r2, r3, r3, r1
 8000a8a:	109a      	asrs	r2, r3, #2
 8000a8c:	17cb      	asrs	r3, r1, #31
 8000a8e:	1ad2      	subs	r2, r2, r3
 8000a90:	4613      	mov	r3, r2
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	4413      	add	r3, r2
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	1aca      	subs	r2, r1, r3
 8000a9a:	b2d3      	uxtb	r3, r2
 8000a9c:	3330      	adds	r3, #48	@ 0x30
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fe87 	bl	80007b4 <lcd_send_data>
	  lcd_send_string(".");
 8000aa6:	4866      	ldr	r0, [pc, #408]	@ (8000c40 <main+0x348>)
 8000aa8:	f7ff ff10 	bl	80008cc <lcd_send_string>
	  lcd_send_data(((int)(acc_x_abs * 10) % 10) + 48); // Tenths
 8000aac:	4b5e      	ldr	r3, [pc, #376]	@ (8000c28 <main+0x330>)
 8000aae:	edd3 7a00 	vldr	s15, [r3]
 8000ab2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000ab6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000aba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000abe:	ee17 1a90 	vmov	r1, s15
 8000ac2:	4b5e      	ldr	r3, [pc, #376]	@ (8000c3c <main+0x344>)
 8000ac4:	fb83 2301 	smull	r2, r3, r3, r1
 8000ac8:	109a      	asrs	r2, r3, #2
 8000aca:	17cb      	asrs	r3, r1, #31
 8000acc:	1ad2      	subs	r2, r2, r3
 8000ace:	4613      	mov	r3, r2
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	4413      	add	r3, r2
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	1aca      	subs	r2, r1, r3
 8000ad8:	b2d3      	uxtb	r3, r2
 8000ada:	3330      	adds	r3, #48	@ 0x30
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff fe68 	bl	80007b4 <lcd_send_data>
	  lcd_send_data(((int)(acc_x_abs * 100) % 10) + 48); // Hundredths
 8000ae4:	4b50      	ldr	r3, [pc, #320]	@ (8000c28 <main+0x330>)
 8000ae6:	edd3 7a00 	vldr	s15, [r3]
 8000aea:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8000c18 <main+0x320>
 8000aee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000af2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000af6:	ee17 1a90 	vmov	r1, s15
 8000afa:	4b50      	ldr	r3, [pc, #320]	@ (8000c3c <main+0x344>)
 8000afc:	fb83 2301 	smull	r2, r3, r3, r1
 8000b00:	109a      	asrs	r2, r3, #2
 8000b02:	17cb      	asrs	r3, r1, #31
 8000b04:	1ad2      	subs	r2, r2, r3
 8000b06:	4613      	mov	r3, r2
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	4413      	add	r3, r2
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	1aca      	subs	r2, r1, r3
 8000b10:	b2d3      	uxtb	r3, r2
 8000b12:	3330      	adds	r3, #48	@ 0x30
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff fe4c 	bl	80007b4 <lcd_send_data>

	  // Print acc_y
	  lcd_put_cur(1, 6);
 8000b1c:	2106      	movs	r1, #6
 8000b1e:	2001      	movs	r0, #1
 8000b20:	f7ff fe78 	bl	8000814 <lcd_put_cur>
	  lcd_send_string((acc_y < 0) ? "-" : "+");
 8000b24:	4b3e      	ldr	r3, [pc, #248]	@ (8000c20 <main+0x328>)
 8000b26:	edd3 7a00 	vldr	s15, [r3]
 8000b2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b32:	d501      	bpl.n	8000b38 <main+0x240>
 8000b34:	4b3f      	ldr	r3, [pc, #252]	@ (8000c34 <main+0x33c>)
 8000b36:	e000      	b.n	8000b3a <main+0x242>
 8000b38:	4b3f      	ldr	r3, [pc, #252]	@ (8000c38 <main+0x340>)
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff fec6 	bl	80008cc <lcd_send_string>
	  lcd_send_data((int)(acc_y_abs) % 10 + 48); // Ones
 8000b40:	4b3a      	ldr	r3, [pc, #232]	@ (8000c2c <main+0x334>)
 8000b42:	edd3 7a00 	vldr	s15, [r3]
 8000b46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b4a:	ee17 1a90 	vmov	r1, s15
 8000b4e:	4b3b      	ldr	r3, [pc, #236]	@ (8000c3c <main+0x344>)
 8000b50:	fb83 2301 	smull	r2, r3, r3, r1
 8000b54:	109a      	asrs	r2, r3, #2
 8000b56:	17cb      	asrs	r3, r1, #31
 8000b58:	1ad2      	subs	r2, r2, r3
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	4413      	add	r3, r2
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	1aca      	subs	r2, r1, r3
 8000b64:	b2d3      	uxtb	r3, r2
 8000b66:	3330      	adds	r3, #48	@ 0x30
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff fe22 	bl	80007b4 <lcd_send_data>
	  lcd_send_string(".");
 8000b70:	4833      	ldr	r0, [pc, #204]	@ (8000c40 <main+0x348>)
 8000b72:	f7ff feab 	bl	80008cc <lcd_send_string>
	  lcd_send_data(((int)(acc_y_abs * 10) % 10) + 48); // Tenths
 8000b76:	4b2d      	ldr	r3, [pc, #180]	@ (8000c2c <main+0x334>)
 8000b78:	edd3 7a00 	vldr	s15, [r3]
 8000b7c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000b80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b88:	ee17 1a90 	vmov	r1, s15
 8000b8c:	4b2b      	ldr	r3, [pc, #172]	@ (8000c3c <main+0x344>)
 8000b8e:	fb83 2301 	smull	r2, r3, r3, r1
 8000b92:	109a      	asrs	r2, r3, #2
 8000b94:	17cb      	asrs	r3, r1, #31
 8000b96:	1ad2      	subs	r2, r2, r3
 8000b98:	4613      	mov	r3, r2
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	4413      	add	r3, r2
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	1aca      	subs	r2, r1, r3
 8000ba2:	b2d3      	uxtb	r3, r2
 8000ba4:	3330      	adds	r3, #48	@ 0x30
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fe03 	bl	80007b4 <lcd_send_data>
	  lcd_send_data(((int)(acc_y_abs * 100) % 10) + 48); // Hundredths
 8000bae:	4b1f      	ldr	r3, [pc, #124]	@ (8000c2c <main+0x334>)
 8000bb0:	edd3 7a00 	vldr	s15, [r3]
 8000bb4:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8000c18 <main+0x320>
 8000bb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bc0:	ee17 1a90 	vmov	r1, s15
 8000bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c3c <main+0x344>)
 8000bc6:	fb83 2301 	smull	r2, r3, r3, r1
 8000bca:	109a      	asrs	r2, r3, #2
 8000bcc:	17cb      	asrs	r3, r1, #31
 8000bce:	1ad2      	subs	r2, r2, r3
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	4413      	add	r3, r2
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	1aca      	subs	r2, r1, r3
 8000bda:	b2d3      	uxtb	r3, r2
 8000bdc:	3330      	adds	r3, #48	@ 0x30
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fde7 	bl	80007b4 <lcd_send_data>

	  // Print acc_z
	  lcd_put_cur(1, 12);
 8000be6:	210c      	movs	r1, #12
 8000be8:	2001      	movs	r0, #1
 8000bea:	f7ff fe13 	bl	8000814 <lcd_put_cur>
	  lcd_send_string((acc_z < 0) ? "-" : "+");
 8000bee:	4b0d      	ldr	r3, [pc, #52]	@ (8000c24 <main+0x32c>)
 8000bf0:	edd3 7a00 	vldr	s15, [r3]
 8000bf4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bfc:	d522      	bpl.n	8000c44 <main+0x34c>
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000c34 <main+0x33c>)
 8000c00:	e021      	b.n	8000c46 <main+0x34e>
 8000c02:	bf00      	nop
 8000c04:	40020400 	.word	0x40020400
 8000c08:	08003824 	.word	0x08003824
 8000c0c:	2000008c 	.word	0x2000008c
 8000c10:	200000e0 	.word	0x200000e0
 8000c14:	200000f4 	.word	0x200000f4
 8000c18:	42c80000 	.word	0x42c80000
 8000c1c:	200000fc 	.word	0x200000fc
 8000c20:	20000100 	.word	0x20000100
 8000c24:	20000104 	.word	0x20000104
 8000c28:	20000108 	.word	0x20000108
 8000c2c:	2000010c 	.word	0x2000010c
 8000c30:	20000110 	.word	0x20000110
 8000c34:	08003834 	.word	0x08003834
 8000c38:	08003838 	.word	0x08003838
 8000c3c:	66666667 	.word	0x66666667
 8000c40:	0800383c 	.word	0x0800383c
 8000c44:	4b2b      	ldr	r3, [pc, #172]	@ (8000cf4 <main+0x3fc>)
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fe40 	bl	80008cc <lcd_send_string>
	  lcd_send_data((int)(acc_z_abs) % 10 + 48); // Ones
 8000c4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf8 <main+0x400>)
 8000c4e:	edd3 7a00 	vldr	s15, [r3]
 8000c52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c56:	ee17 1a90 	vmov	r1, s15
 8000c5a:	4b28      	ldr	r3, [pc, #160]	@ (8000cfc <main+0x404>)
 8000c5c:	fb83 2301 	smull	r2, r3, r3, r1
 8000c60:	109a      	asrs	r2, r3, #2
 8000c62:	17cb      	asrs	r3, r1, #31
 8000c64:	1ad2      	subs	r2, r2, r3
 8000c66:	4613      	mov	r3, r2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	4413      	add	r3, r2
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	1aca      	subs	r2, r1, r3
 8000c70:	b2d3      	uxtb	r3, r2
 8000c72:	3330      	adds	r3, #48	@ 0x30
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff fd9c 	bl	80007b4 <lcd_send_data>
	  lcd_send_string(".");
 8000c7c:	4820      	ldr	r0, [pc, #128]	@ (8000d00 <main+0x408>)
 8000c7e:	f7ff fe25 	bl	80008cc <lcd_send_string>
	  lcd_send_data(((int)(acc_z_abs * 10) % 10) + 48); // Tenths
 8000c82:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf8 <main+0x400>)
 8000c84:	edd3 7a00 	vldr	s15, [r3]
 8000c88:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000c8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c94:	ee17 1a90 	vmov	r1, s15
 8000c98:	4b18      	ldr	r3, [pc, #96]	@ (8000cfc <main+0x404>)
 8000c9a:	fb83 2301 	smull	r2, r3, r3, r1
 8000c9e:	109a      	asrs	r2, r3, #2
 8000ca0:	17cb      	asrs	r3, r1, #31
 8000ca2:	1ad2      	subs	r2, r2, r3
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	4413      	add	r3, r2
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	1aca      	subs	r2, r1, r3
 8000cae:	b2d3      	uxtb	r3, r2
 8000cb0:	3330      	adds	r3, #48	@ 0x30
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fd7d 	bl	80007b4 <lcd_send_data>
	  lcd_send_data(((int)(acc_z_abs * 100) % 10) + 48); // Hundredths
 8000cba:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf8 <main+0x400>)
 8000cbc:	edd3 7a00 	vldr	s15, [r3]
 8000cc0:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000d04 <main+0x40c>
 8000cc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ccc:	ee17 1a90 	vmov	r1, s15
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cfc <main+0x404>)
 8000cd2:	fb83 2301 	smull	r2, r3, r3, r1
 8000cd6:	109a      	asrs	r2, r3, #2
 8000cd8:	17cb      	asrs	r3, r1, #31
 8000cda:	1ad2      	subs	r2, r2, r3
 8000cdc:	4613      	mov	r3, r2
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	4413      	add	r3, r2
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	1aca      	subs	r2, r1, r3
 8000ce6:	b2d3      	uxtb	r3, r2
 8000ce8:	3330      	adds	r3, #48	@ 0x30
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fd61 	bl	80007b4 <lcd_send_data>
	  HAL_Delay(100);
 8000cf2:	e61d      	b.n	8000930 <main+0x38>
 8000cf4:	08003838 	.word	0x08003838
 8000cf8:	20000110 	.word	0x20000110
 8000cfc:	66666667 	.word	0x66666667
 8000d00:	0800383c 	.word	0x0800383c
 8000d04:	42c80000 	.word	0x42c80000

08000d08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b094      	sub	sp, #80	@ 0x50
 8000d0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0e:	f107 031c 	add.w	r3, r7, #28
 8000d12:	2234      	movs	r2, #52	@ 0x34
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f002 fd4c 	bl	80037b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d1c:	f107 0308 	add.w	r3, r7, #8
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2c:	4b2c      	ldr	r3, [pc, #176]	@ (8000de0 <SystemClock_Config+0xd8>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d30:	4a2b      	ldr	r2, [pc, #172]	@ (8000de0 <SystemClock_Config+0xd8>)
 8000d32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d36:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d38:	4b29      	ldr	r3, [pc, #164]	@ (8000de0 <SystemClock_Config+0xd8>)
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d44:	4b27      	ldr	r3, [pc, #156]	@ (8000de4 <SystemClock_Config+0xdc>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d4c:	4a25      	ldr	r2, [pc, #148]	@ (8000de4 <SystemClock_Config+0xdc>)
 8000d4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d52:	6013      	str	r3, [r2, #0]
 8000d54:	4b23      	ldr	r3, [pc, #140]	@ (8000de4 <SystemClock_Config+0xdc>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d5c:	603b      	str	r3, [r7, #0]
 8000d5e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d60:	2302      	movs	r3, #2
 8000d62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d64:	2301      	movs	r3, #1
 8000d66:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d68:	2310      	movs	r3, #16
 8000d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d70:	2300      	movs	r3, #0
 8000d72:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000d74:	2310      	movs	r3, #16
 8000d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000d78:	23c0      	movs	r3, #192	@ 0xc0
 8000d7a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d80:	2302      	movs	r3, #2
 8000d82:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d84:	2302      	movs	r3, #2
 8000d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d88:	f107 031c 	add.w	r3, r7, #28
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f001 fc89 	bl	80026a4 <HAL_RCC_OscConfig>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d98:	f000 f92a 	bl	8000ff0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d9c:	f001 fc32 	bl	8002604 <HAL_PWREx_EnableOverDrive>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000da6:	f000 f923 	bl	8000ff0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000daa:	230f      	movs	r3, #15
 8000dac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dae:	2302      	movs	r3, #2
 8000db0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000db6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000dc0:	f107 0308 	add.w	r3, r7, #8
 8000dc4:	2103      	movs	r1, #3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f001 ff1a 	bl	8002c00 <HAL_RCC_ClockConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000dd2:	f000 f90d 	bl	8000ff0 <Error_Handler>
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	3750      	adds	r7, #80	@ 0x50
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40007000 	.word	0x40007000

08000de8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dec:	4b1b      	ldr	r3, [pc, #108]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000dee:	4a1c      	ldr	r2, [pc, #112]	@ (8000e60 <MX_I2C1_Init+0x78>)
 8000df0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000df2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000df4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e64 <MX_I2C1_Init+0x7c>)
 8000df6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000df8:	4b18      	ldr	r3, [pc, #96]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dfe:	4b17      	ldr	r3, [pc, #92]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e04:	4b15      	ldr	r3, [pc, #84]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e0a:	4b14      	ldr	r3, [pc, #80]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e10:	4b12      	ldr	r3, [pc, #72]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e16:	4b11      	ldr	r3, [pc, #68]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e22:	480e      	ldr	r0, [pc, #56]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e24:	f000 fe1a 	bl	8001a5c <HAL_I2C_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e2e:	f000 f8df 	bl	8000ff0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e32:	2100      	movs	r1, #0
 8000e34:	4809      	ldr	r0, [pc, #36]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e36:	f001 fb4d 	bl	80024d4 <HAL_I2CEx_ConfigAnalogFilter>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e40:	f000 f8d6 	bl	8000ff0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e44:	2100      	movs	r1, #0
 8000e46:	4805      	ldr	r0, [pc, #20]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e48:	f001 fb8f 	bl	800256a <HAL_I2CEx_ConfigDigitalFilter>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e52:	f000 f8cd 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000038 	.word	0x20000038
 8000e60:	40005400 	.word	0x40005400
 8000e64:	20303e5d 	.word	0x20303e5d

08000e68 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000e6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ee0 <MX_I2C2_Init+0x78>)
 8000e70:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000e72:	4b1a      	ldr	r3, [pc, #104]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000e74:	4a1b      	ldr	r2, [pc, #108]	@ (8000ee4 <MX_I2C2_Init+0x7c>)
 8000e76:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e78:	4b18      	ldr	r3, [pc, #96]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e7e:	4b17      	ldr	r3, [pc, #92]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e84:	4b15      	ldr	r3, [pc, #84]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e8a:	4b14      	ldr	r3, [pc, #80]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e90:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e96:	4b11      	ldr	r3, [pc, #68]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ea2:	480e      	ldr	r0, [pc, #56]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000ea4:	f000 fdda 	bl	8001a5c <HAL_I2C_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000eae:	f000 f89f 	bl	8000ff0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4809      	ldr	r0, [pc, #36]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000eb6:	f001 fb0d 	bl	80024d4 <HAL_I2CEx_ConfigAnalogFilter>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ec0:	f000 f896 	bl	8000ff0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4805      	ldr	r0, [pc, #20]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000ec8:	f001 fb4f 	bl	800256a <HAL_I2CEx_ConfigDigitalFilter>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ed2:	f000 f88d 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	2000008c 	.word	0x2000008c
 8000ee0:	40005800 	.word	0x40005800
 8000ee4:	20303e5d 	.word	0x20303e5d

08000ee8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eee:	f107 030c 	add.w	r3, r7, #12
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
 8000efc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000efe:	4b23      	ldr	r3, [pc, #140]	@ (8000f8c <MX_GPIO_Init+0xa4>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	4a22      	ldr	r2, [pc, #136]	@ (8000f8c <MX_GPIO_Init+0xa4>)
 8000f04:	f043 0320 	orr.w	r3, r3, #32
 8000f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0a:	4b20      	ldr	r3, [pc, #128]	@ (8000f8c <MX_GPIO_Init+0xa4>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	f003 0320 	and.w	r3, r3, #32
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f16:	4b1d      	ldr	r3, [pc, #116]	@ (8000f8c <MX_GPIO_Init+0xa4>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	4a1c      	ldr	r2, [pc, #112]	@ (8000f8c <MX_GPIO_Init+0xa4>)
 8000f1c:	f043 0302 	orr.w	r3, r3, #2
 8000f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f22:	4b1a      	ldr	r3, [pc, #104]	@ (8000f8c <MX_GPIO_Init+0xa4>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f34:	4816      	ldr	r0, [pc, #88]	@ (8000f90 <MX_GPIO_Init+0xa8>)
 8000f36:	f000 fd53 	bl	80019e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f3a:	2308      	movs	r3, #8
 8000f3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f3e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4811      	ldr	r0, [pc, #68]	@ (8000f94 <MX_GPIO_Init+0xac>)
 8000f50:	f000 fb9a 	bl	8001688 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4808      	ldr	r0, [pc, #32]	@ (8000f90 <MX_GPIO_Init+0xa8>)
 8000f6e:	f000 fb8b 	bl	8001688 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2100      	movs	r1, #0
 8000f76:	2009      	movs	r0, #9
 8000f78:	f000 fad7 	bl	800152a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000f7c:	2009      	movs	r0, #9
 8000f7e:	f000 faf0 	bl	8001562 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f82:	bf00      	nop
 8000f84:	3720      	adds	r7, #32
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40020400 	.word	0x40020400
 8000f94:	40021400 	.word	0x40021400

08000f98 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000faa:	f000 faf5 	bl	8001598 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000fba:	231f      	movs	r3, #31
 8000fbc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000fbe:	2387      	movs	r3, #135	@ 0x87
 8000fc0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000fda:	463b      	mov	r3, r7
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 fb13 	bl	8001608 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000fe2:	2004      	movs	r0, #4
 8000fe4:	f000 faf0 	bl	80015c8 <HAL_MPU_Enable>

}
 8000fe8:	bf00      	nop
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff4:	b672      	cpsid	i
}
 8000ff6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <Error_Handler+0x8>

08000ffc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001002:	4b0f      	ldr	r3, [pc, #60]	@ (8001040 <HAL_MspInit+0x44>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001006:	4a0e      	ldr	r2, [pc, #56]	@ (8001040 <HAL_MspInit+0x44>)
 8001008:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800100c:	6413      	str	r3, [r2, #64]	@ 0x40
 800100e:	4b0c      	ldr	r3, [pc, #48]	@ (8001040 <HAL_MspInit+0x44>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	4b09      	ldr	r3, [pc, #36]	@ (8001040 <HAL_MspInit+0x44>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101e:	4a08      	ldr	r2, [pc, #32]	@ (8001040 <HAL_MspInit+0x44>)
 8001020:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001024:	6453      	str	r3, [r2, #68]	@ 0x44
 8001026:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <HAL_MspInit+0x44>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800102a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800

08001044 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b0b0      	sub	sp, #192	@ 0xc0
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800105c:	f107 031c 	add.w	r3, r7, #28
 8001060:	2290      	movs	r2, #144	@ 0x90
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f002 fba5 	bl	80037b4 <memset>
  if(hi2c->Instance==I2C1)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a43      	ldr	r2, [pc, #268]	@ (800117c <HAL_I2C_MspInit+0x138>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d13d      	bne.n	80010f0 <HAL_I2C_MspInit+0xac>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001074:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001078:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800107a:	2300      	movs	r3, #0
 800107c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001080:	f107 031c 	add.w	r3, r7, #28
 8001084:	4618      	mov	r0, r3
 8001086:	f001 ff6d 	bl	8002f64 <HAL_RCCEx_PeriphCLKConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001090:	f7ff ffae 	bl	8000ff0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001094:	4b3a      	ldr	r3, [pc, #232]	@ (8001180 <HAL_I2C_MspInit+0x13c>)
 8001096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001098:	4a39      	ldr	r2, [pc, #228]	@ (8001180 <HAL_I2C_MspInit+0x13c>)
 800109a:	f043 0302 	orr.w	r3, r3, #2
 800109e:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a0:	4b37      	ldr	r3, [pc, #220]	@ (8001180 <HAL_I2C_MspInit+0x13c>)
 80010a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	61bb      	str	r3, [r7, #24]
 80010aa:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010ac:	23c0      	movs	r3, #192	@ 0xc0
 80010ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010b2:	2312      	movs	r3, #18
 80010b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b8:	2301      	movs	r3, #1
 80010ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010be:	2303      	movs	r3, #3
 80010c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010c4:	2304      	movs	r3, #4
 80010c6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ca:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80010ce:	4619      	mov	r1, r3
 80010d0:	482c      	ldr	r0, [pc, #176]	@ (8001184 <HAL_I2C_MspInit+0x140>)
 80010d2:	f000 fad9 	bl	8001688 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001180 <HAL_I2C_MspInit+0x13c>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	4a29      	ldr	r2, [pc, #164]	@ (8001180 <HAL_I2C_MspInit+0x13c>)
 80010dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e2:	4b27      	ldr	r3, [pc, #156]	@ (8001180 <HAL_I2C_MspInit+0x13c>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80010ee:	e041      	b.n	8001174 <HAL_I2C_MspInit+0x130>
  else if(hi2c->Instance==I2C2)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a24      	ldr	r2, [pc, #144]	@ (8001188 <HAL_I2C_MspInit+0x144>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d13c      	bne.n	8001174 <HAL_I2C_MspInit+0x130>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80010fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010fe:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001100:	2300      	movs	r3, #0
 8001102:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001106:	f107 031c 	add.w	r3, r7, #28
 800110a:	4618      	mov	r0, r3
 800110c:	f001 ff2a 	bl	8002f64 <HAL_RCCEx_PeriphCLKConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001116:	f7ff ff6b 	bl	8000ff0 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800111a:	4b19      	ldr	r3, [pc, #100]	@ (8001180 <HAL_I2C_MspInit+0x13c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	4a18      	ldr	r2, [pc, #96]	@ (8001180 <HAL_I2C_MspInit+0x13c>)
 8001120:	f043 0320 	orr.w	r3, r3, #32
 8001124:	6313      	str	r3, [r2, #48]	@ 0x30
 8001126:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <HAL_I2C_MspInit+0x13c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	f003 0320 	and.w	r3, r3, #32
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001132:	2303      	movs	r3, #3
 8001134:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001138:	2312      	movs	r3, #18
 800113a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001144:	2303      	movs	r3, #3
 8001146:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800114a:	2304      	movs	r3, #4
 800114c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001150:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001154:	4619      	mov	r1, r3
 8001156:	480d      	ldr	r0, [pc, #52]	@ (800118c <HAL_I2C_MspInit+0x148>)
 8001158:	f000 fa96 	bl	8001688 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800115c:	4b08      	ldr	r3, [pc, #32]	@ (8001180 <HAL_I2C_MspInit+0x13c>)
 800115e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001160:	4a07      	ldr	r2, [pc, #28]	@ (8001180 <HAL_I2C_MspInit+0x13c>)
 8001162:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001166:	6413      	str	r3, [r2, #64]	@ 0x40
 8001168:	4b05      	ldr	r3, [pc, #20]	@ (8001180 <HAL_I2C_MspInit+0x13c>)
 800116a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]
}
 8001174:	bf00      	nop
 8001176:	37c0      	adds	r7, #192	@ 0xc0
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40005400 	.word	0x40005400
 8001180:	40023800 	.word	0x40023800
 8001184:	40020400 	.word	0x40020400
 8001188:	40005800 	.word	0x40005800
 800118c:	40021400 	.word	0x40021400

08001190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001194:	bf00      	nop
 8001196:	e7fd      	b.n	8001194 <NMI_Handler+0x4>

08001198 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <HardFault_Handler+0x4>

080011a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <MemManage_Handler+0x4>

080011a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <BusFault_Handler+0x4>

080011b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b4:	bf00      	nop
 80011b6:	e7fd      	b.n	80011b4 <UsageFault_Handler+0x4>

080011b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e6:	f000 f881 	bl	80012ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}

080011ee <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80011f2:	2008      	movs	r0, #8
 80011f4:	f000 fc0e 	bl	8001a14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}

080011fc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001200:	4b06      	ldr	r3, [pc, #24]	@ (800121c <SystemInit+0x20>)
 8001202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001206:	4a05      	ldr	r2, [pc, #20]	@ (800121c <SystemInit+0x20>)
 8001208:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800120c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001220:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001258 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001224:	f7ff ffea 	bl	80011fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001228:	480c      	ldr	r0, [pc, #48]	@ (800125c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800122a:	490d      	ldr	r1, [pc, #52]	@ (8001260 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800122c:	4a0d      	ldr	r2, [pc, #52]	@ (8001264 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800122e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001230:	e002      	b.n	8001238 <LoopCopyDataInit>

08001232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001236:	3304      	adds	r3, #4

08001238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800123a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800123c:	d3f9      	bcc.n	8001232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800123e:	4a0a      	ldr	r2, [pc, #40]	@ (8001268 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001240:	4c0a      	ldr	r4, [pc, #40]	@ (800126c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001244:	e001      	b.n	800124a <LoopFillZerobss>

08001246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001248:	3204      	adds	r2, #4

0800124a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800124a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800124c:	d3fb      	bcc.n	8001246 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800124e:	f002 fab9 	bl	80037c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001252:	f7ff fb51 	bl	80008f8 <main>
  bx  lr    
 8001256:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001258:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800125c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001260:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001264:	08003860 	.word	0x08003860
  ldr r2, =_sbss
 8001268:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800126c:	20000118 	.word	0x20000118

08001270 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001270:	e7fe      	b.n	8001270 <ADC_IRQHandler>

08001272 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001276:	2003      	movs	r0, #3
 8001278:	f000 f94c 	bl	8001514 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800127c:	200f      	movs	r0, #15
 800127e:	f000 f805 	bl	800128c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001282:	f7ff febb 	bl	8000ffc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	bd80      	pop	{r7, pc}

0800128c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001294:	4b12      	ldr	r3, [pc, #72]	@ (80012e0 <HAL_InitTick+0x54>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <HAL_InitTick+0x58>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	4619      	mov	r1, r3
 800129e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 f967 	bl	800157e <HAL_SYSTICK_Config>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e00e      	b.n	80012d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b0f      	cmp	r3, #15
 80012be:	d80a      	bhi.n	80012d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c0:	2200      	movs	r2, #0
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295
 80012c8:	f000 f92f 	bl	800152a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012cc:	4a06      	ldr	r2, [pc, #24]	@ (80012e8 <HAL_InitTick+0x5c>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
 80012d4:	e000      	b.n	80012d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000008 	.word	0x20000008
 80012e4:	20000010 	.word	0x20000010
 80012e8:	2000000c 	.word	0x2000000c

080012ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f0:	4b06      	ldr	r3, [pc, #24]	@ (800130c <HAL_IncTick+0x20>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <HAL_IncTick+0x24>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4413      	add	r3, r2
 80012fc:	4a04      	ldr	r2, [pc, #16]	@ (8001310 <HAL_IncTick+0x24>)
 80012fe:	6013      	str	r3, [r2, #0]
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000010 	.word	0x20000010
 8001310:	20000114 	.word	0x20000114

08001314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return uwTick;
 8001318:	4b03      	ldr	r3, [pc, #12]	@ (8001328 <HAL_GetTick+0x14>)
 800131a:	681b      	ldr	r3, [r3, #0]
}
 800131c:	4618      	mov	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	20000114 	.word	0x20000114

0800132c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001334:	f7ff ffee 	bl	8001314 <HAL_GetTick>
 8001338:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001344:	d005      	beq.n	8001352 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001346:	4b0a      	ldr	r3, [pc, #40]	@ (8001370 <HAL_Delay+0x44>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	461a      	mov	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4413      	add	r3, r2
 8001350:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001352:	bf00      	nop
 8001354:	f7ff ffde 	bl	8001314 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	429a      	cmp	r2, r3
 8001362:	d8f7      	bhi.n	8001354 <HAL_Delay+0x28>
  {
  }
}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000010 	.word	0x20000010

08001374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001384:	4b0b      	ldr	r3, [pc, #44]	@ (80013b4 <__NVIC_SetPriorityGrouping+0x40>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001390:	4013      	ands	r3, r2
 8001392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800139c:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <__NVIC_SetPriorityGrouping+0x44>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a2:	4a04      	ldr	r2, [pc, #16]	@ (80013b4 <__NVIC_SetPriorityGrouping+0x40>)
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	60d3      	str	r3, [r2, #12]
}
 80013a8:	bf00      	nop
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00
 80013b8:	05fa0000 	.word	0x05fa0000

080013bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c0:	4b04      	ldr	r3, [pc, #16]	@ (80013d4 <__NVIC_GetPriorityGrouping+0x18>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	0a1b      	lsrs	r3, r3, #8
 80013c6:	f003 0307 	and.w	r3, r3, #7
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	db0b      	blt.n	8001402 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	f003 021f 	and.w	r2, r3, #31
 80013f0:	4907      	ldr	r1, [pc, #28]	@ (8001410 <__NVIC_EnableIRQ+0x38>)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	095b      	lsrs	r3, r3, #5
 80013f8:	2001      	movs	r0, #1
 80013fa:	fa00 f202 	lsl.w	r2, r0, r2
 80013fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000e100 	.word	0xe000e100

08001414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	6039      	str	r1, [r7, #0]
 800141e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001424:	2b00      	cmp	r3, #0
 8001426:	db0a      	blt.n	800143e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	b2da      	uxtb	r2, r3
 800142c:	490c      	ldr	r1, [pc, #48]	@ (8001460 <__NVIC_SetPriority+0x4c>)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	0112      	lsls	r2, r2, #4
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	440b      	add	r3, r1
 8001438:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800143c:	e00a      	b.n	8001454 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4908      	ldr	r1, [pc, #32]	@ (8001464 <__NVIC_SetPriority+0x50>)
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	f003 030f 	and.w	r3, r3, #15
 800144a:	3b04      	subs	r3, #4
 800144c:	0112      	lsls	r2, r2, #4
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	440b      	add	r3, r1
 8001452:	761a      	strb	r2, [r3, #24]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000e100 	.word	0xe000e100
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001468:	b480      	push	{r7}
 800146a:	b089      	sub	sp, #36	@ 0x24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f1c3 0307 	rsb	r3, r3, #7
 8001482:	2b04      	cmp	r3, #4
 8001484:	bf28      	it	cs
 8001486:	2304      	movcs	r3, #4
 8001488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3304      	adds	r3, #4
 800148e:	2b06      	cmp	r3, #6
 8001490:	d902      	bls.n	8001498 <NVIC_EncodePriority+0x30>
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3b03      	subs	r3, #3
 8001496:	e000      	b.n	800149a <NVIC_EncodePriority+0x32>
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	f04f 32ff 	mov.w	r2, #4294967295
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43da      	mvns	r2, r3
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	401a      	ands	r2, r3
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b0:	f04f 31ff 	mov.w	r1, #4294967295
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ba:	43d9      	mvns	r1, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c0:	4313      	orrs	r3, r2
         );
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3724      	adds	r7, #36	@ 0x24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
	...

080014d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3b01      	subs	r3, #1
 80014dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014e0:	d301      	bcc.n	80014e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00f      	b.n	8001506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001510 <SysTick_Config+0x40>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ee:	210f      	movs	r1, #15
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295
 80014f4:	f7ff ff8e 	bl	8001414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f8:	4b05      	ldr	r3, [pc, #20]	@ (8001510 <SysTick_Config+0x40>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014fe:	4b04      	ldr	r3, [pc, #16]	@ (8001510 <SysTick_Config+0x40>)
 8001500:	2207      	movs	r2, #7
 8001502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	e000e010 	.word	0xe000e010

08001514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff ff29 	bl	8001374 <__NVIC_SetPriorityGrouping>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800152a:	b580      	push	{r7, lr}
 800152c:	b086      	sub	sp, #24
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
 8001536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800153c:	f7ff ff3e 	bl	80013bc <__NVIC_GetPriorityGrouping>
 8001540:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	6978      	ldr	r0, [r7, #20]
 8001548:	f7ff ff8e 	bl	8001468 <NVIC_EncodePriority>
 800154c:	4602      	mov	r2, r0
 800154e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001552:	4611      	mov	r1, r2
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff5d 	bl	8001414 <__NVIC_SetPriority>
}
 800155a:	bf00      	nop
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800156c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff31 	bl	80013d8 <__NVIC_EnableIRQ>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff ffa2 	bl	80014d0 <SysTick_Config>
 800158c:	4603      	mov	r3, r0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800159c:	f3bf 8f5f 	dmb	sy
}
 80015a0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80015a2:	4b07      	ldr	r3, [pc, #28]	@ (80015c0 <HAL_MPU_Disable+0x28>)
 80015a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a6:	4a06      	ldr	r2, [pc, #24]	@ (80015c0 <HAL_MPU_Disable+0x28>)
 80015a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015ac:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80015ae:	4b05      	ldr	r3, [pc, #20]	@ (80015c4 <HAL_MPU_Disable+0x2c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	605a      	str	r2, [r3, #4]
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000ed00 	.word	0xe000ed00
 80015c4:	e000ed90 	.word	0xe000ed90

080015c8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80015d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001600 <HAL_MPU_Enable+0x38>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80015da:	4b0a      	ldr	r3, [pc, #40]	@ (8001604 <HAL_MPU_Enable+0x3c>)
 80015dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015de:	4a09      	ldr	r2, [pc, #36]	@ (8001604 <HAL_MPU_Enable+0x3c>)
 80015e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015e4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80015e6:	f3bf 8f4f 	dsb	sy
}
 80015ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015ec:	f3bf 8f6f 	isb	sy
}
 80015f0:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000ed90 	.word	0xe000ed90
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	785a      	ldrb	r2, [r3, #1]
 8001614:	4b1b      	ldr	r3, [pc, #108]	@ (8001684 <HAL_MPU_ConfigRegion+0x7c>)
 8001616:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001618:	4b1a      	ldr	r3, [pc, #104]	@ (8001684 <HAL_MPU_ConfigRegion+0x7c>)
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	4a19      	ldr	r2, [pc, #100]	@ (8001684 <HAL_MPU_ConfigRegion+0x7c>)
 800161e:	f023 0301 	bic.w	r3, r3, #1
 8001622:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001624:	4a17      	ldr	r2, [pc, #92]	@ (8001684 <HAL_MPU_ConfigRegion+0x7c>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	7b1b      	ldrb	r3, [r3, #12]
 8001630:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	7adb      	ldrb	r3, [r3, #11]
 8001636:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001638:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	7a9b      	ldrb	r3, [r3, #10]
 800163e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001640:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	7b5b      	ldrb	r3, [r3, #13]
 8001646:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001648:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	7b9b      	ldrb	r3, [r3, #14]
 800164e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001650:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	7bdb      	ldrb	r3, [r3, #15]
 8001656:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001658:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	7a5b      	ldrb	r3, [r3, #9]
 800165e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001660:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	7a1b      	ldrb	r3, [r3, #8]
 8001666:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001668:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	7812      	ldrb	r2, [r2, #0]
 800166e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001670:	4a04      	ldr	r2, [pc, #16]	@ (8001684 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001672:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001674:	6113      	str	r3, [r2, #16]
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000ed90 	.word	0xe000ed90

08001688 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001688:	b480      	push	{r7}
 800168a:	b089      	sub	sp, #36	@ 0x24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800169e:	2300      	movs	r3, #0
 80016a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
 80016a6:	e175      	b.n	8001994 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80016a8:	2201      	movs	r2, #1
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	4013      	ands	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	f040 8164 	bne.w	800198e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f003 0303 	and.w	r3, r3, #3
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d005      	beq.n	80016de <HAL_GPIO_Init+0x56>
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d130      	bne.n	8001740 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	2203      	movs	r2, #3
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43db      	mvns	r3, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4013      	ands	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	68da      	ldr	r2, [r3, #12]
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4313      	orrs	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001714:	2201      	movs	r2, #1
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	091b      	lsrs	r3, r3, #4
 800172a:	f003 0201 	and.w	r2, r3, #1
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4313      	orrs	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 0303 	and.w	r3, r3, #3
 8001748:	2b03      	cmp	r3, #3
 800174a:	d017      	beq.n	800177c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	2203      	movs	r2, #3
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4013      	ands	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 0303 	and.w	r3, r3, #3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d123      	bne.n	80017d0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	08da      	lsrs	r2, r3, #3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3208      	adds	r2, #8
 8001790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	f003 0307 	and.w	r3, r3, #7
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	220f      	movs	r2, #15
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4013      	ands	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	691a      	ldr	r2, [r3, #16]
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	08da      	lsrs	r2, r3, #3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3208      	adds	r2, #8
 80017ca:	69b9      	ldr	r1, [r7, #24]
 80017cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	2203      	movs	r2, #3
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 0203 	and.w	r2, r3, #3
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 80be 	beq.w	800198e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001812:	4b66      	ldr	r3, [pc, #408]	@ (80019ac <HAL_GPIO_Init+0x324>)
 8001814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001816:	4a65      	ldr	r2, [pc, #404]	@ (80019ac <HAL_GPIO_Init+0x324>)
 8001818:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800181c:	6453      	str	r3, [r2, #68]	@ 0x44
 800181e:	4b63      	ldr	r3, [pc, #396]	@ (80019ac <HAL_GPIO_Init+0x324>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001822:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800182a:	4a61      	ldr	r2, [pc, #388]	@ (80019b0 <HAL_GPIO_Init+0x328>)
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	089b      	lsrs	r3, r3, #2
 8001830:	3302      	adds	r3, #2
 8001832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	220f      	movs	r2, #15
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4013      	ands	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a58      	ldr	r2, [pc, #352]	@ (80019b4 <HAL_GPIO_Init+0x32c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d037      	beq.n	80018c6 <HAL_GPIO_Init+0x23e>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a57      	ldr	r2, [pc, #348]	@ (80019b8 <HAL_GPIO_Init+0x330>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d031      	beq.n	80018c2 <HAL_GPIO_Init+0x23a>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a56      	ldr	r2, [pc, #344]	@ (80019bc <HAL_GPIO_Init+0x334>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d02b      	beq.n	80018be <HAL_GPIO_Init+0x236>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a55      	ldr	r2, [pc, #340]	@ (80019c0 <HAL_GPIO_Init+0x338>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d025      	beq.n	80018ba <HAL_GPIO_Init+0x232>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a54      	ldr	r2, [pc, #336]	@ (80019c4 <HAL_GPIO_Init+0x33c>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d01f      	beq.n	80018b6 <HAL_GPIO_Init+0x22e>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a53      	ldr	r2, [pc, #332]	@ (80019c8 <HAL_GPIO_Init+0x340>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d019      	beq.n	80018b2 <HAL_GPIO_Init+0x22a>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a52      	ldr	r2, [pc, #328]	@ (80019cc <HAL_GPIO_Init+0x344>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d013      	beq.n	80018ae <HAL_GPIO_Init+0x226>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a51      	ldr	r2, [pc, #324]	@ (80019d0 <HAL_GPIO_Init+0x348>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d00d      	beq.n	80018aa <HAL_GPIO_Init+0x222>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a50      	ldr	r2, [pc, #320]	@ (80019d4 <HAL_GPIO_Init+0x34c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d007      	beq.n	80018a6 <HAL_GPIO_Init+0x21e>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a4f      	ldr	r2, [pc, #316]	@ (80019d8 <HAL_GPIO_Init+0x350>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d101      	bne.n	80018a2 <HAL_GPIO_Init+0x21a>
 800189e:	2309      	movs	r3, #9
 80018a0:	e012      	b.n	80018c8 <HAL_GPIO_Init+0x240>
 80018a2:	230a      	movs	r3, #10
 80018a4:	e010      	b.n	80018c8 <HAL_GPIO_Init+0x240>
 80018a6:	2308      	movs	r3, #8
 80018a8:	e00e      	b.n	80018c8 <HAL_GPIO_Init+0x240>
 80018aa:	2307      	movs	r3, #7
 80018ac:	e00c      	b.n	80018c8 <HAL_GPIO_Init+0x240>
 80018ae:	2306      	movs	r3, #6
 80018b0:	e00a      	b.n	80018c8 <HAL_GPIO_Init+0x240>
 80018b2:	2305      	movs	r3, #5
 80018b4:	e008      	b.n	80018c8 <HAL_GPIO_Init+0x240>
 80018b6:	2304      	movs	r3, #4
 80018b8:	e006      	b.n	80018c8 <HAL_GPIO_Init+0x240>
 80018ba:	2303      	movs	r3, #3
 80018bc:	e004      	b.n	80018c8 <HAL_GPIO_Init+0x240>
 80018be:	2302      	movs	r3, #2
 80018c0:	e002      	b.n	80018c8 <HAL_GPIO_Init+0x240>
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <HAL_GPIO_Init+0x240>
 80018c6:	2300      	movs	r3, #0
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	f002 0203 	and.w	r2, r2, #3
 80018ce:	0092      	lsls	r2, r2, #2
 80018d0:	4093      	lsls	r3, r2
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80018d8:	4935      	ldr	r1, [pc, #212]	@ (80019b0 <HAL_GPIO_Init+0x328>)
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	089b      	lsrs	r3, r3, #2
 80018de:	3302      	adds	r3, #2
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018e6:	4b3d      	ldr	r3, [pc, #244]	@ (80019dc <HAL_GPIO_Init+0x354>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4013      	ands	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800190a:	4a34      	ldr	r2, [pc, #208]	@ (80019dc <HAL_GPIO_Init+0x354>)
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001910:	4b32      	ldr	r3, [pc, #200]	@ (80019dc <HAL_GPIO_Init+0x354>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	43db      	mvns	r3, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4013      	ands	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d003      	beq.n	8001934 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001934:	4a29      	ldr	r2, [pc, #164]	@ (80019dc <HAL_GPIO_Init+0x354>)
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800193a:	4b28      	ldr	r3, [pc, #160]	@ (80019dc <HAL_GPIO_Init+0x354>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	43db      	mvns	r3, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4013      	ands	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800195e:	4a1f      	ldr	r2, [pc, #124]	@ (80019dc <HAL_GPIO_Init+0x354>)
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001964:	4b1d      	ldr	r3, [pc, #116]	@ (80019dc <HAL_GPIO_Init+0x354>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d003      	beq.n	8001988 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	4313      	orrs	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001988:	4a14      	ldr	r2, [pc, #80]	@ (80019dc <HAL_GPIO_Init+0x354>)
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3301      	adds	r3, #1
 8001992:	61fb      	str	r3, [r7, #28]
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	2b0f      	cmp	r3, #15
 8001998:	f67f ae86 	bls.w	80016a8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800199c:	bf00      	nop
 800199e:	bf00      	nop
 80019a0:	3724      	adds	r7, #36	@ 0x24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40013800 	.word	0x40013800
 80019b4:	40020000 	.word	0x40020000
 80019b8:	40020400 	.word	0x40020400
 80019bc:	40020800 	.word	0x40020800
 80019c0:	40020c00 	.word	0x40020c00
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40021400 	.word	0x40021400
 80019cc:	40021800 	.word	0x40021800
 80019d0:	40021c00 	.word	0x40021c00
 80019d4:	40022000 	.word	0x40022000
 80019d8:	40022400 	.word	0x40022400
 80019dc:	40013c00 	.word	0x40013c00

080019e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	460b      	mov	r3, r1
 80019ea:	807b      	strh	r3, [r7, #2]
 80019ec:	4613      	mov	r3, r2
 80019ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019f0:	787b      	ldrb	r3, [r7, #1]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019f6:	887a      	ldrh	r2, [r7, #2]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80019fc:	e003      	b.n	8001a06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80019fe:	887b      	ldrh	r3, [r7, #2]
 8001a00:	041a      	lsls	r2, r3, #16
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	619a      	str	r2, [r3, #24]
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001a1e:	4b08      	ldr	r3, [pc, #32]	@ (8001a40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a20:	695a      	ldr	r2, [r3, #20]
 8001a22:	88fb      	ldrh	r3, [r7, #6]
 8001a24:	4013      	ands	r3, r2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d006      	beq.n	8001a38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a2a:	4a05      	ldr	r2, [pc, #20]	@ (8001a40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a2c:	88fb      	ldrh	r3, [r7, #6]
 8001a2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a30:	88fb      	ldrh	r3, [r7, #6]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 f806 	bl	8001a44 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40013c00 	.word	0x40013c00

08001a44 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e08b      	b.n	8001b86 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d106      	bne.n	8001a88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff fade 	bl	8001044 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2224      	movs	r2, #36	@ 0x24
 8001a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f022 0201 	bic.w	r2, r2, #1
 8001a9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001aac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001abc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d107      	bne.n	8001ad6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	e006      	b.n	8001ae4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689a      	ldr	r2, [r3, #8]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001ae2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d108      	bne.n	8001afe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001afa:	605a      	str	r2, [r3, #4]
 8001afc:	e007      	b.n	8001b0e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6859      	ldr	r1, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b1d      	ldr	r3, [pc, #116]	@ (8001b90 <HAL_I2C_Init+0x134>)
 8001b1a:	430b      	orrs	r3, r1
 8001b1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68da      	ldr	r2, [r3, #12]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	691a      	ldr	r2, [r3, #16]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	430a      	orrs	r2, r1
 8001b46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69d9      	ldr	r1, [r3, #28]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a1a      	ldr	r2, [r3, #32]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0201 	orr.w	r2, r2, #1
 8001b66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2220      	movs	r2, #32
 8001b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	02008000 	.word	0x02008000

08001b94 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af02      	add	r7, sp, #8
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	607a      	str	r2, [r7, #4]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	817b      	strh	r3, [r7, #10]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b20      	cmp	r3, #32
 8001bb2:	f040 80fd 	bne.w	8001db0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d101      	bne.n	8001bc4 <HAL_I2C_Master_Transmit+0x30>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	e0f6      	b.n	8001db2 <HAL_I2C_Master_Transmit+0x21e>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001bcc:	f7ff fba2 	bl	8001314 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	2319      	movs	r3, #25
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f000 fa82 	bl	80020e8 <I2C_WaitOnFlagUntilTimeout>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e0e1      	b.n	8001db2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2221      	movs	r2, #33	@ 0x21
 8001bf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2210      	movs	r2, #16
 8001bfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	893a      	ldrh	r2, [r7, #8]
 8001c0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2200      	movs	r2, #0
 8001c14:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	2bff      	cmp	r3, #255	@ 0xff
 8001c1e:	d906      	bls.n	8001c2e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	22ff      	movs	r2, #255	@ 0xff
 8001c24:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001c26:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	e007      	b.n	8001c3e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001c38:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c3c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d024      	beq.n	8001c90 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4a:	781a      	ldrb	r2, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c56:	1c5a      	adds	r2, r3, #1
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	3b01      	subs	r3, #1
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	8979      	ldrh	r1, [r7, #10]
 8001c82:	4b4e      	ldr	r3, [pc, #312]	@ (8001dbc <HAL_I2C_Master_Transmit+0x228>)
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f000 fbf1 	bl	8002470 <I2C_TransferConfig>
 8001c8e:	e066      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	8979      	ldrh	r1, [r7, #10]
 8001c98:	4b48      	ldr	r3, [pc, #288]	@ (8001dbc <HAL_I2C_Master_Transmit+0x228>)
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f000 fbe6 	bl	8002470 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001ca4:	e05b      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	6a39      	ldr	r1, [r7, #32]
 8001caa:	68f8      	ldr	r0, [r7, #12]
 8001cac:	f000 fa75 	bl	800219a <I2C_WaitOnTXISFlagUntilTimeout>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e07b      	b.n	8001db2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cbe:	781a      	ldrb	r2, [r3, #0]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d034      	beq.n	8001d5e <HAL_I2C_Master_Transmit+0x1ca>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d130      	bne.n	8001d5e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	6a3b      	ldr	r3, [r7, #32]
 8001d02:	2200      	movs	r2, #0
 8001d04:	2180      	movs	r1, #128	@ 0x80
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f000 f9ee 	bl	80020e8 <I2C_WaitOnFlagUntilTimeout>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e04d      	b.n	8001db2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	2bff      	cmp	r3, #255	@ 0xff
 8001d1e:	d90e      	bls.n	8001d3e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	22ff      	movs	r2, #255	@ 0xff
 8001d24:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	8979      	ldrh	r1, [r7, #10]
 8001d2e:	2300      	movs	r3, #0
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f000 fb9a 	bl	8002470 <I2C_TransferConfig>
 8001d3c:	e00f      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	8979      	ldrh	r1, [r7, #10]
 8001d50:	2300      	movs	r3, #0
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d58:	68f8      	ldr	r0, [r7, #12]
 8001d5a:	f000 fb89 	bl	8002470 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d19e      	bne.n	8001ca6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	6a39      	ldr	r1, [r7, #32]
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f000 fa5b 	bl	8002228 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e01a      	b.n	8001db2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2220      	movs	r2, #32
 8001d82:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6859      	ldr	r1, [r3, #4]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc0 <HAL_I2C_Master_Transmit+0x22c>)
 8001d90:	400b      	ands	r3, r1
 8001d92:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2220      	movs	r2, #32
 8001d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	e000      	b.n	8001db2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001db0:	2302      	movs	r3, #2
  }
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	80002000 	.word	0x80002000
 8001dc0:	fe00e800 	.word	0xfe00e800

08001dc4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af02      	add	r7, sp, #8
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	4608      	mov	r0, r1
 8001dce:	4611      	mov	r1, r2
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	817b      	strh	r3, [r7, #10]
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	813b      	strh	r3, [r7, #8]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b20      	cmp	r3, #32
 8001de8:	f040 80fd 	bne.w	8001fe6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dec:	6a3b      	ldr	r3, [r7, #32]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d002      	beq.n	8001df8 <HAL_I2C_Mem_Read+0x34>
 8001df2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d105      	bne.n	8001e04 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dfe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0f1      	b.n	8001fe8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d101      	bne.n	8001e12 <HAL_I2C_Mem_Read+0x4e>
 8001e0e:	2302      	movs	r3, #2
 8001e10:	e0ea      	b.n	8001fe8 <HAL_I2C_Mem_Read+0x224>
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e1a:	f7ff fa7b 	bl	8001314 <HAL_GetTick>
 8001e1e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	2319      	movs	r3, #25
 8001e26:	2201      	movs	r2, #1
 8001e28:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	f000 f95b 	bl	80020e8 <I2C_WaitOnFlagUntilTimeout>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e0d5      	b.n	8001fe8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2222      	movs	r2, #34	@ 0x22
 8001e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2240      	movs	r2, #64	@ 0x40
 8001e48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6a3a      	ldr	r2, [r7, #32]
 8001e56:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001e5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e64:	88f8      	ldrh	r0, [r7, #6]
 8001e66:	893a      	ldrh	r2, [r7, #8]
 8001e68:	8979      	ldrh	r1, [r7, #10]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	4603      	mov	r3, r0
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f000 f8bf 	bl	8001ff8 <I2C_RequestMemoryRead>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d005      	beq.n	8001e8c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e0ad      	b.n	8001fe8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	2bff      	cmp	r3, #255	@ 0xff
 8001e94:	d90e      	bls.n	8001eb4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	8979      	ldrh	r1, [r7, #10]
 8001ea4:	4b52      	ldr	r3, [pc, #328]	@ (8001ff0 <HAL_I2C_Mem_Read+0x22c>)
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f000 fadf 	bl	8002470 <I2C_TransferConfig>
 8001eb2:	e00f      	b.n	8001ed4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	8979      	ldrh	r1, [r7, #10]
 8001ec6:	4b4a      	ldr	r3, [pc, #296]	@ (8001ff0 <HAL_I2C_Mem_Read+0x22c>)
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 face 	bl	8002470 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eda:	2200      	movs	r2, #0
 8001edc:	2104      	movs	r1, #4
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f000 f902 	bl	80020e8 <I2C_WaitOnFlagUntilTimeout>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e07c      	b.n	8001fe8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f00:	1c5a      	adds	r2, r3, #1
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d034      	beq.n	8001f94 <HAL_I2C_Mem_Read+0x1d0>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d130      	bne.n	8001f94 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2180      	movs	r1, #128	@ 0x80
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f000 f8d3 	bl	80020e8 <I2C_WaitOnFlagUntilTimeout>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e04d      	b.n	8001fe8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	2bff      	cmp	r3, #255	@ 0xff
 8001f54:	d90e      	bls.n	8001f74 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	8979      	ldrh	r1, [r7, #10]
 8001f64:	2300      	movs	r3, #0
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f000 fa7f 	bl	8002470 <I2C_TransferConfig>
 8001f72:	e00f      	b.n	8001f94 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	8979      	ldrh	r1, [r7, #10]
 8001f86:	2300      	movs	r3, #0
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 fa6e 	bl	8002470 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d19a      	bne.n	8001ed4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f000 f940 	bl	8002228 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e01a      	b.n	8001fe8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6859      	ldr	r1, [r3, #4]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff4 <HAL_I2C_Mem_Read+0x230>)
 8001fc6:	400b      	ands	r3, r1
 8001fc8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2220      	movs	r2, #32
 8001fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	e000      	b.n	8001fe8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001fe6:	2302      	movs	r3, #2
  }
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	80002400 	.word	0x80002400
 8001ff4:	fe00e800 	.word	0xfe00e800

08001ff8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af02      	add	r7, sp, #8
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	4608      	mov	r0, r1
 8002002:	4611      	mov	r1, r2
 8002004:	461a      	mov	r2, r3
 8002006:	4603      	mov	r3, r0
 8002008:	817b      	strh	r3, [r7, #10]
 800200a:	460b      	mov	r3, r1
 800200c:	813b      	strh	r3, [r7, #8]
 800200e:	4613      	mov	r3, r2
 8002010:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002012:	88fb      	ldrh	r3, [r7, #6]
 8002014:	b2da      	uxtb	r2, r3
 8002016:	8979      	ldrh	r1, [r7, #10]
 8002018:	4b20      	ldr	r3, [pc, #128]	@ (800209c <I2C_RequestMemoryRead+0xa4>)
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	2300      	movs	r3, #0
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 fa26 	bl	8002470 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002024:	69fa      	ldr	r2, [r7, #28]
 8002026:	69b9      	ldr	r1, [r7, #24]
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f000 f8b6 	bl	800219a <I2C_WaitOnTXISFlagUntilTimeout>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e02c      	b.n	8002092 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002038:	88fb      	ldrh	r3, [r7, #6]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d105      	bne.n	800204a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800203e:	893b      	ldrh	r3, [r7, #8]
 8002040:	b2da      	uxtb	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	629a      	str	r2, [r3, #40]	@ 0x28
 8002048:	e015      	b.n	8002076 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800204a:	893b      	ldrh	r3, [r7, #8]
 800204c:	0a1b      	lsrs	r3, r3, #8
 800204e:	b29b      	uxth	r3, r3
 8002050:	b2da      	uxtb	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002058:	69fa      	ldr	r2, [r7, #28]
 800205a:	69b9      	ldr	r1, [r7, #24]
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f000 f89c 	bl	800219a <I2C_WaitOnTXISFlagUntilTimeout>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e012      	b.n	8002092 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800206c:	893b      	ldrh	r3, [r7, #8]
 800206e:	b2da      	uxtb	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	2200      	movs	r2, #0
 800207e:	2140      	movs	r1, #64	@ 0x40
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f000 f831 	bl	80020e8 <I2C_WaitOnFlagUntilTimeout>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e000      	b.n	8002092 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	80002000 	.word	0x80002000

080020a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d103      	bne.n	80020be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2200      	movs	r2, #0
 80020bc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d007      	beq.n	80020dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	699a      	ldr	r2, [r3, #24]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0201 	orr.w	r2, r2, #1
 80020da:	619a      	str	r2, [r3, #24]
  }
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	603b      	str	r3, [r7, #0]
 80020f4:	4613      	mov	r3, r2
 80020f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020f8:	e03b      	b.n	8002172 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	6839      	ldr	r1, [r7, #0]
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 f8d6 	bl	80022b0 <I2C_IsErrorOccurred>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e041      	b.n	8002192 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002114:	d02d      	beq.n	8002172 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002116:	f7ff f8fd 	bl	8001314 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	429a      	cmp	r2, r3
 8002124:	d302      	bcc.n	800212c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d122      	bne.n	8002172 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	699a      	ldr	r2, [r3, #24]
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	4013      	ands	r3, r2
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	429a      	cmp	r2, r3
 800213a:	bf0c      	ite	eq
 800213c:	2301      	moveq	r3, #1
 800213e:	2300      	movne	r3, #0
 8002140:	b2db      	uxtb	r3, r3
 8002142:	461a      	mov	r2, r3
 8002144:	79fb      	ldrb	r3, [r7, #7]
 8002146:	429a      	cmp	r2, r3
 8002148:	d113      	bne.n	8002172 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214e:	f043 0220 	orr.w	r2, r3, #32
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2220      	movs	r2, #32
 800215a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e00f      	b.n	8002192 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	699a      	ldr	r2, [r3, #24]
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	4013      	ands	r3, r2
 800217c:	68ba      	ldr	r2, [r7, #8]
 800217e:	429a      	cmp	r2, r3
 8002180:	bf0c      	ite	eq
 8002182:	2301      	moveq	r3, #1
 8002184:	2300      	movne	r3, #0
 8002186:	b2db      	uxtb	r3, r3
 8002188:	461a      	mov	r2, r3
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	429a      	cmp	r2, r3
 800218e:	d0b4      	beq.n	80020fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b084      	sub	sp, #16
 800219e:	af00      	add	r7, sp, #0
 80021a0:	60f8      	str	r0, [r7, #12]
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021a6:	e033      	b.n	8002210 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	68b9      	ldr	r1, [r7, #8]
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f000 f87f 	bl	80022b0 <I2C_IsErrorOccurred>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e031      	b.n	8002220 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c2:	d025      	beq.n	8002210 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021c4:	f7ff f8a6 	bl	8001314 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d302      	bcc.n	80021da <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d11a      	bne.n	8002210 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d013      	beq.n	8002210 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ec:	f043 0220 	orr.w	r2, r3, #32
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2220      	movs	r2, #32
 80021f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e007      	b.n	8002220 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b02      	cmp	r3, #2
 800221c:	d1c4      	bne.n	80021a8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002234:	e02f      	b.n	8002296 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 f838 	bl	80022b0 <I2C_IsErrorOccurred>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e02d      	b.n	80022a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800224a:	f7ff f863 	bl	8001314 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	429a      	cmp	r2, r3
 8002258:	d302      	bcc.n	8002260 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d11a      	bne.n	8002296 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	f003 0320 	and.w	r3, r3, #32
 800226a:	2b20      	cmp	r3, #32
 800226c:	d013      	beq.n	8002296 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002272:	f043 0220 	orr.w	r2, r3, #32
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2220      	movs	r2, #32
 800227e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e007      	b.n	80022a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	f003 0320 	and.w	r3, r3, #32
 80022a0:	2b20      	cmp	r3, #32
 80022a2:	d1c8      	bne.n	8002236 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08a      	sub	sp, #40	@ 0x28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	f003 0310 	and.w	r3, r3, #16
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d068      	beq.n	80023ae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2210      	movs	r2, #16
 80022e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022e4:	e049      	b.n	800237a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ec:	d045      	beq.n	800237a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022ee:	f7ff f811 	bl	8001314 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	68ba      	ldr	r2, [r7, #8]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d302      	bcc.n	8002304 <I2C_IsErrorOccurred+0x54>
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d13a      	bne.n	800237a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800230e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002316:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002322:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002326:	d121      	bne.n	800236c <I2C_IsErrorOccurred+0xbc>
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800232e:	d01d      	beq.n	800236c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002330:	7cfb      	ldrb	r3, [r7, #19]
 8002332:	2b20      	cmp	r3, #32
 8002334:	d01a      	beq.n	800236c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002344:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002346:	f7fe ffe5 	bl	8001314 <HAL_GetTick>
 800234a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800234c:	e00e      	b.n	800236c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800234e:	f7fe ffe1 	bl	8001314 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b19      	cmp	r3, #25
 800235a:	d907      	bls.n	800236c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	f043 0320 	orr.w	r3, r3, #32
 8002362:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800236a:	e006      	b.n	800237a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	f003 0320 	and.w	r3, r3, #32
 8002376:	2b20      	cmp	r3, #32
 8002378:	d1e9      	bne.n	800234e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	f003 0320 	and.w	r3, r3, #32
 8002384:	2b20      	cmp	r3, #32
 8002386:	d003      	beq.n	8002390 <I2C_IsErrorOccurred+0xe0>
 8002388:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0aa      	beq.n	80022e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002390:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002394:	2b00      	cmp	r3, #0
 8002396:	d103      	bne.n	80023a0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2220      	movs	r2, #32
 800239e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	f043 0304 	orr.w	r3, r3, #4
 80023a6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00b      	beq.n	80023d8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80023c0:	6a3b      	ldr	r3, [r7, #32]
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00b      	beq.n	80023fa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	f043 0308 	orr.w	r3, r3, #8
 80023e8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00b      	beq.n	800241c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	f043 0302 	orr.w	r3, r3, #2
 800240a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002414:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800241c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002420:	2b00      	cmp	r3, #0
 8002422:	d01c      	beq.n	800245e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f7ff fe3b 	bl	80020a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6859      	ldr	r1, [r3, #4]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4b0d      	ldr	r3, [pc, #52]	@ (800246c <I2C_IsErrorOccurred+0x1bc>)
 8002436:	400b      	ands	r3, r1
 8002438:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	431a      	orrs	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2220      	movs	r2, #32
 800244a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800245e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002462:	4618      	mov	r0, r3
 8002464:	3728      	adds	r7, #40	@ 0x28
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	fe00e800 	.word	0xfe00e800

08002470 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002470:	b480      	push	{r7}
 8002472:	b087      	sub	sp, #28
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	607b      	str	r3, [r7, #4]
 800247a:	460b      	mov	r3, r1
 800247c:	817b      	strh	r3, [r7, #10]
 800247e:	4613      	mov	r3, r2
 8002480:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002482:	897b      	ldrh	r3, [r7, #10]
 8002484:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002488:	7a7b      	ldrb	r3, [r7, #9]
 800248a:	041b      	lsls	r3, r3, #16
 800248c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002490:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	4313      	orrs	r3, r2
 800249a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800249e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	0d5b      	lsrs	r3, r3, #21
 80024aa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80024ae:	4b08      	ldr	r3, [pc, #32]	@ (80024d0 <I2C_TransferConfig+0x60>)
 80024b0:	430b      	orrs	r3, r1
 80024b2:	43db      	mvns	r3, r3
 80024b4:	ea02 0103 	and.w	r1, r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	430a      	orrs	r2, r1
 80024c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80024c2:	bf00      	nop
 80024c4:	371c      	adds	r7, #28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	03ff63ff 	.word	0x03ff63ff

080024d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b20      	cmp	r3, #32
 80024e8:	d138      	bne.n	800255c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d101      	bne.n	80024f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024f4:	2302      	movs	r3, #2
 80024f6:	e032      	b.n	800255e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2224      	movs	r2, #36	@ 0x24
 8002504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0201 	bic.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002526:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6819      	ldr	r1, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0201 	orr.w	r2, r2, #1
 8002546:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2220      	movs	r2, #32
 800254c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	e000      	b.n	800255e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800255c:	2302      	movs	r3, #2
  }
}
 800255e:	4618      	mov	r0, r3
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800256a:	b480      	push	{r7}
 800256c:	b085      	sub	sp, #20
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
 8002572:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b20      	cmp	r3, #32
 800257e:	d139      	bne.n	80025f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002586:	2b01      	cmp	r3, #1
 8002588:	d101      	bne.n	800258e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800258a:	2302      	movs	r3, #2
 800258c:	e033      	b.n	80025f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2224      	movs	r2, #36	@ 0x24
 800259a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 0201 	bic.w	r2, r2, #1
 80025ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80025bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	021b      	lsls	r3, r3, #8
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2220      	movs	r2, #32
 80025e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80025f0:	2300      	movs	r3, #0
 80025f2:	e000      	b.n	80025f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025f4:	2302      	movs	r3, #2
  }
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
	...

08002604 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800260a:	2300      	movs	r3, #0
 800260c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800260e:	4b23      	ldr	r3, [pc, #140]	@ (800269c <HAL_PWREx_EnableOverDrive+0x98>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002612:	4a22      	ldr	r2, [pc, #136]	@ (800269c <HAL_PWREx_EnableOverDrive+0x98>)
 8002614:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002618:	6413      	str	r3, [r2, #64]	@ 0x40
 800261a:	4b20      	ldr	r3, [pc, #128]	@ (800269c <HAL_PWREx_EnableOverDrive+0x98>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002626:	4b1e      	ldr	r3, [pc, #120]	@ (80026a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a1d      	ldr	r2, [pc, #116]	@ (80026a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800262c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002630:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002632:	f7fe fe6f 	bl	8001314 <HAL_GetTick>
 8002636:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002638:	e009      	b.n	800264e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800263a:	f7fe fe6b 	bl	8001314 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002648:	d901      	bls.n	800264e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e022      	b.n	8002694 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800264e:	4b14      	ldr	r3, [pc, #80]	@ (80026a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002656:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800265a:	d1ee      	bne.n	800263a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800265c:	4b10      	ldr	r3, [pc, #64]	@ (80026a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a0f      	ldr	r2, [pc, #60]	@ (80026a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002662:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002666:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002668:	f7fe fe54 	bl	8001314 <HAL_GetTick>
 800266c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800266e:	e009      	b.n	8002684 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002670:	f7fe fe50 	bl	8001314 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800267e:	d901      	bls.n	8002684 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e007      	b.n	8002694 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002684:	4b06      	ldr	r3, [pc, #24]	@ (80026a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800268c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002690:	d1ee      	bne.n	8002670 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40023800 	.word	0x40023800
 80026a0:	40007000 	.word	0x40007000

080026a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80026ac:	2300      	movs	r3, #0
 80026ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e29b      	b.n	8002bf2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 8087 	beq.w	80027d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026c8:	4b96      	ldr	r3, [pc, #600]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 030c 	and.w	r3, r3, #12
 80026d0:	2b04      	cmp	r3, #4
 80026d2:	d00c      	beq.n	80026ee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026d4:	4b93      	ldr	r3, [pc, #588]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 030c 	and.w	r3, r3, #12
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d112      	bne.n	8002706 <HAL_RCC_OscConfig+0x62>
 80026e0:	4b90      	ldr	r3, [pc, #576]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026ec:	d10b      	bne.n	8002706 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ee:	4b8d      	ldr	r3, [pc, #564]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d06c      	beq.n	80027d4 <HAL_RCC_OscConfig+0x130>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d168      	bne.n	80027d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e275      	b.n	8002bf2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800270e:	d106      	bne.n	800271e <HAL_RCC_OscConfig+0x7a>
 8002710:	4b84      	ldr	r3, [pc, #528]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a83      	ldr	r2, [pc, #524]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 8002716:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	e02e      	b.n	800277c <HAL_RCC_OscConfig+0xd8>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10c      	bne.n	8002740 <HAL_RCC_OscConfig+0x9c>
 8002726:	4b7f      	ldr	r3, [pc, #508]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a7e      	ldr	r2, [pc, #504]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 800272c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	4b7c      	ldr	r3, [pc, #496]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a7b      	ldr	r2, [pc, #492]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 8002738:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	e01d      	b.n	800277c <HAL_RCC_OscConfig+0xd8>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002748:	d10c      	bne.n	8002764 <HAL_RCC_OscConfig+0xc0>
 800274a:	4b76      	ldr	r3, [pc, #472]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a75      	ldr	r2, [pc, #468]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 8002750:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	4b73      	ldr	r3, [pc, #460]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a72      	ldr	r2, [pc, #456]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 800275c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	e00b      	b.n	800277c <HAL_RCC_OscConfig+0xd8>
 8002764:	4b6f      	ldr	r3, [pc, #444]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a6e      	ldr	r2, [pc, #440]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 800276a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800276e:	6013      	str	r3, [r2, #0]
 8002770:	4b6c      	ldr	r3, [pc, #432]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a6b      	ldr	r2, [pc, #428]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 8002776:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800277a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d013      	beq.n	80027ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002784:	f7fe fdc6 	bl	8001314 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800278c:	f7fe fdc2 	bl	8001314 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b64      	cmp	r3, #100	@ 0x64
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e229      	b.n	8002bf2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279e:	4b61      	ldr	r3, [pc, #388]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f0      	beq.n	800278c <HAL_RCC_OscConfig+0xe8>
 80027aa:	e014      	b.n	80027d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ac:	f7fe fdb2 	bl	8001314 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b4:	f7fe fdae 	bl	8001314 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b64      	cmp	r3, #100	@ 0x64
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e215      	b.n	8002bf2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027c6:	4b57      	ldr	r3, [pc, #348]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1f0      	bne.n	80027b4 <HAL_RCC_OscConfig+0x110>
 80027d2:	e000      	b.n	80027d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d069      	beq.n	80028b6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027e2:	4b50      	ldr	r3, [pc, #320]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 030c 	and.w	r3, r3, #12
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00b      	beq.n	8002806 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ee:	4b4d      	ldr	r3, [pc, #308]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 030c 	and.w	r3, r3, #12
 80027f6:	2b08      	cmp	r3, #8
 80027f8:	d11c      	bne.n	8002834 <HAL_RCC_OscConfig+0x190>
 80027fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d116      	bne.n	8002834 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002806:	4b47      	ldr	r3, [pc, #284]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d005      	beq.n	800281e <HAL_RCC_OscConfig+0x17a>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d001      	beq.n	800281e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e1e9      	b.n	8002bf2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281e:	4b41      	ldr	r3, [pc, #260]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	493d      	ldr	r1, [pc, #244]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 800282e:	4313      	orrs	r3, r2
 8002830:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002832:	e040      	b.n	80028b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d023      	beq.n	8002884 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800283c:	4b39      	ldr	r3, [pc, #228]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a38      	ldr	r2, [pc, #224]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 8002842:	f043 0301 	orr.w	r3, r3, #1
 8002846:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002848:	f7fe fd64 	bl	8001314 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002850:	f7fe fd60 	bl	8001314 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e1c7      	b.n	8002bf2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002862:	4b30      	ldr	r3, [pc, #192]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f0      	beq.n	8002850 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286e:	4b2d      	ldr	r3, [pc, #180]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	4929      	ldr	r1, [pc, #164]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 800287e:	4313      	orrs	r3, r2
 8002880:	600b      	str	r3, [r1, #0]
 8002882:	e018      	b.n	80028b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002884:	4b27      	ldr	r3, [pc, #156]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a26      	ldr	r2, [pc, #152]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 800288a:	f023 0301 	bic.w	r3, r3, #1
 800288e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002890:	f7fe fd40 	bl	8001314 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002898:	f7fe fd3c 	bl	8001314 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e1a3      	b.n	8002bf2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f0      	bne.n	8002898 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0308 	and.w	r3, r3, #8
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d038      	beq.n	8002934 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d019      	beq.n	80028fe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ca:	4b16      	ldr	r3, [pc, #88]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 80028cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028ce:	4a15      	ldr	r2, [pc, #84]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d6:	f7fe fd1d 	bl	8001314 <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028de:	f7fe fd19 	bl	8001314 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e180      	b.n	8002bf2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 80028f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f0      	beq.n	80028de <HAL_RCC_OscConfig+0x23a>
 80028fc:	e01a      	b.n	8002934 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028fe:	4b09      	ldr	r3, [pc, #36]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 8002900:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002902:	4a08      	ldr	r2, [pc, #32]	@ (8002924 <HAL_RCC_OscConfig+0x280>)
 8002904:	f023 0301 	bic.w	r3, r3, #1
 8002908:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290a:	f7fe fd03 	bl	8001314 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002910:	e00a      	b.n	8002928 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002912:	f7fe fcff 	bl	8001314 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d903      	bls.n	8002928 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e166      	b.n	8002bf2 <HAL_RCC_OscConfig+0x54e>
 8002924:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002928:	4b92      	ldr	r3, [pc, #584]	@ (8002b74 <HAL_RCC_OscConfig+0x4d0>)
 800292a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1ee      	bne.n	8002912 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 80a4 	beq.w	8002a8a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002942:	4b8c      	ldr	r3, [pc, #560]	@ (8002b74 <HAL_RCC_OscConfig+0x4d0>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10d      	bne.n	800296a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800294e:	4b89      	ldr	r3, [pc, #548]	@ (8002b74 <HAL_RCC_OscConfig+0x4d0>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	4a88      	ldr	r2, [pc, #544]	@ (8002b74 <HAL_RCC_OscConfig+0x4d0>)
 8002954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002958:	6413      	str	r3, [r2, #64]	@ 0x40
 800295a:	4b86      	ldr	r3, [pc, #536]	@ (8002b74 <HAL_RCC_OscConfig+0x4d0>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002966:	2301      	movs	r3, #1
 8002968:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800296a:	4b83      	ldr	r3, [pc, #524]	@ (8002b78 <HAL_RCC_OscConfig+0x4d4>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002972:	2b00      	cmp	r3, #0
 8002974:	d118      	bne.n	80029a8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002976:	4b80      	ldr	r3, [pc, #512]	@ (8002b78 <HAL_RCC_OscConfig+0x4d4>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a7f      	ldr	r2, [pc, #508]	@ (8002b78 <HAL_RCC_OscConfig+0x4d4>)
 800297c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002980:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002982:	f7fe fcc7 	bl	8001314 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800298a:	f7fe fcc3 	bl	8001314 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b64      	cmp	r3, #100	@ 0x64
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e12a      	b.n	8002bf2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800299c:	4b76      	ldr	r3, [pc, #472]	@ (8002b78 <HAL_RCC_OscConfig+0x4d4>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0f0      	beq.n	800298a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d106      	bne.n	80029be <HAL_RCC_OscConfig+0x31a>
 80029b0:	4b70      	ldr	r3, [pc, #448]	@ (8002b74 <HAL_RCC_OscConfig+0x4d0>)
 80029b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b4:	4a6f      	ldr	r2, [pc, #444]	@ (8002b74 <HAL_RCC_OscConfig+0x4d0>)
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80029bc:	e02d      	b.n	8002a1a <HAL_RCC_OscConfig+0x376>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10c      	bne.n	80029e0 <HAL_RCC_OscConfig+0x33c>
 80029c6:	4b6b      	ldr	r3, [pc, #428]	@ (8002b74 <HAL_RCC_OscConfig+0x4d0>)
 80029c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ca:	4a6a      	ldr	r2, [pc, #424]	@ (8002b74 <HAL_RCC_OscConfig+0x4d0>)
 80029cc:	f023 0301 	bic.w	r3, r3, #1
 80029d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80029d2:	4b68      	ldr	r3, [pc, #416]	@ (8002b74 <HAL_RCC_OscConfig+0x4d0>)
 80029d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d6:	4a67      	ldr	r2, [pc, #412]	@ (8002b74 <HAL_RCC_OscConfig+0x4d0>)
 80029d8:	f023 0304 	bic.w	r3, r3, #4
 80029dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80029de:	e01c      	b.n	8002a1a <HAL_RCC_OscConfig+0x376>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	2b05      	cmp	r3, #5
 80029e6:	d10c      	bne.n	8002a02 <HAL_RCC_OscConfig+0x35e>
 80029e8:	4b62      	ldr	r3, [pc, #392]	@ (8002b74 <HAL_RCC_OscConfig+0x4d0>)
 80029ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ec:	4a61      	ldr	r2, [pc, #388]	@ (8002b74 <HAL_RCC_OscConfig+0x4d0>)
 80029ee:	f043 0304 	orr.w	r3, r3, #4
 80029f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80029f4:	4b5f      	ldr	r3, [pc, #380]	@ (8002b74 <HAL_RCC_OscConfig+0x4d0>)
 80029f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f8:	4a5e      	ldr	r2, [pc, #376]	@ (8002b74 <HAL_RCC_OscConfig+0x4d0>)
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a00:	e00b      	b.n	8002a1a <HAL_RCC_OscConfig+0x376>
 8002a02:	4b5c      	ldr	r3, [pc, #368]	@ (8002b74 <HAL_RCC_OscConfig+0x4d0>)
 8002a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a06:	4a5b      	ldr	r2, [pc, #364]	@ (8002b74 <HAL_RCC_OscConfig+0x4d0>)
 8002a08:	f023 0301 	bic.w	r3, r3, #1
 8002a0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a0e:	4b59      	ldr	r3, [pc, #356]	@ (8002b74 <HAL_RCC_OscConfig+0x4d0>)
 8002a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a12:	4a58      	ldr	r2, [pc, #352]	@ (8002b74 <HAL_RCC_OscConfig+0x4d0>)
 8002a14:	f023 0304 	bic.w	r3, r3, #4
 8002a18:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d015      	beq.n	8002a4e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a22:	f7fe fc77 	bl	8001314 <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a28:	e00a      	b.n	8002a40 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a2a:	f7fe fc73 	bl	8001314 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e0d8      	b.n	8002bf2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a40:	4b4c      	ldr	r3, [pc, #304]	@ (8002b74 <HAL_RCC_OscConfig+0x4d0>)
 8002a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0ee      	beq.n	8002a2a <HAL_RCC_OscConfig+0x386>
 8002a4c:	e014      	b.n	8002a78 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4e:	f7fe fc61 	bl	8001314 <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a54:	e00a      	b.n	8002a6c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a56:	f7fe fc5d 	bl	8001314 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e0c2      	b.n	8002bf2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a6c:	4b41      	ldr	r3, [pc, #260]	@ (8002b74 <HAL_RCC_OscConfig+0x4d0>)
 8002a6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1ee      	bne.n	8002a56 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a78:	7dfb      	ldrb	r3, [r7, #23]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d105      	bne.n	8002a8a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a7e:	4b3d      	ldr	r3, [pc, #244]	@ (8002b74 <HAL_RCC_OscConfig+0x4d0>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a82:	4a3c      	ldr	r2, [pc, #240]	@ (8002b74 <HAL_RCC_OscConfig+0x4d0>)
 8002a84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a88:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 80ae 	beq.w	8002bf0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a94:	4b37      	ldr	r3, [pc, #220]	@ (8002b74 <HAL_RCC_OscConfig+0x4d0>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f003 030c 	and.w	r3, r3, #12
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	d06d      	beq.n	8002b7c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d14b      	bne.n	8002b40 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa8:	4b32      	ldr	r3, [pc, #200]	@ (8002b74 <HAL_RCC_OscConfig+0x4d0>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a31      	ldr	r2, [pc, #196]	@ (8002b74 <HAL_RCC_OscConfig+0x4d0>)
 8002aae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab4:	f7fe fc2e 	bl	8001314 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002abc:	f7fe fc2a 	bl	8001314 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e091      	b.n	8002bf2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ace:	4b29      	ldr	r3, [pc, #164]	@ (8002b74 <HAL_RCC_OscConfig+0x4d0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f0      	bne.n	8002abc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69da      	ldr	r2, [r3, #28]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae8:	019b      	lsls	r3, r3, #6
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af0:	085b      	lsrs	r3, r3, #1
 8002af2:	3b01      	subs	r3, #1
 8002af4:	041b      	lsls	r3, r3, #16
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afc:	061b      	lsls	r3, r3, #24
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b04:	071b      	lsls	r3, r3, #28
 8002b06:	491b      	ldr	r1, [pc, #108]	@ (8002b74 <HAL_RCC_OscConfig+0x4d0>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b0c:	4b19      	ldr	r3, [pc, #100]	@ (8002b74 <HAL_RCC_OscConfig+0x4d0>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a18      	ldr	r2, [pc, #96]	@ (8002b74 <HAL_RCC_OscConfig+0x4d0>)
 8002b12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b18:	f7fe fbfc 	bl	8001314 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b20:	f7fe fbf8 	bl	8001314 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e05f      	b.n	8002bf2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b32:	4b10      	ldr	r3, [pc, #64]	@ (8002b74 <HAL_RCC_OscConfig+0x4d0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f0      	beq.n	8002b20 <HAL_RCC_OscConfig+0x47c>
 8002b3e:	e057      	b.n	8002bf0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b40:	4b0c      	ldr	r3, [pc, #48]	@ (8002b74 <HAL_RCC_OscConfig+0x4d0>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a0b      	ldr	r2, [pc, #44]	@ (8002b74 <HAL_RCC_OscConfig+0x4d0>)
 8002b46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4c:	f7fe fbe2 	bl	8001314 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b54:	f7fe fbde 	bl	8001314 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e045      	b.n	8002bf2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b66:	4b03      	ldr	r3, [pc, #12]	@ (8002b74 <HAL_RCC_OscConfig+0x4d0>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f0      	bne.n	8002b54 <HAL_RCC_OscConfig+0x4b0>
 8002b72:	e03d      	b.n	8002bf0 <HAL_RCC_OscConfig+0x54c>
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002b7c:	4b1f      	ldr	r3, [pc, #124]	@ (8002bfc <HAL_RCC_OscConfig+0x558>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d030      	beq.n	8002bec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d129      	bne.n	8002bec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d122      	bne.n	8002bec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002bac:	4013      	ands	r3, r2
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bb2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d119      	bne.n	8002bec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc2:	085b      	lsrs	r3, r3, #1
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d10f      	bne.n	8002bec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d107      	bne.n	8002bec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d001      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e000      	b.n	8002bf2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40023800 	.word	0x40023800

08002c00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e0d0      	b.n	8002dba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c18:	4b6a      	ldr	r3, [pc, #424]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 030f 	and.w	r3, r3, #15
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d910      	bls.n	8002c48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c26:	4b67      	ldr	r3, [pc, #412]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f023 020f 	bic.w	r2, r3, #15
 8002c2e:	4965      	ldr	r1, [pc, #404]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c36:	4b63      	ldr	r3, [pc, #396]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e0b8      	b.n	8002dba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d020      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c60:	4b59      	ldr	r3, [pc, #356]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	4a58      	ldr	r2, [pc, #352]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0308 	and.w	r3, r3, #8
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c78:	4b53      	ldr	r3, [pc, #332]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	4a52      	ldr	r2, [pc, #328]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c84:	4b50      	ldr	r3, [pc, #320]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	494d      	ldr	r1, [pc, #308]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d040      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d107      	bne.n	8002cba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002caa:	4b47      	ldr	r3, [pc, #284]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d115      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e07f      	b.n	8002dba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d107      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc2:	4b41      	ldr	r3, [pc, #260]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d109      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e073      	b.n	8002dba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd2:	4b3d      	ldr	r3, [pc, #244]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e06b      	b.n	8002dba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ce2:	4b39      	ldr	r3, [pc, #228]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f023 0203 	bic.w	r2, r3, #3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	4936      	ldr	r1, [pc, #216]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cf4:	f7fe fb0e 	bl	8001314 <HAL_GetTick>
 8002cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cfa:	e00a      	b.n	8002d12 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cfc:	f7fe fb0a 	bl	8001314 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e053      	b.n	8002dba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d12:	4b2d      	ldr	r3, [pc, #180]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 020c 	and.w	r2, r3, #12
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d1eb      	bne.n	8002cfc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d24:	4b27      	ldr	r3, [pc, #156]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 030f 	and.w	r3, r3, #15
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d210      	bcs.n	8002d54 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d32:	4b24      	ldr	r3, [pc, #144]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 020f 	bic.w	r2, r3, #15
 8002d3a:	4922      	ldr	r1, [pc, #136]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d42:	4b20      	ldr	r3, [pc, #128]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d001      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e032      	b.n	8002dba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d008      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d60:	4b19      	ldr	r3, [pc, #100]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	4916      	ldr	r1, [pc, #88]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d009      	beq.n	8002d92 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d7e:	4b12      	ldr	r3, [pc, #72]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	490e      	ldr	r1, [pc, #56]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d92:	f000 f821 	bl	8002dd8 <HAL_RCC_GetSysClockFreq>
 8002d96:	4602      	mov	r2, r0
 8002d98:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	091b      	lsrs	r3, r3, #4
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	490a      	ldr	r1, [pc, #40]	@ (8002dcc <HAL_RCC_ClockConfig+0x1cc>)
 8002da4:	5ccb      	ldrb	r3, [r1, r3]
 8002da6:	fa22 f303 	lsr.w	r3, r2, r3
 8002daa:	4a09      	ldr	r2, [pc, #36]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1d0>)
 8002dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002dae:	4b09      	ldr	r3, [pc, #36]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1d4>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fe fa6a 	bl	800128c <HAL_InitTick>

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40023c00 	.word	0x40023c00
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	08003840 	.word	0x08003840
 8002dd0:	20000008 	.word	0x20000008
 8002dd4:	2000000c 	.word	0x2000000c

08002dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ddc:	b090      	sub	sp, #64	@ 0x40
 8002dde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002de0:	2300      	movs	r3, #0
 8002de2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002de4:	2300      	movs	r3, #0
 8002de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002de8:	2300      	movs	r3, #0
 8002dea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002dec:	2300      	movs	r3, #0
 8002dee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002df0:	4b59      	ldr	r3, [pc, #356]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 030c 	and.w	r3, r3, #12
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d00d      	beq.n	8002e18 <HAL_RCC_GetSysClockFreq+0x40>
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	f200 80a1 	bhi.w	8002f44 <HAL_RCC_GetSysClockFreq+0x16c>
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d002      	beq.n	8002e0c <HAL_RCC_GetSysClockFreq+0x34>
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d003      	beq.n	8002e12 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e0a:	e09b      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e0c:	4b53      	ldr	r3, [pc, #332]	@ (8002f5c <HAL_RCC_GetSysClockFreq+0x184>)
 8002e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e10:	e09b      	b.n	8002f4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e12:	4b53      	ldr	r3, [pc, #332]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e14:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e16:	e098      	b.n	8002f4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e18:	4b4f      	ldr	r3, [pc, #316]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e20:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002e22:	4b4d      	ldr	r3, [pc, #308]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d028      	beq.n	8002e80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e2e:	4b4a      	ldr	r3, [pc, #296]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	099b      	lsrs	r3, r3, #6
 8002e34:	2200      	movs	r2, #0
 8002e36:	623b      	str	r3, [r7, #32]
 8002e38:	627a      	str	r2, [r7, #36]	@ 0x24
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e40:	2100      	movs	r1, #0
 8002e42:	4b47      	ldr	r3, [pc, #284]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e44:	fb03 f201 	mul.w	r2, r3, r1
 8002e48:	2300      	movs	r3, #0
 8002e4a:	fb00 f303 	mul.w	r3, r0, r3
 8002e4e:	4413      	add	r3, r2
 8002e50:	4a43      	ldr	r2, [pc, #268]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e52:	fba0 1202 	umull	r1, r2, r0, r2
 8002e56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e58:	460a      	mov	r2, r1
 8002e5a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002e5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e5e:	4413      	add	r3, r2
 8002e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e64:	2200      	movs	r2, #0
 8002e66:	61bb      	str	r3, [r7, #24]
 8002e68:	61fa      	str	r2, [r7, #28]
 8002e6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002e72:	f7fd f9e1 	bl	8000238 <__aeabi_uldivmod>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e7e:	e053      	b.n	8002f28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e80:	4b35      	ldr	r3, [pc, #212]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	099b      	lsrs	r3, r3, #6
 8002e86:	2200      	movs	r2, #0
 8002e88:	613b      	str	r3, [r7, #16]
 8002e8a:	617a      	str	r2, [r7, #20]
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e92:	f04f 0b00 	mov.w	fp, #0
 8002e96:	4652      	mov	r2, sl
 8002e98:	465b      	mov	r3, fp
 8002e9a:	f04f 0000 	mov.w	r0, #0
 8002e9e:	f04f 0100 	mov.w	r1, #0
 8002ea2:	0159      	lsls	r1, r3, #5
 8002ea4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ea8:	0150      	lsls	r0, r2, #5
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	ebb2 080a 	subs.w	r8, r2, sl
 8002eb2:	eb63 090b 	sbc.w	r9, r3, fp
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	f04f 0300 	mov.w	r3, #0
 8002ebe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002ec2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002ec6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002eca:	ebb2 0408 	subs.w	r4, r2, r8
 8002ece:	eb63 0509 	sbc.w	r5, r3, r9
 8002ed2:	f04f 0200 	mov.w	r2, #0
 8002ed6:	f04f 0300 	mov.w	r3, #0
 8002eda:	00eb      	lsls	r3, r5, #3
 8002edc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ee0:	00e2      	lsls	r2, r4, #3
 8002ee2:	4614      	mov	r4, r2
 8002ee4:	461d      	mov	r5, r3
 8002ee6:	eb14 030a 	adds.w	r3, r4, sl
 8002eea:	603b      	str	r3, [r7, #0]
 8002eec:	eb45 030b 	adc.w	r3, r5, fp
 8002ef0:	607b      	str	r3, [r7, #4]
 8002ef2:	f04f 0200 	mov.w	r2, #0
 8002ef6:	f04f 0300 	mov.w	r3, #0
 8002efa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002efe:	4629      	mov	r1, r5
 8002f00:	028b      	lsls	r3, r1, #10
 8002f02:	4621      	mov	r1, r4
 8002f04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f08:	4621      	mov	r1, r4
 8002f0a:	028a      	lsls	r2, r1, #10
 8002f0c:	4610      	mov	r0, r2
 8002f0e:	4619      	mov	r1, r3
 8002f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f12:	2200      	movs	r2, #0
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	60fa      	str	r2, [r7, #12]
 8002f18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f1c:	f7fd f98c 	bl	8000238 <__aeabi_uldivmod>
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	4613      	mov	r3, r2
 8002f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002f28:	4b0b      	ldr	r3, [pc, #44]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	0c1b      	lsrs	r3, r3, #16
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	3301      	adds	r3, #1
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002f38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f40:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f42:	e002      	b.n	8002f4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f44:	4b05      	ldr	r3, [pc, #20]	@ (8002f5c <HAL_RCC_GetSysClockFreq+0x184>)
 8002f46:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3740      	adds	r7, #64	@ 0x40
 8002f50:	46bd      	mov	sp, r7
 8002f52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f56:	bf00      	nop
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	00f42400 	.word	0x00f42400
 8002f60:	017d7840 	.word	0x017d7840

08002f64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002f70:	2300      	movs	r3, #0
 8002f72:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d012      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f8c:	4b69      	ldr	r3, [pc, #420]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	4a68      	ldr	r2, [pc, #416]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f92:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002f96:	6093      	str	r3, [r2, #8]
 8002f98:	4b66      	ldr	r3, [pc, #408]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fa0:	4964      	ldr	r1, [pc, #400]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d017      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fbe:	4b5d      	ldr	r3, [pc, #372]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fc4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fcc:	4959      	ldr	r1, [pc, #356]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fdc:	d101      	bne.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002fea:	2301      	movs	r3, #1
 8002fec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d017      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ffa:	4b4e      	ldr	r3, [pc, #312]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003000:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003008:	494a      	ldr	r1, [pc, #296]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800300a:	4313      	orrs	r3, r2
 800300c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003014:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003018:	d101      	bne.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800301a:	2301      	movs	r3, #1
 800301c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003026:	2301      	movs	r3, #1
 8003028:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003036:	2301      	movs	r3, #1
 8003038:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0320 	and.w	r3, r3, #32
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 808b 	beq.w	800315e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003048:	4b3a      	ldr	r3, [pc, #232]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800304a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304c:	4a39      	ldr	r2, [pc, #228]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800304e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003052:	6413      	str	r3, [r2, #64]	@ 0x40
 8003054:	4b37      	ldr	r3, [pc, #220]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003058:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800305c:	60bb      	str	r3, [r7, #8]
 800305e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003060:	4b35      	ldr	r3, [pc, #212]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a34      	ldr	r2, [pc, #208]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003066:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800306a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800306c:	f7fe f952 	bl	8001314 <HAL_GetTick>
 8003070:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003074:	f7fe f94e 	bl	8001314 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b64      	cmp	r3, #100	@ 0x64
 8003080:	d901      	bls.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e38f      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003086:	4b2c      	ldr	r3, [pc, #176]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0f0      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003092:	4b28      	ldr	r3, [pc, #160]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003096:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800309a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d035      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d02e      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030b0:	4b20      	ldr	r3, [pc, #128]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030b8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030be:	4a1d      	ldr	r2, [pc, #116]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030c4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ca:	4a1a      	ldr	r2, [pc, #104]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030d0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80030d2:	4a18      	ldr	r2, [pc, #96]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80030d8:	4b16      	ldr	r3, [pc, #88]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d114      	bne.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e4:	f7fe f916 	bl	8001314 <HAL_GetTick>
 80030e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ea:	e00a      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ec:	f7fe f912 	bl	8001314 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d901      	bls.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e351      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003102:	4b0c      	ldr	r3, [pc, #48]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0ee      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003112:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003116:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800311a:	d111      	bne.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800311c:	4b05      	ldr	r3, [pc, #20]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003128:	4b04      	ldr	r3, [pc, #16]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800312a:	400b      	ands	r3, r1
 800312c:	4901      	ldr	r1, [pc, #4]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800312e:	4313      	orrs	r3, r2
 8003130:	608b      	str	r3, [r1, #8]
 8003132:	e00b      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003134:	40023800 	.word	0x40023800
 8003138:	40007000 	.word	0x40007000
 800313c:	0ffffcff 	.word	0x0ffffcff
 8003140:	4bac      	ldr	r3, [pc, #688]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	4aab      	ldr	r2, [pc, #684]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003146:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800314a:	6093      	str	r3, [r2, #8]
 800314c:	4ba9      	ldr	r3, [pc, #676]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800314e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003158:	49a6      	ldr	r1, [pc, #664]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800315a:	4313      	orrs	r3, r2
 800315c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0310 	and.w	r3, r3, #16
 8003166:	2b00      	cmp	r3, #0
 8003168:	d010      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800316a:	4ba2      	ldr	r3, [pc, #648]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800316c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003170:	4aa0      	ldr	r2, [pc, #640]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003172:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003176:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800317a:	4b9e      	ldr	r3, [pc, #632]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800317c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003184:	499b      	ldr	r1, [pc, #620]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003186:	4313      	orrs	r3, r2
 8003188:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00a      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003198:	4b96      	ldr	r3, [pc, #600]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800319a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800319e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031a6:	4993      	ldr	r1, [pc, #588]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00a      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031ba:	4b8e      	ldr	r3, [pc, #568]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031c0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031c8:	498a      	ldr	r1, [pc, #552]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00a      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031dc:	4b85      	ldr	r3, [pc, #532]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031ea:	4982      	ldr	r1, [pc, #520]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00a      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031fe:	4b7d      	ldr	r3, [pc, #500]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003204:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800320c:	4979      	ldr	r1, [pc, #484]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800320e:	4313      	orrs	r3, r2
 8003210:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00a      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003220:	4b74      	ldr	r3, [pc, #464]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003226:	f023 0203 	bic.w	r2, r3, #3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322e:	4971      	ldr	r1, [pc, #452]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003230:	4313      	orrs	r3, r2
 8003232:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00a      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003242:	4b6c      	ldr	r3, [pc, #432]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003244:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003248:	f023 020c 	bic.w	r2, r3, #12
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003250:	4968      	ldr	r1, [pc, #416]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003252:	4313      	orrs	r3, r2
 8003254:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00a      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003264:	4b63      	ldr	r3, [pc, #396]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800326a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003272:	4960      	ldr	r1, [pc, #384]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003274:	4313      	orrs	r3, r2
 8003276:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003286:	4b5b      	ldr	r3, [pc, #364]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003288:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800328c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003294:	4957      	ldr	r1, [pc, #348]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00a      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032a8:	4b52      	ldr	r3, [pc, #328]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032b6:	494f      	ldr	r1, [pc, #316]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80032ca:	4b4a      	ldr	r3, [pc, #296]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032d0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d8:	4946      	ldr	r1, [pc, #280]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00a      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80032ec:	4b41      	ldr	r3, [pc, #260]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032f2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032fa:	493e      	ldr	r1, [pc, #248]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00a      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800330e:	4b39      	ldr	r3, [pc, #228]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003314:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800331c:	4935      	ldr	r1, [pc, #212]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800331e:	4313      	orrs	r3, r2
 8003320:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00a      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003330:	4b30      	ldr	r3, [pc, #192]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003336:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800333e:	492d      	ldr	r1, [pc, #180]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003340:	4313      	orrs	r3, r2
 8003342:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d011      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003352:	4b28      	ldr	r3, [pc, #160]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003358:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003360:	4924      	ldr	r1, [pc, #144]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003362:	4313      	orrs	r3, r2
 8003364:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800336c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003370:	d101      	bne.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003372:	2301      	movs	r3, #1
 8003374:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003382:	2301      	movs	r3, #1
 8003384:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00a      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003392:	4b18      	ldr	r3, [pc, #96]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003398:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033a0:	4914      	ldr	r1, [pc, #80]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00b      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033b4:	4b0f      	ldr	r3, [pc, #60]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ba:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033c4:	490b      	ldr	r1, [pc, #44]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00f      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80033d8:	4b06      	ldr	r3, [pc, #24]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033de:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033e8:	4902      	ldr	r1, [pc, #8]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80033f0:	e002      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80033f2:	bf00      	nop
 80033f4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00b      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003404:	4b8a      	ldr	r3, [pc, #552]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003406:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800340a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003414:	4986      	ldr	r1, [pc, #536]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003416:	4313      	orrs	r3, r2
 8003418:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00b      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003428:	4b81      	ldr	r3, [pc, #516]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800342a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800342e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003438:	497d      	ldr	r1, [pc, #500]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800343a:	4313      	orrs	r3, r2
 800343c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d006      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	f000 80d6 	beq.w	8003600 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003454:	4b76      	ldr	r3, [pc, #472]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a75      	ldr	r2, [pc, #468]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800345a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800345e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003460:	f7fd ff58 	bl	8001314 <HAL_GetTick>
 8003464:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003466:	e008      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003468:	f7fd ff54 	bl	8001314 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b64      	cmp	r3, #100	@ 0x64
 8003474:	d901      	bls.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e195      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800347a:	4b6d      	ldr	r3, [pc, #436]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f0      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d021      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003496:	2b00      	cmp	r3, #0
 8003498:	d11d      	bne.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800349a:	4b65      	ldr	r3, [pc, #404]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800349c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034a0:	0c1b      	lsrs	r3, r3, #16
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80034a8:	4b61      	ldr	r3, [pc, #388]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034ae:	0e1b      	lsrs	r3, r3, #24
 80034b0:	f003 030f 	and.w	r3, r3, #15
 80034b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	019a      	lsls	r2, r3, #6
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	041b      	lsls	r3, r3, #16
 80034c0:	431a      	orrs	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	061b      	lsls	r3, r3, #24
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	071b      	lsls	r3, r3, #28
 80034ce:	4958      	ldr	r1, [pc, #352]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d004      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x588>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034ea:	d00a      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d02e      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003500:	d129      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003502:	4b4b      	ldr	r3, [pc, #300]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003504:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003508:	0c1b      	lsrs	r3, r3, #16
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003510:	4b47      	ldr	r3, [pc, #284]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003512:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003516:	0f1b      	lsrs	r3, r3, #28
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	019a      	lsls	r2, r3, #6
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	041b      	lsls	r3, r3, #16
 8003528:	431a      	orrs	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	061b      	lsls	r3, r3, #24
 8003530:	431a      	orrs	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	071b      	lsls	r3, r3, #28
 8003536:	493e      	ldr	r1, [pc, #248]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003538:	4313      	orrs	r3, r2
 800353a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800353e:	4b3c      	ldr	r3, [pc, #240]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003540:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003544:	f023 021f 	bic.w	r2, r3, #31
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354c:	3b01      	subs	r3, #1
 800354e:	4938      	ldr	r1, [pc, #224]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003550:	4313      	orrs	r3, r2
 8003552:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d01d      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003562:	4b33      	ldr	r3, [pc, #204]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003564:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003568:	0e1b      	lsrs	r3, r3, #24
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003570:	4b2f      	ldr	r3, [pc, #188]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003572:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003576:	0f1b      	lsrs	r3, r3, #28
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	019a      	lsls	r2, r3, #6
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	041b      	lsls	r3, r3, #16
 800358a:	431a      	orrs	r2, r3
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	061b      	lsls	r3, r3, #24
 8003590:	431a      	orrs	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	071b      	lsls	r3, r3, #28
 8003596:	4926      	ldr	r1, [pc, #152]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003598:	4313      	orrs	r3, r2
 800359a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d011      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	019a      	lsls	r2, r3, #6
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	041b      	lsls	r3, r3, #16
 80035b6:	431a      	orrs	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	061b      	lsls	r3, r3, #24
 80035be:	431a      	orrs	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	071b      	lsls	r3, r3, #28
 80035c6:	491a      	ldr	r1, [pc, #104]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80035ce:	4b18      	ldr	r3, [pc, #96]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a17      	ldr	r2, [pc, #92]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80035d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035da:	f7fd fe9b 	bl	8001314 <HAL_GetTick>
 80035de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80035e0:	e008      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035e2:	f7fd fe97 	bl	8001314 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b64      	cmp	r3, #100	@ 0x64
 80035ee:	d901      	bls.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e0d8      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80035f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0f0      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	2b01      	cmp	r3, #1
 8003604:	f040 80ce 	bne.w	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003608:	4b09      	ldr	r3, [pc, #36]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a08      	ldr	r2, [pc, #32]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800360e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003612:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003614:	f7fd fe7e 	bl	8001314 <HAL_GetTick>
 8003618:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800361a:	e00b      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800361c:	f7fd fe7a 	bl	8001314 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b64      	cmp	r3, #100	@ 0x64
 8003628:	d904      	bls.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e0bb      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800362e:	bf00      	nop
 8003630:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003634:	4b5e      	ldr	r3, [pc, #376]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800363c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003640:	d0ec      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003652:	2b00      	cmp	r3, #0
 8003654:	d009      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800365e:	2b00      	cmp	r3, #0
 8003660:	d02e      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003666:	2b00      	cmp	r3, #0
 8003668:	d12a      	bne.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800366a:	4b51      	ldr	r3, [pc, #324]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800366c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003670:	0c1b      	lsrs	r3, r3, #16
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003678:	4b4d      	ldr	r3, [pc, #308]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800367a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800367e:	0f1b      	lsrs	r3, r3, #28
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	019a      	lsls	r2, r3, #6
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	041b      	lsls	r3, r3, #16
 8003690:	431a      	orrs	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	061b      	lsls	r3, r3, #24
 8003698:	431a      	orrs	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	071b      	lsls	r3, r3, #28
 800369e:	4944      	ldr	r1, [pc, #272]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80036a6:	4b42      	ldr	r3, [pc, #264]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036ac:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b4:	3b01      	subs	r3, #1
 80036b6:	021b      	lsls	r3, r3, #8
 80036b8:	493d      	ldr	r1, [pc, #244]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d022      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036d4:	d11d      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80036d6:	4b36      	ldr	r3, [pc, #216]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036dc:	0e1b      	lsrs	r3, r3, #24
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80036e4:	4b32      	ldr	r3, [pc, #200]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ea:	0f1b      	lsrs	r3, r3, #28
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	019a      	lsls	r2, r3, #6
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	041b      	lsls	r3, r3, #16
 80036fe:	431a      	orrs	r2, r3
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	061b      	lsls	r3, r3, #24
 8003704:	431a      	orrs	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	071b      	lsls	r3, r3, #28
 800370a:	4929      	ldr	r1, [pc, #164]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800370c:	4313      	orrs	r3, r2
 800370e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b00      	cmp	r3, #0
 800371c:	d028      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800371e:	4b24      	ldr	r3, [pc, #144]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003720:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003724:	0e1b      	lsrs	r3, r3, #24
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800372c:	4b20      	ldr	r3, [pc, #128]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800372e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003732:	0c1b      	lsrs	r3, r3, #16
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	019a      	lsls	r2, r3, #6
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	041b      	lsls	r3, r3, #16
 8003744:	431a      	orrs	r2, r3
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	061b      	lsls	r3, r3, #24
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	071b      	lsls	r3, r3, #28
 8003752:	4917      	ldr	r1, [pc, #92]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003754:	4313      	orrs	r3, r2
 8003756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800375a:	4b15      	ldr	r3, [pc, #84]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800375c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003760:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003768:	4911      	ldr	r1, [pc, #68]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800376a:	4313      	orrs	r3, r2
 800376c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003770:	4b0f      	ldr	r3, [pc, #60]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a0e      	ldr	r2, [pc, #56]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003776:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800377a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800377c:	f7fd fdca 	bl	8001314 <HAL_GetTick>
 8003780:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003784:	f7fd fdc6 	bl	8001314 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b64      	cmp	r3, #100	@ 0x64
 8003790:	d901      	bls.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e007      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003796:	4b06      	ldr	r3, [pc, #24]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800379e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037a2:	d1ef      	bne.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3720      	adds	r7, #32
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40023800 	.word	0x40023800

080037b4 <memset>:
 80037b4:	4402      	add	r2, r0
 80037b6:	4603      	mov	r3, r0
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d100      	bne.n	80037be <memset+0xa>
 80037bc:	4770      	bx	lr
 80037be:	f803 1b01 	strb.w	r1, [r3], #1
 80037c2:	e7f9      	b.n	80037b8 <memset+0x4>

080037c4 <__libc_init_array>:
 80037c4:	b570      	push	{r4, r5, r6, lr}
 80037c6:	4d0d      	ldr	r5, [pc, #52]	@ (80037fc <__libc_init_array+0x38>)
 80037c8:	4c0d      	ldr	r4, [pc, #52]	@ (8003800 <__libc_init_array+0x3c>)
 80037ca:	1b64      	subs	r4, r4, r5
 80037cc:	10a4      	asrs	r4, r4, #2
 80037ce:	2600      	movs	r6, #0
 80037d0:	42a6      	cmp	r6, r4
 80037d2:	d109      	bne.n	80037e8 <__libc_init_array+0x24>
 80037d4:	4d0b      	ldr	r5, [pc, #44]	@ (8003804 <__libc_init_array+0x40>)
 80037d6:	4c0c      	ldr	r4, [pc, #48]	@ (8003808 <__libc_init_array+0x44>)
 80037d8:	f000 f818 	bl	800380c <_init>
 80037dc:	1b64      	subs	r4, r4, r5
 80037de:	10a4      	asrs	r4, r4, #2
 80037e0:	2600      	movs	r6, #0
 80037e2:	42a6      	cmp	r6, r4
 80037e4:	d105      	bne.n	80037f2 <__libc_init_array+0x2e>
 80037e6:	bd70      	pop	{r4, r5, r6, pc}
 80037e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ec:	4798      	blx	r3
 80037ee:	3601      	adds	r6, #1
 80037f0:	e7ee      	b.n	80037d0 <__libc_init_array+0xc>
 80037f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037f6:	4798      	blx	r3
 80037f8:	3601      	adds	r6, #1
 80037fa:	e7f2      	b.n	80037e2 <__libc_init_array+0x1e>
 80037fc:	08003858 	.word	0x08003858
 8003800:	08003858 	.word	0x08003858
 8003804:	08003858 	.word	0x08003858
 8003808:	0800385c 	.word	0x0800385c

0800380c <_init>:
 800380c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800380e:	bf00      	nop
 8003810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003812:	bc08      	pop	{r3}
 8003814:	469e      	mov	lr, r3
 8003816:	4770      	bx	lr

08003818 <_fini>:
 8003818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800381a:	bf00      	nop
 800381c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800381e:	bc08      	pop	{r3}
 8003820:	469e      	mov	lr, r3
 8003822:	4770      	bx	lr
