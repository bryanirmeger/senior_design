
Motor_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a34  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005c2c  08005c2c  00006c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c4c  08005c4c  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005c4c  08005c4c  00006c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c54  08005c54  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c54  08005c54  00006c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c58  08005c58  00006c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005c5c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000010  08005c6c  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08005c6c  000071c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc35  00000000  00000000  0000703e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb3  00000000  00000000  00016c73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00018b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a7b  00000000  00000000  00019878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026e71  00000000  00000000  0001a2f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe17  00000000  00000000  00041164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7b6e  00000000  00000000  00050f7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00148ae9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003878  00000000  00000000  00148b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0014c3a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000010 	.word	0x20000010
 8000214:	00000000 	.word	0x00000000
 8000218:	08005c14 	.word	0x08005c14

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000014 	.word	0x20000014
 8000234:	08005c14 	.word	0x08005c14

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b988 	b.w	8000560 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	468e      	mov	lr, r1
 8000270:	4604      	mov	r4, r0
 8000272:	4688      	mov	r8, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d962      	bls.n	8000344 <__udivmoddi4+0xdc>
 800027e:	fab2 f682 	clz	r6, r2
 8000282:	b14e      	cbz	r6, 8000298 <__udivmoddi4+0x30>
 8000284:	f1c6 0320 	rsb	r3, r6, #32
 8000288:	fa01 f806 	lsl.w	r8, r1, r6
 800028c:	fa20 f303 	lsr.w	r3, r0, r3
 8000290:	40b7      	lsls	r7, r6
 8000292:	ea43 0808 	orr.w	r8, r3, r8
 8000296:	40b4      	lsls	r4, r6
 8000298:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800029c:	fa1f fc87 	uxth.w	ip, r7
 80002a0:	fbb8 f1fe 	udiv	r1, r8, lr
 80002a4:	0c23      	lsrs	r3, r4, #16
 80002a6:	fb0e 8811 	mls	r8, lr, r1, r8
 80002aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ae:	fb01 f20c 	mul.w	r2, r1, ip
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002bc:	f080 80ea 	bcs.w	8000494 <__udivmoddi4+0x22c>
 80002c0:	429a      	cmp	r2, r3
 80002c2:	f240 80e7 	bls.w	8000494 <__udivmoddi4+0x22c>
 80002c6:	3902      	subs	r1, #2
 80002c8:	443b      	add	r3, r7
 80002ca:	1a9a      	subs	r2, r3, r2
 80002cc:	b2a3      	uxth	r3, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002da:	fb00 fc0c 	mul.w	ip, r0, ip
 80002de:	459c      	cmp	ip, r3
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0x8e>
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e8:	f080 80d6 	bcs.w	8000498 <__udivmoddi4+0x230>
 80002ec:	459c      	cmp	ip, r3
 80002ee:	f240 80d3 	bls.w	8000498 <__udivmoddi4+0x230>
 80002f2:	443b      	add	r3, r7
 80002f4:	3802      	subs	r0, #2
 80002f6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fa:	eba3 030c 	sub.w	r3, r3, ip
 80002fe:	2100      	movs	r1, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0xa2>
 8000302:	40f3      	lsrs	r3, r6
 8000304:	2200      	movs	r2, #0
 8000306:	e9c5 3200 	strd	r3, r2, [r5]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d905      	bls.n	800031e <__udivmoddi4+0xb6>
 8000312:	b10d      	cbz	r5, 8000318 <__udivmoddi4+0xb0>
 8000314:	e9c5 0100 	strd	r0, r1, [r5]
 8000318:	2100      	movs	r1, #0
 800031a:	4608      	mov	r0, r1
 800031c:	e7f5      	b.n	800030a <__udivmoddi4+0xa2>
 800031e:	fab3 f183 	clz	r1, r3
 8000322:	2900      	cmp	r1, #0
 8000324:	d146      	bne.n	80003b4 <__udivmoddi4+0x14c>
 8000326:	4573      	cmp	r3, lr
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xc8>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 8105 	bhi.w	800053a <__udivmoddi4+0x2d2>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb6e 0203 	sbc.w	r2, lr, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4690      	mov	r8, r2
 800033a:	2d00      	cmp	r5, #0
 800033c:	d0e5      	beq.n	800030a <__udivmoddi4+0xa2>
 800033e:	e9c5 4800 	strd	r4, r8, [r5]
 8000342:	e7e2      	b.n	800030a <__udivmoddi4+0xa2>
 8000344:	2a00      	cmp	r2, #0
 8000346:	f000 8090 	beq.w	800046a <__udivmoddi4+0x202>
 800034a:	fab2 f682 	clz	r6, r2
 800034e:	2e00      	cmp	r6, #0
 8000350:	f040 80a4 	bne.w	800049c <__udivmoddi4+0x234>
 8000354:	1a8a      	subs	r2, r1, r2
 8000356:	0c03      	lsrs	r3, r0, #16
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	b280      	uxth	r0, r0
 800035e:	b2bc      	uxth	r4, r7
 8000360:	2101      	movs	r1, #1
 8000362:	fbb2 fcfe 	udiv	ip, r2, lr
 8000366:	fb0e 221c 	mls	r2, lr, ip, r2
 800036a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800036e:	fb04 f20c 	mul.w	r2, r4, ip
 8000372:	429a      	cmp	r2, r3
 8000374:	d907      	bls.n	8000386 <__udivmoddi4+0x11e>
 8000376:	18fb      	adds	r3, r7, r3
 8000378:	f10c 38ff 	add.w	r8, ip, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x11c>
 800037e:	429a      	cmp	r2, r3
 8000380:	f200 80e0 	bhi.w	8000544 <__udivmoddi4+0x2dc>
 8000384:	46c4      	mov	ip, r8
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	fbb3 f2fe 	udiv	r2, r3, lr
 800038c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000390:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000394:	fb02 f404 	mul.w	r4, r2, r4
 8000398:	429c      	cmp	r4, r3
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x144>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f102 30ff 	add.w	r0, r2, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x142>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f200 80ca 	bhi.w	800053e <__udivmoddi4+0x2d6>
 80003aa:	4602      	mov	r2, r0
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0x98>
 80003b4:	f1c1 0620 	rsb	r6, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 f706 	lsr.w	r7, r2, r6
 80003be:	431f      	orrs	r7, r3
 80003c0:	fa0e f401 	lsl.w	r4, lr, r1
 80003c4:	fa20 f306 	lsr.w	r3, r0, r6
 80003c8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003cc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d0:	4323      	orrs	r3, r4
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	fa1f fc87 	uxth.w	ip, r7
 80003da:	fbbe f0f9 	udiv	r0, lr, r9
 80003de:	0c1c      	lsrs	r4, r3, #16
 80003e0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003e4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003ec:	45a6      	cmp	lr, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d909      	bls.n	8000408 <__udivmoddi4+0x1a0>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003fa:	f080 809c 	bcs.w	8000536 <__udivmoddi4+0x2ce>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f240 8099 	bls.w	8000536 <__udivmoddi4+0x2ce>
 8000404:	3802      	subs	r0, #2
 8000406:	443c      	add	r4, r7
 8000408:	eba4 040e 	sub.w	r4, r4, lr
 800040c:	fa1f fe83 	uxth.w	lr, r3
 8000410:	fbb4 f3f9 	udiv	r3, r4, r9
 8000414:	fb09 4413 	mls	r4, r9, r3, r4
 8000418:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800041c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000420:	45a4      	cmp	ip, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1ce>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f103 3eff 	add.w	lr, r3, #4294967295
 800042a:	f080 8082 	bcs.w	8000532 <__udivmoddi4+0x2ca>
 800042e:	45a4      	cmp	ip, r4
 8000430:	d97f      	bls.n	8000532 <__udivmoddi4+0x2ca>
 8000432:	3b02      	subs	r3, #2
 8000434:	443c      	add	r4, r7
 8000436:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000442:	4564      	cmp	r4, ip
 8000444:	4673      	mov	r3, lr
 8000446:	46e1      	mov	r9, ip
 8000448:	d362      	bcc.n	8000510 <__udivmoddi4+0x2a8>
 800044a:	d05f      	beq.n	800050c <__udivmoddi4+0x2a4>
 800044c:	b15d      	cbz	r5, 8000466 <__udivmoddi4+0x1fe>
 800044e:	ebb8 0203 	subs.w	r2, r8, r3
 8000452:	eb64 0409 	sbc.w	r4, r4, r9
 8000456:	fa04 f606 	lsl.w	r6, r4, r6
 800045a:	fa22 f301 	lsr.w	r3, r2, r1
 800045e:	431e      	orrs	r6, r3
 8000460:	40cc      	lsrs	r4, r1
 8000462:	e9c5 6400 	strd	r6, r4, [r5]
 8000466:	2100      	movs	r1, #0
 8000468:	e74f      	b.n	800030a <__udivmoddi4+0xa2>
 800046a:	fbb1 fcf2 	udiv	ip, r1, r2
 800046e:	0c01      	lsrs	r1, r0, #16
 8000470:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000474:	b280      	uxth	r0, r0
 8000476:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800047a:	463b      	mov	r3, r7
 800047c:	4638      	mov	r0, r7
 800047e:	463c      	mov	r4, r7
 8000480:	46b8      	mov	r8, r7
 8000482:	46be      	mov	lr, r7
 8000484:	2620      	movs	r6, #32
 8000486:	fbb1 f1f7 	udiv	r1, r1, r7
 800048a:	eba2 0208 	sub.w	r2, r2, r8
 800048e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000492:	e766      	b.n	8000362 <__udivmoddi4+0xfa>
 8000494:	4601      	mov	r1, r0
 8000496:	e718      	b.n	80002ca <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e72c      	b.n	80002f6 <__udivmoddi4+0x8e>
 800049c:	f1c6 0220 	rsb	r2, r6, #32
 80004a0:	fa2e f302 	lsr.w	r3, lr, r2
 80004a4:	40b7      	lsls	r7, r6
 80004a6:	40b1      	lsls	r1, r6
 80004a8:	fa20 f202 	lsr.w	r2, r0, r2
 80004ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b0:	430a      	orrs	r2, r1
 80004b2:	fbb3 f8fe 	udiv	r8, r3, lr
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	fb0e 3318 	mls	r3, lr, r8, r3
 80004bc:	0c11      	lsrs	r1, r2, #16
 80004be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c2:	fb08 f904 	mul.w	r9, r8, r4
 80004c6:	40b0      	lsls	r0, r6
 80004c8:	4589      	cmp	r9, r1
 80004ca:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ce:	b280      	uxth	r0, r0
 80004d0:	d93e      	bls.n	8000550 <__udivmoddi4+0x2e8>
 80004d2:	1879      	adds	r1, r7, r1
 80004d4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d8:	d201      	bcs.n	80004de <__udivmoddi4+0x276>
 80004da:	4589      	cmp	r9, r1
 80004dc:	d81f      	bhi.n	800051e <__udivmoddi4+0x2b6>
 80004de:	eba1 0109 	sub.w	r1, r1, r9
 80004e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e6:	fb09 f804 	mul.w	r8, r9, r4
 80004ea:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ee:	b292      	uxth	r2, r2
 80004f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f4:	4542      	cmp	r2, r8
 80004f6:	d229      	bcs.n	800054c <__udivmoddi4+0x2e4>
 80004f8:	18ba      	adds	r2, r7, r2
 80004fa:	f109 31ff 	add.w	r1, r9, #4294967295
 80004fe:	d2c4      	bcs.n	800048a <__udivmoddi4+0x222>
 8000500:	4542      	cmp	r2, r8
 8000502:	d2c2      	bcs.n	800048a <__udivmoddi4+0x222>
 8000504:	f1a9 0102 	sub.w	r1, r9, #2
 8000508:	443a      	add	r2, r7
 800050a:	e7be      	b.n	800048a <__udivmoddi4+0x222>
 800050c:	45f0      	cmp	r8, lr
 800050e:	d29d      	bcs.n	800044c <__udivmoddi4+0x1e4>
 8000510:	ebbe 0302 	subs.w	r3, lr, r2
 8000514:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000518:	3801      	subs	r0, #1
 800051a:	46e1      	mov	r9, ip
 800051c:	e796      	b.n	800044c <__udivmoddi4+0x1e4>
 800051e:	eba7 0909 	sub.w	r9, r7, r9
 8000522:	4449      	add	r1, r9
 8000524:	f1a8 0c02 	sub.w	ip, r8, #2
 8000528:	fbb1 f9fe 	udiv	r9, r1, lr
 800052c:	fb09 f804 	mul.w	r8, r9, r4
 8000530:	e7db      	b.n	80004ea <__udivmoddi4+0x282>
 8000532:	4673      	mov	r3, lr
 8000534:	e77f      	b.n	8000436 <__udivmoddi4+0x1ce>
 8000536:	4650      	mov	r0, sl
 8000538:	e766      	b.n	8000408 <__udivmoddi4+0x1a0>
 800053a:	4608      	mov	r0, r1
 800053c:	e6fd      	b.n	800033a <__udivmoddi4+0xd2>
 800053e:	443b      	add	r3, r7
 8000540:	3a02      	subs	r2, #2
 8000542:	e733      	b.n	80003ac <__udivmoddi4+0x144>
 8000544:	f1ac 0c02 	sub.w	ip, ip, #2
 8000548:	443b      	add	r3, r7
 800054a:	e71c      	b.n	8000386 <__udivmoddi4+0x11e>
 800054c:	4649      	mov	r1, r9
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x222>
 8000550:	eba1 0109 	sub.w	r1, r1, r9
 8000554:	46c4      	mov	ip, r8
 8000556:	fbb1 f9fe 	udiv	r9, r1, lr
 800055a:	fb09 f804 	mul.w	r8, r9, r4
 800055e:	e7c4      	b.n	80004ea <__udivmoddi4+0x282>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000568:	f3bf 8f4f 	dsb	sy
}
 800056c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800056e:	f3bf 8f6f 	isb	sy
}
 8000572:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000574:	4b0d      	ldr	r3, [pc, #52]	@ (80005ac <SCB_EnableICache+0x48>)
 8000576:	2200      	movs	r2, #0
 8000578:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800057c:	f3bf 8f4f 	dsb	sy
}
 8000580:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000582:	f3bf 8f6f 	isb	sy
}
 8000586:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000588:	4b08      	ldr	r3, [pc, #32]	@ (80005ac <SCB_EnableICache+0x48>)
 800058a:	695b      	ldr	r3, [r3, #20]
 800058c:	4a07      	ldr	r2, [pc, #28]	@ (80005ac <SCB_EnableICache+0x48>)
 800058e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000592:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000594:	f3bf 8f4f 	dsb	sy
}
 8000598:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800059a:	f3bf 8f6f 	isb	sy
}
 800059e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	e000ed00 	.word	0xe000ed00

080005b0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80005b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000634 <SCB_EnableDCache+0x84>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80005be:	f3bf 8f4f 	dsb	sy
}
 80005c2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80005c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000634 <SCB_EnableDCache+0x84>)
 80005c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80005ca:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	0b5b      	lsrs	r3, r3, #13
 80005d0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005d4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	08db      	lsrs	r3, r3, #3
 80005da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005de:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	015a      	lsls	r2, r3, #5
 80005e4:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80005e8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005ea:	68ba      	ldr	r2, [r7, #8]
 80005ec:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005ee:	4911      	ldr	r1, [pc, #68]	@ (8000634 <SCB_EnableDCache+0x84>)
 80005f0:	4313      	orrs	r3, r2
 80005f2:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	1e5a      	subs	r2, r3, #1
 80005fa:	60ba      	str	r2, [r7, #8]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d1ef      	bne.n	80005e0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	1e5a      	subs	r2, r3, #1
 8000604:	60fa      	str	r2, [r7, #12]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d1e5      	bne.n	80005d6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800060a:	f3bf 8f4f 	dsb	sy
}
 800060e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000610:	4b08      	ldr	r3, [pc, #32]	@ (8000634 <SCB_EnableDCache+0x84>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	4a07      	ldr	r2, [pc, #28]	@ (8000634 <SCB_EnableDCache+0x84>)
 8000616:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800061a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800061c:	f3bf 8f4f 	dsb	sy
}
 8000620:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000622:	f3bf 8f6f 	isb	sy
}
 8000626:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	/* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800063e:	f7ff ff91 	bl	8000564 <SCB_EnableICache>

	  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();/* Enable I-Cache---------------------------------------------------------*/
 8000642:	f7ff ffb5 	bl	80005b0 <SCB_EnableDCache>

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000646:	f000 fa9b 	bl	8000b80 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064a:	f000 fcb4 	bl	8000fb6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064e:	f000 f82b 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000652:	f000 f9bb 	bl	80009cc <MX_GPIO_Init>
  MX_DMA_Init();
 8000656:	f000 f99b 	bl	8000990 <MX_DMA_Init>
  MX_TIM1_Init();
 800065a:	f000 f88d 	bl	8000778 <MX_TIM1_Init>
  MX_TIM3_Init();
 800065e:	f000 f901 	bl	8000864 <MX_TIM3_Init>
  MX_UART4_Init();
 8000662:	f000 f965 	bl	8000930 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  uint16_t duty_cycle1 = 333;
 8000666:	f240 134d 	movw	r3, #333	@ 0x14d
 800066a:	80fb      	strh	r3, [r7, #6]
  uint16_t duty_cycle2 = 500;
 800066c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000670:	80bb      	strh	r3, [r7, #4]
  //TIM1_Start_IC();
  HAL_TIM_Base_Start(&htim3);
 8000672:	480c      	ldr	r0, [pc, #48]	@ (80006a4 <main+0x6c>)
 8000674:	f002 fd8e 	bl	8003194 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000678:	2100      	movs	r1, #0
 800067a:	480a      	ldr	r0, [pc, #40]	@ (80006a4 <main+0x6c>)
 800067c:	f002 fe52 	bl	8003324 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000680:	2104      	movs	r1, #4
 8000682:	4808      	ldr	r0, [pc, #32]	@ (80006a4 <main+0x6c>)
 8000684:	f002 fe4e 	bl	8003324 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_cycle1);
 8000688:	4b06      	ldr	r3, [pc, #24]	@ (80006a4 <main+0x6c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	88fa      	ldrh	r2, [r7, #6]
 800068e:	639a      	str	r2, [r3, #56]	@ 0x38
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_cycle2);
 8000690:	4b04      	ldr	r3, [pc, #16]	@ (80006a4 <main+0x6c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	88ba      	ldrh	r2, [r7, #4]
 8000696:	635a      	str	r2, [r3, #52]	@ 0x34
	  /*duty_cycle += 100;
	  if(duty_cycle == 900) {
		  duty_cycle = 0;
	  }*/

	  HAL_Delay(10);
 8000698:	200a      	movs	r0, #10
 800069a:	f000 fce9 	bl	8001070 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_cycle1);
 800069e:	bf00      	nop
 80006a0:	e7f2      	b.n	8000688 <main+0x50>
 80006a2:	bf00      	nop
 80006a4:	20000078 	.word	0x20000078

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b094      	sub	sp, #80	@ 0x50
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	2234      	movs	r2, #52	@ 0x34
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f005 fa7f 	bl	8005bba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	f107 0308 	add.w	r3, r7, #8
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006cc:	4b28      	ldr	r3, [pc, #160]	@ (8000770 <SystemClock_Config+0xc8>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d0:	4a27      	ldr	r2, [pc, #156]	@ (8000770 <SystemClock_Config+0xc8>)
 80006d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d8:	4b25      	ldr	r3, [pc, #148]	@ (8000770 <SystemClock_Config+0xc8>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006e4:	4b23      	ldr	r3, [pc, #140]	@ (8000774 <SystemClock_Config+0xcc>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006ec:	4a21      	ldr	r2, [pc, #132]	@ (8000774 <SystemClock_Config+0xcc>)
 80006ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000774 <SystemClock_Config+0xcc>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006fc:	603b      	str	r3, [r7, #0]
 80006fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000700:	2302      	movs	r3, #2
 8000702:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000704:	2301      	movs	r3, #1
 8000706:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000708:	2310      	movs	r3, #16
 800070a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070c:	2302      	movs	r3, #2
 800070e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000710:	2300      	movs	r3, #0
 8000712:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000714:	2308      	movs	r3, #8
 8000716:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000718:	2378      	movs	r3, #120	@ 0x78
 800071a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800071c:	2306      	movs	r3, #6
 800071e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000720:	2302      	movs	r3, #2
 8000722:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000724:	2302      	movs	r3, #2
 8000726:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000728:	f107 031c 	add.w	r3, r7, #28
 800072c:	4618      	mov	r0, r3
 800072e:	f001 fc1d 	bl	8001f6c <HAL_RCC_OscConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000738:	f000 fa4e 	bl	8000bd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073c:	230f      	movs	r3, #15
 800073e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000740:	2302      	movs	r3, #2
 8000742:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000750:	f107 0308 	add.w	r3, r7, #8
 8000754:	2101      	movs	r1, #1
 8000756:	4618      	mov	r0, r3
 8000758:	f001 feb6 	bl	80024c8 <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000762:	f000 fa39 	bl	8000bd8 <Error_Handler>
  }
}
 8000766:	bf00      	nop
 8000768:	3750      	adds	r7, #80	@ 0x50
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	40007000 	.word	0x40007000

08000778 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08c      	sub	sp, #48	@ 0x30
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800077e:	f107 0320 	add.w	r3, r7, #32
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007a4:	4b2d      	ldr	r3, [pc, #180]	@ (800085c <MX_TIM1_Init+0xe4>)
 80007a6:	4a2e      	ldr	r2, [pc, #184]	@ (8000860 <MX_TIM1_Init+0xe8>)
 80007a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 80007aa:	4b2c      	ldr	r3, [pc, #176]	@ (800085c <MX_TIM1_Init+0xe4>)
 80007ac:	2203      	movs	r2, #3
 80007ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b0:	4b2a      	ldr	r3, [pc, #168]	@ (800085c <MX_TIM1_Init+0xe4>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39999;
 80007b6:	4b29      	ldr	r3, [pc, #164]	@ (800085c <MX_TIM1_Init+0xe4>)
 80007b8:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80007bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007be:	4b27      	ldr	r3, [pc, #156]	@ (800085c <MX_TIM1_Init+0xe4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007c4:	4b25      	ldr	r3, [pc, #148]	@ (800085c <MX_TIM1_Init+0xe4>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ca:	4b24      	ldr	r3, [pc, #144]	@ (800085c <MX_TIM1_Init+0xe4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007d0:	4822      	ldr	r0, [pc, #136]	@ (800085c <MX_TIM1_Init+0xe4>)
 80007d2:	f002 fc87 	bl	80030e4 <HAL_TIM_Base_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 80007dc:	f000 f9fc 	bl	8000bd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007e6:	f107 0320 	add.w	r3, r7, #32
 80007ea:	4619      	mov	r1, r3
 80007ec:	481b      	ldr	r0, [pc, #108]	@ (800085c <MX_TIM1_Init+0xe4>)
 80007ee:	f003 f9ab 	bl	8003b48 <HAL_TIM_ConfigClockSource>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80007f8:	f000 f9ee 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80007fc:	4817      	ldr	r0, [pc, #92]	@ (800085c <MX_TIM1_Init+0xe4>)
 80007fe:	f002 fe8b 	bl	8003518 <HAL_TIM_IC_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000808:	f000 f9e6 	bl	8000bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000810:	2300      	movs	r3, #0
 8000812:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4619      	mov	r1, r3
 800081e:	480f      	ldr	r0, [pc, #60]	@ (800085c <MX_TIM1_Init+0xe4>)
 8000820:	f003 ffbc 	bl	800479c <HAL_TIMEx_MasterConfigSynchronization>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800082a:	f000 f9d5 	bl	8000bd8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000832:	2301      	movs	r3, #1
 8000834:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2200      	movs	r2, #0
 8000842:	4619      	mov	r1, r3
 8000844:	4805      	ldr	r0, [pc, #20]	@ (800085c <MX_TIM1_Init+0xe4>)
 8000846:	f002 ffcf 	bl	80037e8 <HAL_TIM_IC_ConfigChannel>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000850:	f000 f9c2 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	3730      	adds	r7, #48	@ 0x30
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	2000002c 	.word	0x2000002c
 8000860:	40010000 	.word	0x40010000

08000864 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	@ 0x28
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000876:	463b      	mov	r3, r7
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
 8000884:	615a      	str	r2, [r3, #20]
 8000886:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000888:	4b27      	ldr	r3, [pc, #156]	@ (8000928 <MX_TIM3_Init+0xc4>)
 800088a:	4a28      	ldr	r2, [pc, #160]	@ (800092c <MX_TIM3_Init+0xc8>)
 800088c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800088e:	4b26      	ldr	r3, [pc, #152]	@ (8000928 <MX_TIM3_Init+0xc4>)
 8000890:	2200      	movs	r2, #0
 8000892:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000894:	4b24      	ldr	r3, [pc, #144]	@ (8000928 <MX_TIM3_Init+0xc4>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800089a:	4b23      	ldr	r3, [pc, #140]	@ (8000928 <MX_TIM3_Init+0xc4>)
 800089c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a2:	4b21      	ldr	r3, [pc, #132]	@ (8000928 <MX_TIM3_Init+0xc4>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000928 <MX_TIM3_Init+0xc4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008ae:	481e      	ldr	r0, [pc, #120]	@ (8000928 <MX_TIM3_Init+0xc4>)
 80008b0:	f002 fce0 	bl	8003274 <HAL_TIM_PWM_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80008ba:	f000 f98d 	bl	8000bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	4816      	ldr	r0, [pc, #88]	@ (8000928 <MX_TIM3_Init+0xc4>)
 80008ce:	f003 ff65 	bl	800479c <HAL_TIMEx_MasterConfigSynchronization>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80008d8:	f000 f97e 	bl	8000bd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008dc:	2360      	movs	r3, #96	@ 0x60
 80008de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ec:	463b      	mov	r3, r7
 80008ee:	2200      	movs	r2, #0
 80008f0:	4619      	mov	r1, r3
 80008f2:	480d      	ldr	r0, [pc, #52]	@ (8000928 <MX_TIM3_Init+0xc4>)
 80008f4:	f003 f814 	bl	8003920 <HAL_TIM_PWM_ConfigChannel>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80008fe:	f000 f96b 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000902:	463b      	mov	r3, r7
 8000904:	2204      	movs	r2, #4
 8000906:	4619      	mov	r1, r3
 8000908:	4807      	ldr	r0, [pc, #28]	@ (8000928 <MX_TIM3_Init+0xc4>)
 800090a:	f003 f809 	bl	8003920 <HAL_TIM_PWM_ConfigChannel>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000914:	f000 f960 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000918:	4803      	ldr	r0, [pc, #12]	@ (8000928 <MX_TIM3_Init+0xc4>)
 800091a:	f000 f9f3 	bl	8000d04 <HAL_TIM_MspPostInit>

}
 800091e:	bf00      	nop
 8000920:	3728      	adds	r7, #40	@ 0x28
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000078 	.word	0x20000078
 800092c:	40000400 	.word	0x40000400

08000930 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000934:	4b14      	ldr	r3, [pc, #80]	@ (8000988 <MX_UART4_Init+0x58>)
 8000936:	4a15      	ldr	r2, [pc, #84]	@ (800098c <MX_UART4_Init+0x5c>)
 8000938:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800093a:	4b13      	ldr	r3, [pc, #76]	@ (8000988 <MX_UART4_Init+0x58>)
 800093c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000940:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000942:	4b11      	ldr	r3, [pc, #68]	@ (8000988 <MX_UART4_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000948:	4b0f      	ldr	r3, [pc, #60]	@ (8000988 <MX_UART4_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800094e:	4b0e      	ldr	r3, [pc, #56]	@ (8000988 <MX_UART4_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000954:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <MX_UART4_Init+0x58>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095a:	4b0b      	ldr	r3, [pc, #44]	@ (8000988 <MX_UART4_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000960:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <MX_UART4_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000966:	4b08      	ldr	r3, [pc, #32]	@ (8000988 <MX_UART4_Init+0x58>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800096c:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <MX_UART4_Init+0x58>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	@ (8000988 <MX_UART4_Init+0x58>)
 8000974:	f003 ffbe 	bl	80048f4 <HAL_UART_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800097e:	f000 f92b 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200000c4 	.word	0x200000c4
 800098c:	40004c00 	.word	0x40004c00

08000990 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000996:	4b0c      	ldr	r3, [pc, #48]	@ (80009c8 <MX_DMA_Init+0x38>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	4a0b      	ldr	r2, [pc, #44]	@ (80009c8 <MX_DMA_Init+0x38>)
 800099c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a2:	4b09      	ldr	r3, [pc, #36]	@ (80009c8 <MX_DMA_Init+0x38>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2100      	movs	r1, #0
 80009b2:	200f      	movs	r0, #15
 80009b4:	f000 fc5b 	bl	800126e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80009b8:	200f      	movs	r0, #15
 80009ba:	f000 fc74 	bl	80012a6 <HAL_NVIC_EnableIRQ>

}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800

080009cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
 80009e0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a58 <MX_GPIO_Init+0x8c>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	4a1c      	ldr	r2, [pc, #112]	@ (8000a58 <MX_GPIO_Init+0x8c>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <MX_GPIO_Init+0x8c>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009fa:	4b17      	ldr	r3, [pc, #92]	@ (8000a58 <MX_GPIO_Init+0x8c>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	4a16      	ldr	r2, [pc, #88]	@ (8000a58 <MX_GPIO_Init+0x8c>)
 8000a00:	f043 0310 	orr.w	r3, r3, #16
 8000a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a06:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <MX_GPIO_Init+0x8c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	f003 0310 	and.w	r3, r3, #16
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a12:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <MX_GPIO_Init+0x8c>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	4a10      	ldr	r2, [pc, #64]	@ (8000a58 <MX_GPIO_Init+0x8c>)
 8000a18:	f043 0302 	orr.w	r3, r3, #2
 8000a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <MX_GPIO_Init+0x8c>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	f003 0302 	and.w	r3, r3, #2
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2180      	movs	r1, #128	@ 0x80
 8000a2e:	480b      	ldr	r0, [pc, #44]	@ (8000a5c <MX_GPIO_Init+0x90>)
 8000a30:	f001 fa82 	bl	8001f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a34:	2380      	movs	r3, #128	@ 0x80
 8000a36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4804      	ldr	r0, [pc, #16]	@ (8000a5c <MX_GPIO_Init+0x90>)
 8000a4c:	f001 f8c8 	bl	8001be0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a50:	bf00      	nop
 8000a52:	3720      	adds	r7, #32
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40020400 	.word	0x40020400

08000a60 <w_calc>:
	//wait for poll to complete. Set in motor controller and IC ISR. w will update in IC isr
	while(poll_motor == 0);

}

void w_calc(void) {
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
	//timer period is 10ms
	float time_ms = ((float)((counter_buffer[3] - counter_buffer[2]) + (counter_buffer[2] - counter_buffer[1]) + (counter_buffer[1] - counter_buffer[0]) + counter_buffer[0]) / 39999)*10;
 8000a66:	4b20      	ldr	r3, [pc, #128]	@ (8000ae8 <w_calc+0x88>)
 8000a68:	88db      	ldrh	r3, [r3, #6]
 8000a6a:	ee07 3a90 	vmov	s15, r3
 8000a6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a72:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8000aec <w_calc+0x8c>
 8000a76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a7a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000a7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a82:	edc7 7a03 	vstr	s15, [r7, #12]
	float w = 1/(0.001*time_ms);
 8000a86:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a8a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a8e:	ed9f 6b14 	vldr	d6, [pc, #80]	@ 8000ae0 <w_calc+0x80>
 8000a92:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000a96:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 8000a9a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000a9e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000aa2:	edc7 7a02 	vstr	s15, [r7, #8]
	}
	else
	{
		w = (uint8_t)((w / 1000) * (float)(0xFF));
	}*/
	w_time[0] = w;
 8000aa6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000aaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000aae:	edc7 7a01 	vstr	s15, [r7, #4]
 8000ab2:	793b      	ldrb	r3, [r7, #4]
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <w_calc+0x90>)
 8000ab8:	701a      	strb	r2, [r3, #0]
	w_time[1] = time_ms;
 8000aba:	edd7 7a03 	vldr	s15, [r7, #12]
 8000abe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ac2:	edc7 7a01 	vstr	s15, [r7, #4]
 8000ac6:	793b      	ldrb	r3, [r7, #4]
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <w_calc+0x90>)
 8000acc:	705a      	strb	r2, [r3, #1]

}
 8000ace:	bf00      	nop
 8000ad0:	3714      	adds	r7, #20
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	f3af 8000 	nop.w
 8000ae0:	d2f1a9fc 	.word	0xd2f1a9fc
 8000ae4:	3f50624d 	.word	0x3f50624d
 8000ae8:	200001ac 	.word	0x200001ac
 8000aec:	471c3f00 	.word	0x471c3f00
 8000af0:	20000000 	.word	0x20000000

08000af4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	7f1b      	ldrb	r3, [r3, #28]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d12d      	bne.n	8000b60 <HAL_TIM_IC_CaptureCallback+0x6c>
		//add count value of each interrupt to the counter buffer
		counter_buffer[re_count] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000b04:	2100      	movs	r1, #0
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f003 f8e8 	bl	8003cdc <HAL_TIM_ReadCapturedValue>
 8000b0c:	4601      	mov	r1, r0
 8000b0e:	4b16      	ldr	r3, [pc, #88]	@ (8000b68 <HAL_TIM_IC_CaptureCallback+0x74>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	461a      	mov	r2, r3
 8000b14:	b289      	uxth	r1, r1
 8000b16:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <HAL_TIM_IC_CaptureCallback+0x78>)
 8000b18:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		re_count++;
 8000b1c:	4b12      	ldr	r3, [pc, #72]	@ (8000b68 <HAL_TIM_IC_CaptureCallback+0x74>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	3301      	adds	r3, #1
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	4b10      	ldr	r3, [pc, #64]	@ (8000b68 <HAL_TIM_IC_CaptureCallback+0x74>)
 8000b26:	701a      	strb	r2, [r3, #0]
		//when there are 4 high signals, calculate and transmit the speed
		if(re_count == 4) {
 8000b28:	4b0f      	ldr	r3, [pc, #60]	@ (8000b68 <HAL_TIM_IC_CaptureCallback+0x74>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b04      	cmp	r3, #4
 8000b2e:	d117      	bne.n	8000b60 <HAL_TIM_IC_CaptureCallback+0x6c>
			w_calc();
 8000b30:	f7ff ff96 	bl	8000a60 <w_calc>
			poll_motor = 1;
 8000b34:	4b0e      	ldr	r3, [pc, #56]	@ (8000b70 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	701a      	strb	r2, [r3, #0]
		    re_count = 0;
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b68 <HAL_TIM_IC_CaptureCallback+0x74>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
		    //HAL_UART_Transmit_DMA(&huart4, transmit_start, 6);
		    if(is_sent == 0) {
 8000b40:	4b0c      	ldr	r3, [pc, #48]	@ (8000b74 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d10b      	bne.n	8000b60 <HAL_TIM_IC_CaptureCallback+0x6c>
		    	HAL_UART_Transmit_DMA(&huart4, w_time, 3);
 8000b48:	2203      	movs	r2, #3
 8000b4a:	490b      	ldr	r1, [pc, #44]	@ (8000b78 <HAL_TIM_IC_CaptureCallback+0x84>)
 8000b4c:	480b      	ldr	r0, [pc, #44]	@ (8000b7c <HAL_TIM_IC_CaptureCallback+0x88>)
 8000b4e:	f003 ff1f 	bl	8004990 <HAL_UART_Transmit_DMA>
		    	is_sent = 0;
 8000b52:	4b08      	ldr	r3, [pc, #32]	@ (8000b74 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
		    	__HAL_TIM_SET_COUNTER(htim, 0);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	625a      	str	r2, [r3, #36]	@ 0x24
		    }
		}
	}
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	200001b4 	.word	0x200001b4
 8000b6c:	200001ac 	.word	0x200001ac
 8000b70:	200001bc 	.word	0x200001bc
 8000b74:	200001b8 	.word	0x200001b8
 8000b78:	20000000 	.word	0x20000000
 8000b7c:	200000c4 	.word	0x200000c4

08000b80 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b86:	463b      	mov	r3, r7
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b92:	f000 fba3 	bl	80012dc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b96:	2301      	movs	r3, #1
 8000b98:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000ba2:	231f      	movs	r3, #31
 8000ba4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000ba6:	2387      	movs	r3, #135	@ 0x87
 8000ba8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 fbc1 	bl	800134c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000bca:	2004      	movs	r0, #4
 8000bcc:	f000 fb9e 	bl	800130c <HAL_MPU_Enable>

}
 8000bd0:	bf00      	nop
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000bdc:	b672      	cpsid	i
}
 8000bde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <Error_Handler+0x8>

08000be4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bea:	4b0f      	ldr	r3, [pc, #60]	@ (8000c28 <HAL_MspInit+0x44>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bee:	4a0e      	ldr	r2, [pc, #56]	@ (8000c28 <HAL_MspInit+0x44>)
 8000bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <HAL_MspInit+0x44>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c02:	4b09      	ldr	r3, [pc, #36]	@ (8000c28 <HAL_MspInit+0x44>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c06:	4a08      	ldr	r2, [pc, #32]	@ (8000c28 <HAL_MspInit+0x44>)
 8000c08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c0e:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <HAL_MspInit+0x44>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	40023800 	.word	0x40023800

08000c2c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	@ 0x28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a1b      	ldr	r2, [pc, #108]	@ (8000cb8 <HAL_TIM_Base_MspInit+0x8c>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d130      	bne.n	8000cb0 <HAL_TIM_Base_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000cbc <HAL_TIM_Base_MspInit+0x90>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c52:	4a1a      	ldr	r2, [pc, #104]	@ (8000cbc <HAL_TIM_Base_MspInit+0x90>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c5a:	4b18      	ldr	r3, [pc, #96]	@ (8000cbc <HAL_TIM_Base_MspInit+0x90>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c66:	4b15      	ldr	r3, [pc, #84]	@ (8000cbc <HAL_TIM_Base_MspInit+0x90>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	4a14      	ldr	r2, [pc, #80]	@ (8000cbc <HAL_TIM_Base_MspInit+0x90>)
 8000c6c:	f043 0310 	orr.w	r3, r3, #16
 8000c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c72:	4b12      	ldr	r3, [pc, #72]	@ (8000cbc <HAL_TIM_Base_MspInit+0x90>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	f003 0310 	and.w	r3, r3, #16
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c90:	2301      	movs	r3, #1
 8000c92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4809      	ldr	r0, [pc, #36]	@ (8000cc0 <HAL_TIM_Base_MspInit+0x94>)
 8000c9c:	f000 ffa0 	bl	8001be0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	201b      	movs	r0, #27
 8000ca6:	f000 fae2 	bl	800126e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000caa:	201b      	movs	r0, #27
 8000cac:	f000 fafb 	bl	80012a6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000cb0:	bf00      	nop
 8000cb2:	3728      	adds	r7, #40	@ 0x28
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40010000 	.word	0x40010000
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40021000 	.word	0x40021000

08000cc4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8000cfc <HAL_TIM_PWM_MspInit+0x38>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d10b      	bne.n	8000cee <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d00 <HAL_TIM_PWM_MspInit+0x3c>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cda:	4a09      	ldr	r2, [pc, #36]	@ (8000d00 <HAL_TIM_PWM_MspInit+0x3c>)
 8000cdc:	f043 0302 	orr.w	r3, r3, #2
 8000ce0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ce2:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000cee:	bf00      	nop
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	40000400 	.word	0x40000400
 8000d00:	40023800 	.word	0x40023800

08000d04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a11      	ldr	r2, [pc, #68]	@ (8000d68 <HAL_TIM_MspPostInit+0x64>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d11b      	bne.n	8000d5e <HAL_TIM_MspPostInit+0x5a>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	4b11      	ldr	r3, [pc, #68]	@ (8000d6c <HAL_TIM_MspPostInit+0x68>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	4a10      	ldr	r2, [pc, #64]	@ (8000d6c <HAL_TIM_MspPostInit+0x68>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d32:	4b0e      	ldr	r3, [pc, #56]	@ (8000d6c <HAL_TIM_MspPostInit+0x68>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d3e:	23c0      	movs	r3, #192	@ 0xc0
 8000d40:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d52:	f107 030c 	add.w	r3, r7, #12
 8000d56:	4619      	mov	r1, r3
 8000d58:	4805      	ldr	r0, [pc, #20]	@ (8000d70 <HAL_TIM_MspPostInit+0x6c>)
 8000d5a:	f000 ff41 	bl	8001be0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d5e:	bf00      	nop
 8000d60:	3720      	adds	r7, #32
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40000400 	.word	0x40000400
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40020000 	.word	0x40020000

08000d74 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b0ae      	sub	sp, #184	@ 0xb8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	2290      	movs	r2, #144	@ 0x90
 8000d92:	2100      	movs	r1, #0
 8000d94:	4618      	mov	r0, r3
 8000d96:	f004 ff10 	bl	8005bba <memset>
  if(huart->Instance==UART4)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a3c      	ldr	r2, [pc, #240]	@ (8000e90 <HAL_UART_MspInit+0x11c>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d171      	bne.n	8000e88 <HAL_UART_MspInit+0x114>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000da4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000da8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000daa:	2300      	movs	r3, #0
 8000dac:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	4618      	mov	r0, r3
 8000db4:	f001 fd6e 	bl	8002894 <HAL_RCCEx_PeriphCLKConfig>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dbe:	f7ff ff0b 	bl	8000bd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000dc2:	4b34      	ldr	r3, [pc, #208]	@ (8000e94 <HAL_UART_MspInit+0x120>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc6:	4a33      	ldr	r2, [pc, #204]	@ (8000e94 <HAL_UART_MspInit+0x120>)
 8000dc8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000dcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dce:	4b31      	ldr	r3, [pc, #196]	@ (8000e94 <HAL_UART_MspInit+0x120>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	4b2e      	ldr	r3, [pc, #184]	@ (8000e94 <HAL_UART_MspInit+0x120>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dde:	4a2d      	ldr	r2, [pc, #180]	@ (8000e94 <HAL_UART_MspInit+0x120>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de6:	4b2b      	ldr	r3, [pc, #172]	@ (8000e94 <HAL_UART_MspInit+0x120>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000df2:	2303      	movs	r3, #3
 8000df4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e04:	2303      	movs	r3, #3
 8000e06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e0a:	2308      	movs	r3, #8
 8000e0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e10:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e14:	4619      	mov	r1, r3
 8000e16:	4820      	ldr	r0, [pc, #128]	@ (8000e98 <HAL_UART_MspInit+0x124>)
 8000e18:	f000 fee2 	bl	8001be0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8000e1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000e9c <HAL_UART_MspInit+0x128>)
 8000e1e:	4a20      	ldr	r2, [pc, #128]	@ (8000ea0 <HAL_UART_MspInit+0x12c>)
 8000e20:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8000e22:	4b1e      	ldr	r3, [pc, #120]	@ (8000e9c <HAL_UART_MspInit+0x128>)
 8000e24:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e28:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e9c <HAL_UART_MspInit+0x128>)
 8000e2c:	2240      	movs	r2, #64	@ 0x40
 8000e2e:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e30:	4b1a      	ldr	r3, [pc, #104]	@ (8000e9c <HAL_UART_MspInit+0x128>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e36:	4b19      	ldr	r3, [pc, #100]	@ (8000e9c <HAL_UART_MspInit+0x128>)
 8000e38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e3c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e3e:	4b17      	ldr	r3, [pc, #92]	@ (8000e9c <HAL_UART_MspInit+0x128>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e44:	4b15      	ldr	r3, [pc, #84]	@ (8000e9c <HAL_UART_MspInit+0x128>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8000e4a:	4b14      	ldr	r3, [pc, #80]	@ (8000e9c <HAL_UART_MspInit+0x128>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e50:	4b12      	ldr	r3, [pc, #72]	@ (8000e9c <HAL_UART_MspInit+0x128>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e56:	4b11      	ldr	r3, [pc, #68]	@ (8000e9c <HAL_UART_MspInit+0x128>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8000e5c:	480f      	ldr	r0, [pc, #60]	@ (8000e9c <HAL_UART_MspInit+0x128>)
 8000e5e:	f000 fab5 	bl	80013cc <HAL_DMA_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8000e68:	f7ff feb6 	bl	8000bd8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000e9c <HAL_UART_MspInit+0x128>)
 8000e70:	671a      	str	r2, [r3, #112]	@ 0x70
 8000e72:	4a0a      	ldr	r2, [pc, #40]	@ (8000e9c <HAL_UART_MspInit+0x128>)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	2034      	movs	r0, #52	@ 0x34
 8000e7e:	f000 f9f6 	bl	800126e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000e82:	2034      	movs	r0, #52	@ 0x34
 8000e84:	f000 fa0f 	bl	80012a6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 8000e88:	bf00      	nop
 8000e8a:	37b8      	adds	r7, #184	@ 0xb8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40004c00 	.word	0x40004c00
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40020000 	.word	0x40020000
 8000e9c:	2000014c 	.word	0x2000014c
 8000ea0:	40026070 	.word	0x40026070

08000ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <NMI_Handler+0x4>

08000eac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <HardFault_Handler+0x4>

08000eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <MemManage_Handler+0x4>

08000ebc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <BusFault_Handler+0x4>

08000ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <UsageFault_Handler+0x4>

08000ecc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efa:	f000 f899 	bl	8001030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8000f08:	4802      	ldr	r0, [pc, #8]	@ (8000f14 <DMA1_Stream4_IRQHandler+0x10>)
 8000f0a:	f000 fbff 	bl	800170c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	2000014c 	.word	0x2000014c

08000f18 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f1c:	4802      	ldr	r0, [pc, #8]	@ (8000f28 <TIM1_CC_IRQHandler+0x10>)
 8000f1e:	f002 fb5c 	bl	80035da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	2000002c 	.word	0x2000002c

08000f2c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000f30:	4802      	ldr	r0, [pc, #8]	@ (8000f3c <UART4_IRQHandler+0x10>)
 8000f32:	f003 fda9 	bl	8004a88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200000c4 	.word	0x200000c4

08000f40 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f44:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <SystemInit+0x20>)
 8000f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f4a:	4a05      	ldr	r2, [pc, #20]	@ (8000f60 <SystemInit+0x20>)
 8000f4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f68:	f7ff ffea 	bl	8000f40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f6c:	480c      	ldr	r0, [pc, #48]	@ (8000fa0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f6e:	490d      	ldr	r1, [pc, #52]	@ (8000fa4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f70:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f74:	e002      	b.n	8000f7c <LoopCopyDataInit>

08000f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7a:	3304      	adds	r3, #4

08000f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f80:	d3f9      	bcc.n	8000f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f82:	4a0a      	ldr	r2, [pc, #40]	@ (8000fac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f84:	4c0a      	ldr	r4, [pc, #40]	@ (8000fb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f88:	e001      	b.n	8000f8e <LoopFillZerobss>

08000f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f8c:	3204      	adds	r2, #4

08000f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f90:	d3fb      	bcc.n	8000f8a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f92:	f004 fe1b 	bl	8005bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f96:	f7ff fb4f 	bl	8000638 <main>
  bx  lr    
 8000f9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f9c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000fa8:	08005c5c 	.word	0x08005c5c
  ldr r2, =_sbss
 8000fac:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000fb0:	200001c4 	.word	0x200001c4

08000fb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb4:	e7fe      	b.n	8000fb4 <ADC_IRQHandler>

08000fb6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fba:	2003      	movs	r0, #3
 8000fbc:	f000 f94c 	bl	8001258 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc0:	200f      	movs	r0, #15
 8000fc2:	f000 f805 	bl	8000fd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc6:	f7ff fe0d 	bl	8000be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fca:	2300      	movs	r3, #0
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd8:	4b12      	ldr	r3, [pc, #72]	@ (8001024 <HAL_InitTick+0x54>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <HAL_InitTick+0x58>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f967 	bl	80012c2 <HAL_SYSTICK_Config>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e00e      	b.n	800101c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b0f      	cmp	r3, #15
 8001002:	d80a      	bhi.n	800101a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001004:	2200      	movs	r2, #0
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	f04f 30ff 	mov.w	r0, #4294967295
 800100c:	f000 f92f 	bl	800126e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001010:	4a06      	ldr	r2, [pc, #24]	@ (800102c <HAL_InitTick+0x5c>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001016:	2300      	movs	r3, #0
 8001018:	e000      	b.n	800101c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000004 	.word	0x20000004
 8001028:	2000000c 	.word	0x2000000c
 800102c:	20000008 	.word	0x20000008

08001030 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001034:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <HAL_IncTick+0x20>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <HAL_IncTick+0x24>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4413      	add	r3, r2
 8001040:	4a04      	ldr	r2, [pc, #16]	@ (8001054 <HAL_IncTick+0x24>)
 8001042:	6013      	str	r3, [r2, #0]
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	2000000c 	.word	0x2000000c
 8001054:	200001c0 	.word	0x200001c0

08001058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return uwTick;
 800105c:	4b03      	ldr	r3, [pc, #12]	@ (800106c <HAL_GetTick+0x14>)
 800105e:	681b      	ldr	r3, [r3, #0]
}
 8001060:	4618      	mov	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	200001c0 	.word	0x200001c0

08001070 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001078:	f7ff ffee 	bl	8001058 <HAL_GetTick>
 800107c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001088:	d005      	beq.n	8001096 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800108a:	4b0a      	ldr	r3, [pc, #40]	@ (80010b4 <HAL_Delay+0x44>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4413      	add	r3, r2
 8001094:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001096:	bf00      	nop
 8001098:	f7ff ffde 	bl	8001058 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d8f7      	bhi.n	8001098 <HAL_Delay+0x28>
  {
  }
}
 80010a8:	bf00      	nop
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	2000000c 	.word	0x2000000c

080010b8 <__NVIC_SetPriorityGrouping>:
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c8:	4b0b      	ldr	r3, [pc, #44]	@ (80010f8 <__NVIC_SetPriorityGrouping+0x40>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010d4:	4013      	ands	r3, r2
 80010d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010e0:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <__NVIC_SetPriorityGrouping+0x44>)
 80010e2:	4313      	orrs	r3, r2
 80010e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e6:	4a04      	ldr	r2, [pc, #16]	@ (80010f8 <__NVIC_SetPriorityGrouping+0x40>)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	60d3      	str	r3, [r2, #12]
}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000ed00 	.word	0xe000ed00
 80010fc:	05fa0000 	.word	0x05fa0000

08001100 <__NVIC_GetPriorityGrouping>:
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001104:	4b04      	ldr	r3, [pc, #16]	@ (8001118 <__NVIC_GetPriorityGrouping+0x18>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	0a1b      	lsrs	r3, r3, #8
 800110a:	f003 0307 	and.w	r3, r3, #7
}
 800110e:	4618      	mov	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_EnableIRQ>:
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	2b00      	cmp	r3, #0
 800112c:	db0b      	blt.n	8001146 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	f003 021f 	and.w	r2, r3, #31
 8001134:	4907      	ldr	r1, [pc, #28]	@ (8001154 <__NVIC_EnableIRQ+0x38>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	095b      	lsrs	r3, r3, #5
 800113c:	2001      	movs	r0, #1
 800113e:	fa00 f202 	lsl.w	r2, r0, r2
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000e100 	.word	0xe000e100

08001158 <__NVIC_SetPriority>:
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	6039      	str	r1, [r7, #0]
 8001162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	2b00      	cmp	r3, #0
 800116a:	db0a      	blt.n	8001182 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	b2da      	uxtb	r2, r3
 8001170:	490c      	ldr	r1, [pc, #48]	@ (80011a4 <__NVIC_SetPriority+0x4c>)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	0112      	lsls	r2, r2, #4
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	440b      	add	r3, r1
 800117c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001180:	e00a      	b.n	8001198 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4908      	ldr	r1, [pc, #32]	@ (80011a8 <__NVIC_SetPriority+0x50>)
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	3b04      	subs	r3, #4
 8001190:	0112      	lsls	r2, r2, #4
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	440b      	add	r3, r1
 8001196:	761a      	strb	r2, [r3, #24]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000e100 	.word	0xe000e100
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <NVIC_EncodePriority>:
{
 80011ac:	b480      	push	{r7}
 80011ae:	b089      	sub	sp, #36	@ 0x24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f1c3 0307 	rsb	r3, r3, #7
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	bf28      	it	cs
 80011ca:	2304      	movcs	r3, #4
 80011cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3304      	adds	r3, #4
 80011d2:	2b06      	cmp	r3, #6
 80011d4:	d902      	bls.n	80011dc <NVIC_EncodePriority+0x30>
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3b03      	subs	r3, #3
 80011da:	e000      	b.n	80011de <NVIC_EncodePriority+0x32>
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	f04f 32ff 	mov.w	r2, #4294967295
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43da      	mvns	r2, r3
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	401a      	ands	r2, r3
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f4:	f04f 31ff 	mov.w	r1, #4294967295
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	fa01 f303 	lsl.w	r3, r1, r3
 80011fe:	43d9      	mvns	r1, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	4313      	orrs	r3, r2
}
 8001206:	4618      	mov	r0, r3
 8001208:	3724      	adds	r7, #36	@ 0x24
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
	...

08001214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001224:	d301      	bcc.n	800122a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001226:	2301      	movs	r3, #1
 8001228:	e00f      	b.n	800124a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122a:	4a0a      	ldr	r2, [pc, #40]	@ (8001254 <SysTick_Config+0x40>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001232:	210f      	movs	r1, #15
 8001234:	f04f 30ff 	mov.w	r0, #4294967295
 8001238:	f7ff ff8e 	bl	8001158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800123c:	4b05      	ldr	r3, [pc, #20]	@ (8001254 <SysTick_Config+0x40>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001242:	4b04      	ldr	r3, [pc, #16]	@ (8001254 <SysTick_Config+0x40>)
 8001244:	2207      	movs	r2, #7
 8001246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	e000e010 	.word	0xe000e010

08001258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ff29 	bl	80010b8 <__NVIC_SetPriorityGrouping>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800126e:	b580      	push	{r7, lr}
 8001270:	b086      	sub	sp, #24
 8001272:	af00      	add	r7, sp, #0
 8001274:	4603      	mov	r3, r0
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
 800127a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001280:	f7ff ff3e 	bl	8001100 <__NVIC_GetPriorityGrouping>
 8001284:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	68b9      	ldr	r1, [r7, #8]
 800128a:	6978      	ldr	r0, [r7, #20]
 800128c:	f7ff ff8e 	bl	80011ac <NVIC_EncodePriority>
 8001290:	4602      	mov	r2, r0
 8001292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001296:	4611      	mov	r1, r2
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff5d 	bl	8001158 <__NVIC_SetPriority>
}
 800129e:	bf00      	nop
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	4603      	mov	r3, r0
 80012ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff31 	bl	800111c <__NVIC_EnableIRQ>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ffa2 	bl	8001214 <SysTick_Config>
 80012d0:	4603      	mov	r3, r0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80012e0:	f3bf 8f5f 	dmb	sy
}
 80012e4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80012e6:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <HAL_MPU_Disable+0x28>)
 80012e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ea:	4a06      	ldr	r2, [pc, #24]	@ (8001304 <HAL_MPU_Disable+0x28>)
 80012ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012f0:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80012f2:	4b05      	ldr	r3, [pc, #20]	@ (8001308 <HAL_MPU_Disable+0x2c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	605a      	str	r2, [r3, #4]
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000ed00 	.word	0xe000ed00
 8001308:	e000ed90 	.word	0xe000ed90

0800130c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001314:	4a0b      	ldr	r2, [pc, #44]	@ (8001344 <HAL_MPU_Enable+0x38>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800131e:	4b0a      	ldr	r3, [pc, #40]	@ (8001348 <HAL_MPU_Enable+0x3c>)
 8001320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001322:	4a09      	ldr	r2, [pc, #36]	@ (8001348 <HAL_MPU_Enable+0x3c>)
 8001324:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001328:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800132a:	f3bf 8f4f 	dsb	sy
}
 800132e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001330:	f3bf 8f6f 	isb	sy
}
 8001334:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	e000ed90 	.word	0xe000ed90
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	785a      	ldrb	r2, [r3, #1]
 8001358:	4b1b      	ldr	r3, [pc, #108]	@ (80013c8 <HAL_MPU_ConfigRegion+0x7c>)
 800135a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800135c:	4b1a      	ldr	r3, [pc, #104]	@ (80013c8 <HAL_MPU_ConfigRegion+0x7c>)
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	4a19      	ldr	r2, [pc, #100]	@ (80013c8 <HAL_MPU_ConfigRegion+0x7c>)
 8001362:	f023 0301 	bic.w	r3, r3, #1
 8001366:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001368:	4a17      	ldr	r2, [pc, #92]	@ (80013c8 <HAL_MPU_ConfigRegion+0x7c>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	7b1b      	ldrb	r3, [r3, #12]
 8001374:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	7adb      	ldrb	r3, [r3, #11]
 800137a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800137c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	7a9b      	ldrb	r3, [r3, #10]
 8001382:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001384:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	7b5b      	ldrb	r3, [r3, #13]
 800138a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800138c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	7b9b      	ldrb	r3, [r3, #14]
 8001392:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001394:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	7bdb      	ldrb	r3, [r3, #15]
 800139a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800139c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	7a5b      	ldrb	r3, [r3, #9]
 80013a2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	7a1b      	ldrb	r3, [r3, #8]
 80013aa:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013ac:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	7812      	ldrb	r2, [r2, #0]
 80013b2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013b4:	4a04      	ldr	r2, [pc, #16]	@ (80013c8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013b6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013b8:	6113      	str	r3, [r2, #16]
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000ed90 	.word	0xe000ed90

080013cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80013d8:	f7ff fe3e 	bl	8001058 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e099      	b.n	800151c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2202      	movs	r2, #2
 80013ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0201 	bic.w	r2, r2, #1
 8001406:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001408:	e00f      	b.n	800142a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800140a:	f7ff fe25 	bl	8001058 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b05      	cmp	r3, #5
 8001416:	d908      	bls.n	800142a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2220      	movs	r2, #32
 800141c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2203      	movs	r2, #3
 8001422:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e078      	b.n	800151c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1e8      	bne.n	800140a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	4b38      	ldr	r3, [pc, #224]	@ (8001524 <HAL_DMA_Init+0x158>)
 8001444:	4013      	ands	r3, r2
 8001446:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001456:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001462:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800146e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	4313      	orrs	r3, r2
 800147a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001480:	2b04      	cmp	r3, #4
 8001482:	d107      	bne.n	8001494 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148c:	4313      	orrs	r3, r2
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	4313      	orrs	r3, r2
 8001492:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	f023 0307 	bic.w	r3, r3, #7
 80014aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	d117      	bne.n	80014ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d00e      	beq.n	80014ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f000 fb09 	bl	8001ae8 <DMA_CheckFifoParam>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d008      	beq.n	80014ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2240      	movs	r2, #64	@ 0x40
 80014e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80014ea:	2301      	movs	r3, #1
 80014ec:	e016      	b.n	800151c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 fac0 	bl	8001a7c <DMA_CalcBaseAndBitshift>
 80014fc:	4603      	mov	r3, r0
 80014fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001504:	223f      	movs	r2, #63	@ 0x3f
 8001506:	409a      	lsls	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	e010803f 	.word	0xe010803f

08001528 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
 8001534:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800153e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001546:	2b01      	cmp	r3, #1
 8001548:	d101      	bne.n	800154e <HAL_DMA_Start_IT+0x26>
 800154a:	2302      	movs	r3, #2
 800154c:	e048      	b.n	80015e0 <HAL_DMA_Start_IT+0xb8>
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2201      	movs	r2, #1
 8001552:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b01      	cmp	r3, #1
 8001560:	d137      	bne.n	80015d2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2202      	movs	r2, #2
 8001566:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2200      	movs	r2, #0
 800156e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	68b9      	ldr	r1, [r7, #8]
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f000 fa52 	bl	8001a20 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001580:	223f      	movs	r2, #63	@ 0x3f
 8001582:	409a      	lsls	r2, r3
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f042 0216 	orr.w	r2, r2, #22
 8001596:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	695a      	ldr	r2, [r3, #20]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80015a6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d007      	beq.n	80015c0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f042 0208 	orr.w	r2, r2, #8
 80015be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f042 0201 	orr.w	r2, r2, #1
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	e005      	b.n	80015de <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80015da:	2302      	movs	r3, #2
 80015dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80015de:	7dfb      	ldrb	r3, [r7, #23]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015f6:	f7ff fd2f 	bl	8001058 <HAL_GetTick>
 80015fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d008      	beq.n	800161a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2280      	movs	r2, #128	@ 0x80
 800160c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e052      	b.n	80016c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0216 	bic.w	r2, r2, #22
 8001628:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	695a      	ldr	r2, [r3, #20]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001638:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	2b00      	cmp	r3, #0
 8001640:	d103      	bne.n	800164a <HAL_DMA_Abort+0x62>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001646:	2b00      	cmp	r3, #0
 8001648:	d007      	beq.n	800165a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0208 	bic.w	r2, r2, #8
 8001658:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 0201 	bic.w	r2, r2, #1
 8001668:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800166a:	e013      	b.n	8001694 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800166c:	f7ff fcf4 	bl	8001058 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b05      	cmp	r3, #5
 8001678:	d90c      	bls.n	8001694 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2220      	movs	r2, #32
 800167e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2203      	movs	r2, #3
 8001684:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e015      	b.n	80016c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1e4      	bne.n	800166c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016a6:	223f      	movs	r2, #63	@ 0x3f
 80016a8:	409a      	lsls	r2, r3
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2201      	movs	r2, #1
 80016b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d004      	beq.n	80016e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2280      	movs	r2, #128	@ 0x80
 80016e0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e00c      	b.n	8001700 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2205      	movs	r2, #5
 80016ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 0201 	bic.w	r2, r2, #1
 80016fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001718:	4b8e      	ldr	r3, [pc, #568]	@ (8001954 <HAL_DMA_IRQHandler+0x248>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a8e      	ldr	r2, [pc, #568]	@ (8001958 <HAL_DMA_IRQHandler+0x24c>)
 800171e:	fba2 2303 	umull	r2, r3, r2, r3
 8001722:	0a9b      	lsrs	r3, r3, #10
 8001724:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800172a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001736:	2208      	movs	r2, #8
 8001738:	409a      	lsls	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	4013      	ands	r3, r2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d01a      	beq.n	8001778 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	2b00      	cmp	r3, #0
 800174e:	d013      	beq.n	8001778 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f022 0204 	bic.w	r2, r2, #4
 800175e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001764:	2208      	movs	r2, #8
 8001766:	409a      	lsls	r2, r3
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001770:	f043 0201 	orr.w	r2, r3, #1
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800177c:	2201      	movs	r2, #1
 800177e:	409a      	lsls	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4013      	ands	r3, r2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d012      	beq.n	80017ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001792:	2b00      	cmp	r3, #0
 8001794:	d00b      	beq.n	80017ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800179a:	2201      	movs	r2, #1
 800179c:	409a      	lsls	r2, r3
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017a6:	f043 0202 	orr.w	r2, r3, #2
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017b2:	2204      	movs	r2, #4
 80017b4:	409a      	lsls	r2, r3
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	4013      	ands	r3, r2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d012      	beq.n	80017e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00b      	beq.n	80017e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017d0:	2204      	movs	r2, #4
 80017d2:	409a      	lsls	r2, r3
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017dc:	f043 0204 	orr.w	r2, r3, #4
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017e8:	2210      	movs	r2, #16
 80017ea:	409a      	lsls	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4013      	ands	r3, r2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d043      	beq.n	800187c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d03c      	beq.n	800187c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001806:	2210      	movs	r2, #16
 8001808:	409a      	lsls	r2, r3
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d018      	beq.n	800184e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d108      	bne.n	800183c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182e:	2b00      	cmp	r3, #0
 8001830:	d024      	beq.n	800187c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	4798      	blx	r3
 800183a:	e01f      	b.n	800187c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001840:	2b00      	cmp	r3, #0
 8001842:	d01b      	beq.n	800187c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	4798      	blx	r3
 800184c:	e016      	b.n	800187c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001858:	2b00      	cmp	r3, #0
 800185a:	d107      	bne.n	800186c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f022 0208 	bic.w	r2, r2, #8
 800186a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001880:	2220      	movs	r2, #32
 8001882:	409a      	lsls	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4013      	ands	r3, r2
 8001888:	2b00      	cmp	r3, #0
 800188a:	f000 808f 	beq.w	80019ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0310 	and.w	r3, r3, #16
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 8087 	beq.w	80019ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018a2:	2220      	movs	r2, #32
 80018a4:	409a      	lsls	r2, r3
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b05      	cmp	r3, #5
 80018b4:	d136      	bne.n	8001924 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 0216 	bic.w	r2, r2, #22
 80018c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	695a      	ldr	r2, [r3, #20]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80018d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d103      	bne.n	80018e6 <HAL_DMA_IRQHandler+0x1da>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d007      	beq.n	80018f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 0208 	bic.w	r2, r2, #8
 80018f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018fa:	223f      	movs	r2, #63	@ 0x3f
 80018fc:	409a      	lsls	r2, r3
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2201      	movs	r2, #1
 8001906:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001916:	2b00      	cmp	r3, #0
 8001918:	d07e      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	4798      	blx	r3
        }
        return;
 8001922:	e079      	b.n	8001a18 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d01d      	beq.n	800196e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d10d      	bne.n	800195c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001944:	2b00      	cmp	r3, #0
 8001946:	d031      	beq.n	80019ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	4798      	blx	r3
 8001950:	e02c      	b.n	80019ac <HAL_DMA_IRQHandler+0x2a0>
 8001952:	bf00      	nop
 8001954:	20000004 	.word	0x20000004
 8001958:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001960:	2b00      	cmp	r3, #0
 8001962:	d023      	beq.n	80019ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	4798      	blx	r3
 800196c:	e01e      	b.n	80019ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001978:	2b00      	cmp	r3, #0
 800197a:	d10f      	bne.n	800199c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f022 0210 	bic.w	r2, r2, #16
 800198a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d032      	beq.n	8001a1a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d022      	beq.n	8001a06 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2205      	movs	r2, #5
 80019c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0201 	bic.w	r2, r2, #1
 80019d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	3301      	adds	r3, #1
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d307      	bcc.n	80019f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f2      	bne.n	80019d8 <HAL_DMA_IRQHandler+0x2cc>
 80019f2:	e000      	b.n	80019f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80019f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d005      	beq.n	8001a1a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	4798      	blx	r3
 8001a16:	e000      	b.n	8001a1a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a18:	bf00      	nop
    }
  }
}
 8001a1a:	3718      	adds	r7, #24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
 8001a2c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001a3c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	2b40      	cmp	r3, #64	@ 0x40
 8001a4c:	d108      	bne.n	8001a60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a5e:	e007      	b.n	8001a70 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68ba      	ldr	r2, [r7, #8]
 8001a66:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	60da      	str	r2, [r3, #12]
}
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	3b10      	subs	r3, #16
 8001a8c:	4a13      	ldr	r2, [pc, #76]	@ (8001adc <DMA_CalcBaseAndBitshift+0x60>)
 8001a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a92:	091b      	lsrs	r3, r3, #4
 8001a94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a96:	4a12      	ldr	r2, [pc, #72]	@ (8001ae0 <DMA_CalcBaseAndBitshift+0x64>)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2b03      	cmp	r3, #3
 8001aa8:	d908      	bls.n	8001abc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae4 <DMA_CalcBaseAndBitshift+0x68>)
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	1d1a      	adds	r2, r3, #4
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	659a      	str	r2, [r3, #88]	@ 0x58
 8001aba:	e006      	b.n	8001aca <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4b08      	ldr	r3, [pc, #32]	@ (8001ae4 <DMA_CalcBaseAndBitshift+0x68>)
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	aaaaaaab 	.word	0xaaaaaaab
 8001ae0:	08005c44 	.word	0x08005c44
 8001ae4:	fffffc00 	.word	0xfffffc00

08001ae8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d11f      	bne.n	8001b42 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	d856      	bhi.n	8001bb6 <DMA_CheckFifoParam+0xce>
 8001b08:	a201      	add	r2, pc, #4	@ (adr r2, 8001b10 <DMA_CheckFifoParam+0x28>)
 8001b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b0e:	bf00      	nop
 8001b10:	08001b21 	.word	0x08001b21
 8001b14:	08001b33 	.word	0x08001b33
 8001b18:	08001b21 	.word	0x08001b21
 8001b1c:	08001bb7 	.word	0x08001bb7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d046      	beq.n	8001bba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b30:	e043      	b.n	8001bba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b36:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001b3a:	d140      	bne.n	8001bbe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b40:	e03d      	b.n	8001bbe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b4a:	d121      	bne.n	8001b90 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	2b03      	cmp	r3, #3
 8001b50:	d837      	bhi.n	8001bc2 <DMA_CheckFifoParam+0xda>
 8001b52:	a201      	add	r2, pc, #4	@ (adr r2, 8001b58 <DMA_CheckFifoParam+0x70>)
 8001b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b58:	08001b69 	.word	0x08001b69
 8001b5c:	08001b6f 	.word	0x08001b6f
 8001b60:	08001b69 	.word	0x08001b69
 8001b64:	08001b81 	.word	0x08001b81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8001b6c:	e030      	b.n	8001bd0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d025      	beq.n	8001bc6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b7e:	e022      	b.n	8001bc6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b84:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001b88:	d11f      	bne.n	8001bca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b8e:	e01c      	b.n	8001bca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d903      	bls.n	8001b9e <DMA_CheckFifoParam+0xb6>
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	2b03      	cmp	r3, #3
 8001b9a:	d003      	beq.n	8001ba4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b9c:	e018      	b.n	8001bd0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	73fb      	strb	r3, [r7, #15]
      break;
 8001ba2:	e015      	b.n	8001bd0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ba8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00e      	beq.n	8001bce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8001bb4:	e00b      	b.n	8001bce <DMA_CheckFifoParam+0xe6>
      break;
 8001bb6:	bf00      	nop
 8001bb8:	e00a      	b.n	8001bd0 <DMA_CheckFifoParam+0xe8>
      break;
 8001bba:	bf00      	nop
 8001bbc:	e008      	b.n	8001bd0 <DMA_CheckFifoParam+0xe8>
      break;
 8001bbe:	bf00      	nop
 8001bc0:	e006      	b.n	8001bd0 <DMA_CheckFifoParam+0xe8>
      break;
 8001bc2:	bf00      	nop
 8001bc4:	e004      	b.n	8001bd0 <DMA_CheckFifoParam+0xe8>
      break;
 8001bc6:	bf00      	nop
 8001bc8:	e002      	b.n	8001bd0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001bca:	bf00      	nop
 8001bcc:	e000      	b.n	8001bd0 <DMA_CheckFifoParam+0xe8>
      break;
 8001bce:	bf00      	nop
    }
  } 
  
  return status; 
 8001bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop

08001be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b089      	sub	sp, #36	@ 0x24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
 8001bfe:	e175      	b.n	8001eec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c00:	2201      	movs	r2, #1
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	4013      	ands	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	f040 8164 	bne.w	8001ee6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d005      	beq.n	8001c36 <HAL_GPIO_Init+0x56>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d130      	bne.n	8001c98 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	2203      	movs	r2, #3
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43db      	mvns	r3, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	091b      	lsrs	r3, r3, #4
 8001c82:	f003 0201 	and.w	r2, r3, #1
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 0303 	and.w	r3, r3, #3
 8001ca0:	2b03      	cmp	r3, #3
 8001ca2:	d017      	beq.n	8001cd4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	2203      	movs	r2, #3
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 0303 	and.w	r3, r3, #3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d123      	bne.n	8001d28 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	08da      	lsrs	r2, r3, #3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3208      	adds	r2, #8
 8001ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	220f      	movs	r2, #15
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	08da      	lsrs	r2, r3, #3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3208      	adds	r2, #8
 8001d22:	69b9      	ldr	r1, [r7, #24]
 8001d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	2203      	movs	r2, #3
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 0203 	and.w	r2, r3, #3
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 80be 	beq.w	8001ee6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d6a:	4b66      	ldr	r3, [pc, #408]	@ (8001f04 <HAL_GPIO_Init+0x324>)
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6e:	4a65      	ldr	r2, [pc, #404]	@ (8001f04 <HAL_GPIO_Init+0x324>)
 8001d70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d76:	4b63      	ldr	r3, [pc, #396]	@ (8001f04 <HAL_GPIO_Init+0x324>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d82:	4a61      	ldr	r2, [pc, #388]	@ (8001f08 <HAL_GPIO_Init+0x328>)
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	089b      	lsrs	r3, r3, #2
 8001d88:	3302      	adds	r3, #2
 8001d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	220f      	movs	r2, #15
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4013      	ands	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a58      	ldr	r2, [pc, #352]	@ (8001f0c <HAL_GPIO_Init+0x32c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d037      	beq.n	8001e1e <HAL_GPIO_Init+0x23e>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a57      	ldr	r2, [pc, #348]	@ (8001f10 <HAL_GPIO_Init+0x330>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d031      	beq.n	8001e1a <HAL_GPIO_Init+0x23a>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a56      	ldr	r2, [pc, #344]	@ (8001f14 <HAL_GPIO_Init+0x334>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d02b      	beq.n	8001e16 <HAL_GPIO_Init+0x236>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a55      	ldr	r2, [pc, #340]	@ (8001f18 <HAL_GPIO_Init+0x338>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d025      	beq.n	8001e12 <HAL_GPIO_Init+0x232>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a54      	ldr	r2, [pc, #336]	@ (8001f1c <HAL_GPIO_Init+0x33c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d01f      	beq.n	8001e0e <HAL_GPIO_Init+0x22e>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a53      	ldr	r2, [pc, #332]	@ (8001f20 <HAL_GPIO_Init+0x340>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d019      	beq.n	8001e0a <HAL_GPIO_Init+0x22a>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a52      	ldr	r2, [pc, #328]	@ (8001f24 <HAL_GPIO_Init+0x344>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d013      	beq.n	8001e06 <HAL_GPIO_Init+0x226>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a51      	ldr	r2, [pc, #324]	@ (8001f28 <HAL_GPIO_Init+0x348>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d00d      	beq.n	8001e02 <HAL_GPIO_Init+0x222>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a50      	ldr	r2, [pc, #320]	@ (8001f2c <HAL_GPIO_Init+0x34c>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d007      	beq.n	8001dfe <HAL_GPIO_Init+0x21e>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a4f      	ldr	r2, [pc, #316]	@ (8001f30 <HAL_GPIO_Init+0x350>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d101      	bne.n	8001dfa <HAL_GPIO_Init+0x21a>
 8001df6:	2309      	movs	r3, #9
 8001df8:	e012      	b.n	8001e20 <HAL_GPIO_Init+0x240>
 8001dfa:	230a      	movs	r3, #10
 8001dfc:	e010      	b.n	8001e20 <HAL_GPIO_Init+0x240>
 8001dfe:	2308      	movs	r3, #8
 8001e00:	e00e      	b.n	8001e20 <HAL_GPIO_Init+0x240>
 8001e02:	2307      	movs	r3, #7
 8001e04:	e00c      	b.n	8001e20 <HAL_GPIO_Init+0x240>
 8001e06:	2306      	movs	r3, #6
 8001e08:	e00a      	b.n	8001e20 <HAL_GPIO_Init+0x240>
 8001e0a:	2305      	movs	r3, #5
 8001e0c:	e008      	b.n	8001e20 <HAL_GPIO_Init+0x240>
 8001e0e:	2304      	movs	r3, #4
 8001e10:	e006      	b.n	8001e20 <HAL_GPIO_Init+0x240>
 8001e12:	2303      	movs	r3, #3
 8001e14:	e004      	b.n	8001e20 <HAL_GPIO_Init+0x240>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e002      	b.n	8001e20 <HAL_GPIO_Init+0x240>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <HAL_GPIO_Init+0x240>
 8001e1e:	2300      	movs	r3, #0
 8001e20:	69fa      	ldr	r2, [r7, #28]
 8001e22:	f002 0203 	and.w	r2, r2, #3
 8001e26:	0092      	lsls	r2, r2, #2
 8001e28:	4093      	lsls	r3, r2
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e30:	4935      	ldr	r1, [pc, #212]	@ (8001f08 <HAL_GPIO_Init+0x328>)
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	089b      	lsrs	r3, r3, #2
 8001e36:	3302      	adds	r3, #2
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e3e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f34 <HAL_GPIO_Init+0x354>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e62:	4a34      	ldr	r2, [pc, #208]	@ (8001f34 <HAL_GPIO_Init+0x354>)
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e68:	4b32      	ldr	r3, [pc, #200]	@ (8001f34 <HAL_GPIO_Init+0x354>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e8c:	4a29      	ldr	r2, [pc, #164]	@ (8001f34 <HAL_GPIO_Init+0x354>)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e92:	4b28      	ldr	r3, [pc, #160]	@ (8001f34 <HAL_GPIO_Init+0x354>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eb6:	4a1f      	ldr	r2, [pc, #124]	@ (8001f34 <HAL_GPIO_Init+0x354>)
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8001f34 <HAL_GPIO_Init+0x354>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ee0:	4a14      	ldr	r2, [pc, #80]	@ (8001f34 <HAL_GPIO_Init+0x354>)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	61fb      	str	r3, [r7, #28]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	2b0f      	cmp	r3, #15
 8001ef0:	f67f ae86 	bls.w	8001c00 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	3724      	adds	r7, #36	@ 0x24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40013800 	.word	0x40013800
 8001f0c:	40020000 	.word	0x40020000
 8001f10:	40020400 	.word	0x40020400
 8001f14:	40020800 	.word	0x40020800
 8001f18:	40020c00 	.word	0x40020c00
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40021400 	.word	0x40021400
 8001f24:	40021800 	.word	0x40021800
 8001f28:	40021c00 	.word	0x40021c00
 8001f2c:	40022000 	.word	0x40022000
 8001f30:	40022400 	.word	0x40022400
 8001f34:	40013c00 	.word	0x40013c00

08001f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	807b      	strh	r3, [r7, #2]
 8001f44:	4613      	mov	r3, r2
 8001f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f48:	787b      	ldrb	r3, [r7, #1]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f4e:	887a      	ldrh	r2, [r7, #2]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001f54:	e003      	b.n	8001f5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f56:	887b      	ldrh	r3, [r7, #2]
 8001f58:	041a      	lsls	r2, r3, #16
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	619a      	str	r2, [r3, #24]
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
	...

08001f6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001f74:	2300      	movs	r3, #0
 8001f76:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e29b      	b.n	80024ba <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 8087 	beq.w	800209e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f90:	4b96      	ldr	r3, [pc, #600]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 030c 	and.w	r3, r3, #12
 8001f98:	2b04      	cmp	r3, #4
 8001f9a:	d00c      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f9c:	4b93      	ldr	r3, [pc, #588]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 030c 	and.w	r3, r3, #12
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d112      	bne.n	8001fce <HAL_RCC_OscConfig+0x62>
 8001fa8:	4b90      	ldr	r3, [pc, #576]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fb4:	d10b      	bne.n	8001fce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb6:	4b8d      	ldr	r3, [pc, #564]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d06c      	beq.n	800209c <HAL_RCC_OscConfig+0x130>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d168      	bne.n	800209c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e275      	b.n	80024ba <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fd6:	d106      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x7a>
 8001fd8:	4b84      	ldr	r3, [pc, #528]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a83      	ldr	r2, [pc, #524]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 8001fde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fe2:	6013      	str	r3, [r2, #0]
 8001fe4:	e02e      	b.n	8002044 <HAL_RCC_OscConfig+0xd8>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10c      	bne.n	8002008 <HAL_RCC_OscConfig+0x9c>
 8001fee:	4b7f      	ldr	r3, [pc, #508]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a7e      	ldr	r2, [pc, #504]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 8001ff4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	4b7c      	ldr	r3, [pc, #496]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a7b      	ldr	r2, [pc, #492]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 8002000:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	e01d      	b.n	8002044 <HAL_RCC_OscConfig+0xd8>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002010:	d10c      	bne.n	800202c <HAL_RCC_OscConfig+0xc0>
 8002012:	4b76      	ldr	r3, [pc, #472]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a75      	ldr	r2, [pc, #468]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 8002018:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	4b73      	ldr	r3, [pc, #460]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a72      	ldr	r2, [pc, #456]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 8002024:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	e00b      	b.n	8002044 <HAL_RCC_OscConfig+0xd8>
 800202c:	4b6f      	ldr	r3, [pc, #444]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a6e      	ldr	r2, [pc, #440]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 8002032:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	4b6c      	ldr	r3, [pc, #432]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a6b      	ldr	r2, [pc, #428]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 800203e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002042:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d013      	beq.n	8002074 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204c:	f7ff f804 	bl	8001058 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002054:	f7ff f800 	bl	8001058 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b64      	cmp	r3, #100	@ 0x64
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e229      	b.n	80024ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002066:	4b61      	ldr	r3, [pc, #388]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0f0      	beq.n	8002054 <HAL_RCC_OscConfig+0xe8>
 8002072:	e014      	b.n	800209e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002074:	f7fe fff0 	bl	8001058 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800207c:	f7fe ffec 	bl	8001058 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b64      	cmp	r3, #100	@ 0x64
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e215      	b.n	80024ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800208e:	4b57      	ldr	r3, [pc, #348]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f0      	bne.n	800207c <HAL_RCC_OscConfig+0x110>
 800209a:	e000      	b.n	800209e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800209c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d069      	beq.n	800217e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020aa:	4b50      	ldr	r3, [pc, #320]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 030c 	and.w	r3, r3, #12
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00b      	beq.n	80020ce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020b6:	4b4d      	ldr	r3, [pc, #308]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 030c 	and.w	r3, r3, #12
 80020be:	2b08      	cmp	r3, #8
 80020c0:	d11c      	bne.n	80020fc <HAL_RCC_OscConfig+0x190>
 80020c2:	4b4a      	ldr	r3, [pc, #296]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d116      	bne.n	80020fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ce:	4b47      	ldr	r3, [pc, #284]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d005      	beq.n	80020e6 <HAL_RCC_OscConfig+0x17a>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d001      	beq.n	80020e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e1e9      	b.n	80024ba <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e6:	4b41      	ldr	r3, [pc, #260]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	493d      	ldr	r1, [pc, #244]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020fa:	e040      	b.n	800217e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d023      	beq.n	800214c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002104:	4b39      	ldr	r3, [pc, #228]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a38      	ldr	r2, [pc, #224]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002110:	f7fe ffa2 	bl	8001058 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002118:	f7fe ff9e 	bl	8001058 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e1c7      	b.n	80024ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212a:	4b30      	ldr	r3, [pc, #192]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0f0      	beq.n	8002118 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002136:	4b2d      	ldr	r3, [pc, #180]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4929      	ldr	r1, [pc, #164]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 8002146:	4313      	orrs	r3, r2
 8002148:	600b      	str	r3, [r1, #0]
 800214a:	e018      	b.n	800217e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800214c:	4b27      	ldr	r3, [pc, #156]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a26      	ldr	r2, [pc, #152]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 8002152:	f023 0301 	bic.w	r3, r3, #1
 8002156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002158:	f7fe ff7e 	bl	8001058 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002160:	f7fe ff7a 	bl	8001058 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e1a3      	b.n	80024ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002172:	4b1e      	ldr	r3, [pc, #120]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1f0      	bne.n	8002160 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	2b00      	cmp	r3, #0
 8002188:	d038      	beq.n	80021fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d019      	beq.n	80021c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002192:	4b16      	ldr	r3, [pc, #88]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 8002194:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002196:	4a15      	ldr	r2, [pc, #84]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219e:	f7fe ff5b 	bl	8001058 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a6:	f7fe ff57 	bl	8001058 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e180      	b.n	80024ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b8:	4b0c      	ldr	r3, [pc, #48]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 80021ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0f0      	beq.n	80021a6 <HAL_RCC_OscConfig+0x23a>
 80021c4:	e01a      	b.n	80021fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021c6:	4b09      	ldr	r3, [pc, #36]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 80021c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021ca:	4a08      	ldr	r2, [pc, #32]	@ (80021ec <HAL_RCC_OscConfig+0x280>)
 80021cc:	f023 0301 	bic.w	r3, r3, #1
 80021d0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d2:	f7fe ff41 	bl	8001058 <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d8:	e00a      	b.n	80021f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021da:	f7fe ff3d 	bl	8001058 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d903      	bls.n	80021f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e166      	b.n	80024ba <HAL_RCC_OscConfig+0x54e>
 80021ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f0:	4b92      	ldr	r3, [pc, #584]	@ (800243c <HAL_RCC_OscConfig+0x4d0>)
 80021f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1ee      	bne.n	80021da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 80a4 	beq.w	8002352 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800220a:	4b8c      	ldr	r3, [pc, #560]	@ (800243c <HAL_RCC_OscConfig+0x4d0>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10d      	bne.n	8002232 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002216:	4b89      	ldr	r3, [pc, #548]	@ (800243c <HAL_RCC_OscConfig+0x4d0>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221a:	4a88      	ldr	r2, [pc, #544]	@ (800243c <HAL_RCC_OscConfig+0x4d0>)
 800221c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002220:	6413      	str	r3, [r2, #64]	@ 0x40
 8002222:	4b86      	ldr	r3, [pc, #536]	@ (800243c <HAL_RCC_OscConfig+0x4d0>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800222a:	60bb      	str	r3, [r7, #8]
 800222c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800222e:	2301      	movs	r3, #1
 8002230:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002232:	4b83      	ldr	r3, [pc, #524]	@ (8002440 <HAL_RCC_OscConfig+0x4d4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800223a:	2b00      	cmp	r3, #0
 800223c:	d118      	bne.n	8002270 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800223e:	4b80      	ldr	r3, [pc, #512]	@ (8002440 <HAL_RCC_OscConfig+0x4d4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a7f      	ldr	r2, [pc, #508]	@ (8002440 <HAL_RCC_OscConfig+0x4d4>)
 8002244:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002248:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800224a:	f7fe ff05 	bl	8001058 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002252:	f7fe ff01 	bl	8001058 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b64      	cmp	r3, #100	@ 0x64
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e12a      	b.n	80024ba <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002264:	4b76      	ldr	r3, [pc, #472]	@ (8002440 <HAL_RCC_OscConfig+0x4d4>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0f0      	beq.n	8002252 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d106      	bne.n	8002286 <HAL_RCC_OscConfig+0x31a>
 8002278:	4b70      	ldr	r3, [pc, #448]	@ (800243c <HAL_RCC_OscConfig+0x4d0>)
 800227a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800227c:	4a6f      	ldr	r2, [pc, #444]	@ (800243c <HAL_RCC_OscConfig+0x4d0>)
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	6713      	str	r3, [r2, #112]	@ 0x70
 8002284:	e02d      	b.n	80022e2 <HAL_RCC_OscConfig+0x376>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10c      	bne.n	80022a8 <HAL_RCC_OscConfig+0x33c>
 800228e:	4b6b      	ldr	r3, [pc, #428]	@ (800243c <HAL_RCC_OscConfig+0x4d0>)
 8002290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002292:	4a6a      	ldr	r2, [pc, #424]	@ (800243c <HAL_RCC_OscConfig+0x4d0>)
 8002294:	f023 0301 	bic.w	r3, r3, #1
 8002298:	6713      	str	r3, [r2, #112]	@ 0x70
 800229a:	4b68      	ldr	r3, [pc, #416]	@ (800243c <HAL_RCC_OscConfig+0x4d0>)
 800229c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800229e:	4a67      	ldr	r2, [pc, #412]	@ (800243c <HAL_RCC_OscConfig+0x4d0>)
 80022a0:	f023 0304 	bic.w	r3, r3, #4
 80022a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80022a6:	e01c      	b.n	80022e2 <HAL_RCC_OscConfig+0x376>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2b05      	cmp	r3, #5
 80022ae:	d10c      	bne.n	80022ca <HAL_RCC_OscConfig+0x35e>
 80022b0:	4b62      	ldr	r3, [pc, #392]	@ (800243c <HAL_RCC_OscConfig+0x4d0>)
 80022b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022b4:	4a61      	ldr	r2, [pc, #388]	@ (800243c <HAL_RCC_OscConfig+0x4d0>)
 80022b6:	f043 0304 	orr.w	r3, r3, #4
 80022ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80022bc:	4b5f      	ldr	r3, [pc, #380]	@ (800243c <HAL_RCC_OscConfig+0x4d0>)
 80022be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022c0:	4a5e      	ldr	r2, [pc, #376]	@ (800243c <HAL_RCC_OscConfig+0x4d0>)
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80022c8:	e00b      	b.n	80022e2 <HAL_RCC_OscConfig+0x376>
 80022ca:	4b5c      	ldr	r3, [pc, #368]	@ (800243c <HAL_RCC_OscConfig+0x4d0>)
 80022cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ce:	4a5b      	ldr	r2, [pc, #364]	@ (800243c <HAL_RCC_OscConfig+0x4d0>)
 80022d0:	f023 0301 	bic.w	r3, r3, #1
 80022d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80022d6:	4b59      	ldr	r3, [pc, #356]	@ (800243c <HAL_RCC_OscConfig+0x4d0>)
 80022d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022da:	4a58      	ldr	r2, [pc, #352]	@ (800243c <HAL_RCC_OscConfig+0x4d0>)
 80022dc:	f023 0304 	bic.w	r3, r3, #4
 80022e0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d015      	beq.n	8002316 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ea:	f7fe feb5 	bl	8001058 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f0:	e00a      	b.n	8002308 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f2:	f7fe feb1 	bl	8001058 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002300:	4293      	cmp	r3, r2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e0d8      	b.n	80024ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002308:	4b4c      	ldr	r3, [pc, #304]	@ (800243c <HAL_RCC_OscConfig+0x4d0>)
 800230a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0ee      	beq.n	80022f2 <HAL_RCC_OscConfig+0x386>
 8002314:	e014      	b.n	8002340 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002316:	f7fe fe9f 	bl	8001058 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800231c:	e00a      	b.n	8002334 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800231e:	f7fe fe9b 	bl	8001058 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	f241 3288 	movw	r2, #5000	@ 0x1388
 800232c:	4293      	cmp	r3, r2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e0c2      	b.n	80024ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002334:	4b41      	ldr	r3, [pc, #260]	@ (800243c <HAL_RCC_OscConfig+0x4d0>)
 8002336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1ee      	bne.n	800231e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002340:	7dfb      	ldrb	r3, [r7, #23]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d105      	bne.n	8002352 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002346:	4b3d      	ldr	r3, [pc, #244]	@ (800243c <HAL_RCC_OscConfig+0x4d0>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234a:	4a3c      	ldr	r2, [pc, #240]	@ (800243c <HAL_RCC_OscConfig+0x4d0>)
 800234c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002350:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 80ae 	beq.w	80024b8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800235c:	4b37      	ldr	r3, [pc, #220]	@ (800243c <HAL_RCC_OscConfig+0x4d0>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 030c 	and.w	r3, r3, #12
 8002364:	2b08      	cmp	r3, #8
 8002366:	d06d      	beq.n	8002444 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	2b02      	cmp	r3, #2
 800236e:	d14b      	bne.n	8002408 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002370:	4b32      	ldr	r3, [pc, #200]	@ (800243c <HAL_RCC_OscConfig+0x4d0>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a31      	ldr	r2, [pc, #196]	@ (800243c <HAL_RCC_OscConfig+0x4d0>)
 8002376:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800237a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f7fe fe6c 	bl	8001058 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002384:	f7fe fe68 	bl	8001058 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e091      	b.n	80024ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002396:	4b29      	ldr	r3, [pc, #164]	@ (800243c <HAL_RCC_OscConfig+0x4d0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69da      	ldr	r2, [r3, #28]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b0:	019b      	lsls	r3, r3, #6
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b8:	085b      	lsrs	r3, r3, #1
 80023ba:	3b01      	subs	r3, #1
 80023bc:	041b      	lsls	r3, r3, #16
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c4:	061b      	lsls	r3, r3, #24
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023cc:	071b      	lsls	r3, r3, #28
 80023ce:	491b      	ldr	r1, [pc, #108]	@ (800243c <HAL_RCC_OscConfig+0x4d0>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023d4:	4b19      	ldr	r3, [pc, #100]	@ (800243c <HAL_RCC_OscConfig+0x4d0>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a18      	ldr	r2, [pc, #96]	@ (800243c <HAL_RCC_OscConfig+0x4d0>)
 80023da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e0:	f7fe fe3a 	bl	8001058 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e8:	f7fe fe36 	bl	8001058 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e05f      	b.n	80024ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023fa:	4b10      	ldr	r3, [pc, #64]	@ (800243c <HAL_RCC_OscConfig+0x4d0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f0      	beq.n	80023e8 <HAL_RCC_OscConfig+0x47c>
 8002406:	e057      	b.n	80024b8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002408:	4b0c      	ldr	r3, [pc, #48]	@ (800243c <HAL_RCC_OscConfig+0x4d0>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a0b      	ldr	r2, [pc, #44]	@ (800243c <HAL_RCC_OscConfig+0x4d0>)
 800240e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002414:	f7fe fe20 	bl	8001058 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241c:	f7fe fe1c 	bl	8001058 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e045      	b.n	80024ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800242e:	4b03      	ldr	r3, [pc, #12]	@ (800243c <HAL_RCC_OscConfig+0x4d0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f0      	bne.n	800241c <HAL_RCC_OscConfig+0x4b0>
 800243a:	e03d      	b.n	80024b8 <HAL_RCC_OscConfig+0x54c>
 800243c:	40023800 	.word	0x40023800
 8002440:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002444:	4b1f      	ldr	r3, [pc, #124]	@ (80024c4 <HAL_RCC_OscConfig+0x558>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d030      	beq.n	80024b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800245c:	429a      	cmp	r2, r3
 800245e:	d129      	bne.n	80024b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800246a:	429a      	cmp	r2, r3
 800246c:	d122      	bne.n	80024b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002474:	4013      	ands	r3, r2
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800247a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800247c:	4293      	cmp	r3, r2
 800247e:	d119      	bne.n	80024b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800248a:	085b      	lsrs	r3, r3, #1
 800248c:	3b01      	subs	r3, #1
 800248e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002490:	429a      	cmp	r2, r3
 8002492:	d10f      	bne.n	80024b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800249e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d107      	bne.n	80024b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ae:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d001      	beq.n	80024b8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e000      	b.n	80024ba <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40023800 	.word	0x40023800

080024c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e0d0      	b.n	8002682 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024e0:	4b6a      	ldr	r3, [pc, #424]	@ (800268c <HAL_RCC_ClockConfig+0x1c4>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 030f 	and.w	r3, r3, #15
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d910      	bls.n	8002510 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ee:	4b67      	ldr	r3, [pc, #412]	@ (800268c <HAL_RCC_ClockConfig+0x1c4>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 020f 	bic.w	r2, r3, #15
 80024f6:	4965      	ldr	r1, [pc, #404]	@ (800268c <HAL_RCC_ClockConfig+0x1c4>)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fe:	4b63      	ldr	r3, [pc, #396]	@ (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d001      	beq.n	8002510 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e0b8      	b.n	8002682 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d020      	beq.n	800255e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002528:	4b59      	ldr	r3, [pc, #356]	@ (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	4a58      	ldr	r2, [pc, #352]	@ (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 800252e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002532:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0308 	and.w	r3, r3, #8
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002540:	4b53      	ldr	r3, [pc, #332]	@ (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	4a52      	ldr	r2, [pc, #328]	@ (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 8002546:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800254a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800254c:	4b50      	ldr	r3, [pc, #320]	@ (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	494d      	ldr	r1, [pc, #308]	@ (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 800255a:	4313      	orrs	r3, r2
 800255c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d040      	beq.n	80025ec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d107      	bne.n	8002582 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002572:	4b47      	ldr	r3, [pc, #284]	@ (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d115      	bne.n	80025aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e07f      	b.n	8002682 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b02      	cmp	r3, #2
 8002588:	d107      	bne.n	800259a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800258a:	4b41      	ldr	r3, [pc, #260]	@ (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d109      	bne.n	80025aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e073      	b.n	8002682 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259a:	4b3d      	ldr	r3, [pc, #244]	@ (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e06b      	b.n	8002682 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025aa:	4b39      	ldr	r3, [pc, #228]	@ (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f023 0203 	bic.w	r2, r3, #3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	4936      	ldr	r1, [pc, #216]	@ (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025bc:	f7fe fd4c 	bl	8001058 <HAL_GetTick>
 80025c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c2:	e00a      	b.n	80025da <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c4:	f7fe fd48 	bl	8001058 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e053      	b.n	8002682 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025da:	4b2d      	ldr	r3, [pc, #180]	@ (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 020c 	and.w	r2, r3, #12
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d1eb      	bne.n	80025c4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025ec:	4b27      	ldr	r3, [pc, #156]	@ (800268c <HAL_RCC_ClockConfig+0x1c4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 030f 	and.w	r3, r3, #15
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d210      	bcs.n	800261c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fa:	4b24      	ldr	r3, [pc, #144]	@ (800268c <HAL_RCC_ClockConfig+0x1c4>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 020f 	bic.w	r2, r3, #15
 8002602:	4922      	ldr	r1, [pc, #136]	@ (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	4313      	orrs	r3, r2
 8002608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800260a:	4b20      	ldr	r3, [pc, #128]	@ (800268c <HAL_RCC_ClockConfig+0x1c4>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	429a      	cmp	r2, r3
 8002616:	d001      	beq.n	800261c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e032      	b.n	8002682 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d008      	beq.n	800263a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002628:	4b19      	ldr	r3, [pc, #100]	@ (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	4916      	ldr	r1, [pc, #88]	@ (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 8002636:	4313      	orrs	r3, r2
 8002638:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b00      	cmp	r3, #0
 8002644:	d009      	beq.n	800265a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002646:	4b12      	ldr	r3, [pc, #72]	@ (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	490e      	ldr	r1, [pc, #56]	@ (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 8002656:	4313      	orrs	r3, r2
 8002658:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800265a:	f000 f821 	bl	80026a0 <HAL_RCC_GetSysClockFreq>
 800265e:	4602      	mov	r2, r0
 8002660:	4b0b      	ldr	r3, [pc, #44]	@ (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	091b      	lsrs	r3, r3, #4
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	490a      	ldr	r1, [pc, #40]	@ (8002694 <HAL_RCC_ClockConfig+0x1cc>)
 800266c:	5ccb      	ldrb	r3, [r1, r3]
 800266e:	fa22 f303 	lsr.w	r3, r2, r3
 8002672:	4a09      	ldr	r2, [pc, #36]	@ (8002698 <HAL_RCC_ClockConfig+0x1d0>)
 8002674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002676:	4b09      	ldr	r3, [pc, #36]	@ (800269c <HAL_RCC_ClockConfig+0x1d4>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe fca8 	bl	8000fd0 <HAL_InitTick>

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40023c00 	.word	0x40023c00
 8002690:	40023800 	.word	0x40023800
 8002694:	08005c2c 	.word	0x08005c2c
 8002698:	20000004 	.word	0x20000004
 800269c:	20000008 	.word	0x20000008

080026a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026a4:	b090      	sub	sp, #64	@ 0x40
 80026a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80026a8:	2300      	movs	r3, #0
 80026aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80026ac:	2300      	movs	r3, #0
 80026ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026b0:	2300      	movs	r3, #0
 80026b2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026b8:	4b59      	ldr	r3, [pc, #356]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x180>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 030c 	and.w	r3, r3, #12
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d00d      	beq.n	80026e0 <HAL_RCC_GetSysClockFreq+0x40>
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	f200 80a1 	bhi.w	800280c <HAL_RCC_GetSysClockFreq+0x16c>
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d002      	beq.n	80026d4 <HAL_RCC_GetSysClockFreq+0x34>
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d003      	beq.n	80026da <HAL_RCC_GetSysClockFreq+0x3a>
 80026d2:	e09b      	b.n	800280c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026d4:	4b53      	ldr	r3, [pc, #332]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x184>)
 80026d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80026d8:	e09b      	b.n	8002812 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026da:	4b53      	ldr	r3, [pc, #332]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x188>)
 80026dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80026de:	e098      	b.n	8002812 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026e0:	4b4f      	ldr	r3, [pc, #316]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x180>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026e8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80026ea:	4b4d      	ldr	r3, [pc, #308]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x180>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d028      	beq.n	8002748 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026f6:	4b4a      	ldr	r3, [pc, #296]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x180>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	099b      	lsrs	r3, r3, #6
 80026fc:	2200      	movs	r2, #0
 80026fe:	623b      	str	r3, [r7, #32]
 8002700:	627a      	str	r2, [r7, #36]	@ 0x24
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002708:	2100      	movs	r1, #0
 800270a:	4b47      	ldr	r3, [pc, #284]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x188>)
 800270c:	fb03 f201 	mul.w	r2, r3, r1
 8002710:	2300      	movs	r3, #0
 8002712:	fb00 f303 	mul.w	r3, r0, r3
 8002716:	4413      	add	r3, r2
 8002718:	4a43      	ldr	r2, [pc, #268]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x188>)
 800271a:	fba0 1202 	umull	r1, r2, r0, r2
 800271e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002720:	460a      	mov	r2, r1
 8002722:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002724:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002726:	4413      	add	r3, r2
 8002728:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800272a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800272c:	2200      	movs	r2, #0
 800272e:	61bb      	str	r3, [r7, #24]
 8002730:	61fa      	str	r2, [r7, #28]
 8002732:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002736:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800273a:	f7fd fd7d 	bl	8000238 <__aeabi_uldivmod>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	4613      	mov	r3, r2
 8002744:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002746:	e053      	b.n	80027f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002748:	4b35      	ldr	r3, [pc, #212]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x180>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	099b      	lsrs	r3, r3, #6
 800274e:	2200      	movs	r2, #0
 8002750:	613b      	str	r3, [r7, #16]
 8002752:	617a      	str	r2, [r7, #20]
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800275a:	f04f 0b00 	mov.w	fp, #0
 800275e:	4652      	mov	r2, sl
 8002760:	465b      	mov	r3, fp
 8002762:	f04f 0000 	mov.w	r0, #0
 8002766:	f04f 0100 	mov.w	r1, #0
 800276a:	0159      	lsls	r1, r3, #5
 800276c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002770:	0150      	lsls	r0, r2, #5
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	ebb2 080a 	subs.w	r8, r2, sl
 800277a:	eb63 090b 	sbc.w	r9, r3, fp
 800277e:	f04f 0200 	mov.w	r2, #0
 8002782:	f04f 0300 	mov.w	r3, #0
 8002786:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800278a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800278e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002792:	ebb2 0408 	subs.w	r4, r2, r8
 8002796:	eb63 0509 	sbc.w	r5, r3, r9
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	f04f 0300 	mov.w	r3, #0
 80027a2:	00eb      	lsls	r3, r5, #3
 80027a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027a8:	00e2      	lsls	r2, r4, #3
 80027aa:	4614      	mov	r4, r2
 80027ac:	461d      	mov	r5, r3
 80027ae:	eb14 030a 	adds.w	r3, r4, sl
 80027b2:	603b      	str	r3, [r7, #0]
 80027b4:	eb45 030b 	adc.w	r3, r5, fp
 80027b8:	607b      	str	r3, [r7, #4]
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	f04f 0300 	mov.w	r3, #0
 80027c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027c6:	4629      	mov	r1, r5
 80027c8:	028b      	lsls	r3, r1, #10
 80027ca:	4621      	mov	r1, r4
 80027cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027d0:	4621      	mov	r1, r4
 80027d2:	028a      	lsls	r2, r1, #10
 80027d4:	4610      	mov	r0, r2
 80027d6:	4619      	mov	r1, r3
 80027d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027da:	2200      	movs	r2, #0
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	60fa      	str	r2, [r7, #12]
 80027e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027e4:	f7fd fd28 	bl	8000238 <__aeabi_uldivmod>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	4613      	mov	r3, r2
 80027ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80027f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x180>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	0c1b      	lsrs	r3, r3, #16
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	3301      	adds	r3, #1
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002800:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002804:	fbb2 f3f3 	udiv	r3, r2, r3
 8002808:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800280a:	e002      	b.n	8002812 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800280c:	4b05      	ldr	r3, [pc, #20]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x184>)
 800280e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002810:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002814:	4618      	mov	r0, r3
 8002816:	3740      	adds	r7, #64	@ 0x40
 8002818:	46bd      	mov	sp, r7
 800281a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800281e:	bf00      	nop
 8002820:	40023800 	.word	0x40023800
 8002824:	00f42400 	.word	0x00f42400
 8002828:	017d7840 	.word	0x017d7840

0800282c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002830:	4b03      	ldr	r3, [pc, #12]	@ (8002840 <HAL_RCC_GetHCLKFreq+0x14>)
 8002832:	681b      	ldr	r3, [r3, #0]
}
 8002834:	4618      	mov	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	20000004 	.word	0x20000004

08002844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002848:	f7ff fff0 	bl	800282c <HAL_RCC_GetHCLKFreq>
 800284c:	4602      	mov	r2, r0
 800284e:	4b05      	ldr	r3, [pc, #20]	@ (8002864 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	0a9b      	lsrs	r3, r3, #10
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	4903      	ldr	r1, [pc, #12]	@ (8002868 <HAL_RCC_GetPCLK1Freq+0x24>)
 800285a:	5ccb      	ldrb	r3, [r1, r3]
 800285c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002860:	4618      	mov	r0, r3
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40023800 	.word	0x40023800
 8002868:	08005c3c 	.word	0x08005c3c

0800286c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002870:	f7ff ffdc 	bl	800282c <HAL_RCC_GetHCLKFreq>
 8002874:	4602      	mov	r2, r0
 8002876:	4b05      	ldr	r3, [pc, #20]	@ (800288c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	0b5b      	lsrs	r3, r3, #13
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	4903      	ldr	r1, [pc, #12]	@ (8002890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002882:	5ccb      	ldrb	r3, [r1, r3]
 8002884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002888:	4618      	mov	r0, r3
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40023800 	.word	0x40023800
 8002890:	08005c3c 	.word	0x08005c3c

08002894 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80028a4:	2300      	movs	r3, #0
 80028a6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80028a8:	2300      	movs	r3, #0
 80028aa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80028ac:	2300      	movs	r3, #0
 80028ae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d012      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028bc:	4b69      	ldr	r3, [pc, #420]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	4a68      	ldr	r2, [pc, #416]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80028c6:	6093      	str	r3, [r2, #8]
 80028c8:	4b66      	ldr	r3, [pc, #408]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028d0:	4964      	ldr	r1, [pc, #400]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80028de:	2301      	movs	r3, #1
 80028e0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d017      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028ee:	4b5d      	ldr	r3, [pc, #372]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028f4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028fc:	4959      	ldr	r1, [pc, #356]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002908:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800290c:	d101      	bne.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800290e:	2301      	movs	r3, #1
 8002910:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800291a:	2301      	movs	r3, #1
 800291c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d017      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800292a:	4b4e      	ldr	r3, [pc, #312]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800292c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002930:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002938:	494a      	ldr	r1, [pc, #296]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002944:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002948:	d101      	bne.n	800294e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800294a:	2301      	movs	r3, #1
 800294c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002956:	2301      	movs	r3, #1
 8002958:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002966:	2301      	movs	r3, #1
 8002968:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0320 	and.w	r3, r3, #32
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 808b 	beq.w	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002978:	4b3a      	ldr	r3, [pc, #232]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800297a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297c:	4a39      	ldr	r2, [pc, #228]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800297e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002982:	6413      	str	r3, [r2, #64]	@ 0x40
 8002984:	4b37      	ldr	r3, [pc, #220]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002988:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002990:	4b35      	ldr	r3, [pc, #212]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a34      	ldr	r2, [pc, #208]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002996:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800299a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800299c:	f7fe fb5c 	bl	8001058 <HAL_GetTick>
 80029a0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a4:	f7fe fb58 	bl	8001058 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b64      	cmp	r3, #100	@ 0x64
 80029b0:	d901      	bls.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e38f      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029b6:	4b2c      	ldr	r3, [pc, #176]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029c2:	4b28      	ldr	r3, [pc, #160]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029ca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d035      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d02e      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029e0:	4b20      	ldr	r3, [pc, #128]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029e8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ee:	4a1d      	ldr	r2, [pc, #116]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029f4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029fa:	4a1a      	ldr	r2, [pc, #104]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a00:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002a02:	4a18      	ldr	r2, [pc, #96]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a08:	4b16      	ldr	r3, [pc, #88]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d114      	bne.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a14:	f7fe fb20 	bl	8001058 <HAL_GetTick>
 8002a18:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1a:	e00a      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a1c:	f7fe fb1c 	bl	8001058 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e351      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a32:	4b0c      	ldr	r3, [pc, #48]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0ee      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a4a:	d111      	bne.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002a4c:	4b05      	ldr	r3, [pc, #20]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a58:	4b04      	ldr	r3, [pc, #16]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a5a:	400b      	ands	r3, r1
 8002a5c:	4901      	ldr	r1, [pc, #4]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	608b      	str	r3, [r1, #8]
 8002a62:	e00b      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002a64:	40023800 	.word	0x40023800
 8002a68:	40007000 	.word	0x40007000
 8002a6c:	0ffffcff 	.word	0x0ffffcff
 8002a70:	4bac      	ldr	r3, [pc, #688]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	4aab      	ldr	r2, [pc, #684]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a76:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002a7a:	6093      	str	r3, [r2, #8]
 8002a7c:	4ba9      	ldr	r3, [pc, #676]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a7e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a88:	49a6      	ldr	r1, [pc, #664]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0310 	and.w	r3, r3, #16
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d010      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a9a:	4ba2      	ldr	r3, [pc, #648]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002aa0:	4aa0      	ldr	r2, [pc, #640]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aa2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002aa6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002aaa:	4b9e      	ldr	r3, [pc, #632]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aac:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab4:	499b      	ldr	r1, [pc, #620]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00a      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ac8:	4b96      	ldr	r3, [pc, #600]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ace:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ad6:	4993      	ldr	r1, [pc, #588]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00a      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002aea:	4b8e      	ldr	r3, [pc, #568]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002af0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002af8:	498a      	ldr	r1, [pc, #552]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00a      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b0c:	4b85      	ldr	r3, [pc, #532]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b12:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b1a:	4982      	ldr	r1, [pc, #520]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00a      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b2e:	4b7d      	ldr	r3, [pc, #500]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b34:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b3c:	4979      	ldr	r1, [pc, #484]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00a      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b50:	4b74      	ldr	r3, [pc, #464]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b56:	f023 0203 	bic.w	r2, r3, #3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5e:	4971      	ldr	r1, [pc, #452]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00a      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b72:	4b6c      	ldr	r3, [pc, #432]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b78:	f023 020c 	bic.w	r2, r3, #12
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b80:	4968      	ldr	r1, [pc, #416]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00a      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b94:	4b63      	ldr	r3, [pc, #396]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b9a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ba2:	4960      	ldr	r1, [pc, #384]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00a      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bb6:	4b5b      	ldr	r3, [pc, #364]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bbc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bc4:	4957      	ldr	r1, [pc, #348]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00a      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bd8:	4b52      	ldr	r3, [pc, #328]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bde:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be6:	494f      	ldr	r1, [pc, #316]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00a      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002bfa:	4b4a      	ldr	r3, [pc, #296]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c00:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c08:	4946      	ldr	r1, [pc, #280]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00a      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002c1c:	4b41      	ldr	r3, [pc, #260]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c22:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c2a:	493e      	ldr	r1, [pc, #248]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00a      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002c3e:	4b39      	ldr	r3, [pc, #228]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c44:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c4c:	4935      	ldr	r1, [pc, #212]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00a      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c60:	4b30      	ldr	r3, [pc, #192]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c66:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c6e:	492d      	ldr	r1, [pc, #180]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d011      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c82:	4b28      	ldr	r3, [pc, #160]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c88:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c90:	4924      	ldr	r1, [pc, #144]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ca0:	d101      	bne.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00a      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cc2:	4b18      	ldr	r3, [pc, #96]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cc8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cd0:	4914      	ldr	r1, [pc, #80]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00b      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cea:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cf4:	490b      	ldr	r1, [pc, #44]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00f      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002d08:	4b06      	ldr	r3, [pc, #24]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d0e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d18:	4902      	ldr	r1, [pc, #8]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d20:	e002      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002d22:	bf00      	nop
 8002d24:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00b      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d34:	4b8a      	ldr	r3, [pc, #552]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d3a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d44:	4986      	ldr	r1, [pc, #536]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00b      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002d58:	4b81      	ldr	r3, [pc, #516]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d5e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d68:	497d      	ldr	r1, [pc, #500]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d006      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 80d6 	beq.w	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d84:	4b76      	ldr	r3, [pc, #472]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a75      	ldr	r2, [pc, #468]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002d8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d90:	f7fe f962 	bl	8001058 <HAL_GetTick>
 8002d94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d98:	f7fe f95e 	bl	8001058 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b64      	cmp	r3, #100	@ 0x64
 8002da4:	d901      	bls.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e195      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002daa:	4b6d      	ldr	r3, [pc, #436]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1f0      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d021      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d11d      	bne.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002dca:	4b65      	ldr	r3, [pc, #404]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dd0:	0c1b      	lsrs	r3, r3, #16
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002dd8:	4b61      	ldr	r3, [pc, #388]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dde:	0e1b      	lsrs	r3, r3, #24
 8002de0:	f003 030f 	and.w	r3, r3, #15
 8002de4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	019a      	lsls	r2, r3, #6
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	041b      	lsls	r3, r3, #16
 8002df0:	431a      	orrs	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	061b      	lsls	r3, r3, #24
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	071b      	lsls	r3, r3, #28
 8002dfe:	4958      	ldr	r1, [pc, #352]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d004      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e1a:	d00a      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d02e      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e30:	d129      	bne.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e32:	4b4b      	ldr	r3, [pc, #300]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e38:	0c1b      	lsrs	r3, r3, #16
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e40:	4b47      	ldr	r3, [pc, #284]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e46:	0f1b      	lsrs	r3, r3, #28
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	019a      	lsls	r2, r3, #6
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	041b      	lsls	r3, r3, #16
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	061b      	lsls	r3, r3, #24
 8002e60:	431a      	orrs	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	071b      	lsls	r3, r3, #28
 8002e66:	493e      	ldr	r1, [pc, #248]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002e6e:	4b3c      	ldr	r3, [pc, #240]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e74:	f023 021f 	bic.w	r2, r3, #31
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	4938      	ldr	r1, [pc, #224]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d01d      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e92:	4b33      	ldr	r3, [pc, #204]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e98:	0e1b      	lsrs	r3, r3, #24
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ea0:	4b2f      	ldr	r3, [pc, #188]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ea6:	0f1b      	lsrs	r3, r3, #28
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	019a      	lsls	r2, r3, #6
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	041b      	lsls	r3, r3, #16
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	061b      	lsls	r3, r3, #24
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	071b      	lsls	r3, r3, #28
 8002ec6:	4926      	ldr	r1, [pc, #152]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d011      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	019a      	lsls	r2, r3, #6
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	041b      	lsls	r3, r3, #16
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	061b      	lsls	r3, r3, #24
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	071b      	lsls	r3, r3, #28
 8002ef6:	491a      	ldr	r1, [pc, #104]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002efe:	4b18      	ldr	r3, [pc, #96]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a17      	ldr	r2, [pc, #92]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f04:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f0a:	f7fe f8a5 	bl	8001058 <HAL_GetTick>
 8002f0e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f10:	e008      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f12:	f7fe f8a1 	bl	8001058 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b64      	cmp	r3, #100	@ 0x64
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e0d8      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f24:	4b0e      	ldr	r3, [pc, #56]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0f0      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	f040 80ce 	bne.w	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002f38:	4b09      	ldr	r3, [pc, #36]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a08      	ldr	r2, [pc, #32]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f44:	f7fe f888 	bl	8001058 <HAL_GetTick>
 8002f48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f4a:	e00b      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f4c:	f7fe f884 	bl	8001058 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b64      	cmp	r3, #100	@ 0x64
 8002f58:	d904      	bls.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e0bb      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002f5e:	bf00      	nop
 8002f60:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f64:	4b5e      	ldr	r3, [pc, #376]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f70:	d0ec      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d009      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d02e      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d12a      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f9a:	4b51      	ldr	r3, [pc, #324]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa0:	0c1b      	lsrs	r3, r3, #16
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002fa8:	4b4d      	ldr	r3, [pc, #308]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fae:	0f1b      	lsrs	r3, r3, #28
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	019a      	lsls	r2, r3, #6
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	041b      	lsls	r3, r3, #16
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	061b      	lsls	r3, r3, #24
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	071b      	lsls	r3, r3, #28
 8002fce:	4944      	ldr	r1, [pc, #272]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002fd6:	4b42      	ldr	r3, [pc, #264]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fdc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	021b      	lsls	r3, r3, #8
 8002fe8:	493d      	ldr	r1, [pc, #244]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d022      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003000:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003004:	d11d      	bne.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003006:	4b36      	ldr	r3, [pc, #216]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800300c:	0e1b      	lsrs	r3, r3, #24
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003014:	4b32      	ldr	r3, [pc, #200]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800301a:	0f1b      	lsrs	r3, r3, #28
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	019a      	lsls	r2, r3, #6
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	041b      	lsls	r3, r3, #16
 800302e:	431a      	orrs	r2, r3
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	061b      	lsls	r3, r3, #24
 8003034:	431a      	orrs	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	071b      	lsls	r3, r3, #28
 800303a:	4929      	ldr	r1, [pc, #164]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800303c:	4313      	orrs	r3, r2
 800303e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d028      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800304e:	4b24      	ldr	r3, [pc, #144]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003054:	0e1b      	lsrs	r3, r3, #24
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800305c:	4b20      	ldr	r3, [pc, #128]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800305e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003062:	0c1b      	lsrs	r3, r3, #16
 8003064:	f003 0303 	and.w	r3, r3, #3
 8003068:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	019a      	lsls	r2, r3, #6
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	041b      	lsls	r3, r3, #16
 8003074:	431a      	orrs	r2, r3
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	061b      	lsls	r3, r3, #24
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	071b      	lsls	r3, r3, #28
 8003082:	4917      	ldr	r1, [pc, #92]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800308a:	4b15      	ldr	r3, [pc, #84]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800308c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003090:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003098:	4911      	ldr	r1, [pc, #68]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800309a:	4313      	orrs	r3, r2
 800309c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80030a0:	4b0f      	ldr	r3, [pc, #60]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a0e      	ldr	r2, [pc, #56]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ac:	f7fd ffd4 	bl	8001058 <HAL_GetTick>
 80030b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80030b4:	f7fd ffd0 	bl	8001058 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b64      	cmp	r3, #100	@ 0x64
 80030c0:	d901      	bls.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e007      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030c6:	4b06      	ldr	r3, [pc, #24]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030d2:	d1ef      	bne.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3720      	adds	r7, #32
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40023800 	.word	0x40023800

080030e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e049      	b.n	800318a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d106      	bne.n	8003110 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7fd fd8e 	bl	8000c2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3304      	adds	r3, #4
 8003120:	4619      	mov	r1, r3
 8003122:	4610      	mov	r0, r2
 8003124:	f000 fe46 	bl	8003db4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
	...

08003194 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d001      	beq.n	80031ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e04c      	b.n	8003246 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a26      	ldr	r2, [pc, #152]	@ (8003254 <HAL_TIM_Base_Start+0xc0>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d022      	beq.n	8003204 <HAL_TIM_Base_Start+0x70>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031c6:	d01d      	beq.n	8003204 <HAL_TIM_Base_Start+0x70>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a22      	ldr	r2, [pc, #136]	@ (8003258 <HAL_TIM_Base_Start+0xc4>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d018      	beq.n	8003204 <HAL_TIM_Base_Start+0x70>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a21      	ldr	r2, [pc, #132]	@ (800325c <HAL_TIM_Base_Start+0xc8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d013      	beq.n	8003204 <HAL_TIM_Base_Start+0x70>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a1f      	ldr	r2, [pc, #124]	@ (8003260 <HAL_TIM_Base_Start+0xcc>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00e      	beq.n	8003204 <HAL_TIM_Base_Start+0x70>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a1e      	ldr	r2, [pc, #120]	@ (8003264 <HAL_TIM_Base_Start+0xd0>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d009      	beq.n	8003204 <HAL_TIM_Base_Start+0x70>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a1c      	ldr	r2, [pc, #112]	@ (8003268 <HAL_TIM_Base_Start+0xd4>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d004      	beq.n	8003204 <HAL_TIM_Base_Start+0x70>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a1b      	ldr	r2, [pc, #108]	@ (800326c <HAL_TIM_Base_Start+0xd8>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d115      	bne.n	8003230 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	4b19      	ldr	r3, [pc, #100]	@ (8003270 <HAL_TIM_Base_Start+0xdc>)
 800320c:	4013      	ands	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2b06      	cmp	r3, #6
 8003214:	d015      	beq.n	8003242 <HAL_TIM_Base_Start+0xae>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800321c:	d011      	beq.n	8003242 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f042 0201 	orr.w	r2, r2, #1
 800322c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800322e:	e008      	b.n	8003242 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0201 	orr.w	r2, r2, #1
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	e000      	b.n	8003244 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003242:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	40010000 	.word	0x40010000
 8003258:	40000400 	.word	0x40000400
 800325c:	40000800 	.word	0x40000800
 8003260:	40000c00 	.word	0x40000c00
 8003264:	40010400 	.word	0x40010400
 8003268:	40014000 	.word	0x40014000
 800326c:	40001800 	.word	0x40001800
 8003270:	00010007 	.word	0x00010007

08003274 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e049      	b.n	800331a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d106      	bne.n	80032a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7fd fd12 	bl	8000cc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3304      	adds	r3, #4
 80032b0:	4619      	mov	r1, r3
 80032b2:	4610      	mov	r0, r2
 80032b4:	f000 fd7e 	bl	8003db4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
	...

08003324 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d109      	bne.n	8003348 <HAL_TIM_PWM_Start+0x24>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b01      	cmp	r3, #1
 800333e:	bf14      	ite	ne
 8003340:	2301      	movne	r3, #1
 8003342:	2300      	moveq	r3, #0
 8003344:	b2db      	uxtb	r3, r3
 8003346:	e03c      	b.n	80033c2 <HAL_TIM_PWM_Start+0x9e>
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	2b04      	cmp	r3, #4
 800334c:	d109      	bne.n	8003362 <HAL_TIM_PWM_Start+0x3e>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b01      	cmp	r3, #1
 8003358:	bf14      	ite	ne
 800335a:	2301      	movne	r3, #1
 800335c:	2300      	moveq	r3, #0
 800335e:	b2db      	uxtb	r3, r3
 8003360:	e02f      	b.n	80033c2 <HAL_TIM_PWM_Start+0x9e>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2b08      	cmp	r3, #8
 8003366:	d109      	bne.n	800337c <HAL_TIM_PWM_Start+0x58>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b01      	cmp	r3, #1
 8003372:	bf14      	ite	ne
 8003374:	2301      	movne	r3, #1
 8003376:	2300      	moveq	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	e022      	b.n	80033c2 <HAL_TIM_PWM_Start+0x9e>
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	2b0c      	cmp	r3, #12
 8003380:	d109      	bne.n	8003396 <HAL_TIM_PWM_Start+0x72>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b01      	cmp	r3, #1
 800338c:	bf14      	ite	ne
 800338e:	2301      	movne	r3, #1
 8003390:	2300      	moveq	r3, #0
 8003392:	b2db      	uxtb	r3, r3
 8003394:	e015      	b.n	80033c2 <HAL_TIM_PWM_Start+0x9e>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	2b10      	cmp	r3, #16
 800339a:	d109      	bne.n	80033b0 <HAL_TIM_PWM_Start+0x8c>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	bf14      	ite	ne
 80033a8:	2301      	movne	r3, #1
 80033aa:	2300      	moveq	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	e008      	b.n	80033c2 <HAL_TIM_PWM_Start+0x9e>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	bf14      	ite	ne
 80033bc:	2301      	movne	r3, #1
 80033be:	2300      	moveq	r3, #0
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e092      	b.n	80034f0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d104      	bne.n	80033da <HAL_TIM_PWM_Start+0xb6>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2202      	movs	r2, #2
 80033d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033d8:	e023      	b.n	8003422 <HAL_TIM_PWM_Start+0xfe>
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d104      	bne.n	80033ea <HAL_TIM_PWM_Start+0xc6>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033e8:	e01b      	b.n	8003422 <HAL_TIM_PWM_Start+0xfe>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d104      	bne.n	80033fa <HAL_TIM_PWM_Start+0xd6>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2202      	movs	r2, #2
 80033f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033f8:	e013      	b.n	8003422 <HAL_TIM_PWM_Start+0xfe>
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2b0c      	cmp	r3, #12
 80033fe:	d104      	bne.n	800340a <HAL_TIM_PWM_Start+0xe6>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2202      	movs	r2, #2
 8003404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003408:	e00b      	b.n	8003422 <HAL_TIM_PWM_Start+0xfe>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2b10      	cmp	r3, #16
 800340e:	d104      	bne.n	800341a <HAL_TIM_PWM_Start+0xf6>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003418:	e003      	b.n	8003422 <HAL_TIM_PWM_Start+0xfe>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2202      	movs	r2, #2
 800341e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2201      	movs	r2, #1
 8003428:	6839      	ldr	r1, [r7, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f001 f990 	bl	8004750 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a30      	ldr	r2, [pc, #192]	@ (80034f8 <HAL_TIM_PWM_Start+0x1d4>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d004      	beq.n	8003444 <HAL_TIM_PWM_Start+0x120>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a2f      	ldr	r2, [pc, #188]	@ (80034fc <HAL_TIM_PWM_Start+0x1d8>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d101      	bne.n	8003448 <HAL_TIM_PWM_Start+0x124>
 8003444:	2301      	movs	r3, #1
 8003446:	e000      	b.n	800344a <HAL_TIM_PWM_Start+0x126>
 8003448:	2300      	movs	r3, #0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d007      	beq.n	800345e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800345c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a25      	ldr	r2, [pc, #148]	@ (80034f8 <HAL_TIM_PWM_Start+0x1d4>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d022      	beq.n	80034ae <HAL_TIM_PWM_Start+0x18a>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003470:	d01d      	beq.n	80034ae <HAL_TIM_PWM_Start+0x18a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a22      	ldr	r2, [pc, #136]	@ (8003500 <HAL_TIM_PWM_Start+0x1dc>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d018      	beq.n	80034ae <HAL_TIM_PWM_Start+0x18a>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a20      	ldr	r2, [pc, #128]	@ (8003504 <HAL_TIM_PWM_Start+0x1e0>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d013      	beq.n	80034ae <HAL_TIM_PWM_Start+0x18a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a1f      	ldr	r2, [pc, #124]	@ (8003508 <HAL_TIM_PWM_Start+0x1e4>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d00e      	beq.n	80034ae <HAL_TIM_PWM_Start+0x18a>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a19      	ldr	r2, [pc, #100]	@ (80034fc <HAL_TIM_PWM_Start+0x1d8>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d009      	beq.n	80034ae <HAL_TIM_PWM_Start+0x18a>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a1b      	ldr	r2, [pc, #108]	@ (800350c <HAL_TIM_PWM_Start+0x1e8>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d004      	beq.n	80034ae <HAL_TIM_PWM_Start+0x18a>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a19      	ldr	r2, [pc, #100]	@ (8003510 <HAL_TIM_PWM_Start+0x1ec>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d115      	bne.n	80034da <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	4b17      	ldr	r3, [pc, #92]	@ (8003514 <HAL_TIM_PWM_Start+0x1f0>)
 80034b6:	4013      	ands	r3, r2
 80034b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2b06      	cmp	r3, #6
 80034be:	d015      	beq.n	80034ec <HAL_TIM_PWM_Start+0x1c8>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034c6:	d011      	beq.n	80034ec <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0201 	orr.w	r2, r2, #1
 80034d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034d8:	e008      	b.n	80034ec <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f042 0201 	orr.w	r2, r2, #1
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	e000      	b.n	80034ee <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40010000 	.word	0x40010000
 80034fc:	40010400 	.word	0x40010400
 8003500:	40000400 	.word	0x40000400
 8003504:	40000800 	.word	0x40000800
 8003508:	40000c00 	.word	0x40000c00
 800350c:	40014000 	.word	0x40014000
 8003510:	40001800 	.word	0x40001800
 8003514:	00010007 	.word	0x00010007

08003518 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e049      	b.n	80035be <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d106      	bne.n	8003544 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f841 	bl	80035c6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3304      	adds	r3, #4
 8003554:	4619      	mov	r1, r3
 8003556:	4610      	mov	r0, r2
 8003558:	f000 fc2c 	bl	8003db4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80035ce:	bf00      	nop
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b084      	sub	sp, #16
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d020      	beq.n	800363e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d01b      	beq.n	800363e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f06f 0202 	mvn.w	r2, #2
 800360e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	f003 0303 	and.w	r3, r3, #3
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f7fd fa65 	bl	8000af4 <HAL_TIM_IC_CaptureCallback>
 800362a:	e005      	b.n	8003638 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 fba3 	bl	8003d78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 fbaa 	bl	8003d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	d020      	beq.n	800368a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f003 0304 	and.w	r3, r3, #4
 800364e:	2b00      	cmp	r3, #0
 8003650:	d01b      	beq.n	800368a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f06f 0204 	mvn.w	r2, #4
 800365a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7fd fa3f 	bl	8000af4 <HAL_TIM_IC_CaptureCallback>
 8003676:	e005      	b.n	8003684 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 fb7d 	bl	8003d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 fb84 	bl	8003d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b00      	cmp	r3, #0
 8003692:	d020      	beq.n	80036d6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	2b00      	cmp	r3, #0
 800369c:	d01b      	beq.n	80036d6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f06f 0208 	mvn.w	r2, #8
 80036a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2204      	movs	r2, #4
 80036ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	69db      	ldr	r3, [r3, #28]
 80036b4:	f003 0303 	and.w	r3, r3, #3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7fd fa19 	bl	8000af4 <HAL_TIM_IC_CaptureCallback>
 80036c2:	e005      	b.n	80036d0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 fb57 	bl	8003d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 fb5e 	bl	8003d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f003 0310 	and.w	r3, r3, #16
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d020      	beq.n	8003722 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f003 0310 	and.w	r3, r3, #16
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d01b      	beq.n	8003722 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f06f 0210 	mvn.w	r2, #16
 80036f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2208      	movs	r2, #8
 80036f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7fd f9f3 	bl	8000af4 <HAL_TIM_IC_CaptureCallback>
 800370e:	e005      	b.n	800371c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 fb31 	bl	8003d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 fb38 	bl	8003d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00c      	beq.n	8003746 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d007      	beq.n	8003746 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f06f 0201 	mvn.w	r2, #1
 800373e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 fb0f 	bl	8003d64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800374c:	2b00      	cmp	r3, #0
 800374e:	d104      	bne.n	800375a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00c      	beq.n	8003774 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003760:	2b00      	cmp	r3, #0
 8003762:	d007      	beq.n	8003774 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800376c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f001 f8ac 	bl	80048cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00c      	beq.n	8003798 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003784:	2b00      	cmp	r3, #0
 8003786:	d007      	beq.n	8003798 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f001 f8a4 	bl	80048e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00c      	beq.n	80037bc <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d007      	beq.n	80037bc <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80037b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 faf2 	bl	8003da0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f003 0320 	and.w	r3, r3, #32
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00c      	beq.n	80037e0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f003 0320 	and.w	r3, r3, #32
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d007      	beq.n	80037e0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f06f 0220 	mvn.w	r2, #32
 80037d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f001 f86c 	bl	80048b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037e0:	bf00      	nop
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037f4:	2300      	movs	r3, #0
 80037f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003802:	2302      	movs	r3, #2
 8003804:	e088      	b.n	8003918 <HAL_TIM_IC_ConfigChannel+0x130>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d11b      	bne.n	800384c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003824:	f000 fdd0 	bl	80043c8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	699a      	ldr	r2, [r3, #24]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 020c 	bic.w	r2, r2, #12
 8003836:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6999      	ldr	r1, [r3, #24]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	689a      	ldr	r2, [r3, #8]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	619a      	str	r2, [r3, #24]
 800384a:	e060      	b.n	800390e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b04      	cmp	r3, #4
 8003850:	d11c      	bne.n	800388c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003862:	f000 fe54 	bl	800450e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	699a      	ldr	r2, [r3, #24]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003874:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6999      	ldr	r1, [r3, #24]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	021a      	lsls	r2, r3, #8
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	619a      	str	r2, [r3, #24]
 800388a:	e040      	b.n	800390e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b08      	cmp	r3, #8
 8003890:	d11b      	bne.n	80038ca <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80038a2:	f000 fea1 	bl	80045e8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	69da      	ldr	r2, [r3, #28]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 020c 	bic.w	r2, r2, #12
 80038b4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	69d9      	ldr	r1, [r3, #28]
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	61da      	str	r2, [r3, #28]
 80038c8:	e021      	b.n	800390e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b0c      	cmp	r3, #12
 80038ce:	d11c      	bne.n	800390a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80038e0:	f000 febe 	bl	8004660 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	69da      	ldr	r2, [r3, #28]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80038f2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	69d9      	ldr	r1, [r3, #28]
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	021a      	lsls	r2, r3, #8
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	61da      	str	r2, [r3, #28]
 8003908:	e001      	b.n	800390e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003916:	7dfb      	ldrb	r3, [r7, #23]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3718      	adds	r7, #24
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800392c:	2300      	movs	r3, #0
 800392e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800393a:	2302      	movs	r3, #2
 800393c:	e0ff      	b.n	8003b3e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b14      	cmp	r3, #20
 800394a:	f200 80f0 	bhi.w	8003b2e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800394e:	a201      	add	r2, pc, #4	@ (adr r2, 8003954 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003954:	080039a9 	.word	0x080039a9
 8003958:	08003b2f 	.word	0x08003b2f
 800395c:	08003b2f 	.word	0x08003b2f
 8003960:	08003b2f 	.word	0x08003b2f
 8003964:	080039e9 	.word	0x080039e9
 8003968:	08003b2f 	.word	0x08003b2f
 800396c:	08003b2f 	.word	0x08003b2f
 8003970:	08003b2f 	.word	0x08003b2f
 8003974:	08003a2b 	.word	0x08003a2b
 8003978:	08003b2f 	.word	0x08003b2f
 800397c:	08003b2f 	.word	0x08003b2f
 8003980:	08003b2f 	.word	0x08003b2f
 8003984:	08003a6b 	.word	0x08003a6b
 8003988:	08003b2f 	.word	0x08003b2f
 800398c:	08003b2f 	.word	0x08003b2f
 8003990:	08003b2f 	.word	0x08003b2f
 8003994:	08003aad 	.word	0x08003aad
 8003998:	08003b2f 	.word	0x08003b2f
 800399c:	08003b2f 	.word	0x08003b2f
 80039a0:	08003b2f 	.word	0x08003b2f
 80039a4:	08003aed 	.word	0x08003aed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68b9      	ldr	r1, [r7, #8]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 faac 	bl	8003f0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	699a      	ldr	r2, [r3, #24]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0208 	orr.w	r2, r2, #8
 80039c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699a      	ldr	r2, [r3, #24]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0204 	bic.w	r2, r2, #4
 80039d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6999      	ldr	r1, [r3, #24]
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	691a      	ldr	r2, [r3, #16]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	619a      	str	r2, [r3, #24]
      break;
 80039e6:	e0a5      	b.n	8003b34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68b9      	ldr	r1, [r7, #8]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 fafe 	bl	8003ff0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	699a      	ldr	r2, [r3, #24]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	699a      	ldr	r2, [r3, #24]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6999      	ldr	r1, [r3, #24]
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	021a      	lsls	r2, r3, #8
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	619a      	str	r2, [r3, #24]
      break;
 8003a28:	e084      	b.n	8003b34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68b9      	ldr	r1, [r7, #8]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f000 fb55 	bl	80040e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	69da      	ldr	r2, [r3, #28]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f042 0208 	orr.w	r2, r2, #8
 8003a44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	69da      	ldr	r2, [r3, #28]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0204 	bic.w	r2, r2, #4
 8003a54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	69d9      	ldr	r1, [r3, #28]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	691a      	ldr	r2, [r3, #16]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	61da      	str	r2, [r3, #28]
      break;
 8003a68:	e064      	b.n	8003b34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68b9      	ldr	r1, [r7, #8]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 fbab 	bl	80041cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	69da      	ldr	r2, [r3, #28]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	69da      	ldr	r2, [r3, #28]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	69d9      	ldr	r1, [r3, #28]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	021a      	lsls	r2, r3, #8
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	61da      	str	r2, [r3, #28]
      break;
 8003aaa:	e043      	b.n	8003b34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68b9      	ldr	r1, [r7, #8]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 fbe2 	bl	800427c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0208 	orr.w	r2, r2, #8
 8003ac6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0204 	bic.w	r2, r2, #4
 8003ad6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	691a      	ldr	r2, [r3, #16]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003aea:	e023      	b.n	8003b34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68b9      	ldr	r1, [r7, #8]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 fc14 	bl	8004320 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b06:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b16:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	021a      	lsls	r2, r3, #8
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003b2c:	e002      	b.n	8003b34 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	75fb      	strb	r3, [r7, #23]
      break;
 8003b32:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop

08003b48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d101      	bne.n	8003b64 <HAL_TIM_ConfigClockSource+0x1c>
 8003b60:	2302      	movs	r3, #2
 8003b62:	e0b4      	b.n	8003cce <HAL_TIM_ConfigClockSource+0x186>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	4b56      	ldr	r3, [pc, #344]	@ (8003cd8 <HAL_TIM_ConfigClockSource+0x190>)
 8003b80:	4013      	ands	r3, r2
 8003b82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b9c:	d03e      	beq.n	8003c1c <HAL_TIM_ConfigClockSource+0xd4>
 8003b9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ba2:	f200 8087 	bhi.w	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ba6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003baa:	f000 8086 	beq.w	8003cba <HAL_TIM_ConfigClockSource+0x172>
 8003bae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bb2:	d87f      	bhi.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb4:	2b70      	cmp	r3, #112	@ 0x70
 8003bb6:	d01a      	beq.n	8003bee <HAL_TIM_ConfigClockSource+0xa6>
 8003bb8:	2b70      	cmp	r3, #112	@ 0x70
 8003bba:	d87b      	bhi.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bbc:	2b60      	cmp	r3, #96	@ 0x60
 8003bbe:	d050      	beq.n	8003c62 <HAL_TIM_ConfigClockSource+0x11a>
 8003bc0:	2b60      	cmp	r3, #96	@ 0x60
 8003bc2:	d877      	bhi.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc4:	2b50      	cmp	r3, #80	@ 0x50
 8003bc6:	d03c      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0xfa>
 8003bc8:	2b50      	cmp	r3, #80	@ 0x50
 8003bca:	d873      	bhi.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bcc:	2b40      	cmp	r3, #64	@ 0x40
 8003bce:	d058      	beq.n	8003c82 <HAL_TIM_ConfigClockSource+0x13a>
 8003bd0:	2b40      	cmp	r3, #64	@ 0x40
 8003bd2:	d86f      	bhi.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd4:	2b30      	cmp	r3, #48	@ 0x30
 8003bd6:	d064      	beq.n	8003ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8003bd8:	2b30      	cmp	r3, #48	@ 0x30
 8003bda:	d86b      	bhi.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	d060      	beq.n	8003ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8003be0:	2b20      	cmp	r3, #32
 8003be2:	d867      	bhi.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d05c      	beq.n	8003ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8003be8:	2b10      	cmp	r3, #16
 8003bea:	d05a      	beq.n	8003ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8003bec:	e062      	b.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bfe:	f000 fd87 	bl	8004710 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	609a      	str	r2, [r3, #8]
      break;
 8003c1a:	e04f      	b.n	8003cbc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c2c:	f000 fd70 	bl	8004710 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c3e:	609a      	str	r2, [r3, #8]
      break;
 8003c40:	e03c      	b.n	8003cbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c4e:	461a      	mov	r2, r3
 8003c50:	f000 fc2e 	bl	80044b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2150      	movs	r1, #80	@ 0x50
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 fd3d 	bl	80046da <TIM_ITRx_SetConfig>
      break;
 8003c60:	e02c      	b.n	8003cbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c6e:	461a      	mov	r2, r3
 8003c70:	f000 fc8a 	bl	8004588 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2160      	movs	r1, #96	@ 0x60
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 fd2d 	bl	80046da <TIM_ITRx_SetConfig>
      break;
 8003c80:	e01c      	b.n	8003cbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c8e:	461a      	mov	r2, r3
 8003c90:	f000 fc0e 	bl	80044b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2140      	movs	r1, #64	@ 0x40
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fd1d 	bl	80046da <TIM_ITRx_SetConfig>
      break;
 8003ca0:	e00c      	b.n	8003cbc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4619      	mov	r1, r3
 8003cac:	4610      	mov	r0, r2
 8003cae:	f000 fd14 	bl	80046da <TIM_ITRx_SetConfig>
      break;
 8003cb2:	e003      	b.n	8003cbc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8003cb8:	e000      	b.n	8003cbc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	fffeff88 	.word	0xfffeff88

08003cdc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	2b0c      	cmp	r3, #12
 8003cee:	d831      	bhi.n	8003d54 <HAL_TIM_ReadCapturedValue+0x78>
 8003cf0:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf6:	bf00      	nop
 8003cf8:	08003d2d 	.word	0x08003d2d
 8003cfc:	08003d55 	.word	0x08003d55
 8003d00:	08003d55 	.word	0x08003d55
 8003d04:	08003d55 	.word	0x08003d55
 8003d08:	08003d37 	.word	0x08003d37
 8003d0c:	08003d55 	.word	0x08003d55
 8003d10:	08003d55 	.word	0x08003d55
 8003d14:	08003d55 	.word	0x08003d55
 8003d18:	08003d41 	.word	0x08003d41
 8003d1c:	08003d55 	.word	0x08003d55
 8003d20:	08003d55 	.word	0x08003d55
 8003d24:	08003d55 	.word	0x08003d55
 8003d28:	08003d4b 	.word	0x08003d4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d32:	60fb      	str	r3, [r7, #12]

      break;
 8003d34:	e00f      	b.n	8003d56 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d3c:	60fb      	str	r3, [r7, #12]

      break;
 8003d3e:	e00a      	b.n	8003d56 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d46:	60fb      	str	r3, [r7, #12]

      break;
 8003d48:	e005      	b.n	8003d56 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d50:	60fb      	str	r3, [r7, #12]

      break;
 8003d52:	e000      	b.n	8003d56 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003d54:	bf00      	nop
  }

  return tmpreg;
 8003d56:	68fb      	ldr	r3, [r7, #12]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a46      	ldr	r2, [pc, #280]	@ (8003ee0 <TIM_Base_SetConfig+0x12c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d013      	beq.n	8003df4 <TIM_Base_SetConfig+0x40>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dd2:	d00f      	beq.n	8003df4 <TIM_Base_SetConfig+0x40>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a43      	ldr	r2, [pc, #268]	@ (8003ee4 <TIM_Base_SetConfig+0x130>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d00b      	beq.n	8003df4 <TIM_Base_SetConfig+0x40>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a42      	ldr	r2, [pc, #264]	@ (8003ee8 <TIM_Base_SetConfig+0x134>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d007      	beq.n	8003df4 <TIM_Base_SetConfig+0x40>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a41      	ldr	r2, [pc, #260]	@ (8003eec <TIM_Base_SetConfig+0x138>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d003      	beq.n	8003df4 <TIM_Base_SetConfig+0x40>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a40      	ldr	r2, [pc, #256]	@ (8003ef0 <TIM_Base_SetConfig+0x13c>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d108      	bne.n	8003e06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a35      	ldr	r2, [pc, #212]	@ (8003ee0 <TIM_Base_SetConfig+0x12c>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d02b      	beq.n	8003e66 <TIM_Base_SetConfig+0xb2>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e14:	d027      	beq.n	8003e66 <TIM_Base_SetConfig+0xb2>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a32      	ldr	r2, [pc, #200]	@ (8003ee4 <TIM_Base_SetConfig+0x130>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d023      	beq.n	8003e66 <TIM_Base_SetConfig+0xb2>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a31      	ldr	r2, [pc, #196]	@ (8003ee8 <TIM_Base_SetConfig+0x134>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d01f      	beq.n	8003e66 <TIM_Base_SetConfig+0xb2>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a30      	ldr	r2, [pc, #192]	@ (8003eec <TIM_Base_SetConfig+0x138>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d01b      	beq.n	8003e66 <TIM_Base_SetConfig+0xb2>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a2f      	ldr	r2, [pc, #188]	@ (8003ef0 <TIM_Base_SetConfig+0x13c>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d017      	beq.n	8003e66 <TIM_Base_SetConfig+0xb2>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a2e      	ldr	r2, [pc, #184]	@ (8003ef4 <TIM_Base_SetConfig+0x140>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d013      	beq.n	8003e66 <TIM_Base_SetConfig+0xb2>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a2d      	ldr	r2, [pc, #180]	@ (8003ef8 <TIM_Base_SetConfig+0x144>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d00f      	beq.n	8003e66 <TIM_Base_SetConfig+0xb2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a2c      	ldr	r2, [pc, #176]	@ (8003efc <TIM_Base_SetConfig+0x148>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d00b      	beq.n	8003e66 <TIM_Base_SetConfig+0xb2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a2b      	ldr	r2, [pc, #172]	@ (8003f00 <TIM_Base_SetConfig+0x14c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d007      	beq.n	8003e66 <TIM_Base_SetConfig+0xb2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a2a      	ldr	r2, [pc, #168]	@ (8003f04 <TIM_Base_SetConfig+0x150>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d003      	beq.n	8003e66 <TIM_Base_SetConfig+0xb2>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a29      	ldr	r2, [pc, #164]	@ (8003f08 <TIM_Base_SetConfig+0x154>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d108      	bne.n	8003e78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a10      	ldr	r2, [pc, #64]	@ (8003ee0 <TIM_Base_SetConfig+0x12c>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d003      	beq.n	8003eac <TIM_Base_SetConfig+0xf8>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a12      	ldr	r2, [pc, #72]	@ (8003ef0 <TIM_Base_SetConfig+0x13c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d103      	bne.n	8003eb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	691a      	ldr	r2, [r3, #16]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d105      	bne.n	8003ed2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	f023 0201 	bic.w	r2, r3, #1
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	611a      	str	r2, [r3, #16]
  }
}
 8003ed2:	bf00      	nop
 8003ed4:	3714      	adds	r7, #20
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	40010000 	.word	0x40010000
 8003ee4:	40000400 	.word	0x40000400
 8003ee8:	40000800 	.word	0x40000800
 8003eec:	40000c00 	.word	0x40000c00
 8003ef0:	40010400 	.word	0x40010400
 8003ef4:	40014000 	.word	0x40014000
 8003ef8:	40014400 	.word	0x40014400
 8003efc:	40014800 	.word	0x40014800
 8003f00:	40001800 	.word	0x40001800
 8003f04:	40001c00 	.word	0x40001c00
 8003f08:	40002000 	.word	0x40002000

08003f0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	f023 0201 	bic.w	r2, r3, #1
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	4b2b      	ldr	r3, [pc, #172]	@ (8003fe4 <TIM_OC1_SetConfig+0xd8>)
 8003f38:	4013      	ands	r3, r2
 8003f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f023 0303 	bic.w	r3, r3, #3
 8003f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f023 0302 	bic.w	r3, r3, #2
 8003f54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a21      	ldr	r2, [pc, #132]	@ (8003fe8 <TIM_OC1_SetConfig+0xdc>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d003      	beq.n	8003f70 <TIM_OC1_SetConfig+0x64>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a20      	ldr	r2, [pc, #128]	@ (8003fec <TIM_OC1_SetConfig+0xe0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d10c      	bne.n	8003f8a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f023 0308 	bic.w	r3, r3, #8
 8003f76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f023 0304 	bic.w	r3, r3, #4
 8003f88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a16      	ldr	r2, [pc, #88]	@ (8003fe8 <TIM_OC1_SetConfig+0xdc>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d003      	beq.n	8003f9a <TIM_OC1_SetConfig+0x8e>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a15      	ldr	r2, [pc, #84]	@ (8003fec <TIM_OC1_SetConfig+0xe0>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d111      	bne.n	8003fbe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	621a      	str	r2, [r3, #32]
}
 8003fd8:	bf00      	nop
 8003fda:	371c      	adds	r7, #28
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	fffeff8f 	.word	0xfffeff8f
 8003fe8:	40010000 	.word	0x40010000
 8003fec:	40010400 	.word	0x40010400

08003ff0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b087      	sub	sp, #28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	f023 0210 	bic.w	r2, r3, #16
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	4b2e      	ldr	r3, [pc, #184]	@ (80040d4 <TIM_OC2_SetConfig+0xe4>)
 800401c:	4013      	ands	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004026:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	021b      	lsls	r3, r3, #8
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	4313      	orrs	r3, r2
 8004032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f023 0320 	bic.w	r3, r3, #32
 800403a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	011b      	lsls	r3, r3, #4
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	4313      	orrs	r3, r2
 8004046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a23      	ldr	r2, [pc, #140]	@ (80040d8 <TIM_OC2_SetConfig+0xe8>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d003      	beq.n	8004058 <TIM_OC2_SetConfig+0x68>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a22      	ldr	r2, [pc, #136]	@ (80040dc <TIM_OC2_SetConfig+0xec>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d10d      	bne.n	8004074 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800405e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	011b      	lsls	r3, r3, #4
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	4313      	orrs	r3, r2
 800406a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004072:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a18      	ldr	r2, [pc, #96]	@ (80040d8 <TIM_OC2_SetConfig+0xe8>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d003      	beq.n	8004084 <TIM_OC2_SetConfig+0x94>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a17      	ldr	r2, [pc, #92]	@ (80040dc <TIM_OC2_SetConfig+0xec>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d113      	bne.n	80040ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800408a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004092:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	4313      	orrs	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	621a      	str	r2, [r3, #32]
}
 80040c6:	bf00      	nop
 80040c8:	371c      	adds	r7, #28
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	feff8fff 	.word	0xfeff8fff
 80040d8:	40010000 	.word	0x40010000
 80040dc:	40010400 	.word	0x40010400

080040e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	4b2d      	ldr	r3, [pc, #180]	@ (80041c0 <TIM_OC3_SetConfig+0xe0>)
 800410c:	4013      	ands	r3, r2
 800410e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f023 0303 	bic.w	r3, r3, #3
 8004116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	4313      	orrs	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004128:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	021b      	lsls	r3, r3, #8
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	4313      	orrs	r3, r2
 8004134:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a22      	ldr	r2, [pc, #136]	@ (80041c4 <TIM_OC3_SetConfig+0xe4>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d003      	beq.n	8004146 <TIM_OC3_SetConfig+0x66>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a21      	ldr	r2, [pc, #132]	@ (80041c8 <TIM_OC3_SetConfig+0xe8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d10d      	bne.n	8004162 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800414c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	021b      	lsls	r3, r3, #8
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	4313      	orrs	r3, r2
 8004158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a17      	ldr	r2, [pc, #92]	@ (80041c4 <TIM_OC3_SetConfig+0xe4>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d003      	beq.n	8004172 <TIM_OC3_SetConfig+0x92>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a16      	ldr	r2, [pc, #88]	@ (80041c8 <TIM_OC3_SetConfig+0xe8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d113      	bne.n	800419a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004178:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004180:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	4313      	orrs	r3, r2
 800418c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	621a      	str	r2, [r3, #32]
}
 80041b4:	bf00      	nop
 80041b6:	371c      	adds	r7, #28
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	fffeff8f 	.word	0xfffeff8f
 80041c4:	40010000 	.word	0x40010000
 80041c8:	40010400 	.word	0x40010400

080041cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b087      	sub	sp, #28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004270 <TIM_OC4_SetConfig+0xa4>)
 80041f8:	4013      	ands	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	021b      	lsls	r3, r3, #8
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4313      	orrs	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004216:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	031b      	lsls	r3, r3, #12
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	4313      	orrs	r3, r2
 8004222:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a13      	ldr	r2, [pc, #76]	@ (8004274 <TIM_OC4_SetConfig+0xa8>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d003      	beq.n	8004234 <TIM_OC4_SetConfig+0x68>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a12      	ldr	r2, [pc, #72]	@ (8004278 <TIM_OC4_SetConfig+0xac>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d109      	bne.n	8004248 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800423a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	019b      	lsls	r3, r3, #6
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	4313      	orrs	r3, r2
 8004246:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	621a      	str	r2, [r3, #32]
}
 8004262:	bf00      	nop
 8004264:	371c      	adds	r7, #28
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	feff8fff 	.word	0xfeff8fff
 8004274:	40010000 	.word	0x40010000
 8004278:	40010400 	.word	0x40010400

0800427c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	4b1b      	ldr	r3, [pc, #108]	@ (8004314 <TIM_OC5_SetConfig+0x98>)
 80042a8:	4013      	ands	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80042bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	041b      	lsls	r3, r3, #16
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a12      	ldr	r2, [pc, #72]	@ (8004318 <TIM_OC5_SetConfig+0x9c>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d003      	beq.n	80042da <TIM_OC5_SetConfig+0x5e>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a11      	ldr	r2, [pc, #68]	@ (800431c <TIM_OC5_SetConfig+0xa0>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d109      	bne.n	80042ee <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	021b      	lsls	r3, r3, #8
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	621a      	str	r2, [r3, #32]
}
 8004308:	bf00      	nop
 800430a:	371c      	adds	r7, #28
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	fffeff8f 	.word	0xfffeff8f
 8004318:	40010000 	.word	0x40010000
 800431c:	40010400 	.word	0x40010400

08004320 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004320:	b480      	push	{r7}
 8004322:	b087      	sub	sp, #28
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	4b1c      	ldr	r3, [pc, #112]	@ (80043bc <TIM_OC6_SetConfig+0x9c>)
 800434c:	4013      	ands	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	021b      	lsls	r3, r3, #8
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	4313      	orrs	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004362:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	051b      	lsls	r3, r3, #20
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	4313      	orrs	r3, r2
 800436e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a13      	ldr	r2, [pc, #76]	@ (80043c0 <TIM_OC6_SetConfig+0xa0>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d003      	beq.n	8004380 <TIM_OC6_SetConfig+0x60>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a12      	ldr	r2, [pc, #72]	@ (80043c4 <TIM_OC6_SetConfig+0xa4>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d109      	bne.n	8004394 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004386:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	029b      	lsls	r3, r3, #10
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	4313      	orrs	r3, r2
 8004392:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	621a      	str	r2, [r3, #32]
}
 80043ae:	bf00      	nop
 80043b0:	371c      	adds	r7, #28
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	feff8fff 	.word	0xfeff8fff
 80043c0:	40010000 	.word	0x40010000
 80043c4:	40010400 	.word	0x40010400

080043c8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
 80043d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	f023 0201 	bic.w	r2, r3, #1
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	4a28      	ldr	r2, [pc, #160]	@ (8004494 <TIM_TI1_SetConfig+0xcc>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d01b      	beq.n	800442e <TIM_TI1_SetConfig+0x66>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043fc:	d017      	beq.n	800442e <TIM_TI1_SetConfig+0x66>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4a25      	ldr	r2, [pc, #148]	@ (8004498 <TIM_TI1_SetConfig+0xd0>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d013      	beq.n	800442e <TIM_TI1_SetConfig+0x66>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	4a24      	ldr	r2, [pc, #144]	@ (800449c <TIM_TI1_SetConfig+0xd4>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d00f      	beq.n	800442e <TIM_TI1_SetConfig+0x66>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4a23      	ldr	r2, [pc, #140]	@ (80044a0 <TIM_TI1_SetConfig+0xd8>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d00b      	beq.n	800442e <TIM_TI1_SetConfig+0x66>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	4a22      	ldr	r2, [pc, #136]	@ (80044a4 <TIM_TI1_SetConfig+0xdc>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d007      	beq.n	800442e <TIM_TI1_SetConfig+0x66>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4a21      	ldr	r2, [pc, #132]	@ (80044a8 <TIM_TI1_SetConfig+0xe0>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d003      	beq.n	800442e <TIM_TI1_SetConfig+0x66>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4a20      	ldr	r2, [pc, #128]	@ (80044ac <TIM_TI1_SetConfig+0xe4>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d101      	bne.n	8004432 <TIM_TI1_SetConfig+0x6a>
 800442e:	2301      	movs	r3, #1
 8004430:	e000      	b.n	8004434 <TIM_TI1_SetConfig+0x6c>
 8004432:	2300      	movs	r3, #0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d008      	beq.n	800444a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f023 0303 	bic.w	r3, r3, #3
 800443e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4313      	orrs	r3, r2
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	e003      	b.n	8004452 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f043 0301 	orr.w	r3, r3, #1
 8004450:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004458:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	011b      	lsls	r3, r3, #4
 800445e:	b2db      	uxtb	r3, r3
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	4313      	orrs	r3, r2
 8004464:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	f023 030a 	bic.w	r3, r3, #10
 800446c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	f003 030a 	and.w	r3, r3, #10
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	4313      	orrs	r3, r2
 8004478:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	621a      	str	r2, [r3, #32]
}
 8004486:	bf00      	nop
 8004488:	371c      	adds	r7, #28
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40010000 	.word	0x40010000
 8004498:	40000400 	.word	0x40000400
 800449c:	40000800 	.word	0x40000800
 80044a0:	40000c00 	.word	0x40000c00
 80044a4:	40010400 	.word	0x40010400
 80044a8:	40014000 	.word	0x40014000
 80044ac:	40001800 	.word	0x40001800

080044b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	f023 0201 	bic.w	r2, r3, #1
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	011b      	lsls	r3, r3, #4
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f023 030a 	bic.w	r3, r3, #10
 80044ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	621a      	str	r2, [r3, #32]
}
 8004502:	bf00      	nop
 8004504:	371c      	adds	r7, #28
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800450e:	b480      	push	{r7}
 8004510:	b087      	sub	sp, #28
 8004512:	af00      	add	r7, sp, #0
 8004514:	60f8      	str	r0, [r7, #12]
 8004516:	60b9      	str	r1, [r7, #8]
 8004518:	607a      	str	r2, [r7, #4]
 800451a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	f023 0210 	bic.w	r2, r3, #16
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800453a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	021b      	lsls	r3, r3, #8
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	4313      	orrs	r3, r2
 8004544:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800454c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	031b      	lsls	r3, r3, #12
 8004552:	b29b      	uxth	r3, r3
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	4313      	orrs	r3, r2
 8004558:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004560:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	011b      	lsls	r3, r3, #4
 8004566:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	4313      	orrs	r3, r2
 800456e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	621a      	str	r2, [r3, #32]
}
 800457c:	bf00      	nop
 800457e:	371c      	adds	r7, #28
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004588:	b480      	push	{r7}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	f023 0210 	bic.w	r2, r3, #16
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	031b      	lsls	r3, r3, #12
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80045c4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	011b      	lsls	r3, r3, #4
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	621a      	str	r2, [r3, #32]
}
 80045dc:	bf00      	nop
 80045de:	371c      	adds	r7, #28
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
 80045f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	f023 0303 	bic.w	r3, r3, #3
 8004614:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4313      	orrs	r3, r2
 800461c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004624:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	011b      	lsls	r3, r3, #4
 800462a:	b2db      	uxtb	r3, r3
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	4313      	orrs	r3, r2
 8004630:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004638:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	021b      	lsls	r3, r3, #8
 800463e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	4313      	orrs	r3, r2
 8004646:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	621a      	str	r2, [r3, #32]
}
 8004654:	bf00      	nop
 8004656:	371c      	adds	r7, #28
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004660:	b480      	push	{r7}
 8004662:	b087      	sub	sp, #28
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
 800466c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800468c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	021b      	lsls	r3, r3, #8
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	4313      	orrs	r3, r2
 8004696:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800469e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	031b      	lsls	r3, r3, #12
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80046b2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	031b      	lsls	r3, r3, #12
 80046b8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	4313      	orrs	r3, r2
 80046c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	621a      	str	r2, [r3, #32]
}
 80046ce:	bf00      	nop
 80046d0:	371c      	adds	r7, #28
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046da:	b480      	push	{r7}
 80046dc:	b085      	sub	sp, #20
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
 80046e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f043 0307 	orr.w	r3, r3, #7
 80046fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	609a      	str	r2, [r3, #8]
}
 8004704:	bf00      	nop
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004710:	b480      	push	{r7}
 8004712:	b087      	sub	sp, #28
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
 800471c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800472a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	021a      	lsls	r2, r3, #8
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	431a      	orrs	r2, r3
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	4313      	orrs	r3, r2
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	4313      	orrs	r3, r2
 800473c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	609a      	str	r2, [r3, #8]
}
 8004744:	bf00      	nop
 8004746:	371c      	adds	r7, #28
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004750:	b480      	push	{r7}
 8004752:	b087      	sub	sp, #28
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	f003 031f 	and.w	r3, r3, #31
 8004762:	2201      	movs	r2, #1
 8004764:	fa02 f303 	lsl.w	r3, r2, r3
 8004768:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6a1a      	ldr	r2, [r3, #32]
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	43db      	mvns	r3, r3
 8004772:	401a      	ands	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6a1a      	ldr	r2, [r3, #32]
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f003 031f 	and.w	r3, r3, #31
 8004782:	6879      	ldr	r1, [r7, #4]
 8004784:	fa01 f303 	lsl.w	r3, r1, r3
 8004788:	431a      	orrs	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	621a      	str	r2, [r3, #32]
}
 800478e:	bf00      	nop
 8004790:	371c      	adds	r7, #28
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
	...

0800479c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d101      	bne.n	80047b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047b0:	2302      	movs	r3, #2
 80047b2:	e06d      	b.n	8004890 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a30      	ldr	r2, [pc, #192]	@ (800489c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d004      	beq.n	80047e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a2f      	ldr	r2, [pc, #188]	@ (80048a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d108      	bne.n	80047fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80047ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004800:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	4313      	orrs	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a20      	ldr	r2, [pc, #128]	@ (800489c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d022      	beq.n	8004864 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004826:	d01d      	beq.n	8004864 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a1d      	ldr	r2, [pc, #116]	@ (80048a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d018      	beq.n	8004864 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a1c      	ldr	r2, [pc, #112]	@ (80048a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d013      	beq.n	8004864 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a1a      	ldr	r2, [pc, #104]	@ (80048ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d00e      	beq.n	8004864 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a15      	ldr	r2, [pc, #84]	@ (80048a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d009      	beq.n	8004864 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a16      	ldr	r2, [pc, #88]	@ (80048b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d004      	beq.n	8004864 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a15      	ldr	r2, [pc, #84]	@ (80048b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d10c      	bne.n	800487e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800486a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	4313      	orrs	r3, r2
 8004874:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3714      	adds	r7, #20
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	40010000 	.word	0x40010000
 80048a0:	40010400 	.word	0x40010400
 80048a4:	40000400 	.word	0x40000400
 80048a8:	40000800 	.word	0x40000800
 80048ac:	40000c00 	.word	0x40000c00
 80048b0:	40014000 	.word	0x40014000
 80048b4:	40001800 	.word	0x40001800

080048b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e040      	b.n	8004988 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800490a:	2b00      	cmp	r3, #0
 800490c:	d106      	bne.n	800491c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7fc fa2c 	bl	8000d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2224      	movs	r2, #36	@ 0x24
 8004920:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 0201 	bic.w	r2, r2, #1
 8004930:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004936:	2b00      	cmp	r3, #0
 8004938:	d002      	beq.n	8004940 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 fe24 	bl	8005588 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 fbbd 	bl	80050c0 <UART_SetConfig>
 8004946:	4603      	mov	r3, r0
 8004948:	2b01      	cmp	r3, #1
 800494a:	d101      	bne.n	8004950 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e01b      	b.n	8004988 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800495e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689a      	ldr	r2, [r3, #8]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800496e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f042 0201 	orr.w	r2, r2, #1
 800497e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 fea3 	bl	80056cc <UART_CheckIdleState>
 8004986:	4603      	mov	r3, r0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b08a      	sub	sp, #40	@ 0x28
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	4613      	mov	r3, r2
 800499c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	d165      	bne.n	8004a72 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <HAL_UART_Transmit_DMA+0x22>
 80049ac:	88fb      	ldrh	r3, [r7, #6]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e05e      	b.n	8004a74 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	88fa      	ldrh	r2, [r7, #6]
 80049c0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	88fa      	ldrh	r2, [r7, #6]
 80049c8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2221      	movs	r2, #33	@ 0x21
 80049d8:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d027      	beq.n	8004a32 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049e6:	4a25      	ldr	r2, [pc, #148]	@ (8004a7c <HAL_UART_Transmit_DMA+0xec>)
 80049e8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ee:	4a24      	ldr	r2, [pc, #144]	@ (8004a80 <HAL_UART_Transmit_DMA+0xf0>)
 80049f0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049f6:	4a23      	ldr	r2, [pc, #140]	@ (8004a84 <HAL_UART_Transmit_DMA+0xf4>)
 80049f8:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049fe:	2200      	movs	r2, #0
 8004a00:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	3328      	adds	r3, #40	@ 0x28
 8004a12:	461a      	mov	r2, r3
 8004a14:	88fb      	ldrh	r3, [r7, #6]
 8004a16:	f7fc fd87 	bl	8001528 <HAL_DMA_Start_IT>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d008      	beq.n	8004a32 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2210      	movs	r2, #16
 8004a24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e020      	b.n	8004a74 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2240      	movs	r2, #64	@ 0x40
 8004a38:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	3308      	adds	r3, #8
 8004a40:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	e853 3f00 	ldrex	r3, [r3]
 8004a48:	613b      	str	r3, [r7, #16]
   return(result);
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a50:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	3308      	adds	r3, #8
 8004a58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a5a:	623a      	str	r2, [r7, #32]
 8004a5c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5e:	69f9      	ldr	r1, [r7, #28]
 8004a60:	6a3a      	ldr	r2, [r7, #32]
 8004a62:	e841 2300 	strex	r3, r2, [r1]
 8004a66:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1e5      	bne.n	8004a3a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	e000      	b.n	8004a74 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8004a72:	2302      	movs	r3, #2
  }
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3728      	adds	r7, #40	@ 0x28
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	08005a0b 	.word	0x08005a0b
 8004a80:	08005aa1 	.word	0x08005aa1
 8004a84:	08005abd 	.word	0x08005abd

08004a88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b0ba      	sub	sp, #232	@ 0xe8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004aae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004ab2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004abc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d115      	bne.n	8004af0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ac8:	f003 0320 	and.w	r3, r3, #32
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00f      	beq.n	8004af0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ad4:	f003 0320 	and.w	r3, r3, #32
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d009      	beq.n	8004af0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 82ac 	beq.w	800503e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	4798      	blx	r3
      }
      return;
 8004aee:	e2a6      	b.n	800503e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004af0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 8117 	beq.w	8004d28 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004afa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d106      	bne.n	8004b14 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004b06:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004b0a:	4b85      	ldr	r3, [pc, #532]	@ (8004d20 <HAL_UART_IRQHandler+0x298>)
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 810a 	beq.w	8004d28 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d011      	beq.n	8004b44 <HAL_UART_IRQHandler+0xbc>
 8004b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00b      	beq.n	8004b44 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2201      	movs	r2, #1
 8004b32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b3a:	f043 0201 	orr.w	r2, r3, #1
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d011      	beq.n	8004b74 <HAL_UART_IRQHandler+0xec>
 8004b50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00b      	beq.n	8004b74 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2202      	movs	r2, #2
 8004b62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b6a:	f043 0204 	orr.w	r2, r3, #4
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b78:	f003 0304 	and.w	r3, r3, #4
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d011      	beq.n	8004ba4 <HAL_UART_IRQHandler+0x11c>
 8004b80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00b      	beq.n	8004ba4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2204      	movs	r2, #4
 8004b92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b9a:	f043 0202 	orr.w	r2, r3, #2
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ba8:	f003 0308 	and.w	r3, r3, #8
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d017      	beq.n	8004be0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bb4:	f003 0320 	and.w	r3, r3, #32
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d105      	bne.n	8004bc8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004bbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bc0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00b      	beq.n	8004be0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2208      	movs	r2, #8
 8004bce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bd6:	f043 0208 	orr.w	r2, r3, #8
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004be4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d012      	beq.n	8004c12 <HAL_UART_IRQHandler+0x18a>
 8004bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bf0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00c      	beq.n	8004c12 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c08:	f043 0220 	orr.w	r2, r3, #32
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 8212 	beq.w	8005042 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c22:	f003 0320 	and.w	r3, r3, #32
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00d      	beq.n	8004c46 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c2e:	f003 0320 	and.w	r3, r3, #32
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d007      	beq.n	8004c46 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c4c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c5a:	2b40      	cmp	r3, #64	@ 0x40
 8004c5c:	d005      	beq.n	8004c6a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004c5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c62:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d04f      	beq.n	8004d0a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 fe69 	bl	8005942 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c7a:	2b40      	cmp	r3, #64	@ 0x40
 8004c7c:	d141      	bne.n	8004d02 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	3308      	adds	r3, #8
 8004c84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c8c:	e853 3f00 	ldrex	r3, [r3]
 8004c90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004c94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	3308      	adds	r3, #8
 8004ca6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004caa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004cae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004cb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004cba:	e841 2300 	strex	r3, r2, [r1]
 8004cbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004cc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1d9      	bne.n	8004c7e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d013      	beq.n	8004cfa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cd6:	4a13      	ldr	r2, [pc, #76]	@ (8004d24 <HAL_UART_IRQHandler+0x29c>)
 8004cd8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7fc fcf2 	bl	80016c8 <HAL_DMA_Abort_IT>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d017      	beq.n	8004d1a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004cf4:	4610      	mov	r0, r2
 8004cf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf8:	e00f      	b.n	8004d1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f9c0 	bl	8005080 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d00:	e00b      	b.n	8004d1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f9bc 	bl	8005080 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d08:	e007      	b.n	8004d1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f9b8 	bl	8005080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004d18:	e193      	b.n	8005042 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d1a:	bf00      	nop
    return;
 8004d1c:	e191      	b.n	8005042 <HAL_UART_IRQHandler+0x5ba>
 8004d1e:	bf00      	nop
 8004d20:	04000120 	.word	0x04000120
 8004d24:	08005b3b 	.word	0x08005b3b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	f040 814c 	bne.w	8004fca <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d36:	f003 0310 	and.w	r3, r3, #16
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 8145 	beq.w	8004fca <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d44:	f003 0310 	and.w	r3, r3, #16
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 813e 	beq.w	8004fca <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2210      	movs	r2, #16
 8004d54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d60:	2b40      	cmp	r3, #64	@ 0x40
 8004d62:	f040 80b6 	bne.w	8004ed2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d72:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f000 8165 	beq.w	8005046 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004d82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d86:	429a      	cmp	r2, r3
 8004d88:	f080 815d 	bcs.w	8005046 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d92:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004da0:	f000 8086 	beq.w	8004eb0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004db0:	e853 3f00 	ldrex	r3, [r3]
 8004db4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004db8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004dbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004dc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	461a      	mov	r2, r3
 8004dca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004dce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004dd2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004dda:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004dde:	e841 2300 	strex	r3, r2, [r1]
 8004de2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004de6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1da      	bne.n	8004da4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	3308      	adds	r3, #8
 8004df4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004df8:	e853 3f00 	ldrex	r3, [r3]
 8004dfc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004dfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004e00:	f023 0301 	bic.w	r3, r3, #1
 8004e04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	3308      	adds	r3, #8
 8004e0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004e12:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004e16:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e18:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004e1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004e1e:	e841 2300 	strex	r3, r2, [r1]
 8004e22:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004e24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1e1      	bne.n	8004dee <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	3308      	adds	r3, #8
 8004e30:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e34:	e853 3f00 	ldrex	r3, [r3]
 8004e38:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004e3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	3308      	adds	r3, #8
 8004e4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004e4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004e50:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e52:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004e54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004e56:	e841 2300 	strex	r3, r2, [r1]
 8004e5a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004e5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1e3      	bne.n	8004e2a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e78:	e853 3f00 	ldrex	r3, [r3]
 8004e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004e7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e80:	f023 0310 	bic.w	r3, r3, #16
 8004e84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e92:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e94:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e96:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e98:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e9a:	e841 2300 	strex	r3, r2, [r1]
 8004e9e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004ea0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1e4      	bne.n	8004e70 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7fc fb9c 	bl	80015e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	4619      	mov	r1, r3
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f8e2 	bl	8005094 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ed0:	e0b9      	b.n	8005046 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f000 80ab 	beq.w	800504a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8004ef4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f000 80a6 	beq.w	800504a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f06:	e853 3f00 	ldrex	r3, [r3]
 8004f0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004f20:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f22:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f28:	e841 2300 	strex	r3, r2, [r1]
 8004f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1e4      	bne.n	8004efe <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	3308      	adds	r3, #8
 8004f3a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3e:	e853 3f00 	ldrex	r3, [r3]
 8004f42:	623b      	str	r3, [r7, #32]
   return(result);
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	f023 0301 	bic.w	r3, r3, #1
 8004f4a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3308      	adds	r3, #8
 8004f54:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004f58:	633a      	str	r2, [r7, #48]	@ 0x30
 8004f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f60:	e841 2300 	strex	r3, r2, [r1]
 8004f64:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1e3      	bne.n	8004f34 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	e853 3f00 	ldrex	r3, [r3]
 8004f8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f023 0310 	bic.w	r3, r3, #16
 8004f94:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004fa2:	61fb      	str	r3, [r7, #28]
 8004fa4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa6:	69b9      	ldr	r1, [r7, #24]
 8004fa8:	69fa      	ldr	r2, [r7, #28]
 8004faa:	e841 2300 	strex	r3, r2, [r1]
 8004fae:	617b      	str	r3, [r7, #20]
   return(result);
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1e4      	bne.n	8004f80 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2202      	movs	r2, #2
 8004fba:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004fbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f866 	bl	8005094 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004fc8:	e03f      	b.n	800504a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00e      	beq.n	8004ff4 <HAL_UART_IRQHandler+0x56c>
 8004fd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d008      	beq.n	8004ff4 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004fea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 f85d 	bl	80050ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ff2:	e02d      	b.n	8005050 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ff8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00e      	beq.n	800501e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005004:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005008:	2b00      	cmp	r3, #0
 800500a:	d008      	beq.n	800501e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005010:	2b00      	cmp	r3, #0
 8005012:	d01c      	beq.n	800504e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	4798      	blx	r3
    }
    return;
 800501c:	e017      	b.n	800504e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800501e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005026:	2b00      	cmp	r3, #0
 8005028:	d012      	beq.n	8005050 <HAL_UART_IRQHandler+0x5c8>
 800502a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800502e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00c      	beq.n	8005050 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 fd95 	bl	8005b66 <UART_EndTransmit_IT>
    return;
 800503c:	e008      	b.n	8005050 <HAL_UART_IRQHandler+0x5c8>
      return;
 800503e:	bf00      	nop
 8005040:	e006      	b.n	8005050 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005042:	bf00      	nop
 8005044:	e004      	b.n	8005050 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005046:	bf00      	nop
 8005048:	e002      	b.n	8005050 <HAL_UART_IRQHandler+0x5c8>
      return;
 800504a:	bf00      	nop
 800504c:	e000      	b.n	8005050 <HAL_UART_IRQHandler+0x5c8>
    return;
 800504e:	bf00      	nop
  }

}
 8005050:	37e8      	adds	r7, #232	@ 0xe8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop

08005058 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	460b      	mov	r3, r1
 800509e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b088      	sub	sp, #32
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050c8:	2300      	movs	r3, #0
 80050ca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	431a      	orrs	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	431a      	orrs	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	69db      	ldr	r3, [r3, #28]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	4ba6      	ldr	r3, [pc, #664]	@ (8005384 <UART_SetConfig+0x2c4>)
 80050ec:	4013      	ands	r3, r2
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	6812      	ldr	r2, [r2, #0]
 80050f2:	6979      	ldr	r1, [r7, #20]
 80050f4:	430b      	orrs	r3, r1
 80050f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68da      	ldr	r2, [r3, #12]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	4313      	orrs	r3, r2
 800511c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	430a      	orrs	r2, r1
 8005130:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a94      	ldr	r2, [pc, #592]	@ (8005388 <UART_SetConfig+0x2c8>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d120      	bne.n	800517e <UART_SetConfig+0xbe>
 800513c:	4b93      	ldr	r3, [pc, #588]	@ (800538c <UART_SetConfig+0x2cc>)
 800513e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	2b03      	cmp	r3, #3
 8005148:	d816      	bhi.n	8005178 <UART_SetConfig+0xb8>
 800514a:	a201      	add	r2, pc, #4	@ (adr r2, 8005150 <UART_SetConfig+0x90>)
 800514c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005150:	08005161 	.word	0x08005161
 8005154:	0800516d 	.word	0x0800516d
 8005158:	08005167 	.word	0x08005167
 800515c:	08005173 	.word	0x08005173
 8005160:	2301      	movs	r3, #1
 8005162:	77fb      	strb	r3, [r7, #31]
 8005164:	e150      	b.n	8005408 <UART_SetConfig+0x348>
 8005166:	2302      	movs	r3, #2
 8005168:	77fb      	strb	r3, [r7, #31]
 800516a:	e14d      	b.n	8005408 <UART_SetConfig+0x348>
 800516c:	2304      	movs	r3, #4
 800516e:	77fb      	strb	r3, [r7, #31]
 8005170:	e14a      	b.n	8005408 <UART_SetConfig+0x348>
 8005172:	2308      	movs	r3, #8
 8005174:	77fb      	strb	r3, [r7, #31]
 8005176:	e147      	b.n	8005408 <UART_SetConfig+0x348>
 8005178:	2310      	movs	r3, #16
 800517a:	77fb      	strb	r3, [r7, #31]
 800517c:	e144      	b.n	8005408 <UART_SetConfig+0x348>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a83      	ldr	r2, [pc, #524]	@ (8005390 <UART_SetConfig+0x2d0>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d132      	bne.n	80051ee <UART_SetConfig+0x12e>
 8005188:	4b80      	ldr	r3, [pc, #512]	@ (800538c <UART_SetConfig+0x2cc>)
 800518a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800518e:	f003 030c 	and.w	r3, r3, #12
 8005192:	2b0c      	cmp	r3, #12
 8005194:	d828      	bhi.n	80051e8 <UART_SetConfig+0x128>
 8005196:	a201      	add	r2, pc, #4	@ (adr r2, 800519c <UART_SetConfig+0xdc>)
 8005198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519c:	080051d1 	.word	0x080051d1
 80051a0:	080051e9 	.word	0x080051e9
 80051a4:	080051e9 	.word	0x080051e9
 80051a8:	080051e9 	.word	0x080051e9
 80051ac:	080051dd 	.word	0x080051dd
 80051b0:	080051e9 	.word	0x080051e9
 80051b4:	080051e9 	.word	0x080051e9
 80051b8:	080051e9 	.word	0x080051e9
 80051bc:	080051d7 	.word	0x080051d7
 80051c0:	080051e9 	.word	0x080051e9
 80051c4:	080051e9 	.word	0x080051e9
 80051c8:	080051e9 	.word	0x080051e9
 80051cc:	080051e3 	.word	0x080051e3
 80051d0:	2300      	movs	r3, #0
 80051d2:	77fb      	strb	r3, [r7, #31]
 80051d4:	e118      	b.n	8005408 <UART_SetConfig+0x348>
 80051d6:	2302      	movs	r3, #2
 80051d8:	77fb      	strb	r3, [r7, #31]
 80051da:	e115      	b.n	8005408 <UART_SetConfig+0x348>
 80051dc:	2304      	movs	r3, #4
 80051de:	77fb      	strb	r3, [r7, #31]
 80051e0:	e112      	b.n	8005408 <UART_SetConfig+0x348>
 80051e2:	2308      	movs	r3, #8
 80051e4:	77fb      	strb	r3, [r7, #31]
 80051e6:	e10f      	b.n	8005408 <UART_SetConfig+0x348>
 80051e8:	2310      	movs	r3, #16
 80051ea:	77fb      	strb	r3, [r7, #31]
 80051ec:	e10c      	b.n	8005408 <UART_SetConfig+0x348>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a68      	ldr	r2, [pc, #416]	@ (8005394 <UART_SetConfig+0x2d4>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d120      	bne.n	800523a <UART_SetConfig+0x17a>
 80051f8:	4b64      	ldr	r3, [pc, #400]	@ (800538c <UART_SetConfig+0x2cc>)
 80051fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051fe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005202:	2b30      	cmp	r3, #48	@ 0x30
 8005204:	d013      	beq.n	800522e <UART_SetConfig+0x16e>
 8005206:	2b30      	cmp	r3, #48	@ 0x30
 8005208:	d814      	bhi.n	8005234 <UART_SetConfig+0x174>
 800520a:	2b20      	cmp	r3, #32
 800520c:	d009      	beq.n	8005222 <UART_SetConfig+0x162>
 800520e:	2b20      	cmp	r3, #32
 8005210:	d810      	bhi.n	8005234 <UART_SetConfig+0x174>
 8005212:	2b00      	cmp	r3, #0
 8005214:	d002      	beq.n	800521c <UART_SetConfig+0x15c>
 8005216:	2b10      	cmp	r3, #16
 8005218:	d006      	beq.n	8005228 <UART_SetConfig+0x168>
 800521a:	e00b      	b.n	8005234 <UART_SetConfig+0x174>
 800521c:	2300      	movs	r3, #0
 800521e:	77fb      	strb	r3, [r7, #31]
 8005220:	e0f2      	b.n	8005408 <UART_SetConfig+0x348>
 8005222:	2302      	movs	r3, #2
 8005224:	77fb      	strb	r3, [r7, #31]
 8005226:	e0ef      	b.n	8005408 <UART_SetConfig+0x348>
 8005228:	2304      	movs	r3, #4
 800522a:	77fb      	strb	r3, [r7, #31]
 800522c:	e0ec      	b.n	8005408 <UART_SetConfig+0x348>
 800522e:	2308      	movs	r3, #8
 8005230:	77fb      	strb	r3, [r7, #31]
 8005232:	e0e9      	b.n	8005408 <UART_SetConfig+0x348>
 8005234:	2310      	movs	r3, #16
 8005236:	77fb      	strb	r3, [r7, #31]
 8005238:	e0e6      	b.n	8005408 <UART_SetConfig+0x348>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a56      	ldr	r2, [pc, #344]	@ (8005398 <UART_SetConfig+0x2d8>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d120      	bne.n	8005286 <UART_SetConfig+0x1c6>
 8005244:	4b51      	ldr	r3, [pc, #324]	@ (800538c <UART_SetConfig+0x2cc>)
 8005246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800524a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800524e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005250:	d013      	beq.n	800527a <UART_SetConfig+0x1ba>
 8005252:	2bc0      	cmp	r3, #192	@ 0xc0
 8005254:	d814      	bhi.n	8005280 <UART_SetConfig+0x1c0>
 8005256:	2b80      	cmp	r3, #128	@ 0x80
 8005258:	d009      	beq.n	800526e <UART_SetConfig+0x1ae>
 800525a:	2b80      	cmp	r3, #128	@ 0x80
 800525c:	d810      	bhi.n	8005280 <UART_SetConfig+0x1c0>
 800525e:	2b00      	cmp	r3, #0
 8005260:	d002      	beq.n	8005268 <UART_SetConfig+0x1a8>
 8005262:	2b40      	cmp	r3, #64	@ 0x40
 8005264:	d006      	beq.n	8005274 <UART_SetConfig+0x1b4>
 8005266:	e00b      	b.n	8005280 <UART_SetConfig+0x1c0>
 8005268:	2300      	movs	r3, #0
 800526a:	77fb      	strb	r3, [r7, #31]
 800526c:	e0cc      	b.n	8005408 <UART_SetConfig+0x348>
 800526e:	2302      	movs	r3, #2
 8005270:	77fb      	strb	r3, [r7, #31]
 8005272:	e0c9      	b.n	8005408 <UART_SetConfig+0x348>
 8005274:	2304      	movs	r3, #4
 8005276:	77fb      	strb	r3, [r7, #31]
 8005278:	e0c6      	b.n	8005408 <UART_SetConfig+0x348>
 800527a:	2308      	movs	r3, #8
 800527c:	77fb      	strb	r3, [r7, #31]
 800527e:	e0c3      	b.n	8005408 <UART_SetConfig+0x348>
 8005280:	2310      	movs	r3, #16
 8005282:	77fb      	strb	r3, [r7, #31]
 8005284:	e0c0      	b.n	8005408 <UART_SetConfig+0x348>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a44      	ldr	r2, [pc, #272]	@ (800539c <UART_SetConfig+0x2dc>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d125      	bne.n	80052dc <UART_SetConfig+0x21c>
 8005290:	4b3e      	ldr	r3, [pc, #248]	@ (800538c <UART_SetConfig+0x2cc>)
 8005292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005296:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800529a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800529e:	d017      	beq.n	80052d0 <UART_SetConfig+0x210>
 80052a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052a4:	d817      	bhi.n	80052d6 <UART_SetConfig+0x216>
 80052a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052aa:	d00b      	beq.n	80052c4 <UART_SetConfig+0x204>
 80052ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052b0:	d811      	bhi.n	80052d6 <UART_SetConfig+0x216>
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <UART_SetConfig+0x1fe>
 80052b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052ba:	d006      	beq.n	80052ca <UART_SetConfig+0x20a>
 80052bc:	e00b      	b.n	80052d6 <UART_SetConfig+0x216>
 80052be:	2300      	movs	r3, #0
 80052c0:	77fb      	strb	r3, [r7, #31]
 80052c2:	e0a1      	b.n	8005408 <UART_SetConfig+0x348>
 80052c4:	2302      	movs	r3, #2
 80052c6:	77fb      	strb	r3, [r7, #31]
 80052c8:	e09e      	b.n	8005408 <UART_SetConfig+0x348>
 80052ca:	2304      	movs	r3, #4
 80052cc:	77fb      	strb	r3, [r7, #31]
 80052ce:	e09b      	b.n	8005408 <UART_SetConfig+0x348>
 80052d0:	2308      	movs	r3, #8
 80052d2:	77fb      	strb	r3, [r7, #31]
 80052d4:	e098      	b.n	8005408 <UART_SetConfig+0x348>
 80052d6:	2310      	movs	r3, #16
 80052d8:	77fb      	strb	r3, [r7, #31]
 80052da:	e095      	b.n	8005408 <UART_SetConfig+0x348>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a2f      	ldr	r2, [pc, #188]	@ (80053a0 <UART_SetConfig+0x2e0>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d125      	bne.n	8005332 <UART_SetConfig+0x272>
 80052e6:	4b29      	ldr	r3, [pc, #164]	@ (800538c <UART_SetConfig+0x2cc>)
 80052e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80052f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052f4:	d017      	beq.n	8005326 <UART_SetConfig+0x266>
 80052f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052fa:	d817      	bhi.n	800532c <UART_SetConfig+0x26c>
 80052fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005300:	d00b      	beq.n	800531a <UART_SetConfig+0x25a>
 8005302:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005306:	d811      	bhi.n	800532c <UART_SetConfig+0x26c>
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <UART_SetConfig+0x254>
 800530c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005310:	d006      	beq.n	8005320 <UART_SetConfig+0x260>
 8005312:	e00b      	b.n	800532c <UART_SetConfig+0x26c>
 8005314:	2301      	movs	r3, #1
 8005316:	77fb      	strb	r3, [r7, #31]
 8005318:	e076      	b.n	8005408 <UART_SetConfig+0x348>
 800531a:	2302      	movs	r3, #2
 800531c:	77fb      	strb	r3, [r7, #31]
 800531e:	e073      	b.n	8005408 <UART_SetConfig+0x348>
 8005320:	2304      	movs	r3, #4
 8005322:	77fb      	strb	r3, [r7, #31]
 8005324:	e070      	b.n	8005408 <UART_SetConfig+0x348>
 8005326:	2308      	movs	r3, #8
 8005328:	77fb      	strb	r3, [r7, #31]
 800532a:	e06d      	b.n	8005408 <UART_SetConfig+0x348>
 800532c:	2310      	movs	r3, #16
 800532e:	77fb      	strb	r3, [r7, #31]
 8005330:	e06a      	b.n	8005408 <UART_SetConfig+0x348>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a1b      	ldr	r2, [pc, #108]	@ (80053a4 <UART_SetConfig+0x2e4>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d138      	bne.n	80053ae <UART_SetConfig+0x2ee>
 800533c:	4b13      	ldr	r3, [pc, #76]	@ (800538c <UART_SetConfig+0x2cc>)
 800533e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005342:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005346:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800534a:	d017      	beq.n	800537c <UART_SetConfig+0x2bc>
 800534c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005350:	d82a      	bhi.n	80053a8 <UART_SetConfig+0x2e8>
 8005352:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005356:	d00b      	beq.n	8005370 <UART_SetConfig+0x2b0>
 8005358:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800535c:	d824      	bhi.n	80053a8 <UART_SetConfig+0x2e8>
 800535e:	2b00      	cmp	r3, #0
 8005360:	d003      	beq.n	800536a <UART_SetConfig+0x2aa>
 8005362:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005366:	d006      	beq.n	8005376 <UART_SetConfig+0x2b6>
 8005368:	e01e      	b.n	80053a8 <UART_SetConfig+0x2e8>
 800536a:	2300      	movs	r3, #0
 800536c:	77fb      	strb	r3, [r7, #31]
 800536e:	e04b      	b.n	8005408 <UART_SetConfig+0x348>
 8005370:	2302      	movs	r3, #2
 8005372:	77fb      	strb	r3, [r7, #31]
 8005374:	e048      	b.n	8005408 <UART_SetConfig+0x348>
 8005376:	2304      	movs	r3, #4
 8005378:	77fb      	strb	r3, [r7, #31]
 800537a:	e045      	b.n	8005408 <UART_SetConfig+0x348>
 800537c:	2308      	movs	r3, #8
 800537e:	77fb      	strb	r3, [r7, #31]
 8005380:	e042      	b.n	8005408 <UART_SetConfig+0x348>
 8005382:	bf00      	nop
 8005384:	efff69f3 	.word	0xefff69f3
 8005388:	40011000 	.word	0x40011000
 800538c:	40023800 	.word	0x40023800
 8005390:	40004400 	.word	0x40004400
 8005394:	40004800 	.word	0x40004800
 8005398:	40004c00 	.word	0x40004c00
 800539c:	40005000 	.word	0x40005000
 80053a0:	40011400 	.word	0x40011400
 80053a4:	40007800 	.word	0x40007800
 80053a8:	2310      	movs	r3, #16
 80053aa:	77fb      	strb	r3, [r7, #31]
 80053ac:	e02c      	b.n	8005408 <UART_SetConfig+0x348>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a72      	ldr	r2, [pc, #456]	@ (800557c <UART_SetConfig+0x4bc>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d125      	bne.n	8005404 <UART_SetConfig+0x344>
 80053b8:	4b71      	ldr	r3, [pc, #452]	@ (8005580 <UART_SetConfig+0x4c0>)
 80053ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053be:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80053c2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80053c6:	d017      	beq.n	80053f8 <UART_SetConfig+0x338>
 80053c8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80053cc:	d817      	bhi.n	80053fe <UART_SetConfig+0x33e>
 80053ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053d2:	d00b      	beq.n	80053ec <UART_SetConfig+0x32c>
 80053d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053d8:	d811      	bhi.n	80053fe <UART_SetConfig+0x33e>
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <UART_SetConfig+0x326>
 80053de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053e2:	d006      	beq.n	80053f2 <UART_SetConfig+0x332>
 80053e4:	e00b      	b.n	80053fe <UART_SetConfig+0x33e>
 80053e6:	2300      	movs	r3, #0
 80053e8:	77fb      	strb	r3, [r7, #31]
 80053ea:	e00d      	b.n	8005408 <UART_SetConfig+0x348>
 80053ec:	2302      	movs	r3, #2
 80053ee:	77fb      	strb	r3, [r7, #31]
 80053f0:	e00a      	b.n	8005408 <UART_SetConfig+0x348>
 80053f2:	2304      	movs	r3, #4
 80053f4:	77fb      	strb	r3, [r7, #31]
 80053f6:	e007      	b.n	8005408 <UART_SetConfig+0x348>
 80053f8:	2308      	movs	r3, #8
 80053fa:	77fb      	strb	r3, [r7, #31]
 80053fc:	e004      	b.n	8005408 <UART_SetConfig+0x348>
 80053fe:	2310      	movs	r3, #16
 8005400:	77fb      	strb	r3, [r7, #31]
 8005402:	e001      	b.n	8005408 <UART_SetConfig+0x348>
 8005404:	2310      	movs	r3, #16
 8005406:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005410:	d15b      	bne.n	80054ca <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005412:	7ffb      	ldrb	r3, [r7, #31]
 8005414:	2b08      	cmp	r3, #8
 8005416:	d828      	bhi.n	800546a <UART_SetConfig+0x3aa>
 8005418:	a201      	add	r2, pc, #4	@ (adr r2, 8005420 <UART_SetConfig+0x360>)
 800541a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541e:	bf00      	nop
 8005420:	08005445 	.word	0x08005445
 8005424:	0800544d 	.word	0x0800544d
 8005428:	08005455 	.word	0x08005455
 800542c:	0800546b 	.word	0x0800546b
 8005430:	0800545b 	.word	0x0800545b
 8005434:	0800546b 	.word	0x0800546b
 8005438:	0800546b 	.word	0x0800546b
 800543c:	0800546b 	.word	0x0800546b
 8005440:	08005463 	.word	0x08005463
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005444:	f7fd f9fe 	bl	8002844 <HAL_RCC_GetPCLK1Freq>
 8005448:	61b8      	str	r0, [r7, #24]
        break;
 800544a:	e013      	b.n	8005474 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800544c:	f7fd fa0e 	bl	800286c <HAL_RCC_GetPCLK2Freq>
 8005450:	61b8      	str	r0, [r7, #24]
        break;
 8005452:	e00f      	b.n	8005474 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005454:	4b4b      	ldr	r3, [pc, #300]	@ (8005584 <UART_SetConfig+0x4c4>)
 8005456:	61bb      	str	r3, [r7, #24]
        break;
 8005458:	e00c      	b.n	8005474 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800545a:	f7fd f921 	bl	80026a0 <HAL_RCC_GetSysClockFreq>
 800545e:	61b8      	str	r0, [r7, #24]
        break;
 8005460:	e008      	b.n	8005474 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005462:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005466:	61bb      	str	r3, [r7, #24]
        break;
 8005468:	e004      	b.n	8005474 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800546a:	2300      	movs	r3, #0
 800546c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	77bb      	strb	r3, [r7, #30]
        break;
 8005472:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d074      	beq.n	8005564 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	005a      	lsls	r2, r3, #1
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	085b      	lsrs	r3, r3, #1
 8005484:	441a      	add	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	fbb2 f3f3 	udiv	r3, r2, r3
 800548e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	2b0f      	cmp	r3, #15
 8005494:	d916      	bls.n	80054c4 <UART_SetConfig+0x404>
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800549c:	d212      	bcs.n	80054c4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	f023 030f 	bic.w	r3, r3, #15
 80054a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	085b      	lsrs	r3, r3, #1
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	f003 0307 	and.w	r3, r3, #7
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	89fb      	ldrh	r3, [r7, #14]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	89fa      	ldrh	r2, [r7, #14]
 80054c0:	60da      	str	r2, [r3, #12]
 80054c2:	e04f      	b.n	8005564 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	77bb      	strb	r3, [r7, #30]
 80054c8:	e04c      	b.n	8005564 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054ca:	7ffb      	ldrb	r3, [r7, #31]
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	d828      	bhi.n	8005522 <UART_SetConfig+0x462>
 80054d0:	a201      	add	r2, pc, #4	@ (adr r2, 80054d8 <UART_SetConfig+0x418>)
 80054d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d6:	bf00      	nop
 80054d8:	080054fd 	.word	0x080054fd
 80054dc:	08005505 	.word	0x08005505
 80054e0:	0800550d 	.word	0x0800550d
 80054e4:	08005523 	.word	0x08005523
 80054e8:	08005513 	.word	0x08005513
 80054ec:	08005523 	.word	0x08005523
 80054f0:	08005523 	.word	0x08005523
 80054f4:	08005523 	.word	0x08005523
 80054f8:	0800551b 	.word	0x0800551b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054fc:	f7fd f9a2 	bl	8002844 <HAL_RCC_GetPCLK1Freq>
 8005500:	61b8      	str	r0, [r7, #24]
        break;
 8005502:	e013      	b.n	800552c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005504:	f7fd f9b2 	bl	800286c <HAL_RCC_GetPCLK2Freq>
 8005508:	61b8      	str	r0, [r7, #24]
        break;
 800550a:	e00f      	b.n	800552c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800550c:	4b1d      	ldr	r3, [pc, #116]	@ (8005584 <UART_SetConfig+0x4c4>)
 800550e:	61bb      	str	r3, [r7, #24]
        break;
 8005510:	e00c      	b.n	800552c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005512:	f7fd f8c5 	bl	80026a0 <HAL_RCC_GetSysClockFreq>
 8005516:	61b8      	str	r0, [r7, #24]
        break;
 8005518:	e008      	b.n	800552c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800551a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800551e:	61bb      	str	r3, [r7, #24]
        break;
 8005520:	e004      	b.n	800552c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005522:	2300      	movs	r3, #0
 8005524:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	77bb      	strb	r3, [r7, #30]
        break;
 800552a:	bf00      	nop
    }

    if (pclk != 0U)
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d018      	beq.n	8005564 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	085a      	lsrs	r2, r3, #1
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	441a      	add	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	fbb2 f3f3 	udiv	r3, r2, r3
 8005544:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	2b0f      	cmp	r3, #15
 800554a:	d909      	bls.n	8005560 <UART_SetConfig+0x4a0>
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005552:	d205      	bcs.n	8005560 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	b29a      	uxth	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	60da      	str	r2, [r3, #12]
 800555e:	e001      	b.n	8005564 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005570:	7fbb      	ldrb	r3, [r7, #30]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3720      	adds	r7, #32
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	40007c00 	.word	0x40007c00
 8005580:	40023800 	.word	0x40023800
 8005584:	00f42400 	.word	0x00f42400

08005588 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005594:	f003 0308 	and.w	r3, r3, #8
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00a      	beq.n	80055b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00a      	beq.n	80055d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00a      	beq.n	80055f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	430a      	orrs	r2, r1
 80055f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fa:	f003 0304 	and.w	r3, r3, #4
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00a      	beq.n	8005618 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	430a      	orrs	r2, r1
 8005616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800561c:	f003 0310 	and.w	r3, r3, #16
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00a      	beq.n	800563a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	430a      	orrs	r2, r1
 8005638:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563e:	f003 0320 	and.w	r3, r3, #32
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00a      	beq.n	800565c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	430a      	orrs	r2, r1
 800565a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005664:	2b00      	cmp	r3, #0
 8005666:	d01a      	beq.n	800569e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	430a      	orrs	r2, r1
 800567c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005682:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005686:	d10a      	bne.n	800569e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	430a      	orrs	r2, r1
 800569c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00a      	beq.n	80056c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	430a      	orrs	r2, r1
 80056be:	605a      	str	r2, [r3, #4]
  }
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b098      	sub	sp, #96	@ 0x60
 80056d0:	af02      	add	r7, sp, #8
 80056d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056dc:	f7fb fcbc 	bl	8001058 <HAL_GetTick>
 80056e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0308 	and.w	r3, r3, #8
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d12e      	bne.n	800574e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056f8:	2200      	movs	r2, #0
 80056fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f88c 	bl	800581c <UART_WaitOnFlagUntilTimeout>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d021      	beq.n	800574e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005712:	e853 3f00 	ldrex	r3, [r3]
 8005716:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800571a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800571e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	461a      	mov	r2, r3
 8005726:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005728:	647b      	str	r3, [r7, #68]	@ 0x44
 800572a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800572e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005730:	e841 2300 	strex	r3, r2, [r1]
 8005734:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1e6      	bne.n	800570a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2220      	movs	r2, #32
 8005740:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e062      	b.n	8005814 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0304 	and.w	r3, r3, #4
 8005758:	2b04      	cmp	r3, #4
 800575a:	d149      	bne.n	80057f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800575c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005764:	2200      	movs	r2, #0
 8005766:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f856 	bl	800581c <UART_WaitOnFlagUntilTimeout>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d03c      	beq.n	80057f0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577e:	e853 3f00 	ldrex	r3, [r3]
 8005782:	623b      	str	r3, [r7, #32]
   return(result);
 8005784:	6a3b      	ldr	r3, [r7, #32]
 8005786:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800578a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	461a      	mov	r2, r3
 8005792:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005794:	633b      	str	r3, [r7, #48]	@ 0x30
 8005796:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005798:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800579a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800579c:	e841 2300 	strex	r3, r2, [r1]
 80057a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1e6      	bne.n	8005776 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	3308      	adds	r3, #8
 80057ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	e853 3f00 	ldrex	r3, [r3]
 80057b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 0301 	bic.w	r3, r3, #1
 80057be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	3308      	adds	r3, #8
 80057c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057c8:	61fa      	str	r2, [r7, #28]
 80057ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057cc:	69b9      	ldr	r1, [r7, #24]
 80057ce:	69fa      	ldr	r2, [r7, #28]
 80057d0:	e841 2300 	strex	r3, r2, [r1]
 80057d4:	617b      	str	r3, [r7, #20]
   return(result);
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1e5      	bne.n	80057a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2220      	movs	r2, #32
 80057e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e011      	b.n	8005814 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2220      	movs	r2, #32
 80057f4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2220      	movs	r2, #32
 80057fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3758      	adds	r7, #88	@ 0x58
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	603b      	str	r3, [r7, #0]
 8005828:	4613      	mov	r3, r2
 800582a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800582c:	e04f      	b.n	80058ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005834:	d04b      	beq.n	80058ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005836:	f7fb fc0f 	bl	8001058 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	429a      	cmp	r2, r3
 8005844:	d302      	bcc.n	800584c <UART_WaitOnFlagUntilTimeout+0x30>
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e04e      	b.n	80058ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0304 	and.w	r3, r3, #4
 800585a:	2b00      	cmp	r3, #0
 800585c:	d037      	beq.n	80058ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	2b80      	cmp	r3, #128	@ 0x80
 8005862:	d034      	beq.n	80058ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2b40      	cmp	r3, #64	@ 0x40
 8005868:	d031      	beq.n	80058ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	f003 0308 	and.w	r3, r3, #8
 8005874:	2b08      	cmp	r3, #8
 8005876:	d110      	bne.n	800589a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2208      	movs	r2, #8
 800587e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f000 f85e 	bl	8005942 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2208      	movs	r2, #8
 800588a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e029      	b.n	80058ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058a8:	d111      	bne.n	80058ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80058b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f000 f844 	bl	8005942 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2220      	movs	r2, #32
 80058be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e00f      	b.n	80058ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69da      	ldr	r2, [r3, #28]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	4013      	ands	r3, r2
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	429a      	cmp	r2, r3
 80058dc:	bf0c      	ite	eq
 80058de:	2301      	moveq	r3, #1
 80058e0:	2300      	movne	r3, #0
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	461a      	mov	r2, r3
 80058e6:	79fb      	ldrb	r3, [r7, #7]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d0a0      	beq.n	800582e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80058f6:	b480      	push	{r7}
 80058f8:	b089      	sub	sp, #36	@ 0x24
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	e853 3f00 	ldrex	r3, [r3]
 800590a:	60bb      	str	r3, [r7, #8]
   return(result);
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005912:	61fb      	str	r3, [r7, #28]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	461a      	mov	r2, r3
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	61bb      	str	r3, [r7, #24]
 800591e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005920:	6979      	ldr	r1, [r7, #20]
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	e841 2300 	strex	r3, r2, [r1]
 8005928:	613b      	str	r3, [r7, #16]
   return(result);
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1e6      	bne.n	80058fe <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2220      	movs	r2, #32
 8005934:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005936:	bf00      	nop
 8005938:	3724      	adds	r7, #36	@ 0x24
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005942:	b480      	push	{r7}
 8005944:	b095      	sub	sp, #84	@ 0x54
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005952:	e853 3f00 	ldrex	r3, [r3]
 8005956:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800595a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800595e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	461a      	mov	r2, r3
 8005966:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005968:	643b      	str	r3, [r7, #64]	@ 0x40
 800596a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800596e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005970:	e841 2300 	strex	r3, r2, [r1]
 8005974:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1e6      	bne.n	800594a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	3308      	adds	r3, #8
 8005982:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005984:	6a3b      	ldr	r3, [r7, #32]
 8005986:	e853 3f00 	ldrex	r3, [r3]
 800598a:	61fb      	str	r3, [r7, #28]
   return(result);
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	f023 0301 	bic.w	r3, r3, #1
 8005992:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3308      	adds	r3, #8
 800599a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800599c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800599e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059a4:	e841 2300 	strex	r3, r2, [r1]
 80059a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1e5      	bne.n	800597c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d118      	bne.n	80059ea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	e853 3f00 	ldrex	r3, [r3]
 80059c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	f023 0310 	bic.w	r3, r3, #16
 80059cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	461a      	mov	r2, r3
 80059d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059d6:	61bb      	str	r3, [r7, #24]
 80059d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059da:	6979      	ldr	r1, [r7, #20]
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	e841 2300 	strex	r3, r2, [r1]
 80059e2:	613b      	str	r3, [r7, #16]
   return(result);
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1e6      	bne.n	80059b8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2220      	movs	r2, #32
 80059ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80059fe:	bf00      	nop
 8005a00:	3754      	adds	r7, #84	@ 0x54
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b090      	sub	sp, #64	@ 0x40
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a16:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	69db      	ldr	r3, [r3, #28]
 8005a1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a20:	d037      	beq.n	8005a92 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8005a22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a24:	2200      	movs	r2, #0
 8005a26:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	3308      	adds	r3, #8
 8005a30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a34:	e853 3f00 	ldrex	r3, [r3]
 8005a38:	623b      	str	r3, [r7, #32]
   return(result);
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	3308      	adds	r3, #8
 8005a48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a4a:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a52:	e841 2300 	strex	r3, r2, [r1]
 8005a56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1e5      	bne.n	8005a2a <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	e853 3f00 	ldrex	r3, [r3]
 8005a6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a72:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	461a      	mov	r2, r3
 8005a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a7c:	61fb      	str	r3, [r7, #28]
 8005a7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a80:	69b9      	ldr	r1, [r7, #24]
 8005a82:	69fa      	ldr	r2, [r7, #28]
 8005a84:	e841 2300 	strex	r3, r2, [r1]
 8005a88:	617b      	str	r3, [r7, #20]
   return(result);
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1e6      	bne.n	8005a5e <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a90:	e002      	b.n	8005a98 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8005a92:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005a94:	f7ff fae0 	bl	8005058 <HAL_UART_TxCpltCallback>
}
 8005a98:	bf00      	nop
 8005a9a:	3740      	adds	r7, #64	@ 0x40
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aac:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f7ff fadc 	bl	800506c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ab4:	bf00      	nop
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ace:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ae2:	2b80      	cmp	r3, #128	@ 0x80
 8005ae4:	d109      	bne.n	8005afa <UART_DMAError+0x3e>
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	2b21      	cmp	r3, #33	@ 0x21
 8005aea:	d106      	bne.n	8005afa <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8005af4:	6978      	ldr	r0, [r7, #20]
 8005af6:	f7ff fefe 	bl	80058f6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b04:	2b40      	cmp	r3, #64	@ 0x40
 8005b06:	d109      	bne.n	8005b1c <UART_DMAError+0x60>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2b22      	cmp	r3, #34	@ 0x22
 8005b0c:	d106      	bne.n	8005b1c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8005b16:	6978      	ldr	r0, [r7, #20]
 8005b18:	f7ff ff13 	bl	8005942 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b22:	f043 0210 	orr.w	r2, r3, #16
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b2c:	6978      	ldr	r0, [r7, #20]
 8005b2e:	f7ff faa7 	bl	8005080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b32:	bf00      	nop
 8005b34:	3718      	adds	r7, #24
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b084      	sub	sp, #16
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f7ff fa91 	bl	8005080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b5e:	bf00      	nop
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b088      	sub	sp, #32
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	e853 3f00 	ldrex	r3, [r3]
 8005b7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b82:	61fb      	str	r3, [r7, #28]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	461a      	mov	r2, r3
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	61bb      	str	r3, [r7, #24]
 8005b8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b90:	6979      	ldr	r1, [r7, #20]
 8005b92:	69ba      	ldr	r2, [r7, #24]
 8005b94:	e841 2300 	strex	r3, r2, [r1]
 8005b98:	613b      	str	r3, [r7, #16]
   return(result);
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1e6      	bne.n	8005b6e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f7ff fa53 	bl	8005058 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bb2:	bf00      	nop
 8005bb4:	3720      	adds	r7, #32
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <memset>:
 8005bba:	4402      	add	r2, r0
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d100      	bne.n	8005bc4 <memset+0xa>
 8005bc2:	4770      	bx	lr
 8005bc4:	f803 1b01 	strb.w	r1, [r3], #1
 8005bc8:	e7f9      	b.n	8005bbe <memset+0x4>
	...

08005bcc <__libc_init_array>:
 8005bcc:	b570      	push	{r4, r5, r6, lr}
 8005bce:	4d0d      	ldr	r5, [pc, #52]	@ (8005c04 <__libc_init_array+0x38>)
 8005bd0:	4c0d      	ldr	r4, [pc, #52]	@ (8005c08 <__libc_init_array+0x3c>)
 8005bd2:	1b64      	subs	r4, r4, r5
 8005bd4:	10a4      	asrs	r4, r4, #2
 8005bd6:	2600      	movs	r6, #0
 8005bd8:	42a6      	cmp	r6, r4
 8005bda:	d109      	bne.n	8005bf0 <__libc_init_array+0x24>
 8005bdc:	4d0b      	ldr	r5, [pc, #44]	@ (8005c0c <__libc_init_array+0x40>)
 8005bde:	4c0c      	ldr	r4, [pc, #48]	@ (8005c10 <__libc_init_array+0x44>)
 8005be0:	f000 f818 	bl	8005c14 <_init>
 8005be4:	1b64      	subs	r4, r4, r5
 8005be6:	10a4      	asrs	r4, r4, #2
 8005be8:	2600      	movs	r6, #0
 8005bea:	42a6      	cmp	r6, r4
 8005bec:	d105      	bne.n	8005bfa <__libc_init_array+0x2e>
 8005bee:	bd70      	pop	{r4, r5, r6, pc}
 8005bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bf4:	4798      	blx	r3
 8005bf6:	3601      	adds	r6, #1
 8005bf8:	e7ee      	b.n	8005bd8 <__libc_init_array+0xc>
 8005bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bfe:	4798      	blx	r3
 8005c00:	3601      	adds	r6, #1
 8005c02:	e7f2      	b.n	8005bea <__libc_init_array+0x1e>
 8005c04:	08005c54 	.word	0x08005c54
 8005c08:	08005c54 	.word	0x08005c54
 8005c0c:	08005c54 	.word	0x08005c54
 8005c10:	08005c58 	.word	0x08005c58

08005c14 <_init>:
 8005c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c16:	bf00      	nop
 8005c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c1a:	bc08      	pop	{r3}
 8005c1c:	469e      	mov	lr, r3
 8005c1e:	4770      	bx	lr

08005c20 <_fini>:
 8005c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c22:	bf00      	nop
 8005c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c26:	bc08      	pop	{r3}
 8005c28:	469e      	mov	lr, r3
 8005c2a:	4770      	bx	lr
