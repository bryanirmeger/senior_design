
jetson_comm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000539c  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08005594  08005594  00006594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055c0  080055c0  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080055c0  080055c0  000065c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055c8  080055c8  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055c8  080055c8  000065c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080055cc  080055cc  000065cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080055d0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000010  080055e0  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  080055e0  00007260  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f578  00000000  00000000  0000703e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e7e  00000000  00000000  000165b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  00018438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a4d  00000000  00000000  00019150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027741  00000000  00000000  00019b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fddb  00000000  00000000  000412de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000facb3  00000000  00000000  000510b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014bd6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000378c  00000000  00000000  0014bdb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0014f53c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000010 	.word	0x20000010
 8000214:	00000000 	.word	0x00000000
 8000218:	0800557c 	.word	0x0800557c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000014 	.word	0x20000014
 8000234:	0800557c 	.word	0x0800557c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b988 	b.w	8000560 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	468e      	mov	lr, r1
 8000270:	4604      	mov	r4, r0
 8000272:	4688      	mov	r8, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d962      	bls.n	8000344 <__udivmoddi4+0xdc>
 800027e:	fab2 f682 	clz	r6, r2
 8000282:	b14e      	cbz	r6, 8000298 <__udivmoddi4+0x30>
 8000284:	f1c6 0320 	rsb	r3, r6, #32
 8000288:	fa01 f806 	lsl.w	r8, r1, r6
 800028c:	fa20 f303 	lsr.w	r3, r0, r3
 8000290:	40b7      	lsls	r7, r6
 8000292:	ea43 0808 	orr.w	r8, r3, r8
 8000296:	40b4      	lsls	r4, r6
 8000298:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800029c:	fa1f fc87 	uxth.w	ip, r7
 80002a0:	fbb8 f1fe 	udiv	r1, r8, lr
 80002a4:	0c23      	lsrs	r3, r4, #16
 80002a6:	fb0e 8811 	mls	r8, lr, r1, r8
 80002aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ae:	fb01 f20c 	mul.w	r2, r1, ip
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002bc:	f080 80ea 	bcs.w	8000494 <__udivmoddi4+0x22c>
 80002c0:	429a      	cmp	r2, r3
 80002c2:	f240 80e7 	bls.w	8000494 <__udivmoddi4+0x22c>
 80002c6:	3902      	subs	r1, #2
 80002c8:	443b      	add	r3, r7
 80002ca:	1a9a      	subs	r2, r3, r2
 80002cc:	b2a3      	uxth	r3, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002da:	fb00 fc0c 	mul.w	ip, r0, ip
 80002de:	459c      	cmp	ip, r3
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0x8e>
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e8:	f080 80d6 	bcs.w	8000498 <__udivmoddi4+0x230>
 80002ec:	459c      	cmp	ip, r3
 80002ee:	f240 80d3 	bls.w	8000498 <__udivmoddi4+0x230>
 80002f2:	443b      	add	r3, r7
 80002f4:	3802      	subs	r0, #2
 80002f6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fa:	eba3 030c 	sub.w	r3, r3, ip
 80002fe:	2100      	movs	r1, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0xa2>
 8000302:	40f3      	lsrs	r3, r6
 8000304:	2200      	movs	r2, #0
 8000306:	e9c5 3200 	strd	r3, r2, [r5]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d905      	bls.n	800031e <__udivmoddi4+0xb6>
 8000312:	b10d      	cbz	r5, 8000318 <__udivmoddi4+0xb0>
 8000314:	e9c5 0100 	strd	r0, r1, [r5]
 8000318:	2100      	movs	r1, #0
 800031a:	4608      	mov	r0, r1
 800031c:	e7f5      	b.n	800030a <__udivmoddi4+0xa2>
 800031e:	fab3 f183 	clz	r1, r3
 8000322:	2900      	cmp	r1, #0
 8000324:	d146      	bne.n	80003b4 <__udivmoddi4+0x14c>
 8000326:	4573      	cmp	r3, lr
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xc8>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 8105 	bhi.w	800053a <__udivmoddi4+0x2d2>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb6e 0203 	sbc.w	r2, lr, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4690      	mov	r8, r2
 800033a:	2d00      	cmp	r5, #0
 800033c:	d0e5      	beq.n	800030a <__udivmoddi4+0xa2>
 800033e:	e9c5 4800 	strd	r4, r8, [r5]
 8000342:	e7e2      	b.n	800030a <__udivmoddi4+0xa2>
 8000344:	2a00      	cmp	r2, #0
 8000346:	f000 8090 	beq.w	800046a <__udivmoddi4+0x202>
 800034a:	fab2 f682 	clz	r6, r2
 800034e:	2e00      	cmp	r6, #0
 8000350:	f040 80a4 	bne.w	800049c <__udivmoddi4+0x234>
 8000354:	1a8a      	subs	r2, r1, r2
 8000356:	0c03      	lsrs	r3, r0, #16
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	b280      	uxth	r0, r0
 800035e:	b2bc      	uxth	r4, r7
 8000360:	2101      	movs	r1, #1
 8000362:	fbb2 fcfe 	udiv	ip, r2, lr
 8000366:	fb0e 221c 	mls	r2, lr, ip, r2
 800036a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800036e:	fb04 f20c 	mul.w	r2, r4, ip
 8000372:	429a      	cmp	r2, r3
 8000374:	d907      	bls.n	8000386 <__udivmoddi4+0x11e>
 8000376:	18fb      	adds	r3, r7, r3
 8000378:	f10c 38ff 	add.w	r8, ip, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x11c>
 800037e:	429a      	cmp	r2, r3
 8000380:	f200 80e0 	bhi.w	8000544 <__udivmoddi4+0x2dc>
 8000384:	46c4      	mov	ip, r8
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	fbb3 f2fe 	udiv	r2, r3, lr
 800038c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000390:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000394:	fb02 f404 	mul.w	r4, r2, r4
 8000398:	429c      	cmp	r4, r3
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x144>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f102 30ff 	add.w	r0, r2, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x142>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f200 80ca 	bhi.w	800053e <__udivmoddi4+0x2d6>
 80003aa:	4602      	mov	r2, r0
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0x98>
 80003b4:	f1c1 0620 	rsb	r6, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 f706 	lsr.w	r7, r2, r6
 80003be:	431f      	orrs	r7, r3
 80003c0:	fa0e f401 	lsl.w	r4, lr, r1
 80003c4:	fa20 f306 	lsr.w	r3, r0, r6
 80003c8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003cc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d0:	4323      	orrs	r3, r4
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	fa1f fc87 	uxth.w	ip, r7
 80003da:	fbbe f0f9 	udiv	r0, lr, r9
 80003de:	0c1c      	lsrs	r4, r3, #16
 80003e0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003e4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003ec:	45a6      	cmp	lr, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d909      	bls.n	8000408 <__udivmoddi4+0x1a0>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003fa:	f080 809c 	bcs.w	8000536 <__udivmoddi4+0x2ce>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f240 8099 	bls.w	8000536 <__udivmoddi4+0x2ce>
 8000404:	3802      	subs	r0, #2
 8000406:	443c      	add	r4, r7
 8000408:	eba4 040e 	sub.w	r4, r4, lr
 800040c:	fa1f fe83 	uxth.w	lr, r3
 8000410:	fbb4 f3f9 	udiv	r3, r4, r9
 8000414:	fb09 4413 	mls	r4, r9, r3, r4
 8000418:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800041c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000420:	45a4      	cmp	ip, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1ce>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f103 3eff 	add.w	lr, r3, #4294967295
 800042a:	f080 8082 	bcs.w	8000532 <__udivmoddi4+0x2ca>
 800042e:	45a4      	cmp	ip, r4
 8000430:	d97f      	bls.n	8000532 <__udivmoddi4+0x2ca>
 8000432:	3b02      	subs	r3, #2
 8000434:	443c      	add	r4, r7
 8000436:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000442:	4564      	cmp	r4, ip
 8000444:	4673      	mov	r3, lr
 8000446:	46e1      	mov	r9, ip
 8000448:	d362      	bcc.n	8000510 <__udivmoddi4+0x2a8>
 800044a:	d05f      	beq.n	800050c <__udivmoddi4+0x2a4>
 800044c:	b15d      	cbz	r5, 8000466 <__udivmoddi4+0x1fe>
 800044e:	ebb8 0203 	subs.w	r2, r8, r3
 8000452:	eb64 0409 	sbc.w	r4, r4, r9
 8000456:	fa04 f606 	lsl.w	r6, r4, r6
 800045a:	fa22 f301 	lsr.w	r3, r2, r1
 800045e:	431e      	orrs	r6, r3
 8000460:	40cc      	lsrs	r4, r1
 8000462:	e9c5 6400 	strd	r6, r4, [r5]
 8000466:	2100      	movs	r1, #0
 8000468:	e74f      	b.n	800030a <__udivmoddi4+0xa2>
 800046a:	fbb1 fcf2 	udiv	ip, r1, r2
 800046e:	0c01      	lsrs	r1, r0, #16
 8000470:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000474:	b280      	uxth	r0, r0
 8000476:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800047a:	463b      	mov	r3, r7
 800047c:	4638      	mov	r0, r7
 800047e:	463c      	mov	r4, r7
 8000480:	46b8      	mov	r8, r7
 8000482:	46be      	mov	lr, r7
 8000484:	2620      	movs	r6, #32
 8000486:	fbb1 f1f7 	udiv	r1, r1, r7
 800048a:	eba2 0208 	sub.w	r2, r2, r8
 800048e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000492:	e766      	b.n	8000362 <__udivmoddi4+0xfa>
 8000494:	4601      	mov	r1, r0
 8000496:	e718      	b.n	80002ca <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e72c      	b.n	80002f6 <__udivmoddi4+0x8e>
 800049c:	f1c6 0220 	rsb	r2, r6, #32
 80004a0:	fa2e f302 	lsr.w	r3, lr, r2
 80004a4:	40b7      	lsls	r7, r6
 80004a6:	40b1      	lsls	r1, r6
 80004a8:	fa20 f202 	lsr.w	r2, r0, r2
 80004ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b0:	430a      	orrs	r2, r1
 80004b2:	fbb3 f8fe 	udiv	r8, r3, lr
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	fb0e 3318 	mls	r3, lr, r8, r3
 80004bc:	0c11      	lsrs	r1, r2, #16
 80004be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c2:	fb08 f904 	mul.w	r9, r8, r4
 80004c6:	40b0      	lsls	r0, r6
 80004c8:	4589      	cmp	r9, r1
 80004ca:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ce:	b280      	uxth	r0, r0
 80004d0:	d93e      	bls.n	8000550 <__udivmoddi4+0x2e8>
 80004d2:	1879      	adds	r1, r7, r1
 80004d4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d8:	d201      	bcs.n	80004de <__udivmoddi4+0x276>
 80004da:	4589      	cmp	r9, r1
 80004dc:	d81f      	bhi.n	800051e <__udivmoddi4+0x2b6>
 80004de:	eba1 0109 	sub.w	r1, r1, r9
 80004e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e6:	fb09 f804 	mul.w	r8, r9, r4
 80004ea:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ee:	b292      	uxth	r2, r2
 80004f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f4:	4542      	cmp	r2, r8
 80004f6:	d229      	bcs.n	800054c <__udivmoddi4+0x2e4>
 80004f8:	18ba      	adds	r2, r7, r2
 80004fa:	f109 31ff 	add.w	r1, r9, #4294967295
 80004fe:	d2c4      	bcs.n	800048a <__udivmoddi4+0x222>
 8000500:	4542      	cmp	r2, r8
 8000502:	d2c2      	bcs.n	800048a <__udivmoddi4+0x222>
 8000504:	f1a9 0102 	sub.w	r1, r9, #2
 8000508:	443a      	add	r2, r7
 800050a:	e7be      	b.n	800048a <__udivmoddi4+0x222>
 800050c:	45f0      	cmp	r8, lr
 800050e:	d29d      	bcs.n	800044c <__udivmoddi4+0x1e4>
 8000510:	ebbe 0302 	subs.w	r3, lr, r2
 8000514:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000518:	3801      	subs	r0, #1
 800051a:	46e1      	mov	r9, ip
 800051c:	e796      	b.n	800044c <__udivmoddi4+0x1e4>
 800051e:	eba7 0909 	sub.w	r9, r7, r9
 8000522:	4449      	add	r1, r9
 8000524:	f1a8 0c02 	sub.w	ip, r8, #2
 8000528:	fbb1 f9fe 	udiv	r9, r1, lr
 800052c:	fb09 f804 	mul.w	r8, r9, r4
 8000530:	e7db      	b.n	80004ea <__udivmoddi4+0x282>
 8000532:	4673      	mov	r3, lr
 8000534:	e77f      	b.n	8000436 <__udivmoddi4+0x1ce>
 8000536:	4650      	mov	r0, sl
 8000538:	e766      	b.n	8000408 <__udivmoddi4+0x1a0>
 800053a:	4608      	mov	r0, r1
 800053c:	e6fd      	b.n	800033a <__udivmoddi4+0xd2>
 800053e:	443b      	add	r3, r7
 8000540:	3a02      	subs	r2, #2
 8000542:	e733      	b.n	80003ac <__udivmoddi4+0x144>
 8000544:	f1ac 0c02 	sub.w	ip, ip, #2
 8000548:	443b      	add	r3, r7
 800054a:	e71c      	b.n	8000386 <__udivmoddi4+0x11e>
 800054c:	4649      	mov	r1, r9
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x222>
 8000550:	eba1 0109 	sub.w	r1, r1, r9
 8000554:	46c4      	mov	ip, r8
 8000556:	fbb1 f9fe 	udiv	r9, r1, lr
 800055a:	fb09 f804 	mul.w	r8, r9, r4
 800055e:	e7c4      	b.n	80004ea <__udivmoddi4+0x282>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <j_command>:
uint8_t h5_is_sent = 0;

const char* led_command = "00000led";

//interpret jetson command
void j_command(void) {
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	//command to toggle led on board
	//using strstr because of the address byte
	if(strstr((const char *)j_rx_data, led_command)) {
 8000568:	4b07      	ldr	r3, [pc, #28]	@ (8000588 <j_command+0x24>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4619      	mov	r1, r3
 800056e:	4807      	ldr	r0, [pc, #28]	@ (800058c <j_command+0x28>)
 8000570:	f004 ffca 	bl	8005508 <strstr>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d003      	beq.n	8000582 <j_command+0x1e>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800057a:	2180      	movs	r1, #128	@ 0x80
 800057c:	4804      	ldr	r0, [pc, #16]	@ (8000590 <j_command+0x2c>)
 800057e:	f001 fc64 	bl	8001e4a <HAL_GPIO_TogglePin>
	}
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	20000000 	.word	0x20000000
 800058c:	20000248 	.word	0x20000248
 8000590:	40020400 	.word	0x40020400

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800059a:	f000 fa23 	bl	80009e4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059e:	f000 fc7a 	bl	8000e96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a2:	f000 f82b 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a6:	f000 f981 	bl	80008ac <MX_GPIO_Init>
  MX_DMA_Init();
 80005aa:	f000 f959 	bl	8000860 <MX_DMA_Init>
  MX_TIM1_Init();
 80005ae:	f000 f881 	bl	80006b4 <MX_TIM1_Init>
  MX_UART4_Init();
 80005b2:	f000 f8f5 	bl	80007a0 <MX_UART4_Init>
  MX_UART5_Init();
 80005b6:	f000 f923 	bl	8000800 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  uint8_t loop[4] = {'l','o','o','p'};
 80005ba:	4b0b      	ldr	r3, [pc, #44]	@ (80005e8 <main+0x54>)
 80005bc:	607b      	str	r3, [r7, #4]
  HAL_UART_Receive_IT(&huart5,r_rx_data,8);
 80005be:	2208      	movs	r2, #8
 80005c0:	490a      	ldr	r1, [pc, #40]	@ (80005ec <main+0x58>)
 80005c2:	480b      	ldr	r0, [pc, #44]	@ (80005f0 <main+0x5c>)
 80005c4:	f003 fbda 	bl	8003d7c <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80005c8:	2180      	movs	r1, #128	@ 0x80
 80005ca:	480a      	ldr	r0, [pc, #40]	@ (80005f4 <main+0x60>)
 80005cc:	f001 fc3d 	bl	8001e4a <HAL_GPIO_TogglePin>
	  HAL_UART_Transmit_DMA(&huart4, loop, 4);
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2204      	movs	r2, #4
 80005d4:	4619      	mov	r1, r3
 80005d6:	4808      	ldr	r0, [pc, #32]	@ (80005f8 <main+0x64>)
 80005d8:	f003 fc14 	bl	8003e04 <HAL_UART_Transmit_DMA>
	  HAL_Delay(10000);
 80005dc:	f242 7010 	movw	r0, #10000	@ 0x2710
 80005e0:	f000 fcb6 	bl	8000f50 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80005e4:	bf00      	nop
 80005e6:	e7ef      	b.n	80005c8 <main+0x34>
 80005e8:	706f6f6c 	.word	0x706f6f6c
 80005ec:	20000250 	.word	0x20000250
 80005f0:	20000100 	.word	0x20000100
 80005f4:	40020400 	.word	0x40020400
 80005f8:	20000078 	.word	0x20000078

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	@ 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 031c 	add.w	r3, r7, #28
 8000606:	2234      	movs	r2, #52	@ 0x34
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f004 ff74 	bl	80054f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 0308 	add.w	r3, r7, #8
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	4b22      	ldr	r3, [pc, #136]	@ (80006ac <SystemClock_Config+0xb0>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000624:	4a21      	ldr	r2, [pc, #132]	@ (80006ac <SystemClock_Config+0xb0>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	@ 0x40
 800062c:	4b1f      	ldr	r3, [pc, #124]	@ (80006ac <SystemClock_Config+0xb0>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000638:	4b1d      	ldr	r3, [pc, #116]	@ (80006b0 <SystemClock_Config+0xb4>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000640:	4a1b      	ldr	r2, [pc, #108]	@ (80006b0 <SystemClock_Config+0xb4>)
 8000642:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b19      	ldr	r3, [pc, #100]	@ (80006b0 <SystemClock_Config+0xb4>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000654:	2302      	movs	r3, #2
 8000656:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000658:	2301      	movs	r3, #1
 800065a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065c:	2310      	movs	r3, #16
 800065e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000660:	2300      	movs	r3, #0
 8000662:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 031c 	add.w	r3, r7, #28
 8000668:	4618      	mov	r0, r3
 800066a:	f001 fc09 	bl	8001e80 <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000674:	f000 f9e2 	bl	8000a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	230f      	movs	r3, #15
 800067a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800067c:	2300      	movs	r3, #0
 800067e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800068c:	f107 0308 	add.w	r3, r7, #8
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f001 fea2 	bl	80023dc <HAL_RCC_ClockConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800069e:	f000 f9cd 	bl	8000a3c <Error_Handler>
  }
}
 80006a2:	bf00      	nop
 80006a4:	3750      	adds	r7, #80	@ 0x50
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40007000 	.word	0x40007000

080006b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08c      	sub	sp, #48	@ 0x30
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006e0:	4b2d      	ldr	r3, [pc, #180]	@ (8000798 <MX_TIM1_Init+0xe4>)
 80006e2:	4a2e      	ldr	r2, [pc, #184]	@ (800079c <MX_TIM1_Init+0xe8>)
 80006e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 80006e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000798 <MX_TIM1_Init+0xe4>)
 80006e8:	2203      	movs	r2, #3
 80006ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000798 <MX_TIM1_Init+0xe4>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39999;
 80006f2:	4b29      	ldr	r3, [pc, #164]	@ (8000798 <MX_TIM1_Init+0xe4>)
 80006f4:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80006f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006fa:	4b27      	ldr	r3, [pc, #156]	@ (8000798 <MX_TIM1_Init+0xe4>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000700:	4b25      	ldr	r3, [pc, #148]	@ (8000798 <MX_TIM1_Init+0xe4>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000706:	4b24      	ldr	r3, [pc, #144]	@ (8000798 <MX_TIM1_Init+0xe4>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800070c:	4822      	ldr	r0, [pc, #136]	@ (8000798 <MX_TIM1_Init+0xe4>)
 800070e:	f002 fc73 	bl	8002ff8 <HAL_TIM_Base_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000718:	f000 f990 	bl	8000a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800071c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000720:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000722:	f107 0320 	add.w	r3, r7, #32
 8000726:	4619      	mov	r1, r3
 8000728:	481b      	ldr	r0, [pc, #108]	@ (8000798 <MX_TIM1_Init+0xe4>)
 800072a:	f002 fec1 	bl	80034b0 <HAL_TIM_ConfigClockSource>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000734:	f000 f982 	bl	8000a3c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000738:	4817      	ldr	r0, [pc, #92]	@ (8000798 <MX_TIM1_Init+0xe4>)
 800073a:	f002 fcb4 	bl	80030a6 <HAL_TIM_IC_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000744:	f000 f97a 	bl	8000a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	4619      	mov	r1, r3
 800075a:	480f      	ldr	r0, [pc, #60]	@ (8000798 <MX_TIM1_Init+0xe4>)
 800075c:	f003 fa14 	bl	8003b88 <HAL_TIMEx_MasterConfigSynchronization>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000766:	f000 f969 	bl	8000a3c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800076e:	2301      	movs	r3, #1
 8000770:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	2200      	movs	r2, #0
 800077e:	4619      	mov	r1, r3
 8000780:	4805      	ldr	r0, [pc, #20]	@ (8000798 <MX_TIM1_Init+0xe4>)
 8000782:	f002 fdf8 	bl	8003376 <HAL_TIM_IC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 800078c:	f000 f956 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	3730      	adds	r7, #48	@ 0x30
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	2000002c 	.word	0x2000002c
 800079c:	40010000 	.word	0x40010000

080007a0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80007a4:	4b14      	ldr	r3, [pc, #80]	@ (80007f8 <MX_UART4_Init+0x58>)
 80007a6:	4a15      	ldr	r2, [pc, #84]	@ (80007fc <MX_UART4_Init+0x5c>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80007aa:	4b13      	ldr	r3, [pc, #76]	@ (80007f8 <MX_UART4_Init+0x58>)
 80007ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007b0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <MX_UART4_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <MX_UART4_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <MX_UART4_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <MX_UART4_Init+0x58>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	@ (80007f8 <MX_UART4_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <MX_UART4_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	@ (80007f8 <MX_UART4_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007dc:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <MX_UART4_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	@ (80007f8 <MX_UART4_Init+0x58>)
 80007e4:	f003 fa7c 	bl	8003ce0 <HAL_UART_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80007ee:	f000 f925 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000078 	.word	0x20000078
 80007fc:	40004c00 	.word	0x40004c00

08000800 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000804:	4b14      	ldr	r3, [pc, #80]	@ (8000858 <MX_UART5_Init+0x58>)
 8000806:	4a15      	ldr	r2, [pc, #84]	@ (800085c <MX_UART5_Init+0x5c>)
 8000808:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800080a:	4b13      	ldr	r3, [pc, #76]	@ (8000858 <MX_UART5_Init+0x58>)
 800080c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000810:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000812:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <MX_UART5_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000818:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <MX_UART5_Init+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <MX_UART5_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000824:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <MX_UART5_Init+0x58>)
 8000826:	220c      	movs	r2, #12
 8000828:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	@ (8000858 <MX_UART5_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000830:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <MX_UART5_Init+0x58>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000836:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <MX_UART5_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800083c:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <MX_UART5_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	@ (8000858 <MX_UART5_Init+0x58>)
 8000844:	f003 fa4c 	bl	8003ce0 <HAL_UART_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800084e:	f000 f8f5 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000100 	.word	0x20000100
 800085c:	40005000 	.word	0x40005000

08000860 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000866:	4b10      	ldr	r3, [pc, #64]	@ (80008a8 <MX_DMA_Init+0x48>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a0f      	ldr	r2, [pc, #60]	@ (80008a8 <MX_DMA_Init+0x48>)
 800086c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b0d      	ldr	r3, [pc, #52]	@ (80008a8 <MX_DMA_Init+0x48>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	200f      	movs	r0, #15
 8000884:	f000 fc63 	bl	800114e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000888:	200f      	movs	r0, #15
 800088a:	f000 fc7c 	bl	8001186 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2100      	movs	r1, #0
 8000892:	202f      	movs	r0, #47	@ 0x2f
 8000894:	f000 fc5b 	bl	800114e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000898:	202f      	movs	r0, #47	@ 0x2f
 800089a:	f000 fc74 	bl	8001186 <HAL_NVIC_EnableIRQ>

}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800

080008ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	f107 030c 	add.w	r3, r7, #12
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000938 <MX_GPIO_Init+0x8c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000938 <MX_GPIO_Init+0x8c>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000938 <MX_GPIO_Init+0x8c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008da:	4b17      	ldr	r3, [pc, #92]	@ (8000938 <MX_GPIO_Init+0x8c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a16      	ldr	r2, [pc, #88]	@ (8000938 <MX_GPIO_Init+0x8c>)
 80008e0:	f043 0310 	orr.w	r3, r3, #16
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b14      	ldr	r3, [pc, #80]	@ (8000938 <MX_GPIO_Init+0x8c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0310 	and.w	r3, r3, #16
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	4b11      	ldr	r3, [pc, #68]	@ (8000938 <MX_GPIO_Init+0x8c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	4a10      	ldr	r2, [pc, #64]	@ (8000938 <MX_GPIO_Init+0x8c>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <MX_GPIO_Init+0x8c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	2180      	movs	r1, #128	@ 0x80
 800090e:	480b      	ldr	r0, [pc, #44]	@ (800093c <MX_GPIO_Init+0x90>)
 8000910:	f001 fa82 	bl	8001e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000914:	2380      	movs	r3, #128	@ 0x80
 8000916:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	4619      	mov	r1, r3
 800092a:	4804      	ldr	r0, [pc, #16]	@ (800093c <MX_GPIO_Init+0x90>)
 800092c:	f001 f8c8 	bl	8001ac0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000930:	bf00      	nop
 8000932:	3720      	adds	r7, #32
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40023800 	.word	0x40023800
 800093c:	40020400 	.word	0x40020400

08000940 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
//user functions
//tx interrupt hander
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == UART4) {
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a0a      	ldr	r2, [pc, #40]	@ (8000978 <HAL_UART_TxCpltCallback+0x38>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d103      	bne.n	800095a <HAL_UART_TxCpltCallback+0x1a>
		h4_is_sent = 1;
 8000952:	4b0a      	ldr	r3, [pc, #40]	@ (800097c <HAL_UART_TxCpltCallback+0x3c>)
 8000954:	2201      	movs	r2, #1
 8000956:	701a      	strb	r2, [r3, #0]
	}
	else if (huart -> Instance == UART5) {
		h5_is_sent = 1;
	}
}
 8000958:	e007      	b.n	800096a <HAL_UART_TxCpltCallback+0x2a>
	else if (huart -> Instance == UART5) {
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a08      	ldr	r2, [pc, #32]	@ (8000980 <HAL_UART_TxCpltCallback+0x40>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d102      	bne.n	800096a <HAL_UART_TxCpltCallback+0x2a>
		h5_is_sent = 1;
 8000964:	4b07      	ldr	r3, [pc, #28]	@ (8000984 <HAL_UART_TxCpltCallback+0x44>)
 8000966:	2201      	movs	r2, #1
 8000968:	701a      	strb	r2, [r3, #0]
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	40004c00 	.word	0x40004c00
 800097c:	20000258 	.word	0x20000258
 8000980:	40005000 	.word	0x40005000
 8000984:	20000259 	.word	0x20000259

08000988 <HAL_UART_RxCpltCallback>:

//rx interrupt handler
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	//check for if its from Jetson or Robot
	//Jetson sends expected commands for the data
	if (huart->Instance == huart4.Instance) {
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <HAL_UART_RxCpltCallback+0x4c>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	429a      	cmp	r2, r3
 800099a:	d112      	bne.n	80009c2 <HAL_UART_RxCpltCallback+0x3a>
		//check address
		//if address is 3, send to robot micro via uart 5
		if((char)(j_rx_data[0]) == '3') {
 800099c:	4b0e      	ldr	r3, [pc, #56]	@ (80009d8 <HAL_UART_RxCpltCallback+0x50>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b33      	cmp	r3, #51	@ 0x33
 80009a2:	d108      	bne.n	80009b6 <HAL_UART_RxCpltCallback+0x2e>
			HAL_UART_Transmit_DMA(&huart5, j_rx_data, 8);
 80009a4:	2208      	movs	r2, #8
 80009a6:	490c      	ldr	r1, [pc, #48]	@ (80009d8 <HAL_UART_RxCpltCallback+0x50>)
 80009a8:	480c      	ldr	r0, [pc, #48]	@ (80009dc <HAL_UART_RxCpltCallback+0x54>)
 80009aa:	f003 fa2b 	bl	8003e04 <HAL_UART_Transmit_DMA>
			h5_is_sent = 0;
 80009ae:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <HAL_UART_RxCpltCallback+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	701a      	strb	r2, [r3, #0]
 80009b4:	e005      	b.n	80009c2 <HAL_UART_RxCpltCallback+0x3a>
		}
		//if address is 2, keep and interpret the command
		else if((char)(j_rx_data[0]) == '2') {
 80009b6:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <HAL_UART_RxCpltCallback+0x50>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b32      	cmp	r3, #50	@ 0x32
 80009bc:	d101      	bne.n	80009c2 <HAL_UART_RxCpltCallback+0x3a>
			j_command();
 80009be:	f7ff fdd1 	bl	8000564 <j_command>

		}

	}
	HAL_UART_Receive_IT(&huart4, j_rx_data,8);
 80009c2:	2208      	movs	r2, #8
 80009c4:	4904      	ldr	r1, [pc, #16]	@ (80009d8 <HAL_UART_RxCpltCallback+0x50>)
 80009c6:	4803      	ldr	r0, [pc, #12]	@ (80009d4 <HAL_UART_RxCpltCallback+0x4c>)
 80009c8:	f003 f9d8 	bl	8003d7c <HAL_UART_Receive_IT>

}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000078 	.word	0x20000078
 80009d8:	20000248 	.word	0x20000248
 80009dc:	20000100 	.word	0x20000100
 80009e0:	20000259 	.word	0x20000259

080009e4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80009ea:	463b      	mov	r3, r7
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80009f6:	f000 fbe1 	bl	80011bc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80009fa:	2301      	movs	r3, #1
 80009fc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a06:	231f      	movs	r3, #31
 8000a08:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a0a:	2387      	movs	r3, #135	@ 0x87
 8000a0c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a12:	2300      	movs	r3, #0
 8000a14:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a16:	2301      	movs	r3, #1
 8000a18:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a26:	463b      	mov	r3, r7
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 fbff 	bl	800122c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a2e:	2004      	movs	r0, #4
 8000a30:	f000 fbdc 	bl	80011ec <HAL_MPU_Enable>

}
 8000a34:	bf00      	nop
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
}
 8000a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <Error_Handler+0x8>

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <HAL_MspInit+0x44>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a52:	4a0e      	ldr	r2, [pc, #56]	@ (8000a8c <HAL_MspInit+0x44>)
 8000a54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a8c <HAL_MspInit+0x44>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a66:	4b09      	ldr	r3, [pc, #36]	@ (8000a8c <HAL_MspInit+0x44>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a6a:	4a08      	ldr	r2, [pc, #32]	@ (8000a8c <HAL_MspInit+0x44>)
 8000a6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a72:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <HAL_MspInit+0x44>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800

08000a90 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	@ 0x28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a1b      	ldr	r2, [pc, #108]	@ (8000b1c <HAL_TIM_Base_MspInit+0x8c>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d130      	bne.n	8000b14 <HAL_TIM_Base_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b20 <HAL_TIM_Base_MspInit+0x90>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab6:	4a1a      	ldr	r2, [pc, #104]	@ (8000b20 <HAL_TIM_Base_MspInit+0x90>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000abe:	4b18      	ldr	r3, [pc, #96]	@ (8000b20 <HAL_TIM_Base_MspInit+0x90>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aca:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <HAL_TIM_Base_MspInit+0x90>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	4a14      	ldr	r2, [pc, #80]	@ (8000b20 <HAL_TIM_Base_MspInit+0x90>)
 8000ad0:	f043 0310 	orr.w	r3, r3, #16
 8000ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad6:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <HAL_TIM_Base_MspInit+0x90>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	f003 0310 	and.w	r3, r3, #16
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ae2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000af4:	2301      	movs	r3, #1
 8000af6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	4809      	ldr	r0, [pc, #36]	@ (8000b24 <HAL_TIM_Base_MspInit+0x94>)
 8000b00:	f000 ffde 	bl	8001ac0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2100      	movs	r1, #0
 8000b08:	201b      	movs	r0, #27
 8000b0a:	f000 fb20 	bl	800114e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000b0e:	201b      	movs	r0, #27
 8000b10:	f000 fb39 	bl	8001186 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000b14:	bf00      	nop
 8000b16:	3728      	adds	r7, #40	@ 0x28
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40010000 	.word	0x40010000
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40021000 	.word	0x40021000

08000b28 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b0b0      	sub	sp, #192	@ 0xc0
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b40:	f107 031c 	add.w	r3, r7, #28
 8000b44:	2290      	movs	r2, #144	@ 0x90
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f004 fcd5 	bl	80054f8 <memset>
  if(huart->Instance==UART4)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a79      	ldr	r2, [pc, #484]	@ (8000d38 <HAL_UART_MspInit+0x210>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d172      	bne.n	8000c3e <HAL_UART_MspInit+0x116>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000b58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b5c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b62:	f107 031c 	add.w	r3, r7, #28
 8000b66:	4618      	mov	r0, r3
 8000b68:	f001 fe1e 	bl	80027a8 <HAL_RCCEx_PeriphCLKConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b72:	f7ff ff63 	bl	8000a3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000b76:	4b71      	ldr	r3, [pc, #452]	@ (8000d3c <HAL_UART_MspInit+0x214>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7a:	4a70      	ldr	r2, [pc, #448]	@ (8000d3c <HAL_UART_MspInit+0x214>)
 8000b7c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b82:	4b6e      	ldr	r3, [pc, #440]	@ (8000d3c <HAL_UART_MspInit+0x214>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000b8a:	61bb      	str	r3, [r7, #24]
 8000b8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	4b6b      	ldr	r3, [pc, #428]	@ (8000d3c <HAL_UART_MspInit+0x214>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	4a6a      	ldr	r2, [pc, #424]	@ (8000d3c <HAL_UART_MspInit+0x214>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9a:	4b68      	ldr	r3, [pc, #416]	@ (8000d3c <HAL_UART_MspInit+0x214>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000bbe:	2308      	movs	r3, #8
 8000bc0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000bc8:	4619      	mov	r1, r3
 8000bca:	485d      	ldr	r0, [pc, #372]	@ (8000d40 <HAL_UART_MspInit+0x218>)
 8000bcc:	f000 ff78 	bl	8001ac0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8000bd0:	4b5c      	ldr	r3, [pc, #368]	@ (8000d44 <HAL_UART_MspInit+0x21c>)
 8000bd2:	4a5d      	ldr	r2, [pc, #372]	@ (8000d48 <HAL_UART_MspInit+0x220>)
 8000bd4:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8000bd6:	4b5b      	ldr	r3, [pc, #364]	@ (8000d44 <HAL_UART_MspInit+0x21c>)
 8000bd8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000bdc:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bde:	4b59      	ldr	r3, [pc, #356]	@ (8000d44 <HAL_UART_MspInit+0x21c>)
 8000be0:	2240      	movs	r2, #64	@ 0x40
 8000be2:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000be4:	4b57      	ldr	r3, [pc, #348]	@ (8000d44 <HAL_UART_MspInit+0x21c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bea:	4b56      	ldr	r3, [pc, #344]	@ (8000d44 <HAL_UART_MspInit+0x21c>)
 8000bec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bf0:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bf2:	4b54      	ldr	r3, [pc, #336]	@ (8000d44 <HAL_UART_MspInit+0x21c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bf8:	4b52      	ldr	r3, [pc, #328]	@ (8000d44 <HAL_UART_MspInit+0x21c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8000bfe:	4b51      	ldr	r3, [pc, #324]	@ (8000d44 <HAL_UART_MspInit+0x21c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c04:	4b4f      	ldr	r3, [pc, #316]	@ (8000d44 <HAL_UART_MspInit+0x21c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c0a:	4b4e      	ldr	r3, [pc, #312]	@ (8000d44 <HAL_UART_MspInit+0x21c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8000c10:	484c      	ldr	r0, [pc, #304]	@ (8000d44 <HAL_UART_MspInit+0x21c>)
 8000c12:	f000 fb4b 	bl	80012ac <HAL_DMA_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8000c1c:	f7ff ff0e 	bl	8000a3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a48      	ldr	r2, [pc, #288]	@ (8000d44 <HAL_UART_MspInit+0x21c>)
 8000c24:	671a      	str	r2, [r3, #112]	@ 0x70
 8000c26:	4a47      	ldr	r2, [pc, #284]	@ (8000d44 <HAL_UART_MspInit+0x21c>)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2100      	movs	r1, #0
 8000c30:	2034      	movs	r0, #52	@ 0x34
 8000c32:	f000 fa8c 	bl	800114e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000c36:	2034      	movs	r0, #52	@ 0x34
 8000c38:	f000 faa5 	bl	8001186 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN UART5_MspInit 1 */

    /* USER CODE END UART5_MspInit 1 */
  }

}
 8000c3c:	e077      	b.n	8000d2e <HAL_UART_MspInit+0x206>
  else if(huart->Instance==UART5)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a42      	ldr	r2, [pc, #264]	@ (8000d4c <HAL_UART_MspInit+0x224>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d172      	bne.n	8000d2e <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000c48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c4c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c52:	f107 031c 	add.w	r3, r7, #28
 8000c56:	4618      	mov	r0, r3
 8000c58:	f001 fda6 	bl	80027a8 <HAL_RCCEx_PeriphCLKConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_UART_MspInit+0x13e>
      Error_Handler();
 8000c62:	f7ff feeb 	bl	8000a3c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000c66:	4b35      	ldr	r3, [pc, #212]	@ (8000d3c <HAL_UART_MspInit+0x214>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6a:	4a34      	ldr	r2, [pc, #208]	@ (8000d3c <HAL_UART_MspInit+0x214>)
 8000c6c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000c70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c72:	4b32      	ldr	r3, [pc, #200]	@ (8000d3c <HAL_UART_MspInit+0x214>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d3c <HAL_UART_MspInit+0x214>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	4a2e      	ldr	r2, [pc, #184]	@ (8000d3c <HAL_UART_MspInit+0x214>)
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8a:	4b2c      	ldr	r3, [pc, #176]	@ (8000d3c <HAL_UART_MspInit+0x214>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000c96:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000c9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000cb0:	2308      	movs	r3, #8
 8000cb2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4824      	ldr	r0, [pc, #144]	@ (8000d50 <HAL_UART_MspInit+0x228>)
 8000cbe:	f000 feff 	bl	8001ac0 <HAL_GPIO_Init>
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8000cc2:	4b24      	ldr	r3, [pc, #144]	@ (8000d54 <HAL_UART_MspInit+0x22c>)
 8000cc4:	4a24      	ldr	r2, [pc, #144]	@ (8000d58 <HAL_UART_MspInit+0x230>)
 8000cc6:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8000cc8:	4b22      	ldr	r3, [pc, #136]	@ (8000d54 <HAL_UART_MspInit+0x22c>)
 8000cca:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000cce:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cd0:	4b20      	ldr	r3, [pc, #128]	@ (8000d54 <HAL_UART_MspInit+0x22c>)
 8000cd2:	2240      	movs	r2, #64	@ 0x40
 8000cd4:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cd6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d54 <HAL_UART_MspInit+0x22c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d54 <HAL_UART_MspInit+0x22c>)
 8000cde:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ce2:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d54 <HAL_UART_MspInit+0x22c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cea:	4b1a      	ldr	r3, [pc, #104]	@ (8000d54 <HAL_UART_MspInit+0x22c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8000cf0:	4b18      	ldr	r3, [pc, #96]	@ (8000d54 <HAL_UART_MspInit+0x22c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cf6:	4b17      	ldr	r3, [pc, #92]	@ (8000d54 <HAL_UART_MspInit+0x22c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cfc:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <HAL_UART_MspInit+0x22c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8000d02:	4814      	ldr	r0, [pc, #80]	@ (8000d54 <HAL_UART_MspInit+0x22c>)
 8000d04:	f000 fad2 	bl	80012ac <HAL_DMA_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <HAL_UART_MspInit+0x1ea>
      Error_Handler();
 8000d0e:	f7ff fe95 	bl	8000a3c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a0f      	ldr	r2, [pc, #60]	@ (8000d54 <HAL_UART_MspInit+0x22c>)
 8000d16:	671a      	str	r2, [r3, #112]	@ 0x70
 8000d18:	4a0e      	ldr	r2, [pc, #56]	@ (8000d54 <HAL_UART_MspInit+0x22c>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2100      	movs	r1, #0
 8000d22:	2035      	movs	r0, #53	@ 0x35
 8000d24:	f000 fa13 	bl	800114e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000d28:	2035      	movs	r0, #53	@ 0x35
 8000d2a:	f000 fa2c 	bl	8001186 <HAL_NVIC_EnableIRQ>
}
 8000d2e:	bf00      	nop
 8000d30:	37c0      	adds	r7, #192	@ 0xc0
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40004c00 	.word	0x40004c00
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40020000 	.word	0x40020000
 8000d44:	20000188 	.word	0x20000188
 8000d48:	40026070 	.word	0x40026070
 8000d4c:	40005000 	.word	0x40005000
 8000d50:	40020400 	.word	0x40020400
 8000d54:	200001e8 	.word	0x200001e8
 8000d58:	400260b8 	.word	0x400260b8

08000d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <NMI_Handler+0x4>

08000d64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <HardFault_Handler+0x4>

08000d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <MemManage_Handler+0x4>

08000d74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <BusFault_Handler+0x4>

08000d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <UsageFault_Handler+0x4>

08000d84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db2:	f000 f8ad 	bl	8000f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8000dc0:	4802      	ldr	r0, [pc, #8]	@ (8000dcc <DMA1_Stream4_IRQHandler+0x10>)
 8000dc2:	f000 fc13 	bl	80015ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000188 	.word	0x20000188

08000dd0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dd4:	4802      	ldr	r0, [pc, #8]	@ (8000de0 <TIM1_CC_IRQHandler+0x10>)
 8000dd6:	f002 f9c7 	bl	8003168 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	2000002c 	.word	0x2000002c

08000de4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8000de8:	4802      	ldr	r0, [pc, #8]	@ (8000df4 <DMA1_Stream7_IRQHandler+0x10>)
 8000dea:	f000 fbff 	bl	80015ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200001e8 	.word	0x200001e8

08000df8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000dfc:	4802      	ldr	r0, [pc, #8]	@ (8000e08 <UART4_IRQHandler+0x10>)
 8000dfe:	f003 f87d 	bl	8003efc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000078 	.word	0x20000078

08000e0c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000e10:	4802      	ldr	r0, [pc, #8]	@ (8000e1c <UART5_IRQHandler+0x10>)
 8000e12:	f003 f873 	bl	8003efc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000100 	.word	0x20000100

08000e20 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e24:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <SystemInit+0x20>)
 8000e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e2a:	4a05      	ldr	r2, [pc, #20]	@ (8000e40 <SystemInit+0x20>)
 8000e2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e48:	f7ff ffea 	bl	8000e20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e4c:	480c      	ldr	r0, [pc, #48]	@ (8000e80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e4e:	490d      	ldr	r1, [pc, #52]	@ (8000e84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e50:	4a0d      	ldr	r2, [pc, #52]	@ (8000e88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e54:	e002      	b.n	8000e5c <LoopCopyDataInit>

08000e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5a:	3304      	adds	r3, #4

08000e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e60:	d3f9      	bcc.n	8000e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e62:	4a0a      	ldr	r2, [pc, #40]	@ (8000e8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e64:	4c0a      	ldr	r4, [pc, #40]	@ (8000e90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e68:	e001      	b.n	8000e6e <LoopFillZerobss>

08000e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e6c:	3204      	adds	r2, #4

08000e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e70:	d3fb      	bcc.n	8000e6a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e72:	f004 fb5f 	bl	8005534 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e76:	f7ff fb8d 	bl	8000594 <main>
  bx  lr    
 8000e7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e7c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e84:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e88:	080055d0 	.word	0x080055d0
  ldr r2, =_sbss
 8000e8c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e90:	20000260 	.word	0x20000260

08000e94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e94:	e7fe      	b.n	8000e94 <ADC_IRQHandler>

08000e96 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e9a:	2003      	movs	r0, #3
 8000e9c:	f000 f94c 	bl	8001138 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea0:	200f      	movs	r0, #15
 8000ea2:	f000 f805 	bl	8000eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea6:	f7ff fdcf 	bl	8000a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eaa:	2300      	movs	r3, #0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb8:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <HAL_InitTick+0x54>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b12      	ldr	r3, [pc, #72]	@ (8000f08 <HAL_InitTick+0x58>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 f967 	bl	80011a2 <HAL_SYSTICK_Config>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e00e      	b.n	8000efc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b0f      	cmp	r3, #15
 8000ee2:	d80a      	bhi.n	8000efa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eec:	f000 f92f 	bl	800114e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef0:	4a06      	ldr	r2, [pc, #24]	@ (8000f0c <HAL_InitTick+0x5c>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	e000      	b.n	8000efc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000004 	.word	0x20000004
 8000f08:	2000000c 	.word	0x2000000c
 8000f0c:	20000008 	.word	0x20000008

08000f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f14:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <HAL_IncTick+0x20>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <HAL_IncTick+0x24>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4413      	add	r3, r2
 8000f20:	4a04      	ldr	r2, [pc, #16]	@ (8000f34 <HAL_IncTick+0x24>)
 8000f22:	6013      	str	r3, [r2, #0]
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	2000000c 	.word	0x2000000c
 8000f34:	2000025c 	.word	0x2000025c

08000f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f3c:	4b03      	ldr	r3, [pc, #12]	@ (8000f4c <HAL_GetTick+0x14>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	2000025c 	.word	0x2000025c

08000f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f58:	f7ff ffee 	bl	8000f38 <HAL_GetTick>
 8000f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f68:	d005      	beq.n	8000f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f94 <HAL_Delay+0x44>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4413      	add	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f76:	bf00      	nop
 8000f78:	f7ff ffde 	bl	8000f38 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d8f7      	bhi.n	8000f78 <HAL_Delay+0x28>
  {
  }
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	2000000c 	.word	0x2000000c

08000f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd8 <__NVIC_SetPriorityGrouping+0x40>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fc0:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc6:	4a04      	ldr	r2, [pc, #16]	@ (8000fd8 <__NVIC_SetPriorityGrouping+0x40>)
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	60d3      	str	r3, [r2, #12]
}
 8000fcc:	bf00      	nop
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00
 8000fdc:	05fa0000 	.word	0x05fa0000

08000fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe4:	4b04      	ldr	r3, [pc, #16]	@ (8000ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	0a1b      	lsrs	r3, r3, #8
 8000fea:	f003 0307 	and.w	r3, r3, #7
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	2b00      	cmp	r3, #0
 800100c:	db0b      	blt.n	8001026 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	f003 021f 	and.w	r2, r3, #31
 8001014:	4907      	ldr	r1, [pc, #28]	@ (8001034 <__NVIC_EnableIRQ+0x38>)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	095b      	lsrs	r3, r3, #5
 800101c:	2001      	movs	r0, #1
 800101e:	fa00 f202 	lsl.w	r2, r0, r2
 8001022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000e100 	.word	0xe000e100

08001038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	6039      	str	r1, [r7, #0]
 8001042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001048:	2b00      	cmp	r3, #0
 800104a:	db0a      	blt.n	8001062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	b2da      	uxtb	r2, r3
 8001050:	490c      	ldr	r1, [pc, #48]	@ (8001084 <__NVIC_SetPriority+0x4c>)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	0112      	lsls	r2, r2, #4
 8001058:	b2d2      	uxtb	r2, r2
 800105a:	440b      	add	r3, r1
 800105c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001060:	e00a      	b.n	8001078 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4908      	ldr	r1, [pc, #32]	@ (8001088 <__NVIC_SetPriority+0x50>)
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	f003 030f 	and.w	r3, r3, #15
 800106e:	3b04      	subs	r3, #4
 8001070:	0112      	lsls	r2, r2, #4
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	440b      	add	r3, r1
 8001076:	761a      	strb	r2, [r3, #24]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000e100 	.word	0xe000e100
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800108c:	b480      	push	{r7}
 800108e:	b089      	sub	sp, #36	@ 0x24
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f1c3 0307 	rsb	r3, r3, #7
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	bf28      	it	cs
 80010aa:	2304      	movcs	r3, #4
 80010ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3304      	adds	r3, #4
 80010b2:	2b06      	cmp	r3, #6
 80010b4:	d902      	bls.n	80010bc <NVIC_EncodePriority+0x30>
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3b03      	subs	r3, #3
 80010ba:	e000      	b.n	80010be <NVIC_EncodePriority+0x32>
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	f04f 32ff 	mov.w	r2, #4294967295
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43da      	mvns	r2, r3
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	401a      	ands	r2, r3
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d4:	f04f 31ff 	mov.w	r1, #4294967295
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	fa01 f303 	lsl.w	r3, r1, r3
 80010de:	43d9      	mvns	r1, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	4313      	orrs	r3, r2
         );
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3724      	adds	r7, #36	@ 0x24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3b01      	subs	r3, #1
 8001100:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001104:	d301      	bcc.n	800110a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001106:	2301      	movs	r3, #1
 8001108:	e00f      	b.n	800112a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800110a:	4a0a      	ldr	r2, [pc, #40]	@ (8001134 <SysTick_Config+0x40>)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3b01      	subs	r3, #1
 8001110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001112:	210f      	movs	r1, #15
 8001114:	f04f 30ff 	mov.w	r0, #4294967295
 8001118:	f7ff ff8e 	bl	8001038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800111c:	4b05      	ldr	r3, [pc, #20]	@ (8001134 <SysTick_Config+0x40>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001122:	4b04      	ldr	r3, [pc, #16]	@ (8001134 <SysTick_Config+0x40>)
 8001124:	2207      	movs	r2, #7
 8001126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	e000e010 	.word	0xe000e010

08001138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ff29 	bl	8000f98 <__NVIC_SetPriorityGrouping>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800114e:	b580      	push	{r7, lr}
 8001150:	b086      	sub	sp, #24
 8001152:	af00      	add	r7, sp, #0
 8001154:	4603      	mov	r3, r0
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	607a      	str	r2, [r7, #4]
 800115a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001160:	f7ff ff3e 	bl	8000fe0 <__NVIC_GetPriorityGrouping>
 8001164:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	68b9      	ldr	r1, [r7, #8]
 800116a:	6978      	ldr	r0, [r7, #20]
 800116c:	f7ff ff8e 	bl	800108c <NVIC_EncodePriority>
 8001170:	4602      	mov	r2, r0
 8001172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff5d 	bl	8001038 <__NVIC_SetPriority>
}
 800117e:	bf00      	nop
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	4603      	mov	r3, r0
 800118e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff31 	bl	8000ffc <__NVIC_EnableIRQ>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ffa2 	bl	80010f4 <SysTick_Config>
 80011b0:	4603      	mov	r3, r0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80011c0:	f3bf 8f5f 	dmb	sy
}
 80011c4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80011c6:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <HAL_MPU_Disable+0x28>)
 80011c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ca:	4a06      	ldr	r2, [pc, #24]	@ (80011e4 <HAL_MPU_Disable+0x28>)
 80011cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011d0:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80011d2:	4b05      	ldr	r3, [pc, #20]	@ (80011e8 <HAL_MPU_Disable+0x2c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	605a      	str	r2, [r3, #4]
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000ed00 	.word	0xe000ed00
 80011e8:	e000ed90 	.word	0xe000ed90

080011ec <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80011f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001224 <HAL_MPU_Enable+0x38>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80011fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001228 <HAL_MPU_Enable+0x3c>)
 8001200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001202:	4a09      	ldr	r2, [pc, #36]	@ (8001228 <HAL_MPU_Enable+0x3c>)
 8001204:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001208:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800120a:	f3bf 8f4f 	dsb	sy
}
 800120e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001210:	f3bf 8f6f 	isb	sy
}
 8001214:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000ed90 	.word	0xe000ed90
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	785a      	ldrb	r2, [r3, #1]
 8001238:	4b1b      	ldr	r3, [pc, #108]	@ (80012a8 <HAL_MPU_ConfigRegion+0x7c>)
 800123a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800123c:	4b1a      	ldr	r3, [pc, #104]	@ (80012a8 <HAL_MPU_ConfigRegion+0x7c>)
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	4a19      	ldr	r2, [pc, #100]	@ (80012a8 <HAL_MPU_ConfigRegion+0x7c>)
 8001242:	f023 0301 	bic.w	r3, r3, #1
 8001246:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001248:	4a17      	ldr	r2, [pc, #92]	@ (80012a8 <HAL_MPU_ConfigRegion+0x7c>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	7b1b      	ldrb	r3, [r3, #12]
 8001254:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	7adb      	ldrb	r3, [r3, #11]
 800125a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800125c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	7a9b      	ldrb	r3, [r3, #10]
 8001262:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001264:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	7b5b      	ldrb	r3, [r3, #13]
 800126a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800126c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	7b9b      	ldrb	r3, [r3, #14]
 8001272:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001274:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	7bdb      	ldrb	r3, [r3, #15]
 800127a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800127c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	7a5b      	ldrb	r3, [r3, #9]
 8001282:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001284:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	7a1b      	ldrb	r3, [r3, #8]
 800128a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800128c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	7812      	ldrb	r2, [r2, #0]
 8001292:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001294:	4a04      	ldr	r2, [pc, #16]	@ (80012a8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001296:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001298:	6113      	str	r3, [r2, #16]
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000ed90 	.word	0xe000ed90

080012ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012b8:	f7ff fe3e 	bl	8000f38 <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d101      	bne.n	80012c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e099      	b.n	80013fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2202      	movs	r2, #2
 80012cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 0201 	bic.w	r2, r2, #1
 80012e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012e8:	e00f      	b.n	800130a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012ea:	f7ff fe25 	bl	8000f38 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b05      	cmp	r3, #5
 80012f6:	d908      	bls.n	800130a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2220      	movs	r2, #32
 80012fc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2203      	movs	r2, #3
 8001302:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e078      	b.n	80013fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1e8      	bne.n	80012ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	4b38      	ldr	r3, [pc, #224]	@ (8001404 <HAL_DMA_Init+0x158>)
 8001324:	4013      	ands	r3, r2
 8001326:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001336:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	691b      	ldr	r3, [r3, #16]
 800133c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001342:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800134e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	4313      	orrs	r3, r2
 800135a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001360:	2b04      	cmp	r3, #4
 8001362:	d107      	bne.n	8001374 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136c:	4313      	orrs	r3, r2
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	4313      	orrs	r3, r2
 8001372:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	697a      	ldr	r2, [r7, #20]
 800137a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	f023 0307 	bic.w	r3, r3, #7
 800138a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	4313      	orrs	r3, r2
 8001394:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800139a:	2b04      	cmp	r3, #4
 800139c:	d117      	bne.n	80013ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d00e      	beq.n	80013ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 fb09 	bl	80019c8 <DMA_CheckFifoParam>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d008      	beq.n	80013ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2240      	movs	r2, #64	@ 0x40
 80013c0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80013ca:	2301      	movs	r3, #1
 80013cc:	e016      	b.n	80013fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	697a      	ldr	r2, [r7, #20]
 80013d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 fac0 	bl	800195c <DMA_CalcBaseAndBitshift>
 80013dc:	4603      	mov	r3, r0
 80013de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013e4:	223f      	movs	r2, #63	@ 0x3f
 80013e6:	409a      	lsls	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2201      	movs	r2, #1
 80013f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	e010803f 	.word	0xe010803f

08001408 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
 8001414:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001416:	2300      	movs	r3, #0
 8001418:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800141e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001426:	2b01      	cmp	r3, #1
 8001428:	d101      	bne.n	800142e <HAL_DMA_Start_IT+0x26>
 800142a:	2302      	movs	r3, #2
 800142c:	e048      	b.n	80014c0 <HAL_DMA_Start_IT+0xb8>
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2201      	movs	r2, #1
 8001432:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b01      	cmp	r3, #1
 8001440:	d137      	bne.n	80014b2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2202      	movs	r2, #2
 8001446:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2200      	movs	r2, #0
 800144e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	68b9      	ldr	r1, [r7, #8]
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f000 fa52 	bl	8001900 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001460:	223f      	movs	r2, #63	@ 0x3f
 8001462:	409a      	lsls	r2, r3
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f042 0216 	orr.w	r2, r2, #22
 8001476:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	695a      	ldr	r2, [r3, #20]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001486:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148c:	2b00      	cmp	r3, #0
 800148e:	d007      	beq.n	80014a0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f042 0208 	orr.w	r2, r2, #8
 800149e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f042 0201 	orr.w	r2, r2, #1
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	e005      	b.n	80014be <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80014ba:	2302      	movs	r3, #2
 80014bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80014be:	7dfb      	ldrb	r3, [r7, #23]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014d6:	f7ff fd2f 	bl	8000f38 <HAL_GetTick>
 80014da:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d008      	beq.n	80014fa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2280      	movs	r2, #128	@ 0x80
 80014ec:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e052      	b.n	80015a0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 0216 	bic.w	r2, r2, #22
 8001508:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	695a      	ldr	r2, [r3, #20]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001518:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151e:	2b00      	cmp	r3, #0
 8001520:	d103      	bne.n	800152a <HAL_DMA_Abort+0x62>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001526:	2b00      	cmp	r3, #0
 8001528:	d007      	beq.n	800153a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 0208 	bic.w	r2, r2, #8
 8001538:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 0201 	bic.w	r2, r2, #1
 8001548:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800154a:	e013      	b.n	8001574 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800154c:	f7ff fcf4 	bl	8000f38 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b05      	cmp	r3, #5
 8001558:	d90c      	bls.n	8001574 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2220      	movs	r2, #32
 800155e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2203      	movs	r2, #3
 8001564:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e015      	b.n	80015a0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1e4      	bne.n	800154c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001586:	223f      	movs	r2, #63	@ 0x3f
 8001588:	409a      	lsls	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d004      	beq.n	80015c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2280      	movs	r2, #128	@ 0x80
 80015c0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e00c      	b.n	80015e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2205      	movs	r2, #5
 80015ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f022 0201 	bic.w	r2, r2, #1
 80015dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80015f8:	4b8e      	ldr	r3, [pc, #568]	@ (8001834 <HAL_DMA_IRQHandler+0x248>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a8e      	ldr	r2, [pc, #568]	@ (8001838 <HAL_DMA_IRQHandler+0x24c>)
 80015fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001602:	0a9b      	lsrs	r3, r3, #10
 8001604:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800160a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001616:	2208      	movs	r2, #8
 8001618:	409a      	lsls	r2, r3
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	4013      	ands	r3, r2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d01a      	beq.n	8001658 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b00      	cmp	r3, #0
 800162e:	d013      	beq.n	8001658 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0204 	bic.w	r2, r2, #4
 800163e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001644:	2208      	movs	r2, #8
 8001646:	409a      	lsls	r2, r3
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001650:	f043 0201 	orr.w	r2, r3, #1
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800165c:	2201      	movs	r2, #1
 800165e:	409a      	lsls	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4013      	ands	r3, r2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d012      	beq.n	800168e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00b      	beq.n	800168e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800167a:	2201      	movs	r2, #1
 800167c:	409a      	lsls	r2, r3
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001686:	f043 0202 	orr.w	r2, r3, #2
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001692:	2204      	movs	r2, #4
 8001694:	409a      	lsls	r2, r3
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	4013      	ands	r3, r2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d012      	beq.n	80016c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d00b      	beq.n	80016c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016b0:	2204      	movs	r2, #4
 80016b2:	409a      	lsls	r2, r3
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016bc:	f043 0204 	orr.w	r2, r3, #4
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016c8:	2210      	movs	r2, #16
 80016ca:	409a      	lsls	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4013      	ands	r3, r2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d043      	beq.n	800175c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d03c      	beq.n	800175c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016e6:	2210      	movs	r2, #16
 80016e8:	409a      	lsls	r2, r3
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d018      	beq.n	800172e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d108      	bne.n	800171c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170e:	2b00      	cmp	r3, #0
 8001710:	d024      	beq.n	800175c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	4798      	blx	r3
 800171a:	e01f      	b.n	800175c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001720:	2b00      	cmp	r3, #0
 8001722:	d01b      	beq.n	800175c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	4798      	blx	r3
 800172c:	e016      	b.n	800175c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001738:	2b00      	cmp	r3, #0
 800173a:	d107      	bne.n	800174c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 0208 	bic.w	r2, r2, #8
 800174a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001760:	2220      	movs	r2, #32
 8001762:	409a      	lsls	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4013      	ands	r3, r2
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 808f 	beq.w	800188c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0310 	and.w	r3, r3, #16
 8001778:	2b00      	cmp	r3, #0
 800177a:	f000 8087 	beq.w	800188c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001782:	2220      	movs	r2, #32
 8001784:	409a      	lsls	r2, r3
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b05      	cmp	r3, #5
 8001794:	d136      	bne.n	8001804 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 0216 	bic.w	r2, r2, #22
 80017a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	695a      	ldr	r2, [r3, #20]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80017b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d103      	bne.n	80017c6 <HAL_DMA_IRQHandler+0x1da>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d007      	beq.n	80017d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 0208 	bic.w	r2, r2, #8
 80017d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017da:	223f      	movs	r2, #63	@ 0x3f
 80017dc:	409a      	lsls	r2, r3
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d07e      	beq.n	80018f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	4798      	blx	r3
        }
        return;
 8001802:	e079      	b.n	80018f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d01d      	beq.n	800184e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d10d      	bne.n	800183c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001824:	2b00      	cmp	r3, #0
 8001826:	d031      	beq.n	800188c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	4798      	blx	r3
 8001830:	e02c      	b.n	800188c <HAL_DMA_IRQHandler+0x2a0>
 8001832:	bf00      	nop
 8001834:	20000004 	.word	0x20000004
 8001838:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001840:	2b00      	cmp	r3, #0
 8001842:	d023      	beq.n	800188c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	4798      	blx	r3
 800184c:	e01e      	b.n	800188c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001858:	2b00      	cmp	r3, #0
 800185a:	d10f      	bne.n	800187c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f022 0210 	bic.w	r2, r2, #16
 800186a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001890:	2b00      	cmp	r3, #0
 8001892:	d032      	beq.n	80018fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b00      	cmp	r3, #0
 800189e:	d022      	beq.n	80018e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2205      	movs	r2, #5
 80018a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 0201 	bic.w	r2, r2, #1
 80018b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	3301      	adds	r3, #1
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d307      	bcc.n	80018d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f2      	bne.n	80018b8 <HAL_DMA_IRQHandler+0x2cc>
 80018d2:	e000      	b.n	80018d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80018d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2201      	movs	r2, #1
 80018da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d005      	beq.n	80018fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	4798      	blx	r3
 80018f6:	e000      	b.n	80018fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80018f8:	bf00      	nop
    }
  }
}
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
 800190c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800191c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	2b40      	cmp	r3, #64	@ 0x40
 800192c:	d108      	bne.n	8001940 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800193e:	e007      	b.n	8001950 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68ba      	ldr	r2, [r7, #8]
 8001946:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	60da      	str	r2, [r3, #12]
}
 8001950:	bf00      	nop
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	b2db      	uxtb	r3, r3
 800196a:	3b10      	subs	r3, #16
 800196c:	4a13      	ldr	r2, [pc, #76]	@ (80019bc <DMA_CalcBaseAndBitshift+0x60>)
 800196e:	fba2 2303 	umull	r2, r3, r2, r3
 8001972:	091b      	lsrs	r3, r3, #4
 8001974:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001976:	4a12      	ldr	r2, [pc, #72]	@ (80019c0 <DMA_CalcBaseAndBitshift+0x64>)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4413      	add	r3, r2
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	461a      	mov	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2b03      	cmp	r3, #3
 8001988:	d908      	bls.n	800199c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	461a      	mov	r2, r3
 8001990:	4b0c      	ldr	r3, [pc, #48]	@ (80019c4 <DMA_CalcBaseAndBitshift+0x68>)
 8001992:	4013      	ands	r3, r2
 8001994:	1d1a      	adds	r2, r3, #4
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	659a      	str	r2, [r3, #88]	@ 0x58
 800199a:	e006      	b.n	80019aa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b08      	ldr	r3, [pc, #32]	@ (80019c4 <DMA_CalcBaseAndBitshift+0x68>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	aaaaaaab 	.word	0xaaaaaaab
 80019c0:	080055b8 	.word	0x080055b8
 80019c4:	fffffc00 	.word	0xfffffc00

080019c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d11f      	bne.n	8001a22 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	2b03      	cmp	r3, #3
 80019e6:	d856      	bhi.n	8001a96 <DMA_CheckFifoParam+0xce>
 80019e8:	a201      	add	r2, pc, #4	@ (adr r2, 80019f0 <DMA_CheckFifoParam+0x28>)
 80019ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ee:	bf00      	nop
 80019f0:	08001a01 	.word	0x08001a01
 80019f4:	08001a13 	.word	0x08001a13
 80019f8:	08001a01 	.word	0x08001a01
 80019fc:	08001a97 	.word	0x08001a97
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d046      	beq.n	8001a9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a10:	e043      	b.n	8001a9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a16:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001a1a:	d140      	bne.n	8001a9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a20:	e03d      	b.n	8001a9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a2a:	d121      	bne.n	8001a70 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	2b03      	cmp	r3, #3
 8001a30:	d837      	bhi.n	8001aa2 <DMA_CheckFifoParam+0xda>
 8001a32:	a201      	add	r2, pc, #4	@ (adr r2, 8001a38 <DMA_CheckFifoParam+0x70>)
 8001a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a38:	08001a49 	.word	0x08001a49
 8001a3c:	08001a4f 	.word	0x08001a4f
 8001a40:	08001a49 	.word	0x08001a49
 8001a44:	08001a61 	.word	0x08001a61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a4c:	e030      	b.n	8001ab0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d025      	beq.n	8001aa6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a5e:	e022      	b.n	8001aa6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a64:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001a68:	d11f      	bne.n	8001aaa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a6e:	e01c      	b.n	8001aaa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d903      	bls.n	8001a7e <DMA_CheckFifoParam+0xb6>
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	2b03      	cmp	r3, #3
 8001a7a:	d003      	beq.n	8001a84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a7c:	e018      	b.n	8001ab0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	73fb      	strb	r3, [r7, #15]
      break;
 8001a82:	e015      	b.n	8001ab0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d00e      	beq.n	8001aae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	73fb      	strb	r3, [r7, #15]
      break;
 8001a94:	e00b      	b.n	8001aae <DMA_CheckFifoParam+0xe6>
      break;
 8001a96:	bf00      	nop
 8001a98:	e00a      	b.n	8001ab0 <DMA_CheckFifoParam+0xe8>
      break;
 8001a9a:	bf00      	nop
 8001a9c:	e008      	b.n	8001ab0 <DMA_CheckFifoParam+0xe8>
      break;
 8001a9e:	bf00      	nop
 8001aa0:	e006      	b.n	8001ab0 <DMA_CheckFifoParam+0xe8>
      break;
 8001aa2:	bf00      	nop
 8001aa4:	e004      	b.n	8001ab0 <DMA_CheckFifoParam+0xe8>
      break;
 8001aa6:	bf00      	nop
 8001aa8:	e002      	b.n	8001ab0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001aaa:	bf00      	nop
 8001aac:	e000      	b.n	8001ab0 <DMA_CheckFifoParam+0xe8>
      break;
 8001aae:	bf00      	nop
    }
  } 
  
  return status; 
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop

08001ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b089      	sub	sp, #36	@ 0x24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
 8001ade:	e175      	b.n	8001dcc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	4013      	ands	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	f040 8164 	bne.w	8001dc6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d005      	beq.n	8001b16 <HAL_GPIO_Init+0x56>
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d130      	bne.n	8001b78 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	2203      	movs	r2, #3
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	68da      	ldr	r2, [r3, #12]
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	091b      	lsrs	r3, r3, #4
 8001b62:	f003 0201 	and.w	r2, r3, #1
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	2b03      	cmp	r3, #3
 8001b82:	d017      	beq.n	8001bb4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	2203      	movs	r2, #3
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d123      	bne.n	8001c08 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	08da      	lsrs	r2, r3, #3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3208      	adds	r2, #8
 8001bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	220f      	movs	r2, #15
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	691a      	ldr	r2, [r3, #16]
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	08da      	lsrs	r2, r3, #3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3208      	adds	r2, #8
 8001c02:	69b9      	ldr	r1, [r7, #24]
 8001c04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	2203      	movs	r2, #3
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 0203 	and.w	r2, r3, #3
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f000 80be 	beq.w	8001dc6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4a:	4b66      	ldr	r3, [pc, #408]	@ (8001de4 <HAL_GPIO_Init+0x324>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4e:	4a65      	ldr	r2, [pc, #404]	@ (8001de4 <HAL_GPIO_Init+0x324>)
 8001c50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c54:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c56:	4b63      	ldr	r3, [pc, #396]	@ (8001de4 <HAL_GPIO_Init+0x324>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c62:	4a61      	ldr	r2, [pc, #388]	@ (8001de8 <HAL_GPIO_Init+0x328>)
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	089b      	lsrs	r3, r3, #2
 8001c68:	3302      	adds	r3, #2
 8001c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	220f      	movs	r2, #15
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a58      	ldr	r2, [pc, #352]	@ (8001dec <HAL_GPIO_Init+0x32c>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d037      	beq.n	8001cfe <HAL_GPIO_Init+0x23e>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a57      	ldr	r2, [pc, #348]	@ (8001df0 <HAL_GPIO_Init+0x330>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d031      	beq.n	8001cfa <HAL_GPIO_Init+0x23a>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a56      	ldr	r2, [pc, #344]	@ (8001df4 <HAL_GPIO_Init+0x334>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d02b      	beq.n	8001cf6 <HAL_GPIO_Init+0x236>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a55      	ldr	r2, [pc, #340]	@ (8001df8 <HAL_GPIO_Init+0x338>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d025      	beq.n	8001cf2 <HAL_GPIO_Init+0x232>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a54      	ldr	r2, [pc, #336]	@ (8001dfc <HAL_GPIO_Init+0x33c>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d01f      	beq.n	8001cee <HAL_GPIO_Init+0x22e>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a53      	ldr	r2, [pc, #332]	@ (8001e00 <HAL_GPIO_Init+0x340>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d019      	beq.n	8001cea <HAL_GPIO_Init+0x22a>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a52      	ldr	r2, [pc, #328]	@ (8001e04 <HAL_GPIO_Init+0x344>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d013      	beq.n	8001ce6 <HAL_GPIO_Init+0x226>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a51      	ldr	r2, [pc, #324]	@ (8001e08 <HAL_GPIO_Init+0x348>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d00d      	beq.n	8001ce2 <HAL_GPIO_Init+0x222>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a50      	ldr	r2, [pc, #320]	@ (8001e0c <HAL_GPIO_Init+0x34c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d007      	beq.n	8001cde <HAL_GPIO_Init+0x21e>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a4f      	ldr	r2, [pc, #316]	@ (8001e10 <HAL_GPIO_Init+0x350>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d101      	bne.n	8001cda <HAL_GPIO_Init+0x21a>
 8001cd6:	2309      	movs	r3, #9
 8001cd8:	e012      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cda:	230a      	movs	r3, #10
 8001cdc:	e010      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cde:	2308      	movs	r3, #8
 8001ce0:	e00e      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001ce2:	2307      	movs	r3, #7
 8001ce4:	e00c      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001ce6:	2306      	movs	r3, #6
 8001ce8:	e00a      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cea:	2305      	movs	r3, #5
 8001cec:	e008      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cee:	2304      	movs	r3, #4
 8001cf0:	e006      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e004      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	e002      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cfe:	2300      	movs	r3, #0
 8001d00:	69fa      	ldr	r2, [r7, #28]
 8001d02:	f002 0203 	and.w	r2, r2, #3
 8001d06:	0092      	lsls	r2, r2, #2
 8001d08:	4093      	lsls	r3, r2
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d10:	4935      	ldr	r1, [pc, #212]	@ (8001de8 <HAL_GPIO_Init+0x328>)
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	089b      	lsrs	r3, r3, #2
 8001d16:	3302      	adds	r3, #2
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d1e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e14 <HAL_GPIO_Init+0x354>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d42:	4a34      	ldr	r2, [pc, #208]	@ (8001e14 <HAL_GPIO_Init+0x354>)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d48:	4b32      	ldr	r3, [pc, #200]	@ (8001e14 <HAL_GPIO_Init+0x354>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d6c:	4a29      	ldr	r2, [pc, #164]	@ (8001e14 <HAL_GPIO_Init+0x354>)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d72:	4b28      	ldr	r3, [pc, #160]	@ (8001e14 <HAL_GPIO_Init+0x354>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d96:	4a1f      	ldr	r2, [pc, #124]	@ (8001e14 <HAL_GPIO_Init+0x354>)
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001e14 <HAL_GPIO_Init+0x354>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dc0:	4a14      	ldr	r2, [pc, #80]	@ (8001e14 <HAL_GPIO_Init+0x354>)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	61fb      	str	r3, [r7, #28]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	2b0f      	cmp	r3, #15
 8001dd0:	f67f ae86 	bls.w	8001ae0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	3724      	adds	r7, #36	@ 0x24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40013800 	.word	0x40013800
 8001dec:	40020000 	.word	0x40020000
 8001df0:	40020400 	.word	0x40020400
 8001df4:	40020800 	.word	0x40020800
 8001df8:	40020c00 	.word	0x40020c00
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40021400 	.word	0x40021400
 8001e04:	40021800 	.word	0x40021800
 8001e08:	40021c00 	.word	0x40021c00
 8001e0c:	40022000 	.word	0x40022000
 8001e10:	40022400 	.word	0x40022400
 8001e14:	40013c00 	.word	0x40013c00

08001e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	807b      	strh	r3, [r7, #2]
 8001e24:	4613      	mov	r3, r2
 8001e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e28:	787b      	ldrb	r3, [r7, #1]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e2e:	887a      	ldrh	r2, [r7, #2]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e34:	e003      	b.n	8001e3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e36:	887b      	ldrh	r3, [r7, #2]
 8001e38:	041a      	lsls	r2, r3, #16
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	619a      	str	r2, [r3, #24]
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b085      	sub	sp, #20
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	460b      	mov	r3, r1
 8001e54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e5c:	887a      	ldrh	r2, [r7, #2]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4013      	ands	r3, r2
 8001e62:	041a      	lsls	r2, r3, #16
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	43d9      	mvns	r1, r3
 8001e68:	887b      	ldrh	r3, [r7, #2]
 8001e6a:	400b      	ands	r3, r1
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	619a      	str	r2, [r3, #24]
}
 8001e72:	bf00      	nop
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e29b      	b.n	80023ce <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 8087 	beq.w	8001fb2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ea4:	4b96      	ldr	r3, [pc, #600]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 030c 	and.w	r3, r3, #12
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	d00c      	beq.n	8001eca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eb0:	4b93      	ldr	r3, [pc, #588]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 030c 	and.w	r3, r3, #12
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d112      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x62>
 8001ebc:	4b90      	ldr	r3, [pc, #576]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ec4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ec8:	d10b      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eca:	4b8d      	ldr	r3, [pc, #564]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d06c      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x130>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d168      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e275      	b.n	80023ce <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001eea:	d106      	bne.n	8001efa <HAL_RCC_OscConfig+0x7a>
 8001eec:	4b84      	ldr	r3, [pc, #528]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a83      	ldr	r2, [pc, #524]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 8001ef2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef6:	6013      	str	r3, [r2, #0]
 8001ef8:	e02e      	b.n	8001f58 <HAL_RCC_OscConfig+0xd8>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10c      	bne.n	8001f1c <HAL_RCC_OscConfig+0x9c>
 8001f02:	4b7f      	ldr	r3, [pc, #508]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a7e      	ldr	r2, [pc, #504]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 8001f08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	4b7c      	ldr	r3, [pc, #496]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a7b      	ldr	r2, [pc, #492]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 8001f14:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	e01d      	b.n	8001f58 <HAL_RCC_OscConfig+0xd8>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f24:	d10c      	bne.n	8001f40 <HAL_RCC_OscConfig+0xc0>
 8001f26:	4b76      	ldr	r3, [pc, #472]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a75      	ldr	r2, [pc, #468]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 8001f2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	4b73      	ldr	r3, [pc, #460]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a72      	ldr	r2, [pc, #456]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 8001f38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	e00b      	b.n	8001f58 <HAL_RCC_OscConfig+0xd8>
 8001f40:	4b6f      	ldr	r3, [pc, #444]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a6e      	ldr	r2, [pc, #440]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 8001f46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f4a:	6013      	str	r3, [r2, #0]
 8001f4c:	4b6c      	ldr	r3, [pc, #432]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a6b      	ldr	r2, [pc, #428]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 8001f52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d013      	beq.n	8001f88 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f60:	f7fe ffea 	bl	8000f38 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f68:	f7fe ffe6 	bl	8000f38 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b64      	cmp	r3, #100	@ 0x64
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e229      	b.n	80023ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7a:	4b61      	ldr	r3, [pc, #388]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f0      	beq.n	8001f68 <HAL_RCC_OscConfig+0xe8>
 8001f86:	e014      	b.n	8001fb2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f88:	f7fe ffd6 	bl	8000f38 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f90:	f7fe ffd2 	bl	8000f38 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b64      	cmp	r3, #100	@ 0x64
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e215      	b.n	80023ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa2:	4b57      	ldr	r3, [pc, #348]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0x110>
 8001fae:	e000      	b.n	8001fb2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d069      	beq.n	8002092 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fbe:	4b50      	ldr	r3, [pc, #320]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00b      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fca:	4b4d      	ldr	r3, [pc, #308]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 030c 	and.w	r3, r3, #12
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d11c      	bne.n	8002010 <HAL_RCC_OscConfig+0x190>
 8001fd6:	4b4a      	ldr	r3, [pc, #296]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d116      	bne.n	8002010 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe2:	4b47      	ldr	r3, [pc, #284]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d005      	beq.n	8001ffa <HAL_RCC_OscConfig+0x17a>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d001      	beq.n	8001ffa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e1e9      	b.n	80023ce <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffa:	4b41      	ldr	r3, [pc, #260]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	493d      	ldr	r1, [pc, #244]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 800200a:	4313      	orrs	r3, r2
 800200c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200e:	e040      	b.n	8002092 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d023      	beq.n	8002060 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002018:	4b39      	ldr	r3, [pc, #228]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a38      	ldr	r2, [pc, #224]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002024:	f7fe ff88 	bl	8000f38 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800202c:	f7fe ff84 	bl	8000f38 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e1c7      	b.n	80023ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203e:	4b30      	ldr	r3, [pc, #192]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0f0      	beq.n	800202c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204a:	4b2d      	ldr	r3, [pc, #180]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4929      	ldr	r1, [pc, #164]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 800205a:	4313      	orrs	r3, r2
 800205c:	600b      	str	r3, [r1, #0]
 800205e:	e018      	b.n	8002092 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002060:	4b27      	ldr	r3, [pc, #156]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a26      	ldr	r2, [pc, #152]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 8002066:	f023 0301 	bic.w	r3, r3, #1
 800206a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206c:	f7fe ff64 	bl	8000f38 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002074:	f7fe ff60 	bl	8000f38 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e1a3      	b.n	80023ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002086:	4b1e      	ldr	r3, [pc, #120]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f0      	bne.n	8002074 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	2b00      	cmp	r3, #0
 800209c:	d038      	beq.n	8002110 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d019      	beq.n	80020da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020a6:	4b16      	ldr	r3, [pc, #88]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 80020a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020aa:	4a15      	ldr	r2, [pc, #84]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b2:	f7fe ff41 	bl	8000f38 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ba:	f7fe ff3d 	bl	8000f38 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e180      	b.n	80023ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 80020ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0f0      	beq.n	80020ba <HAL_RCC_OscConfig+0x23a>
 80020d8:	e01a      	b.n	8002110 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020da:	4b09      	ldr	r3, [pc, #36]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 80020dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020de:	4a08      	ldr	r2, [pc, #32]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 80020e0:	f023 0301 	bic.w	r3, r3, #1
 80020e4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e6:	f7fe ff27 	bl	8000f38 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ec:	e00a      	b.n	8002104 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ee:	f7fe ff23 	bl	8000f38 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d903      	bls.n	8002104 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e166      	b.n	80023ce <HAL_RCC_OscConfig+0x54e>
 8002100:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002104:	4b92      	ldr	r3, [pc, #584]	@ (8002350 <HAL_RCC_OscConfig+0x4d0>)
 8002106:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1ee      	bne.n	80020ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 80a4 	beq.w	8002266 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800211e:	4b8c      	ldr	r3, [pc, #560]	@ (8002350 <HAL_RCC_OscConfig+0x4d0>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10d      	bne.n	8002146 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800212a:	4b89      	ldr	r3, [pc, #548]	@ (8002350 <HAL_RCC_OscConfig+0x4d0>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212e:	4a88      	ldr	r2, [pc, #544]	@ (8002350 <HAL_RCC_OscConfig+0x4d0>)
 8002130:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002134:	6413      	str	r3, [r2, #64]	@ 0x40
 8002136:	4b86      	ldr	r3, [pc, #536]	@ (8002350 <HAL_RCC_OscConfig+0x4d0>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002142:	2301      	movs	r3, #1
 8002144:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002146:	4b83      	ldr	r3, [pc, #524]	@ (8002354 <HAL_RCC_OscConfig+0x4d4>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800214e:	2b00      	cmp	r3, #0
 8002150:	d118      	bne.n	8002184 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002152:	4b80      	ldr	r3, [pc, #512]	@ (8002354 <HAL_RCC_OscConfig+0x4d4>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a7f      	ldr	r2, [pc, #508]	@ (8002354 <HAL_RCC_OscConfig+0x4d4>)
 8002158:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800215c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800215e:	f7fe feeb 	bl	8000f38 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002166:	f7fe fee7 	bl	8000f38 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b64      	cmp	r3, #100	@ 0x64
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e12a      	b.n	80023ce <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002178:	4b76      	ldr	r3, [pc, #472]	@ (8002354 <HAL_RCC_OscConfig+0x4d4>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0f0      	beq.n	8002166 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d106      	bne.n	800219a <HAL_RCC_OscConfig+0x31a>
 800218c:	4b70      	ldr	r3, [pc, #448]	@ (8002350 <HAL_RCC_OscConfig+0x4d0>)
 800218e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002190:	4a6f      	ldr	r2, [pc, #444]	@ (8002350 <HAL_RCC_OscConfig+0x4d0>)
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	6713      	str	r3, [r2, #112]	@ 0x70
 8002198:	e02d      	b.n	80021f6 <HAL_RCC_OscConfig+0x376>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10c      	bne.n	80021bc <HAL_RCC_OscConfig+0x33c>
 80021a2:	4b6b      	ldr	r3, [pc, #428]	@ (8002350 <HAL_RCC_OscConfig+0x4d0>)
 80021a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a6:	4a6a      	ldr	r2, [pc, #424]	@ (8002350 <HAL_RCC_OscConfig+0x4d0>)
 80021a8:	f023 0301 	bic.w	r3, r3, #1
 80021ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80021ae:	4b68      	ldr	r3, [pc, #416]	@ (8002350 <HAL_RCC_OscConfig+0x4d0>)
 80021b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b2:	4a67      	ldr	r2, [pc, #412]	@ (8002350 <HAL_RCC_OscConfig+0x4d0>)
 80021b4:	f023 0304 	bic.w	r3, r3, #4
 80021b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80021ba:	e01c      	b.n	80021f6 <HAL_RCC_OscConfig+0x376>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	2b05      	cmp	r3, #5
 80021c2:	d10c      	bne.n	80021de <HAL_RCC_OscConfig+0x35e>
 80021c4:	4b62      	ldr	r3, [pc, #392]	@ (8002350 <HAL_RCC_OscConfig+0x4d0>)
 80021c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021c8:	4a61      	ldr	r2, [pc, #388]	@ (8002350 <HAL_RCC_OscConfig+0x4d0>)
 80021ca:	f043 0304 	orr.w	r3, r3, #4
 80021ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80021d0:	4b5f      	ldr	r3, [pc, #380]	@ (8002350 <HAL_RCC_OscConfig+0x4d0>)
 80021d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021d4:	4a5e      	ldr	r2, [pc, #376]	@ (8002350 <HAL_RCC_OscConfig+0x4d0>)
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	6713      	str	r3, [r2, #112]	@ 0x70
 80021dc:	e00b      	b.n	80021f6 <HAL_RCC_OscConfig+0x376>
 80021de:	4b5c      	ldr	r3, [pc, #368]	@ (8002350 <HAL_RCC_OscConfig+0x4d0>)
 80021e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e2:	4a5b      	ldr	r2, [pc, #364]	@ (8002350 <HAL_RCC_OscConfig+0x4d0>)
 80021e4:	f023 0301 	bic.w	r3, r3, #1
 80021e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80021ea:	4b59      	ldr	r3, [pc, #356]	@ (8002350 <HAL_RCC_OscConfig+0x4d0>)
 80021ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ee:	4a58      	ldr	r2, [pc, #352]	@ (8002350 <HAL_RCC_OscConfig+0x4d0>)
 80021f0:	f023 0304 	bic.w	r3, r3, #4
 80021f4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d015      	beq.n	800222a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021fe:	f7fe fe9b 	bl	8000f38 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002204:	e00a      	b.n	800221c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002206:	f7fe fe97 	bl	8000f38 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002214:	4293      	cmp	r3, r2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e0d8      	b.n	80023ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800221c:	4b4c      	ldr	r3, [pc, #304]	@ (8002350 <HAL_RCC_OscConfig+0x4d0>)
 800221e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0ee      	beq.n	8002206 <HAL_RCC_OscConfig+0x386>
 8002228:	e014      	b.n	8002254 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222a:	f7fe fe85 	bl	8000f38 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002230:	e00a      	b.n	8002248 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002232:	f7fe fe81 	bl	8000f38 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002240:	4293      	cmp	r3, r2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e0c2      	b.n	80023ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002248:	4b41      	ldr	r3, [pc, #260]	@ (8002350 <HAL_RCC_OscConfig+0x4d0>)
 800224a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1ee      	bne.n	8002232 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002254:	7dfb      	ldrb	r3, [r7, #23]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d105      	bne.n	8002266 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800225a:	4b3d      	ldr	r3, [pc, #244]	@ (8002350 <HAL_RCC_OscConfig+0x4d0>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225e:	4a3c      	ldr	r2, [pc, #240]	@ (8002350 <HAL_RCC_OscConfig+0x4d0>)
 8002260:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002264:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 80ae 	beq.w	80023cc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002270:	4b37      	ldr	r3, [pc, #220]	@ (8002350 <HAL_RCC_OscConfig+0x4d0>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 030c 	and.w	r3, r3, #12
 8002278:	2b08      	cmp	r3, #8
 800227a:	d06d      	beq.n	8002358 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	2b02      	cmp	r3, #2
 8002282:	d14b      	bne.n	800231c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002284:	4b32      	ldr	r3, [pc, #200]	@ (8002350 <HAL_RCC_OscConfig+0x4d0>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a31      	ldr	r2, [pc, #196]	@ (8002350 <HAL_RCC_OscConfig+0x4d0>)
 800228a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800228e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002290:	f7fe fe52 	bl	8000f38 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002298:	f7fe fe4e 	bl	8000f38 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e091      	b.n	80023ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022aa:	4b29      	ldr	r3, [pc, #164]	@ (8002350 <HAL_RCC_OscConfig+0x4d0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f0      	bne.n	8002298 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69da      	ldr	r2, [r3, #28]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c4:	019b      	lsls	r3, r3, #6
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022cc:	085b      	lsrs	r3, r3, #1
 80022ce:	3b01      	subs	r3, #1
 80022d0:	041b      	lsls	r3, r3, #16
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d8:	061b      	lsls	r3, r3, #24
 80022da:	431a      	orrs	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e0:	071b      	lsls	r3, r3, #28
 80022e2:	491b      	ldr	r1, [pc, #108]	@ (8002350 <HAL_RCC_OscConfig+0x4d0>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022e8:	4b19      	ldr	r3, [pc, #100]	@ (8002350 <HAL_RCC_OscConfig+0x4d0>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a18      	ldr	r2, [pc, #96]	@ (8002350 <HAL_RCC_OscConfig+0x4d0>)
 80022ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f4:	f7fe fe20 	bl	8000f38 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022fc:	f7fe fe1c 	bl	8000f38 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e05f      	b.n	80023ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800230e:	4b10      	ldr	r3, [pc, #64]	@ (8002350 <HAL_RCC_OscConfig+0x4d0>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d0f0      	beq.n	80022fc <HAL_RCC_OscConfig+0x47c>
 800231a:	e057      	b.n	80023cc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231c:	4b0c      	ldr	r3, [pc, #48]	@ (8002350 <HAL_RCC_OscConfig+0x4d0>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a0b      	ldr	r2, [pc, #44]	@ (8002350 <HAL_RCC_OscConfig+0x4d0>)
 8002322:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002328:	f7fe fe06 	bl	8000f38 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002330:	f7fe fe02 	bl	8000f38 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e045      	b.n	80023ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002342:	4b03      	ldr	r3, [pc, #12]	@ (8002350 <HAL_RCC_OscConfig+0x4d0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0x4b0>
 800234e:	e03d      	b.n	80023cc <HAL_RCC_OscConfig+0x54c>
 8002350:	40023800 	.word	0x40023800
 8002354:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002358:	4b1f      	ldr	r3, [pc, #124]	@ (80023d8 <HAL_RCC_OscConfig+0x558>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d030      	beq.n	80023c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002370:	429a      	cmp	r2, r3
 8002372:	d129      	bne.n	80023c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800237e:	429a      	cmp	r2, r3
 8002380:	d122      	bne.n	80023c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002388:	4013      	ands	r3, r2
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800238e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002390:	4293      	cmp	r3, r2
 8002392:	d119      	bne.n	80023c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800239e:	085b      	lsrs	r3, r3, #1
 80023a0:	3b01      	subs	r3, #1
 80023a2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d10f      	bne.n	80023c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d107      	bne.n	80023c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d001      	beq.n	80023cc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e000      	b.n	80023ce <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40023800 	.word	0x40023800

080023dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e0d0      	b.n	8002596 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023f4:	4b6a      	ldr	r3, [pc, #424]	@ (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 030f 	and.w	r3, r3, #15
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d910      	bls.n	8002424 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002402:	4b67      	ldr	r3, [pc, #412]	@ (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 020f 	bic.w	r2, r3, #15
 800240a:	4965      	ldr	r1, [pc, #404]	@ (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	4313      	orrs	r3, r2
 8002410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002412:	4b63      	ldr	r3, [pc, #396]	@ (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	429a      	cmp	r2, r3
 800241e:	d001      	beq.n	8002424 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e0b8      	b.n	8002596 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d020      	beq.n	8002472 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800243c:	4b59      	ldr	r3, [pc, #356]	@ (80025a4 <HAL_RCC_ClockConfig+0x1c8>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	4a58      	ldr	r2, [pc, #352]	@ (80025a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002442:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002446:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0308 	and.w	r3, r3, #8
 8002450:	2b00      	cmp	r3, #0
 8002452:	d005      	beq.n	8002460 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002454:	4b53      	ldr	r3, [pc, #332]	@ (80025a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	4a52      	ldr	r2, [pc, #328]	@ (80025a4 <HAL_RCC_ClockConfig+0x1c8>)
 800245a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800245e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002460:	4b50      	ldr	r3, [pc, #320]	@ (80025a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	494d      	ldr	r1, [pc, #308]	@ (80025a4 <HAL_RCC_ClockConfig+0x1c8>)
 800246e:	4313      	orrs	r3, r2
 8002470:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d040      	beq.n	8002500 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d107      	bne.n	8002496 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002486:	4b47      	ldr	r3, [pc, #284]	@ (80025a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d115      	bne.n	80024be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e07f      	b.n	8002596 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b02      	cmp	r3, #2
 800249c:	d107      	bne.n	80024ae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800249e:	4b41      	ldr	r3, [pc, #260]	@ (80025a4 <HAL_RCC_ClockConfig+0x1c8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d109      	bne.n	80024be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e073      	b.n	8002596 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ae:	4b3d      	ldr	r3, [pc, #244]	@ (80025a4 <HAL_RCC_ClockConfig+0x1c8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e06b      	b.n	8002596 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024be:	4b39      	ldr	r3, [pc, #228]	@ (80025a4 <HAL_RCC_ClockConfig+0x1c8>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f023 0203 	bic.w	r2, r3, #3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	4936      	ldr	r1, [pc, #216]	@ (80025a4 <HAL_RCC_ClockConfig+0x1c8>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024d0:	f7fe fd32 	bl	8000f38 <HAL_GetTick>
 80024d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d6:	e00a      	b.n	80024ee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d8:	f7fe fd2e 	bl	8000f38 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e053      	b.n	8002596 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ee:	4b2d      	ldr	r3, [pc, #180]	@ (80025a4 <HAL_RCC_ClockConfig+0x1c8>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 020c 	and.w	r2, r3, #12
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d1eb      	bne.n	80024d8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002500:	4b27      	ldr	r3, [pc, #156]	@ (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 030f 	and.w	r3, r3, #15
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	429a      	cmp	r2, r3
 800250c:	d210      	bcs.n	8002530 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250e:	4b24      	ldr	r3, [pc, #144]	@ (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f023 020f 	bic.w	r2, r3, #15
 8002516:	4922      	ldr	r1, [pc, #136]	@ (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	4313      	orrs	r3, r2
 800251c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800251e:	4b20      	ldr	r3, [pc, #128]	@ (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	429a      	cmp	r2, r3
 800252a:	d001      	beq.n	8002530 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e032      	b.n	8002596 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b00      	cmp	r3, #0
 800253a:	d008      	beq.n	800254e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800253c:	4b19      	ldr	r3, [pc, #100]	@ (80025a4 <HAL_RCC_ClockConfig+0x1c8>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	4916      	ldr	r1, [pc, #88]	@ (80025a4 <HAL_RCC_ClockConfig+0x1c8>)
 800254a:	4313      	orrs	r3, r2
 800254c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	2b00      	cmp	r3, #0
 8002558:	d009      	beq.n	800256e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800255a:	4b12      	ldr	r3, [pc, #72]	@ (80025a4 <HAL_RCC_ClockConfig+0x1c8>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	490e      	ldr	r1, [pc, #56]	@ (80025a4 <HAL_RCC_ClockConfig+0x1c8>)
 800256a:	4313      	orrs	r3, r2
 800256c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800256e:	f000 f821 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 8002572:	4602      	mov	r2, r0
 8002574:	4b0b      	ldr	r3, [pc, #44]	@ (80025a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	091b      	lsrs	r3, r3, #4
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	490a      	ldr	r1, [pc, #40]	@ (80025a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002580:	5ccb      	ldrb	r3, [r1, r3]
 8002582:	fa22 f303 	lsr.w	r3, r2, r3
 8002586:	4a09      	ldr	r2, [pc, #36]	@ (80025ac <HAL_RCC_ClockConfig+0x1d0>)
 8002588:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800258a:	4b09      	ldr	r3, [pc, #36]	@ (80025b0 <HAL_RCC_ClockConfig+0x1d4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f7fe fc8e 	bl	8000eb0 <HAL_InitTick>

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40023c00 	.word	0x40023c00
 80025a4:	40023800 	.word	0x40023800
 80025a8:	080055a0 	.word	0x080055a0
 80025ac:	20000004 	.word	0x20000004
 80025b0:	20000008 	.word	0x20000008

080025b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025b8:	b090      	sub	sp, #64	@ 0x40
 80025ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80025bc:	2300      	movs	r3, #0
 80025be:	637b      	str	r3, [r7, #52]	@ 0x34
 80025c0:	2300      	movs	r3, #0
 80025c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025c4:	2300      	movs	r3, #0
 80025c6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025cc:	4b59      	ldr	r3, [pc, #356]	@ (8002734 <HAL_RCC_GetSysClockFreq+0x180>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 030c 	and.w	r3, r3, #12
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d00d      	beq.n	80025f4 <HAL_RCC_GetSysClockFreq+0x40>
 80025d8:	2b08      	cmp	r3, #8
 80025da:	f200 80a1 	bhi.w	8002720 <HAL_RCC_GetSysClockFreq+0x16c>
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d002      	beq.n	80025e8 <HAL_RCC_GetSysClockFreq+0x34>
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	d003      	beq.n	80025ee <HAL_RCC_GetSysClockFreq+0x3a>
 80025e6:	e09b      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025e8:	4b53      	ldr	r3, [pc, #332]	@ (8002738 <HAL_RCC_GetSysClockFreq+0x184>)
 80025ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025ec:	e09b      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025ee:	4b53      	ldr	r3, [pc, #332]	@ (800273c <HAL_RCC_GetSysClockFreq+0x188>)
 80025f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025f2:	e098      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025f4:	4b4f      	ldr	r3, [pc, #316]	@ (8002734 <HAL_RCC_GetSysClockFreq+0x180>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025fc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80025fe:	4b4d      	ldr	r3, [pc, #308]	@ (8002734 <HAL_RCC_GetSysClockFreq+0x180>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d028      	beq.n	800265c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800260a:	4b4a      	ldr	r3, [pc, #296]	@ (8002734 <HAL_RCC_GetSysClockFreq+0x180>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	099b      	lsrs	r3, r3, #6
 8002610:	2200      	movs	r2, #0
 8002612:	623b      	str	r3, [r7, #32]
 8002614:	627a      	str	r2, [r7, #36]	@ 0x24
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800261c:	2100      	movs	r1, #0
 800261e:	4b47      	ldr	r3, [pc, #284]	@ (800273c <HAL_RCC_GetSysClockFreq+0x188>)
 8002620:	fb03 f201 	mul.w	r2, r3, r1
 8002624:	2300      	movs	r3, #0
 8002626:	fb00 f303 	mul.w	r3, r0, r3
 800262a:	4413      	add	r3, r2
 800262c:	4a43      	ldr	r2, [pc, #268]	@ (800273c <HAL_RCC_GetSysClockFreq+0x188>)
 800262e:	fba0 1202 	umull	r1, r2, r0, r2
 8002632:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002634:	460a      	mov	r2, r1
 8002636:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002638:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800263a:	4413      	add	r3, r2
 800263c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800263e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002640:	2200      	movs	r2, #0
 8002642:	61bb      	str	r3, [r7, #24]
 8002644:	61fa      	str	r2, [r7, #28]
 8002646:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800264a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800264e:	f7fd fdf3 	bl	8000238 <__aeabi_uldivmod>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4613      	mov	r3, r2
 8002658:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800265a:	e053      	b.n	8002704 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800265c:	4b35      	ldr	r3, [pc, #212]	@ (8002734 <HAL_RCC_GetSysClockFreq+0x180>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	099b      	lsrs	r3, r3, #6
 8002662:	2200      	movs	r2, #0
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	617a      	str	r2, [r7, #20]
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800266e:	f04f 0b00 	mov.w	fp, #0
 8002672:	4652      	mov	r2, sl
 8002674:	465b      	mov	r3, fp
 8002676:	f04f 0000 	mov.w	r0, #0
 800267a:	f04f 0100 	mov.w	r1, #0
 800267e:	0159      	lsls	r1, r3, #5
 8002680:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002684:	0150      	lsls	r0, r2, #5
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	ebb2 080a 	subs.w	r8, r2, sl
 800268e:	eb63 090b 	sbc.w	r9, r3, fp
 8002692:	f04f 0200 	mov.w	r2, #0
 8002696:	f04f 0300 	mov.w	r3, #0
 800269a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800269e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80026a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80026a6:	ebb2 0408 	subs.w	r4, r2, r8
 80026aa:	eb63 0509 	sbc.w	r5, r3, r9
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	f04f 0300 	mov.w	r3, #0
 80026b6:	00eb      	lsls	r3, r5, #3
 80026b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026bc:	00e2      	lsls	r2, r4, #3
 80026be:	4614      	mov	r4, r2
 80026c0:	461d      	mov	r5, r3
 80026c2:	eb14 030a 	adds.w	r3, r4, sl
 80026c6:	603b      	str	r3, [r7, #0]
 80026c8:	eb45 030b 	adc.w	r3, r5, fp
 80026cc:	607b      	str	r3, [r7, #4]
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	f04f 0300 	mov.w	r3, #0
 80026d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026da:	4629      	mov	r1, r5
 80026dc:	028b      	lsls	r3, r1, #10
 80026de:	4621      	mov	r1, r4
 80026e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026e4:	4621      	mov	r1, r4
 80026e6:	028a      	lsls	r2, r1, #10
 80026e8:	4610      	mov	r0, r2
 80026ea:	4619      	mov	r1, r3
 80026ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026ee:	2200      	movs	r2, #0
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	60fa      	str	r2, [r7, #12]
 80026f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026f8:	f7fd fd9e 	bl	8000238 <__aeabi_uldivmod>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4613      	mov	r3, r2
 8002702:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002704:	4b0b      	ldr	r3, [pc, #44]	@ (8002734 <HAL_RCC_GetSysClockFreq+0x180>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	0c1b      	lsrs	r3, r3, #16
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	3301      	adds	r3, #1
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002714:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002718:	fbb2 f3f3 	udiv	r3, r2, r3
 800271c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800271e:	e002      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002720:	4b05      	ldr	r3, [pc, #20]	@ (8002738 <HAL_RCC_GetSysClockFreq+0x184>)
 8002722:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002724:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002728:	4618      	mov	r0, r3
 800272a:	3740      	adds	r7, #64	@ 0x40
 800272c:	46bd      	mov	sp, r7
 800272e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002732:	bf00      	nop
 8002734:	40023800 	.word	0x40023800
 8002738:	00f42400 	.word	0x00f42400
 800273c:	017d7840 	.word	0x017d7840

08002740 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002744:	4b03      	ldr	r3, [pc, #12]	@ (8002754 <HAL_RCC_GetHCLKFreq+0x14>)
 8002746:	681b      	ldr	r3, [r3, #0]
}
 8002748:	4618      	mov	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	20000004 	.word	0x20000004

08002758 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800275c:	f7ff fff0 	bl	8002740 <HAL_RCC_GetHCLKFreq>
 8002760:	4602      	mov	r2, r0
 8002762:	4b05      	ldr	r3, [pc, #20]	@ (8002778 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	0a9b      	lsrs	r3, r3, #10
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	4903      	ldr	r1, [pc, #12]	@ (800277c <HAL_RCC_GetPCLK1Freq+0x24>)
 800276e:	5ccb      	ldrb	r3, [r1, r3]
 8002770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002774:	4618      	mov	r0, r3
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40023800 	.word	0x40023800
 800277c:	080055b0 	.word	0x080055b0

08002780 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002784:	f7ff ffdc 	bl	8002740 <HAL_RCC_GetHCLKFreq>
 8002788:	4602      	mov	r2, r0
 800278a:	4b05      	ldr	r3, [pc, #20]	@ (80027a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	0b5b      	lsrs	r3, r3, #13
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	4903      	ldr	r1, [pc, #12]	@ (80027a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002796:	5ccb      	ldrb	r3, [r1, r3]
 8002798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800279c:	4618      	mov	r0, r3
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40023800 	.word	0x40023800
 80027a4:	080055b0 	.word	0x080055b0

080027a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b088      	sub	sp, #32
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80027b4:	2300      	movs	r3, #0
 80027b6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80027b8:	2300      	movs	r3, #0
 80027ba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d012      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027d0:	4b69      	ldr	r3, [pc, #420]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	4a68      	ldr	r2, [pc, #416]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027d6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80027da:	6093      	str	r3, [r2, #8]
 80027dc:	4b66      	ldr	r3, [pc, #408]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027e4:	4964      	ldr	r1, [pc, #400]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80027f2:	2301      	movs	r3, #1
 80027f4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d017      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002802:	4b5d      	ldr	r3, [pc, #372]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002804:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002808:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002810:	4959      	ldr	r1, [pc, #356]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002812:	4313      	orrs	r3, r2
 8002814:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800281c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002820:	d101      	bne.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002822:	2301      	movs	r3, #1
 8002824:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800282e:	2301      	movs	r3, #1
 8002830:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d017      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800283e:	4b4e      	ldr	r3, [pc, #312]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002840:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002844:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284c:	494a      	ldr	r1, [pc, #296]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800284e:	4313      	orrs	r3, r2
 8002850:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002858:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800285c:	d101      	bne.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800285e:	2301      	movs	r3, #1
 8002860:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800286a:	2301      	movs	r3, #1
 800286c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800287a:	2301      	movs	r3, #1
 800287c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0320 	and.w	r3, r3, #32
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 808b 	beq.w	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800288c:	4b3a      	ldr	r3, [pc, #232]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800288e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002890:	4a39      	ldr	r2, [pc, #228]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002892:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002896:	6413      	str	r3, [r2, #64]	@ 0x40
 8002898:	4b37      	ldr	r3, [pc, #220]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800289a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028a4:	4b35      	ldr	r3, [pc, #212]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a34      	ldr	r2, [pc, #208]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028b0:	f7fe fb42 	bl	8000f38 <HAL_GetTick>
 80028b4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b8:	f7fe fb3e 	bl	8000f38 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b64      	cmp	r3, #100	@ 0x64
 80028c4:	d901      	bls.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e38f      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80028ca:	4b2c      	ldr	r3, [pc, #176]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0f0      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028d6:	4b28      	ldr	r3, [pc, #160]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028de:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d035      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d02e      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028f4:	4b20      	ldr	r3, [pc, #128]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028fc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002902:	4a1d      	ldr	r2, [pc, #116]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002904:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002908:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800290a:	4b1b      	ldr	r3, [pc, #108]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800290c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800290e:	4a1a      	ldr	r2, [pc, #104]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002910:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002914:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002916:	4a18      	ldr	r2, [pc, #96]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800291c:	4b16      	ldr	r3, [pc, #88]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800291e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b01      	cmp	r3, #1
 8002926:	d114      	bne.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002928:	f7fe fb06 	bl	8000f38 <HAL_GetTick>
 800292c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800292e:	e00a      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002930:	f7fe fb02 	bl	8000f38 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800293e:	4293      	cmp	r3, r2
 8002940:	d901      	bls.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e351      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002946:	4b0c      	ldr	r3, [pc, #48]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0ee      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002956:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800295a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800295e:	d111      	bne.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002960:	4b05      	ldr	r3, [pc, #20]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800296c:	4b04      	ldr	r3, [pc, #16]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800296e:	400b      	ands	r3, r1
 8002970:	4901      	ldr	r1, [pc, #4]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002972:	4313      	orrs	r3, r2
 8002974:	608b      	str	r3, [r1, #8]
 8002976:	e00b      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002978:	40023800 	.word	0x40023800
 800297c:	40007000 	.word	0x40007000
 8002980:	0ffffcff 	.word	0x0ffffcff
 8002984:	4bac      	ldr	r3, [pc, #688]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	4aab      	ldr	r2, [pc, #684]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800298a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800298e:	6093      	str	r3, [r2, #8]
 8002990:	4ba9      	ldr	r3, [pc, #676]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002992:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800299c:	49a6      	ldr	r1, [pc, #664]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0310 	and.w	r3, r3, #16
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d010      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80029ae:	4ba2      	ldr	r3, [pc, #648]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029b4:	4aa0      	ldr	r2, [pc, #640]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029ba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80029be:	4b9e      	ldr	r3, [pc, #632]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029c8:	499b      	ldr	r1, [pc, #620]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00a      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029dc:	4b96      	ldr	r3, [pc, #600]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029e2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029ea:	4993      	ldr	r1, [pc, #588]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00a      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029fe:	4b8e      	ldr	r3, [pc, #568]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a04:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a0c:	498a      	ldr	r1, [pc, #552]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00a      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a20:	4b85      	ldr	r3, [pc, #532]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a2e:	4982      	ldr	r1, [pc, #520]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00a      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a42:	4b7d      	ldr	r3, [pc, #500]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a48:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a50:	4979      	ldr	r1, [pc, #484]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00a      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a64:	4b74      	ldr	r3, [pc, #464]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a6a:	f023 0203 	bic.w	r2, r3, #3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a72:	4971      	ldr	r1, [pc, #452]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00a      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a86:	4b6c      	ldr	r3, [pc, #432]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a8c:	f023 020c 	bic.w	r2, r3, #12
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a94:	4968      	ldr	r1, [pc, #416]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00a      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002aa8:	4b63      	ldr	r3, [pc, #396]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aae:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ab6:	4960      	ldr	r1, [pc, #384]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00a      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002aca:	4b5b      	ldr	r3, [pc, #364]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ad0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ad8:	4957      	ldr	r1, [pc, #348]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00a      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002aec:	4b52      	ldr	r3, [pc, #328]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002af2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002afa:	494f      	ldr	r1, [pc, #316]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002b0e:	4b4a      	ldr	r3, [pc, #296]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b14:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b1c:	4946      	ldr	r1, [pc, #280]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00a      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002b30:	4b41      	ldr	r3, [pc, #260]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b36:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b3e:	493e      	ldr	r1, [pc, #248]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00a      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002b52:	4b39      	ldr	r3, [pc, #228]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b58:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b60:	4935      	ldr	r1, [pc, #212]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00a      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b74:	4b30      	ldr	r3, [pc, #192]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b7a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b82:	492d      	ldr	r1, [pc, #180]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d011      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002b96:	4b28      	ldr	r3, [pc, #160]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b9c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ba4:	4924      	ldr	r1, [pc, #144]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bb4:	d101      	bne.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00a      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bd6:	4b18      	ldr	r3, [pc, #96]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bdc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002be4:	4914      	ldr	r1, [pc, #80]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00b      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bfe:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c08:	490b      	ldr	r1, [pc, #44]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00f      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002c1c:	4b06      	ldr	r3, [pc, #24]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c22:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c2c:	4902      	ldr	r1, [pc, #8]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002c34:	e002      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002c36:	bf00      	nop
 8002c38:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00b      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c48:	4b8a      	ldr	r3, [pc, #552]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c4e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c58:	4986      	ldr	r1, [pc, #536]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00b      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002c6c:	4b81      	ldr	r3, [pc, #516]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c72:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c7c:	497d      	ldr	r1, [pc, #500]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d006      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 80d6 	beq.w	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002c98:	4b76      	ldr	r3, [pc, #472]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a75      	ldr	r2, [pc, #468]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002ca2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ca4:	f7fe f948 	bl	8000f38 <HAL_GetTick>
 8002ca8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002cac:	f7fe f944 	bl	8000f38 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b64      	cmp	r3, #100	@ 0x64
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e195      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cbe:	4b6d      	ldr	r3, [pc, #436]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d021      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d11d      	bne.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002cde:	4b65      	ldr	r3, [pc, #404]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ce4:	0c1b      	lsrs	r3, r3, #16
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002cec:	4b61      	ldr	r3, [pc, #388]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cf2:	0e1b      	lsrs	r3, r3, #24
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	019a      	lsls	r2, r3, #6
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	041b      	lsls	r3, r3, #16
 8002d04:	431a      	orrs	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	061b      	lsls	r3, r3, #24
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	071b      	lsls	r3, r3, #28
 8002d12:	4958      	ldr	r1, [pc, #352]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d004      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d2e:	d00a      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d02e      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d44:	d129      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d46:	4b4b      	ldr	r3, [pc, #300]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d4c:	0c1b      	lsrs	r3, r3, #16
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d54:	4b47      	ldr	r3, [pc, #284]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d5a:	0f1b      	lsrs	r3, r3, #28
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	019a      	lsls	r2, r3, #6
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	041b      	lsls	r3, r3, #16
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	061b      	lsls	r3, r3, #24
 8002d74:	431a      	orrs	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	071b      	lsls	r3, r3, #28
 8002d7a:	493e      	ldr	r1, [pc, #248]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002d82:	4b3c      	ldr	r3, [pc, #240]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d88:	f023 021f 	bic.w	r2, r3, #31
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d90:	3b01      	subs	r3, #1
 8002d92:	4938      	ldr	r1, [pc, #224]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d01d      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002da6:	4b33      	ldr	r3, [pc, #204]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dac:	0e1b      	lsrs	r3, r3, #24
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002db4:	4b2f      	ldr	r3, [pc, #188]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dba:	0f1b      	lsrs	r3, r3, #28
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	019a      	lsls	r2, r3, #6
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	041b      	lsls	r3, r3, #16
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	061b      	lsls	r3, r3, #24
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	071b      	lsls	r3, r3, #28
 8002dda:	4926      	ldr	r1, [pc, #152]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d011      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	019a      	lsls	r2, r3, #6
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	041b      	lsls	r3, r3, #16
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	061b      	lsls	r3, r3, #24
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	071b      	lsls	r3, r3, #28
 8002e0a:	491a      	ldr	r1, [pc, #104]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e12:	4b18      	ldr	r3, [pc, #96]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a17      	ldr	r2, [pc, #92]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e18:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002e1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e1e:	f7fe f88b 	bl	8000f38 <HAL_GetTick>
 8002e22:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e24:	e008      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e26:	f7fe f887 	bl	8000f38 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b64      	cmp	r3, #100	@ 0x64
 8002e32:	d901      	bls.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e0d8      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e38:	4b0e      	ldr	r3, [pc, #56]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0f0      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	f040 80ce 	bne.w	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002e4c:	4b09      	ldr	r3, [pc, #36]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a08      	ldr	r2, [pc, #32]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e58:	f7fe f86e 	bl	8000f38 <HAL_GetTick>
 8002e5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e5e:	e00b      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e60:	f7fe f86a 	bl	8000f38 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b64      	cmp	r3, #100	@ 0x64
 8002e6c:	d904      	bls.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e0bb      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002e72:	bf00      	nop
 8002e74:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e78:	4b5e      	ldr	r3, [pc, #376]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e84:	d0ec      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d009      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d02e      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d12a      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002eae:	4b51      	ldr	r3, [pc, #324]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eb4:	0c1b      	lsrs	r3, r3, #16
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ebc:	4b4d      	ldr	r3, [pc, #308]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ec2:	0f1b      	lsrs	r3, r3, #28
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	019a      	lsls	r2, r3, #6
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	041b      	lsls	r3, r3, #16
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	061b      	lsls	r3, r3, #24
 8002edc:	431a      	orrs	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	071b      	lsls	r3, r3, #28
 8002ee2:	4944      	ldr	r1, [pc, #272]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002eea:	4b42      	ldr	r3, [pc, #264]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ef0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	021b      	lsls	r3, r3, #8
 8002efc:	493d      	ldr	r1, [pc, #244]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d022      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f18:	d11d      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f1a:	4b36      	ldr	r3, [pc, #216]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f20:	0e1b      	lsrs	r3, r3, #24
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f28:	4b32      	ldr	r3, [pc, #200]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f2e:	0f1b      	lsrs	r3, r3, #28
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	019a      	lsls	r2, r3, #6
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	041b      	lsls	r3, r3, #16
 8002f42:	431a      	orrs	r2, r3
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	061b      	lsls	r3, r3, #24
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	071b      	lsls	r3, r3, #28
 8002f4e:	4929      	ldr	r1, [pc, #164]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d028      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f62:	4b24      	ldr	r3, [pc, #144]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f68:	0e1b      	lsrs	r3, r3, #24
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f70:	4b20      	ldr	r3, [pc, #128]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f76:	0c1b      	lsrs	r3, r3, #16
 8002f78:	f003 0303 	and.w	r3, r3, #3
 8002f7c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	019a      	lsls	r2, r3, #6
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	041b      	lsls	r3, r3, #16
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	061b      	lsls	r3, r3, #24
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	071b      	lsls	r3, r3, #28
 8002f96:	4917      	ldr	r1, [pc, #92]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002f9e:	4b15      	ldr	r3, [pc, #84]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fa4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fac:	4911      	ldr	r1, [pc, #68]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a0e      	ldr	r2, [pc, #56]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fc0:	f7fd ffba 	bl	8000f38 <HAL_GetTick>
 8002fc4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002fc8:	f7fd ffb6 	bl	8000f38 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b64      	cmp	r3, #100	@ 0x64
 8002fd4:	d901      	bls.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e007      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002fda:	4b06      	ldr	r3, [pc, #24]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fe2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fe6:	d1ef      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3720      	adds	r7, #32
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40023800 	.word	0x40023800

08002ff8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e049      	b.n	800309e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7fd fd36 	bl	8000a90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2202      	movs	r2, #2
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3304      	adds	r3, #4
 8003034:	4619      	mov	r1, r3
 8003036:	4610      	mov	r0, r2
 8003038:	f000 fb36 	bl	80036a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b082      	sub	sp, #8
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e049      	b.n	800314c <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d106      	bne.n	80030d2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f841 	bl	8003154 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2202      	movs	r2, #2
 80030d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3304      	adds	r3, #4
 80030e2:	4619      	mov	r1, r3
 80030e4:	4610      	mov	r0, r2
 80030e6:	f000 fadf 	bl	80036a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d020      	beq.n	80031cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d01b      	beq.n	80031cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f06f 0202 	mvn.w	r2, #2
 800319c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	f003 0303 	and.w	r3, r3, #3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 fa5a 	bl	800366c <HAL_TIM_IC_CaptureCallback>
 80031b8:	e005      	b.n	80031c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 fa4c 	bl	8003658 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 fa5d 	bl	8003680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	f003 0304 	and.w	r3, r3, #4
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d020      	beq.n	8003218 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d01b      	beq.n	8003218 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f06f 0204 	mvn.w	r2, #4
 80031e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2202      	movs	r2, #2
 80031ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 fa34 	bl	800366c <HAL_TIM_IC_CaptureCallback>
 8003204:	e005      	b.n	8003212 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 fa26 	bl	8003658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 fa37 	bl	8003680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b00      	cmp	r3, #0
 8003220:	d020      	beq.n	8003264 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f003 0308 	and.w	r3, r3, #8
 8003228:	2b00      	cmp	r3, #0
 800322a:	d01b      	beq.n	8003264 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f06f 0208 	mvn.w	r2, #8
 8003234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2204      	movs	r2, #4
 800323a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	f003 0303 	and.w	r3, r3, #3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 fa0e 	bl	800366c <HAL_TIM_IC_CaptureCallback>
 8003250:	e005      	b.n	800325e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 fa00 	bl	8003658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 fa11 	bl	8003680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	f003 0310 	and.w	r3, r3, #16
 800326a:	2b00      	cmp	r3, #0
 800326c:	d020      	beq.n	80032b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f003 0310 	and.w	r3, r3, #16
 8003274:	2b00      	cmp	r3, #0
 8003276:	d01b      	beq.n	80032b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f06f 0210 	mvn.w	r2, #16
 8003280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2208      	movs	r2, #8
 8003286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f9e8 	bl	800366c <HAL_TIM_IC_CaptureCallback>
 800329c:	e005      	b.n	80032aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f9da 	bl	8003658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 f9eb 	bl	8003680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00c      	beq.n	80032d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d007      	beq.n	80032d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f06f 0201 	mvn.w	r2, #1
 80032cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f9b8 	bl	8003644 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d104      	bne.n	80032e8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00c      	beq.n	8003302 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d007      	beq.n	8003302 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80032fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 fcdb 	bl	8003cb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00c      	beq.n	8003326 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003312:	2b00      	cmp	r3, #0
 8003314:	d007      	beq.n	8003326 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800331e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 fcd3 	bl	8003ccc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00c      	beq.n	800334a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003336:	2b00      	cmp	r3, #0
 8003338:	d007      	beq.n	800334a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 f9a5 	bl	8003694 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	f003 0320 	and.w	r3, r3, #32
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00c      	beq.n	800336e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f003 0320 	and.w	r3, r3, #32
 800335a:	2b00      	cmp	r3, #0
 800335c:	d007      	beq.n	800336e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f06f 0220 	mvn.w	r2, #32
 8003366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 fc9b 	bl	8003ca4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800336e:	bf00      	nop
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b086      	sub	sp, #24
 800337a:	af00      	add	r7, sp, #0
 800337c:	60f8      	str	r0, [r7, #12]
 800337e:	60b9      	str	r1, [r7, #8]
 8003380:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003382:	2300      	movs	r3, #0
 8003384:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800338c:	2b01      	cmp	r3, #1
 800338e:	d101      	bne.n	8003394 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003390:	2302      	movs	r3, #2
 8003392:	e088      	b.n	80034a6 <HAL_TIM_IC_ConfigChannel+0x130>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d11b      	bne.n	80033da <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80033b2:	f000 fa25 	bl	8003800 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	699a      	ldr	r2, [r3, #24]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 020c 	bic.w	r2, r2, #12
 80033c4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6999      	ldr	r1, [r3, #24]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	619a      	str	r2, [r3, #24]
 80033d8:	e060      	b.n	800349c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d11c      	bne.n	800341a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80033f0:	f000 faa9 	bl	8003946 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699a      	ldr	r2, [r3, #24]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003402:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6999      	ldr	r1, [r3, #24]
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	021a      	lsls	r2, r3, #8
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	619a      	str	r2, [r3, #24]
 8003418:	e040      	b.n	800349c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b08      	cmp	r3, #8
 800341e:	d11b      	bne.n	8003458 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003430:	f000 faf6 	bl	8003a20 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	69da      	ldr	r2, [r3, #28]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 020c 	bic.w	r2, r2, #12
 8003442:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	69d9      	ldr	r1, [r3, #28]
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	689a      	ldr	r2, [r3, #8]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	61da      	str	r2, [r3, #28]
 8003456:	e021      	b.n	800349c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b0c      	cmp	r3, #12
 800345c:	d11c      	bne.n	8003498 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800346e:	f000 fb13 	bl	8003a98 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	69da      	ldr	r2, [r3, #28]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003480:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	69d9      	ldr	r1, [r3, #28]
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	021a      	lsls	r2, r3, #8
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	61da      	str	r2, [r3, #28]
 8003496:	e001      	b.n	800349c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3718      	adds	r7, #24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
	...

080034b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034ba:	2300      	movs	r3, #0
 80034bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d101      	bne.n	80034cc <HAL_TIM_ConfigClockSource+0x1c>
 80034c8:	2302      	movs	r3, #2
 80034ca:	e0b4      	b.n	8003636 <HAL_TIM_ConfigClockSource+0x186>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	4b56      	ldr	r3, [pc, #344]	@ (8003640 <HAL_TIM_ConfigClockSource+0x190>)
 80034e8:	4013      	ands	r3, r2
 80034ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003504:	d03e      	beq.n	8003584 <HAL_TIM_ConfigClockSource+0xd4>
 8003506:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800350a:	f200 8087 	bhi.w	800361c <HAL_TIM_ConfigClockSource+0x16c>
 800350e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003512:	f000 8086 	beq.w	8003622 <HAL_TIM_ConfigClockSource+0x172>
 8003516:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800351a:	d87f      	bhi.n	800361c <HAL_TIM_ConfigClockSource+0x16c>
 800351c:	2b70      	cmp	r3, #112	@ 0x70
 800351e:	d01a      	beq.n	8003556 <HAL_TIM_ConfigClockSource+0xa6>
 8003520:	2b70      	cmp	r3, #112	@ 0x70
 8003522:	d87b      	bhi.n	800361c <HAL_TIM_ConfigClockSource+0x16c>
 8003524:	2b60      	cmp	r3, #96	@ 0x60
 8003526:	d050      	beq.n	80035ca <HAL_TIM_ConfigClockSource+0x11a>
 8003528:	2b60      	cmp	r3, #96	@ 0x60
 800352a:	d877      	bhi.n	800361c <HAL_TIM_ConfigClockSource+0x16c>
 800352c:	2b50      	cmp	r3, #80	@ 0x50
 800352e:	d03c      	beq.n	80035aa <HAL_TIM_ConfigClockSource+0xfa>
 8003530:	2b50      	cmp	r3, #80	@ 0x50
 8003532:	d873      	bhi.n	800361c <HAL_TIM_ConfigClockSource+0x16c>
 8003534:	2b40      	cmp	r3, #64	@ 0x40
 8003536:	d058      	beq.n	80035ea <HAL_TIM_ConfigClockSource+0x13a>
 8003538:	2b40      	cmp	r3, #64	@ 0x40
 800353a:	d86f      	bhi.n	800361c <HAL_TIM_ConfigClockSource+0x16c>
 800353c:	2b30      	cmp	r3, #48	@ 0x30
 800353e:	d064      	beq.n	800360a <HAL_TIM_ConfigClockSource+0x15a>
 8003540:	2b30      	cmp	r3, #48	@ 0x30
 8003542:	d86b      	bhi.n	800361c <HAL_TIM_ConfigClockSource+0x16c>
 8003544:	2b20      	cmp	r3, #32
 8003546:	d060      	beq.n	800360a <HAL_TIM_ConfigClockSource+0x15a>
 8003548:	2b20      	cmp	r3, #32
 800354a:	d867      	bhi.n	800361c <HAL_TIM_ConfigClockSource+0x16c>
 800354c:	2b00      	cmp	r3, #0
 800354e:	d05c      	beq.n	800360a <HAL_TIM_ConfigClockSource+0x15a>
 8003550:	2b10      	cmp	r3, #16
 8003552:	d05a      	beq.n	800360a <HAL_TIM_ConfigClockSource+0x15a>
 8003554:	e062      	b.n	800361c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003566:	f000 faef 	bl	8003b48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003578:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	609a      	str	r2, [r3, #8]
      break;
 8003582:	e04f      	b.n	8003624 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003594:	f000 fad8 	bl	8003b48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035a6:	609a      	str	r2, [r3, #8]
      break;
 80035a8:	e03c      	b.n	8003624 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035b6:	461a      	mov	r2, r3
 80035b8:	f000 f996 	bl	80038e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2150      	movs	r1, #80	@ 0x50
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 faa5 	bl	8003b12 <TIM_ITRx_SetConfig>
      break;
 80035c8:	e02c      	b.n	8003624 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035d6:	461a      	mov	r2, r3
 80035d8:	f000 f9f2 	bl	80039c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2160      	movs	r1, #96	@ 0x60
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 fa95 	bl	8003b12 <TIM_ITRx_SetConfig>
      break;
 80035e8:	e01c      	b.n	8003624 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035f6:	461a      	mov	r2, r3
 80035f8:	f000 f976 	bl	80038e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2140      	movs	r1, #64	@ 0x40
 8003602:	4618      	mov	r0, r3
 8003604:	f000 fa85 	bl	8003b12 <TIM_ITRx_SetConfig>
      break;
 8003608:	e00c      	b.n	8003624 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4619      	mov	r1, r3
 8003614:	4610      	mov	r0, r2
 8003616:	f000 fa7c 	bl	8003b12 <TIM_ITRx_SetConfig>
      break;
 800361a:	e003      	b.n	8003624 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	73fb      	strb	r3, [r7, #15]
      break;
 8003620:	e000      	b.n	8003624 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003622:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003634:	7bfb      	ldrb	r3, [r7, #15]
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	fffeff88 	.word	0xfffeff88

08003644 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a46      	ldr	r2, [pc, #280]	@ (80037d4 <TIM_Base_SetConfig+0x12c>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d013      	beq.n	80036e8 <TIM_Base_SetConfig+0x40>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036c6:	d00f      	beq.n	80036e8 <TIM_Base_SetConfig+0x40>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a43      	ldr	r2, [pc, #268]	@ (80037d8 <TIM_Base_SetConfig+0x130>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d00b      	beq.n	80036e8 <TIM_Base_SetConfig+0x40>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a42      	ldr	r2, [pc, #264]	@ (80037dc <TIM_Base_SetConfig+0x134>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d007      	beq.n	80036e8 <TIM_Base_SetConfig+0x40>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a41      	ldr	r2, [pc, #260]	@ (80037e0 <TIM_Base_SetConfig+0x138>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d003      	beq.n	80036e8 <TIM_Base_SetConfig+0x40>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a40      	ldr	r2, [pc, #256]	@ (80037e4 <TIM_Base_SetConfig+0x13c>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d108      	bne.n	80036fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a35      	ldr	r2, [pc, #212]	@ (80037d4 <TIM_Base_SetConfig+0x12c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d02b      	beq.n	800375a <TIM_Base_SetConfig+0xb2>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003708:	d027      	beq.n	800375a <TIM_Base_SetConfig+0xb2>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a32      	ldr	r2, [pc, #200]	@ (80037d8 <TIM_Base_SetConfig+0x130>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d023      	beq.n	800375a <TIM_Base_SetConfig+0xb2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a31      	ldr	r2, [pc, #196]	@ (80037dc <TIM_Base_SetConfig+0x134>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d01f      	beq.n	800375a <TIM_Base_SetConfig+0xb2>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a30      	ldr	r2, [pc, #192]	@ (80037e0 <TIM_Base_SetConfig+0x138>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d01b      	beq.n	800375a <TIM_Base_SetConfig+0xb2>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a2f      	ldr	r2, [pc, #188]	@ (80037e4 <TIM_Base_SetConfig+0x13c>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d017      	beq.n	800375a <TIM_Base_SetConfig+0xb2>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a2e      	ldr	r2, [pc, #184]	@ (80037e8 <TIM_Base_SetConfig+0x140>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d013      	beq.n	800375a <TIM_Base_SetConfig+0xb2>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a2d      	ldr	r2, [pc, #180]	@ (80037ec <TIM_Base_SetConfig+0x144>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d00f      	beq.n	800375a <TIM_Base_SetConfig+0xb2>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a2c      	ldr	r2, [pc, #176]	@ (80037f0 <TIM_Base_SetConfig+0x148>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d00b      	beq.n	800375a <TIM_Base_SetConfig+0xb2>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a2b      	ldr	r2, [pc, #172]	@ (80037f4 <TIM_Base_SetConfig+0x14c>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d007      	beq.n	800375a <TIM_Base_SetConfig+0xb2>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a2a      	ldr	r2, [pc, #168]	@ (80037f8 <TIM_Base_SetConfig+0x150>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d003      	beq.n	800375a <TIM_Base_SetConfig+0xb2>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a29      	ldr	r2, [pc, #164]	@ (80037fc <TIM_Base_SetConfig+0x154>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d108      	bne.n	800376c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003760:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	4313      	orrs	r3, r2
 800376a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	4313      	orrs	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a10      	ldr	r2, [pc, #64]	@ (80037d4 <TIM_Base_SetConfig+0x12c>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d003      	beq.n	80037a0 <TIM_Base_SetConfig+0xf8>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a12      	ldr	r2, [pc, #72]	@ (80037e4 <TIM_Base_SetConfig+0x13c>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d103      	bne.n	80037a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	691a      	ldr	r2, [r3, #16]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d105      	bne.n	80037c6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	f023 0201 	bic.w	r2, r3, #1
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	611a      	str	r2, [r3, #16]
  }
}
 80037c6:	bf00      	nop
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40010000 	.word	0x40010000
 80037d8:	40000400 	.word	0x40000400
 80037dc:	40000800 	.word	0x40000800
 80037e0:	40000c00 	.word	0x40000c00
 80037e4:	40010400 	.word	0x40010400
 80037e8:	40014000 	.word	0x40014000
 80037ec:	40014400 	.word	0x40014400
 80037f0:	40014800 	.word	0x40014800
 80037f4:	40001800 	.word	0x40001800
 80037f8:	40001c00 	.word	0x40001c00
 80037fc:	40002000 	.word	0x40002000

08003800 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003800:	b480      	push	{r7}
 8003802:	b087      	sub	sp, #28
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
 800380c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	f023 0201 	bic.w	r2, r3, #1
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4a28      	ldr	r2, [pc, #160]	@ (80038cc <TIM_TI1_SetConfig+0xcc>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d01b      	beq.n	8003866 <TIM_TI1_SetConfig+0x66>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003834:	d017      	beq.n	8003866 <TIM_TI1_SetConfig+0x66>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	4a25      	ldr	r2, [pc, #148]	@ (80038d0 <TIM_TI1_SetConfig+0xd0>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d013      	beq.n	8003866 <TIM_TI1_SetConfig+0x66>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	4a24      	ldr	r2, [pc, #144]	@ (80038d4 <TIM_TI1_SetConfig+0xd4>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d00f      	beq.n	8003866 <TIM_TI1_SetConfig+0x66>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4a23      	ldr	r2, [pc, #140]	@ (80038d8 <TIM_TI1_SetConfig+0xd8>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d00b      	beq.n	8003866 <TIM_TI1_SetConfig+0x66>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4a22      	ldr	r2, [pc, #136]	@ (80038dc <TIM_TI1_SetConfig+0xdc>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d007      	beq.n	8003866 <TIM_TI1_SetConfig+0x66>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	4a21      	ldr	r2, [pc, #132]	@ (80038e0 <TIM_TI1_SetConfig+0xe0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d003      	beq.n	8003866 <TIM_TI1_SetConfig+0x66>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	4a20      	ldr	r2, [pc, #128]	@ (80038e4 <TIM_TI1_SetConfig+0xe4>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d101      	bne.n	800386a <TIM_TI1_SetConfig+0x6a>
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <TIM_TI1_SetConfig+0x6c>
 800386a:	2300      	movs	r3, #0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d008      	beq.n	8003882 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f023 0303 	bic.w	r3, r3, #3
 8003876:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4313      	orrs	r3, r2
 800387e:	617b      	str	r3, [r7, #20]
 8003880:	e003      	b.n	800388a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003890:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	b2db      	uxtb	r3, r3
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	4313      	orrs	r3, r2
 800389c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f023 030a 	bic.w	r3, r3, #10
 80038a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	f003 030a 	and.w	r3, r3, #10
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	621a      	str	r2, [r3, #32]
}
 80038be:	bf00      	nop
 80038c0:	371c      	adds	r7, #28
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40010000 	.word	0x40010000
 80038d0:	40000400 	.word	0x40000400
 80038d4:	40000800 	.word	0x40000800
 80038d8:	40000c00 	.word	0x40000c00
 80038dc:	40010400 	.word	0x40010400
 80038e0:	40014000 	.word	0x40014000
 80038e4:	40001800 	.word	0x40001800

080038e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	f023 0201 	bic.w	r2, r3, #1
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003912:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	011b      	lsls	r3, r3, #4
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	4313      	orrs	r3, r2
 800391c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f023 030a 	bic.w	r3, r3, #10
 8003924:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	4313      	orrs	r3, r2
 800392c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	621a      	str	r2, [r3, #32]
}
 800393a:	bf00      	nop
 800393c:	371c      	adds	r7, #28
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003946:	b480      	push	{r7}
 8003948:	b087      	sub	sp, #28
 800394a:	af00      	add	r7, sp, #0
 800394c:	60f8      	str	r0, [r7, #12]
 800394e:	60b9      	str	r1, [r7, #8]
 8003950:	607a      	str	r2, [r7, #4]
 8003952:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	f023 0210 	bic.w	r2, r3, #16
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003972:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	021b      	lsls	r3, r3, #8
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	4313      	orrs	r3, r2
 800397c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003984:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	031b      	lsls	r3, r3, #12
 800398a:	b29b      	uxth	r3, r3
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	4313      	orrs	r3, r2
 8003990:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003998:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	621a      	str	r2, [r3, #32]
}
 80039b4:	bf00      	nop
 80039b6:	371c      	adds	r7, #28
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b087      	sub	sp, #28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	f023 0210 	bic.w	r2, r3, #16
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80039ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	031b      	lsls	r3, r3, #12
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80039fc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	011b      	lsls	r3, r3, #4
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	621a      	str	r2, [r3, #32]
}
 8003a14:	bf00      	nop
 8003a16:	371c      	adds	r7, #28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b087      	sub	sp, #28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
 8003a2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f023 0303 	bic.w	r3, r3, #3
 8003a4c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a5c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003a70:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	021b      	lsls	r3, r3, #8
 8003a76:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	621a      	str	r2, [r3, #32]
}
 8003a8c:	bf00      	nop
 8003a8e:	371c      	adds	r7, #28
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
 8003aa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ac4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	021b      	lsls	r3, r3, #8
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ad6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	031b      	lsls	r3, r3, #12
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003aea:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	031b      	lsls	r3, r3, #12
 8003af0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	621a      	str	r2, [r3, #32]
}
 8003b06:	bf00      	nop
 8003b08:	371c      	adds	r7, #28
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b085      	sub	sp, #20
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
 8003b1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f043 0307 	orr.w	r3, r3, #7
 8003b34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	609a      	str	r2, [r3, #8]
}
 8003b3c:	bf00      	nop
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b087      	sub	sp, #28
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
 8003b54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	021a      	lsls	r2, r3, #8
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	609a      	str	r2, [r3, #8]
}
 8003b7c:	bf00      	nop
 8003b7e:	371c      	adds	r7, #28
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d101      	bne.n	8003ba0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	e06d      	b.n	8003c7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2202      	movs	r2, #2
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a30      	ldr	r2, [pc, #192]	@ (8003c88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d004      	beq.n	8003bd4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a2f      	ldr	r2, [pc, #188]	@ (8003c8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d108      	bne.n	8003be6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003bda:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a20      	ldr	r2, [pc, #128]	@ (8003c88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d022      	beq.n	8003c50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c12:	d01d      	beq.n	8003c50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a1d      	ldr	r2, [pc, #116]	@ (8003c90 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d018      	beq.n	8003c50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a1c      	ldr	r2, [pc, #112]	@ (8003c94 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d013      	beq.n	8003c50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a1a      	ldr	r2, [pc, #104]	@ (8003c98 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00e      	beq.n	8003c50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a15      	ldr	r2, [pc, #84]	@ (8003c8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d009      	beq.n	8003c50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a16      	ldr	r2, [pc, #88]	@ (8003c9c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d004      	beq.n	8003c50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a15      	ldr	r2, [pc, #84]	@ (8003ca0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d10c      	bne.n	8003c6a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	40010000 	.word	0x40010000
 8003c8c:	40010400 	.word	0x40010400
 8003c90:	40000400 	.word	0x40000400
 8003c94:	40000800 	.word	0x40000800
 8003c98:	40000c00 	.word	0x40000c00
 8003c9c:	40014000 	.word	0x40014000
 8003ca0:	40001800 	.word	0x40001800

08003ca4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e040      	b.n	8003d74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d106      	bne.n	8003d08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7fc ff10 	bl	8000b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2224      	movs	r2, #36	@ 0x24
 8003d0c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0201 	bic.w	r2, r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d002      	beq.n	8003d2c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 fe5e 	bl	80049e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 fbf7 	bl	8004520 <UART_SetConfig>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d101      	bne.n	8003d3c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e01b      	b.n	8003d74 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689a      	ldr	r2, [r3, #8]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 fedd 	bl	8004b2c <UART_CheckIdleState>
 8003d72:	4603      	mov	r3, r0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08a      	sub	sp, #40	@ 0x28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	4613      	mov	r3, r2
 8003d88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d90:	2b20      	cmp	r3, #32
 8003d92:	d132      	bne.n	8003dfa <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d002      	beq.n	8003da0 <HAL_UART_Receive_IT+0x24>
 8003d9a:	88fb      	ldrh	r3, [r7, #6]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e02b      	b.n	8003dfc <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d018      	beq.n	8003dea <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	e853 3f00 	ldrex	r3, [r3]
 8003dc4:	613b      	str	r3, [r7, #16]
   return(result);
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003dcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd6:	623b      	str	r3, [r7, #32]
 8003dd8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dda:	69f9      	ldr	r1, [r7, #28]
 8003ddc:	6a3a      	ldr	r2, [r7, #32]
 8003dde:	e841 2300 	strex	r3, r2, [r1]
 8003de2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1e6      	bne.n	8003db8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003dea:	88fb      	ldrh	r3, [r7, #6]
 8003dec:	461a      	mov	r2, r3
 8003dee:	68b9      	ldr	r1, [r7, #8]
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f000 ffb1 	bl	8004d58 <UART_Start_Receive_IT>
 8003df6:	4603      	mov	r3, r0
 8003df8:	e000      	b.n	8003dfc <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003dfa:	2302      	movs	r3, #2
  }
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3728      	adds	r7, #40	@ 0x28
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08a      	sub	sp, #40	@ 0x28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e16:	2b20      	cmp	r3, #32
 8003e18:	d165      	bne.n	8003ee6 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <HAL_UART_Transmit_DMA+0x22>
 8003e20:	88fb      	ldrh	r3, [r7, #6]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e05e      	b.n	8003ee8 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	88fa      	ldrh	r2, [r7, #6]
 8003e34:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	88fa      	ldrh	r2, [r7, #6]
 8003e3c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2221      	movs	r2, #33	@ 0x21
 8003e4c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d027      	beq.n	8003ea6 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e5a:	4a25      	ldr	r2, [pc, #148]	@ (8003ef0 <HAL_UART_Transmit_DMA+0xec>)
 8003e5c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e62:	4a24      	ldr	r2, [pc, #144]	@ (8003ef4 <HAL_UART_Transmit_DMA+0xf0>)
 8003e64:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e6a:	4a23      	ldr	r2, [pc, #140]	@ (8003ef8 <HAL_UART_Transmit_DMA+0xf4>)
 8003e6c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e72:	2200      	movs	r2, #0
 8003e74:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e7e:	4619      	mov	r1, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	3328      	adds	r3, #40	@ 0x28
 8003e86:	461a      	mov	r2, r3
 8003e88:	88fb      	ldrh	r3, [r7, #6]
 8003e8a:	f7fd fabd 	bl	8001408 <HAL_DMA_Start_IT>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d008      	beq.n	8003ea6 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2210      	movs	r2, #16
 8003e98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e020      	b.n	8003ee8 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2240      	movs	r2, #64	@ 0x40
 8003eac:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	3308      	adds	r3, #8
 8003eb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	e853 3f00 	ldrex	r3, [r3]
 8003ebc:	613b      	str	r3, [r7, #16]
   return(result);
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ec4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	3308      	adds	r3, #8
 8003ecc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ece:	623a      	str	r2, [r7, #32]
 8003ed0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed2:	69f9      	ldr	r1, [r7, #28]
 8003ed4:	6a3a      	ldr	r2, [r7, #32]
 8003ed6:	e841 2300 	strex	r3, r2, [r1]
 8003eda:	61bb      	str	r3, [r7, #24]
   return(result);
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1e5      	bne.n	8003eae <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	e000      	b.n	8003ee8 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8003ee6:	2302      	movs	r3, #2
  }
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3728      	adds	r7, #40	@ 0x28
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	08004ff9 	.word	0x08004ff9
 8003ef4:	0800508f 	.word	0x0800508f
 8003ef8:	080050ab 	.word	0x080050ab

08003efc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b0ba      	sub	sp, #232	@ 0xe8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003f22:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003f26:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003f30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d115      	bne.n	8003f64 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f3c:	f003 0320 	and.w	r3, r3, #32
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00f      	beq.n	8003f64 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f48:	f003 0320 	and.w	r3, r3, #32
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d009      	beq.n	8003f64 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 82ac 	beq.w	80044b2 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	4798      	blx	r3
      }
      return;
 8003f62:	e2a6      	b.n	80044b2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003f64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 8117 	beq.w	800419c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003f6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d106      	bne.n	8003f88 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003f7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003f7e:	4b85      	ldr	r3, [pc, #532]	@ (8004194 <HAL_UART_IRQHandler+0x298>)
 8003f80:	4013      	ands	r3, r2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 810a 	beq.w	800419c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d011      	beq.n	8003fb8 <HAL_UART_IRQHandler+0xbc>
 8003f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00b      	beq.n	8003fb8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fae:	f043 0201 	orr.w	r2, r3, #1
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d011      	beq.n	8003fe8 <HAL_UART_IRQHandler+0xec>
 8003fc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00b      	beq.n	8003fe8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fde:	f043 0204 	orr.w	r2, r3, #4
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d011      	beq.n	8004018 <HAL_UART_IRQHandler+0x11c>
 8003ff4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00b      	beq.n	8004018 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2204      	movs	r2, #4
 8004006:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800400e:	f043 0202 	orr.w	r2, r3, #2
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800401c:	f003 0308 	and.w	r3, r3, #8
 8004020:	2b00      	cmp	r3, #0
 8004022:	d017      	beq.n	8004054 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004028:	f003 0320 	and.w	r3, r3, #32
 800402c:	2b00      	cmp	r3, #0
 800402e:	d105      	bne.n	800403c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004030:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004034:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00b      	beq.n	8004054 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2208      	movs	r2, #8
 8004042:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800404a:	f043 0208 	orr.w	r2, r3, #8
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004058:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800405c:	2b00      	cmp	r3, #0
 800405e:	d012      	beq.n	8004086 <HAL_UART_IRQHandler+0x18a>
 8004060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004064:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00c      	beq.n	8004086 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004074:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800407c:	f043 0220 	orr.w	r2, r3, #32
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 8212 	beq.w	80044b6 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004096:	f003 0320 	and.w	r3, r3, #32
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00d      	beq.n	80040ba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800409e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040a2:	f003 0320 	and.w	r3, r3, #32
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d007      	beq.n	80040ba <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ce:	2b40      	cmp	r3, #64	@ 0x40
 80040d0:	d005      	beq.n	80040de <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80040d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040d6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d04f      	beq.n	800417e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 ff26 	bl	8004f30 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ee:	2b40      	cmp	r3, #64	@ 0x40
 80040f0:	d141      	bne.n	8004176 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	3308      	adds	r3, #8
 80040f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004100:	e853 3f00 	ldrex	r3, [r3]
 8004104:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004108:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800410c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004110:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	3308      	adds	r3, #8
 800411a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800411e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004122:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004126:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800412a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800412e:	e841 2300 	strex	r3, r2, [r1]
 8004132:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004136:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1d9      	bne.n	80040f2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004142:	2b00      	cmp	r3, #0
 8004144:	d013      	beq.n	800416e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800414a:	4a13      	ldr	r2, [pc, #76]	@ (8004198 <HAL_UART_IRQHandler+0x29c>)
 800414c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004152:	4618      	mov	r0, r3
 8004154:	f7fd fa28 	bl	80015a8 <HAL_DMA_Abort_IT>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d017      	beq.n	800418e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004168:	4610      	mov	r0, r2
 800416a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800416c:	e00f      	b.n	800418e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f9b6 	bl	80044e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004174:	e00b      	b.n	800418e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f9b2 	bl	80044e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800417c:	e007      	b.n	800418e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f9ae 	bl	80044e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800418c:	e193      	b.n	80044b6 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800418e:	bf00      	nop
    return;
 8004190:	e191      	b.n	80044b6 <HAL_UART_IRQHandler+0x5ba>
 8004192:	bf00      	nop
 8004194:	04000120 	.word	0x04000120
 8004198:	08005129 	.word	0x08005129

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	f040 814c 	bne.w	800443e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80041a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041aa:	f003 0310 	and.w	r3, r3, #16
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f000 8145 	beq.w	800443e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80041b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041b8:	f003 0310 	and.w	r3, r3, #16
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 813e 	beq.w	800443e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2210      	movs	r2, #16
 80041c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041d4:	2b40      	cmp	r3, #64	@ 0x40
 80041d6:	f040 80b6 	bne.w	8004346 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041e6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 8165 	beq.w	80044ba <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80041f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80041fa:	429a      	cmp	r2, r3
 80041fc:	f080 815d 	bcs.w	80044ba <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004206:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004214:	f000 8086 	beq.w	8004324 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004220:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004224:	e853 3f00 	ldrex	r3, [r3]
 8004228:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800422c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004230:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004234:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	461a      	mov	r2, r3
 800423e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004242:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004246:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800424e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004252:	e841 2300 	strex	r3, r2, [r1]
 8004256:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800425a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1da      	bne.n	8004218 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	3308      	adds	r3, #8
 8004268:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800426c:	e853 3f00 	ldrex	r3, [r3]
 8004270:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004272:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004274:	f023 0301 	bic.w	r3, r3, #1
 8004278:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3308      	adds	r3, #8
 8004282:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004286:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800428a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800428e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004292:	e841 2300 	strex	r3, r2, [r1]
 8004296:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004298:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1e1      	bne.n	8004262 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3308      	adds	r3, #8
 80042a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042a8:	e853 3f00 	ldrex	r3, [r3]
 80042ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80042ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	3308      	adds	r3, #8
 80042be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80042c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80042c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80042c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80042ca:	e841 2300 	strex	r3, r2, [r1]
 80042ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80042d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1e3      	bne.n	800429e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2220      	movs	r2, #32
 80042da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042ec:	e853 3f00 	ldrex	r3, [r3]
 80042f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80042f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042f4:	f023 0310 	bic.w	r3, r3, #16
 80042f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	461a      	mov	r2, r3
 8004302:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004306:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004308:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800430c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800430e:	e841 2300 	strex	r3, r2, [r1]
 8004312:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004314:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1e4      	bne.n	80042e4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800431e:	4618      	mov	r0, r3
 8004320:	f7fd f8d2 	bl	80014c8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2202      	movs	r2, #2
 8004328:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004336:	b29b      	uxth	r3, r3
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	b29b      	uxth	r3, r3
 800433c:	4619      	mov	r1, r3
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f8d8 	bl	80044f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004344:	e0b9      	b.n	80044ba <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004352:	b29b      	uxth	r3, r3
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004360:	b29b      	uxth	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 80ab 	beq.w	80044be <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8004368:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 80a6 	beq.w	80044be <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800437a:	e853 3f00 	ldrex	r3, [r3]
 800437e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004382:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004386:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	461a      	mov	r2, r3
 8004390:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004394:	647b      	str	r3, [r7, #68]	@ 0x44
 8004396:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004398:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800439a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800439c:	e841 2300 	strex	r3, r2, [r1]
 80043a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1e4      	bne.n	8004372 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3308      	adds	r3, #8
 80043ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b2:	e853 3f00 	ldrex	r3, [r3]
 80043b6:	623b      	str	r3, [r7, #32]
   return(result);
 80043b8:	6a3b      	ldr	r3, [r7, #32]
 80043ba:	f023 0301 	bic.w	r3, r3, #1
 80043be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	3308      	adds	r3, #8
 80043c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80043cc:	633a      	str	r2, [r7, #48]	@ 0x30
 80043ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043d4:	e841 2300 	strex	r3, r2, [r1]
 80043d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1e3      	bne.n	80043a8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	e853 3f00 	ldrex	r3, [r3]
 8004400:	60fb      	str	r3, [r7, #12]
   return(result);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f023 0310 	bic.w	r3, r3, #16
 8004408:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	461a      	mov	r2, r3
 8004412:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004416:	61fb      	str	r3, [r7, #28]
 8004418:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441a:	69b9      	ldr	r1, [r7, #24]
 800441c:	69fa      	ldr	r2, [r7, #28]
 800441e:	e841 2300 	strex	r3, r2, [r1]
 8004422:	617b      	str	r3, [r7, #20]
   return(result);
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1e4      	bne.n	80043f4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2202      	movs	r2, #2
 800442e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004430:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004434:	4619      	mov	r1, r3
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f85c 	bl	80044f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800443c:	e03f      	b.n	80044be <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800443e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004442:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00e      	beq.n	8004468 <HAL_UART_IRQHandler+0x56c>
 800444a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800444e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d008      	beq.n	8004468 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800445e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 f853 	bl	800450c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004466:	e02d      	b.n	80044c4 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800446c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00e      	beq.n	8004492 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004478:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800447c:	2b00      	cmp	r3, #0
 800447e:	d008      	beq.n	8004492 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004484:	2b00      	cmp	r3, #0
 8004486:	d01c      	beq.n	80044c2 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	4798      	blx	r3
    }
    return;
 8004490:	e017      	b.n	80044c2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800449a:	2b00      	cmp	r3, #0
 800449c:	d012      	beq.n	80044c4 <HAL_UART_IRQHandler+0x5c8>
 800449e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00c      	beq.n	80044c4 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 fe52 	bl	8005154 <UART_EndTransmit_IT>
    return;
 80044b0:	e008      	b.n	80044c4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80044b2:	bf00      	nop
 80044b4:	e006      	b.n	80044c4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80044b6:	bf00      	nop
 80044b8:	e004      	b.n	80044c4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80044ba:	bf00      	nop
 80044bc:	e002      	b.n	80044c4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80044be:	bf00      	nop
 80044c0:	e000      	b.n	80044c4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80044c2:	bf00      	nop
  }

}
 80044c4:	37e8      	adds	r7, #232	@ 0xe8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop

080044cc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	460b      	mov	r3, r1
 80044fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b088      	sub	sp, #32
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004528:	2300      	movs	r3, #0
 800452a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	431a      	orrs	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	69db      	ldr	r3, [r3, #28]
 8004540:	4313      	orrs	r3, r2
 8004542:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	4ba6      	ldr	r3, [pc, #664]	@ (80047e4 <UART_SetConfig+0x2c4>)
 800454c:	4013      	ands	r3, r2
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6812      	ldr	r2, [r2, #0]
 8004552:	6979      	ldr	r1, [r7, #20]
 8004554:	430b      	orrs	r3, r1
 8004556:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68da      	ldr	r2, [r3, #12]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	4313      	orrs	r3, r2
 800457c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	430a      	orrs	r2, r1
 8004590:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a94      	ldr	r2, [pc, #592]	@ (80047e8 <UART_SetConfig+0x2c8>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d120      	bne.n	80045de <UART_SetConfig+0xbe>
 800459c:	4b93      	ldr	r3, [pc, #588]	@ (80047ec <UART_SetConfig+0x2cc>)
 800459e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	2b03      	cmp	r3, #3
 80045a8:	d816      	bhi.n	80045d8 <UART_SetConfig+0xb8>
 80045aa:	a201      	add	r2, pc, #4	@ (adr r2, 80045b0 <UART_SetConfig+0x90>)
 80045ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b0:	080045c1 	.word	0x080045c1
 80045b4:	080045cd 	.word	0x080045cd
 80045b8:	080045c7 	.word	0x080045c7
 80045bc:	080045d3 	.word	0x080045d3
 80045c0:	2301      	movs	r3, #1
 80045c2:	77fb      	strb	r3, [r7, #31]
 80045c4:	e150      	b.n	8004868 <UART_SetConfig+0x348>
 80045c6:	2302      	movs	r3, #2
 80045c8:	77fb      	strb	r3, [r7, #31]
 80045ca:	e14d      	b.n	8004868 <UART_SetConfig+0x348>
 80045cc:	2304      	movs	r3, #4
 80045ce:	77fb      	strb	r3, [r7, #31]
 80045d0:	e14a      	b.n	8004868 <UART_SetConfig+0x348>
 80045d2:	2308      	movs	r3, #8
 80045d4:	77fb      	strb	r3, [r7, #31]
 80045d6:	e147      	b.n	8004868 <UART_SetConfig+0x348>
 80045d8:	2310      	movs	r3, #16
 80045da:	77fb      	strb	r3, [r7, #31]
 80045dc:	e144      	b.n	8004868 <UART_SetConfig+0x348>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a83      	ldr	r2, [pc, #524]	@ (80047f0 <UART_SetConfig+0x2d0>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d132      	bne.n	800464e <UART_SetConfig+0x12e>
 80045e8:	4b80      	ldr	r3, [pc, #512]	@ (80047ec <UART_SetConfig+0x2cc>)
 80045ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ee:	f003 030c 	and.w	r3, r3, #12
 80045f2:	2b0c      	cmp	r3, #12
 80045f4:	d828      	bhi.n	8004648 <UART_SetConfig+0x128>
 80045f6:	a201      	add	r2, pc, #4	@ (adr r2, 80045fc <UART_SetConfig+0xdc>)
 80045f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fc:	08004631 	.word	0x08004631
 8004600:	08004649 	.word	0x08004649
 8004604:	08004649 	.word	0x08004649
 8004608:	08004649 	.word	0x08004649
 800460c:	0800463d 	.word	0x0800463d
 8004610:	08004649 	.word	0x08004649
 8004614:	08004649 	.word	0x08004649
 8004618:	08004649 	.word	0x08004649
 800461c:	08004637 	.word	0x08004637
 8004620:	08004649 	.word	0x08004649
 8004624:	08004649 	.word	0x08004649
 8004628:	08004649 	.word	0x08004649
 800462c:	08004643 	.word	0x08004643
 8004630:	2300      	movs	r3, #0
 8004632:	77fb      	strb	r3, [r7, #31]
 8004634:	e118      	b.n	8004868 <UART_SetConfig+0x348>
 8004636:	2302      	movs	r3, #2
 8004638:	77fb      	strb	r3, [r7, #31]
 800463a:	e115      	b.n	8004868 <UART_SetConfig+0x348>
 800463c:	2304      	movs	r3, #4
 800463e:	77fb      	strb	r3, [r7, #31]
 8004640:	e112      	b.n	8004868 <UART_SetConfig+0x348>
 8004642:	2308      	movs	r3, #8
 8004644:	77fb      	strb	r3, [r7, #31]
 8004646:	e10f      	b.n	8004868 <UART_SetConfig+0x348>
 8004648:	2310      	movs	r3, #16
 800464a:	77fb      	strb	r3, [r7, #31]
 800464c:	e10c      	b.n	8004868 <UART_SetConfig+0x348>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a68      	ldr	r2, [pc, #416]	@ (80047f4 <UART_SetConfig+0x2d4>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d120      	bne.n	800469a <UART_SetConfig+0x17a>
 8004658:	4b64      	ldr	r3, [pc, #400]	@ (80047ec <UART_SetConfig+0x2cc>)
 800465a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800465e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004662:	2b30      	cmp	r3, #48	@ 0x30
 8004664:	d013      	beq.n	800468e <UART_SetConfig+0x16e>
 8004666:	2b30      	cmp	r3, #48	@ 0x30
 8004668:	d814      	bhi.n	8004694 <UART_SetConfig+0x174>
 800466a:	2b20      	cmp	r3, #32
 800466c:	d009      	beq.n	8004682 <UART_SetConfig+0x162>
 800466e:	2b20      	cmp	r3, #32
 8004670:	d810      	bhi.n	8004694 <UART_SetConfig+0x174>
 8004672:	2b00      	cmp	r3, #0
 8004674:	d002      	beq.n	800467c <UART_SetConfig+0x15c>
 8004676:	2b10      	cmp	r3, #16
 8004678:	d006      	beq.n	8004688 <UART_SetConfig+0x168>
 800467a:	e00b      	b.n	8004694 <UART_SetConfig+0x174>
 800467c:	2300      	movs	r3, #0
 800467e:	77fb      	strb	r3, [r7, #31]
 8004680:	e0f2      	b.n	8004868 <UART_SetConfig+0x348>
 8004682:	2302      	movs	r3, #2
 8004684:	77fb      	strb	r3, [r7, #31]
 8004686:	e0ef      	b.n	8004868 <UART_SetConfig+0x348>
 8004688:	2304      	movs	r3, #4
 800468a:	77fb      	strb	r3, [r7, #31]
 800468c:	e0ec      	b.n	8004868 <UART_SetConfig+0x348>
 800468e:	2308      	movs	r3, #8
 8004690:	77fb      	strb	r3, [r7, #31]
 8004692:	e0e9      	b.n	8004868 <UART_SetConfig+0x348>
 8004694:	2310      	movs	r3, #16
 8004696:	77fb      	strb	r3, [r7, #31]
 8004698:	e0e6      	b.n	8004868 <UART_SetConfig+0x348>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a56      	ldr	r2, [pc, #344]	@ (80047f8 <UART_SetConfig+0x2d8>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d120      	bne.n	80046e6 <UART_SetConfig+0x1c6>
 80046a4:	4b51      	ldr	r3, [pc, #324]	@ (80047ec <UART_SetConfig+0x2cc>)
 80046a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80046ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80046b0:	d013      	beq.n	80046da <UART_SetConfig+0x1ba>
 80046b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80046b4:	d814      	bhi.n	80046e0 <UART_SetConfig+0x1c0>
 80046b6:	2b80      	cmp	r3, #128	@ 0x80
 80046b8:	d009      	beq.n	80046ce <UART_SetConfig+0x1ae>
 80046ba:	2b80      	cmp	r3, #128	@ 0x80
 80046bc:	d810      	bhi.n	80046e0 <UART_SetConfig+0x1c0>
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d002      	beq.n	80046c8 <UART_SetConfig+0x1a8>
 80046c2:	2b40      	cmp	r3, #64	@ 0x40
 80046c4:	d006      	beq.n	80046d4 <UART_SetConfig+0x1b4>
 80046c6:	e00b      	b.n	80046e0 <UART_SetConfig+0x1c0>
 80046c8:	2300      	movs	r3, #0
 80046ca:	77fb      	strb	r3, [r7, #31]
 80046cc:	e0cc      	b.n	8004868 <UART_SetConfig+0x348>
 80046ce:	2302      	movs	r3, #2
 80046d0:	77fb      	strb	r3, [r7, #31]
 80046d2:	e0c9      	b.n	8004868 <UART_SetConfig+0x348>
 80046d4:	2304      	movs	r3, #4
 80046d6:	77fb      	strb	r3, [r7, #31]
 80046d8:	e0c6      	b.n	8004868 <UART_SetConfig+0x348>
 80046da:	2308      	movs	r3, #8
 80046dc:	77fb      	strb	r3, [r7, #31]
 80046de:	e0c3      	b.n	8004868 <UART_SetConfig+0x348>
 80046e0:	2310      	movs	r3, #16
 80046e2:	77fb      	strb	r3, [r7, #31]
 80046e4:	e0c0      	b.n	8004868 <UART_SetConfig+0x348>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a44      	ldr	r2, [pc, #272]	@ (80047fc <UART_SetConfig+0x2dc>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d125      	bne.n	800473c <UART_SetConfig+0x21c>
 80046f0:	4b3e      	ldr	r3, [pc, #248]	@ (80047ec <UART_SetConfig+0x2cc>)
 80046f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046fe:	d017      	beq.n	8004730 <UART_SetConfig+0x210>
 8004700:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004704:	d817      	bhi.n	8004736 <UART_SetConfig+0x216>
 8004706:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800470a:	d00b      	beq.n	8004724 <UART_SetConfig+0x204>
 800470c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004710:	d811      	bhi.n	8004736 <UART_SetConfig+0x216>
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <UART_SetConfig+0x1fe>
 8004716:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800471a:	d006      	beq.n	800472a <UART_SetConfig+0x20a>
 800471c:	e00b      	b.n	8004736 <UART_SetConfig+0x216>
 800471e:	2300      	movs	r3, #0
 8004720:	77fb      	strb	r3, [r7, #31]
 8004722:	e0a1      	b.n	8004868 <UART_SetConfig+0x348>
 8004724:	2302      	movs	r3, #2
 8004726:	77fb      	strb	r3, [r7, #31]
 8004728:	e09e      	b.n	8004868 <UART_SetConfig+0x348>
 800472a:	2304      	movs	r3, #4
 800472c:	77fb      	strb	r3, [r7, #31]
 800472e:	e09b      	b.n	8004868 <UART_SetConfig+0x348>
 8004730:	2308      	movs	r3, #8
 8004732:	77fb      	strb	r3, [r7, #31]
 8004734:	e098      	b.n	8004868 <UART_SetConfig+0x348>
 8004736:	2310      	movs	r3, #16
 8004738:	77fb      	strb	r3, [r7, #31]
 800473a:	e095      	b.n	8004868 <UART_SetConfig+0x348>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a2f      	ldr	r2, [pc, #188]	@ (8004800 <UART_SetConfig+0x2e0>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d125      	bne.n	8004792 <UART_SetConfig+0x272>
 8004746:	4b29      	ldr	r3, [pc, #164]	@ (80047ec <UART_SetConfig+0x2cc>)
 8004748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800474c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004750:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004754:	d017      	beq.n	8004786 <UART_SetConfig+0x266>
 8004756:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800475a:	d817      	bhi.n	800478c <UART_SetConfig+0x26c>
 800475c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004760:	d00b      	beq.n	800477a <UART_SetConfig+0x25a>
 8004762:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004766:	d811      	bhi.n	800478c <UART_SetConfig+0x26c>
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <UART_SetConfig+0x254>
 800476c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004770:	d006      	beq.n	8004780 <UART_SetConfig+0x260>
 8004772:	e00b      	b.n	800478c <UART_SetConfig+0x26c>
 8004774:	2301      	movs	r3, #1
 8004776:	77fb      	strb	r3, [r7, #31]
 8004778:	e076      	b.n	8004868 <UART_SetConfig+0x348>
 800477a:	2302      	movs	r3, #2
 800477c:	77fb      	strb	r3, [r7, #31]
 800477e:	e073      	b.n	8004868 <UART_SetConfig+0x348>
 8004780:	2304      	movs	r3, #4
 8004782:	77fb      	strb	r3, [r7, #31]
 8004784:	e070      	b.n	8004868 <UART_SetConfig+0x348>
 8004786:	2308      	movs	r3, #8
 8004788:	77fb      	strb	r3, [r7, #31]
 800478a:	e06d      	b.n	8004868 <UART_SetConfig+0x348>
 800478c:	2310      	movs	r3, #16
 800478e:	77fb      	strb	r3, [r7, #31]
 8004790:	e06a      	b.n	8004868 <UART_SetConfig+0x348>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a1b      	ldr	r2, [pc, #108]	@ (8004804 <UART_SetConfig+0x2e4>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d138      	bne.n	800480e <UART_SetConfig+0x2ee>
 800479c:	4b13      	ldr	r3, [pc, #76]	@ (80047ec <UART_SetConfig+0x2cc>)
 800479e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047a2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80047a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80047aa:	d017      	beq.n	80047dc <UART_SetConfig+0x2bc>
 80047ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80047b0:	d82a      	bhi.n	8004808 <UART_SetConfig+0x2e8>
 80047b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047b6:	d00b      	beq.n	80047d0 <UART_SetConfig+0x2b0>
 80047b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047bc:	d824      	bhi.n	8004808 <UART_SetConfig+0x2e8>
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <UART_SetConfig+0x2aa>
 80047c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047c6:	d006      	beq.n	80047d6 <UART_SetConfig+0x2b6>
 80047c8:	e01e      	b.n	8004808 <UART_SetConfig+0x2e8>
 80047ca:	2300      	movs	r3, #0
 80047cc:	77fb      	strb	r3, [r7, #31]
 80047ce:	e04b      	b.n	8004868 <UART_SetConfig+0x348>
 80047d0:	2302      	movs	r3, #2
 80047d2:	77fb      	strb	r3, [r7, #31]
 80047d4:	e048      	b.n	8004868 <UART_SetConfig+0x348>
 80047d6:	2304      	movs	r3, #4
 80047d8:	77fb      	strb	r3, [r7, #31]
 80047da:	e045      	b.n	8004868 <UART_SetConfig+0x348>
 80047dc:	2308      	movs	r3, #8
 80047de:	77fb      	strb	r3, [r7, #31]
 80047e0:	e042      	b.n	8004868 <UART_SetConfig+0x348>
 80047e2:	bf00      	nop
 80047e4:	efff69f3 	.word	0xefff69f3
 80047e8:	40011000 	.word	0x40011000
 80047ec:	40023800 	.word	0x40023800
 80047f0:	40004400 	.word	0x40004400
 80047f4:	40004800 	.word	0x40004800
 80047f8:	40004c00 	.word	0x40004c00
 80047fc:	40005000 	.word	0x40005000
 8004800:	40011400 	.word	0x40011400
 8004804:	40007800 	.word	0x40007800
 8004808:	2310      	movs	r3, #16
 800480a:	77fb      	strb	r3, [r7, #31]
 800480c:	e02c      	b.n	8004868 <UART_SetConfig+0x348>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a72      	ldr	r2, [pc, #456]	@ (80049dc <UART_SetConfig+0x4bc>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d125      	bne.n	8004864 <UART_SetConfig+0x344>
 8004818:	4b71      	ldr	r3, [pc, #452]	@ (80049e0 <UART_SetConfig+0x4c0>)
 800481a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800481e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004822:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004826:	d017      	beq.n	8004858 <UART_SetConfig+0x338>
 8004828:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800482c:	d817      	bhi.n	800485e <UART_SetConfig+0x33e>
 800482e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004832:	d00b      	beq.n	800484c <UART_SetConfig+0x32c>
 8004834:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004838:	d811      	bhi.n	800485e <UART_SetConfig+0x33e>
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <UART_SetConfig+0x326>
 800483e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004842:	d006      	beq.n	8004852 <UART_SetConfig+0x332>
 8004844:	e00b      	b.n	800485e <UART_SetConfig+0x33e>
 8004846:	2300      	movs	r3, #0
 8004848:	77fb      	strb	r3, [r7, #31]
 800484a:	e00d      	b.n	8004868 <UART_SetConfig+0x348>
 800484c:	2302      	movs	r3, #2
 800484e:	77fb      	strb	r3, [r7, #31]
 8004850:	e00a      	b.n	8004868 <UART_SetConfig+0x348>
 8004852:	2304      	movs	r3, #4
 8004854:	77fb      	strb	r3, [r7, #31]
 8004856:	e007      	b.n	8004868 <UART_SetConfig+0x348>
 8004858:	2308      	movs	r3, #8
 800485a:	77fb      	strb	r3, [r7, #31]
 800485c:	e004      	b.n	8004868 <UART_SetConfig+0x348>
 800485e:	2310      	movs	r3, #16
 8004860:	77fb      	strb	r3, [r7, #31]
 8004862:	e001      	b.n	8004868 <UART_SetConfig+0x348>
 8004864:	2310      	movs	r3, #16
 8004866:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	69db      	ldr	r3, [r3, #28]
 800486c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004870:	d15b      	bne.n	800492a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004872:	7ffb      	ldrb	r3, [r7, #31]
 8004874:	2b08      	cmp	r3, #8
 8004876:	d828      	bhi.n	80048ca <UART_SetConfig+0x3aa>
 8004878:	a201      	add	r2, pc, #4	@ (adr r2, 8004880 <UART_SetConfig+0x360>)
 800487a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487e:	bf00      	nop
 8004880:	080048a5 	.word	0x080048a5
 8004884:	080048ad 	.word	0x080048ad
 8004888:	080048b5 	.word	0x080048b5
 800488c:	080048cb 	.word	0x080048cb
 8004890:	080048bb 	.word	0x080048bb
 8004894:	080048cb 	.word	0x080048cb
 8004898:	080048cb 	.word	0x080048cb
 800489c:	080048cb 	.word	0x080048cb
 80048a0:	080048c3 	.word	0x080048c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048a4:	f7fd ff58 	bl	8002758 <HAL_RCC_GetPCLK1Freq>
 80048a8:	61b8      	str	r0, [r7, #24]
        break;
 80048aa:	e013      	b.n	80048d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048ac:	f7fd ff68 	bl	8002780 <HAL_RCC_GetPCLK2Freq>
 80048b0:	61b8      	str	r0, [r7, #24]
        break;
 80048b2:	e00f      	b.n	80048d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048b4:	4b4b      	ldr	r3, [pc, #300]	@ (80049e4 <UART_SetConfig+0x4c4>)
 80048b6:	61bb      	str	r3, [r7, #24]
        break;
 80048b8:	e00c      	b.n	80048d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ba:	f7fd fe7b 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 80048be:	61b8      	str	r0, [r7, #24]
        break;
 80048c0:	e008      	b.n	80048d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048c6:	61bb      	str	r3, [r7, #24]
        break;
 80048c8:	e004      	b.n	80048d4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	77bb      	strb	r3, [r7, #30]
        break;
 80048d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d074      	beq.n	80049c4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	005a      	lsls	r2, r3, #1
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	085b      	lsrs	r3, r3, #1
 80048e4:	441a      	add	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	2b0f      	cmp	r3, #15
 80048f4:	d916      	bls.n	8004924 <UART_SetConfig+0x404>
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048fc:	d212      	bcs.n	8004924 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	b29b      	uxth	r3, r3
 8004902:	f023 030f 	bic.w	r3, r3, #15
 8004906:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	085b      	lsrs	r3, r3, #1
 800490c:	b29b      	uxth	r3, r3
 800490e:	f003 0307 	and.w	r3, r3, #7
 8004912:	b29a      	uxth	r2, r3
 8004914:	89fb      	ldrh	r3, [r7, #14]
 8004916:	4313      	orrs	r3, r2
 8004918:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	89fa      	ldrh	r2, [r7, #14]
 8004920:	60da      	str	r2, [r3, #12]
 8004922:	e04f      	b.n	80049c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	77bb      	strb	r3, [r7, #30]
 8004928:	e04c      	b.n	80049c4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800492a:	7ffb      	ldrb	r3, [r7, #31]
 800492c:	2b08      	cmp	r3, #8
 800492e:	d828      	bhi.n	8004982 <UART_SetConfig+0x462>
 8004930:	a201      	add	r2, pc, #4	@ (adr r2, 8004938 <UART_SetConfig+0x418>)
 8004932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004936:	bf00      	nop
 8004938:	0800495d 	.word	0x0800495d
 800493c:	08004965 	.word	0x08004965
 8004940:	0800496d 	.word	0x0800496d
 8004944:	08004983 	.word	0x08004983
 8004948:	08004973 	.word	0x08004973
 800494c:	08004983 	.word	0x08004983
 8004950:	08004983 	.word	0x08004983
 8004954:	08004983 	.word	0x08004983
 8004958:	0800497b 	.word	0x0800497b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800495c:	f7fd fefc 	bl	8002758 <HAL_RCC_GetPCLK1Freq>
 8004960:	61b8      	str	r0, [r7, #24]
        break;
 8004962:	e013      	b.n	800498c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004964:	f7fd ff0c 	bl	8002780 <HAL_RCC_GetPCLK2Freq>
 8004968:	61b8      	str	r0, [r7, #24]
        break;
 800496a:	e00f      	b.n	800498c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800496c:	4b1d      	ldr	r3, [pc, #116]	@ (80049e4 <UART_SetConfig+0x4c4>)
 800496e:	61bb      	str	r3, [r7, #24]
        break;
 8004970:	e00c      	b.n	800498c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004972:	f7fd fe1f 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 8004976:	61b8      	str	r0, [r7, #24]
        break;
 8004978:	e008      	b.n	800498c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800497a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800497e:	61bb      	str	r3, [r7, #24]
        break;
 8004980:	e004      	b.n	800498c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004982:	2300      	movs	r3, #0
 8004984:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	77bb      	strb	r3, [r7, #30]
        break;
 800498a:	bf00      	nop
    }

    if (pclk != 0U)
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d018      	beq.n	80049c4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	085a      	lsrs	r2, r3, #1
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	441a      	add	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	2b0f      	cmp	r3, #15
 80049aa:	d909      	bls.n	80049c0 <UART_SetConfig+0x4a0>
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049b2:	d205      	bcs.n	80049c0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	60da      	str	r2, [r3, #12]
 80049be:	e001      	b.n	80049c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80049d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3720      	adds	r7, #32
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	40007c00 	.word	0x40007c00
 80049e0:	40023800 	.word	0x40023800
 80049e4:	00f42400 	.word	0x00f42400

080049e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f4:	f003 0308 	and.w	r3, r3, #8
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00a      	beq.n	8004a12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00a      	beq.n	8004a34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00a      	beq.n	8004a56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5a:	f003 0304 	and.w	r3, r3, #4
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00a      	beq.n	8004a78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	430a      	orrs	r2, r1
 8004a76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7c:	f003 0310 	and.w	r3, r3, #16
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00a      	beq.n	8004a9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9e:	f003 0320 	and.w	r3, r3, #32
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00a      	beq.n	8004abc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d01a      	beq.n	8004afe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ae6:	d10a      	bne.n	8004afe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00a      	beq.n	8004b20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	605a      	str	r2, [r3, #4]
  }
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b098      	sub	sp, #96	@ 0x60
 8004b30:	af02      	add	r7, sp, #8
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b3c:	f7fc f9fc 	bl	8000f38 <HAL_GetTick>
 8004b40:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0308 	and.w	r3, r3, #8
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d12e      	bne.n	8004bae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b54:	9300      	str	r3, [sp, #0]
 8004b56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f88c 	bl	8004c7c <UART_WaitOnFlagUntilTimeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d021      	beq.n	8004bae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b72:	e853 3f00 	ldrex	r3, [r3]
 8004b76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	461a      	mov	r2, r3
 8004b86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b88:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b8a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b90:	e841 2300 	strex	r3, r2, [r1]
 8004b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1e6      	bne.n	8004b6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e062      	b.n	8004c74 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0304 	and.w	r3, r3, #4
 8004bb8:	2b04      	cmp	r3, #4
 8004bba:	d149      	bne.n	8004c50 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bbc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f856 	bl	8004c7c <UART_WaitOnFlagUntilTimeout>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d03c      	beq.n	8004c50 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bde:	e853 3f00 	ldrex	r3, [r3]
 8004be2:	623b      	str	r3, [r7, #32]
   return(result);
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bf4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bf6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bfc:	e841 2300 	strex	r3, r2, [r1]
 8004c00:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1e6      	bne.n	8004bd6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	3308      	adds	r3, #8
 8004c0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	e853 3f00 	ldrex	r3, [r3]
 8004c16:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f023 0301 	bic.w	r3, r3, #1
 8004c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	3308      	adds	r3, #8
 8004c26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c28:	61fa      	str	r2, [r7, #28]
 8004c2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2c:	69b9      	ldr	r1, [r7, #24]
 8004c2e:	69fa      	ldr	r2, [r7, #28]
 8004c30:	e841 2300 	strex	r3, r2, [r1]
 8004c34:	617b      	str	r3, [r7, #20]
   return(result);
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1e5      	bne.n	8004c08 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e011      	b.n	8004c74 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2220      	movs	r2, #32
 8004c54:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3758      	adds	r7, #88	@ 0x58
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	603b      	str	r3, [r7, #0]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c8c:	e04f      	b.n	8004d2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c94:	d04b      	beq.n	8004d2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c96:	f7fc f94f 	bl	8000f38 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d302      	bcc.n	8004cac <UART_WaitOnFlagUntilTimeout+0x30>
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d101      	bne.n	8004cb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e04e      	b.n	8004d4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0304 	and.w	r3, r3, #4
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d037      	beq.n	8004d2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	2b80      	cmp	r3, #128	@ 0x80
 8004cc2:	d034      	beq.n	8004d2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	2b40      	cmp	r3, #64	@ 0x40
 8004cc8:	d031      	beq.n	8004d2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	69db      	ldr	r3, [r3, #28]
 8004cd0:	f003 0308 	and.w	r3, r3, #8
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d110      	bne.n	8004cfa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2208      	movs	r2, #8
 8004cde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f000 f925 	bl	8004f30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2208      	movs	r2, #8
 8004cea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e029      	b.n	8004d4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	69db      	ldr	r3, [r3, #28]
 8004d00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d08:	d111      	bne.n	8004d2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 f90b 	bl	8004f30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e00f      	b.n	8004d4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	69da      	ldr	r2, [r3, #28]
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	4013      	ands	r3, r2
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	bf0c      	ite	eq
 8004d3e:	2301      	moveq	r3, #1
 8004d40:	2300      	movne	r3, #0
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	461a      	mov	r2, r3
 8004d46:	79fb      	ldrb	r3, [r7, #7]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d0a0      	beq.n	8004c8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
	...

08004d58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b097      	sub	sp, #92	@ 0x5c
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	4613      	mov	r3, r2
 8004d64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	88fa      	ldrh	r2, [r7, #6]
 8004d70:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	88fa      	ldrh	r2, [r7, #6]
 8004d78:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d8a:	d10e      	bne.n	8004daa <UART_Start_Receive_IT+0x52>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d105      	bne.n	8004da0 <UART_Start_Receive_IT+0x48>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004d9a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004d9e:	e02d      	b.n	8004dfc <UART_Start_Receive_IT+0xa4>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	22ff      	movs	r2, #255	@ 0xff
 8004da4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004da8:	e028      	b.n	8004dfc <UART_Start_Receive_IT+0xa4>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10d      	bne.n	8004dce <UART_Start_Receive_IT+0x76>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d104      	bne.n	8004dc4 <UART_Start_Receive_IT+0x6c>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	22ff      	movs	r2, #255	@ 0xff
 8004dbe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004dc2:	e01b      	b.n	8004dfc <UART_Start_Receive_IT+0xa4>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	227f      	movs	r2, #127	@ 0x7f
 8004dc8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004dcc:	e016      	b.n	8004dfc <UART_Start_Receive_IT+0xa4>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004dd6:	d10d      	bne.n	8004df4 <UART_Start_Receive_IT+0x9c>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d104      	bne.n	8004dea <UART_Start_Receive_IT+0x92>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	227f      	movs	r2, #127	@ 0x7f
 8004de4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004de8:	e008      	b.n	8004dfc <UART_Start_Receive_IT+0xa4>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	223f      	movs	r2, #63	@ 0x3f
 8004dee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004df2:	e003      	b.n	8004dfc <UART_Start_Receive_IT+0xa4>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2222      	movs	r2, #34	@ 0x22
 8004e08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	3308      	adds	r3, #8
 8004e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e16:	e853 3f00 	ldrex	r3, [r3]
 8004e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e1e:	f043 0301 	orr.w	r3, r3, #1
 8004e22:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	3308      	adds	r3, #8
 8004e2a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004e2c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004e2e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e30:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004e32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e34:	e841 2300 	strex	r3, r2, [r1]
 8004e38:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004e3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1e5      	bne.n	8004e0c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e48:	d107      	bne.n	8004e5a <UART_Start_Receive_IT+0x102>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d103      	bne.n	8004e5a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	4a21      	ldr	r2, [pc, #132]	@ (8004edc <UART_Start_Receive_IT+0x184>)
 8004e56:	669a      	str	r2, [r3, #104]	@ 0x68
 8004e58:	e002      	b.n	8004e60 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4a20      	ldr	r2, [pc, #128]	@ (8004ee0 <UART_Start_Receive_IT+0x188>)
 8004e5e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d019      	beq.n	8004e9c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e70:	e853 3f00 	ldrex	r3, [r3]
 8004e74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e78:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004e7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	461a      	mov	r2, r3
 8004e84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e86:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e88:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e8e:	e841 2300 	strex	r3, r2, [r1]
 8004e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1e6      	bne.n	8004e68 <UART_Start_Receive_IT+0x110>
 8004e9a:	e018      	b.n	8004ece <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	e853 3f00 	ldrex	r3, [r3]
 8004ea8:	613b      	str	r3, [r7, #16]
   return(result);
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	f043 0320 	orr.w	r3, r3, #32
 8004eb0:	653b      	str	r3, [r7, #80]	@ 0x50
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004eba:	623b      	str	r3, [r7, #32]
 8004ebc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebe:	69f9      	ldr	r1, [r7, #28]
 8004ec0:	6a3a      	ldr	r2, [r7, #32]
 8004ec2:	e841 2300 	strex	r3, r2, [r1]
 8004ec6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1e6      	bne.n	8004e9c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	375c      	adds	r7, #92	@ 0x5c
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	08005351 	.word	0x08005351
 8004ee0:	080051a9 	.word	0x080051a9

08004ee4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b089      	sub	sp, #36	@ 0x24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	e853 3f00 	ldrex	r3, [r3]
 8004ef8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004f00:	61fb      	str	r3, [r7, #28]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	461a      	mov	r2, r3
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	61bb      	str	r3, [r7, #24]
 8004f0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0e:	6979      	ldr	r1, [r7, #20]
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	e841 2300 	strex	r3, r2, [r1]
 8004f16:	613b      	str	r3, [r7, #16]
   return(result);
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1e6      	bne.n	8004eec <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2220      	movs	r2, #32
 8004f22:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004f24:	bf00      	nop
 8004f26:	3724      	adds	r7, #36	@ 0x24
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b095      	sub	sp, #84	@ 0x54
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f40:	e853 3f00 	ldrex	r3, [r3]
 8004f44:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	461a      	mov	r2, r3
 8004f54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f56:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f58:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f5e:	e841 2300 	strex	r3, r2, [r1]
 8004f62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1e6      	bne.n	8004f38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	3308      	adds	r3, #8
 8004f70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f72:	6a3b      	ldr	r3, [r7, #32]
 8004f74:	e853 3f00 	ldrex	r3, [r3]
 8004f78:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	f023 0301 	bic.w	r3, r3, #1
 8004f80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	3308      	adds	r3, #8
 8004f88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f92:	e841 2300 	strex	r3, r2, [r1]
 8004f96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1e5      	bne.n	8004f6a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d118      	bne.n	8004fd8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	e853 3f00 	ldrex	r3, [r3]
 8004fb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f023 0310 	bic.w	r3, r3, #16
 8004fba:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fc4:	61bb      	str	r3, [r7, #24]
 8004fc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc8:	6979      	ldr	r1, [r7, #20]
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	e841 2300 	strex	r3, r2, [r1]
 8004fd0:	613b      	str	r3, [r7, #16]
   return(result);
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1e6      	bne.n	8004fa6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004fec:	bf00      	nop
 8004fee:	3754      	adds	r7, #84	@ 0x54
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b090      	sub	sp, #64	@ 0x40
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005004:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	69db      	ldr	r3, [r3, #28]
 800500a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800500e:	d037      	beq.n	8005080 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8005010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005012:	2200      	movs	r2, #0
 8005014:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	3308      	adds	r3, #8
 800501e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005022:	e853 3f00 	ldrex	r3, [r3]
 8005026:	623b      	str	r3, [r7, #32]
   return(result);
 8005028:	6a3b      	ldr	r3, [r7, #32]
 800502a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800502e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	3308      	adds	r3, #8
 8005036:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005038:	633a      	str	r2, [r7, #48]	@ 0x30
 800503a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800503e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005040:	e841 2300 	strex	r3, r2, [r1]
 8005044:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1e5      	bne.n	8005018 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800504c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	e853 3f00 	ldrex	r3, [r3]
 8005058:	60fb      	str	r3, [r7, #12]
   return(result);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005060:	637b      	str	r3, [r7, #52]	@ 0x34
 8005062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	461a      	mov	r2, r3
 8005068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800506a:	61fb      	str	r3, [r7, #28]
 800506c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506e:	69b9      	ldr	r1, [r7, #24]
 8005070:	69fa      	ldr	r2, [r7, #28]
 8005072:	e841 2300 	strex	r3, r2, [r1]
 8005076:	617b      	str	r3, [r7, #20]
   return(result);
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1e6      	bne.n	800504c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800507e:	e002      	b.n	8005086 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8005080:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005082:	f7fb fc5d 	bl	8000940 <HAL_UART_TxCpltCallback>
}
 8005086:	bf00      	nop
 8005088:	3740      	adds	r7, #64	@ 0x40
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b084      	sub	sp, #16
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800509a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f7ff fa15 	bl	80044cc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050a2:	bf00      	nop
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b086      	sub	sp, #24
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050bc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050c4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050d0:	2b80      	cmp	r3, #128	@ 0x80
 80050d2:	d109      	bne.n	80050e8 <UART_DMAError+0x3e>
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	2b21      	cmp	r3, #33	@ 0x21
 80050d8:	d106      	bne.n	80050e8 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	2200      	movs	r2, #0
 80050de:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80050e2:	6978      	ldr	r0, [r7, #20]
 80050e4:	f7ff fefe 	bl	8004ee4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050f2:	2b40      	cmp	r3, #64	@ 0x40
 80050f4:	d109      	bne.n	800510a <UART_DMAError+0x60>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2b22      	cmp	r3, #34	@ 0x22
 80050fa:	d106      	bne.n	800510a <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	2200      	movs	r2, #0
 8005100:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8005104:	6978      	ldr	r0, [r7, #20]
 8005106:	f7ff ff13 	bl	8004f30 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005110:	f043 0210 	orr.w	r2, r3, #16
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800511a:	6978      	ldr	r0, [r7, #20]
 800511c:	f7ff f9e0 	bl	80044e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005120:	bf00      	nop
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005134:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	f7ff f9ca 	bl	80044e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800514c:	bf00      	nop
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b088      	sub	sp, #32
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	e853 3f00 	ldrex	r3, [r3]
 8005168:	60bb      	str	r3, [r7, #8]
   return(result);
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005170:	61fb      	str	r3, [r7, #28]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	461a      	mov	r2, r3
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	61bb      	str	r3, [r7, #24]
 800517c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517e:	6979      	ldr	r1, [r7, #20]
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	e841 2300 	strex	r3, r2, [r1]
 8005186:	613b      	str	r3, [r7, #16]
   return(result);
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1e6      	bne.n	800515c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2220      	movs	r2, #32
 8005192:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7fb fbd0 	bl	8000940 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051a0:	bf00      	nop
 80051a2:	3720      	adds	r7, #32
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b09c      	sub	sp, #112	@ 0x70
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80051b6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051c0:	2b22      	cmp	r3, #34	@ 0x22
 80051c2:	f040 80b9 	bne.w	8005338 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051cc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80051d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80051d4:	b2d9      	uxtb	r1, r3
 80051d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051e0:	400a      	ands	r2, r1
 80051e2:	b2d2      	uxtb	r2, r2
 80051e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ea:	1c5a      	adds	r2, r3, #1
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	3b01      	subs	r3, #1
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005208:	b29b      	uxth	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	f040 809c 	bne.w	8005348 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005216:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005218:	e853 3f00 	ldrex	r3, [r3]
 800521c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800521e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005220:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005224:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	461a      	mov	r2, r3
 800522c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800522e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005230:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005232:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005234:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005236:	e841 2300 	strex	r3, r2, [r1]
 800523a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800523c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1e6      	bne.n	8005210 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	3308      	adds	r3, #8
 8005248:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800524c:	e853 3f00 	ldrex	r3, [r3]
 8005250:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005254:	f023 0301 	bic.w	r3, r3, #1
 8005258:	667b      	str	r3, [r7, #100]	@ 0x64
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	3308      	adds	r3, #8
 8005260:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005262:	647a      	str	r2, [r7, #68]	@ 0x44
 8005264:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005266:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005268:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800526a:	e841 2300 	strex	r3, r2, [r1]
 800526e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1e5      	bne.n	8005242 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2220      	movs	r2, #32
 800527a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d018      	beq.n	80052ca <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a0:	e853 3f00 	ldrex	r3, [r3]
 80052a4:	623b      	str	r3, [r7, #32]
   return(result);
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80052ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	461a      	mov	r2, r3
 80052b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80052b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052be:	e841 2300 	strex	r3, r2, [r1]
 80052c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1e6      	bne.n	8005298 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d12e      	bne.n	8005330 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	e853 3f00 	ldrex	r3, [r3]
 80052e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f023 0310 	bic.w	r3, r3, #16
 80052ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	461a      	mov	r2, r3
 80052f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052f6:	61fb      	str	r3, [r7, #28]
 80052f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fa:	69b9      	ldr	r1, [r7, #24]
 80052fc:	69fa      	ldr	r2, [r7, #28]
 80052fe:	e841 2300 	strex	r3, r2, [r1]
 8005302:	617b      	str	r3, [r7, #20]
   return(result);
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1e6      	bne.n	80052d8 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	69db      	ldr	r3, [r3, #28]
 8005310:	f003 0310 	and.w	r3, r3, #16
 8005314:	2b10      	cmp	r3, #16
 8005316:	d103      	bne.n	8005320 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2210      	movs	r2, #16
 800531e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005326:	4619      	mov	r1, r3
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f7ff f8e3 	bl	80044f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800532e:	e00b      	b.n	8005348 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f7fb fb29 	bl	8000988 <HAL_UART_RxCpltCallback>
}
 8005336:	e007      	b.n	8005348 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	699a      	ldr	r2, [r3, #24]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f042 0208 	orr.w	r2, r2, #8
 8005346:	619a      	str	r2, [r3, #24]
}
 8005348:	bf00      	nop
 800534a:	3770      	adds	r7, #112	@ 0x70
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b09c      	sub	sp, #112	@ 0x70
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800535e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005368:	2b22      	cmp	r3, #34	@ 0x22
 800536a:	f040 80b9 	bne.w	80054e0 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005374:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800537c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800537e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005382:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005386:	4013      	ands	r3, r2
 8005388:	b29a      	uxth	r2, r3
 800538a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800538c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005392:	1c9a      	adds	r2, r3, #2
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800539e:	b29b      	uxth	r3, r3
 80053a0:	3b01      	subs	r3, #1
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f040 809c 	bne.w	80054f0 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053c0:	e853 3f00 	ldrex	r3, [r3]
 80053c4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80053c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	461a      	mov	r2, r3
 80053d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80053d8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053da:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80053dc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80053de:	e841 2300 	strex	r3, r2, [r1]
 80053e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80053e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1e6      	bne.n	80053b8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	3308      	adds	r3, #8
 80053f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053f4:	e853 3f00 	ldrex	r3, [r3]
 80053f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053fc:	f023 0301 	bic.w	r3, r3, #1
 8005400:	663b      	str	r3, [r7, #96]	@ 0x60
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3308      	adds	r3, #8
 8005408:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800540a:	643a      	str	r2, [r7, #64]	@ 0x40
 800540c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005410:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005412:	e841 2300 	strex	r3, r2, [r1]
 8005416:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1e5      	bne.n	80053ea <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2220      	movs	r2, #32
 8005422:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d018      	beq.n	8005472 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005446:	6a3b      	ldr	r3, [r7, #32]
 8005448:	e853 3f00 	ldrex	r3, [r3]
 800544c:	61fb      	str	r3, [r7, #28]
   return(result);
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005454:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	461a      	mov	r2, r3
 800545c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800545e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005460:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005462:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005464:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005466:	e841 2300 	strex	r3, r2, [r1]
 800546a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800546c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1e6      	bne.n	8005440 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005476:	2b01      	cmp	r3, #1
 8005478:	d12e      	bne.n	80054d8 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	e853 3f00 	ldrex	r3, [r3]
 800548c:	60bb      	str	r3, [r7, #8]
   return(result);
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	f023 0310 	bic.w	r3, r3, #16
 8005494:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	461a      	mov	r2, r3
 800549c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800549e:	61bb      	str	r3, [r7, #24]
 80054a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a2:	6979      	ldr	r1, [r7, #20]
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	e841 2300 	strex	r3, r2, [r1]
 80054aa:	613b      	str	r3, [r7, #16]
   return(result);
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1e6      	bne.n	8005480 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	69db      	ldr	r3, [r3, #28]
 80054b8:	f003 0310 	and.w	r3, r3, #16
 80054bc:	2b10      	cmp	r3, #16
 80054be:	d103      	bne.n	80054c8 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2210      	movs	r2, #16
 80054c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80054ce:	4619      	mov	r1, r3
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f7ff f80f 	bl	80044f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80054d6:	e00b      	b.n	80054f0 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f7fb fa55 	bl	8000988 <HAL_UART_RxCpltCallback>
}
 80054de:	e007      	b.n	80054f0 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	699a      	ldr	r2, [r3, #24]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f042 0208 	orr.w	r2, r2, #8
 80054ee:	619a      	str	r2, [r3, #24]
}
 80054f0:	bf00      	nop
 80054f2:	3770      	adds	r7, #112	@ 0x70
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <memset>:
 80054f8:	4402      	add	r2, r0
 80054fa:	4603      	mov	r3, r0
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d100      	bne.n	8005502 <memset+0xa>
 8005500:	4770      	bx	lr
 8005502:	f803 1b01 	strb.w	r1, [r3], #1
 8005506:	e7f9      	b.n	80054fc <memset+0x4>

08005508 <strstr>:
 8005508:	780a      	ldrb	r2, [r1, #0]
 800550a:	b570      	push	{r4, r5, r6, lr}
 800550c:	b96a      	cbnz	r2, 800552a <strstr+0x22>
 800550e:	bd70      	pop	{r4, r5, r6, pc}
 8005510:	429a      	cmp	r2, r3
 8005512:	d109      	bne.n	8005528 <strstr+0x20>
 8005514:	460c      	mov	r4, r1
 8005516:	4605      	mov	r5, r0
 8005518:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800551c:	2b00      	cmp	r3, #0
 800551e:	d0f6      	beq.n	800550e <strstr+0x6>
 8005520:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005524:	429e      	cmp	r6, r3
 8005526:	d0f7      	beq.n	8005518 <strstr+0x10>
 8005528:	3001      	adds	r0, #1
 800552a:	7803      	ldrb	r3, [r0, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1ef      	bne.n	8005510 <strstr+0x8>
 8005530:	4618      	mov	r0, r3
 8005532:	e7ec      	b.n	800550e <strstr+0x6>

08005534 <__libc_init_array>:
 8005534:	b570      	push	{r4, r5, r6, lr}
 8005536:	4d0d      	ldr	r5, [pc, #52]	@ (800556c <__libc_init_array+0x38>)
 8005538:	4c0d      	ldr	r4, [pc, #52]	@ (8005570 <__libc_init_array+0x3c>)
 800553a:	1b64      	subs	r4, r4, r5
 800553c:	10a4      	asrs	r4, r4, #2
 800553e:	2600      	movs	r6, #0
 8005540:	42a6      	cmp	r6, r4
 8005542:	d109      	bne.n	8005558 <__libc_init_array+0x24>
 8005544:	4d0b      	ldr	r5, [pc, #44]	@ (8005574 <__libc_init_array+0x40>)
 8005546:	4c0c      	ldr	r4, [pc, #48]	@ (8005578 <__libc_init_array+0x44>)
 8005548:	f000 f818 	bl	800557c <_init>
 800554c:	1b64      	subs	r4, r4, r5
 800554e:	10a4      	asrs	r4, r4, #2
 8005550:	2600      	movs	r6, #0
 8005552:	42a6      	cmp	r6, r4
 8005554:	d105      	bne.n	8005562 <__libc_init_array+0x2e>
 8005556:	bd70      	pop	{r4, r5, r6, pc}
 8005558:	f855 3b04 	ldr.w	r3, [r5], #4
 800555c:	4798      	blx	r3
 800555e:	3601      	adds	r6, #1
 8005560:	e7ee      	b.n	8005540 <__libc_init_array+0xc>
 8005562:	f855 3b04 	ldr.w	r3, [r5], #4
 8005566:	4798      	blx	r3
 8005568:	3601      	adds	r6, #1
 800556a:	e7f2      	b.n	8005552 <__libc_init_array+0x1e>
 800556c:	080055c8 	.word	0x080055c8
 8005570:	080055c8 	.word	0x080055c8
 8005574:	080055c8 	.word	0x080055c8
 8005578:	080055cc 	.word	0x080055cc

0800557c <_init>:
 800557c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557e:	bf00      	nop
 8005580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005582:	bc08      	pop	{r3}
 8005584:	469e      	mov	lr, r3
 8005586:	4770      	bx	lr

08005588 <_fini>:
 8005588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558a:	bf00      	nop
 800558c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800558e:	bc08      	pop	{r3}
 8005590:	469e      	mov	lr, r3
 8005592:	4770      	bx	lr
