
Motor_monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050d4  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080052cc  080052cc  000062cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052ec  080052ec  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080052ec  080052ec  000062ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052f4  080052f4  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052f4  080052f4  000062f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052f8  080052f8  000062f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080052fc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000010  0800530c  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  0800530c  00007174  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f4e6  00000000  00000000  0000703e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e16  00000000  00000000  00016524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d08  00000000  00000000  00018340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a42  00000000  00000000  00019048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026e6b  00000000  00000000  00019a8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fbe7  00000000  00000000  000408f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7a9f  00000000  00000000  000504dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00147f7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003730  00000000  00000000  00147fc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0014b6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000010 	.word	0x20000010
 8000214:	00000000 	.word	0x00000000
 8000218:	080052b4 	.word	0x080052b4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000014 	.word	0x20000014
 8000234:	080052b4 	.word	0x080052b4

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b988 	b.w	8000560 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	468e      	mov	lr, r1
 8000270:	4604      	mov	r4, r0
 8000272:	4688      	mov	r8, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d962      	bls.n	8000344 <__udivmoddi4+0xdc>
 800027e:	fab2 f682 	clz	r6, r2
 8000282:	b14e      	cbz	r6, 8000298 <__udivmoddi4+0x30>
 8000284:	f1c6 0320 	rsb	r3, r6, #32
 8000288:	fa01 f806 	lsl.w	r8, r1, r6
 800028c:	fa20 f303 	lsr.w	r3, r0, r3
 8000290:	40b7      	lsls	r7, r6
 8000292:	ea43 0808 	orr.w	r8, r3, r8
 8000296:	40b4      	lsls	r4, r6
 8000298:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800029c:	fa1f fc87 	uxth.w	ip, r7
 80002a0:	fbb8 f1fe 	udiv	r1, r8, lr
 80002a4:	0c23      	lsrs	r3, r4, #16
 80002a6:	fb0e 8811 	mls	r8, lr, r1, r8
 80002aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ae:	fb01 f20c 	mul.w	r2, r1, ip
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002bc:	f080 80ea 	bcs.w	8000494 <__udivmoddi4+0x22c>
 80002c0:	429a      	cmp	r2, r3
 80002c2:	f240 80e7 	bls.w	8000494 <__udivmoddi4+0x22c>
 80002c6:	3902      	subs	r1, #2
 80002c8:	443b      	add	r3, r7
 80002ca:	1a9a      	subs	r2, r3, r2
 80002cc:	b2a3      	uxth	r3, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002da:	fb00 fc0c 	mul.w	ip, r0, ip
 80002de:	459c      	cmp	ip, r3
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0x8e>
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e8:	f080 80d6 	bcs.w	8000498 <__udivmoddi4+0x230>
 80002ec:	459c      	cmp	ip, r3
 80002ee:	f240 80d3 	bls.w	8000498 <__udivmoddi4+0x230>
 80002f2:	443b      	add	r3, r7
 80002f4:	3802      	subs	r0, #2
 80002f6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fa:	eba3 030c 	sub.w	r3, r3, ip
 80002fe:	2100      	movs	r1, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0xa2>
 8000302:	40f3      	lsrs	r3, r6
 8000304:	2200      	movs	r2, #0
 8000306:	e9c5 3200 	strd	r3, r2, [r5]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d905      	bls.n	800031e <__udivmoddi4+0xb6>
 8000312:	b10d      	cbz	r5, 8000318 <__udivmoddi4+0xb0>
 8000314:	e9c5 0100 	strd	r0, r1, [r5]
 8000318:	2100      	movs	r1, #0
 800031a:	4608      	mov	r0, r1
 800031c:	e7f5      	b.n	800030a <__udivmoddi4+0xa2>
 800031e:	fab3 f183 	clz	r1, r3
 8000322:	2900      	cmp	r1, #0
 8000324:	d146      	bne.n	80003b4 <__udivmoddi4+0x14c>
 8000326:	4573      	cmp	r3, lr
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xc8>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 8105 	bhi.w	800053a <__udivmoddi4+0x2d2>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb6e 0203 	sbc.w	r2, lr, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4690      	mov	r8, r2
 800033a:	2d00      	cmp	r5, #0
 800033c:	d0e5      	beq.n	800030a <__udivmoddi4+0xa2>
 800033e:	e9c5 4800 	strd	r4, r8, [r5]
 8000342:	e7e2      	b.n	800030a <__udivmoddi4+0xa2>
 8000344:	2a00      	cmp	r2, #0
 8000346:	f000 8090 	beq.w	800046a <__udivmoddi4+0x202>
 800034a:	fab2 f682 	clz	r6, r2
 800034e:	2e00      	cmp	r6, #0
 8000350:	f040 80a4 	bne.w	800049c <__udivmoddi4+0x234>
 8000354:	1a8a      	subs	r2, r1, r2
 8000356:	0c03      	lsrs	r3, r0, #16
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	b280      	uxth	r0, r0
 800035e:	b2bc      	uxth	r4, r7
 8000360:	2101      	movs	r1, #1
 8000362:	fbb2 fcfe 	udiv	ip, r2, lr
 8000366:	fb0e 221c 	mls	r2, lr, ip, r2
 800036a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800036e:	fb04 f20c 	mul.w	r2, r4, ip
 8000372:	429a      	cmp	r2, r3
 8000374:	d907      	bls.n	8000386 <__udivmoddi4+0x11e>
 8000376:	18fb      	adds	r3, r7, r3
 8000378:	f10c 38ff 	add.w	r8, ip, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x11c>
 800037e:	429a      	cmp	r2, r3
 8000380:	f200 80e0 	bhi.w	8000544 <__udivmoddi4+0x2dc>
 8000384:	46c4      	mov	ip, r8
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	fbb3 f2fe 	udiv	r2, r3, lr
 800038c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000390:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000394:	fb02 f404 	mul.w	r4, r2, r4
 8000398:	429c      	cmp	r4, r3
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x144>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f102 30ff 	add.w	r0, r2, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x142>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f200 80ca 	bhi.w	800053e <__udivmoddi4+0x2d6>
 80003aa:	4602      	mov	r2, r0
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0x98>
 80003b4:	f1c1 0620 	rsb	r6, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 f706 	lsr.w	r7, r2, r6
 80003be:	431f      	orrs	r7, r3
 80003c0:	fa0e f401 	lsl.w	r4, lr, r1
 80003c4:	fa20 f306 	lsr.w	r3, r0, r6
 80003c8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003cc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d0:	4323      	orrs	r3, r4
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	fa1f fc87 	uxth.w	ip, r7
 80003da:	fbbe f0f9 	udiv	r0, lr, r9
 80003de:	0c1c      	lsrs	r4, r3, #16
 80003e0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003e4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003ec:	45a6      	cmp	lr, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d909      	bls.n	8000408 <__udivmoddi4+0x1a0>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003fa:	f080 809c 	bcs.w	8000536 <__udivmoddi4+0x2ce>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f240 8099 	bls.w	8000536 <__udivmoddi4+0x2ce>
 8000404:	3802      	subs	r0, #2
 8000406:	443c      	add	r4, r7
 8000408:	eba4 040e 	sub.w	r4, r4, lr
 800040c:	fa1f fe83 	uxth.w	lr, r3
 8000410:	fbb4 f3f9 	udiv	r3, r4, r9
 8000414:	fb09 4413 	mls	r4, r9, r3, r4
 8000418:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800041c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000420:	45a4      	cmp	ip, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1ce>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f103 3eff 	add.w	lr, r3, #4294967295
 800042a:	f080 8082 	bcs.w	8000532 <__udivmoddi4+0x2ca>
 800042e:	45a4      	cmp	ip, r4
 8000430:	d97f      	bls.n	8000532 <__udivmoddi4+0x2ca>
 8000432:	3b02      	subs	r3, #2
 8000434:	443c      	add	r4, r7
 8000436:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000442:	4564      	cmp	r4, ip
 8000444:	4673      	mov	r3, lr
 8000446:	46e1      	mov	r9, ip
 8000448:	d362      	bcc.n	8000510 <__udivmoddi4+0x2a8>
 800044a:	d05f      	beq.n	800050c <__udivmoddi4+0x2a4>
 800044c:	b15d      	cbz	r5, 8000466 <__udivmoddi4+0x1fe>
 800044e:	ebb8 0203 	subs.w	r2, r8, r3
 8000452:	eb64 0409 	sbc.w	r4, r4, r9
 8000456:	fa04 f606 	lsl.w	r6, r4, r6
 800045a:	fa22 f301 	lsr.w	r3, r2, r1
 800045e:	431e      	orrs	r6, r3
 8000460:	40cc      	lsrs	r4, r1
 8000462:	e9c5 6400 	strd	r6, r4, [r5]
 8000466:	2100      	movs	r1, #0
 8000468:	e74f      	b.n	800030a <__udivmoddi4+0xa2>
 800046a:	fbb1 fcf2 	udiv	ip, r1, r2
 800046e:	0c01      	lsrs	r1, r0, #16
 8000470:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000474:	b280      	uxth	r0, r0
 8000476:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800047a:	463b      	mov	r3, r7
 800047c:	4638      	mov	r0, r7
 800047e:	463c      	mov	r4, r7
 8000480:	46b8      	mov	r8, r7
 8000482:	46be      	mov	lr, r7
 8000484:	2620      	movs	r6, #32
 8000486:	fbb1 f1f7 	udiv	r1, r1, r7
 800048a:	eba2 0208 	sub.w	r2, r2, r8
 800048e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000492:	e766      	b.n	8000362 <__udivmoddi4+0xfa>
 8000494:	4601      	mov	r1, r0
 8000496:	e718      	b.n	80002ca <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e72c      	b.n	80002f6 <__udivmoddi4+0x8e>
 800049c:	f1c6 0220 	rsb	r2, r6, #32
 80004a0:	fa2e f302 	lsr.w	r3, lr, r2
 80004a4:	40b7      	lsls	r7, r6
 80004a6:	40b1      	lsls	r1, r6
 80004a8:	fa20 f202 	lsr.w	r2, r0, r2
 80004ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b0:	430a      	orrs	r2, r1
 80004b2:	fbb3 f8fe 	udiv	r8, r3, lr
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	fb0e 3318 	mls	r3, lr, r8, r3
 80004bc:	0c11      	lsrs	r1, r2, #16
 80004be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c2:	fb08 f904 	mul.w	r9, r8, r4
 80004c6:	40b0      	lsls	r0, r6
 80004c8:	4589      	cmp	r9, r1
 80004ca:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ce:	b280      	uxth	r0, r0
 80004d0:	d93e      	bls.n	8000550 <__udivmoddi4+0x2e8>
 80004d2:	1879      	adds	r1, r7, r1
 80004d4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d8:	d201      	bcs.n	80004de <__udivmoddi4+0x276>
 80004da:	4589      	cmp	r9, r1
 80004dc:	d81f      	bhi.n	800051e <__udivmoddi4+0x2b6>
 80004de:	eba1 0109 	sub.w	r1, r1, r9
 80004e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e6:	fb09 f804 	mul.w	r8, r9, r4
 80004ea:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ee:	b292      	uxth	r2, r2
 80004f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f4:	4542      	cmp	r2, r8
 80004f6:	d229      	bcs.n	800054c <__udivmoddi4+0x2e4>
 80004f8:	18ba      	adds	r2, r7, r2
 80004fa:	f109 31ff 	add.w	r1, r9, #4294967295
 80004fe:	d2c4      	bcs.n	800048a <__udivmoddi4+0x222>
 8000500:	4542      	cmp	r2, r8
 8000502:	d2c2      	bcs.n	800048a <__udivmoddi4+0x222>
 8000504:	f1a9 0102 	sub.w	r1, r9, #2
 8000508:	443a      	add	r2, r7
 800050a:	e7be      	b.n	800048a <__udivmoddi4+0x222>
 800050c:	45f0      	cmp	r8, lr
 800050e:	d29d      	bcs.n	800044c <__udivmoddi4+0x1e4>
 8000510:	ebbe 0302 	subs.w	r3, lr, r2
 8000514:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000518:	3801      	subs	r0, #1
 800051a:	46e1      	mov	r9, ip
 800051c:	e796      	b.n	800044c <__udivmoddi4+0x1e4>
 800051e:	eba7 0909 	sub.w	r9, r7, r9
 8000522:	4449      	add	r1, r9
 8000524:	f1a8 0c02 	sub.w	ip, r8, #2
 8000528:	fbb1 f9fe 	udiv	r9, r1, lr
 800052c:	fb09 f804 	mul.w	r8, r9, r4
 8000530:	e7db      	b.n	80004ea <__udivmoddi4+0x282>
 8000532:	4673      	mov	r3, lr
 8000534:	e77f      	b.n	8000436 <__udivmoddi4+0x1ce>
 8000536:	4650      	mov	r0, sl
 8000538:	e766      	b.n	8000408 <__udivmoddi4+0x1a0>
 800053a:	4608      	mov	r0, r1
 800053c:	e6fd      	b.n	800033a <__udivmoddi4+0xd2>
 800053e:	443b      	add	r3, r7
 8000540:	3a02      	subs	r2, #2
 8000542:	e733      	b.n	80003ac <__udivmoddi4+0x144>
 8000544:	f1ac 0c02 	sub.w	ip, ip, #2
 8000548:	443b      	add	r3, r7
 800054a:	e71c      	b.n	8000386 <__udivmoddi4+0x11e>
 800054c:	4649      	mov	r1, r9
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x222>
 8000550:	eba1 0109 	sub.w	r1, r1, r9
 8000554:	46c4      	mov	ip, r8
 8000556:	fbb1 f9fe 	udiv	r9, r1, lr
 800055a:	fb09 f804 	mul.w	r8, r9, r4
 800055e:	e7c4      	b.n	80004ea <__udivmoddi4+0x282>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000568:	f000 fa7c 	bl	8000a64 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 fc3d 	bl	8000dea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f816 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 f934 	bl	80007e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000578:	f000 f914 	bl	80007a4 <MX_DMA_Init>
  MX_TIM1_Init();
 800057c:	f000 f86c 	bl	8000658 <MX_TIM1_Init>
  MX_UART4_Init();
 8000580:	f000 f8e0 	bl	8000744 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  //enable uart4_IRQn
  TIM1_Start_IC();
 8000584:	f000 fa22 	bl	80009cc <TIM1_Start_IC>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //toggle led to show that its in waiting
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000588:	2180      	movs	r1, #128	@ 0x80
 800058a:	4804      	ldr	r0, [pc, #16]	@ (800059c <main+0x38>)
 800058c:	f001 fc07 	bl	8001d9e <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000590:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000594:	f000 fc86 	bl	8000ea4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000598:	bf00      	nop
 800059a:	e7f5      	b.n	8000588 <main+0x24>
 800059c:	40020400 	.word	0x40020400

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b094      	sub	sp, #80	@ 0x50
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 031c 	add.w	r3, r7, #28
 80005aa:	2234      	movs	r2, #52	@ 0x34
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f004 fe53 	bl	800525a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	f107 0308 	add.w	r3, r7, #8
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c4:	4b22      	ldr	r3, [pc, #136]	@ (8000650 <SystemClock_Config+0xb0>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c8:	4a21      	ldr	r2, [pc, #132]	@ (8000650 <SystemClock_Config+0xb0>)
 80005ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80005d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000650 <SystemClock_Config+0xb0>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000654 <SystemClock_Config+0xb4>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000654 <SystemClock_Config+0xb4>)
 80005e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	4b19      	ldr	r3, [pc, #100]	@ (8000654 <SystemClock_Config+0xb4>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005f4:	603b      	str	r3, [r7, #0]
 80005f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f8:	2302      	movs	r3, #2
 80005fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005fc:	2301      	movs	r3, #1
 80005fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000600:	2310      	movs	r3, #16
 8000602:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000604:	2300      	movs	r3, #0
 8000606:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000608:	f107 031c 	add.w	r3, r7, #28
 800060c:	4618      	mov	r0, r3
 800060e:	f001 fbe1 	bl	8001dd4 <HAL_RCC_OscConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000618:	f000 fa50 	bl	8000abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061c:	230f      	movs	r3, #15
 800061e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000630:	f107 0308 	add.w	r3, r7, #8
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f001 fe7a 	bl	8002330 <HAL_RCC_ClockConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000642:	f000 fa3b 	bl	8000abc <Error_Handler>
  }
}
 8000646:	bf00      	nop
 8000648:	3750      	adds	r7, #80	@ 0x50
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08c      	sub	sp, #48	@ 0x30
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000684:	4b2d      	ldr	r3, [pc, #180]	@ (800073c <MX_TIM1_Init+0xe4>)
 8000686:	4a2e      	ldr	r2, [pc, #184]	@ (8000740 <MX_TIM1_Init+0xe8>)
 8000688:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 800068a:	4b2c      	ldr	r3, [pc, #176]	@ (800073c <MX_TIM1_Init+0xe4>)
 800068c:	2203      	movs	r2, #3
 800068e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000690:	4b2a      	ldr	r3, [pc, #168]	@ (800073c <MX_TIM1_Init+0xe4>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39999;
 8000696:	4b29      	ldr	r3, [pc, #164]	@ (800073c <MX_TIM1_Init+0xe4>)
 8000698:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 800069c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800069e:	4b27      	ldr	r3, [pc, #156]	@ (800073c <MX_TIM1_Init+0xe4>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006a4:	4b25      	ldr	r3, [pc, #148]	@ (800073c <MX_TIM1_Init+0xe4>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006aa:	4b24      	ldr	r3, [pc, #144]	@ (800073c <MX_TIM1_Init+0xe4>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006b0:	4822      	ldr	r0, [pc, #136]	@ (800073c <MX_TIM1_Init+0xe4>)
 80006b2:	f002 fc4b 	bl	8002f4c <HAL_TIM_Base_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 80006bc:	f000 f9fe 	bl	8000abc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	4619      	mov	r1, r3
 80006cc:	481b      	ldr	r0, [pc, #108]	@ (800073c <MX_TIM1_Init+0xe4>)
 80006ce:	f002 ffe9 	bl	80036a4 <HAL_TIM_ConfigClockSource>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80006d8:	f000 f9f0 	bl	8000abc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80006dc:	4817      	ldr	r0, [pc, #92]	@ (800073c <MX_TIM1_Init+0xe4>)
 80006de:	f002 fc8c 	bl	8002ffa <HAL_TIM_IC_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80006e8:	f000 f9e8 	bl	8000abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4619      	mov	r1, r3
 80006fe:	480f      	ldr	r0, [pc, #60]	@ (800073c <MX_TIM1_Init+0xe4>)
 8000700:	f003 fb9c 	bl	8003e3c <HAL_TIMEx_MasterConfigSynchronization>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800070a:	f000 f9d7 	bl	8000abc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000712:	2301      	movs	r3, #1
 8000714:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2200      	movs	r2, #0
 8000722:	4619      	mov	r1, r3
 8000724:	4805      	ldr	r0, [pc, #20]	@ (800073c <MX_TIM1_Init+0xe4>)
 8000726:	f002 ff20 	bl	800356a <HAL_TIM_IC_ConfigChannel>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000730:	f000 f9c4 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	3730      	adds	r7, #48	@ 0x30
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2000002c 	.word	0x2000002c
 8000740:	40010000 	.word	0x40010000

08000744 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000748:	4b14      	ldr	r3, [pc, #80]	@ (800079c <MX_UART4_Init+0x58>)
 800074a:	4a15      	ldr	r2, [pc, #84]	@ (80007a0 <MX_UART4_Init+0x5c>)
 800074c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800074e:	4b13      	ldr	r3, [pc, #76]	@ (800079c <MX_UART4_Init+0x58>)
 8000750:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000754:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <MX_UART4_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800075c:	4b0f      	ldr	r3, [pc, #60]	@ (800079c <MX_UART4_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000762:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <MX_UART4_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX;
 8000768:	4b0c      	ldr	r3, [pc, #48]	@ (800079c <MX_UART4_Init+0x58>)
 800076a:	2208      	movs	r2, #8
 800076c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <MX_UART4_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000774:	4b09      	ldr	r3, [pc, #36]	@ (800079c <MX_UART4_Init+0x58>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800077a:	4b08      	ldr	r3, [pc, #32]	@ (800079c <MX_UART4_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000780:	4b06      	ldr	r3, [pc, #24]	@ (800079c <MX_UART4_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	@ (800079c <MX_UART4_Init+0x58>)
 8000788:	f003 fc04 	bl	8003f94 <HAL_UART_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000792:	f000 f993 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000078 	.word	0x20000078
 80007a0:	40004c00 	.word	0x40004c00

080007a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007aa:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <MX_DMA_Init+0x38>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a0b      	ldr	r2, [pc, #44]	@ (80007dc <MX_DMA_Init+0x38>)
 80007b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_DMA_Init+0x38>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2100      	movs	r1, #0
 80007c6:	200f      	movs	r0, #15
 80007c8:	f000 fc6b 	bl	80010a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80007cc:	200f      	movs	r0, #15
 80007ce:	f000 fc84 	bl	80010da <HAL_NVIC_EnableIRQ>

}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800

080007e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	4b1d      	ldr	r3, [pc, #116]	@ (800086c <MX_GPIO_Init+0x8c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a1c      	ldr	r2, [pc, #112]	@ (800086c <MX_GPIO_Init+0x8c>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b1a      	ldr	r3, [pc, #104]	@ (800086c <MX_GPIO_Init+0x8c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800080e:	4b17      	ldr	r3, [pc, #92]	@ (800086c <MX_GPIO_Init+0x8c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a16      	ldr	r2, [pc, #88]	@ (800086c <MX_GPIO_Init+0x8c>)
 8000814:	f043 0310 	orr.w	r3, r3, #16
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b14      	ldr	r3, [pc, #80]	@ (800086c <MX_GPIO_Init+0x8c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0310 	and.w	r3, r3, #16
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	4b11      	ldr	r3, [pc, #68]	@ (800086c <MX_GPIO_Init+0x8c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a10      	ldr	r2, [pc, #64]	@ (800086c <MX_GPIO_Init+0x8c>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b0e      	ldr	r3, [pc, #56]	@ (800086c <MX_GPIO_Init+0x8c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2180      	movs	r1, #128	@ 0x80
 8000842:	480b      	ldr	r0, [pc, #44]	@ (8000870 <MX_GPIO_Init+0x90>)
 8000844:	f001 fa92 	bl	8001d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000848:	2380      	movs	r3, #128	@ 0x80
 800084a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	2301      	movs	r3, #1
 800084e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	4619      	mov	r1, r3
 800085e:	4804      	ldr	r0, [pc, #16]	@ (8000870 <MX_GPIO_Init+0x90>)
 8000860:	f001 f8d8 	bl	8001a14 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000864:	bf00      	nop
 8000866:	3720      	adds	r7, #32
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40023800 	.word	0x40023800
 8000870:	40020400 	.word	0x40020400
 8000874:	00000000 	.word	0x00000000

08000878 <w_calc>:

/* USER CODE BEGIN 4 */
void w_calc(void) {
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
	//timer period is 10ms
	float time_ms = ((float)((counter_buffer[3] - counter_buffer[2]) + (counter_buffer[2] - counter_buffer[1]) + (counter_buffer[1] - counter_buffer[0]) + counter_buffer[0]) / 39999)*10;
 800087e:	4b4c      	ldr	r3, [pc, #304]	@ (80009b0 <w_calc+0x138>)
 8000880:	88db      	ldrh	r3, [r3, #6]
 8000882:	ee07 3a90 	vmov	s15, r3
 8000886:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800088a:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 80009b4 <w_calc+0x13c>
 800088e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000892:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000896:	ee67 7a87 	vmul.f32	s15, s15, s14
 800089a:	edc7 7a03 	vstr	s15, [r7, #12]
	float w = 1/(0.001*time_ms);
 800089e:	edd7 7a03 	vldr	s15, [r7, #12]
 80008a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008a6:	ed9f 6b40 	vldr	d6, [pc, #256]	@ 80009a8 <w_calc+0x130>
 80008aa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80008ae:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 80008b2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80008b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008ba:	edc7 7a02 	vstr	s15, [r7, #8]
	//convert time_s to uint_8
	if(time_ms < 0) {
 80008be:	edd7 7a03 	vldr	s15, [r7, #12]
 80008c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ca:	d503      	bpl.n	80008d4 <w_calc+0x5c>
		time_ms = 0;
 80008cc:	f04f 0300 	mov.w	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	e021      	b.n	8000918 <w_calc+0xa0>
	}
	//if over 40ms, timer didn't capture full period
	else if(time_ms > 40) {
 80008d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80008d8:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80009b8 <w_calc+0x140>
 80008dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008e4:	dd02      	ble.n	80008ec <w_calc+0x74>
		time_ms = 0xFF;
 80008e6:	4b35      	ldr	r3, [pc, #212]	@ (80009bc <w_calc+0x144>)
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	e015      	b.n	8000918 <w_calc+0xa0>
	}
	else
	{
		time_ms = (uint8_t)((time_ms / 40) * (float)(0xFF));
 80008ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80008f0:	eddf 6a31 	vldr	s13, [pc, #196]	@ 80009b8 <w_calc+0x140>
 80008f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008f8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80009c0 <w_calc+0x148>
 80008fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000904:	edc7 7a01 	vstr	s15, [r7, #4]
 8000908:	793b      	ldrb	r3, [r7, #4]
 800090a:	b2db      	uxtb	r3, r3
 800090c:	ee07 3a90 	vmov	s15, r3
 8000910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000914:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	//convert w to uint_8
	if(w < 0) {
 8000918:	edd7 7a02 	vldr	s15, [r7, #8]
 800091c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000924:	d503      	bpl.n	800092e <w_calc+0xb6>
		w = 0;
 8000926:	f04f 0300 	mov.w	r3, #0
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	e021      	b.n	8000972 <w_calc+0xfa>
	}
	else if(w > 1000) {
 800092e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000932:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80009c4 <w_calc+0x14c>
 8000936:	eef4 7ac7 	vcmpe.f32	s15, s14
 800093a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800093e:	dd02      	ble.n	8000946 <w_calc+0xce>
		w = 0xFF;
 8000940:	4b1e      	ldr	r3, [pc, #120]	@ (80009bc <w_calc+0x144>)
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	e015      	b.n	8000972 <w_calc+0xfa>
	}
	else
	{
		w = (uint8_t)((w / 1000) * (float)(0xFF));
 8000946:	ed97 7a02 	vldr	s14, [r7, #8]
 800094a:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80009c4 <w_calc+0x14c>
 800094e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000952:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80009c0 <w_calc+0x148>
 8000956:	ee67 7a87 	vmul.f32	s15, s15, s14
 800095a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800095e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000962:	793b      	ldrb	r3, [r7, #4]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	ee07 3a90 	vmov	s15, r3
 800096a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800096e:	edc7 7a02 	vstr	s15, [r7, #8]
	}
	w_time[0] = w;
 8000972:	edd7 7a02 	vldr	s15, [r7, #8]
 8000976:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800097a:	edc7 7a01 	vstr	s15, [r7, #4]
 800097e:	793b      	ldrb	r3, [r7, #4]
 8000980:	b2da      	uxtb	r2, r3
 8000982:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <w_calc+0x150>)
 8000984:	701a      	strb	r2, [r3, #0]
	w_time[1] = time_ms;
 8000986:	edd7 7a03 	vldr	s15, [r7, #12]
 800098a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800098e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000992:	793b      	ldrb	r3, [r7, #4]
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4b0c      	ldr	r3, [pc, #48]	@ (80009c8 <w_calc+0x150>)
 8000998:	705a      	strb	r2, [r3, #1]

}
 800099a:	bf00      	nop
 800099c:	3714      	adds	r7, #20
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80009ac:	3f50624d 	.word	0x3f50624d
 80009b0:	20000160 	.word	0x20000160
 80009b4:	471c3f00 	.word	0x471c3f00
 80009b8:	42200000 	.word	0x42200000
 80009bc:	437f0000 	.word	0x437f0000
 80009c0:	437f0000 	.word	0x437f0000
 80009c4:	447a0000 	.word	0x447a0000
 80009c8:	20000000 	.word	0x20000000

080009cc <TIM1_Start_IC>:

void TIM1_Start_IC(void) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
    HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80009d0:	2100      	movs	r1, #0
 80009d2:	4802      	ldr	r0, [pc, #8]	@ (80009dc <TIM1_Start_IC+0x10>)
 80009d4:	f002 fb72 	bl	80030bc <HAL_TIM_IC_Start_IT>
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	2000002c 	.word	0x2000002c

080009e0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	7f1b      	ldrb	r3, [r3, #28]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d12a      	bne.n	8000a46 <HAL_TIM_IC_CaptureCallback+0x66>
		//add count value of each interrupt to the counter buffer
		counter_buffer[re_count] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80009f0:	2100      	movs	r1, #0
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f002 ff20 	bl	8003838 <HAL_TIM_ReadCapturedValue>
 80009f8:	4601      	mov	r1, r0
 80009fa:	4b15      	ldr	r3, [pc, #84]	@ (8000a50 <HAL_TIM_IC_CaptureCallback+0x70>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	461a      	mov	r2, r3
 8000a00:	b289      	uxth	r1, r1
 8000a02:	4b14      	ldr	r3, [pc, #80]	@ (8000a54 <HAL_TIM_IC_CaptureCallback+0x74>)
 8000a04:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		re_count++;
 8000a08:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	4b0f      	ldr	r3, [pc, #60]	@ (8000a50 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000a12:	701a      	strb	r2, [r3, #0]
		//when there are 4 high signals, calculate and transmit the speed
		if(re_count == 4) {
 8000a14:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b04      	cmp	r3, #4
 8000a1a:	d114      	bne.n	8000a46 <HAL_TIM_IC_CaptureCallback+0x66>
			w_calc();
 8000a1c:	f7ff ff2c 	bl	8000878 <w_calc>
		    re_count = 0;
 8000a20:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	701a      	strb	r2, [r3, #0]
		    //HAL_UART_Transmit_DMA(&huart4, transmit_start, 6);
		    if(is_sent == 0) {
 8000a26:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d10b      	bne.n	8000a46 <HAL_TIM_IC_CaptureCallback+0x66>
		    	HAL_UART_Transmit_DMA(&huart4, w_time, 3);
 8000a2e:	2203      	movs	r2, #3
 8000a30:	490a      	ldr	r1, [pc, #40]	@ (8000a5c <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000a32:	480b      	ldr	r0, [pc, #44]	@ (8000a60 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000a34:	f003 fafc 	bl	8004030 <HAL_UART_Transmit_DMA>
		    	is_sent = 0;
 8000a38:	4b07      	ldr	r3, [pc, #28]	@ (8000a58 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
		    	__HAL_TIM_SET_COUNTER(htim, 0);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2200      	movs	r2, #0
 8000a44:	625a      	str	r2, [r3, #36]	@ 0x24
		    }
		}
	}
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000168 	.word	0x20000168
 8000a54:	20000160 	.word	0x20000160
 8000a58:	2000016c 	.word	0x2000016c
 8000a5c:	20000000 	.word	0x20000000
 8000a60:	20000078 	.word	0x20000078

08000a64 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a6a:	463b      	mov	r3, r7
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a76:	f000 fb4b 	bl	8001110 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a86:	231f      	movs	r3, #31
 8000a88:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a8a:	2387      	movs	r3, #135	@ 0x87
 8000a8c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a92:	2300      	movs	r3, #0
 8000a94:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a96:	2301      	movs	r3, #1
 8000a98:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000aa6:	463b      	mov	r3, r7
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f000 fb69 	bl	8001180 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000aae:	2004      	movs	r0, #4
 8000ab0:	f000 fb46 	bl	8001140 <HAL_MPU_Enable>

}
 8000ab4:	bf00      	nop
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac0:	b672      	cpsid	i
}
 8000ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <Error_Handler+0x8>

08000ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	4b0f      	ldr	r3, [pc, #60]	@ (8000b0c <HAL_MspInit+0x44>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad2:	4a0e      	ldr	r2, [pc, #56]	@ (8000b0c <HAL_MspInit+0x44>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ad8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ada:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <HAL_MspInit+0x44>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae6:	4b09      	ldr	r3, [pc, #36]	@ (8000b0c <HAL_MspInit+0x44>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aea:	4a08      	ldr	r2, [pc, #32]	@ (8000b0c <HAL_MspInit+0x44>)
 8000aec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000af0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000af2:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <HAL_MspInit+0x44>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800

08000b10 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	@ 0x28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a1b      	ldr	r2, [pc, #108]	@ (8000b9c <HAL_TIM_Base_MspInit+0x8c>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d130      	bne.n	8000b94 <HAL_TIM_Base_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b32:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba0 <HAL_TIM_Base_MspInit+0x90>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b36:	4a1a      	ldr	r2, [pc, #104]	@ (8000ba0 <HAL_TIM_Base_MspInit+0x90>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ba0 <HAL_TIM_Base_MspInit+0x90>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ba0 <HAL_TIM_Base_MspInit+0x90>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	4a14      	ldr	r2, [pc, #80]	@ (8000ba0 <HAL_TIM_Base_MspInit+0x90>)
 8000b50:	f043 0310 	orr.w	r3, r3, #16
 8000b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b56:	4b12      	ldr	r3, [pc, #72]	@ (8000ba0 <HAL_TIM_Base_MspInit+0x90>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	f003 0310 	and.w	r3, r3, #16
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	2300      	movs	r3, #0
 8000b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b74:	2301      	movs	r3, #1
 8000b76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4809      	ldr	r0, [pc, #36]	@ (8000ba4 <HAL_TIM_Base_MspInit+0x94>)
 8000b80:	f000 ff48 	bl	8001a14 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2100      	movs	r1, #0
 8000b88:	201b      	movs	r0, #27
 8000b8a:	f000 fa8a 	bl	80010a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000b8e:	201b      	movs	r0, #27
 8000b90:	f000 faa3 	bl	80010da <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000b94:	bf00      	nop
 8000b96:	3728      	adds	r7, #40	@ 0x28
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40010000 	.word	0x40010000
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b0ae      	sub	sp, #184	@ 0xb8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	2290      	movs	r2, #144	@ 0x90
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f004 fb46 	bl	800525a <memset>
  if(huart->Instance==UART4)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a3c      	ldr	r2, [pc, #240]	@ (8000cc4 <HAL_UART_MspInit+0x11c>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d171      	bne.n	8000cbc <HAL_UART_MspInit+0x114>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000bd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bdc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000bde:	2300      	movs	r3, #0
 8000be0:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4618      	mov	r0, r3
 8000be8:	f001 fd88 	bl	80026fc <HAL_RCCEx_PeriphCLKConfig>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000bf2:	f7ff ff63 	bl	8000abc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000bf6:	4b34      	ldr	r3, [pc, #208]	@ (8000cc8 <HAL_UART_MspInit+0x120>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfa:	4a33      	ldr	r2, [pc, #204]	@ (8000cc8 <HAL_UART_MspInit+0x120>)
 8000bfc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000c00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c02:	4b31      	ldr	r3, [pc, #196]	@ (8000cc8 <HAL_UART_MspInit+0x120>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	4b2e      	ldr	r3, [pc, #184]	@ (8000cc8 <HAL_UART_MspInit+0x120>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	4a2d      	ldr	r2, [pc, #180]	@ (8000cc8 <HAL_UART_MspInit+0x120>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1a:	4b2b      	ldr	r3, [pc, #172]	@ (8000cc8 <HAL_UART_MspInit+0x120>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c26:	2303      	movs	r3, #3
 8000c28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c3e:	2308      	movs	r3, #8
 8000c40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c44:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4820      	ldr	r0, [pc, #128]	@ (8000ccc <HAL_UART_MspInit+0x124>)
 8000c4c:	f000 fee2 	bl	8001a14 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8000c50:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd0 <HAL_UART_MspInit+0x128>)
 8000c52:	4a20      	ldr	r2, [pc, #128]	@ (8000cd4 <HAL_UART_MspInit+0x12c>)
 8000c54:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8000c56:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd0 <HAL_UART_MspInit+0x128>)
 8000c58:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c5c:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd0 <HAL_UART_MspInit+0x128>)
 8000c60:	2240      	movs	r2, #64	@ 0x40
 8000c62:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c64:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd0 <HAL_UART_MspInit+0x128>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c6a:	4b19      	ldr	r3, [pc, #100]	@ (8000cd0 <HAL_UART_MspInit+0x128>)
 8000c6c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c70:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c72:	4b17      	ldr	r3, [pc, #92]	@ (8000cd0 <HAL_UART_MspInit+0x128>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c78:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <HAL_UART_MspInit+0x128>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8000c7e:	4b14      	ldr	r3, [pc, #80]	@ (8000cd0 <HAL_UART_MspInit+0x128>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c84:	4b12      	ldr	r3, [pc, #72]	@ (8000cd0 <HAL_UART_MspInit+0x128>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <HAL_UART_MspInit+0x128>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8000c90:	480f      	ldr	r0, [pc, #60]	@ (8000cd0 <HAL_UART_MspInit+0x128>)
 8000c92:	f000 fab5 	bl	8001200 <HAL_DMA_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8000c9c:	f7ff ff0e 	bl	8000abc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a0b      	ldr	r2, [pc, #44]	@ (8000cd0 <HAL_UART_MspInit+0x128>)
 8000ca4:	671a      	str	r2, [r3, #112]	@ 0x70
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd0 <HAL_UART_MspInit+0x128>)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2034      	movs	r0, #52	@ 0x34
 8000cb2:	f000 f9f6 	bl	80010a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000cb6:	2034      	movs	r0, #52	@ 0x34
 8000cb8:	f000 fa0f 	bl	80010da <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 8000cbc:	bf00      	nop
 8000cbe:	37b8      	adds	r7, #184	@ 0xb8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40004c00 	.word	0x40004c00
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020000 	.word	0x40020000
 8000cd0:	20000100 	.word	0x20000100
 8000cd4:	40026070 	.word	0x40026070

08000cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <NMI_Handler+0x4>

08000ce0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <HardFault_Handler+0x4>

08000ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <MemManage_Handler+0x4>

08000cf0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <BusFault_Handler+0x4>

08000cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <UsageFault_Handler+0x4>

08000d00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d2e:	f000 f899 	bl	8000e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8000d3c:	4802      	ldr	r0, [pc, #8]	@ (8000d48 <DMA1_Stream4_IRQHandler+0x10>)
 8000d3e:	f000 fbff 	bl	8001540 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000100 	.word	0x20000100

08000d4c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d50:	4802      	ldr	r0, [pc, #8]	@ (8000d5c <TIM1_CC_IRQHandler+0x10>)
 8000d52:	f002 fb03 	bl	800335c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	2000002c 	.word	0x2000002c

08000d60 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000d64:	4802      	ldr	r0, [pc, #8]	@ (8000d70 <UART4_IRQHandler+0x10>)
 8000d66:	f003 f9df 	bl	8004128 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000078 	.word	0x20000078

08000d74 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d78:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <SystemInit+0x20>)
 8000d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d7e:	4a05      	ldr	r2, [pc, #20]	@ (8000d94 <SystemInit+0x20>)
 8000d80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dd0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d9c:	f7ff ffea 	bl	8000d74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000da0:	480c      	ldr	r0, [pc, #48]	@ (8000dd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000da2:	490d      	ldr	r1, [pc, #52]	@ (8000dd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000da4:	4a0d      	ldr	r2, [pc, #52]	@ (8000ddc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da8:	e002      	b.n	8000db0 <LoopCopyDataInit>

08000daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dae:	3304      	adds	r3, #4

08000db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db4:	d3f9      	bcc.n	8000daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db6:	4a0a      	ldr	r2, [pc, #40]	@ (8000de0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000db8:	4c0a      	ldr	r4, [pc, #40]	@ (8000de4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dbc:	e001      	b.n	8000dc2 <LoopFillZerobss>

08000dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc0:	3204      	adds	r2, #4

08000dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc4:	d3fb      	bcc.n	8000dbe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000dc6:	f004 fa51 	bl	800526c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dca:	f7ff fbcb 	bl	8000564 <main>
  bx  lr    
 8000dce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dd0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ddc:	080052fc 	.word	0x080052fc
  ldr r2, =_sbss
 8000de0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000de4:	20000174 	.word	0x20000174

08000de8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de8:	e7fe      	b.n	8000de8 <ADC_IRQHandler>

08000dea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dee:	2003      	movs	r0, #3
 8000df0:	f000 f94c 	bl	800108c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000df4:	200f      	movs	r0, #15
 8000df6:	f000 f805 	bl	8000e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dfa:	f7ff fe65 	bl	8000ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dfe:	2300      	movs	r3, #0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e0c:	4b12      	ldr	r3, [pc, #72]	@ (8000e58 <HAL_InitTick+0x54>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4b12      	ldr	r3, [pc, #72]	@ (8000e5c <HAL_InitTick+0x58>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	4619      	mov	r1, r3
 8000e16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 f967 	bl	80010f6 <HAL_SYSTICK_Config>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e00e      	b.n	8000e50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2b0f      	cmp	r3, #15
 8000e36:	d80a      	bhi.n	8000e4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	6879      	ldr	r1, [r7, #4]
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e40:	f000 f92f 	bl	80010a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e44:	4a06      	ldr	r2, [pc, #24]	@ (8000e60 <HAL_InitTick+0x5c>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	e000      	b.n	8000e50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000004 	.word	0x20000004
 8000e5c:	2000000c 	.word	0x2000000c
 8000e60:	20000008 	.word	0x20000008

08000e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e68:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <HAL_IncTick+0x20>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <HAL_IncTick+0x24>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4413      	add	r3, r2
 8000e74:	4a04      	ldr	r2, [pc, #16]	@ (8000e88 <HAL_IncTick+0x24>)
 8000e76:	6013      	str	r3, [r2, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	2000000c 	.word	0x2000000c
 8000e88:	20000170 	.word	0x20000170

08000e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e90:	4b03      	ldr	r3, [pc, #12]	@ (8000ea0 <HAL_GetTick+0x14>)
 8000e92:	681b      	ldr	r3, [r3, #0]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000170 	.word	0x20000170

08000ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eac:	f7ff ffee 	bl	8000e8c <HAL_GetTick>
 8000eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ebc:	d005      	beq.n	8000eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee8 <HAL_Delay+0x44>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eca:	bf00      	nop
 8000ecc:	f7ff ffde 	bl	8000e8c <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d8f7      	bhi.n	8000ecc <HAL_Delay+0x28>
  {
  }
}
 8000edc:	bf00      	nop
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	2000000c 	.word	0x2000000c

08000eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000efc:	4b0b      	ldr	r3, [pc, #44]	@ (8000f2c <__NVIC_SetPriorityGrouping+0x40>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f14:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000f16:	4313      	orrs	r3, r2
 8000f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1a:	4a04      	ldr	r2, [pc, #16]	@ (8000f2c <__NVIC_SetPriorityGrouping+0x40>)
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	60d3      	str	r3, [r2, #12]
}
 8000f20:	bf00      	nop
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00
 8000f30:	05fa0000 	.word	0x05fa0000

08000f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f38:	4b04      	ldr	r3, [pc, #16]	@ (8000f4c <__NVIC_GetPriorityGrouping+0x18>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	f003 0307 	and.w	r3, r3, #7
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	db0b      	blt.n	8000f7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	f003 021f 	and.w	r2, r3, #31
 8000f68:	4907      	ldr	r1, [pc, #28]	@ (8000f88 <__NVIC_EnableIRQ+0x38>)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	095b      	lsrs	r3, r3, #5
 8000f70:	2001      	movs	r0, #1
 8000f72:	fa00 f202 	lsl.w	r2, r0, r2
 8000f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000e100 	.word	0xe000e100

08000f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	db0a      	blt.n	8000fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	490c      	ldr	r1, [pc, #48]	@ (8000fd8 <__NVIC_SetPriority+0x4c>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	0112      	lsls	r2, r2, #4
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	440b      	add	r3, r1
 8000fb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb4:	e00a      	b.n	8000fcc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4908      	ldr	r1, [pc, #32]	@ (8000fdc <__NVIC_SetPriority+0x50>)
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	3b04      	subs	r3, #4
 8000fc4:	0112      	lsls	r2, r2, #4
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	440b      	add	r3, r1
 8000fca:	761a      	strb	r2, [r3, #24]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000e100 	.word	0xe000e100
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	@ 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f1c3 0307 	rsb	r3, r3, #7
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	bf28      	it	cs
 8000ffe:	2304      	movcs	r3, #4
 8001000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3304      	adds	r3, #4
 8001006:	2b06      	cmp	r3, #6
 8001008:	d902      	bls.n	8001010 <NVIC_EncodePriority+0x30>
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3b03      	subs	r3, #3
 800100e:	e000      	b.n	8001012 <NVIC_EncodePriority+0x32>
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	f04f 32ff 	mov.w	r2, #4294967295
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43da      	mvns	r2, r3
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	401a      	ands	r2, r3
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001028:	f04f 31ff 	mov.w	r1, #4294967295
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa01 f303 	lsl.w	r3, r1, r3
 8001032:	43d9      	mvns	r1, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	4313      	orrs	r3, r2
         );
}
 800103a:	4618      	mov	r0, r3
 800103c:	3724      	adds	r7, #36	@ 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
	...

08001048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001058:	d301      	bcc.n	800105e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800105a:	2301      	movs	r3, #1
 800105c:	e00f      	b.n	800107e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800105e:	4a0a      	ldr	r2, [pc, #40]	@ (8001088 <SysTick_Config+0x40>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001066:	210f      	movs	r1, #15
 8001068:	f04f 30ff 	mov.w	r0, #4294967295
 800106c:	f7ff ff8e 	bl	8000f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001070:	4b05      	ldr	r3, [pc, #20]	@ (8001088 <SysTick_Config+0x40>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001076:	4b04      	ldr	r3, [pc, #16]	@ (8001088 <SysTick_Config+0x40>)
 8001078:	2207      	movs	r2, #7
 800107a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	e000e010 	.word	0xe000e010

0800108c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ff29 	bl	8000eec <__NVIC_SetPriorityGrouping>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b086      	sub	sp, #24
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	4603      	mov	r3, r0
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b4:	f7ff ff3e 	bl	8000f34 <__NVIC_GetPriorityGrouping>
 80010b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	68b9      	ldr	r1, [r7, #8]
 80010be:	6978      	ldr	r0, [r7, #20]
 80010c0:	f7ff ff8e 	bl	8000fe0 <NVIC_EncodePriority>
 80010c4:	4602      	mov	r2, r0
 80010c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ca:	4611      	mov	r1, r2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff5d 	bl	8000f8c <__NVIC_SetPriority>
}
 80010d2:	bf00      	nop
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff31 	bl	8000f50 <__NVIC_EnableIRQ>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff ffa2 	bl	8001048 <SysTick_Config>
 8001104:	4603      	mov	r3, r0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001114:	f3bf 8f5f 	dmb	sy
}
 8001118:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800111a:	4b07      	ldr	r3, [pc, #28]	@ (8001138 <HAL_MPU_Disable+0x28>)
 800111c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800111e:	4a06      	ldr	r2, [pc, #24]	@ (8001138 <HAL_MPU_Disable+0x28>)
 8001120:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001124:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001126:	4b05      	ldr	r3, [pc, #20]	@ (800113c <HAL_MPU_Disable+0x2c>)
 8001128:	2200      	movs	r2, #0
 800112a:	605a      	str	r2, [r3, #4]
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000ed00 	.word	0xe000ed00
 800113c:	e000ed90 	.word	0xe000ed90

08001140 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001148:	4a0b      	ldr	r2, [pc, #44]	@ (8001178 <HAL_MPU_Enable+0x38>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001152:	4b0a      	ldr	r3, [pc, #40]	@ (800117c <HAL_MPU_Enable+0x3c>)
 8001154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001156:	4a09      	ldr	r2, [pc, #36]	@ (800117c <HAL_MPU_Enable+0x3c>)
 8001158:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800115c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800115e:	f3bf 8f4f 	dsb	sy
}
 8001162:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001164:	f3bf 8f6f 	isb	sy
}
 8001168:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000ed90 	.word	0xe000ed90
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	785a      	ldrb	r2, [r3, #1]
 800118c:	4b1b      	ldr	r3, [pc, #108]	@ (80011fc <HAL_MPU_ConfigRegion+0x7c>)
 800118e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001190:	4b1a      	ldr	r3, [pc, #104]	@ (80011fc <HAL_MPU_ConfigRegion+0x7c>)
 8001192:	691b      	ldr	r3, [r3, #16]
 8001194:	4a19      	ldr	r2, [pc, #100]	@ (80011fc <HAL_MPU_ConfigRegion+0x7c>)
 8001196:	f023 0301 	bic.w	r3, r3, #1
 800119a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800119c:	4a17      	ldr	r2, [pc, #92]	@ (80011fc <HAL_MPU_ConfigRegion+0x7c>)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	7b1b      	ldrb	r3, [r3, #12]
 80011a8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	7adb      	ldrb	r3, [r3, #11]
 80011ae:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	7a9b      	ldrb	r3, [r3, #10]
 80011b6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	7b5b      	ldrb	r3, [r3, #13]
 80011be:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	7b9b      	ldrb	r3, [r3, #14]
 80011c6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	7bdb      	ldrb	r3, [r3, #15]
 80011ce:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80011d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	7a5b      	ldrb	r3, [r3, #9]
 80011d6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80011d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	7a1b      	ldrb	r3, [r3, #8]
 80011de:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80011e0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	7812      	ldrb	r2, [r2, #0]
 80011e6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011e8:	4a04      	ldr	r2, [pc, #16]	@ (80011fc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011ea:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011ec:	6113      	str	r3, [r2, #16]
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000ed90 	.word	0xe000ed90

08001200 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800120c:	f7ff fe3e 	bl	8000e8c <HAL_GetTick>
 8001210:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d101      	bne.n	800121c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e099      	b.n	8001350 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2202      	movs	r2, #2
 8001220:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 0201 	bic.w	r2, r2, #1
 800123a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800123c:	e00f      	b.n	800125e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800123e:	f7ff fe25 	bl	8000e8c <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b05      	cmp	r3, #5
 800124a:	d908      	bls.n	800125e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2220      	movs	r2, #32
 8001250:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2203      	movs	r2, #3
 8001256:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e078      	b.n	8001350 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1e8      	bne.n	800123e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	4b38      	ldr	r3, [pc, #224]	@ (8001358 <HAL_DMA_Init+0x158>)
 8001278:	4013      	ands	r3, r2
 800127a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685a      	ldr	r2, [r3, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800128a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001296:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a1b      	ldr	r3, [r3, #32]
 80012a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b4:	2b04      	cmp	r3, #4
 80012b6:	d107      	bne.n	80012c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c0:	4313      	orrs	r3, r2
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	697a      	ldr	r2, [r7, #20]
 80012ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	f023 0307 	bic.w	r3, r3, #7
 80012de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	d117      	bne.n	8001322 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001300:	2b00      	cmp	r3, #0
 8001302:	d00e      	beq.n	8001322 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f000 fb09 	bl	800191c <DMA_CheckFifoParam>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d008      	beq.n	8001322 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2240      	movs	r2, #64	@ 0x40
 8001314:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800131e:	2301      	movs	r3, #1
 8001320:	e016      	b.n	8001350 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f000 fac0 	bl	80018b0 <DMA_CalcBaseAndBitshift>
 8001330:	4603      	mov	r3, r0
 8001332:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001338:	223f      	movs	r2, #63	@ 0x3f
 800133a:	409a      	lsls	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	e010803f 	.word	0xe010803f

0800135c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
 8001368:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800136a:	2300      	movs	r3, #0
 800136c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001372:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800137a:	2b01      	cmp	r3, #1
 800137c:	d101      	bne.n	8001382 <HAL_DMA_Start_IT+0x26>
 800137e:	2302      	movs	r3, #2
 8001380:	e048      	b.n	8001414 <HAL_DMA_Start_IT+0xb8>
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b01      	cmp	r3, #1
 8001394:	d137      	bne.n	8001406 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2202      	movs	r2, #2
 800139a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2200      	movs	r2, #0
 80013a2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	68b9      	ldr	r1, [r7, #8]
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	f000 fa52 	bl	8001854 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013b4:	223f      	movs	r2, #63	@ 0x3f
 80013b6:	409a      	lsls	r2, r3
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f042 0216 	orr.w	r2, r2, #22
 80013ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	695a      	ldr	r2, [r3, #20]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80013da:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d007      	beq.n	80013f4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f042 0208 	orr.w	r2, r2, #8
 80013f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f042 0201 	orr.w	r2, r2, #1
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	e005      	b.n	8001412 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800140e:	2302      	movs	r3, #2
 8001410:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001412:	7dfb      	ldrb	r3, [r7, #23]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001428:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800142a:	f7ff fd2f 	bl	8000e8c <HAL_GetTick>
 800142e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d008      	beq.n	800144e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2280      	movs	r2, #128	@ 0x80
 8001440:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e052      	b.n	80014f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f022 0216 	bic.w	r2, r2, #22
 800145c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	695a      	ldr	r2, [r3, #20]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800146c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001472:	2b00      	cmp	r3, #0
 8001474:	d103      	bne.n	800147e <HAL_DMA_Abort+0x62>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800147a:	2b00      	cmp	r3, #0
 800147c:	d007      	beq.n	800148e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f022 0208 	bic.w	r2, r2, #8
 800148c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 0201 	bic.w	r2, r2, #1
 800149c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800149e:	e013      	b.n	80014c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014a0:	f7ff fcf4 	bl	8000e8c <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b05      	cmp	r3, #5
 80014ac:	d90c      	bls.n	80014c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2220      	movs	r2, #32
 80014b2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2203      	movs	r2, #3
 80014b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e015      	b.n	80014f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1e4      	bne.n	80014a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014da:	223f      	movs	r2, #63	@ 0x3f
 80014dc:	409a      	lsls	r2, r3
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2201      	movs	r2, #1
 80014e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d004      	beq.n	800151a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2280      	movs	r2, #128	@ 0x80
 8001514:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e00c      	b.n	8001534 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2205      	movs	r2, #5
 800151e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 0201 	bic.w	r2, r2, #1
 8001530:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800154c:	4b8e      	ldr	r3, [pc, #568]	@ (8001788 <HAL_DMA_IRQHandler+0x248>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a8e      	ldr	r2, [pc, #568]	@ (800178c <HAL_DMA_IRQHandler+0x24c>)
 8001552:	fba2 2303 	umull	r2, r3, r2, r3
 8001556:	0a9b      	lsrs	r3, r3, #10
 8001558:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800155e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800156a:	2208      	movs	r2, #8
 800156c:	409a      	lsls	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	4013      	ands	r3, r2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d01a      	beq.n	80015ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b00      	cmp	r3, #0
 8001582:	d013      	beq.n	80015ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 0204 	bic.w	r2, r2, #4
 8001592:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001598:	2208      	movs	r2, #8
 800159a:	409a      	lsls	r2, r3
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015a4:	f043 0201 	orr.w	r2, r3, #1
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015b0:	2201      	movs	r2, #1
 80015b2:	409a      	lsls	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4013      	ands	r3, r2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d012      	beq.n	80015e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d00b      	beq.n	80015e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ce:	2201      	movs	r2, #1
 80015d0:	409a      	lsls	r2, r3
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015da:	f043 0202 	orr.w	r2, r3, #2
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015e6:	2204      	movs	r2, #4
 80015e8:	409a      	lsls	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	4013      	ands	r3, r2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d012      	beq.n	8001618 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d00b      	beq.n	8001618 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001604:	2204      	movs	r2, #4
 8001606:	409a      	lsls	r2, r3
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001610:	f043 0204 	orr.w	r2, r3, #4
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800161c:	2210      	movs	r2, #16
 800161e:	409a      	lsls	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4013      	ands	r3, r2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d043      	beq.n	80016b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	2b00      	cmp	r3, #0
 8001634:	d03c      	beq.n	80016b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800163a:	2210      	movs	r2, #16
 800163c:	409a      	lsls	r2, r3
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d018      	beq.n	8001682 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d108      	bne.n	8001670 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001662:	2b00      	cmp	r3, #0
 8001664:	d024      	beq.n	80016b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	4798      	blx	r3
 800166e:	e01f      	b.n	80016b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001674:	2b00      	cmp	r3, #0
 8001676:	d01b      	beq.n	80016b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	4798      	blx	r3
 8001680:	e016      	b.n	80016b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800168c:	2b00      	cmp	r3, #0
 800168e:	d107      	bne.n	80016a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 0208 	bic.w	r2, r2, #8
 800169e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d003      	beq.n	80016b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016b4:	2220      	movs	r2, #32
 80016b6:	409a      	lsls	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4013      	ands	r3, r2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f000 808f 	beq.w	80017e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0310 	and.w	r3, r3, #16
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 8087 	beq.w	80017e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016d6:	2220      	movs	r2, #32
 80016d8:	409a      	lsls	r2, r3
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b05      	cmp	r3, #5
 80016e8:	d136      	bne.n	8001758 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 0216 	bic.w	r2, r2, #22
 80016f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	695a      	ldr	r2, [r3, #20]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001708:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170e:	2b00      	cmp	r3, #0
 8001710:	d103      	bne.n	800171a <HAL_DMA_IRQHandler+0x1da>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001716:	2b00      	cmp	r3, #0
 8001718:	d007      	beq.n	800172a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0208 	bic.w	r2, r2, #8
 8001728:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800172e:	223f      	movs	r2, #63	@ 0x3f
 8001730:	409a      	lsls	r2, r3
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800174a:	2b00      	cmp	r3, #0
 800174c:	d07e      	beq.n	800184c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	4798      	blx	r3
        }
        return;
 8001756:	e079      	b.n	800184c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d01d      	beq.n	80017a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d10d      	bne.n	8001790 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001778:	2b00      	cmp	r3, #0
 800177a:	d031      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	4798      	blx	r3
 8001784:	e02c      	b.n	80017e0 <HAL_DMA_IRQHandler+0x2a0>
 8001786:	bf00      	nop
 8001788:	20000004 	.word	0x20000004
 800178c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001794:	2b00      	cmp	r3, #0
 8001796:	d023      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	4798      	blx	r3
 80017a0:	e01e      	b.n	80017e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d10f      	bne.n	80017d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 0210 	bic.w	r2, r2, #16
 80017be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d003      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d032      	beq.n	800184e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d022      	beq.n	800183a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2205      	movs	r2, #5
 80017f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f022 0201 	bic.w	r2, r2, #1
 800180a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	3301      	adds	r3, #1
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	429a      	cmp	r2, r3
 8001816:	d307      	bcc.n	8001828 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f2      	bne.n	800180c <HAL_DMA_IRQHandler+0x2cc>
 8001826:	e000      	b.n	800182a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001828:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183e:	2b00      	cmp	r3, #0
 8001840:	d005      	beq.n	800184e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	4798      	blx	r3
 800184a:	e000      	b.n	800184e <HAL_DMA_IRQHandler+0x30e>
        return;
 800184c:	bf00      	nop
    }
  }
}
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
 8001860:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001870:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	2b40      	cmp	r3, #64	@ 0x40
 8001880:	d108      	bne.n	8001894 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001892:	e007      	b.n	80018a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	68ba      	ldr	r2, [r7, #8]
 800189a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	60da      	str	r2, [r3, #12]
}
 80018a4:	bf00      	nop
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	3b10      	subs	r3, #16
 80018c0:	4a13      	ldr	r2, [pc, #76]	@ (8001910 <DMA_CalcBaseAndBitshift+0x60>)
 80018c2:	fba2 2303 	umull	r2, r3, r2, r3
 80018c6:	091b      	lsrs	r3, r3, #4
 80018c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018ca:	4a12      	ldr	r2, [pc, #72]	@ (8001914 <DMA_CalcBaseAndBitshift+0x64>)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4413      	add	r3, r2
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	461a      	mov	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b03      	cmp	r3, #3
 80018dc:	d908      	bls.n	80018f0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	461a      	mov	r2, r3
 80018e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001918 <DMA_CalcBaseAndBitshift+0x68>)
 80018e6:	4013      	ands	r3, r2
 80018e8:	1d1a      	adds	r2, r3, #4
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	659a      	str	r2, [r3, #88]	@ 0x58
 80018ee:	e006      	b.n	80018fe <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	461a      	mov	r2, r3
 80018f6:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <DMA_CalcBaseAndBitshift+0x68>)
 80018f8:	4013      	ands	r3, r2
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001902:	4618      	mov	r0, r3
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	aaaaaaab 	.word	0xaaaaaaab
 8001914:	080052e4 	.word	0x080052e4
 8001918:	fffffc00 	.word	0xfffffc00

0800191c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001924:	2300      	movs	r3, #0
 8001926:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800192c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d11f      	bne.n	8001976 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	2b03      	cmp	r3, #3
 800193a:	d856      	bhi.n	80019ea <DMA_CheckFifoParam+0xce>
 800193c:	a201      	add	r2, pc, #4	@ (adr r2, 8001944 <DMA_CheckFifoParam+0x28>)
 800193e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001942:	bf00      	nop
 8001944:	08001955 	.word	0x08001955
 8001948:	08001967 	.word	0x08001967
 800194c:	08001955 	.word	0x08001955
 8001950:	080019eb 	.word	0x080019eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001958:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d046      	beq.n	80019ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001964:	e043      	b.n	80019ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800196a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800196e:	d140      	bne.n	80019f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001974:	e03d      	b.n	80019f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800197e:	d121      	bne.n	80019c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	2b03      	cmp	r3, #3
 8001984:	d837      	bhi.n	80019f6 <DMA_CheckFifoParam+0xda>
 8001986:	a201      	add	r2, pc, #4	@ (adr r2, 800198c <DMA_CheckFifoParam+0x70>)
 8001988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800198c:	0800199d 	.word	0x0800199d
 8001990:	080019a3 	.word	0x080019a3
 8001994:	0800199d 	.word	0x0800199d
 8001998:	080019b5 	.word	0x080019b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	73fb      	strb	r3, [r7, #15]
      break;
 80019a0:	e030      	b.n	8001a04 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d025      	beq.n	80019fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019b2:	e022      	b.n	80019fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80019bc:	d11f      	bne.n	80019fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019c2:	e01c      	b.n	80019fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d903      	bls.n	80019d2 <DMA_CheckFifoParam+0xb6>
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	d003      	beq.n	80019d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80019d0:	e018      	b.n	8001a04 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	73fb      	strb	r3, [r7, #15]
      break;
 80019d6:	e015      	b.n	8001a04 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d00e      	beq.n	8001a02 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	73fb      	strb	r3, [r7, #15]
      break;
 80019e8:	e00b      	b.n	8001a02 <DMA_CheckFifoParam+0xe6>
      break;
 80019ea:	bf00      	nop
 80019ec:	e00a      	b.n	8001a04 <DMA_CheckFifoParam+0xe8>
      break;
 80019ee:	bf00      	nop
 80019f0:	e008      	b.n	8001a04 <DMA_CheckFifoParam+0xe8>
      break;
 80019f2:	bf00      	nop
 80019f4:	e006      	b.n	8001a04 <DMA_CheckFifoParam+0xe8>
      break;
 80019f6:	bf00      	nop
 80019f8:	e004      	b.n	8001a04 <DMA_CheckFifoParam+0xe8>
      break;
 80019fa:	bf00      	nop
 80019fc:	e002      	b.n	8001a04 <DMA_CheckFifoParam+0xe8>
      break;   
 80019fe:	bf00      	nop
 8001a00:	e000      	b.n	8001a04 <DMA_CheckFifoParam+0xe8>
      break;
 8001a02:	bf00      	nop
    }
  } 
  
  return status; 
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop

08001a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b089      	sub	sp, #36	@ 0x24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
 8001a32:	e175      	b.n	8001d20 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a34:	2201      	movs	r2, #1
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	f040 8164 	bne.w	8001d1a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d005      	beq.n	8001a6a <HAL_GPIO_Init+0x56>
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d130      	bne.n	8001acc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	2203      	movs	r2, #3
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	091b      	lsrs	r3, r3, #4
 8001ab6:	f003 0201 	and.w	r2, r3, #1
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	2b03      	cmp	r3, #3
 8001ad6:	d017      	beq.n	8001b08 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d123      	bne.n	8001b5c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	08da      	lsrs	r2, r3, #3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3208      	adds	r2, #8
 8001b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	220f      	movs	r2, #15
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	691a      	ldr	r2, [r3, #16]
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	08da      	lsrs	r2, r3, #3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3208      	adds	r2, #8
 8001b56:	69b9      	ldr	r1, [r7, #24]
 8001b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	2203      	movs	r2, #3
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 0203 	and.w	r2, r3, #3
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 80be 	beq.w	8001d1a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9e:	4b66      	ldr	r3, [pc, #408]	@ (8001d38 <HAL_GPIO_Init+0x324>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba2:	4a65      	ldr	r2, [pc, #404]	@ (8001d38 <HAL_GPIO_Init+0x324>)
 8001ba4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ba8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001baa:	4b63      	ldr	r3, [pc, #396]	@ (8001d38 <HAL_GPIO_Init+0x324>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001bb6:	4a61      	ldr	r2, [pc, #388]	@ (8001d3c <HAL_GPIO_Init+0x328>)
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	089b      	lsrs	r3, r3, #2
 8001bbc:	3302      	adds	r3, #2
 8001bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	220f      	movs	r2, #15
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a58      	ldr	r2, [pc, #352]	@ (8001d40 <HAL_GPIO_Init+0x32c>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d037      	beq.n	8001c52 <HAL_GPIO_Init+0x23e>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a57      	ldr	r2, [pc, #348]	@ (8001d44 <HAL_GPIO_Init+0x330>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d031      	beq.n	8001c4e <HAL_GPIO_Init+0x23a>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a56      	ldr	r2, [pc, #344]	@ (8001d48 <HAL_GPIO_Init+0x334>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d02b      	beq.n	8001c4a <HAL_GPIO_Init+0x236>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a55      	ldr	r2, [pc, #340]	@ (8001d4c <HAL_GPIO_Init+0x338>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d025      	beq.n	8001c46 <HAL_GPIO_Init+0x232>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a54      	ldr	r2, [pc, #336]	@ (8001d50 <HAL_GPIO_Init+0x33c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d01f      	beq.n	8001c42 <HAL_GPIO_Init+0x22e>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a53      	ldr	r2, [pc, #332]	@ (8001d54 <HAL_GPIO_Init+0x340>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d019      	beq.n	8001c3e <HAL_GPIO_Init+0x22a>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a52      	ldr	r2, [pc, #328]	@ (8001d58 <HAL_GPIO_Init+0x344>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d013      	beq.n	8001c3a <HAL_GPIO_Init+0x226>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a51      	ldr	r2, [pc, #324]	@ (8001d5c <HAL_GPIO_Init+0x348>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d00d      	beq.n	8001c36 <HAL_GPIO_Init+0x222>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a50      	ldr	r2, [pc, #320]	@ (8001d60 <HAL_GPIO_Init+0x34c>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d007      	beq.n	8001c32 <HAL_GPIO_Init+0x21e>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a4f      	ldr	r2, [pc, #316]	@ (8001d64 <HAL_GPIO_Init+0x350>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d101      	bne.n	8001c2e <HAL_GPIO_Init+0x21a>
 8001c2a:	2309      	movs	r3, #9
 8001c2c:	e012      	b.n	8001c54 <HAL_GPIO_Init+0x240>
 8001c2e:	230a      	movs	r3, #10
 8001c30:	e010      	b.n	8001c54 <HAL_GPIO_Init+0x240>
 8001c32:	2308      	movs	r3, #8
 8001c34:	e00e      	b.n	8001c54 <HAL_GPIO_Init+0x240>
 8001c36:	2307      	movs	r3, #7
 8001c38:	e00c      	b.n	8001c54 <HAL_GPIO_Init+0x240>
 8001c3a:	2306      	movs	r3, #6
 8001c3c:	e00a      	b.n	8001c54 <HAL_GPIO_Init+0x240>
 8001c3e:	2305      	movs	r3, #5
 8001c40:	e008      	b.n	8001c54 <HAL_GPIO_Init+0x240>
 8001c42:	2304      	movs	r3, #4
 8001c44:	e006      	b.n	8001c54 <HAL_GPIO_Init+0x240>
 8001c46:	2303      	movs	r3, #3
 8001c48:	e004      	b.n	8001c54 <HAL_GPIO_Init+0x240>
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e002      	b.n	8001c54 <HAL_GPIO_Init+0x240>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e000      	b.n	8001c54 <HAL_GPIO_Init+0x240>
 8001c52:	2300      	movs	r3, #0
 8001c54:	69fa      	ldr	r2, [r7, #28]
 8001c56:	f002 0203 	and.w	r2, r2, #3
 8001c5a:	0092      	lsls	r2, r2, #2
 8001c5c:	4093      	lsls	r3, r2
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c64:	4935      	ldr	r1, [pc, #212]	@ (8001d3c <HAL_GPIO_Init+0x328>)
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	089b      	lsrs	r3, r3, #2
 8001c6a:	3302      	adds	r3, #2
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c72:	4b3d      	ldr	r3, [pc, #244]	@ (8001d68 <HAL_GPIO_Init+0x354>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c96:	4a34      	ldr	r2, [pc, #208]	@ (8001d68 <HAL_GPIO_Init+0x354>)
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c9c:	4b32      	ldr	r3, [pc, #200]	@ (8001d68 <HAL_GPIO_Init+0x354>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cc0:	4a29      	ldr	r2, [pc, #164]	@ (8001d68 <HAL_GPIO_Init+0x354>)
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cc6:	4b28      	ldr	r3, [pc, #160]	@ (8001d68 <HAL_GPIO_Init+0x354>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cea:	4a1f      	ldr	r2, [pc, #124]	@ (8001d68 <HAL_GPIO_Init+0x354>)
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d68 <HAL_GPIO_Init+0x354>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d14:	4a14      	ldr	r2, [pc, #80]	@ (8001d68 <HAL_GPIO_Init+0x354>)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	61fb      	str	r3, [r7, #28]
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	2b0f      	cmp	r3, #15
 8001d24:	f67f ae86 	bls.w	8001a34 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d28:	bf00      	nop
 8001d2a:	bf00      	nop
 8001d2c:	3724      	adds	r7, #36	@ 0x24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40013800 	.word	0x40013800
 8001d40:	40020000 	.word	0x40020000
 8001d44:	40020400 	.word	0x40020400
 8001d48:	40020800 	.word	0x40020800
 8001d4c:	40020c00 	.word	0x40020c00
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40021400 	.word	0x40021400
 8001d58:	40021800 	.word	0x40021800
 8001d5c:	40021c00 	.word	0x40021c00
 8001d60:	40022000 	.word	0x40022000
 8001d64:	40022400 	.word	0x40022400
 8001d68:	40013c00 	.word	0x40013c00

08001d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	807b      	strh	r3, [r7, #2]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d7c:	787b      	ldrb	r3, [r7, #1]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d82:	887a      	ldrh	r2, [r7, #2]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d88:	e003      	b.n	8001d92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d8a:	887b      	ldrh	r3, [r7, #2]
 8001d8c:	041a      	lsls	r2, r3, #16
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	619a      	str	r2, [r3, #24]
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b085      	sub	sp, #20
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	460b      	mov	r3, r1
 8001da8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001db0:	887a      	ldrh	r2, [r7, #2]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4013      	ands	r3, r2
 8001db6:	041a      	lsls	r2, r3, #16
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	43d9      	mvns	r1, r3
 8001dbc:	887b      	ldrh	r3, [r7, #2]
 8001dbe:	400b      	ands	r3, r1
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	619a      	str	r2, [r3, #24]
}
 8001dc6:	bf00      	nop
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e29b      	b.n	8002322 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 8087 	beq.w	8001f06 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001df8:	4b96      	ldr	r3, [pc, #600]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 030c 	and.w	r3, r3, #12
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d00c      	beq.n	8001e1e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e04:	4b93      	ldr	r3, [pc, #588]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 030c 	and.w	r3, r3, #12
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	d112      	bne.n	8001e36 <HAL_RCC_OscConfig+0x62>
 8001e10:	4b90      	ldr	r3, [pc, #576]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e1c:	d10b      	bne.n	8001e36 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e1e:	4b8d      	ldr	r3, [pc, #564]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d06c      	beq.n	8001f04 <HAL_RCC_OscConfig+0x130>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d168      	bne.n	8001f04 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e275      	b.n	8002322 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e3e:	d106      	bne.n	8001e4e <HAL_RCC_OscConfig+0x7a>
 8001e40:	4b84      	ldr	r3, [pc, #528]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a83      	ldr	r2, [pc, #524]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8001e46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	e02e      	b.n	8001eac <HAL_RCC_OscConfig+0xd8>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10c      	bne.n	8001e70 <HAL_RCC_OscConfig+0x9c>
 8001e56:	4b7f      	ldr	r3, [pc, #508]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a7e      	ldr	r2, [pc, #504]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8001e5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	4b7c      	ldr	r3, [pc, #496]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a7b      	ldr	r2, [pc, #492]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8001e68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	e01d      	b.n	8001eac <HAL_RCC_OscConfig+0xd8>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e78:	d10c      	bne.n	8001e94 <HAL_RCC_OscConfig+0xc0>
 8001e7a:	4b76      	ldr	r3, [pc, #472]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a75      	ldr	r2, [pc, #468]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8001e80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	4b73      	ldr	r3, [pc, #460]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a72      	ldr	r2, [pc, #456]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8001e8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	e00b      	b.n	8001eac <HAL_RCC_OscConfig+0xd8>
 8001e94:	4b6f      	ldr	r3, [pc, #444]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a6e      	ldr	r2, [pc, #440]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8001e9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	4b6c      	ldr	r3, [pc, #432]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a6b      	ldr	r2, [pc, #428]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8001ea6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d013      	beq.n	8001edc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb4:	f7fe ffea 	bl	8000e8c <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ebc:	f7fe ffe6 	bl	8000e8c <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b64      	cmp	r3, #100	@ 0x64
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e229      	b.n	8002322 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ece:	4b61      	ldr	r3, [pc, #388]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0f0      	beq.n	8001ebc <HAL_RCC_OscConfig+0xe8>
 8001eda:	e014      	b.n	8001f06 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001edc:	f7fe ffd6 	bl	8000e8c <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee4:	f7fe ffd2 	bl	8000e8c <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b64      	cmp	r3, #100	@ 0x64
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e215      	b.n	8002322 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef6:	4b57      	ldr	r3, [pc, #348]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x110>
 8001f02:	e000      	b.n	8001f06 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d069      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f12:	4b50      	ldr	r3, [pc, #320]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 030c 	and.w	r3, r3, #12
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00b      	beq.n	8001f36 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f1e:	4b4d      	ldr	r3, [pc, #308]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 030c 	and.w	r3, r3, #12
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d11c      	bne.n	8001f64 <HAL_RCC_OscConfig+0x190>
 8001f2a:	4b4a      	ldr	r3, [pc, #296]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d116      	bne.n	8001f64 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f36:	4b47      	ldr	r3, [pc, #284]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d005      	beq.n	8001f4e <HAL_RCC_OscConfig+0x17a>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d001      	beq.n	8001f4e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e1e9      	b.n	8002322 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4e:	4b41      	ldr	r3, [pc, #260]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	493d      	ldr	r1, [pc, #244]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f62:	e040      	b.n	8001fe6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d023      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f6c:	4b39      	ldr	r3, [pc, #228]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a38      	ldr	r2, [pc, #224]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f78:	f7fe ff88 	bl	8000e8c <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f80:	f7fe ff84 	bl	8000e8c <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e1c7      	b.n	8002322 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f92:	4b30      	ldr	r3, [pc, #192]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0f0      	beq.n	8001f80 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f9e:	4b2d      	ldr	r3, [pc, #180]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	4929      	ldr	r1, [pc, #164]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]
 8001fb2:	e018      	b.n	8001fe6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fb4:	4b27      	ldr	r3, [pc, #156]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a26      	ldr	r2, [pc, #152]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8001fba:	f023 0301 	bic.w	r3, r3, #1
 8001fbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc0:	f7fe ff64 	bl	8000e8c <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc8:	f7fe ff60 	bl	8000e8c <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e1a3      	b.n	8002322 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fda:	4b1e      	ldr	r3, [pc, #120]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d038      	beq.n	8002064 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d019      	beq.n	800202e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ffa:	4b16      	ldr	r3, [pc, #88]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8001ffc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ffe:	4a15      	ldr	r2, [pc, #84]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002006:	f7fe ff41 	bl	8000e8c <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800200e:	f7fe ff3d 	bl	8000e8c <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e180      	b.n	8002322 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002020:	4b0c      	ldr	r3, [pc, #48]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8002022:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0f0      	beq.n	800200e <HAL_RCC_OscConfig+0x23a>
 800202c:	e01a      	b.n	8002064 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800202e:	4b09      	ldr	r3, [pc, #36]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8002030:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002032:	4a08      	ldr	r2, [pc, #32]	@ (8002054 <HAL_RCC_OscConfig+0x280>)
 8002034:	f023 0301 	bic.w	r3, r3, #1
 8002038:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800203a:	f7fe ff27 	bl	8000e8c <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002040:	e00a      	b.n	8002058 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002042:	f7fe ff23 	bl	8000e8c <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d903      	bls.n	8002058 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e166      	b.n	8002322 <HAL_RCC_OscConfig+0x54e>
 8002054:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002058:	4b92      	ldr	r3, [pc, #584]	@ (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 800205a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1ee      	bne.n	8002042 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 80a4 	beq.w	80021ba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002072:	4b8c      	ldr	r3, [pc, #560]	@ (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10d      	bne.n	800209a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800207e:	4b89      	ldr	r3, [pc, #548]	@ (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002082:	4a88      	ldr	r2, [pc, #544]	@ (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 8002084:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002088:	6413      	str	r3, [r2, #64]	@ 0x40
 800208a:	4b86      	ldr	r3, [pc, #536]	@ (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002096:	2301      	movs	r3, #1
 8002098:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800209a:	4b83      	ldr	r3, [pc, #524]	@ (80022a8 <HAL_RCC_OscConfig+0x4d4>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d118      	bne.n	80020d8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80020a6:	4b80      	ldr	r3, [pc, #512]	@ (80022a8 <HAL_RCC_OscConfig+0x4d4>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a7f      	ldr	r2, [pc, #508]	@ (80022a8 <HAL_RCC_OscConfig+0x4d4>)
 80020ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b2:	f7fe feeb 	bl	8000e8c <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ba:	f7fe fee7 	bl	8000e8c <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b64      	cmp	r3, #100	@ 0x64
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e12a      	b.n	8002322 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020cc:	4b76      	ldr	r3, [pc, #472]	@ (80022a8 <HAL_RCC_OscConfig+0x4d4>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0f0      	beq.n	80020ba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d106      	bne.n	80020ee <HAL_RCC_OscConfig+0x31a>
 80020e0:	4b70      	ldr	r3, [pc, #448]	@ (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 80020e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020e4:	4a6f      	ldr	r2, [pc, #444]	@ (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80020ec:	e02d      	b.n	800214a <HAL_RCC_OscConfig+0x376>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10c      	bne.n	8002110 <HAL_RCC_OscConfig+0x33c>
 80020f6:	4b6b      	ldr	r3, [pc, #428]	@ (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 80020f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020fa:	4a6a      	ldr	r2, [pc, #424]	@ (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 80020fc:	f023 0301 	bic.w	r3, r3, #1
 8002100:	6713      	str	r3, [r2, #112]	@ 0x70
 8002102:	4b68      	ldr	r3, [pc, #416]	@ (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 8002104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002106:	4a67      	ldr	r2, [pc, #412]	@ (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 8002108:	f023 0304 	bic.w	r3, r3, #4
 800210c:	6713      	str	r3, [r2, #112]	@ 0x70
 800210e:	e01c      	b.n	800214a <HAL_RCC_OscConfig+0x376>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b05      	cmp	r3, #5
 8002116:	d10c      	bne.n	8002132 <HAL_RCC_OscConfig+0x35e>
 8002118:	4b62      	ldr	r3, [pc, #392]	@ (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 800211a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800211c:	4a61      	ldr	r2, [pc, #388]	@ (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 800211e:	f043 0304 	orr.w	r3, r3, #4
 8002122:	6713      	str	r3, [r2, #112]	@ 0x70
 8002124:	4b5f      	ldr	r3, [pc, #380]	@ (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 8002126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002128:	4a5e      	ldr	r2, [pc, #376]	@ (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002130:	e00b      	b.n	800214a <HAL_RCC_OscConfig+0x376>
 8002132:	4b5c      	ldr	r3, [pc, #368]	@ (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 8002134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002136:	4a5b      	ldr	r2, [pc, #364]	@ (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 8002138:	f023 0301 	bic.w	r3, r3, #1
 800213c:	6713      	str	r3, [r2, #112]	@ 0x70
 800213e:	4b59      	ldr	r3, [pc, #356]	@ (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 8002140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002142:	4a58      	ldr	r2, [pc, #352]	@ (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 8002144:	f023 0304 	bic.w	r3, r3, #4
 8002148:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d015      	beq.n	800217e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002152:	f7fe fe9b 	bl	8000e8c <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002158:	e00a      	b.n	8002170 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215a:	f7fe fe97 	bl	8000e8c <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002168:	4293      	cmp	r3, r2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e0d8      	b.n	8002322 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002170:	4b4c      	ldr	r3, [pc, #304]	@ (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 8002172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0ee      	beq.n	800215a <HAL_RCC_OscConfig+0x386>
 800217c:	e014      	b.n	80021a8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217e:	f7fe fe85 	bl	8000e8c <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002184:	e00a      	b.n	800219c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002186:	f7fe fe81 	bl	8000e8c <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002194:	4293      	cmp	r3, r2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e0c2      	b.n	8002322 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800219c:	4b41      	ldr	r3, [pc, #260]	@ (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 800219e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1ee      	bne.n	8002186 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021a8:	7dfb      	ldrb	r3, [r7, #23]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d105      	bne.n	80021ba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ae:	4b3d      	ldr	r3, [pc, #244]	@ (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b2:	4a3c      	ldr	r2, [pc, #240]	@ (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 80021b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021b8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 80ae 	beq.w	8002320 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021c4:	4b37      	ldr	r3, [pc, #220]	@ (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 030c 	and.w	r3, r3, #12
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d06d      	beq.n	80022ac <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d14b      	bne.n	8002270 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d8:	4b32      	ldr	r3, [pc, #200]	@ (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a31      	ldr	r2, [pc, #196]	@ (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 80021de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e4:	f7fe fe52 	bl	8000e8c <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ec:	f7fe fe4e 	bl	8000e8c <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e091      	b.n	8002322 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fe:	4b29      	ldr	r3, [pc, #164]	@ (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69da      	ldr	r2, [r3, #28]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002218:	019b      	lsls	r3, r3, #6
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002220:	085b      	lsrs	r3, r3, #1
 8002222:	3b01      	subs	r3, #1
 8002224:	041b      	lsls	r3, r3, #16
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222c:	061b      	lsls	r3, r3, #24
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002234:	071b      	lsls	r3, r3, #28
 8002236:	491b      	ldr	r1, [pc, #108]	@ (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 8002238:	4313      	orrs	r3, r2
 800223a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800223c:	4b19      	ldr	r3, [pc, #100]	@ (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a18      	ldr	r2, [pc, #96]	@ (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 8002242:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002246:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002248:	f7fe fe20 	bl	8000e8c <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002250:	f7fe fe1c 	bl	8000e8c <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e05f      	b.n	8002322 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002262:	4b10      	ldr	r3, [pc, #64]	@ (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f0      	beq.n	8002250 <HAL_RCC_OscConfig+0x47c>
 800226e:	e057      	b.n	8002320 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002270:	4b0c      	ldr	r3, [pc, #48]	@ (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a0b      	ldr	r2, [pc, #44]	@ (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 8002276:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800227a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227c:	f7fe fe06 	bl	8000e8c <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002284:	f7fe fe02 	bl	8000e8c <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e045      	b.n	8002322 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002296:	4b03      	ldr	r3, [pc, #12]	@ (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x4b0>
 80022a2:	e03d      	b.n	8002320 <HAL_RCC_OscConfig+0x54c>
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80022ac:	4b1f      	ldr	r3, [pc, #124]	@ (800232c <HAL_RCC_OscConfig+0x558>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d030      	beq.n	800231c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d129      	bne.n	800231c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d122      	bne.n	800231c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80022dc:	4013      	ands	r3, r2
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80022e2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d119      	bne.n	800231c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f2:	085b      	lsrs	r3, r3, #1
 80022f4:	3b01      	subs	r3, #1
 80022f6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d10f      	bne.n	800231c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002306:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002308:	429a      	cmp	r2, r3
 800230a:	d107      	bne.n	800231c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002316:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002318:	429a      	cmp	r2, r3
 800231a:	d001      	beq.n	8002320 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e000      	b.n	8002322 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40023800 	.word	0x40023800

08002330 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e0d0      	b.n	80024ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002348:	4b6a      	ldr	r3, [pc, #424]	@ (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 030f 	and.w	r3, r3, #15
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d910      	bls.n	8002378 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002356:	4b67      	ldr	r3, [pc, #412]	@ (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f023 020f 	bic.w	r2, r3, #15
 800235e:	4965      	ldr	r1, [pc, #404]	@ (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	4313      	orrs	r3, r2
 8002364:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002366:	4b63      	ldr	r3, [pc, #396]	@ (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d001      	beq.n	8002378 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0b8      	b.n	80024ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d020      	beq.n	80023c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002390:	4b59      	ldr	r3, [pc, #356]	@ (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	4a58      	ldr	r2, [pc, #352]	@ (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002396:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800239a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023a8:	4b53      	ldr	r3, [pc, #332]	@ (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	4a52      	ldr	r2, [pc, #328]	@ (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 80023ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b4:	4b50      	ldr	r3, [pc, #320]	@ (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	494d      	ldr	r1, [pc, #308]	@ (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d040      	beq.n	8002454 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d107      	bne.n	80023ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023da:	4b47      	ldr	r3, [pc, #284]	@ (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d115      	bne.n	8002412 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e07f      	b.n	80024ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d107      	bne.n	8002402 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f2:	4b41      	ldr	r3, [pc, #260]	@ (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d109      	bne.n	8002412 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e073      	b.n	80024ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002402:	4b3d      	ldr	r3, [pc, #244]	@ (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e06b      	b.n	80024ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002412:	4b39      	ldr	r3, [pc, #228]	@ (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f023 0203 	bic.w	r2, r3, #3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	4936      	ldr	r1, [pc, #216]	@ (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002420:	4313      	orrs	r3, r2
 8002422:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002424:	f7fe fd32 	bl	8000e8c <HAL_GetTick>
 8002428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242a:	e00a      	b.n	8002442 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800242c:	f7fe fd2e 	bl	8000e8c <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800243a:	4293      	cmp	r3, r2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e053      	b.n	80024ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002442:	4b2d      	ldr	r3, [pc, #180]	@ (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 020c 	and.w	r2, r3, #12
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	429a      	cmp	r2, r3
 8002452:	d1eb      	bne.n	800242c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002454:	4b27      	ldr	r3, [pc, #156]	@ (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 030f 	and.w	r3, r3, #15
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d210      	bcs.n	8002484 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002462:	4b24      	ldr	r3, [pc, #144]	@ (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f023 020f 	bic.w	r2, r3, #15
 800246a:	4922      	ldr	r1, [pc, #136]	@ (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	4313      	orrs	r3, r2
 8002470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002472:	4b20      	ldr	r3, [pc, #128]	@ (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	429a      	cmp	r2, r3
 800247e:	d001      	beq.n	8002484 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e032      	b.n	80024ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	2b00      	cmp	r3, #0
 800248e:	d008      	beq.n	80024a2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002490:	4b19      	ldr	r3, [pc, #100]	@ (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	4916      	ldr	r1, [pc, #88]	@ (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0308 	and.w	r3, r3, #8
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d009      	beq.n	80024c2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024ae:	4b12      	ldr	r3, [pc, #72]	@ (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	490e      	ldr	r1, [pc, #56]	@ (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024c2:	f000 f821 	bl	8002508 <HAL_RCC_GetSysClockFreq>
 80024c6:	4602      	mov	r2, r0
 80024c8:	4b0b      	ldr	r3, [pc, #44]	@ (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	091b      	lsrs	r3, r3, #4
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	490a      	ldr	r1, [pc, #40]	@ (80024fc <HAL_RCC_ClockConfig+0x1cc>)
 80024d4:	5ccb      	ldrb	r3, [r1, r3]
 80024d6:	fa22 f303 	lsr.w	r3, r2, r3
 80024da:	4a09      	ldr	r2, [pc, #36]	@ (8002500 <HAL_RCC_ClockConfig+0x1d0>)
 80024dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024de:	4b09      	ldr	r3, [pc, #36]	@ (8002504 <HAL_RCC_ClockConfig+0x1d4>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fe fc8e 	bl	8000e04 <HAL_InitTick>

  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40023c00 	.word	0x40023c00
 80024f8:	40023800 	.word	0x40023800
 80024fc:	080052cc 	.word	0x080052cc
 8002500:	20000004 	.word	0x20000004
 8002504:	20000008 	.word	0x20000008

08002508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800250c:	b090      	sub	sp, #64	@ 0x40
 800250e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	637b      	str	r3, [r7, #52]	@ 0x34
 8002514:	2300      	movs	r3, #0
 8002516:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002518:	2300      	movs	r3, #0
 800251a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800251c:	2300      	movs	r3, #0
 800251e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002520:	4b59      	ldr	r3, [pc, #356]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x180>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 030c 	and.w	r3, r3, #12
 8002528:	2b08      	cmp	r3, #8
 800252a:	d00d      	beq.n	8002548 <HAL_RCC_GetSysClockFreq+0x40>
 800252c:	2b08      	cmp	r3, #8
 800252e:	f200 80a1 	bhi.w	8002674 <HAL_RCC_GetSysClockFreq+0x16c>
 8002532:	2b00      	cmp	r3, #0
 8002534:	d002      	beq.n	800253c <HAL_RCC_GetSysClockFreq+0x34>
 8002536:	2b04      	cmp	r3, #4
 8002538:	d003      	beq.n	8002542 <HAL_RCC_GetSysClockFreq+0x3a>
 800253a:	e09b      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800253c:	4b53      	ldr	r3, [pc, #332]	@ (800268c <HAL_RCC_GetSysClockFreq+0x184>)
 800253e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002540:	e09b      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002542:	4b53      	ldr	r3, [pc, #332]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x188>)
 8002544:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002546:	e098      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002548:	4b4f      	ldr	r3, [pc, #316]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x180>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002550:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002552:	4b4d      	ldr	r3, [pc, #308]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x180>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d028      	beq.n	80025b0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800255e:	4b4a      	ldr	r3, [pc, #296]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x180>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	099b      	lsrs	r3, r3, #6
 8002564:	2200      	movs	r2, #0
 8002566:	623b      	str	r3, [r7, #32]
 8002568:	627a      	str	r2, [r7, #36]	@ 0x24
 800256a:	6a3b      	ldr	r3, [r7, #32]
 800256c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002570:	2100      	movs	r1, #0
 8002572:	4b47      	ldr	r3, [pc, #284]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x188>)
 8002574:	fb03 f201 	mul.w	r2, r3, r1
 8002578:	2300      	movs	r3, #0
 800257a:	fb00 f303 	mul.w	r3, r0, r3
 800257e:	4413      	add	r3, r2
 8002580:	4a43      	ldr	r2, [pc, #268]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x188>)
 8002582:	fba0 1202 	umull	r1, r2, r0, r2
 8002586:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002588:	460a      	mov	r2, r1
 800258a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800258c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800258e:	4413      	add	r3, r2
 8002590:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002594:	2200      	movs	r2, #0
 8002596:	61bb      	str	r3, [r7, #24]
 8002598:	61fa      	str	r2, [r7, #28]
 800259a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800259e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80025a2:	f7fd fe49 	bl	8000238 <__aeabi_uldivmod>
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	4613      	mov	r3, r2
 80025ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025ae:	e053      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025b0:	4b35      	ldr	r3, [pc, #212]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x180>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	099b      	lsrs	r3, r3, #6
 80025b6:	2200      	movs	r2, #0
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	617a      	str	r2, [r7, #20]
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80025c2:	f04f 0b00 	mov.w	fp, #0
 80025c6:	4652      	mov	r2, sl
 80025c8:	465b      	mov	r3, fp
 80025ca:	f04f 0000 	mov.w	r0, #0
 80025ce:	f04f 0100 	mov.w	r1, #0
 80025d2:	0159      	lsls	r1, r3, #5
 80025d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025d8:	0150      	lsls	r0, r2, #5
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	ebb2 080a 	subs.w	r8, r2, sl
 80025e2:	eb63 090b 	sbc.w	r9, r3, fp
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	f04f 0300 	mov.w	r3, #0
 80025ee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80025f2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80025f6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80025fa:	ebb2 0408 	subs.w	r4, r2, r8
 80025fe:	eb63 0509 	sbc.w	r5, r3, r9
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	00eb      	lsls	r3, r5, #3
 800260c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002610:	00e2      	lsls	r2, r4, #3
 8002612:	4614      	mov	r4, r2
 8002614:	461d      	mov	r5, r3
 8002616:	eb14 030a 	adds.w	r3, r4, sl
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	eb45 030b 	adc.w	r3, r5, fp
 8002620:	607b      	str	r3, [r7, #4]
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	f04f 0300 	mov.w	r3, #0
 800262a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800262e:	4629      	mov	r1, r5
 8002630:	028b      	lsls	r3, r1, #10
 8002632:	4621      	mov	r1, r4
 8002634:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002638:	4621      	mov	r1, r4
 800263a:	028a      	lsls	r2, r1, #10
 800263c:	4610      	mov	r0, r2
 800263e:	4619      	mov	r1, r3
 8002640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002642:	2200      	movs	r2, #0
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	60fa      	str	r2, [r7, #12]
 8002648:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800264c:	f7fd fdf4 	bl	8000238 <__aeabi_uldivmod>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4613      	mov	r3, r2
 8002656:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002658:	4b0b      	ldr	r3, [pc, #44]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x180>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	0c1b      	lsrs	r3, r3, #16
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	3301      	adds	r3, #1
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002668:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800266a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800266c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002670:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002672:	e002      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002674:	4b05      	ldr	r3, [pc, #20]	@ (800268c <HAL_RCC_GetSysClockFreq+0x184>)
 8002676:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800267a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800267c:	4618      	mov	r0, r3
 800267e:	3740      	adds	r7, #64	@ 0x40
 8002680:	46bd      	mov	sp, r7
 8002682:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002686:	bf00      	nop
 8002688:	40023800 	.word	0x40023800
 800268c:	00f42400 	.word	0x00f42400
 8002690:	017d7840 	.word	0x017d7840

08002694 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002698:	4b03      	ldr	r3, [pc, #12]	@ (80026a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800269a:	681b      	ldr	r3, [r3, #0]
}
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	20000004 	.word	0x20000004

080026ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026b0:	f7ff fff0 	bl	8002694 <HAL_RCC_GetHCLKFreq>
 80026b4:	4602      	mov	r2, r0
 80026b6:	4b05      	ldr	r3, [pc, #20]	@ (80026cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	0a9b      	lsrs	r3, r3, #10
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	4903      	ldr	r1, [pc, #12]	@ (80026d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026c2:	5ccb      	ldrb	r3, [r1, r3]
 80026c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40023800 	.word	0x40023800
 80026d0:	080052dc 	.word	0x080052dc

080026d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026d8:	f7ff ffdc 	bl	8002694 <HAL_RCC_GetHCLKFreq>
 80026dc:	4602      	mov	r2, r0
 80026de:	4b05      	ldr	r3, [pc, #20]	@ (80026f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	0b5b      	lsrs	r3, r3, #13
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	4903      	ldr	r1, [pc, #12]	@ (80026f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026ea:	5ccb      	ldrb	r3, [r1, r3]
 80026ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40023800 	.word	0x40023800
 80026f8:	080052dc 	.word	0x080052dc

080026fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b088      	sub	sp, #32
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002708:	2300      	movs	r3, #0
 800270a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800270c:	2300      	movs	r3, #0
 800270e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002714:	2300      	movs	r3, #0
 8002716:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b00      	cmp	r3, #0
 8002722:	d012      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002724:	4b69      	ldr	r3, [pc, #420]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	4a68      	ldr	r2, [pc, #416]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800272a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800272e:	6093      	str	r3, [r2, #8]
 8002730:	4b66      	ldr	r3, [pc, #408]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002738:	4964      	ldr	r1, [pc, #400]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800273a:	4313      	orrs	r3, r2
 800273c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002746:	2301      	movs	r3, #1
 8002748:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d017      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002756:	4b5d      	ldr	r3, [pc, #372]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002758:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800275c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002764:	4959      	ldr	r1, [pc, #356]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002766:	4313      	orrs	r3, r2
 8002768:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002770:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002774:	d101      	bne.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002776:	2301      	movs	r3, #1
 8002778:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002782:	2301      	movs	r3, #1
 8002784:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d017      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002792:	4b4e      	ldr	r3, [pc, #312]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002794:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002798:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a0:	494a      	ldr	r1, [pc, #296]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027b0:	d101      	bne.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80027b2:	2301      	movs	r3, #1
 80027b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80027be:	2301      	movs	r3, #1
 80027c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80027ce:	2301      	movs	r3, #1
 80027d0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0320 	and.w	r3, r3, #32
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 808b 	beq.w	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80027e0:	4b3a      	ldr	r3, [pc, #232]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e4:	4a39      	ldr	r2, [pc, #228]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ec:	4b37      	ldr	r3, [pc, #220]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80027f8:	4b35      	ldr	r3, [pc, #212]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a34      	ldr	r2, [pc, #208]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002802:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002804:	f7fe fb42 	bl	8000e8c <HAL_GetTick>
 8002808:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800280a:	e008      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280c:	f7fe fb3e 	bl	8000e8c <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b64      	cmp	r3, #100	@ 0x64
 8002818:	d901      	bls.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e38f      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800281e:	4b2c      	ldr	r3, [pc, #176]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800282a:	4b28      	ldr	r3, [pc, #160]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800282c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002832:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d035      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	429a      	cmp	r2, r3
 8002846:	d02e      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002848:	4b20      	ldr	r3, [pc, #128]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800284a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002850:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002852:	4b1e      	ldr	r3, [pc, #120]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002856:	4a1d      	ldr	r2, [pc, #116]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800285c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800285e:	4b1b      	ldr	r3, [pc, #108]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002862:	4a1a      	ldr	r2, [pc, #104]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002864:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002868:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800286a:	4a18      	ldr	r2, [pc, #96]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002870:	4b16      	ldr	r3, [pc, #88]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b01      	cmp	r3, #1
 800287a:	d114      	bne.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287c:	f7fe fb06 	bl	8000e8c <HAL_GetTick>
 8002880:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002882:	e00a      	b.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002884:	f7fe fb02 	bl	8000e8c <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002892:	4293      	cmp	r3, r2
 8002894:	d901      	bls.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e351      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800289a:	4b0c      	ldr	r3, [pc, #48]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800289c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0ee      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80028b2:	d111      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80028b4:	4b05      	ldr	r3, [pc, #20]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028c0:	4b04      	ldr	r3, [pc, #16]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80028c2:	400b      	ands	r3, r1
 80028c4:	4901      	ldr	r1, [pc, #4]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	608b      	str	r3, [r1, #8]
 80028ca:	e00b      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40007000 	.word	0x40007000
 80028d4:	0ffffcff 	.word	0x0ffffcff
 80028d8:	4bac      	ldr	r3, [pc, #688]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	4aab      	ldr	r2, [pc, #684]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028de:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80028e2:	6093      	str	r3, [r2, #8]
 80028e4:	4ba9      	ldr	r3, [pc, #676]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028e6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f0:	49a6      	ldr	r1, [pc, #664]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0310 	and.w	r3, r3, #16
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d010      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002902:	4ba2      	ldr	r3, [pc, #648]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002904:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002908:	4aa0      	ldr	r2, [pc, #640]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800290a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800290e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002912:	4b9e      	ldr	r3, [pc, #632]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002914:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800291c:	499b      	ldr	r1, [pc, #620]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800291e:	4313      	orrs	r3, r2
 8002920:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00a      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002930:	4b96      	ldr	r3, [pc, #600]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002936:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800293e:	4993      	ldr	r1, [pc, #588]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002940:	4313      	orrs	r3, r2
 8002942:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00a      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002952:	4b8e      	ldr	r3, [pc, #568]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002954:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002958:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002960:	498a      	ldr	r1, [pc, #552]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002962:	4313      	orrs	r3, r2
 8002964:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00a      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002974:	4b85      	ldr	r3, [pc, #532]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800297a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002982:	4982      	ldr	r1, [pc, #520]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002984:	4313      	orrs	r3, r2
 8002986:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00a      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002996:	4b7d      	ldr	r3, [pc, #500]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002998:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800299c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a4:	4979      	ldr	r1, [pc, #484]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00a      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029b8:	4b74      	ldr	r3, [pc, #464]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029be:	f023 0203 	bic.w	r2, r3, #3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c6:	4971      	ldr	r1, [pc, #452]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00a      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029da:	4b6c      	ldr	r3, [pc, #432]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029e0:	f023 020c 	bic.w	r2, r3, #12
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029e8:	4968      	ldr	r1, [pc, #416]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00a      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029fc:	4b63      	ldr	r3, [pc, #396]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a02:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a0a:	4960      	ldr	r1, [pc, #384]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00a      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a1e:	4b5b      	ldr	r3, [pc, #364]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a24:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a2c:	4957      	ldr	r1, [pc, #348]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00a      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a40:	4b52      	ldr	r3, [pc, #328]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a46:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a4e:	494f      	ldr	r1, [pc, #316]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00a      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002a62:	4b4a      	ldr	r3, [pc, #296]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a68:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a70:	4946      	ldr	r1, [pc, #280]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00a      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002a84:	4b41      	ldr	r3, [pc, #260]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a8a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a92:	493e      	ldr	r1, [pc, #248]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00a      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002aa6:	4b39      	ldr	r3, [pc, #228]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ab4:	4935      	ldr	r1, [pc, #212]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00a      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ac8:	4b30      	ldr	r3, [pc, #192]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ace:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ad6:	492d      	ldr	r1, [pc, #180]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d011      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002aea:	4b28      	ldr	r3, [pc, #160]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002af0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002af8:	4924      	ldr	r1, [pc, #144]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b08:	d101      	bne.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00a      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b2a:	4b18      	ldr	r3, [pc, #96]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b30:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b38:	4914      	ldr	r1, [pc, #80]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00b      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b52:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b5c:	490b      	ldr	r1, [pc, #44]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00f      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002b70:	4b06      	ldr	r3, [pc, #24]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b76:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b80:	4902      	ldr	r1, [pc, #8]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002b88:	e002      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002b8a:	bf00      	nop
 8002b8c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00b      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b9c:	4b8a      	ldr	r3, [pc, #552]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ba2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bac:	4986      	ldr	r1, [pc, #536]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00b      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002bc0:	4b81      	ldr	r3, [pc, #516]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bc6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bd0:	497d      	ldr	r1, [pc, #500]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d006      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 80d6 	beq.w	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002bec:	4b76      	ldr	r3, [pc, #472]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a75      	ldr	r2, [pc, #468]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bf2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002bf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bf8:	f7fe f948 	bl	8000e8c <HAL_GetTick>
 8002bfc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c00:	f7fe f944 	bl	8000e8c <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b64      	cmp	r3, #100	@ 0x64
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e195      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c12:	4b6d      	ldr	r3, [pc, #436]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d021      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d11d      	bne.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c32:	4b65      	ldr	r3, [pc, #404]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c38:	0c1b      	lsrs	r3, r3, #16
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c40:	4b61      	ldr	r3, [pc, #388]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c46:	0e1b      	lsrs	r3, r3, #24
 8002c48:	f003 030f 	and.w	r3, r3, #15
 8002c4c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	019a      	lsls	r2, r3, #6
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	041b      	lsls	r3, r3, #16
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	061b      	lsls	r3, r3, #24
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	071b      	lsls	r3, r3, #28
 8002c66:	4958      	ldr	r1, [pc, #352]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d004      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c82:	d00a      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d02e      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c98:	d129      	bne.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c9a:	4b4b      	ldr	r3, [pc, #300]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ca0:	0c1b      	lsrs	r3, r3, #16
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ca8:	4b47      	ldr	r3, [pc, #284]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cae:	0f1b      	lsrs	r3, r3, #28
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	019a      	lsls	r2, r3, #6
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	041b      	lsls	r3, r3, #16
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	061b      	lsls	r3, r3, #24
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	071b      	lsls	r3, r3, #28
 8002cce:	493e      	ldr	r1, [pc, #248]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002cd6:	4b3c      	ldr	r3, [pc, #240]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cdc:	f023 021f 	bic.w	r2, r3, #31
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	4938      	ldr	r1, [pc, #224]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d01d      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002cfa:	4b33      	ldr	r3, [pc, #204]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d00:	0e1b      	lsrs	r3, r3, #24
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d08:	4b2f      	ldr	r3, [pc, #188]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d0e:	0f1b      	lsrs	r3, r3, #28
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	019a      	lsls	r2, r3, #6
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	041b      	lsls	r3, r3, #16
 8002d22:	431a      	orrs	r2, r3
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	061b      	lsls	r3, r3, #24
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	071b      	lsls	r3, r3, #28
 8002d2e:	4926      	ldr	r1, [pc, #152]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d011      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	019a      	lsls	r2, r3, #6
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	041b      	lsls	r3, r3, #16
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	061b      	lsls	r3, r3, #24
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	071b      	lsls	r3, r3, #28
 8002d5e:	491a      	ldr	r1, [pc, #104]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d66:	4b18      	ldr	r3, [pc, #96]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a17      	ldr	r2, [pc, #92]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d6c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d72:	f7fe f88b 	bl	8000e8c <HAL_GetTick>
 8002d76:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d78:	e008      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d7a:	f7fe f887 	bl	8000e8c <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b64      	cmp	r3, #100	@ 0x64
 8002d86:	d901      	bls.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e0d8      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0f0      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	f040 80ce 	bne.w	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002da0:	4b09      	ldr	r3, [pc, #36]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a08      	ldr	r2, [pc, #32]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002da6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002daa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dac:	f7fe f86e 	bl	8000e8c <HAL_GetTick>
 8002db0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002db2:	e00b      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002db4:	f7fe f86a 	bl	8000e8c <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b64      	cmp	r3, #100	@ 0x64
 8002dc0:	d904      	bls.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e0bb      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002dc6:	bf00      	nop
 8002dc8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002dcc:	4b5e      	ldr	r3, [pc, #376]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002dd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002dd8:	d0ec      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d009      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d02e      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d12a      	bne.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e02:	4b51      	ldr	r3, [pc, #324]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e08:	0c1b      	lsrs	r3, r3, #16
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e10:	4b4d      	ldr	r3, [pc, #308]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e16:	0f1b      	lsrs	r3, r3, #28
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	019a      	lsls	r2, r3, #6
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	041b      	lsls	r3, r3, #16
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	061b      	lsls	r3, r3, #24
 8002e30:	431a      	orrs	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	071b      	lsls	r3, r3, #28
 8002e36:	4944      	ldr	r1, [pc, #272]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002e3e:	4b42      	ldr	r3, [pc, #264]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e44:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	021b      	lsls	r3, r3, #8
 8002e50:	493d      	ldr	r1, [pc, #244]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d022      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e6c:	d11d      	bne.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e6e:	4b36      	ldr	r3, [pc, #216]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e74:	0e1b      	lsrs	r3, r3, #24
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e7c:	4b32      	ldr	r3, [pc, #200]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e82:	0f1b      	lsrs	r3, r3, #28
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	019a      	lsls	r2, r3, #6
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	041b      	lsls	r3, r3, #16
 8002e96:	431a      	orrs	r2, r3
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	061b      	lsls	r3, r3, #24
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	071b      	lsls	r3, r3, #28
 8002ea2:	4929      	ldr	r1, [pc, #164]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d028      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002eb6:	4b24      	ldr	r3, [pc, #144]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ebc:	0e1b      	lsrs	r3, r3, #24
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ec4:	4b20      	ldr	r3, [pc, #128]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eca:	0c1b      	lsrs	r3, r3, #16
 8002ecc:	f003 0303 	and.w	r3, r3, #3
 8002ed0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	019a      	lsls	r2, r3, #6
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	041b      	lsls	r3, r3, #16
 8002edc:	431a      	orrs	r2, r3
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	061b      	lsls	r3, r3, #24
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	071b      	lsls	r3, r3, #28
 8002eea:	4917      	ldr	r1, [pc, #92]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002ef2:	4b15      	ldr	r3, [pc, #84]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ef8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f00:	4911      	ldr	r1, [pc, #68]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002f08:	4b0f      	ldr	r3, [pc, #60]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a0e      	ldr	r2, [pc, #56]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f14:	f7fd ffba 	bl	8000e8c <HAL_GetTick>
 8002f18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f1c:	f7fd ffb6 	bl	8000e8c <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b64      	cmp	r3, #100	@ 0x64
 8002f28:	d901      	bls.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e007      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f2e:	4b06      	ldr	r3, [pc, #24]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f3a:	d1ef      	bne.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3720      	adds	r7, #32
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40023800 	.word	0x40023800

08002f4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e049      	b.n	8002ff2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d106      	bne.n	8002f78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7fd fdcc 	bl	8000b10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3304      	adds	r3, #4
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4610      	mov	r0, r2
 8002f8c:	f000 fcc0 	bl	8003910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b082      	sub	sp, #8
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e049      	b.n	80030a0 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d106      	bne.n	8003026 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 f841 	bl	80030a8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2202      	movs	r2, #2
 800302a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	3304      	adds	r3, #4
 8003036:	4619      	mov	r1, r3
 8003038:	4610      	mov	r0, r2
 800303a:	f000 fc69 	bl	8003910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030c6:	2300      	movs	r3, #0
 80030c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d104      	bne.n	80030da <HAL_TIM_IC_Start_IT+0x1e>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	e023      	b.n	8003122 <HAL_TIM_IC_Start_IT+0x66>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d104      	bne.n	80030ea <HAL_TIM_IC_Start_IT+0x2e>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	e01b      	b.n	8003122 <HAL_TIM_IC_Start_IT+0x66>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d104      	bne.n	80030fa <HAL_TIM_IC_Start_IT+0x3e>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	e013      	b.n	8003122 <HAL_TIM_IC_Start_IT+0x66>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	2b0c      	cmp	r3, #12
 80030fe:	d104      	bne.n	800310a <HAL_TIM_IC_Start_IT+0x4e>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003106:	b2db      	uxtb	r3, r3
 8003108:	e00b      	b.n	8003122 <HAL_TIM_IC_Start_IT+0x66>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b10      	cmp	r3, #16
 800310e:	d104      	bne.n	800311a <HAL_TIM_IC_Start_IT+0x5e>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003116:	b2db      	uxtb	r3, r3
 8003118:	e003      	b.n	8003122 <HAL_TIM_IC_Start_IT+0x66>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003120:	b2db      	uxtb	r3, r3
 8003122:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d104      	bne.n	8003134 <HAL_TIM_IC_Start_IT+0x78>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003130:	b2db      	uxtb	r3, r3
 8003132:	e013      	b.n	800315c <HAL_TIM_IC_Start_IT+0xa0>
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	2b04      	cmp	r3, #4
 8003138:	d104      	bne.n	8003144 <HAL_TIM_IC_Start_IT+0x88>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003140:	b2db      	uxtb	r3, r3
 8003142:	e00b      	b.n	800315c <HAL_TIM_IC_Start_IT+0xa0>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	2b08      	cmp	r3, #8
 8003148:	d104      	bne.n	8003154 <HAL_TIM_IC_Start_IT+0x98>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003150:	b2db      	uxtb	r3, r3
 8003152:	e003      	b.n	800315c <HAL_TIM_IC_Start_IT+0xa0>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800315a:	b2db      	uxtb	r3, r3
 800315c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800315e:	7bbb      	ldrb	r3, [r7, #14]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d102      	bne.n	800316a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003164:	7b7b      	ldrb	r3, [r7, #13]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d001      	beq.n	800316e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e0e2      	b.n	8003334 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d104      	bne.n	800317e <HAL_TIM_IC_Start_IT+0xc2>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2202      	movs	r2, #2
 8003178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800317c:	e023      	b.n	80031c6 <HAL_TIM_IC_Start_IT+0x10a>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	2b04      	cmp	r3, #4
 8003182:	d104      	bne.n	800318e <HAL_TIM_IC_Start_IT+0xd2>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2202      	movs	r2, #2
 8003188:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800318c:	e01b      	b.n	80031c6 <HAL_TIM_IC_Start_IT+0x10a>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b08      	cmp	r3, #8
 8003192:	d104      	bne.n	800319e <HAL_TIM_IC_Start_IT+0xe2>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2202      	movs	r2, #2
 8003198:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800319c:	e013      	b.n	80031c6 <HAL_TIM_IC_Start_IT+0x10a>
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b0c      	cmp	r3, #12
 80031a2:	d104      	bne.n	80031ae <HAL_TIM_IC_Start_IT+0xf2>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2202      	movs	r2, #2
 80031a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80031ac:	e00b      	b.n	80031c6 <HAL_TIM_IC_Start_IT+0x10a>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b10      	cmp	r3, #16
 80031b2:	d104      	bne.n	80031be <HAL_TIM_IC_Start_IT+0x102>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2202      	movs	r2, #2
 80031b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031bc:	e003      	b.n	80031c6 <HAL_TIM_IC_Start_IT+0x10a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2202      	movs	r2, #2
 80031c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d104      	bne.n	80031d6 <HAL_TIM_IC_Start_IT+0x11a>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031d4:	e013      	b.n	80031fe <HAL_TIM_IC_Start_IT+0x142>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d104      	bne.n	80031e6 <HAL_TIM_IC_Start_IT+0x12a>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031e4:	e00b      	b.n	80031fe <HAL_TIM_IC_Start_IT+0x142>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d104      	bne.n	80031f6 <HAL_TIM_IC_Start_IT+0x13a>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80031f4:	e003      	b.n	80031fe <HAL_TIM_IC_Start_IT+0x142>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2202      	movs	r2, #2
 80031fa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2b0c      	cmp	r3, #12
 8003202:	d841      	bhi.n	8003288 <HAL_TIM_IC_Start_IT+0x1cc>
 8003204:	a201      	add	r2, pc, #4	@ (adr r2, 800320c <HAL_TIM_IC_Start_IT+0x150>)
 8003206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320a:	bf00      	nop
 800320c:	08003241 	.word	0x08003241
 8003210:	08003289 	.word	0x08003289
 8003214:	08003289 	.word	0x08003289
 8003218:	08003289 	.word	0x08003289
 800321c:	08003253 	.word	0x08003253
 8003220:	08003289 	.word	0x08003289
 8003224:	08003289 	.word	0x08003289
 8003228:	08003289 	.word	0x08003289
 800322c:	08003265 	.word	0x08003265
 8003230:	08003289 	.word	0x08003289
 8003234:	08003289 	.word	0x08003289
 8003238:	08003289 	.word	0x08003289
 800323c:	08003277 	.word	0x08003277
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0202 	orr.w	r2, r2, #2
 800324e:	60da      	str	r2, [r3, #12]
      break;
 8003250:	e01d      	b.n	800328e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68da      	ldr	r2, [r3, #12]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f042 0204 	orr.w	r2, r2, #4
 8003260:	60da      	str	r2, [r3, #12]
      break;
 8003262:	e014      	b.n	800328e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0208 	orr.w	r2, r2, #8
 8003272:	60da      	str	r2, [r3, #12]
      break;
 8003274:	e00b      	b.n	800328e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68da      	ldr	r2, [r3, #12]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f042 0210 	orr.w	r2, r2, #16
 8003284:	60da      	str	r2, [r3, #12]
      break;
 8003286:	e002      	b.n	800328e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	73fb      	strb	r3, [r7, #15]
      break;
 800328c:	bf00      	nop
  }

  if (status == HAL_OK)
 800328e:	7bfb      	ldrb	r3, [r7, #15]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d14e      	bne.n	8003332 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2201      	movs	r2, #1
 800329a:	6839      	ldr	r1, [r7, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f000 fda7 	bl	8003df0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a25      	ldr	r2, [pc, #148]	@ (800333c <HAL_TIM_IC_Start_IT+0x280>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d022      	beq.n	80032f2 <HAL_TIM_IC_Start_IT+0x236>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032b4:	d01d      	beq.n	80032f2 <HAL_TIM_IC_Start_IT+0x236>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a21      	ldr	r2, [pc, #132]	@ (8003340 <HAL_TIM_IC_Start_IT+0x284>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d018      	beq.n	80032f2 <HAL_TIM_IC_Start_IT+0x236>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a1f      	ldr	r2, [pc, #124]	@ (8003344 <HAL_TIM_IC_Start_IT+0x288>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d013      	beq.n	80032f2 <HAL_TIM_IC_Start_IT+0x236>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a1e      	ldr	r2, [pc, #120]	@ (8003348 <HAL_TIM_IC_Start_IT+0x28c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d00e      	beq.n	80032f2 <HAL_TIM_IC_Start_IT+0x236>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a1c      	ldr	r2, [pc, #112]	@ (800334c <HAL_TIM_IC_Start_IT+0x290>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d009      	beq.n	80032f2 <HAL_TIM_IC_Start_IT+0x236>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a1b      	ldr	r2, [pc, #108]	@ (8003350 <HAL_TIM_IC_Start_IT+0x294>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d004      	beq.n	80032f2 <HAL_TIM_IC_Start_IT+0x236>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a19      	ldr	r2, [pc, #100]	@ (8003354 <HAL_TIM_IC_Start_IT+0x298>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d115      	bne.n	800331e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	4b17      	ldr	r3, [pc, #92]	@ (8003358 <HAL_TIM_IC_Start_IT+0x29c>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b06      	cmp	r3, #6
 8003302:	d015      	beq.n	8003330 <HAL_TIM_IC_Start_IT+0x274>
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800330a:	d011      	beq.n	8003330 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0201 	orr.w	r2, r2, #1
 800331a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800331c:	e008      	b.n	8003330 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f042 0201 	orr.w	r2, r2, #1
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	e000      	b.n	8003332 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003330:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003332:	7bfb      	ldrb	r3, [r7, #15]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40010000 	.word	0x40010000
 8003340:	40000400 	.word	0x40000400
 8003344:	40000800 	.word	0x40000800
 8003348:	40000c00 	.word	0x40000c00
 800334c:	40010400 	.word	0x40010400
 8003350:	40014000 	.word	0x40014000
 8003354:	40001800 	.word	0x40001800
 8003358:	00010007 	.word	0x00010007

0800335c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d020      	beq.n	80033c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d01b      	beq.n	80033c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f06f 0202 	mvn.w	r2, #2
 8003390:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7fd fb1a 	bl	80009e0 <HAL_TIM_IC_CaptureCallback>
 80033ac:	e005      	b.n	80033ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 fa90 	bl	80038d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 fa97 	bl	80038e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	f003 0304 	and.w	r3, r3, #4
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d020      	beq.n	800340c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d01b      	beq.n	800340c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0204 	mvn.w	r2, #4
 80033dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2202      	movs	r2, #2
 80033e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7fd faf4 	bl	80009e0 <HAL_TIM_IC_CaptureCallback>
 80033f8:	e005      	b.n	8003406 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 fa6a 	bl	80038d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 fa71 	bl	80038e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f003 0308 	and.w	r3, r3, #8
 8003412:	2b00      	cmp	r3, #0
 8003414:	d020      	beq.n	8003458 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	2b00      	cmp	r3, #0
 800341e:	d01b      	beq.n	8003458 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f06f 0208 	mvn.w	r2, #8
 8003428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2204      	movs	r2, #4
 800342e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7fd face 	bl	80009e0 <HAL_TIM_IC_CaptureCallback>
 8003444:	e005      	b.n	8003452 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 fa44 	bl	80038d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 fa4b 	bl	80038e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f003 0310 	and.w	r3, r3, #16
 800345e:	2b00      	cmp	r3, #0
 8003460:	d020      	beq.n	80034a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f003 0310 	and.w	r3, r3, #16
 8003468:	2b00      	cmp	r3, #0
 800346a:	d01b      	beq.n	80034a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f06f 0210 	mvn.w	r2, #16
 8003474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2208      	movs	r2, #8
 800347a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7fd faa8 	bl	80009e0 <HAL_TIM_IC_CaptureCallback>
 8003490:	e005      	b.n	800349e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fa1e 	bl	80038d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 fa25 	bl	80038e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00c      	beq.n	80034c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d007      	beq.n	80034c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f06f 0201 	mvn.w	r2, #1
 80034c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f9fc 	bl	80038c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d104      	bne.n	80034dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00c      	beq.n	80034f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d007      	beq.n	80034f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80034ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 fd3b 	bl	8003f6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00c      	beq.n	800351a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003506:	2b00      	cmp	r3, #0
 8003508:	d007      	beq.n	800351a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 fd33 	bl	8003f80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00c      	beq.n	800353e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800352a:	2b00      	cmp	r3, #0
 800352c:	d007      	beq.n	800353e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 f9df 	bl	80038fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	f003 0320 	and.w	r3, r3, #32
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00c      	beq.n	8003562 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f003 0320 	and.w	r3, r3, #32
 800354e:	2b00      	cmp	r3, #0
 8003550:	d007      	beq.n	8003562 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f06f 0220 	mvn.w	r2, #32
 800355a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 fcfb 	bl	8003f58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003562:	bf00      	nop
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b086      	sub	sp, #24
 800356e:	af00      	add	r7, sp, #0
 8003570:	60f8      	str	r0, [r7, #12]
 8003572:	60b9      	str	r1, [r7, #8]
 8003574:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003580:	2b01      	cmp	r3, #1
 8003582:	d101      	bne.n	8003588 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003584:	2302      	movs	r3, #2
 8003586:	e088      	b.n	800369a <HAL_TIM_IC_ConfigChannel+0x130>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d11b      	bne.n	80035ce <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80035a6:	f000 fa5f 	bl	8003a68 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	699a      	ldr	r2, [r3, #24]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 020c 	bic.w	r2, r2, #12
 80035b8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6999      	ldr	r1, [r3, #24]
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	430a      	orrs	r2, r1
 80035ca:	619a      	str	r2, [r3, #24]
 80035cc:	e060      	b.n	8003690 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	d11c      	bne.n	800360e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80035e4:	f000 fae3 	bl	8003bae <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699a      	ldr	r2, [r3, #24]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80035f6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6999      	ldr	r1, [r3, #24]
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	021a      	lsls	r2, r3, #8
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	619a      	str	r2, [r3, #24]
 800360c:	e040      	b.n	8003690 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b08      	cmp	r3, #8
 8003612:	d11b      	bne.n	800364c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003624:	f000 fb30 	bl	8003c88 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	69da      	ldr	r2, [r3, #28]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 020c 	bic.w	r2, r2, #12
 8003636:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	69d9      	ldr	r1, [r3, #28]
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	61da      	str	r2, [r3, #28]
 800364a:	e021      	b.n	8003690 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b0c      	cmp	r3, #12
 8003650:	d11c      	bne.n	800368c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003662:	f000 fb4d 	bl	8003d00 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	69da      	ldr	r2, [r3, #28]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003674:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	69d9      	ldr	r1, [r3, #28]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	021a      	lsls	r2, r3, #8
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	61da      	str	r2, [r3, #28]
 800368a:	e001      	b.n	8003690 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003698:	7dfb      	ldrb	r3, [r7, #23]
}
 800369a:	4618      	mov	r0, r3
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
	...

080036a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ae:	2300      	movs	r3, #0
 80036b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d101      	bne.n	80036c0 <HAL_TIM_ConfigClockSource+0x1c>
 80036bc:	2302      	movs	r3, #2
 80036be:	e0b4      	b.n	800382a <HAL_TIM_ConfigClockSource+0x186>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2202      	movs	r2, #2
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	4b56      	ldr	r3, [pc, #344]	@ (8003834 <HAL_TIM_ConfigClockSource+0x190>)
 80036dc:	4013      	ands	r3, r2
 80036de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036f8:	d03e      	beq.n	8003778 <HAL_TIM_ConfigClockSource+0xd4>
 80036fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036fe:	f200 8087 	bhi.w	8003810 <HAL_TIM_ConfigClockSource+0x16c>
 8003702:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003706:	f000 8086 	beq.w	8003816 <HAL_TIM_ConfigClockSource+0x172>
 800370a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800370e:	d87f      	bhi.n	8003810 <HAL_TIM_ConfigClockSource+0x16c>
 8003710:	2b70      	cmp	r3, #112	@ 0x70
 8003712:	d01a      	beq.n	800374a <HAL_TIM_ConfigClockSource+0xa6>
 8003714:	2b70      	cmp	r3, #112	@ 0x70
 8003716:	d87b      	bhi.n	8003810 <HAL_TIM_ConfigClockSource+0x16c>
 8003718:	2b60      	cmp	r3, #96	@ 0x60
 800371a:	d050      	beq.n	80037be <HAL_TIM_ConfigClockSource+0x11a>
 800371c:	2b60      	cmp	r3, #96	@ 0x60
 800371e:	d877      	bhi.n	8003810 <HAL_TIM_ConfigClockSource+0x16c>
 8003720:	2b50      	cmp	r3, #80	@ 0x50
 8003722:	d03c      	beq.n	800379e <HAL_TIM_ConfigClockSource+0xfa>
 8003724:	2b50      	cmp	r3, #80	@ 0x50
 8003726:	d873      	bhi.n	8003810 <HAL_TIM_ConfigClockSource+0x16c>
 8003728:	2b40      	cmp	r3, #64	@ 0x40
 800372a:	d058      	beq.n	80037de <HAL_TIM_ConfigClockSource+0x13a>
 800372c:	2b40      	cmp	r3, #64	@ 0x40
 800372e:	d86f      	bhi.n	8003810 <HAL_TIM_ConfigClockSource+0x16c>
 8003730:	2b30      	cmp	r3, #48	@ 0x30
 8003732:	d064      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0x15a>
 8003734:	2b30      	cmp	r3, #48	@ 0x30
 8003736:	d86b      	bhi.n	8003810 <HAL_TIM_ConfigClockSource+0x16c>
 8003738:	2b20      	cmp	r3, #32
 800373a:	d060      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0x15a>
 800373c:	2b20      	cmp	r3, #32
 800373e:	d867      	bhi.n	8003810 <HAL_TIM_ConfigClockSource+0x16c>
 8003740:	2b00      	cmp	r3, #0
 8003742:	d05c      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0x15a>
 8003744:	2b10      	cmp	r3, #16
 8003746:	d05a      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0x15a>
 8003748:	e062      	b.n	8003810 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800375a:	f000 fb29 	bl	8003db0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800376c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	609a      	str	r2, [r3, #8]
      break;
 8003776:	e04f      	b.n	8003818 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003788:	f000 fb12 	bl	8003db0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800379a:	609a      	str	r2, [r3, #8]
      break;
 800379c:	e03c      	b.n	8003818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037aa:	461a      	mov	r2, r3
 80037ac:	f000 f9d0 	bl	8003b50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2150      	movs	r1, #80	@ 0x50
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 fadf 	bl	8003d7a <TIM_ITRx_SetConfig>
      break;
 80037bc:	e02c      	b.n	8003818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037ca:	461a      	mov	r2, r3
 80037cc:	f000 fa2c 	bl	8003c28 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2160      	movs	r1, #96	@ 0x60
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 facf 	bl	8003d7a <TIM_ITRx_SetConfig>
      break;
 80037dc:	e01c      	b.n	8003818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ea:	461a      	mov	r2, r3
 80037ec:	f000 f9b0 	bl	8003b50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2140      	movs	r1, #64	@ 0x40
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 fabf 	bl	8003d7a <TIM_ITRx_SetConfig>
      break;
 80037fc:	e00c      	b.n	8003818 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4619      	mov	r1, r3
 8003808:	4610      	mov	r0, r2
 800380a:	f000 fab6 	bl	8003d7a <TIM_ITRx_SetConfig>
      break;
 800380e:	e003      	b.n	8003818 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	73fb      	strb	r3, [r7, #15]
      break;
 8003814:	e000      	b.n	8003818 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003816:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003828:	7bfb      	ldrb	r3, [r7, #15]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	fffeff88 	.word	0xfffeff88

08003838 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003842:	2300      	movs	r3, #0
 8003844:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	2b0c      	cmp	r3, #12
 800384a:	d831      	bhi.n	80038b0 <HAL_TIM_ReadCapturedValue+0x78>
 800384c:	a201      	add	r2, pc, #4	@ (adr r2, 8003854 <HAL_TIM_ReadCapturedValue+0x1c>)
 800384e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003852:	bf00      	nop
 8003854:	08003889 	.word	0x08003889
 8003858:	080038b1 	.word	0x080038b1
 800385c:	080038b1 	.word	0x080038b1
 8003860:	080038b1 	.word	0x080038b1
 8003864:	08003893 	.word	0x08003893
 8003868:	080038b1 	.word	0x080038b1
 800386c:	080038b1 	.word	0x080038b1
 8003870:	080038b1 	.word	0x080038b1
 8003874:	0800389d 	.word	0x0800389d
 8003878:	080038b1 	.word	0x080038b1
 800387c:	080038b1 	.word	0x080038b1
 8003880:	080038b1 	.word	0x080038b1
 8003884:	080038a7 	.word	0x080038a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800388e:	60fb      	str	r3, [r7, #12]

      break;
 8003890:	e00f      	b.n	80038b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003898:	60fb      	str	r3, [r7, #12]

      break;
 800389a:	e00a      	b.n	80038b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a2:	60fb      	str	r3, [r7, #12]

      break;
 80038a4:	e005      	b.n	80038b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ac:	60fb      	str	r3, [r7, #12]

      break;
 80038ae:	e000      	b.n	80038b2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80038b0:	bf00      	nop
  }

  return tmpreg;
 80038b2:	68fb      	ldr	r3, [r7, #12]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3714      	adds	r7, #20
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a46      	ldr	r2, [pc, #280]	@ (8003a3c <TIM_Base_SetConfig+0x12c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d013      	beq.n	8003950 <TIM_Base_SetConfig+0x40>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800392e:	d00f      	beq.n	8003950 <TIM_Base_SetConfig+0x40>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a43      	ldr	r2, [pc, #268]	@ (8003a40 <TIM_Base_SetConfig+0x130>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d00b      	beq.n	8003950 <TIM_Base_SetConfig+0x40>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a42      	ldr	r2, [pc, #264]	@ (8003a44 <TIM_Base_SetConfig+0x134>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d007      	beq.n	8003950 <TIM_Base_SetConfig+0x40>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a41      	ldr	r2, [pc, #260]	@ (8003a48 <TIM_Base_SetConfig+0x138>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d003      	beq.n	8003950 <TIM_Base_SetConfig+0x40>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a40      	ldr	r2, [pc, #256]	@ (8003a4c <TIM_Base_SetConfig+0x13c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d108      	bne.n	8003962 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	4313      	orrs	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a35      	ldr	r2, [pc, #212]	@ (8003a3c <TIM_Base_SetConfig+0x12c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d02b      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003970:	d027      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a32      	ldr	r2, [pc, #200]	@ (8003a40 <TIM_Base_SetConfig+0x130>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d023      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a31      	ldr	r2, [pc, #196]	@ (8003a44 <TIM_Base_SetConfig+0x134>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d01f      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a30      	ldr	r2, [pc, #192]	@ (8003a48 <TIM_Base_SetConfig+0x138>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d01b      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a2f      	ldr	r2, [pc, #188]	@ (8003a4c <TIM_Base_SetConfig+0x13c>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d017      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a2e      	ldr	r2, [pc, #184]	@ (8003a50 <TIM_Base_SetConfig+0x140>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d013      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a2d      	ldr	r2, [pc, #180]	@ (8003a54 <TIM_Base_SetConfig+0x144>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d00f      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a2c      	ldr	r2, [pc, #176]	@ (8003a58 <TIM_Base_SetConfig+0x148>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d00b      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a2b      	ldr	r2, [pc, #172]	@ (8003a5c <TIM_Base_SetConfig+0x14c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d007      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a2a      	ldr	r2, [pc, #168]	@ (8003a60 <TIM_Base_SetConfig+0x150>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d003      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a29      	ldr	r2, [pc, #164]	@ (8003a64 <TIM_Base_SetConfig+0x154>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d108      	bne.n	80039d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a10      	ldr	r2, [pc, #64]	@ (8003a3c <TIM_Base_SetConfig+0x12c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d003      	beq.n	8003a08 <TIM_Base_SetConfig+0xf8>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a12      	ldr	r2, [pc, #72]	@ (8003a4c <TIM_Base_SetConfig+0x13c>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d103      	bne.n	8003a10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d105      	bne.n	8003a2e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	f023 0201 	bic.w	r2, r3, #1
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	611a      	str	r2, [r3, #16]
  }
}
 8003a2e:	bf00      	nop
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	40010000 	.word	0x40010000
 8003a40:	40000400 	.word	0x40000400
 8003a44:	40000800 	.word	0x40000800
 8003a48:	40000c00 	.word	0x40000c00
 8003a4c:	40010400 	.word	0x40010400
 8003a50:	40014000 	.word	0x40014000
 8003a54:	40014400 	.word	0x40014400
 8003a58:	40014800 	.word	0x40014800
 8003a5c:	40001800 	.word	0x40001800
 8003a60:	40001c00 	.word	0x40001c00
 8003a64:	40002000 	.word	0x40002000

08003a68 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b087      	sub	sp, #28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	f023 0201 	bic.w	r2, r3, #1
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4a28      	ldr	r2, [pc, #160]	@ (8003b34 <TIM_TI1_SetConfig+0xcc>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d01b      	beq.n	8003ace <TIM_TI1_SetConfig+0x66>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a9c:	d017      	beq.n	8003ace <TIM_TI1_SetConfig+0x66>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4a25      	ldr	r2, [pc, #148]	@ (8003b38 <TIM_TI1_SetConfig+0xd0>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d013      	beq.n	8003ace <TIM_TI1_SetConfig+0x66>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4a24      	ldr	r2, [pc, #144]	@ (8003b3c <TIM_TI1_SetConfig+0xd4>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d00f      	beq.n	8003ace <TIM_TI1_SetConfig+0x66>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	4a23      	ldr	r2, [pc, #140]	@ (8003b40 <TIM_TI1_SetConfig+0xd8>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d00b      	beq.n	8003ace <TIM_TI1_SetConfig+0x66>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4a22      	ldr	r2, [pc, #136]	@ (8003b44 <TIM_TI1_SetConfig+0xdc>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d007      	beq.n	8003ace <TIM_TI1_SetConfig+0x66>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4a21      	ldr	r2, [pc, #132]	@ (8003b48 <TIM_TI1_SetConfig+0xe0>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d003      	beq.n	8003ace <TIM_TI1_SetConfig+0x66>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4a20      	ldr	r2, [pc, #128]	@ (8003b4c <TIM_TI1_SetConfig+0xe4>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d101      	bne.n	8003ad2 <TIM_TI1_SetConfig+0x6a>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e000      	b.n	8003ad4 <TIM_TI1_SetConfig+0x6c>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d008      	beq.n	8003aea <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f023 0303 	bic.w	r3, r3, #3
 8003ade:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	e003      	b.n	8003af2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f043 0301 	orr.w	r3, r3, #1
 8003af0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003af8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f023 030a 	bic.w	r3, r3, #10
 8003b0c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	f003 030a 	and.w	r3, r3, #10
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	621a      	str	r2, [r3, #32]
}
 8003b26:	bf00      	nop
 8003b28:	371c      	adds	r7, #28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	40010000 	.word	0x40010000
 8003b38:	40000400 	.word	0x40000400
 8003b3c:	40000800 	.word	0x40000800
 8003b40:	40000c00 	.word	0x40000c00
 8003b44:	40010400 	.word	0x40010400
 8003b48:	40014000 	.word	0x40014000
 8003b4c:	40001800 	.word	0x40001800

08003b50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b087      	sub	sp, #28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	f023 0201 	bic.w	r2, r3, #1
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f023 030a 	bic.w	r3, r3, #10
 8003b8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	621a      	str	r2, [r3, #32]
}
 8003ba2:	bf00      	nop
 8003ba4:	371c      	adds	r7, #28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b087      	sub	sp, #28
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	60f8      	str	r0, [r7, #12]
 8003bb6:	60b9      	str	r1, [r7, #8]
 8003bb8:	607a      	str	r2, [r7, #4]
 8003bba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	f023 0210 	bic.w	r2, r3, #16
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	021b      	lsls	r3, r3, #8
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003bec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	031b      	lsls	r3, r3, #12
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c00:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	621a      	str	r2, [r3, #32]
}
 8003c1c:	bf00      	nop
 8003c1e:	371c      	adds	r7, #28
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b087      	sub	sp, #28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	f023 0210 	bic.w	r2, r3, #16
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	031b      	lsls	r3, r3, #12
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c64:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	621a      	str	r2, [r3, #32]
}
 8003c7c:	bf00      	nop
 8003c7e:	371c      	adds	r7, #28
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f023 0303 	bic.w	r3, r3, #3
 8003cb4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003cc4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003cd8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	021b      	lsls	r3, r3, #8
 8003cde:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	621a      	str	r2, [r3, #32]
}
 8003cf4:	bf00      	nop
 8003cf6:	371c      	adds	r7, #28
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b087      	sub	sp, #28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d2c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	021b      	lsls	r3, r3, #8
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d3e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	031b      	lsls	r3, r3, #12
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003d52:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	031b      	lsls	r3, r3, #12
 8003d58:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	621a      	str	r2, [r3, #32]
}
 8003d6e:	bf00      	nop
 8003d70:	371c      	adds	r7, #28
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b085      	sub	sp, #20
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
 8003d82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	f043 0307 	orr.w	r3, r3, #7
 8003d9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	609a      	str	r2, [r3, #8]
}
 8003da4:	bf00      	nop
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
 8003dbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003dca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	021a      	lsls	r2, r3, #8
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	609a      	str	r2, [r3, #8]
}
 8003de4:	bf00      	nop
 8003de6:	371c      	adds	r7, #28
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f003 031f 	and.w	r3, r3, #31
 8003e02:	2201      	movs	r2, #1
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6a1a      	ldr	r2, [r3, #32]
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	43db      	mvns	r3, r3
 8003e12:	401a      	ands	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a1a      	ldr	r2, [r3, #32]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	f003 031f 	and.w	r3, r3, #31
 8003e22:	6879      	ldr	r1, [r7, #4]
 8003e24:	fa01 f303 	lsl.w	r3, r1, r3
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	621a      	str	r2, [r3, #32]
}
 8003e2e:	bf00      	nop
 8003e30:	371c      	adds	r7, #28
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
	...

08003e3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d101      	bne.n	8003e54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e50:	2302      	movs	r3, #2
 8003e52:	e06d      	b.n	8003f30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a30      	ldr	r2, [pc, #192]	@ (8003f3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d004      	beq.n	8003e88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a2f      	ldr	r2, [pc, #188]	@ (8003f40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d108      	bne.n	8003e9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003e8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ea0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a20      	ldr	r2, [pc, #128]	@ (8003f3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d022      	beq.n	8003f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ec6:	d01d      	beq.n	8003f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a1d      	ldr	r2, [pc, #116]	@ (8003f44 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d018      	beq.n	8003f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a1c      	ldr	r2, [pc, #112]	@ (8003f48 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d013      	beq.n	8003f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a1a      	ldr	r2, [pc, #104]	@ (8003f4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d00e      	beq.n	8003f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a15      	ldr	r2, [pc, #84]	@ (8003f40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d009      	beq.n	8003f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a16      	ldr	r2, [pc, #88]	@ (8003f50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d004      	beq.n	8003f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a15      	ldr	r2, [pc, #84]	@ (8003f54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d10c      	bne.n	8003f1e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	40010000 	.word	0x40010000
 8003f40:	40010400 	.word	0x40010400
 8003f44:	40000400 	.word	0x40000400
 8003f48:	40000800 	.word	0x40000800
 8003f4c:	40000c00 	.word	0x40000c00
 8003f50:	40014000 	.word	0x40014000
 8003f54:	40001800 	.word	0x40001800

08003f58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e040      	b.n	8004028 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d106      	bne.n	8003fbc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7fc fdf6 	bl	8000ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2224      	movs	r2, #36	@ 0x24
 8003fc0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 0201 	bic.w	r2, r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 fe24 	bl	8004c28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 fbbd 	bl	8004760 <UART_SetConfig>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d101      	bne.n	8003ff0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e01b      	b.n	8004028 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ffe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800400e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0201 	orr.w	r2, r2, #1
 800401e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 fea3 	bl	8004d6c <UART_CheckIdleState>
 8004026:	4603      	mov	r3, r0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3708      	adds	r7, #8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b08a      	sub	sp, #40	@ 0x28
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	4613      	mov	r3, r2
 800403c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004042:	2b20      	cmp	r3, #32
 8004044:	d165      	bne.n	8004112 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <HAL_UART_Transmit_DMA+0x22>
 800404c:	88fb      	ldrh	r3, [r7, #6]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e05e      	b.n	8004114 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	68ba      	ldr	r2, [r7, #8]
 800405a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	88fa      	ldrh	r2, [r7, #6]
 8004060:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	88fa      	ldrh	r2, [r7, #6]
 8004068:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2221      	movs	r2, #33	@ 0x21
 8004078:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800407e:	2b00      	cmp	r3, #0
 8004080:	d027      	beq.n	80040d2 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004086:	4a25      	ldr	r2, [pc, #148]	@ (800411c <HAL_UART_Transmit_DMA+0xec>)
 8004088:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800408e:	4a24      	ldr	r2, [pc, #144]	@ (8004120 <HAL_UART_Transmit_DMA+0xf0>)
 8004090:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004096:	4a23      	ldr	r2, [pc, #140]	@ (8004124 <HAL_UART_Transmit_DMA+0xf4>)
 8004098:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800409e:	2200      	movs	r2, #0
 80040a0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040aa:	4619      	mov	r1, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	3328      	adds	r3, #40	@ 0x28
 80040b2:	461a      	mov	r2, r3
 80040b4:	88fb      	ldrh	r3, [r7, #6]
 80040b6:	f7fd f951 	bl	800135c <HAL_DMA_Start_IT>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d008      	beq.n	80040d2 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2210      	movs	r2, #16
 80040c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2220      	movs	r2, #32
 80040cc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e020      	b.n	8004114 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2240      	movs	r2, #64	@ 0x40
 80040d8:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	3308      	adds	r3, #8
 80040e0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	e853 3f00 	ldrex	r3, [r3]
 80040e8:	613b      	str	r3, [r7, #16]
   return(result);
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	3308      	adds	r3, #8
 80040f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040fa:	623a      	str	r2, [r7, #32]
 80040fc:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fe:	69f9      	ldr	r1, [r7, #28]
 8004100:	6a3a      	ldr	r2, [r7, #32]
 8004102:	e841 2300 	strex	r3, r2, [r1]
 8004106:	61bb      	str	r3, [r7, #24]
   return(result);
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1e5      	bne.n	80040da <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800410e:	2300      	movs	r3, #0
 8004110:	e000      	b.n	8004114 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8004112:	2302      	movs	r3, #2
  }
}
 8004114:	4618      	mov	r0, r3
 8004116:	3728      	adds	r7, #40	@ 0x28
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	080050ab 	.word	0x080050ab
 8004120:	08005141 	.word	0x08005141
 8004124:	0800515d 	.word	0x0800515d

08004128 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b0ba      	sub	sp, #232	@ 0xe8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800414e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004152:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004156:	4013      	ands	r3, r2
 8004158:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800415c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004160:	2b00      	cmp	r3, #0
 8004162:	d115      	bne.n	8004190 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004168:	f003 0320 	and.w	r3, r3, #32
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00f      	beq.n	8004190 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004174:	f003 0320 	and.w	r3, r3, #32
 8004178:	2b00      	cmp	r3, #0
 800417a:	d009      	beq.n	8004190 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 82ac 	beq.w	80046de <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	4798      	blx	r3
      }
      return;
 800418e:	e2a6      	b.n	80046de <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004190:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 8117 	beq.w	80043c8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800419a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d106      	bne.n	80041b4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80041a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80041aa:	4b85      	ldr	r3, [pc, #532]	@ (80043c0 <HAL_UART_IRQHandler+0x298>)
 80041ac:	4013      	ands	r3, r2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f000 810a 	beq.w	80043c8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d011      	beq.n	80041e4 <HAL_UART_IRQHandler+0xbc>
 80041c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00b      	beq.n	80041e4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2201      	movs	r2, #1
 80041d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041da:	f043 0201 	orr.w	r2, r3, #1
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d011      	beq.n	8004214 <HAL_UART_IRQHandler+0xec>
 80041f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00b      	beq.n	8004214 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2202      	movs	r2, #2
 8004202:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800420a:	f043 0204 	orr.w	r2, r3, #4
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	d011      	beq.n	8004244 <HAL_UART_IRQHandler+0x11c>
 8004220:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00b      	beq.n	8004244 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2204      	movs	r2, #4
 8004232:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800423a:	f043 0202 	orr.w	r2, r3, #2
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004248:	f003 0308 	and.w	r3, r3, #8
 800424c:	2b00      	cmp	r3, #0
 800424e:	d017      	beq.n	8004280 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004254:	f003 0320 	and.w	r3, r3, #32
 8004258:	2b00      	cmp	r3, #0
 800425a:	d105      	bne.n	8004268 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800425c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004260:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00b      	beq.n	8004280 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2208      	movs	r2, #8
 800426e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004276:	f043 0208 	orr.w	r2, r3, #8
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004284:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004288:	2b00      	cmp	r3, #0
 800428a:	d012      	beq.n	80042b2 <HAL_UART_IRQHandler+0x18a>
 800428c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004290:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00c      	beq.n	80042b2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042a8:	f043 0220 	orr.w	r2, r3, #32
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f000 8212 	beq.w	80046e2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80042be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042c2:	f003 0320 	and.w	r3, r3, #32
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00d      	beq.n	80042e6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80042ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042ce:	f003 0320 	and.w	r3, r3, #32
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d007      	beq.n	80042e6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042fa:	2b40      	cmp	r3, #64	@ 0x40
 80042fc:	d005      	beq.n	800430a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80042fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004302:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004306:	2b00      	cmp	r3, #0
 8004308:	d04f      	beq.n	80043aa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 fe69 	bl	8004fe2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800431a:	2b40      	cmp	r3, #64	@ 0x40
 800431c:	d141      	bne.n	80043a2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	3308      	adds	r3, #8
 8004324:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004328:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800432c:	e853 3f00 	ldrex	r3, [r3]
 8004330:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004334:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004338:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800433c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	3308      	adds	r3, #8
 8004346:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800434a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800434e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004352:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004356:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800435a:	e841 2300 	strex	r3, r2, [r1]
 800435e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004362:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1d9      	bne.n	800431e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800436e:	2b00      	cmp	r3, #0
 8004370:	d013      	beq.n	800439a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004376:	4a13      	ldr	r2, [pc, #76]	@ (80043c4 <HAL_UART_IRQHandler+0x29c>)
 8004378:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800437e:	4618      	mov	r0, r3
 8004380:	f7fd f8bc 	bl	80014fc <HAL_DMA_Abort_IT>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d017      	beq.n	80043ba <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800438e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004394:	4610      	mov	r0, r2
 8004396:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004398:	e00f      	b.n	80043ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f9c0 	bl	8004720 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a0:	e00b      	b.n	80043ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f9bc 	bl	8004720 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a8:	e007      	b.n	80043ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f9b8 	bl	8004720 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80043b8:	e193      	b.n	80046e2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043ba:	bf00      	nop
    return;
 80043bc:	e191      	b.n	80046e2 <HAL_UART_IRQHandler+0x5ba>
 80043be:	bf00      	nop
 80043c0:	04000120 	.word	0x04000120
 80043c4:	080051db 	.word	0x080051db

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	f040 814c 	bne.w	800466a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80043d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043d6:	f003 0310 	and.w	r3, r3, #16
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 8145 	beq.w	800466a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80043e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043e4:	f003 0310 	and.w	r3, r3, #16
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 813e 	beq.w	800466a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2210      	movs	r2, #16
 80043f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004400:	2b40      	cmp	r3, #64	@ 0x40
 8004402:	f040 80b6 	bne.w	8004572 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004412:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 8165 	beq.w	80046e6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004422:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004426:	429a      	cmp	r2, r3
 8004428:	f080 815d 	bcs.w	80046e6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004432:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004440:	f000 8086 	beq.w	8004550 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004450:	e853 3f00 	ldrex	r3, [r3]
 8004454:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004458:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800445c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004460:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	461a      	mov	r2, r3
 800446a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800446e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004472:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004476:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800447a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800447e:	e841 2300 	strex	r3, r2, [r1]
 8004482:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004486:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1da      	bne.n	8004444 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	3308      	adds	r3, #8
 8004494:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004496:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004498:	e853 3f00 	ldrex	r3, [r3]
 800449c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800449e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044a0:	f023 0301 	bic.w	r3, r3, #1
 80044a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3308      	adds	r3, #8
 80044ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80044b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80044b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80044ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80044be:	e841 2300 	strex	r3, r2, [r1]
 80044c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80044c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1e1      	bne.n	800448e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	3308      	adds	r3, #8
 80044d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044d4:	e853 3f00 	ldrex	r3, [r3]
 80044d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80044da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3308      	adds	r3, #8
 80044ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80044ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80044f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80044f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80044f6:	e841 2300 	strex	r3, r2, [r1]
 80044fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80044fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1e3      	bne.n	80044ca <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2220      	movs	r2, #32
 8004506:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004516:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004518:	e853 3f00 	ldrex	r3, [r3]
 800451c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800451e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004520:	f023 0310 	bic.w	r3, r3, #16
 8004524:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	461a      	mov	r2, r3
 800452e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004532:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004534:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004536:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004538:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800453a:	e841 2300 	strex	r3, r2, [r1]
 800453e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004540:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1e4      	bne.n	8004510 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800454a:	4618      	mov	r0, r3
 800454c:	f7fc ff66 	bl	800141c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2202      	movs	r2, #2
 8004554:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004562:	b29b      	uxth	r3, r3
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	b29b      	uxth	r3, r3
 8004568:	4619      	mov	r1, r3
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f8e2 	bl	8004734 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004570:	e0b9      	b.n	80046e6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800457e:	b29b      	uxth	r3, r3
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800458c:	b29b      	uxth	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 80ab 	beq.w	80046ea <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8004594:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 80a6 	beq.w	80046ea <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045a6:	e853 3f00 	ldrex	r3, [r3]
 80045aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	461a      	mov	r2, r3
 80045bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80045c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80045c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045c8:	e841 2300 	strex	r3, r2, [r1]
 80045cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1e4      	bne.n	800459e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	3308      	adds	r3, #8
 80045da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045de:	e853 3f00 	ldrex	r3, [r3]
 80045e2:	623b      	str	r3, [r7, #32]
   return(result);
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	f023 0301 	bic.w	r3, r3, #1
 80045ea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3308      	adds	r3, #8
 80045f4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80045f8:	633a      	str	r2, [r7, #48]	@ 0x30
 80045fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004600:	e841 2300 	strex	r3, r2, [r1]
 8004604:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1e3      	bne.n	80045d4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2220      	movs	r2, #32
 8004610:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	e853 3f00 	ldrex	r3, [r3]
 800462c:	60fb      	str	r3, [r7, #12]
   return(result);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f023 0310 	bic.w	r3, r3, #16
 8004634:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	461a      	mov	r2, r3
 800463e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004642:	61fb      	str	r3, [r7, #28]
 8004644:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004646:	69b9      	ldr	r1, [r7, #24]
 8004648:	69fa      	ldr	r2, [r7, #28]
 800464a:	e841 2300 	strex	r3, r2, [r1]
 800464e:	617b      	str	r3, [r7, #20]
   return(result);
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1e4      	bne.n	8004620 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2202      	movs	r2, #2
 800465a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800465c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004660:	4619      	mov	r1, r3
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f866 	bl	8004734 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004668:	e03f      	b.n	80046ea <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800466a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800466e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00e      	beq.n	8004694 <HAL_UART_IRQHandler+0x56c>
 8004676:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800467a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d008      	beq.n	8004694 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800468a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f85d 	bl	800474c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004692:	e02d      	b.n	80046f0 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004698:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00e      	beq.n	80046be <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80046a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d008      	beq.n	80046be <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d01c      	beq.n	80046ee <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	4798      	blx	r3
    }
    return;
 80046bc:	e017      	b.n	80046ee <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80046be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d012      	beq.n	80046f0 <HAL_UART_IRQHandler+0x5c8>
 80046ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00c      	beq.n	80046f0 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 fd95 	bl	8005206 <UART_EndTransmit_IT>
    return;
 80046dc:	e008      	b.n	80046f0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80046de:	bf00      	nop
 80046e0:	e006      	b.n	80046f0 <HAL_UART_IRQHandler+0x5c8>
    return;
 80046e2:	bf00      	nop
 80046e4:	e004      	b.n	80046f0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80046e6:	bf00      	nop
 80046e8:	e002      	b.n	80046f0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80046ea:	bf00      	nop
 80046ec:	e000      	b.n	80046f0 <HAL_UART_IRQHandler+0x5c8>
    return;
 80046ee:	bf00      	nop
  }

}
 80046f0:	37e8      	adds	r7, #232	@ 0xe8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop

080046f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	460b      	mov	r3, r1
 800473e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b088      	sub	sp, #32
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004768:	2300      	movs	r3, #0
 800476a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	431a      	orrs	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	69db      	ldr	r3, [r3, #28]
 8004780:	4313      	orrs	r3, r2
 8004782:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	4ba6      	ldr	r3, [pc, #664]	@ (8004a24 <UART_SetConfig+0x2c4>)
 800478c:	4013      	ands	r3, r2
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	6812      	ldr	r2, [r2, #0]
 8004792:	6979      	ldr	r1, [r7, #20]
 8004794:	430b      	orrs	r3, r1
 8004796:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68da      	ldr	r2, [r3, #12]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a94      	ldr	r2, [pc, #592]	@ (8004a28 <UART_SetConfig+0x2c8>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d120      	bne.n	800481e <UART_SetConfig+0xbe>
 80047dc:	4b93      	ldr	r3, [pc, #588]	@ (8004a2c <UART_SetConfig+0x2cc>)
 80047de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e2:	f003 0303 	and.w	r3, r3, #3
 80047e6:	2b03      	cmp	r3, #3
 80047e8:	d816      	bhi.n	8004818 <UART_SetConfig+0xb8>
 80047ea:	a201      	add	r2, pc, #4	@ (adr r2, 80047f0 <UART_SetConfig+0x90>)
 80047ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f0:	08004801 	.word	0x08004801
 80047f4:	0800480d 	.word	0x0800480d
 80047f8:	08004807 	.word	0x08004807
 80047fc:	08004813 	.word	0x08004813
 8004800:	2301      	movs	r3, #1
 8004802:	77fb      	strb	r3, [r7, #31]
 8004804:	e150      	b.n	8004aa8 <UART_SetConfig+0x348>
 8004806:	2302      	movs	r3, #2
 8004808:	77fb      	strb	r3, [r7, #31]
 800480a:	e14d      	b.n	8004aa8 <UART_SetConfig+0x348>
 800480c:	2304      	movs	r3, #4
 800480e:	77fb      	strb	r3, [r7, #31]
 8004810:	e14a      	b.n	8004aa8 <UART_SetConfig+0x348>
 8004812:	2308      	movs	r3, #8
 8004814:	77fb      	strb	r3, [r7, #31]
 8004816:	e147      	b.n	8004aa8 <UART_SetConfig+0x348>
 8004818:	2310      	movs	r3, #16
 800481a:	77fb      	strb	r3, [r7, #31]
 800481c:	e144      	b.n	8004aa8 <UART_SetConfig+0x348>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a83      	ldr	r2, [pc, #524]	@ (8004a30 <UART_SetConfig+0x2d0>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d132      	bne.n	800488e <UART_SetConfig+0x12e>
 8004828:	4b80      	ldr	r3, [pc, #512]	@ (8004a2c <UART_SetConfig+0x2cc>)
 800482a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800482e:	f003 030c 	and.w	r3, r3, #12
 8004832:	2b0c      	cmp	r3, #12
 8004834:	d828      	bhi.n	8004888 <UART_SetConfig+0x128>
 8004836:	a201      	add	r2, pc, #4	@ (adr r2, 800483c <UART_SetConfig+0xdc>)
 8004838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483c:	08004871 	.word	0x08004871
 8004840:	08004889 	.word	0x08004889
 8004844:	08004889 	.word	0x08004889
 8004848:	08004889 	.word	0x08004889
 800484c:	0800487d 	.word	0x0800487d
 8004850:	08004889 	.word	0x08004889
 8004854:	08004889 	.word	0x08004889
 8004858:	08004889 	.word	0x08004889
 800485c:	08004877 	.word	0x08004877
 8004860:	08004889 	.word	0x08004889
 8004864:	08004889 	.word	0x08004889
 8004868:	08004889 	.word	0x08004889
 800486c:	08004883 	.word	0x08004883
 8004870:	2300      	movs	r3, #0
 8004872:	77fb      	strb	r3, [r7, #31]
 8004874:	e118      	b.n	8004aa8 <UART_SetConfig+0x348>
 8004876:	2302      	movs	r3, #2
 8004878:	77fb      	strb	r3, [r7, #31]
 800487a:	e115      	b.n	8004aa8 <UART_SetConfig+0x348>
 800487c:	2304      	movs	r3, #4
 800487e:	77fb      	strb	r3, [r7, #31]
 8004880:	e112      	b.n	8004aa8 <UART_SetConfig+0x348>
 8004882:	2308      	movs	r3, #8
 8004884:	77fb      	strb	r3, [r7, #31]
 8004886:	e10f      	b.n	8004aa8 <UART_SetConfig+0x348>
 8004888:	2310      	movs	r3, #16
 800488a:	77fb      	strb	r3, [r7, #31]
 800488c:	e10c      	b.n	8004aa8 <UART_SetConfig+0x348>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a68      	ldr	r2, [pc, #416]	@ (8004a34 <UART_SetConfig+0x2d4>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d120      	bne.n	80048da <UART_SetConfig+0x17a>
 8004898:	4b64      	ldr	r3, [pc, #400]	@ (8004a2c <UART_SetConfig+0x2cc>)
 800489a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800489e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80048a2:	2b30      	cmp	r3, #48	@ 0x30
 80048a4:	d013      	beq.n	80048ce <UART_SetConfig+0x16e>
 80048a6:	2b30      	cmp	r3, #48	@ 0x30
 80048a8:	d814      	bhi.n	80048d4 <UART_SetConfig+0x174>
 80048aa:	2b20      	cmp	r3, #32
 80048ac:	d009      	beq.n	80048c2 <UART_SetConfig+0x162>
 80048ae:	2b20      	cmp	r3, #32
 80048b0:	d810      	bhi.n	80048d4 <UART_SetConfig+0x174>
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d002      	beq.n	80048bc <UART_SetConfig+0x15c>
 80048b6:	2b10      	cmp	r3, #16
 80048b8:	d006      	beq.n	80048c8 <UART_SetConfig+0x168>
 80048ba:	e00b      	b.n	80048d4 <UART_SetConfig+0x174>
 80048bc:	2300      	movs	r3, #0
 80048be:	77fb      	strb	r3, [r7, #31]
 80048c0:	e0f2      	b.n	8004aa8 <UART_SetConfig+0x348>
 80048c2:	2302      	movs	r3, #2
 80048c4:	77fb      	strb	r3, [r7, #31]
 80048c6:	e0ef      	b.n	8004aa8 <UART_SetConfig+0x348>
 80048c8:	2304      	movs	r3, #4
 80048ca:	77fb      	strb	r3, [r7, #31]
 80048cc:	e0ec      	b.n	8004aa8 <UART_SetConfig+0x348>
 80048ce:	2308      	movs	r3, #8
 80048d0:	77fb      	strb	r3, [r7, #31]
 80048d2:	e0e9      	b.n	8004aa8 <UART_SetConfig+0x348>
 80048d4:	2310      	movs	r3, #16
 80048d6:	77fb      	strb	r3, [r7, #31]
 80048d8:	e0e6      	b.n	8004aa8 <UART_SetConfig+0x348>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a56      	ldr	r2, [pc, #344]	@ (8004a38 <UART_SetConfig+0x2d8>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d120      	bne.n	8004926 <UART_SetConfig+0x1c6>
 80048e4:	4b51      	ldr	r3, [pc, #324]	@ (8004a2c <UART_SetConfig+0x2cc>)
 80048e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80048ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80048f0:	d013      	beq.n	800491a <UART_SetConfig+0x1ba>
 80048f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80048f4:	d814      	bhi.n	8004920 <UART_SetConfig+0x1c0>
 80048f6:	2b80      	cmp	r3, #128	@ 0x80
 80048f8:	d009      	beq.n	800490e <UART_SetConfig+0x1ae>
 80048fa:	2b80      	cmp	r3, #128	@ 0x80
 80048fc:	d810      	bhi.n	8004920 <UART_SetConfig+0x1c0>
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <UART_SetConfig+0x1a8>
 8004902:	2b40      	cmp	r3, #64	@ 0x40
 8004904:	d006      	beq.n	8004914 <UART_SetConfig+0x1b4>
 8004906:	e00b      	b.n	8004920 <UART_SetConfig+0x1c0>
 8004908:	2300      	movs	r3, #0
 800490a:	77fb      	strb	r3, [r7, #31]
 800490c:	e0cc      	b.n	8004aa8 <UART_SetConfig+0x348>
 800490e:	2302      	movs	r3, #2
 8004910:	77fb      	strb	r3, [r7, #31]
 8004912:	e0c9      	b.n	8004aa8 <UART_SetConfig+0x348>
 8004914:	2304      	movs	r3, #4
 8004916:	77fb      	strb	r3, [r7, #31]
 8004918:	e0c6      	b.n	8004aa8 <UART_SetConfig+0x348>
 800491a:	2308      	movs	r3, #8
 800491c:	77fb      	strb	r3, [r7, #31]
 800491e:	e0c3      	b.n	8004aa8 <UART_SetConfig+0x348>
 8004920:	2310      	movs	r3, #16
 8004922:	77fb      	strb	r3, [r7, #31]
 8004924:	e0c0      	b.n	8004aa8 <UART_SetConfig+0x348>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a44      	ldr	r2, [pc, #272]	@ (8004a3c <UART_SetConfig+0x2dc>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d125      	bne.n	800497c <UART_SetConfig+0x21c>
 8004930:	4b3e      	ldr	r3, [pc, #248]	@ (8004a2c <UART_SetConfig+0x2cc>)
 8004932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004936:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800493a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800493e:	d017      	beq.n	8004970 <UART_SetConfig+0x210>
 8004940:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004944:	d817      	bhi.n	8004976 <UART_SetConfig+0x216>
 8004946:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800494a:	d00b      	beq.n	8004964 <UART_SetConfig+0x204>
 800494c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004950:	d811      	bhi.n	8004976 <UART_SetConfig+0x216>
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <UART_SetConfig+0x1fe>
 8004956:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800495a:	d006      	beq.n	800496a <UART_SetConfig+0x20a>
 800495c:	e00b      	b.n	8004976 <UART_SetConfig+0x216>
 800495e:	2300      	movs	r3, #0
 8004960:	77fb      	strb	r3, [r7, #31]
 8004962:	e0a1      	b.n	8004aa8 <UART_SetConfig+0x348>
 8004964:	2302      	movs	r3, #2
 8004966:	77fb      	strb	r3, [r7, #31]
 8004968:	e09e      	b.n	8004aa8 <UART_SetConfig+0x348>
 800496a:	2304      	movs	r3, #4
 800496c:	77fb      	strb	r3, [r7, #31]
 800496e:	e09b      	b.n	8004aa8 <UART_SetConfig+0x348>
 8004970:	2308      	movs	r3, #8
 8004972:	77fb      	strb	r3, [r7, #31]
 8004974:	e098      	b.n	8004aa8 <UART_SetConfig+0x348>
 8004976:	2310      	movs	r3, #16
 8004978:	77fb      	strb	r3, [r7, #31]
 800497a:	e095      	b.n	8004aa8 <UART_SetConfig+0x348>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a2f      	ldr	r2, [pc, #188]	@ (8004a40 <UART_SetConfig+0x2e0>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d125      	bne.n	80049d2 <UART_SetConfig+0x272>
 8004986:	4b29      	ldr	r3, [pc, #164]	@ (8004a2c <UART_SetConfig+0x2cc>)
 8004988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800498c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004990:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004994:	d017      	beq.n	80049c6 <UART_SetConfig+0x266>
 8004996:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800499a:	d817      	bhi.n	80049cc <UART_SetConfig+0x26c>
 800499c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049a0:	d00b      	beq.n	80049ba <UART_SetConfig+0x25a>
 80049a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049a6:	d811      	bhi.n	80049cc <UART_SetConfig+0x26c>
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d003      	beq.n	80049b4 <UART_SetConfig+0x254>
 80049ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049b0:	d006      	beq.n	80049c0 <UART_SetConfig+0x260>
 80049b2:	e00b      	b.n	80049cc <UART_SetConfig+0x26c>
 80049b4:	2301      	movs	r3, #1
 80049b6:	77fb      	strb	r3, [r7, #31]
 80049b8:	e076      	b.n	8004aa8 <UART_SetConfig+0x348>
 80049ba:	2302      	movs	r3, #2
 80049bc:	77fb      	strb	r3, [r7, #31]
 80049be:	e073      	b.n	8004aa8 <UART_SetConfig+0x348>
 80049c0:	2304      	movs	r3, #4
 80049c2:	77fb      	strb	r3, [r7, #31]
 80049c4:	e070      	b.n	8004aa8 <UART_SetConfig+0x348>
 80049c6:	2308      	movs	r3, #8
 80049c8:	77fb      	strb	r3, [r7, #31]
 80049ca:	e06d      	b.n	8004aa8 <UART_SetConfig+0x348>
 80049cc:	2310      	movs	r3, #16
 80049ce:	77fb      	strb	r3, [r7, #31]
 80049d0:	e06a      	b.n	8004aa8 <UART_SetConfig+0x348>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a1b      	ldr	r2, [pc, #108]	@ (8004a44 <UART_SetConfig+0x2e4>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d138      	bne.n	8004a4e <UART_SetConfig+0x2ee>
 80049dc:	4b13      	ldr	r3, [pc, #76]	@ (8004a2c <UART_SetConfig+0x2cc>)
 80049de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049e2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80049e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80049ea:	d017      	beq.n	8004a1c <UART_SetConfig+0x2bc>
 80049ec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80049f0:	d82a      	bhi.n	8004a48 <UART_SetConfig+0x2e8>
 80049f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049f6:	d00b      	beq.n	8004a10 <UART_SetConfig+0x2b0>
 80049f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049fc:	d824      	bhi.n	8004a48 <UART_SetConfig+0x2e8>
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <UART_SetConfig+0x2aa>
 8004a02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a06:	d006      	beq.n	8004a16 <UART_SetConfig+0x2b6>
 8004a08:	e01e      	b.n	8004a48 <UART_SetConfig+0x2e8>
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	77fb      	strb	r3, [r7, #31]
 8004a0e:	e04b      	b.n	8004aa8 <UART_SetConfig+0x348>
 8004a10:	2302      	movs	r3, #2
 8004a12:	77fb      	strb	r3, [r7, #31]
 8004a14:	e048      	b.n	8004aa8 <UART_SetConfig+0x348>
 8004a16:	2304      	movs	r3, #4
 8004a18:	77fb      	strb	r3, [r7, #31]
 8004a1a:	e045      	b.n	8004aa8 <UART_SetConfig+0x348>
 8004a1c:	2308      	movs	r3, #8
 8004a1e:	77fb      	strb	r3, [r7, #31]
 8004a20:	e042      	b.n	8004aa8 <UART_SetConfig+0x348>
 8004a22:	bf00      	nop
 8004a24:	efff69f3 	.word	0xefff69f3
 8004a28:	40011000 	.word	0x40011000
 8004a2c:	40023800 	.word	0x40023800
 8004a30:	40004400 	.word	0x40004400
 8004a34:	40004800 	.word	0x40004800
 8004a38:	40004c00 	.word	0x40004c00
 8004a3c:	40005000 	.word	0x40005000
 8004a40:	40011400 	.word	0x40011400
 8004a44:	40007800 	.word	0x40007800
 8004a48:	2310      	movs	r3, #16
 8004a4a:	77fb      	strb	r3, [r7, #31]
 8004a4c:	e02c      	b.n	8004aa8 <UART_SetConfig+0x348>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a72      	ldr	r2, [pc, #456]	@ (8004c1c <UART_SetConfig+0x4bc>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d125      	bne.n	8004aa4 <UART_SetConfig+0x344>
 8004a58:	4b71      	ldr	r3, [pc, #452]	@ (8004c20 <UART_SetConfig+0x4c0>)
 8004a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a5e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004a62:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004a66:	d017      	beq.n	8004a98 <UART_SetConfig+0x338>
 8004a68:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004a6c:	d817      	bhi.n	8004a9e <UART_SetConfig+0x33e>
 8004a6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a72:	d00b      	beq.n	8004a8c <UART_SetConfig+0x32c>
 8004a74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a78:	d811      	bhi.n	8004a9e <UART_SetConfig+0x33e>
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <UART_SetConfig+0x326>
 8004a7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a82:	d006      	beq.n	8004a92 <UART_SetConfig+0x332>
 8004a84:	e00b      	b.n	8004a9e <UART_SetConfig+0x33e>
 8004a86:	2300      	movs	r3, #0
 8004a88:	77fb      	strb	r3, [r7, #31]
 8004a8a:	e00d      	b.n	8004aa8 <UART_SetConfig+0x348>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	77fb      	strb	r3, [r7, #31]
 8004a90:	e00a      	b.n	8004aa8 <UART_SetConfig+0x348>
 8004a92:	2304      	movs	r3, #4
 8004a94:	77fb      	strb	r3, [r7, #31]
 8004a96:	e007      	b.n	8004aa8 <UART_SetConfig+0x348>
 8004a98:	2308      	movs	r3, #8
 8004a9a:	77fb      	strb	r3, [r7, #31]
 8004a9c:	e004      	b.n	8004aa8 <UART_SetConfig+0x348>
 8004a9e:	2310      	movs	r3, #16
 8004aa0:	77fb      	strb	r3, [r7, #31]
 8004aa2:	e001      	b.n	8004aa8 <UART_SetConfig+0x348>
 8004aa4:	2310      	movs	r3, #16
 8004aa6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ab0:	d15b      	bne.n	8004b6a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004ab2:	7ffb      	ldrb	r3, [r7, #31]
 8004ab4:	2b08      	cmp	r3, #8
 8004ab6:	d828      	bhi.n	8004b0a <UART_SetConfig+0x3aa>
 8004ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ac0 <UART_SetConfig+0x360>)
 8004aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004abe:	bf00      	nop
 8004ac0:	08004ae5 	.word	0x08004ae5
 8004ac4:	08004aed 	.word	0x08004aed
 8004ac8:	08004af5 	.word	0x08004af5
 8004acc:	08004b0b 	.word	0x08004b0b
 8004ad0:	08004afb 	.word	0x08004afb
 8004ad4:	08004b0b 	.word	0x08004b0b
 8004ad8:	08004b0b 	.word	0x08004b0b
 8004adc:	08004b0b 	.word	0x08004b0b
 8004ae0:	08004b03 	.word	0x08004b03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ae4:	f7fd fde2 	bl	80026ac <HAL_RCC_GetPCLK1Freq>
 8004ae8:	61b8      	str	r0, [r7, #24]
        break;
 8004aea:	e013      	b.n	8004b14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004aec:	f7fd fdf2 	bl	80026d4 <HAL_RCC_GetPCLK2Freq>
 8004af0:	61b8      	str	r0, [r7, #24]
        break;
 8004af2:	e00f      	b.n	8004b14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004af4:	4b4b      	ldr	r3, [pc, #300]	@ (8004c24 <UART_SetConfig+0x4c4>)
 8004af6:	61bb      	str	r3, [r7, #24]
        break;
 8004af8:	e00c      	b.n	8004b14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004afa:	f7fd fd05 	bl	8002508 <HAL_RCC_GetSysClockFreq>
 8004afe:	61b8      	str	r0, [r7, #24]
        break;
 8004b00:	e008      	b.n	8004b14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b06:	61bb      	str	r3, [r7, #24]
        break;
 8004b08:	e004      	b.n	8004b14 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	77bb      	strb	r3, [r7, #30]
        break;
 8004b12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d074      	beq.n	8004c04 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	005a      	lsls	r2, r3, #1
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	085b      	lsrs	r3, r3, #1
 8004b24:	441a      	add	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	2b0f      	cmp	r3, #15
 8004b34:	d916      	bls.n	8004b64 <UART_SetConfig+0x404>
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b3c:	d212      	bcs.n	8004b64 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	f023 030f 	bic.w	r3, r3, #15
 8004b46:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	085b      	lsrs	r3, r3, #1
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	f003 0307 	and.w	r3, r3, #7
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	89fb      	ldrh	r3, [r7, #14]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	89fa      	ldrh	r2, [r7, #14]
 8004b60:	60da      	str	r2, [r3, #12]
 8004b62:	e04f      	b.n	8004c04 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	77bb      	strb	r3, [r7, #30]
 8004b68:	e04c      	b.n	8004c04 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b6a:	7ffb      	ldrb	r3, [r7, #31]
 8004b6c:	2b08      	cmp	r3, #8
 8004b6e:	d828      	bhi.n	8004bc2 <UART_SetConfig+0x462>
 8004b70:	a201      	add	r2, pc, #4	@ (adr r2, 8004b78 <UART_SetConfig+0x418>)
 8004b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b76:	bf00      	nop
 8004b78:	08004b9d 	.word	0x08004b9d
 8004b7c:	08004ba5 	.word	0x08004ba5
 8004b80:	08004bad 	.word	0x08004bad
 8004b84:	08004bc3 	.word	0x08004bc3
 8004b88:	08004bb3 	.word	0x08004bb3
 8004b8c:	08004bc3 	.word	0x08004bc3
 8004b90:	08004bc3 	.word	0x08004bc3
 8004b94:	08004bc3 	.word	0x08004bc3
 8004b98:	08004bbb 	.word	0x08004bbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b9c:	f7fd fd86 	bl	80026ac <HAL_RCC_GetPCLK1Freq>
 8004ba0:	61b8      	str	r0, [r7, #24]
        break;
 8004ba2:	e013      	b.n	8004bcc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ba4:	f7fd fd96 	bl	80026d4 <HAL_RCC_GetPCLK2Freq>
 8004ba8:	61b8      	str	r0, [r7, #24]
        break;
 8004baa:	e00f      	b.n	8004bcc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bac:	4b1d      	ldr	r3, [pc, #116]	@ (8004c24 <UART_SetConfig+0x4c4>)
 8004bae:	61bb      	str	r3, [r7, #24]
        break;
 8004bb0:	e00c      	b.n	8004bcc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bb2:	f7fd fca9 	bl	8002508 <HAL_RCC_GetSysClockFreq>
 8004bb6:	61b8      	str	r0, [r7, #24]
        break;
 8004bb8:	e008      	b.n	8004bcc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bbe:	61bb      	str	r3, [r7, #24]
        break;
 8004bc0:	e004      	b.n	8004bcc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	77bb      	strb	r3, [r7, #30]
        break;
 8004bca:	bf00      	nop
    }

    if (pclk != 0U)
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d018      	beq.n	8004c04 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	085a      	lsrs	r2, r3, #1
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	441a      	add	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	2b0f      	cmp	r3, #15
 8004bea:	d909      	bls.n	8004c00 <UART_SetConfig+0x4a0>
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bf2:	d205      	bcs.n	8004c00 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	60da      	str	r2, [r3, #12]
 8004bfe:	e001      	b.n	8004c04 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004c10:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3720      	adds	r7, #32
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	40007c00 	.word	0x40007c00
 8004c20:	40023800 	.word	0x40023800
 8004c24:	00f42400 	.word	0x00f42400

08004c28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c34:	f003 0308 	and.w	r3, r3, #8
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00a      	beq.n	8004c52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00a      	beq.n	8004c74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	430a      	orrs	r2, r1
 8004c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00a      	beq.n	8004c96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9a:	f003 0304 	and.w	r3, r3, #4
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00a      	beq.n	8004cb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cbc:	f003 0310 	and.w	r3, r3, #16
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00a      	beq.n	8004cda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cde:	f003 0320 	and.w	r3, r3, #32
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00a      	beq.n	8004cfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d01a      	beq.n	8004d3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d26:	d10a      	bne.n	8004d3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00a      	beq.n	8004d60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	605a      	str	r2, [r3, #4]
  }
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b098      	sub	sp, #96	@ 0x60
 8004d70:	af02      	add	r7, sp, #8
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d7c:	f7fc f886 	bl	8000e8c <HAL_GetTick>
 8004d80:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0308 	and.w	r3, r3, #8
 8004d8c:	2b08      	cmp	r3, #8
 8004d8e:	d12e      	bne.n	8004dee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f88c 	bl	8004ebc <UART_WaitOnFlagUntilTimeout>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d021      	beq.n	8004dee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004db2:	e853 3f00 	ldrex	r3, [r3]
 8004db6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dbe:	653b      	str	r3, [r7, #80]	@ 0x50
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004dc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dcc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004dce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004dd0:	e841 2300 	strex	r3, r2, [r1]
 8004dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004dd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1e6      	bne.n	8004daa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2220      	movs	r2, #32
 8004de0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e062      	b.n	8004eb4 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0304 	and.w	r3, r3, #4
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d149      	bne.n	8004e90 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dfc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e04:	2200      	movs	r2, #0
 8004e06:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f856 	bl	8004ebc <UART_WaitOnFlagUntilTimeout>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d03c      	beq.n	8004e90 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1e:	e853 3f00 	ldrex	r3, [r3]
 8004e22:	623b      	str	r3, [r7, #32]
   return(result);
 8004e24:	6a3b      	ldr	r3, [r7, #32]
 8004e26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	461a      	mov	r2, r3
 8004e32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e34:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e36:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e3c:	e841 2300 	strex	r3, r2, [r1]
 8004e40:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1e6      	bne.n	8004e16 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	3308      	adds	r3, #8
 8004e4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	e853 3f00 	ldrex	r3, [r3]
 8004e56:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f023 0301 	bic.w	r3, r3, #1
 8004e5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	3308      	adds	r3, #8
 8004e66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e68:	61fa      	str	r2, [r7, #28]
 8004e6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6c:	69b9      	ldr	r1, [r7, #24]
 8004e6e:	69fa      	ldr	r2, [r7, #28]
 8004e70:	e841 2300 	strex	r3, r2, [r1]
 8004e74:	617b      	str	r3, [r7, #20]
   return(result);
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1e5      	bne.n	8004e48 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e011      	b.n	8004eb4 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2220      	movs	r2, #32
 8004e94:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3758      	adds	r7, #88	@ 0x58
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	603b      	str	r3, [r7, #0]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ecc:	e04f      	b.n	8004f6e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed4:	d04b      	beq.n	8004f6e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ed6:	f7fb ffd9 	bl	8000e8c <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d302      	bcc.n	8004eec <UART_WaitOnFlagUntilTimeout+0x30>
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e04e      	b.n	8004f8e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0304 	and.w	r3, r3, #4
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d037      	beq.n	8004f6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	2b80      	cmp	r3, #128	@ 0x80
 8004f02:	d034      	beq.n	8004f6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	2b40      	cmp	r3, #64	@ 0x40
 8004f08:	d031      	beq.n	8004f6e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	69db      	ldr	r3, [r3, #28]
 8004f10:	f003 0308 	and.w	r3, r3, #8
 8004f14:	2b08      	cmp	r3, #8
 8004f16:	d110      	bne.n	8004f3a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2208      	movs	r2, #8
 8004f1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 f85e 	bl	8004fe2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2208      	movs	r2, #8
 8004f2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e029      	b.n	8004f8e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	69db      	ldr	r3, [r3, #28]
 8004f40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f48:	d111      	bne.n	8004f6e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f000 f844 	bl	8004fe2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e00f      	b.n	8004f8e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	69da      	ldr	r2, [r3, #28]
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	4013      	ands	r3, r2
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	bf0c      	ite	eq
 8004f7e:	2301      	moveq	r3, #1
 8004f80:	2300      	movne	r3, #0
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	461a      	mov	r2, r3
 8004f86:	79fb      	ldrb	r3, [r7, #7]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d0a0      	beq.n	8004ece <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b089      	sub	sp, #36	@ 0x24
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	e853 3f00 	ldrex	r3, [r3]
 8004faa:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004fb2:	61fb      	str	r3, [r7, #28]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	461a      	mov	r2, r3
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	61bb      	str	r3, [r7, #24]
 8004fbe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc0:	6979      	ldr	r1, [r7, #20]
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	e841 2300 	strex	r3, r2, [r1]
 8004fc8:	613b      	str	r3, [r7, #16]
   return(result);
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1e6      	bne.n	8004f9e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004fd6:	bf00      	nop
 8004fd8:	3724      	adds	r7, #36	@ 0x24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b095      	sub	sp, #84	@ 0x54
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ff2:	e853 3f00 	ldrex	r3, [r3]
 8004ff6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ffa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	461a      	mov	r2, r3
 8005006:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005008:	643b      	str	r3, [r7, #64]	@ 0x40
 800500a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800500e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005010:	e841 2300 	strex	r3, r2, [r1]
 8005014:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1e6      	bne.n	8004fea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3308      	adds	r3, #8
 8005022:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005024:	6a3b      	ldr	r3, [r7, #32]
 8005026:	e853 3f00 	ldrex	r3, [r3]
 800502a:	61fb      	str	r3, [r7, #28]
   return(result);
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	f023 0301 	bic.w	r3, r3, #1
 8005032:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	3308      	adds	r3, #8
 800503a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800503c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800503e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005040:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005042:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005044:	e841 2300 	strex	r3, r2, [r1]
 8005048:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800504a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1e5      	bne.n	800501c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005054:	2b01      	cmp	r3, #1
 8005056:	d118      	bne.n	800508a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	e853 3f00 	ldrex	r3, [r3]
 8005064:	60bb      	str	r3, [r7, #8]
   return(result);
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	f023 0310 	bic.w	r3, r3, #16
 800506c:	647b      	str	r3, [r7, #68]	@ 0x44
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	461a      	mov	r2, r3
 8005074:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005076:	61bb      	str	r3, [r7, #24]
 8005078:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507a:	6979      	ldr	r1, [r7, #20]
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	e841 2300 	strex	r3, r2, [r1]
 8005082:	613b      	str	r3, [r7, #16]
   return(result);
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1e6      	bne.n	8005058 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2220      	movs	r2, #32
 800508e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800509e:	bf00      	nop
 80050a0:	3754      	adds	r7, #84	@ 0x54
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b090      	sub	sp, #64	@ 0x40
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050c0:	d037      	beq.n	8005132 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 80050c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050c4:	2200      	movs	r2, #0
 80050c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80050ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	3308      	adds	r3, #8
 80050d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d4:	e853 3f00 	ldrex	r3, [r3]
 80050d8:	623b      	str	r3, [r7, #32]
   return(result);
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	3308      	adds	r3, #8
 80050e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80050ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80050ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050f2:	e841 2300 	strex	r3, r2, [r1]
 80050f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1e5      	bne.n	80050ca <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	e853 3f00 	ldrex	r3, [r3]
 800510a:	60fb      	str	r3, [r7, #12]
   return(result);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005112:	637b      	str	r3, [r7, #52]	@ 0x34
 8005114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	461a      	mov	r2, r3
 800511a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800511c:	61fb      	str	r3, [r7, #28]
 800511e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005120:	69b9      	ldr	r1, [r7, #24]
 8005122:	69fa      	ldr	r2, [r7, #28]
 8005124:	e841 2300 	strex	r3, r2, [r1]
 8005128:	617b      	str	r3, [r7, #20]
   return(result);
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1e6      	bne.n	80050fe <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005130:	e002      	b.n	8005138 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8005132:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005134:	f7ff fae0 	bl	80046f8 <HAL_UART_TxCpltCallback>
}
 8005138:	bf00      	nop
 800513a:	3740      	adds	r7, #64	@ 0x40
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800514c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f7ff fadc 	bl	800470c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005154:	bf00      	nop
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005168:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800516e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005176:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005182:	2b80      	cmp	r3, #128	@ 0x80
 8005184:	d109      	bne.n	800519a <UART_DMAError+0x3e>
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	2b21      	cmp	r3, #33	@ 0x21
 800518a:	d106      	bne.n	800519a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	2200      	movs	r2, #0
 8005190:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8005194:	6978      	ldr	r0, [r7, #20]
 8005196:	f7ff fefe 	bl	8004f96 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051a4:	2b40      	cmp	r3, #64	@ 0x40
 80051a6:	d109      	bne.n	80051bc <UART_DMAError+0x60>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2b22      	cmp	r3, #34	@ 0x22
 80051ac:	d106      	bne.n	80051bc <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80051b6:	6978      	ldr	r0, [r7, #20]
 80051b8:	f7ff ff13 	bl	8004fe2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051c2:	f043 0210 	orr.w	r2, r3, #16
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051cc:	6978      	ldr	r0, [r7, #20]
 80051ce:	f7ff faa7 	bl	8004720 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051d2:	bf00      	nop
 80051d4:	3718      	adds	r7, #24
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b084      	sub	sp, #16
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f7ff fa91 	bl	8004720 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051fe:	bf00      	nop
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b088      	sub	sp, #32
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	e853 3f00 	ldrex	r3, [r3]
 800521a:	60bb      	str	r3, [r7, #8]
   return(result);
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005222:	61fb      	str	r3, [r7, #28]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	461a      	mov	r2, r3
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	61bb      	str	r3, [r7, #24]
 800522e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005230:	6979      	ldr	r1, [r7, #20]
 8005232:	69ba      	ldr	r2, [r7, #24]
 8005234:	e841 2300 	strex	r3, r2, [r1]
 8005238:	613b      	str	r3, [r7, #16]
   return(result);
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1e6      	bne.n	800520e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2220      	movs	r2, #32
 8005244:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7ff fa53 	bl	80046f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005252:	bf00      	nop
 8005254:	3720      	adds	r7, #32
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <memset>:
 800525a:	4402      	add	r2, r0
 800525c:	4603      	mov	r3, r0
 800525e:	4293      	cmp	r3, r2
 8005260:	d100      	bne.n	8005264 <memset+0xa>
 8005262:	4770      	bx	lr
 8005264:	f803 1b01 	strb.w	r1, [r3], #1
 8005268:	e7f9      	b.n	800525e <memset+0x4>
	...

0800526c <__libc_init_array>:
 800526c:	b570      	push	{r4, r5, r6, lr}
 800526e:	4d0d      	ldr	r5, [pc, #52]	@ (80052a4 <__libc_init_array+0x38>)
 8005270:	4c0d      	ldr	r4, [pc, #52]	@ (80052a8 <__libc_init_array+0x3c>)
 8005272:	1b64      	subs	r4, r4, r5
 8005274:	10a4      	asrs	r4, r4, #2
 8005276:	2600      	movs	r6, #0
 8005278:	42a6      	cmp	r6, r4
 800527a:	d109      	bne.n	8005290 <__libc_init_array+0x24>
 800527c:	4d0b      	ldr	r5, [pc, #44]	@ (80052ac <__libc_init_array+0x40>)
 800527e:	4c0c      	ldr	r4, [pc, #48]	@ (80052b0 <__libc_init_array+0x44>)
 8005280:	f000 f818 	bl	80052b4 <_init>
 8005284:	1b64      	subs	r4, r4, r5
 8005286:	10a4      	asrs	r4, r4, #2
 8005288:	2600      	movs	r6, #0
 800528a:	42a6      	cmp	r6, r4
 800528c:	d105      	bne.n	800529a <__libc_init_array+0x2e>
 800528e:	bd70      	pop	{r4, r5, r6, pc}
 8005290:	f855 3b04 	ldr.w	r3, [r5], #4
 8005294:	4798      	blx	r3
 8005296:	3601      	adds	r6, #1
 8005298:	e7ee      	b.n	8005278 <__libc_init_array+0xc>
 800529a:	f855 3b04 	ldr.w	r3, [r5], #4
 800529e:	4798      	blx	r3
 80052a0:	3601      	adds	r6, #1
 80052a2:	e7f2      	b.n	800528a <__libc_init_array+0x1e>
 80052a4:	080052f4 	.word	0x080052f4
 80052a8:	080052f4 	.word	0x080052f4
 80052ac:	080052f4 	.word	0x080052f4
 80052b0:	080052f8 	.word	0x080052f8

080052b4 <_init>:
 80052b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052b6:	bf00      	nop
 80052b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ba:	bc08      	pop	{r3}
 80052bc:	469e      	mov	lr, r3
 80052be:	4770      	bx	lr

080052c0 <_fini>:
 80052c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052c2:	bf00      	nop
 80052c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052c6:	bc08      	pop	{r3}
 80052c8:	469e      	mov	lr, r3
 80052ca:	4770      	bx	lr
