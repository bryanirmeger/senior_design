
imu-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b48  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08005d40  08005d40  00006d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d7c  08005d7c  00007154  2**0
                  CONTENTS
  4 .ARM          00000008  08005d7c  08005d7c  00006d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d84  08005d84  00007154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d84  08005d84  00006d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d88  08005d88  00006d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08005d8c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000014  08005da0  00007014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000b4  08005e40  000070b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000008a4  20000154  08005ee0  00007154  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200009f8  08005ee0  000079f8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00007154  2**0
                  CONTENTS, READONLY
 14 .debug_info   00016e4a  00000000  00000000  00007182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000301f  00000000  00000000  0001dfcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001150  00000000  00000000  00020ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d67  00000000  00000000  00022140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002937d  00000000  00000000  00022ea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016f48  00000000  00000000  0004c224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fb3f7  00000000  00000000  0006316c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0015e563  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004878  00000000  00000000  0015e5a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000053  00000000  00000000  00162e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000154 	.word	0x20000154
 8000214:	00000000 	.word	0x00000000
 8000218:	08005d28 	.word	0x08005d28

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000158 	.word	0x20000158
 8000234:	08005d28 	.word	0x08005d28

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <BNO055_Init_I2C>:
const char reset_sensor[3]	= {REG_WRITE, BNO055_SYS_TRIGGER, 0x01 << 5};
uint8_t get_readings[1] 	= {BNO055_ACC_DATA_X_LSB};


// Configure BNO sensor
void BNO055_Init_I2C(I2C_HandleTypeDef* hi2c_device) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b08e      	sub	sp, #56	@ 0x38
 800052c:	af02      	add	r7, sp, #8
 800052e:	6078      	str	r0, [r7, #4]
	// Select BNO055 config mode
	uint8_t opr_config_mode[2] = {BNO055_OPR_MODE, CONFIGMODE};
 8000530:	233d      	movs	r3, #61	@ 0x3d
 8000532:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, opr_config_mode, sizeof(opr_config_mode), 10);
 8000534:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8000538:	230a      	movs	r3, #10
 800053a:	9300      	str	r3, [sp, #0]
 800053c:	2302      	movs	r3, #2
 800053e:	2150      	movs	r1, #80	@ 0x50
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	f002 fc39 	bl	8002db8 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8000546:	200a      	movs	r0, #10
 8000548:	f001 fa66 	bl	8001a18 <HAL_Delay>

	// Select page 1 to configure sensors
	uint8_t conf_page1[2] = {BNO055_PAGE_ID, 0x01};
 800054c:	f240 1307 	movw	r3, #263	@ 0x107
 8000550:	853b      	strh	r3, [r7, #40]	@ 0x28
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_page1, sizeof(conf_page1), 10);
 8000552:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000556:	230a      	movs	r3, #10
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2302      	movs	r3, #2
 800055c:	2150      	movs	r1, #80	@ 0x50
 800055e:	6878      	ldr	r0, [r7, #4]
 8000560:	f002 fc2a 	bl	8002db8 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8000564:	200a      	movs	r0, #10
 8000566:	f001 fa57 	bl	8001a18 <HAL_Delay>

	// Configure ACC (Page 1; 0x08)
	uint8_t conf_acc[2] = {BNO055_ACC_CONFIG, APwrMode << 5 | Abw << 2 | Ascale};
 800056a:	2308      	movs	r3, #8
 800056c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8000570:	4b50      	ldr	r3, [pc, #320]	@ (80006b4 <BNO055_Init_I2C+0x18c>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	015b      	lsls	r3, r3, #5
 8000576:	b25a      	sxtb	r2, r3
 8000578:	4b4f      	ldr	r3, [pc, #316]	@ (80006b8 <BNO055_Init_I2C+0x190>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	b25b      	sxtb	r3, r3
 8000580:	4313      	orrs	r3, r2
 8000582:	b25a      	sxtb	r2, r3
 8000584:	4b4d      	ldr	r3, [pc, #308]	@ (80006bc <BNO055_Init_I2C+0x194>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	b25b      	sxtb	r3, r3
 800058a:	4313      	orrs	r3, r2
 800058c:	b25b      	sxtb	r3, r3
 800058e:	b2db      	uxtb	r3, r3
 8000590:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_acc, sizeof(conf_acc), 10);
 8000594:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000598:	230a      	movs	r3, #10
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	2302      	movs	r3, #2
 800059e:	2150      	movs	r1, #80	@ 0x50
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f002 fc09 	bl	8002db8 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80005a6:	200a      	movs	r0, #10
 80005a8:	f001 fa36 	bl	8001a18 <HAL_Delay>

	// Configure GYR
	uint8_t conf_gyro[2] = {BNO055_GYRO_CONFIG_0, Gbw << 3 | Gscale};
 80005ac:	230a      	movs	r3, #10
 80005ae:	f887 3020 	strb.w	r3, [r7, #32]
 80005b2:	4b43      	ldr	r3, [pc, #268]	@ (80006c0 <BNO055_Init_I2C+0x198>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	00db      	lsls	r3, r3, #3
 80005b8:	b25a      	sxtb	r2, r3
 80005ba:	4b42      	ldr	r3, [pc, #264]	@ (80006c4 <BNO055_Init_I2C+0x19c>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	b25b      	sxtb	r3, r3
 80005c0:	4313      	orrs	r3, r2
 80005c2:	b25b      	sxtb	r3, r3
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_gyro, sizeof(conf_gyro), 10);
 80005ca:	f107 0220 	add.w	r2, r7, #32
 80005ce:	230a      	movs	r3, #10
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2302      	movs	r3, #2
 80005d4:	2150      	movs	r1, #80	@ 0x50
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f002 fbee 	bl	8002db8 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80005dc:	200a      	movs	r0, #10
 80005de:	f001 fa1b 	bl	8001a18 <HAL_Delay>

	uint8_t conf_gyro_pwr[2] = {BNO055_GYRO_CONFIG_1, GPwrMode};
 80005e2:	230b      	movs	r3, #11
 80005e4:	773b      	strb	r3, [r7, #28]
 80005e6:	4b38      	ldr	r3, [pc, #224]	@ (80006c8 <BNO055_Init_I2C+0x1a0>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	777b      	strb	r3, [r7, #29]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_gyro_pwr, sizeof(conf_gyro_pwr), 10);
 80005ec:	f107 021c 	add.w	r2, r7, #28
 80005f0:	230a      	movs	r3, #10
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	2302      	movs	r3, #2
 80005f6:	2150      	movs	r1, #80	@ 0x50
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f002 fbdd 	bl	8002db8 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80005fe:	200a      	movs	r0, #10
 8000600:	f001 fa0a 	bl	8001a18 <HAL_Delay>

	// Configure MAG
	uint8_t conf_mag_pwr[4] = {REG_WRITE, BNO055_MAG_CONFIG, 0x01, MPwrMode << 5 | MOpMode << 3 | Modr};
 8000604:	2300      	movs	r3, #0
 8000606:	763b      	strb	r3, [r7, #24]
 8000608:	2309      	movs	r3, #9
 800060a:	767b      	strb	r3, [r7, #25]
 800060c:	2301      	movs	r3, #1
 800060e:	76bb      	strb	r3, [r7, #26]
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <BNO055_Init_I2C+0x1a4>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	015b      	lsls	r3, r3, #5
 8000616:	b25a      	sxtb	r2, r3
 8000618:	4b2d      	ldr	r3, [pc, #180]	@ (80006d0 <BNO055_Init_I2C+0x1a8>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	00db      	lsls	r3, r3, #3
 800061e:	b25b      	sxtb	r3, r3
 8000620:	4313      	orrs	r3, r2
 8000622:	b25a      	sxtb	r2, r3
 8000624:	4b2b      	ldr	r3, [pc, #172]	@ (80006d4 <BNO055_Init_I2C+0x1ac>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	b25b      	sxtb	r3, r3
 800062a:	4313      	orrs	r3, r2
 800062c:	b25b      	sxtb	r3, r3
 800062e:	b2db      	uxtb	r3, r3
 8000630:	76fb      	strb	r3, [r7, #27]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_mag_pwr, sizeof(conf_mag_pwr), 10);
 8000632:	f107 0218 	add.w	r2, r7, #24
 8000636:	230a      	movs	r3, #10
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2304      	movs	r3, #4
 800063c:	2150      	movs	r1, #80	@ 0x50
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f002 fbba 	bl	8002db8 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8000644:	200a      	movs	r0, #10
 8000646:	f001 f9e7 	bl	8001a18 <HAL_Delay>

	// Select BNO055 gyro temperature source 
	//PutHexString(START_BYTE, BNO055_TEMP_SOURCE, 0x01 );
	
	// Select page 0
	uint8_t conf_page0[2] = {BNO055_PAGE_ID, 0x00};
 800064a:	2307      	movs	r3, #7
 800064c:	82bb      	strh	r3, [r7, #20]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_page0, sizeof(conf_page0), 10);
 800064e:	f107 0214 	add.w	r2, r7, #20
 8000652:	230a      	movs	r3, #10
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	2302      	movs	r3, #2
 8000658:	2150      	movs	r1, #80	@ 0x50
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f002 fbac 	bl	8002db8 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8000660:	200a      	movs	r0, #10
 8000662:	f001 f9d9 	bl	8001a18 <HAL_Delay>
	//const char conf_units[4] = {REG_WRITE, BNO055_UNIT_SEL, 0x01, 0x82};
	//SendAccelData(USART1, (uint8_t*)conf_units);
	//HAL_Delay(50);

	// Select BNO055 system power mode (Page 0; 0x3E)
	uint8_t pwr_pwrmode[2] = {BNO055_PWR_MODE, PWRMode};
 8000666:	233e      	movs	r3, #62	@ 0x3e
 8000668:	743b      	strb	r3, [r7, #16]
 800066a:	4b1b      	ldr	r3, [pc, #108]	@ (80006d8 <BNO055_Init_I2C+0x1b0>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, pwr_pwrmode, sizeof(pwr_pwrmode), 10);
 8000670:	f107 0210 	add.w	r2, r7, #16
 8000674:	230a      	movs	r3, #10
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	2302      	movs	r3, #2
 800067a:	2150      	movs	r1, #80	@ 0x50
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f002 fb9b 	bl	8002db8 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8000682:	200a      	movs	r0, #10
 8000684:	f001 f9c8 	bl	8001a18 <HAL_Delay>

	// Select BNO055 system operation mode (Page 0; 0x3D)
	uint8_t opr_oprmode[2] = {BNO055_OPR_MODE, OPRMode};
 8000688:	233d      	movs	r3, #61	@ 0x3d
 800068a:	733b      	strb	r3, [r7, #12]
 800068c:	4b13      	ldr	r3, [pc, #76]	@ (80006dc <BNO055_Init_I2C+0x1b4>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, opr_oprmode, sizeof(opr_oprmode), 10);
 8000692:	f107 020c 	add.w	r2, r7, #12
 8000696:	230a      	movs	r3, #10
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2302      	movs	r3, #2
 800069c:	2150      	movs	r1, #80	@ 0x50
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f002 fb8a 	bl	8002db8 <HAL_I2C_Master_Transmit>
	HAL_Delay(50);
 80006a4:	2032      	movs	r0, #50	@ 0x32
 80006a6:	f001 f9b7 	bl	8001a18 <HAL_Delay>
}
 80006aa:	bf00      	nop
 80006ac:	3730      	adds	r7, #48	@ 0x30
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000172 	.word	0x20000172
 80006b8:	20000002 	.word	0x20000002
 80006bc:	20000001 	.word	0x20000001
 80006c0:	20000000 	.word	0x20000000
 80006c4:	20000171 	.word	0x20000171
 80006c8:	20000170 	.word	0x20000170
 80006cc:	20000173 	.word	0x20000173
 80006d0:	20000003 	.word	0x20000003
 80006d4:	20000004 	.word	0x20000004
 80006d8:	20000174 	.word	0x20000174
 80006dc:	20000005 	.word	0x20000005

080006e0 <GetAccelData>:



// Send data to BNO055 over I2C
uint8_t GetAccelData(I2C_HandleTypeDef* hi2c_device, uint8_t* str) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af04      	add	r7, sp, #16
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
	uint8_t status;
	status = HAL_I2C_Mem_Read(hi2c_device, BNO055_I2C_ADDR_LO<<1, BNO055_ACC_DATA_X_LSB, I2C_MEMADD_SIZE_8BIT, str, IMU_NUMBER_OF_BYTES,100);
 80006ea:	2364      	movs	r3, #100	@ 0x64
 80006ec:	9302      	str	r3, [sp, #8]
 80006ee:	2312      	movs	r3, #18
 80006f0:	9301      	str	r3, [sp, #4]
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	9300      	str	r3, [sp, #0]
 80006f6:	2301      	movs	r3, #1
 80006f8:	2208      	movs	r2, #8
 80006fa:	2150      	movs	r1, #80	@ 0x50
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f002 fc73 	bl	8002fe8 <HAL_I2C_Mem_Read>
 8000702:	4603      	mov	r3, r0
 8000704:	73fb      	strb	r3, [r7, #15]
  //while (HAL_I2C_GetState(hi2c_device) != HAL_I2C_STATE_READY) {} 
	return status;
 8000706:	7bfb      	ldrb	r3, [r7, #15]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af02      	add	r7, sp, #8
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	f023 030f 	bic.w	r3, r3, #15
 8000720:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	011b      	lsls	r3, r3, #4
 8000726:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000728:	7bfb      	ldrb	r3, [r7, #15]
 800072a:	f043 030c 	orr.w	r3, r3, #12
 800072e:	b2db      	uxtb	r3, r3
 8000730:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	f043 0308 	orr.w	r3, r3, #8
 8000738:	b2db      	uxtb	r3, r3
 800073a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800073c:	7bbb      	ldrb	r3, [r7, #14]
 800073e:	f043 030c 	orr.w	r3, r3, #12
 8000742:	b2db      	uxtb	r3, r3
 8000744:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000746:	7bbb      	ldrb	r3, [r7, #14]
 8000748:	f043 0308 	orr.w	r3, r3, #8
 800074c:	b2db      	uxtb	r3, r3
 800074e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000750:	f107 0208 	add.w	r2, r7, #8
 8000754:	2364      	movs	r3, #100	@ 0x64
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2304      	movs	r3, #4
 800075a:	214e      	movs	r1, #78	@ 0x4e
 800075c:	4803      	ldr	r0, [pc, #12]	@ (800076c <lcd_send_cmd+0x5c>)
 800075e:	f002 fb2b 	bl	8002db8 <HAL_I2C_Master_Transmit>
}
 8000762:	bf00      	nop
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000260 	.word	0x20000260

08000770 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af02      	add	r7, sp, #8
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	f023 030f 	bic.w	r3, r3, #15
 8000780:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	011b      	lsls	r3, r3, #4
 8000786:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000788:	7bfb      	ldrb	r3, [r7, #15]
 800078a:	f043 030d 	orr.w	r3, r3, #13
 800078e:	b2db      	uxtb	r3, r3
 8000790:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	f043 0309 	orr.w	r3, r3, #9
 8000798:	b2db      	uxtb	r3, r3
 800079a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800079c:	7bbb      	ldrb	r3, [r7, #14]
 800079e:	f043 030d 	orr.w	r3, r3, #13
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80007a6:	7bbb      	ldrb	r3, [r7, #14]
 80007a8:	f043 0309 	orr.w	r3, r3, #9
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80007b0:	f107 0208 	add.w	r2, r7, #8
 80007b4:	2364      	movs	r3, #100	@ 0x64
 80007b6:	9300      	str	r3, [sp, #0]
 80007b8:	2304      	movs	r3, #4
 80007ba:	214e      	movs	r1, #78	@ 0x4e
 80007bc:	4803      	ldr	r0, [pc, #12]	@ (80007cc <lcd_send_data+0x5c>)
 80007be:	f002 fafb 	bl	8002db8 <HAL_I2C_Master_Transmit>
}
 80007c2:	bf00      	nop
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000260 	.word	0x20000260

080007d0 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
    switch (row)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d003      	beq.n	80007e8 <lcd_put_cur+0x18>
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d005      	beq.n	80007f2 <lcd_put_cur+0x22>
 80007e6:	e009      	b.n	80007fc <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007ee:	603b      	str	r3, [r7, #0]
            break;
 80007f0:	e004      	b.n	80007fc <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80007f8:	603b      	str	r3, [r7, #0]
            break;
 80007fa:	bf00      	nop
    }

    lcd_send_cmd (col);
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff ff85 	bl	8000710 <lcd_send_cmd>
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <lcd_init>:


void lcd_init (void)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000812:	2032      	movs	r0, #50	@ 0x32
 8000814:	f001 f900 	bl	8001a18 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000818:	2030      	movs	r0, #48	@ 0x30
 800081a:	f7ff ff79 	bl	8000710 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800081e:	2005      	movs	r0, #5
 8000820:	f001 f8fa 	bl	8001a18 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000824:	2030      	movs	r0, #48	@ 0x30
 8000826:	f7ff ff73 	bl	8000710 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800082a:	2001      	movs	r0, #1
 800082c:	f001 f8f4 	bl	8001a18 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000830:	2030      	movs	r0, #48	@ 0x30
 8000832:	f7ff ff6d 	bl	8000710 <lcd_send_cmd>
	HAL_Delay(10);
 8000836:	200a      	movs	r0, #10
 8000838:	f001 f8ee 	bl	8001a18 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800083c:	2020      	movs	r0, #32
 800083e:	f7ff ff67 	bl	8000710 <lcd_send_cmd>
	HAL_Delay(10);
 8000842:	200a      	movs	r0, #10
 8000844:	f001 f8e8 	bl	8001a18 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000848:	2028      	movs	r0, #40	@ 0x28
 800084a:	f7ff ff61 	bl	8000710 <lcd_send_cmd>
	HAL_Delay(1);
 800084e:	2001      	movs	r0, #1
 8000850:	f001 f8e2 	bl	8001a18 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000854:	2008      	movs	r0, #8
 8000856:	f7ff ff5b 	bl	8000710 <lcd_send_cmd>
	HAL_Delay(1);
 800085a:	2001      	movs	r0, #1
 800085c:	f001 f8dc 	bl	8001a18 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000860:	2001      	movs	r0, #1
 8000862:	f7ff ff55 	bl	8000710 <lcd_send_cmd>
	HAL_Delay(1);
 8000866:	2001      	movs	r0, #1
 8000868:	f001 f8d6 	bl	8001a18 <HAL_Delay>
	HAL_Delay(1);
 800086c:	2001      	movs	r0, #1
 800086e:	f001 f8d3 	bl	8001a18 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000872:	2006      	movs	r0, #6
 8000874:	f7ff ff4c 	bl	8000710 <lcd_send_cmd>
	HAL_Delay(1);
 8000878:	2001      	movs	r0, #1
 800087a:	f001 f8cd 	bl	8001a18 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800087e:	200c      	movs	r0, #12
 8000880:	f7ff ff46 	bl	8000710 <lcd_send_cmd>
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}

08000888 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000890:	e006      	b.n	80008a0 <lcd_send_string+0x18>
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	1c5a      	adds	r2, r3, #1
 8000896:	607a      	str	r2, [r7, #4]
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff ff68 	bl	8000770 <lcd_send_data>
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d1f4      	bne.n	8000892 <lcd_send_string+0xa>
}
 80008a8:	bf00      	nop
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b8:	f001 f851 	bl	800195e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008bc:	f000 fa00 	bl	8000cc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c0:	f000 fbf2 	bl	80010a8 <MX_GPIO_Init>
  MX_DMA_Init();
 80008c4:	f000 fbca 	bl	800105c <MX_DMA_Init>
  MX_ETH_Init();
 80008c8:	f000 fa6c 	bl	8000da4 <MX_ETH_Init>
  MX_I2C2_Init();
 80008cc:	f000 faf8 	bl	8000ec0 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 80008d0:	f000 fb66 	bl	8000fa0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008d4:	f000 fb94 	bl	8001000 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 80008d8:	f000 fb32 	bl	8000f40 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80008dc:	f000 fab0 	bl	8000e40 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80008e0:	f7ff ff95 	bl	800080e <lcd_init>
  lcd_send_string("X=    Y=    Z=");
 80008e4:	48b6      	ldr	r0, [pc, #728]	@ (8000bc0 <main+0x30c>)
 80008e6:	f7ff ffcf 	bl	8000888 <lcd_send_string>
  BNO055_Init_I2C(&hi2c2);
 80008ea:	48b6      	ldr	r0, [pc, #728]	@ (8000bc4 <main+0x310>)
 80008ec:	f7ff fe1c 	bl	8000528 <BNO055_Init_I2C>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(300);
 80008f0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80008f4:	f001 f890 	bl	8001a18 <HAL_Delay>
	  GetAccelData(&hi2c2, (uint8_t*)imu_readings);
 80008f8:	49b3      	ldr	r1, [pc, #716]	@ (8000bc8 <main+0x314>)
 80008fa:	48b2      	ldr	r0, [pc, #712]	@ (8000bc4 <main+0x310>)
 80008fc:	f7ff fef0 	bl	80006e0 <GetAccelData>
	  accel_data[0] = (((int16_t)((uint8_t *)(imu_readings))[1] << 8) | ((uint8_t *)(imu_readings))[0]);      // Turn the MSB and LSB into a signed 16-bit value
 8000900:	4bb1      	ldr	r3, [pc, #708]	@ (8000bc8 <main+0x314>)
 8000902:	785b      	ldrb	r3, [r3, #1]
 8000904:	021b      	lsls	r3, r3, #8
 8000906:	b21a      	sxth	r2, r3
 8000908:	4baf      	ldr	r3, [pc, #700]	@ (8000bc8 <main+0x314>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	b21b      	sxth	r3, r3
 800090e:	4313      	orrs	r3, r2
 8000910:	b21a      	sxth	r2, r3
 8000912:	4bae      	ldr	r3, [pc, #696]	@ (8000bcc <main+0x318>)
 8000914:	801a      	strh	r2, [r3, #0]
	  accel_data[1] = (((int16_t)((uint8_t *)(imu_readings))[3] << 8) | ((uint8_t *)(imu_readings))[2]);
 8000916:	4bac      	ldr	r3, [pc, #688]	@ (8000bc8 <main+0x314>)
 8000918:	78db      	ldrb	r3, [r3, #3]
 800091a:	021b      	lsls	r3, r3, #8
 800091c:	b21a      	sxth	r2, r3
 800091e:	4baa      	ldr	r3, [pc, #680]	@ (8000bc8 <main+0x314>)
 8000920:	789b      	ldrb	r3, [r3, #2]
 8000922:	b21b      	sxth	r3, r3
 8000924:	4313      	orrs	r3, r2
 8000926:	b21a      	sxth	r2, r3
 8000928:	4ba8      	ldr	r3, [pc, #672]	@ (8000bcc <main+0x318>)
 800092a:	805a      	strh	r2, [r3, #2]
	  accel_data[2] = (((int16_t)((uint8_t *)(imu_readings))[5] << 8) | ((uint8_t *)(imu_readings))[4]);
 800092c:	4ba6      	ldr	r3, [pc, #664]	@ (8000bc8 <main+0x314>)
 800092e:	795b      	ldrb	r3, [r3, #5]
 8000930:	021b      	lsls	r3, r3, #8
 8000932:	b21a      	sxth	r2, r3
 8000934:	4ba4      	ldr	r3, [pc, #656]	@ (8000bc8 <main+0x314>)
 8000936:	791b      	ldrb	r3, [r3, #4]
 8000938:	b21b      	sxth	r3, r3
 800093a:	4313      	orrs	r3, r2
 800093c:	b21a      	sxth	r2, r3
 800093e:	4ba3      	ldr	r3, [pc, #652]	@ (8000bcc <main+0x318>)
 8000940:	809a      	strh	r2, [r3, #4]

	  // Get acceleration data in m/s2
	  acc_x = ((float)(accel_data[0]))/100.0f;
 8000942:	4ba2      	ldr	r3, [pc, #648]	@ (8000bcc <main+0x318>)
 8000944:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000948:	ee07 3a90 	vmov	s15, r3
 800094c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000950:	eddf 6a9f 	vldr	s13, [pc, #636]	@ 8000bd0 <main+0x31c>
 8000954:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000958:	4b9e      	ldr	r3, [pc, #632]	@ (8000bd4 <main+0x320>)
 800095a:	edc3 7a00 	vstr	s15, [r3]
	  acc_y = ((float)(accel_data[1]))/100.0f;
 800095e:	4b9b      	ldr	r3, [pc, #620]	@ (8000bcc <main+0x318>)
 8000960:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000964:	ee07 3a90 	vmov	s15, r3
 8000968:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800096c:	eddf 6a98 	vldr	s13, [pc, #608]	@ 8000bd0 <main+0x31c>
 8000970:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000974:	4b98      	ldr	r3, [pc, #608]	@ (8000bd8 <main+0x324>)
 8000976:	edc3 7a00 	vstr	s15, [r3]
	  acc_z = ((float)(accel_data[2]))/100.0f;
 800097a:	4b94      	ldr	r3, [pc, #592]	@ (8000bcc <main+0x318>)
 800097c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000980:	ee07 3a90 	vmov	s15, r3
 8000984:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000988:	eddf 6a91 	vldr	s13, [pc, #580]	@ 8000bd0 <main+0x31c>
 800098c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000990:	4b92      	ldr	r3, [pc, #584]	@ (8000bdc <main+0x328>)
 8000992:	edc3 7a00 	vstr	s15, [r3]

	  // Get acceleration magnitude (take absolute value)
	  acc_x_abs = (acc_x < 0) ? -acc_x : acc_x;
 8000996:	4b8f      	ldr	r3, [pc, #572]	@ (8000bd4 <main+0x320>)
 8000998:	edd3 7a00 	vldr	s15, [r3]
 800099c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80009a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009a4:	d505      	bpl.n	80009b2 <main+0xfe>
 80009a6:	4b8b      	ldr	r3, [pc, #556]	@ (8000bd4 <main+0x320>)
 80009a8:	edd3 7a00 	vldr	s15, [r3]
 80009ac:	eef1 7a67 	vneg.f32	s15, s15
 80009b0:	e002      	b.n	80009b8 <main+0x104>
 80009b2:	4b88      	ldr	r3, [pc, #544]	@ (8000bd4 <main+0x320>)
 80009b4:	edd3 7a00 	vldr	s15, [r3]
 80009b8:	4b89      	ldr	r3, [pc, #548]	@ (8000be0 <main+0x32c>)
 80009ba:	edc3 7a00 	vstr	s15, [r3]
	  acc_y_abs = (acc_y < 0) ? -acc_y : acc_y;
 80009be:	4b86      	ldr	r3, [pc, #536]	@ (8000bd8 <main+0x324>)
 80009c0:	edd3 7a00 	vldr	s15, [r3]
 80009c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80009c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009cc:	d505      	bpl.n	80009da <main+0x126>
 80009ce:	4b82      	ldr	r3, [pc, #520]	@ (8000bd8 <main+0x324>)
 80009d0:	edd3 7a00 	vldr	s15, [r3]
 80009d4:	eef1 7a67 	vneg.f32	s15, s15
 80009d8:	e002      	b.n	80009e0 <main+0x12c>
 80009da:	4b7f      	ldr	r3, [pc, #508]	@ (8000bd8 <main+0x324>)
 80009dc:	edd3 7a00 	vldr	s15, [r3]
 80009e0:	4b80      	ldr	r3, [pc, #512]	@ (8000be4 <main+0x330>)
 80009e2:	edc3 7a00 	vstr	s15, [r3]
	  acc_z_abs = (acc_z < 0) ? -acc_z : acc_z;
 80009e6:	4b7d      	ldr	r3, [pc, #500]	@ (8000bdc <main+0x328>)
 80009e8:	edd3 7a00 	vldr	s15, [r3]
 80009ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80009f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009f4:	d505      	bpl.n	8000a02 <main+0x14e>
 80009f6:	4b79      	ldr	r3, [pc, #484]	@ (8000bdc <main+0x328>)
 80009f8:	edd3 7a00 	vldr	s15, [r3]
 80009fc:	eef1 7a67 	vneg.f32	s15, s15
 8000a00:	e002      	b.n	8000a08 <main+0x154>
 8000a02:	4b76      	ldr	r3, [pc, #472]	@ (8000bdc <main+0x328>)
 8000a04:	edd3 7a00 	vldr	s15, [r3]
 8000a08:	4b77      	ldr	r3, [pc, #476]	@ (8000be8 <main+0x334>)
 8000a0a:	edc3 7a00 	vstr	s15, [r3]

	  // Print acc_x
	  lcd_put_cur(1, 0);
 8000a0e:	2100      	movs	r1, #0
 8000a10:	2001      	movs	r0, #1
 8000a12:	f7ff fedd 	bl	80007d0 <lcd_put_cur>
	  lcd_send_string((acc_x < 0) ? "-" : "+");
 8000a16:	4b6f      	ldr	r3, [pc, #444]	@ (8000bd4 <main+0x320>)
 8000a18:	edd3 7a00 	vldr	s15, [r3]
 8000a1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a24:	d501      	bpl.n	8000a2a <main+0x176>
 8000a26:	4b71      	ldr	r3, [pc, #452]	@ (8000bec <main+0x338>)
 8000a28:	e000      	b.n	8000a2c <main+0x178>
 8000a2a:	4b71      	ldr	r3, [pc, #452]	@ (8000bf0 <main+0x33c>)
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ff2b 	bl	8000888 <lcd_send_string>
	  lcd_send_data((int)(acc_x_abs) % 10 + 48); // Ones
 8000a32:	4b6b      	ldr	r3, [pc, #428]	@ (8000be0 <main+0x32c>)
 8000a34:	edd3 7a00 	vldr	s15, [r3]
 8000a38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a3c:	ee17 1a90 	vmov	r1, s15
 8000a40:	4b6c      	ldr	r3, [pc, #432]	@ (8000bf4 <main+0x340>)
 8000a42:	fb83 2301 	smull	r2, r3, r3, r1
 8000a46:	109a      	asrs	r2, r3, #2
 8000a48:	17cb      	asrs	r3, r1, #31
 8000a4a:	1ad2      	subs	r2, r2, r3
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	4413      	add	r3, r2
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	1aca      	subs	r2, r1, r3
 8000a56:	b2d3      	uxtb	r3, r2
 8000a58:	3330      	adds	r3, #48	@ 0x30
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fe87 	bl	8000770 <lcd_send_data>
	  lcd_send_string(".");
 8000a62:	4865      	ldr	r0, [pc, #404]	@ (8000bf8 <main+0x344>)
 8000a64:	f7ff ff10 	bl	8000888 <lcd_send_string>
	  lcd_send_data(((int)(acc_x_abs * 10) % 10) + 48); // Tenths
 8000a68:	4b5d      	ldr	r3, [pc, #372]	@ (8000be0 <main+0x32c>)
 8000a6a:	edd3 7a00 	vldr	s15, [r3]
 8000a6e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000a72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a7a:	ee17 1a90 	vmov	r1, s15
 8000a7e:	4b5d      	ldr	r3, [pc, #372]	@ (8000bf4 <main+0x340>)
 8000a80:	fb83 2301 	smull	r2, r3, r3, r1
 8000a84:	109a      	asrs	r2, r3, #2
 8000a86:	17cb      	asrs	r3, r1, #31
 8000a88:	1ad2      	subs	r2, r2, r3
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	4413      	add	r3, r2
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	1aca      	subs	r2, r1, r3
 8000a94:	b2d3      	uxtb	r3, r2
 8000a96:	3330      	adds	r3, #48	@ 0x30
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff fe68 	bl	8000770 <lcd_send_data>
	  lcd_send_data(((int)(acc_x_abs * 100) % 10) + 48); // Hundredths
 8000aa0:	4b4f      	ldr	r3, [pc, #316]	@ (8000be0 <main+0x32c>)
 8000aa2:	edd3 7a00 	vldr	s15, [r3]
 8000aa6:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8000bd0 <main+0x31c>
 8000aaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000aae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ab2:	ee17 1a90 	vmov	r1, s15
 8000ab6:	4b4f      	ldr	r3, [pc, #316]	@ (8000bf4 <main+0x340>)
 8000ab8:	fb83 2301 	smull	r2, r3, r3, r1
 8000abc:	109a      	asrs	r2, r3, #2
 8000abe:	17cb      	asrs	r3, r1, #31
 8000ac0:	1ad2      	subs	r2, r2, r3
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	4413      	add	r3, r2
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	1aca      	subs	r2, r1, r3
 8000acc:	b2d3      	uxtb	r3, r2
 8000ace:	3330      	adds	r3, #48	@ 0x30
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fe4c 	bl	8000770 <lcd_send_data>

	  // Print acc_y
	  lcd_put_cur(1, 6);
 8000ad8:	2106      	movs	r1, #6
 8000ada:	2001      	movs	r0, #1
 8000adc:	f7ff fe78 	bl	80007d0 <lcd_put_cur>
	  lcd_send_string((acc_y < 0) ? "-" : "+");
 8000ae0:	4b3d      	ldr	r3, [pc, #244]	@ (8000bd8 <main+0x324>)
 8000ae2:	edd3 7a00 	vldr	s15, [r3]
 8000ae6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aee:	d501      	bpl.n	8000af4 <main+0x240>
 8000af0:	4b3e      	ldr	r3, [pc, #248]	@ (8000bec <main+0x338>)
 8000af2:	e000      	b.n	8000af6 <main+0x242>
 8000af4:	4b3e      	ldr	r3, [pc, #248]	@ (8000bf0 <main+0x33c>)
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fec6 	bl	8000888 <lcd_send_string>
	  lcd_send_data((int)(acc_y_abs) % 10 + 48); // Ones
 8000afc:	4b39      	ldr	r3, [pc, #228]	@ (8000be4 <main+0x330>)
 8000afe:	edd3 7a00 	vldr	s15, [r3]
 8000b02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b06:	ee17 1a90 	vmov	r1, s15
 8000b0a:	4b3a      	ldr	r3, [pc, #232]	@ (8000bf4 <main+0x340>)
 8000b0c:	fb83 2301 	smull	r2, r3, r3, r1
 8000b10:	109a      	asrs	r2, r3, #2
 8000b12:	17cb      	asrs	r3, r1, #31
 8000b14:	1ad2      	subs	r2, r2, r3
 8000b16:	4613      	mov	r3, r2
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	4413      	add	r3, r2
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	1aca      	subs	r2, r1, r3
 8000b20:	b2d3      	uxtb	r3, r2
 8000b22:	3330      	adds	r3, #48	@ 0x30
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fe22 	bl	8000770 <lcd_send_data>
	  lcd_send_string(".");
 8000b2c:	4832      	ldr	r0, [pc, #200]	@ (8000bf8 <main+0x344>)
 8000b2e:	f7ff feab 	bl	8000888 <lcd_send_string>
	  lcd_send_data(((int)(acc_y_abs * 10) % 10) + 48); // Tenths
 8000b32:	4b2c      	ldr	r3, [pc, #176]	@ (8000be4 <main+0x330>)
 8000b34:	edd3 7a00 	vldr	s15, [r3]
 8000b38:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000b3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b44:	ee17 1a90 	vmov	r1, s15
 8000b48:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf4 <main+0x340>)
 8000b4a:	fb83 2301 	smull	r2, r3, r3, r1
 8000b4e:	109a      	asrs	r2, r3, #2
 8000b50:	17cb      	asrs	r3, r1, #31
 8000b52:	1ad2      	subs	r2, r2, r3
 8000b54:	4613      	mov	r3, r2
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	4413      	add	r3, r2
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	1aca      	subs	r2, r1, r3
 8000b5e:	b2d3      	uxtb	r3, r2
 8000b60:	3330      	adds	r3, #48	@ 0x30
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fe03 	bl	8000770 <lcd_send_data>
	  lcd_send_data(((int)(acc_y_abs * 100) % 10) + 48); // Hundredths
 8000b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000be4 <main+0x330>)
 8000b6c:	edd3 7a00 	vldr	s15, [r3]
 8000b70:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000bd0 <main+0x31c>
 8000b74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b7c:	ee17 1a90 	vmov	r1, s15
 8000b80:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf4 <main+0x340>)
 8000b82:	fb83 2301 	smull	r2, r3, r3, r1
 8000b86:	109a      	asrs	r2, r3, #2
 8000b88:	17cb      	asrs	r3, r1, #31
 8000b8a:	1ad2      	subs	r2, r2, r3
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	4413      	add	r3, r2
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	1aca      	subs	r2, r1, r3
 8000b96:	b2d3      	uxtb	r3, r2
 8000b98:	3330      	adds	r3, #48	@ 0x30
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff fde7 	bl	8000770 <lcd_send_data>

	  // Print acc_z
	  lcd_put_cur(1, 12);
 8000ba2:	210c      	movs	r1, #12
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	f7ff fe13 	bl	80007d0 <lcd_put_cur>
	  lcd_send_string((acc_z < 0) ? "-" : "+");
 8000baa:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <main+0x328>)
 8000bac:	edd3 7a00 	vldr	s15, [r3]
 8000bb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bb8:	d520      	bpl.n	8000bfc <main+0x348>
 8000bba:	4b0c      	ldr	r3, [pc, #48]	@ (8000bec <main+0x338>)
 8000bbc:	e01f      	b.n	8000bfe <main+0x34a>
 8000bbe:	bf00      	nop
 8000bc0:	08005d40 	.word	0x08005d40
 8000bc4:	200002b4 	.word	0x200002b4
 8000bc8:	200009b8 	.word	0x200009b8
 8000bcc:	200009cc 	.word	0x200009cc
 8000bd0:	42c80000 	.word	0x42c80000
 8000bd4:	200009d4 	.word	0x200009d4
 8000bd8:	200009d8 	.word	0x200009d8
 8000bdc:	200009dc 	.word	0x200009dc
 8000be0:	200009e0 	.word	0x200009e0
 8000be4:	200009e4 	.word	0x200009e4
 8000be8:	200009e8 	.word	0x200009e8
 8000bec:	08005d50 	.word	0x08005d50
 8000bf0:	08005d54 	.word	0x08005d54
 8000bf4:	66666667 	.word	0x66666667
 8000bf8:	08005d58 	.word	0x08005d58
 8000bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8000cac <main+0x3f8>)
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff fe42 	bl	8000888 <lcd_send_string>
	  lcd_send_data((int)(acc_z_abs) % 10 + 48); // Ones
 8000c04:	4b2a      	ldr	r3, [pc, #168]	@ (8000cb0 <main+0x3fc>)
 8000c06:	edd3 7a00 	vldr	s15, [r3]
 8000c0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c0e:	ee17 1a90 	vmov	r1, s15
 8000c12:	4b28      	ldr	r3, [pc, #160]	@ (8000cb4 <main+0x400>)
 8000c14:	fb83 2301 	smull	r2, r3, r3, r1
 8000c18:	109a      	asrs	r2, r3, #2
 8000c1a:	17cb      	asrs	r3, r1, #31
 8000c1c:	1ad2      	subs	r2, r2, r3
 8000c1e:	4613      	mov	r3, r2
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	4413      	add	r3, r2
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	1aca      	subs	r2, r1, r3
 8000c28:	b2d3      	uxtb	r3, r2
 8000c2a:	3330      	adds	r3, #48	@ 0x30
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fd9e 	bl	8000770 <lcd_send_data>
	  lcd_send_string(".");
 8000c34:	4820      	ldr	r0, [pc, #128]	@ (8000cb8 <main+0x404>)
 8000c36:	f7ff fe27 	bl	8000888 <lcd_send_string>
	  lcd_send_data(((int)(acc_z_abs * 10) % 10) + 48); // Tenths
 8000c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb0 <main+0x3fc>)
 8000c3c:	edd3 7a00 	vldr	s15, [r3]
 8000c40:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000c44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c4c:	ee17 1a90 	vmov	r1, s15
 8000c50:	4b18      	ldr	r3, [pc, #96]	@ (8000cb4 <main+0x400>)
 8000c52:	fb83 2301 	smull	r2, r3, r3, r1
 8000c56:	109a      	asrs	r2, r3, #2
 8000c58:	17cb      	asrs	r3, r1, #31
 8000c5a:	1ad2      	subs	r2, r2, r3
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	4413      	add	r3, r2
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	1aca      	subs	r2, r1, r3
 8000c66:	b2d3      	uxtb	r3, r2
 8000c68:	3330      	adds	r3, #48	@ 0x30
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fd7f 	bl	8000770 <lcd_send_data>
	  lcd_send_data(((int)(acc_z_abs * 100) % 10) + 48); // Hundredths
 8000c72:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb0 <main+0x3fc>)
 8000c74:	edd3 7a00 	vldr	s15, [r3]
 8000c78:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000cbc <main+0x408>
 8000c7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c84:	ee17 1a90 	vmov	r1, s15
 8000c88:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb4 <main+0x400>)
 8000c8a:	fb83 2301 	smull	r2, r3, r3, r1
 8000c8e:	109a      	asrs	r2, r3, #2
 8000c90:	17cb      	asrs	r3, r1, #31
 8000c92:	1ad2      	subs	r2, r2, r3
 8000c94:	4613      	mov	r3, r2
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	4413      	add	r3, r2
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	1aca      	subs	r2, r1, r3
 8000c9e:	b2d3      	uxtb	r3, r2
 8000ca0:	3330      	adds	r3, #48	@ 0x30
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff fd63 	bl	8000770 <lcd_send_data>
	  HAL_Delay(300);
 8000caa:	e621      	b.n	80008f0 <main+0x3c>
 8000cac:	08005d54 	.word	0x08005d54
 8000cb0:	200009e8 	.word	0x200009e8
 8000cb4:	66666667 	.word	0x66666667
 8000cb8:	08005d58 	.word	0x08005d58
 8000cbc:	42c80000 	.word	0x42c80000

08000cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b094      	sub	sp, #80	@ 0x50
 8000cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	2234      	movs	r2, #52	@ 0x34
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f004 fffd 	bl	8005cce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd4:	f107 0308 	add.w	r3, r7, #8
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ce4:	f002 feda 	bl	8003a9c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce8:	4b2c      	ldr	r3, [pc, #176]	@ (8000d9c <SystemClock_Config+0xdc>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cec:	4a2b      	ldr	r2, [pc, #172]	@ (8000d9c <SystemClock_Config+0xdc>)
 8000cee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cf4:	4b29      	ldr	r3, [pc, #164]	@ (8000d9c <SystemClock_Config+0xdc>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d00:	4b27      	ldr	r3, [pc, #156]	@ (8000da0 <SystemClock_Config+0xe0>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d08:	4a25      	ldr	r2, [pc, #148]	@ (8000da0 <SystemClock_Config+0xe0>)
 8000d0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d0e:	6013      	str	r3, [r2, #0]
 8000d10:	4b23      	ldr	r3, [pc, #140]	@ (8000da0 <SystemClock_Config+0xe0>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d18:	603b      	str	r3, [r7, #0]
 8000d1a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d20:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000d24:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d26:	2302      	movs	r3, #2
 8000d28:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d2a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d30:	2304      	movs	r3, #4
 8000d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000d34:	2360      	movs	r3, #96	@ 0x60
 8000d36:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d3c:	2304      	movs	r3, #4
 8000d3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d40:	2302      	movs	r3, #2
 8000d42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d44:	f107 031c 	add.w	r3, r7, #28
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f002 ff07 	bl	8003b5c <HAL_RCC_OscConfig>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d54:	f000 fa56 	bl	8001204 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d58:	f002 feb0 	bl	8003abc <HAL_PWREx_EnableOverDrive>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000d62:	f000 fa4f 	bl	8001204 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d66:	230f      	movs	r3, #15
 8000d68:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d7c:	f107 0308 	add.w	r3, r7, #8
 8000d80:	2103      	movs	r1, #3
 8000d82:	4618      	mov	r0, r3
 8000d84:	f003 f998 	bl	80040b8 <HAL_RCC_ClockConfig>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000d8e:	f000 fa39 	bl	8001204 <Error_Handler>
  }
}
 8000d92:	bf00      	nop
 8000d94:	3750      	adds	r7, #80	@ 0x50
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40007000 	.word	0x40007000

08000da4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000da8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e28 <MX_ETH_Init+0x84>)
 8000daa:	4a20      	ldr	r2, [pc, #128]	@ (8000e2c <MX_ETH_Init+0x88>)
 8000dac:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000dae:	4b20      	ldr	r3, [pc, #128]	@ (8000e30 <MX_ETH_Init+0x8c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000db4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e30 <MX_ETH_Init+0x8c>)
 8000db6:	2280      	movs	r2, #128	@ 0x80
 8000db8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000dba:	4b1d      	ldr	r3, [pc, #116]	@ (8000e30 <MX_ETH_Init+0x8c>)
 8000dbc:	22e1      	movs	r2, #225	@ 0xe1
 8000dbe:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e30 <MX_ETH_Init+0x8c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e30 <MX_ETH_Init+0x8c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000dcc:	4b18      	ldr	r3, [pc, #96]	@ (8000e30 <MX_ETH_Init+0x8c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000dd2:	4b15      	ldr	r3, [pc, #84]	@ (8000e28 <MX_ETH_Init+0x84>)
 8000dd4:	4a16      	ldr	r2, [pc, #88]	@ (8000e30 <MX_ETH_Init+0x8c>)
 8000dd6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000dd8:	4b13      	ldr	r3, [pc, #76]	@ (8000e28 <MX_ETH_Init+0x84>)
 8000dda:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000dde:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000de0:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <MX_ETH_Init+0x84>)
 8000de2:	4a14      	ldr	r2, [pc, #80]	@ (8000e34 <MX_ETH_Init+0x90>)
 8000de4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000de6:	4b10      	ldr	r3, [pc, #64]	@ (8000e28 <MX_ETH_Init+0x84>)
 8000de8:	4a13      	ldr	r2, [pc, #76]	@ (8000e38 <MX_ETH_Init+0x94>)
 8000dea:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000dec:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <MX_ETH_Init+0x84>)
 8000dee:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000df2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000df4:	480c      	ldr	r0, [pc, #48]	@ (8000e28 <MX_ETH_Init+0x84>)
 8000df6:	f001 fa2f 	bl	8002258 <HAL_ETH_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000e00:	f000 fa00 	bl	8001204 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000e04:	2238      	movs	r2, #56	@ 0x38
 8000e06:	2100      	movs	r1, #0
 8000e08:	480c      	ldr	r0, [pc, #48]	@ (8000e3c <MX_ETH_Init+0x98>)
 8000e0a:	f004 ff60 	bl	8005cce <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e3c <MX_ETH_Init+0x98>)
 8000e10:	2221      	movs	r2, #33	@ 0x21
 8000e12:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000e14:	4b09      	ldr	r3, [pc, #36]	@ (8000e3c <MX_ETH_Init+0x98>)
 8000e16:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000e1a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000e1c:	4b07      	ldr	r3, [pc, #28]	@ (8000e3c <MX_ETH_Init+0x98>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200001b0 	.word	0x200001b0
 8000e2c:	40028000 	.word	0x40028000
 8000e30:	200009ec 	.word	0x200009ec
 8000e34:	200000b4 	.word	0x200000b4
 8000e38:	20000014 	.word	0x20000014
 8000e3c:	20000178 	.word	0x20000178

08000e40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e44:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e46:	4a1c      	ldr	r2, [pc, #112]	@ (8000eb8 <MX_I2C1_Init+0x78>)
 8000e48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ebc <MX_I2C1_Init+0x7c>)
 8000e4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e50:	4b18      	ldr	r3, [pc, #96]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e56:	4b17      	ldr	r3, [pc, #92]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e5c:	4b15      	ldr	r3, [pc, #84]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e62:	4b14      	ldr	r3, [pc, #80]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e68:	4b12      	ldr	r3, [pc, #72]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e6e:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e74:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e7a:	480e      	ldr	r0, [pc, #56]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e7c:	f001 ff00 	bl	8002c80 <HAL_I2C_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e86:	f000 f9bd 	bl	8001204 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4809      	ldr	r0, [pc, #36]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e8e:	f002 fc33 	bl	80036f8 <HAL_I2CEx_ConfigAnalogFilter>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e98:	f000 f9b4 	bl	8001204 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4805      	ldr	r0, [pc, #20]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000ea0:	f002 fc75 	bl	800378e <HAL_I2CEx_ConfigDigitalFilter>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000eaa:	f000 f9ab 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000260 	.word	0x20000260
 8000eb8:	40005400 	.word	0x40005400
 8000ebc:	20303e5d 	.word	0x20303e5d

08000ec0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f34 <MX_I2C2_Init+0x74>)
 8000ec6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f38 <MX_I2C2_Init+0x78>)
 8000ec8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000eca:	4b1a      	ldr	r3, [pc, #104]	@ (8000f34 <MX_I2C2_Init+0x74>)
 8000ecc:	4a1b      	ldr	r2, [pc, #108]	@ (8000f3c <MX_I2C2_Init+0x7c>)
 8000ece:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ed0:	4b18      	ldr	r3, [pc, #96]	@ (8000f34 <MX_I2C2_Init+0x74>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ed6:	4b17      	ldr	r3, [pc, #92]	@ (8000f34 <MX_I2C2_Init+0x74>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000edc:	4b15      	ldr	r3, [pc, #84]	@ (8000f34 <MX_I2C2_Init+0x74>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ee2:	4b14      	ldr	r3, [pc, #80]	@ (8000f34 <MX_I2C2_Init+0x74>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ee8:	4b12      	ldr	r3, [pc, #72]	@ (8000f34 <MX_I2C2_Init+0x74>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eee:	4b11      	ldr	r3, [pc, #68]	@ (8000f34 <MX_I2C2_Init+0x74>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f34 <MX_I2C2_Init+0x74>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000efa:	480e      	ldr	r0, [pc, #56]	@ (8000f34 <MX_I2C2_Init+0x74>)
 8000efc:	f001 fec0 	bl	8002c80 <HAL_I2C_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000f06:	f000 f97d 	bl	8001204 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4809      	ldr	r0, [pc, #36]	@ (8000f34 <MX_I2C2_Init+0x74>)
 8000f0e:	f002 fbf3 	bl	80036f8 <HAL_I2CEx_ConfigAnalogFilter>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000f18:	f000 f974 	bl	8001204 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4805      	ldr	r0, [pc, #20]	@ (8000f34 <MX_I2C2_Init+0x74>)
 8000f20:	f002 fc35 	bl	800378e <HAL_I2CEx_ConfigDigitalFilter>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000f2a:	f000 f96b 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200002b4 	.word	0x200002b4
 8000f38:	40005800 	.word	0x40005800
 8000f3c:	20303e5d 	.word	0x20303e5d

08000f40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f44:	4b14      	ldr	r3, [pc, #80]	@ (8000f98 <MX_USART2_UART_Init+0x58>)
 8000f46:	4a15      	ldr	r2, [pc, #84]	@ (8000f9c <MX_USART2_UART_Init+0x5c>)
 8000f48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f4a:	4b13      	ldr	r3, [pc, #76]	@ (8000f98 <MX_USART2_UART_Init+0x58>)
 8000f4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f52:	4b11      	ldr	r3, [pc, #68]	@ (8000f98 <MX_USART2_UART_Init+0x58>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f58:	4b0f      	ldr	r3, [pc, #60]	@ (8000f98 <MX_USART2_UART_Init+0x58>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f98 <MX_USART2_UART_Init+0x58>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f64:	4b0c      	ldr	r3, [pc, #48]	@ (8000f98 <MX_USART2_UART_Init+0x58>)
 8000f66:	220c      	movs	r2, #12
 8000f68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f98 <MX_USART2_UART_Init+0x58>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f70:	4b09      	ldr	r3, [pc, #36]	@ (8000f98 <MX_USART2_UART_Init+0x58>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f76:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <MX_USART2_UART_Init+0x58>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <MX_USART2_UART_Init+0x58>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f82:	4805      	ldr	r0, [pc, #20]	@ (8000f98 <MX_USART2_UART_Init+0x58>)
 8000f84:	f003 fee6 	bl	8004d54 <HAL_UART_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f8e:	f000 f939 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200003c8 	.word	0x200003c8
 8000f9c:	40004400 	.word	0x40004400

08000fa0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fa4:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fa6:	4a15      	ldr	r2, [pc, #84]	@ (8000ffc <MX_USART3_UART_Init+0x5c>)
 8000fa8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000faa:	4b13      	ldr	r3, [pc, #76]	@ (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fb0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fca:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd0:	4b09      	ldr	r3, [pc, #36]	@ (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fd6:	4b08      	ldr	r3, [pc, #32]	@ (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fe2:	4805      	ldr	r0, [pc, #20]	@ (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fe4:	f003 feb6 	bl	8004d54 <HAL_UART_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000fee:	f000 f909 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000450 	.word	0x20000450
 8000ffc:	40004800 	.word	0x40004800

08001000 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001004:	4b14      	ldr	r3, [pc, #80]	@ (8001058 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001006:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800100a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800100c:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800100e:	2206      	movs	r2, #6
 8001010:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001012:	4b11      	ldr	r3, [pc, #68]	@ (8001058 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001014:	2202      	movs	r2, #2
 8001016:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001018:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800101a:	2200      	movs	r2, #0
 800101c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800101e:	4b0e      	ldr	r3, [pc, #56]	@ (8001058 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001020:	2202      	movs	r2, #2
 8001022:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001024:	4b0c      	ldr	r3, [pc, #48]	@ (8001058 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001026:	2201      	movs	r2, #1
 8001028:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800102a:	4b0b      	ldr	r3, [pc, #44]	@ (8001058 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800102c:	2200      	movs	r2, #0
 800102e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001030:	4b09      	ldr	r3, [pc, #36]	@ (8001058 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001032:	2200      	movs	r2, #0
 8001034:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001036:	4b08      	ldr	r3, [pc, #32]	@ (8001058 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001038:	2201      	movs	r2, #1
 800103a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800103c:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800103e:	2200      	movs	r2, #0
 8001040:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001042:	4805      	ldr	r0, [pc, #20]	@ (8001058 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001044:	f002 fbef 	bl	8003826 <HAL_PCD_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800104e:	f000 f8d9 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200004d8 	.word	0x200004d8

0800105c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001062:	4b10      	ldr	r3, [pc, #64]	@ (80010a4 <MX_DMA_Init+0x48>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	4a0f      	ldr	r2, [pc, #60]	@ (80010a4 <MX_DMA_Init+0x48>)
 8001068:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800106c:	6313      	str	r3, [r2, #48]	@ 0x30
 800106e:	4b0d      	ldr	r3, [pc, #52]	@ (80010a4 <MX_DMA_Init+0x48>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2100      	movs	r1, #0
 800107e:	200d      	movs	r0, #13
 8001080:	f000 fdc9 	bl	8001c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001084:	200d      	movs	r0, #13
 8001086:	f000 fde2 	bl	8001c4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2100      	movs	r1, #0
 800108e:	200f      	movs	r0, #15
 8001090:	f000 fdc1 	bl	8001c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001094:	200f      	movs	r0, #15
 8001096:	f000 fdda 	bl	8001c4e <HAL_NVIC_EnableIRQ>

}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800

080010a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08c      	sub	sp, #48	@ 0x30
 80010ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ae:	f107 031c 	add.w	r3, r7, #28
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010be:	4b4d      	ldr	r3, [pc, #308]	@ (80011f4 <MX_GPIO_Init+0x14c>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	4a4c      	ldr	r2, [pc, #304]	@ (80011f4 <MX_GPIO_Init+0x14c>)
 80010c4:	f043 0304 	orr.w	r3, r3, #4
 80010c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ca:	4b4a      	ldr	r3, [pc, #296]	@ (80011f4 <MX_GPIO_Init+0x14c>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	f003 0304 	and.w	r3, r3, #4
 80010d2:	61bb      	str	r3, [r7, #24]
 80010d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010d6:	4b47      	ldr	r3, [pc, #284]	@ (80011f4 <MX_GPIO_Init+0x14c>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	4a46      	ldr	r2, [pc, #280]	@ (80011f4 <MX_GPIO_Init+0x14c>)
 80010dc:	f043 0320 	orr.w	r3, r3, #32
 80010e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e2:	4b44      	ldr	r3, [pc, #272]	@ (80011f4 <MX_GPIO_Init+0x14c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	f003 0320 	and.w	r3, r3, #32
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ee:	4b41      	ldr	r3, [pc, #260]	@ (80011f4 <MX_GPIO_Init+0x14c>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f2:	4a40      	ldr	r2, [pc, #256]	@ (80011f4 <MX_GPIO_Init+0x14c>)
 80010f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010fa:	4b3e      	ldr	r3, [pc, #248]	@ (80011f4 <MX_GPIO_Init+0x14c>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001106:	4b3b      	ldr	r3, [pc, #236]	@ (80011f4 <MX_GPIO_Init+0x14c>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	4a3a      	ldr	r2, [pc, #232]	@ (80011f4 <MX_GPIO_Init+0x14c>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6313      	str	r3, [r2, #48]	@ 0x30
 8001112:	4b38      	ldr	r3, [pc, #224]	@ (80011f4 <MX_GPIO_Init+0x14c>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800111e:	4b35      	ldr	r3, [pc, #212]	@ (80011f4 <MX_GPIO_Init+0x14c>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	4a34      	ldr	r2, [pc, #208]	@ (80011f4 <MX_GPIO_Init+0x14c>)
 8001124:	f043 0302 	orr.w	r3, r3, #2
 8001128:	6313      	str	r3, [r2, #48]	@ 0x30
 800112a:	4b32      	ldr	r3, [pc, #200]	@ (80011f4 <MX_GPIO_Init+0x14c>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001136:	4b2f      	ldr	r3, [pc, #188]	@ (80011f4 <MX_GPIO_Init+0x14c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	4a2e      	ldr	r2, [pc, #184]	@ (80011f4 <MX_GPIO_Init+0x14c>)
 800113c:	f043 0308 	orr.w	r3, r3, #8
 8001140:	6313      	str	r3, [r2, #48]	@ 0x30
 8001142:	4b2c      	ldr	r3, [pc, #176]	@ (80011f4 <MX_GPIO_Init+0x14c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	f003 0308 	and.w	r3, r3, #8
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800114e:	4b29      	ldr	r3, [pc, #164]	@ (80011f4 <MX_GPIO_Init+0x14c>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	4a28      	ldr	r2, [pc, #160]	@ (80011f4 <MX_GPIO_Init+0x14c>)
 8001154:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001158:	6313      	str	r3, [r2, #48]	@ 0x30
 800115a:	4b26      	ldr	r3, [pc, #152]	@ (80011f4 <MX_GPIO_Init+0x14c>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	f244 0181 	movw	r1, #16513	@ 0x4081
 800116c:	4822      	ldr	r0, [pc, #136]	@ (80011f8 <MX_GPIO_Init+0x150>)
 800116e:	f001 fd6d 	bl	8002c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	2140      	movs	r1, #64	@ 0x40
 8001176:	4821      	ldr	r0, [pc, #132]	@ (80011fc <MX_GPIO_Init+0x154>)
 8001178:	f001 fd68 	bl	8002c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800117c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001180:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001182:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001186:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 031c 	add.w	r3, r7, #28
 8001190:	4619      	mov	r1, r3
 8001192:	481b      	ldr	r0, [pc, #108]	@ (8001200 <MX_GPIO_Init+0x158>)
 8001194:	f001 fbae 	bl	80028f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001198:	f244 0381 	movw	r3, #16513	@ 0x4081
 800119c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119e:	2301      	movs	r3, #1
 80011a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011aa:	f107 031c 	add.w	r3, r7, #28
 80011ae:	4619      	mov	r1, r3
 80011b0:	4811      	ldr	r0, [pc, #68]	@ (80011f8 <MX_GPIO_Init+0x150>)
 80011b2:	f001 fb9f 	bl	80028f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80011b6:	2340      	movs	r3, #64	@ 0x40
 80011b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ba:	2301      	movs	r3, #1
 80011bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	4619      	mov	r1, r3
 80011cc:	480b      	ldr	r0, [pc, #44]	@ (80011fc <MX_GPIO_Init+0x154>)
 80011ce:	f001 fb91 	bl	80028f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80011d2:	2380      	movs	r3, #128	@ 0x80
 80011d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d6:	2300      	movs	r3, #0
 80011d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011de:	f107 031c 	add.w	r3, r7, #28
 80011e2:	4619      	mov	r1, r3
 80011e4:	4805      	ldr	r0, [pc, #20]	@ (80011fc <MX_GPIO_Init+0x154>)
 80011e6:	f001 fb85 	bl	80028f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011ea:	bf00      	nop
 80011ec:	3730      	adds	r7, #48	@ 0x30
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40020400 	.word	0x40020400
 80011fc:	40021800 	.word	0x40021800
 8001200:	40020800 	.word	0x40020800

08001204 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001208:	b672      	cpsid	i
}
 800120a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <Error_Handler+0x8>

08001210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001216:	4b0f      	ldr	r3, [pc, #60]	@ (8001254 <HAL_MspInit+0x44>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121a:	4a0e      	ldr	r2, [pc, #56]	@ (8001254 <HAL_MspInit+0x44>)
 800121c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001220:	6413      	str	r3, [r2, #64]	@ 0x40
 8001222:	4b0c      	ldr	r3, [pc, #48]	@ (8001254 <HAL_MspInit+0x44>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122e:	4b09      	ldr	r3, [pc, #36]	@ (8001254 <HAL_MspInit+0x44>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001232:	4a08      	ldr	r2, [pc, #32]	@ (8001254 <HAL_MspInit+0x44>)
 8001234:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001238:	6453      	str	r3, [r2, #68]	@ 0x44
 800123a:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <HAL_MspInit+0x44>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800

08001258 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08e      	sub	sp, #56	@ 0x38
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a4e      	ldr	r2, [pc, #312]	@ (80013b0 <HAL_ETH_MspInit+0x158>)
 8001276:	4293      	cmp	r3, r2
 8001278:	f040 8096 	bne.w	80013a8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800127c:	4b4d      	ldr	r3, [pc, #308]	@ (80013b4 <HAL_ETH_MspInit+0x15c>)
 800127e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001280:	4a4c      	ldr	r2, [pc, #304]	@ (80013b4 <HAL_ETH_MspInit+0x15c>)
 8001282:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001286:	6313      	str	r3, [r2, #48]	@ 0x30
 8001288:	4b4a      	ldr	r3, [pc, #296]	@ (80013b4 <HAL_ETH_MspInit+0x15c>)
 800128a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001290:	623b      	str	r3, [r7, #32]
 8001292:	6a3b      	ldr	r3, [r7, #32]
 8001294:	4b47      	ldr	r3, [pc, #284]	@ (80013b4 <HAL_ETH_MspInit+0x15c>)
 8001296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001298:	4a46      	ldr	r2, [pc, #280]	@ (80013b4 <HAL_ETH_MspInit+0x15c>)
 800129a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800129e:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a0:	4b44      	ldr	r3, [pc, #272]	@ (80013b4 <HAL_ETH_MspInit+0x15c>)
 80012a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80012a8:	61fb      	str	r3, [r7, #28]
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	4b41      	ldr	r3, [pc, #260]	@ (80013b4 <HAL_ETH_MspInit+0x15c>)
 80012ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b0:	4a40      	ldr	r2, [pc, #256]	@ (80013b4 <HAL_ETH_MspInit+0x15c>)
 80012b2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80012b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b8:	4b3e      	ldr	r3, [pc, #248]	@ (80013b4 <HAL_ETH_MspInit+0x15c>)
 80012ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80012c0:	61bb      	str	r3, [r7, #24]
 80012c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c4:	4b3b      	ldr	r3, [pc, #236]	@ (80013b4 <HAL_ETH_MspInit+0x15c>)
 80012c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c8:	4a3a      	ldr	r2, [pc, #232]	@ (80013b4 <HAL_ETH_MspInit+0x15c>)
 80012ca:	f043 0304 	orr.w	r3, r3, #4
 80012ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d0:	4b38      	ldr	r3, [pc, #224]	@ (80013b4 <HAL_ETH_MspInit+0x15c>)
 80012d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012dc:	4b35      	ldr	r3, [pc, #212]	@ (80013b4 <HAL_ETH_MspInit+0x15c>)
 80012de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e0:	4a34      	ldr	r2, [pc, #208]	@ (80013b4 <HAL_ETH_MspInit+0x15c>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e8:	4b32      	ldr	r3, [pc, #200]	@ (80013b4 <HAL_ETH_MspInit+0x15c>)
 80012ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f4:	4b2f      	ldr	r3, [pc, #188]	@ (80013b4 <HAL_ETH_MspInit+0x15c>)
 80012f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f8:	4a2e      	ldr	r2, [pc, #184]	@ (80013b4 <HAL_ETH_MspInit+0x15c>)
 80012fa:	f043 0302 	orr.w	r3, r3, #2
 80012fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001300:	4b2c      	ldr	r3, [pc, #176]	@ (80013b4 <HAL_ETH_MspInit+0x15c>)
 8001302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800130c:	4b29      	ldr	r3, [pc, #164]	@ (80013b4 <HAL_ETH_MspInit+0x15c>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001310:	4a28      	ldr	r2, [pc, #160]	@ (80013b4 <HAL_ETH_MspInit+0x15c>)
 8001312:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001316:	6313      	str	r3, [r2, #48]	@ 0x30
 8001318:	4b26      	ldr	r3, [pc, #152]	@ (80013b4 <HAL_ETH_MspInit+0x15c>)
 800131a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001324:	2332      	movs	r3, #50	@ 0x32
 8001326:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001330:	2303      	movs	r3, #3
 8001332:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001334:	230b      	movs	r3, #11
 8001336:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001338:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800133c:	4619      	mov	r1, r3
 800133e:	481e      	ldr	r0, [pc, #120]	@ (80013b8 <HAL_ETH_MspInit+0x160>)
 8001340:	f001 fad8 	bl	80028f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001344:	2386      	movs	r3, #134	@ 0x86
 8001346:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001348:	2302      	movs	r3, #2
 800134a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001350:	2303      	movs	r3, #3
 8001352:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001354:	230b      	movs	r3, #11
 8001356:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001358:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800135c:	4619      	mov	r1, r3
 800135e:	4817      	ldr	r0, [pc, #92]	@ (80013bc <HAL_ETH_MspInit+0x164>)
 8001360:	f001 fac8 	bl	80028f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001364:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001368:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001372:	2303      	movs	r3, #3
 8001374:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001376:	230b      	movs	r3, #11
 8001378:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800137a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800137e:	4619      	mov	r1, r3
 8001380:	480f      	ldr	r0, [pc, #60]	@ (80013c0 <HAL_ETH_MspInit+0x168>)
 8001382:	f001 fab7 	bl	80028f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001386:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800138a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	2302      	movs	r3, #2
 800138e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001394:	2303      	movs	r3, #3
 8001396:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001398:	230b      	movs	r3, #11
 800139a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800139c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013a0:	4619      	mov	r1, r3
 80013a2:	4808      	ldr	r0, [pc, #32]	@ (80013c4 <HAL_ETH_MspInit+0x16c>)
 80013a4:	f001 faa6 	bl	80028f4 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 80013a8:	bf00      	nop
 80013aa:	3738      	adds	r7, #56	@ 0x38
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40028000 	.word	0x40028000
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40020800 	.word	0x40020800
 80013bc:	40020000 	.word	0x40020000
 80013c0:	40020400 	.word	0x40020400
 80013c4:	40021800 	.word	0x40021800

080013c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b0b0      	sub	sp, #192	@ 0xc0
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013e0:	f107 031c 	add.w	r3, r7, #28
 80013e4:	2290      	movs	r2, #144	@ 0x90
 80013e6:	2100      	movs	r1, #0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f004 fc70 	bl	8005cce <memset>
  if(hi2c->Instance==I2C1)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a72      	ldr	r2, [pc, #456]	@ (80015bc <HAL_I2C_MspInit+0x1f4>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d13e      	bne.n	8001476 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80013fc:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013fe:	2300      	movs	r3, #0
 8001400:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001404:	f107 031c 	add.w	r3, r7, #28
 8001408:	4618      	mov	r0, r3
 800140a:	f003 f87b 	bl	8004504 <HAL_RCCEx_PeriphCLKConfig>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001414:	f7ff fef6 	bl	8001204 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001418:	4b69      	ldr	r3, [pc, #420]	@ (80015c0 <HAL_I2C_MspInit+0x1f8>)
 800141a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141c:	4a68      	ldr	r2, [pc, #416]	@ (80015c0 <HAL_I2C_MspInit+0x1f8>)
 800141e:	f043 0302 	orr.w	r3, r3, #2
 8001422:	6313      	str	r3, [r2, #48]	@ 0x30
 8001424:	4b66      	ldr	r3, [pc, #408]	@ (80015c0 <HAL_I2C_MspInit+0x1f8>)
 8001426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	61bb      	str	r3, [r7, #24]
 800142e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001430:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001434:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001438:	2312      	movs	r3, #18
 800143a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800143e:	2301      	movs	r3, #1
 8001440:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001444:	2303      	movs	r3, #3
 8001446:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800144a:	2304      	movs	r3, #4
 800144c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001450:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001454:	4619      	mov	r1, r3
 8001456:	485b      	ldr	r0, [pc, #364]	@ (80015c4 <HAL_I2C_MspInit+0x1fc>)
 8001458:	f001 fa4c 	bl	80028f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800145c:	4b58      	ldr	r3, [pc, #352]	@ (80015c0 <HAL_I2C_MspInit+0x1f8>)
 800145e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001460:	4a57      	ldr	r2, [pc, #348]	@ (80015c0 <HAL_I2C_MspInit+0x1f8>)
 8001462:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001466:	6413      	str	r3, [r2, #64]	@ 0x40
 8001468:	4b55      	ldr	r3, [pc, #340]	@ (80015c0 <HAL_I2C_MspInit+0x1f8>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001470:	617b      	str	r3, [r7, #20]
 8001472:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001474:	e09e      	b.n	80015b4 <HAL_I2C_MspInit+0x1ec>
  else if(hi2c->Instance==I2C2)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a53      	ldr	r2, [pc, #332]	@ (80015c8 <HAL_I2C_MspInit+0x200>)
 800147c:	4293      	cmp	r3, r2
 800147e:	f040 8099 	bne.w	80015b4 <HAL_I2C_MspInit+0x1ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001482:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001486:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001488:	2300      	movs	r3, #0
 800148a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800148e:	f107 031c 	add.w	r3, r7, #28
 8001492:	4618      	mov	r0, r3
 8001494:	f003 f836 	bl	8004504 <HAL_RCCEx_PeriphCLKConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <HAL_I2C_MspInit+0xda>
      Error_Handler();
 800149e:	f7ff feb1 	bl	8001204 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014a2:	4b47      	ldr	r3, [pc, #284]	@ (80015c0 <HAL_I2C_MspInit+0x1f8>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	4a46      	ldr	r2, [pc, #280]	@ (80015c0 <HAL_I2C_MspInit+0x1f8>)
 80014a8:	f043 0320 	orr.w	r3, r3, #32
 80014ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ae:	4b44      	ldr	r3, [pc, #272]	@ (80015c0 <HAL_I2C_MspInit+0x1f8>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	f003 0320 	and.w	r3, r3, #32
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014ba:	2303      	movs	r3, #3
 80014bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c0:	2312      	movs	r3, #18
 80014c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014cc:	2303      	movs	r3, #3
 80014ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014d2:	2304      	movs	r3, #4
 80014d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014d8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80014dc:	4619      	mov	r1, r3
 80014de:	483b      	ldr	r0, [pc, #236]	@ (80015cc <HAL_I2C_MspInit+0x204>)
 80014e0:	f001 fa08 	bl	80028f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014e4:	4b36      	ldr	r3, [pc, #216]	@ (80015c0 <HAL_I2C_MspInit+0x1f8>)
 80014e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e8:	4a35      	ldr	r2, [pc, #212]	@ (80015c0 <HAL_I2C_MspInit+0x1f8>)
 80014ea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80014f0:	4b33      	ldr	r3, [pc, #204]	@ (80015c0 <HAL_I2C_MspInit+0x1f8>)
 80014f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 80014fc:	4b34      	ldr	r3, [pc, #208]	@ (80015d0 <HAL_I2C_MspInit+0x208>)
 80014fe:	4a35      	ldr	r2, [pc, #212]	@ (80015d4 <HAL_I2C_MspInit+0x20c>)
 8001500:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8001502:	4b33      	ldr	r3, [pc, #204]	@ (80015d0 <HAL_I2C_MspInit+0x208>)
 8001504:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001508:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800150a:	4b31      	ldr	r3, [pc, #196]	@ (80015d0 <HAL_I2C_MspInit+0x208>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001510:	4b2f      	ldr	r3, [pc, #188]	@ (80015d0 <HAL_I2C_MspInit+0x208>)
 8001512:	2200      	movs	r2, #0
 8001514:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001516:	4b2e      	ldr	r3, [pc, #184]	@ (80015d0 <HAL_I2C_MspInit+0x208>)
 8001518:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800151c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800151e:	4b2c      	ldr	r3, [pc, #176]	@ (80015d0 <HAL_I2C_MspInit+0x208>)
 8001520:	2200      	movs	r2, #0
 8001522:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001524:	4b2a      	ldr	r3, [pc, #168]	@ (80015d0 <HAL_I2C_MspInit+0x208>)
 8001526:	2200      	movs	r2, #0
 8001528:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800152a:	4b29      	ldr	r3, [pc, #164]	@ (80015d0 <HAL_I2C_MspInit+0x208>)
 800152c:	2200      	movs	r2, #0
 800152e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001530:	4b27      	ldr	r3, [pc, #156]	@ (80015d0 <HAL_I2C_MspInit+0x208>)
 8001532:	2200      	movs	r2, #0
 8001534:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001536:	4b26      	ldr	r3, [pc, #152]	@ (80015d0 <HAL_I2C_MspInit+0x208>)
 8001538:	2200      	movs	r2, #0
 800153a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 800153c:	4824      	ldr	r0, [pc, #144]	@ (80015d0 <HAL_I2C_MspInit+0x208>)
 800153e:	f000 fba1 	bl	8001c84 <HAL_DMA_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <HAL_I2C_MspInit+0x184>
      Error_Handler();
 8001548:	f7ff fe5c 	bl	8001204 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a20      	ldr	r2, [pc, #128]	@ (80015d0 <HAL_I2C_MspInit+0x208>)
 8001550:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001552:	4a1f      	ldr	r2, [pc, #124]	@ (80015d0 <HAL_I2C_MspInit+0x208>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream4;
 8001558:	4b1f      	ldr	r3, [pc, #124]	@ (80015d8 <HAL_I2C_MspInit+0x210>)
 800155a:	4a20      	ldr	r2, [pc, #128]	@ (80015dc <HAL_I2C_MspInit+0x214>)
 800155c:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_8;
 800155e:	4b1e      	ldr	r3, [pc, #120]	@ (80015d8 <HAL_I2C_MspInit+0x210>)
 8001560:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001564:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001566:	4b1c      	ldr	r3, [pc, #112]	@ (80015d8 <HAL_I2C_MspInit+0x210>)
 8001568:	2240      	movs	r2, #64	@ 0x40
 800156a:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800156c:	4b1a      	ldr	r3, [pc, #104]	@ (80015d8 <HAL_I2C_MspInit+0x210>)
 800156e:	2200      	movs	r2, #0
 8001570:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001572:	4b19      	ldr	r3, [pc, #100]	@ (80015d8 <HAL_I2C_MspInit+0x210>)
 8001574:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001578:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800157a:	4b17      	ldr	r3, [pc, #92]	@ (80015d8 <HAL_I2C_MspInit+0x210>)
 800157c:	2200      	movs	r2, #0
 800157e:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001580:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <HAL_I2C_MspInit+0x210>)
 8001582:	2200      	movs	r2, #0
 8001584:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001586:	4b14      	ldr	r3, [pc, #80]	@ (80015d8 <HAL_I2C_MspInit+0x210>)
 8001588:	2200      	movs	r2, #0
 800158a:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800158c:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <HAL_I2C_MspInit+0x210>)
 800158e:	2200      	movs	r2, #0
 8001590:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001592:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <HAL_I2C_MspInit+0x210>)
 8001594:	2200      	movs	r2, #0
 8001596:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001598:	480f      	ldr	r0, [pc, #60]	@ (80015d8 <HAL_I2C_MspInit+0x210>)
 800159a:	f000 fb73 	bl	8001c84 <HAL_DMA_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <HAL_I2C_MspInit+0x1e0>
      Error_Handler();
 80015a4:	f7ff fe2e 	bl	8001204 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a0b      	ldr	r2, [pc, #44]	@ (80015d8 <HAL_I2C_MspInit+0x210>)
 80015ac:	639a      	str	r2, [r3, #56]	@ 0x38
 80015ae:	4a0a      	ldr	r2, [pc, #40]	@ (80015d8 <HAL_I2C_MspInit+0x210>)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80015b4:	bf00      	nop
 80015b6:	37c0      	adds	r7, #192	@ 0xc0
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40005400 	.word	0x40005400
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40020400 	.word	0x40020400
 80015c8:	40005800 	.word	0x40005800
 80015cc:	40021400 	.word	0x40021400
 80015d0:	20000308 	.word	0x20000308
 80015d4:	40026040 	.word	0x40026040
 80015d8:	20000368 	.word	0x20000368
 80015dc:	40026070 	.word	0x40026070

080015e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b0b0      	sub	sp, #192	@ 0xc0
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015f8:	f107 031c 	add.w	r3, r7, #28
 80015fc:	2290      	movs	r2, #144	@ 0x90
 80015fe:	2100      	movs	r1, #0
 8001600:	4618      	mov	r0, r3
 8001602:	f004 fb64 	bl	8005cce <memset>
  if(huart->Instance==USART2)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a53      	ldr	r2, [pc, #332]	@ (8001758 <HAL_UART_MspInit+0x178>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d15c      	bne.n	80016ca <HAL_UART_MspInit+0xea>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001610:	2380      	movs	r3, #128	@ 0x80
 8001612:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001614:	2300      	movs	r3, #0
 8001616:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001618:	f107 031c 	add.w	r3, r7, #28
 800161c:	4618      	mov	r0, r3
 800161e:	f002 ff71 	bl	8004504 <HAL_RCCEx_PeriphCLKConfig>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001628:	f7ff fdec 	bl	8001204 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800162c:	4b4b      	ldr	r3, [pc, #300]	@ (800175c <HAL_UART_MspInit+0x17c>)
 800162e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001630:	4a4a      	ldr	r2, [pc, #296]	@ (800175c <HAL_UART_MspInit+0x17c>)
 8001632:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001636:	6413      	str	r3, [r2, #64]	@ 0x40
 8001638:	4b48      	ldr	r3, [pc, #288]	@ (800175c <HAL_UART_MspInit+0x17c>)
 800163a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001640:	61bb      	str	r3, [r7, #24]
 8001642:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001644:	4b45      	ldr	r3, [pc, #276]	@ (800175c <HAL_UART_MspInit+0x17c>)
 8001646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001648:	4a44      	ldr	r2, [pc, #272]	@ (800175c <HAL_UART_MspInit+0x17c>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001650:	4b42      	ldr	r3, [pc, #264]	@ (800175c <HAL_UART_MspInit+0x17c>)
 8001652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800165c:	4b3f      	ldr	r3, [pc, #252]	@ (800175c <HAL_UART_MspInit+0x17c>)
 800165e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001660:	4a3e      	ldr	r2, [pc, #248]	@ (800175c <HAL_UART_MspInit+0x17c>)
 8001662:	f043 0308 	orr.w	r3, r3, #8
 8001666:	6313      	str	r3, [r2, #48]	@ 0x30
 8001668:	4b3c      	ldr	r3, [pc, #240]	@ (800175c <HAL_UART_MspInit+0x17c>)
 800166a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166c:	f003 0308 	and.w	r3, r3, #8
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001674:	2308      	movs	r3, #8
 8001676:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
 800167c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001686:	2303      	movs	r3, #3
 8001688:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800168c:	2307      	movs	r3, #7
 800168e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001692:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001696:	4619      	mov	r1, r3
 8001698:	4831      	ldr	r0, [pc, #196]	@ (8001760 <HAL_UART_MspInit+0x180>)
 800169a:	f001 f92b 	bl	80028f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800169e:	2320      	movs	r3, #32
 80016a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a4:	2302      	movs	r3, #2
 80016a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b0:	2303      	movs	r3, #3
 80016b2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016b6:	2307      	movs	r3, #7
 80016b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016bc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80016c0:	4619      	mov	r1, r3
 80016c2:	4828      	ldr	r0, [pc, #160]	@ (8001764 <HAL_UART_MspInit+0x184>)
 80016c4:	f001 f916 	bl	80028f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016c8:	e041      	b.n	800174e <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART3)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a26      	ldr	r2, [pc, #152]	@ (8001768 <HAL_UART_MspInit+0x188>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d13c      	bne.n	800174e <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016d8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80016da:	2300      	movs	r3, #0
 80016dc:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016de:	f107 031c 	add.w	r3, r7, #28
 80016e2:	4618      	mov	r0, r3
 80016e4:	f002 ff0e 	bl	8004504 <HAL_RCCEx_PeriphCLKConfig>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_UART_MspInit+0x112>
      Error_Handler();
 80016ee:	f7ff fd89 	bl	8001204 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016f2:	4b1a      	ldr	r3, [pc, #104]	@ (800175c <HAL_UART_MspInit+0x17c>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f6:	4a19      	ldr	r2, [pc, #100]	@ (800175c <HAL_UART_MspInit+0x17c>)
 80016f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80016fe:	4b17      	ldr	r3, [pc, #92]	@ (800175c <HAL_UART_MspInit+0x17c>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001702:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800170a:	4b14      	ldr	r3, [pc, #80]	@ (800175c <HAL_UART_MspInit+0x17c>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	4a13      	ldr	r2, [pc, #76]	@ (800175c <HAL_UART_MspInit+0x17c>)
 8001710:	f043 0308 	orr.w	r3, r3, #8
 8001714:	6313      	str	r3, [r2, #48]	@ 0x30
 8001716:	4b11      	ldr	r3, [pc, #68]	@ (800175c <HAL_UART_MspInit+0x17c>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001722:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001726:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001736:	2303      	movs	r3, #3
 8001738:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800173c:	2307      	movs	r3, #7
 800173e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001742:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001746:	4619      	mov	r1, r3
 8001748:	4806      	ldr	r0, [pc, #24]	@ (8001764 <HAL_UART_MspInit+0x184>)
 800174a:	f001 f8d3 	bl	80028f4 <HAL_GPIO_Init>
}
 800174e:	bf00      	nop
 8001750:	37c0      	adds	r7, #192	@ 0xc0
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40004400 	.word	0x40004400
 800175c:	40023800 	.word	0x40023800
 8001760:	40020000 	.word	0x40020000
 8001764:	40020c00 	.word	0x40020c00
 8001768:	40004800 	.word	0x40004800

0800176c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b0ae      	sub	sp, #184	@ 0xb8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	2290      	movs	r2, #144	@ 0x90
 800178a:	2100      	movs	r1, #0
 800178c:	4618      	mov	r0, r3
 800178e:	f004 fa9e 	bl	8005cce <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800179a:	d159      	bne.n	8001850 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800179c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80017a0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	4618      	mov	r0, r3
 80017ae:	f002 fea9 	bl	8004504 <HAL_RCCEx_PeriphCLKConfig>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80017b8:	f7ff fd24 	bl	8001204 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017bc:	4b26      	ldr	r3, [pc, #152]	@ (8001858 <HAL_PCD_MspInit+0xec>)
 80017be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c0:	4a25      	ldr	r2, [pc, #148]	@ (8001858 <HAL_PCD_MspInit+0xec>)
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c8:	4b23      	ldr	r3, [pc, #140]	@ (8001858 <HAL_PCD_MspInit+0xec>)
 80017ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80017d4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80017d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017dc:	2302      	movs	r3, #2
 80017de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e8:	2303      	movs	r3, #3
 80017ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017ee:	230a      	movs	r3, #10
 80017f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80017f8:	4619      	mov	r1, r3
 80017fa:	4818      	ldr	r0, [pc, #96]	@ (800185c <HAL_PCD_MspInit+0xf0>)
 80017fc:	f001 f87a 	bl	80028f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001800:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001804:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001808:	2300      	movs	r3, #0
 800180a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001814:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001818:	4619      	mov	r1, r3
 800181a:	4810      	ldr	r0, [pc, #64]	@ (800185c <HAL_PCD_MspInit+0xf0>)
 800181c:	f001 f86a 	bl	80028f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001820:	4b0d      	ldr	r3, [pc, #52]	@ (8001858 <HAL_PCD_MspInit+0xec>)
 8001822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001824:	4a0c      	ldr	r2, [pc, #48]	@ (8001858 <HAL_PCD_MspInit+0xec>)
 8001826:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800182a:	6353      	str	r3, [r2, #52]	@ 0x34
 800182c:	4b0a      	ldr	r3, [pc, #40]	@ (8001858 <HAL_PCD_MspInit+0xec>)
 800182e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001830:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	4b07      	ldr	r3, [pc, #28]	@ (8001858 <HAL_PCD_MspInit+0xec>)
 800183a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800183c:	4a06      	ldr	r2, [pc, #24]	@ (8001858 <HAL_PCD_MspInit+0xec>)
 800183e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001842:	6453      	str	r3, [r2, #68]	@ 0x44
 8001844:	4b04      	ldr	r3, [pc, #16]	@ (8001858 <HAL_PCD_MspInit+0xec>)
 8001846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001848:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001850:	bf00      	nop
 8001852:	37b8      	adds	r7, #184	@ 0xb8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40023800 	.word	0x40023800
 800185c:	40020000 	.word	0x40020000

08001860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <NMI_Handler+0x4>

08001868 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <HardFault_Handler+0x4>

08001870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001874:	bf00      	nop
 8001876:	e7fd      	b.n	8001874 <MemManage_Handler+0x4>

08001878 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800187c:	bf00      	nop
 800187e:	e7fd      	b.n	800187c <BusFault_Handler+0x4>

08001880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001884:	bf00      	nop
 8001886:	e7fd      	b.n	8001884 <UsageFault_Handler+0x4>

08001888 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b6:	f000 f88f 	bl	80019d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
	...

080018c0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80018c4:	4802      	ldr	r0, [pc, #8]	@ (80018d0 <DMA1_Stream2_IRQHandler+0x10>)
 80018c6:	f000 fa8b 	bl	8001de0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000308 	.word	0x20000308

080018d4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80018d8:	4802      	ldr	r0, [pc, #8]	@ (80018e4 <DMA1_Stream4_IRQHandler+0x10>)
 80018da:	f000 fa81 	bl	8001de0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000368 	.word	0x20000368

080018e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018ec:	4b06      	ldr	r3, [pc, #24]	@ (8001908 <SystemInit+0x20>)
 80018ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018f2:	4a05      	ldr	r2, [pc, #20]	@ (8001908 <SystemInit+0x20>)
 80018f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800190c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001944 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001910:	f7ff ffea 	bl	80018e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001914:	480c      	ldr	r0, [pc, #48]	@ (8001948 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001916:	490d      	ldr	r1, [pc, #52]	@ (800194c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001918:	4a0d      	ldr	r2, [pc, #52]	@ (8001950 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800191a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800191c:	e002      	b.n	8001924 <LoopCopyDataInit>

0800191e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800191e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001922:	3304      	adds	r3, #4

08001924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001928:	d3f9      	bcc.n	800191e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800192a:	4a0a      	ldr	r2, [pc, #40]	@ (8001954 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800192c:	4c0a      	ldr	r4, [pc, #40]	@ (8001958 <LoopFillZerobss+0x22>)
  movs r3, #0
 800192e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001930:	e001      	b.n	8001936 <LoopFillZerobss>

08001932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001934:	3204      	adds	r2, #4

08001936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001938:	d3fb      	bcc.n	8001932 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800193a:	f004 f9d1 	bl	8005ce0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800193e:	f7fe ffb9 	bl	80008b4 <main>
  bx  lr    
 8001942:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001944:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800194c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001950:	08005d8c 	.word	0x08005d8c
  ldr r2, =_sbss
 8001954:	20000154 	.word	0x20000154
  ldr r4, =_ebss
 8001958:	200009f8 	.word	0x200009f8

0800195c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800195c:	e7fe      	b.n	800195c <ADC_IRQHandler>

0800195e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001962:	2003      	movs	r0, #3
 8001964:	f000 f94c 	bl	8001c00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001968:	2000      	movs	r0, #0
 800196a:	f000 f805 	bl	8001978 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800196e:	f7ff fc4f 	bl	8001210 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	bd80      	pop	{r7, pc}

08001978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001980:	4b12      	ldr	r3, [pc, #72]	@ (80019cc <HAL_InitTick+0x54>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4b12      	ldr	r3, [pc, #72]	@ (80019d0 <HAL_InitTick+0x58>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	4619      	mov	r1, r3
 800198a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800198e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001992:	fbb2 f3f3 	udiv	r3, r2, r3
 8001996:	4618      	mov	r0, r3
 8001998:	f000 f967 	bl	8001c6a <HAL_SYSTICK_Config>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e00e      	b.n	80019c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b0f      	cmp	r3, #15
 80019aa:	d80a      	bhi.n	80019c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019ac:	2200      	movs	r2, #0
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	f04f 30ff 	mov.w	r0, #4294967295
 80019b4:	f000 f92f 	bl	8001c16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019b8:	4a06      	ldr	r2, [pc, #24]	@ (80019d4 <HAL_InitTick+0x5c>)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019be:	2300      	movs	r3, #0
 80019c0:	e000      	b.n	80019c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000008 	.word	0x20000008
 80019d0:	20000010 	.word	0x20000010
 80019d4:	2000000c 	.word	0x2000000c

080019d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019dc:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <HAL_IncTick+0x20>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <HAL_IncTick+0x24>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4413      	add	r3, r2
 80019e8:	4a04      	ldr	r2, [pc, #16]	@ (80019fc <HAL_IncTick+0x24>)
 80019ea:	6013      	str	r3, [r2, #0]
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	20000010 	.word	0x20000010
 80019fc:	200009f4 	.word	0x200009f4

08001a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return uwTick;
 8001a04:	4b03      	ldr	r3, [pc, #12]	@ (8001a14 <HAL_GetTick+0x14>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	200009f4 	.word	0x200009f4

08001a18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a20:	f7ff ffee 	bl	8001a00 <HAL_GetTick>
 8001a24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a30:	d005      	beq.n	8001a3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a32:	4b0a      	ldr	r3, [pc, #40]	@ (8001a5c <HAL_Delay+0x44>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	461a      	mov	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a3e:	bf00      	nop
 8001a40:	f7ff ffde 	bl	8001a00 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d8f7      	bhi.n	8001a40 <HAL_Delay+0x28>
  {
  }
}
 8001a50:	bf00      	nop
 8001a52:	bf00      	nop
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000010 	.word	0x20000010

08001a60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a70:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa0 <__NVIC_SetPriorityGrouping+0x40>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a76:	68ba      	ldr	r2, [r7, #8]
 8001a78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a88:	4b06      	ldr	r3, [pc, #24]	@ (8001aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a8e:	4a04      	ldr	r2, [pc, #16]	@ (8001aa0 <__NVIC_SetPriorityGrouping+0x40>)
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	60d3      	str	r3, [r2, #12]
}
 8001a94:	bf00      	nop
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000ed00 	.word	0xe000ed00
 8001aa4:	05fa0000 	.word	0x05fa0000

08001aa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aac:	4b04      	ldr	r3, [pc, #16]	@ (8001ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	0a1b      	lsrs	r3, r3, #8
 8001ab2:	f003 0307 	and.w	r3, r3, #7
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	db0b      	blt.n	8001aee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	f003 021f 	and.w	r2, r3, #31
 8001adc:	4907      	ldr	r1, [pc, #28]	@ (8001afc <__NVIC_EnableIRQ+0x38>)
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	095b      	lsrs	r3, r3, #5
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000e100 	.word	0xe000e100

08001b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	6039      	str	r1, [r7, #0]
 8001b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	db0a      	blt.n	8001b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	490c      	ldr	r1, [pc, #48]	@ (8001b4c <__NVIC_SetPriority+0x4c>)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	0112      	lsls	r2, r2, #4
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	440b      	add	r3, r1
 8001b24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b28:	e00a      	b.n	8001b40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4908      	ldr	r1, [pc, #32]	@ (8001b50 <__NVIC_SetPriority+0x50>)
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	3b04      	subs	r3, #4
 8001b38:	0112      	lsls	r2, r2, #4
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	761a      	strb	r2, [r3, #24]
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000e100 	.word	0xe000e100
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b089      	sub	sp, #36	@ 0x24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f1c3 0307 	rsb	r3, r3, #7
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	bf28      	it	cs
 8001b72:	2304      	movcs	r3, #4
 8001b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	2b06      	cmp	r3, #6
 8001b7c:	d902      	bls.n	8001b84 <NVIC_EncodePriority+0x30>
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3b03      	subs	r3, #3
 8001b82:	e000      	b.n	8001b86 <NVIC_EncodePriority+0x32>
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	f04f 32ff 	mov.w	r2, #4294967295
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43da      	mvns	r2, r3
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	401a      	ands	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba6:	43d9      	mvns	r1, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bac:	4313      	orrs	r3, r2
         );
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3724      	adds	r7, #36	@ 0x24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bcc:	d301      	bcc.n	8001bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e00f      	b.n	8001bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bfc <SysTick_Config+0x40>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bda:	210f      	movs	r1, #15
 8001bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001be0:	f7ff ff8e 	bl	8001b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be4:	4b05      	ldr	r3, [pc, #20]	@ (8001bfc <SysTick_Config+0x40>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bea:	4b04      	ldr	r3, [pc, #16]	@ (8001bfc <SysTick_Config+0x40>)
 8001bec:	2207      	movs	r2, #7
 8001bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	e000e010 	.word	0xe000e010

08001c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff ff29 	bl	8001a60 <__NVIC_SetPriorityGrouping>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b086      	sub	sp, #24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c28:	f7ff ff3e 	bl	8001aa8 <__NVIC_GetPriorityGrouping>
 8001c2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	68b9      	ldr	r1, [r7, #8]
 8001c32:	6978      	ldr	r0, [r7, #20]
 8001c34:	f7ff ff8e 	bl	8001b54 <NVIC_EncodePriority>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c3e:	4611      	mov	r1, r2
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff5d 	bl	8001b00 <__NVIC_SetPriority>
}
 8001c46:	bf00      	nop
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	4603      	mov	r3, r0
 8001c56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff31 	bl	8001ac4 <__NVIC_EnableIRQ>
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff ffa2 	bl	8001bbc <SysTick_Config>
 8001c78:	4603      	mov	r3, r0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c90:	f7ff feb6 	bl	8001a00 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e099      	b.n	8001dd4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0201 	bic.w	r2, r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cc0:	e00f      	b.n	8001ce2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cc2:	f7ff fe9d 	bl	8001a00 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b05      	cmp	r3, #5
 8001cce:	d908      	bls.n	8001ce2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2220      	movs	r2, #32
 8001cd4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2203      	movs	r2, #3
 8001cda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e078      	b.n	8001dd4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1e8      	bne.n	8001cc2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	4b38      	ldr	r3, [pc, #224]	@ (8001ddc <HAL_DMA_Init+0x158>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d107      	bne.n	8001d4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d44:	4313      	orrs	r3, r2
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	f023 0307 	bic.w	r3, r3, #7
 8001d62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	d117      	bne.n	8001da6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00e      	beq.n	8001da6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f9e9 	bl	8002160 <DMA_CheckFifoParam>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d008      	beq.n	8001da6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2240      	movs	r2, #64	@ 0x40
 8001d98:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001da2:	2301      	movs	r3, #1
 8001da4:	e016      	b.n	8001dd4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f9a0 	bl	80020f4 <DMA_CalcBaseAndBitshift>
 8001db4:	4603      	mov	r3, r0
 8001db6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dbc:	223f      	movs	r2, #63	@ 0x3f
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	e010803f 	.word	0xe010803f

08001de0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001dec:	4b8e      	ldr	r3, [pc, #568]	@ (8002028 <HAL_DMA_IRQHandler+0x248>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a8e      	ldr	r2, [pc, #568]	@ (800202c <HAL_DMA_IRQHandler+0x24c>)
 8001df2:	fba2 2303 	umull	r2, r3, r2, r3
 8001df6:	0a9b      	lsrs	r3, r3, #10
 8001df8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dfe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e0a:	2208      	movs	r2, #8
 8001e0c:	409a      	lsls	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	4013      	ands	r3, r2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d01a      	beq.n	8001e4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d013      	beq.n	8001e4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 0204 	bic.w	r2, r2, #4
 8001e32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e38:	2208      	movs	r2, #8
 8001e3a:	409a      	lsls	r2, r3
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e44:	f043 0201 	orr.w	r2, r3, #1
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e50:	2201      	movs	r2, #1
 8001e52:	409a      	lsls	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d012      	beq.n	8001e82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00b      	beq.n	8001e82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e6e:	2201      	movs	r2, #1
 8001e70:	409a      	lsls	r2, r3
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e7a:	f043 0202 	orr.w	r2, r3, #2
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e86:	2204      	movs	r2, #4
 8001e88:	409a      	lsls	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d012      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00b      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea4:	2204      	movs	r2, #4
 8001ea6:	409a      	lsls	r2, r3
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eb0:	f043 0204 	orr.w	r2, r3, #4
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ebc:	2210      	movs	r2, #16
 8001ebe:	409a      	lsls	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d043      	beq.n	8001f50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0308 	and.w	r3, r3, #8
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d03c      	beq.n	8001f50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eda:	2210      	movs	r2, #16
 8001edc:	409a      	lsls	r2, r3
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d018      	beq.n	8001f22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d108      	bne.n	8001f10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d024      	beq.n	8001f50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	4798      	blx	r3
 8001f0e:	e01f      	b.n	8001f50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d01b      	beq.n	8001f50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	4798      	blx	r3
 8001f20:	e016      	b.n	8001f50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d107      	bne.n	8001f40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0208 	bic.w	r2, r2, #8
 8001f3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f54:	2220      	movs	r2, #32
 8001f56:	409a      	lsls	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f000 808f 	beq.w	8002080 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0310 	and.w	r3, r3, #16
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 8087 	beq.w	8002080 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f76:	2220      	movs	r2, #32
 8001f78:	409a      	lsls	r2, r3
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b05      	cmp	r3, #5
 8001f88:	d136      	bne.n	8001ff8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 0216 	bic.w	r2, r2, #22
 8001f98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	695a      	ldr	r2, [r3, #20]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fa8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d103      	bne.n	8001fba <HAL_DMA_IRQHandler+0x1da>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d007      	beq.n	8001fca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 0208 	bic.w	r2, r2, #8
 8001fc8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fce:	223f      	movs	r2, #63	@ 0x3f
 8001fd0:	409a      	lsls	r2, r3
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d07e      	beq.n	80020ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	4798      	blx	r3
        }
        return;
 8001ff6:	e079      	b.n	80020ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d01d      	beq.n	8002042 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10d      	bne.n	8002030 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002018:	2b00      	cmp	r3, #0
 800201a:	d031      	beq.n	8002080 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	4798      	blx	r3
 8002024:	e02c      	b.n	8002080 <HAL_DMA_IRQHandler+0x2a0>
 8002026:	bf00      	nop
 8002028:	20000008 	.word	0x20000008
 800202c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002034:	2b00      	cmp	r3, #0
 8002036:	d023      	beq.n	8002080 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	4798      	blx	r3
 8002040:	e01e      	b.n	8002080 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10f      	bne.n	8002070 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0210 	bic.w	r2, r2, #16
 800205e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002084:	2b00      	cmp	r3, #0
 8002086:	d032      	beq.n	80020ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b00      	cmp	r3, #0
 8002092:	d022      	beq.n	80020da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2205      	movs	r2, #5
 8002098:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0201 	bic.w	r2, r2, #1
 80020aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	3301      	adds	r3, #1
 80020b0:	60bb      	str	r3, [r7, #8]
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d307      	bcc.n	80020c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f2      	bne.n	80020ac <HAL_DMA_IRQHandler+0x2cc>
 80020c6:	e000      	b.n	80020ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d005      	beq.n	80020ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	4798      	blx	r3
 80020ea:	e000      	b.n	80020ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80020ec:	bf00      	nop
    }
  }
}
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	b2db      	uxtb	r3, r3
 8002102:	3b10      	subs	r3, #16
 8002104:	4a13      	ldr	r2, [pc, #76]	@ (8002154 <DMA_CalcBaseAndBitshift+0x60>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	091b      	lsrs	r3, r3, #4
 800210c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800210e:	4a12      	ldr	r2, [pc, #72]	@ (8002158 <DMA_CalcBaseAndBitshift+0x64>)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4413      	add	r3, r2
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2b03      	cmp	r3, #3
 8002120:	d908      	bls.n	8002134 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	4b0c      	ldr	r3, [pc, #48]	@ (800215c <DMA_CalcBaseAndBitshift+0x68>)
 800212a:	4013      	ands	r3, r2
 800212c:	1d1a      	adds	r2, r3, #4
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	659a      	str	r2, [r3, #88]	@ 0x58
 8002132:	e006      	b.n	8002142 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	4b08      	ldr	r3, [pc, #32]	@ (800215c <DMA_CalcBaseAndBitshift+0x68>)
 800213c:	4013      	ands	r3, r2
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002146:	4618      	mov	r0, r3
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	aaaaaaab 	.word	0xaaaaaaab
 8002158:	08005d74 	.word	0x08005d74
 800215c:	fffffc00 	.word	0xfffffc00

08002160 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002168:	2300      	movs	r3, #0
 800216a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002170:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d11f      	bne.n	80021ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	2b03      	cmp	r3, #3
 800217e:	d856      	bhi.n	800222e <DMA_CheckFifoParam+0xce>
 8002180:	a201      	add	r2, pc, #4	@ (adr r2, 8002188 <DMA_CheckFifoParam+0x28>)
 8002182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002186:	bf00      	nop
 8002188:	08002199 	.word	0x08002199
 800218c:	080021ab 	.word	0x080021ab
 8002190:	08002199 	.word	0x08002199
 8002194:	0800222f 	.word	0x0800222f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d046      	beq.n	8002232 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021a8:	e043      	b.n	8002232 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021b2:	d140      	bne.n	8002236 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021b8:	e03d      	b.n	8002236 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021c2:	d121      	bne.n	8002208 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d837      	bhi.n	800223a <DMA_CheckFifoParam+0xda>
 80021ca:	a201      	add	r2, pc, #4	@ (adr r2, 80021d0 <DMA_CheckFifoParam+0x70>)
 80021cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d0:	080021e1 	.word	0x080021e1
 80021d4:	080021e7 	.word	0x080021e7
 80021d8:	080021e1 	.word	0x080021e1
 80021dc:	080021f9 	.word	0x080021f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	73fb      	strb	r3, [r7, #15]
      break;
 80021e4:	e030      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d025      	beq.n	800223e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021f6:	e022      	b.n	800223e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002200:	d11f      	bne.n	8002242 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002206:	e01c      	b.n	8002242 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b02      	cmp	r3, #2
 800220c:	d903      	bls.n	8002216 <DMA_CheckFifoParam+0xb6>
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	2b03      	cmp	r3, #3
 8002212:	d003      	beq.n	800221c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002214:	e018      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	73fb      	strb	r3, [r7, #15]
      break;
 800221a:	e015      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002220:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00e      	beq.n	8002246 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	73fb      	strb	r3, [r7, #15]
      break;
 800222c:	e00b      	b.n	8002246 <DMA_CheckFifoParam+0xe6>
      break;
 800222e:	bf00      	nop
 8002230:	e00a      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      break;
 8002232:	bf00      	nop
 8002234:	e008      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      break;
 8002236:	bf00      	nop
 8002238:	e006      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      break;
 800223a:	bf00      	nop
 800223c:	e004      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      break;
 800223e:	bf00      	nop
 8002240:	e002      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      break;   
 8002242:	bf00      	nop
 8002244:	e000      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      break;
 8002246:	bf00      	nop
    }
  } 
  
  return status; 
 8002248:	7bfb      	ldrb	r3, [r7, #15]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop

08002258 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e086      	b.n	8002378 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002270:	2b00      	cmp	r3, #0
 8002272:	d106      	bne.n	8002282 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2223      	movs	r2, #35	@ 0x23
 8002278:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7fe ffeb 	bl	8001258 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002282:	4b3f      	ldr	r3, [pc, #252]	@ (8002380 <HAL_ETH_Init+0x128>)
 8002284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002286:	4a3e      	ldr	r2, [pc, #248]	@ (8002380 <HAL_ETH_Init+0x128>)
 8002288:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800228c:	6453      	str	r3, [r2, #68]	@ 0x44
 800228e:	4b3c      	ldr	r3, [pc, #240]	@ (8002380 <HAL_ETH_Init+0x128>)
 8002290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002292:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002296:	60bb      	str	r3, [r7, #8]
 8002298:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800229a:	4b3a      	ldr	r3, [pc, #232]	@ (8002384 <HAL_ETH_Init+0x12c>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	4a39      	ldr	r2, [pc, #228]	@ (8002384 <HAL_ETH_Init+0x12c>)
 80022a0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80022a4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80022a6:	4b37      	ldr	r3, [pc, #220]	@ (8002384 <HAL_ETH_Init+0x12c>)
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	4935      	ldr	r1, [pc, #212]	@ (8002384 <HAL_ETH_Init+0x12c>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80022b4:	4b33      	ldr	r3, [pc, #204]	@ (8002384 <HAL_ETH_Init+0x12c>)
 80022b6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6812      	ldr	r2, [r2, #0]
 80022c6:	f043 0301 	orr.w	r3, r3, #1
 80022ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80022ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022d0:	f7ff fb96 	bl	8001a00 <HAL_GetTick>
 80022d4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80022d6:	e011      	b.n	80022fc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80022d8:	f7ff fb92 	bl	8001a00 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80022e6:	d909      	bls.n	80022fc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2204      	movs	r2, #4
 80022ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	22e0      	movs	r2, #224	@ 0xe0
 80022f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e03d      	b.n	8002378 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1e4      	bne.n	80022d8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f97a 	bl	8002608 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 fa25 	bl	8002764 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 fa7b 	bl	8002816 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	461a      	mov	r2, r3
 8002326:	2100      	movs	r1, #0
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 f9e3 	bl	80026f4 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 800233c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	4b0f      	ldr	r3, [pc, #60]	@ (8002388 <HAL_ETH_Init+0x130>)
 800234c:	430b      	orrs	r3, r1
 800234e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002362:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2210      	movs	r2, #16
 8002372:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40023800 	.word	0x40023800
 8002384:	40013800 	.word	0x40013800
 8002388:	00020060 	.word	0x00020060

0800238c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	4b53      	ldr	r3, [pc, #332]	@ (80024f0 <ETH_SetMACConfig+0x164>)
 80023a2:	4013      	ands	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	7b9b      	ldrb	r3, [r3, #14]
 80023aa:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	7c12      	ldrb	r2, [r2, #16]
 80023b0:	2a00      	cmp	r2, #0
 80023b2:	d102      	bne.n	80023ba <ETH_SetMACConfig+0x2e>
 80023b4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80023b8:	e000      	b.n	80023bc <ETH_SetMACConfig+0x30>
 80023ba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80023bc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	7c52      	ldrb	r2, [r2, #17]
 80023c2:	2a00      	cmp	r2, #0
 80023c4:	d102      	bne.n	80023cc <ETH_SetMACConfig+0x40>
 80023c6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80023ca:	e000      	b.n	80023ce <ETH_SetMACConfig+0x42>
 80023cc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80023ce:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80023d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	7fdb      	ldrb	r3, [r3, #31]
 80023da:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80023dc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80023e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	7f92      	ldrb	r2, [r2, #30]
 80023e8:	2a00      	cmp	r2, #0
 80023ea:	d102      	bne.n	80023f2 <ETH_SetMACConfig+0x66>
 80023ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023f0:	e000      	b.n	80023f4 <ETH_SetMACConfig+0x68>
 80023f2:	2200      	movs	r2, #0
                        macconf->Speed |
 80023f4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	7f1b      	ldrb	r3, [r3, #28]
 80023fa:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80023fc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002402:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	791b      	ldrb	r3, [r3, #4]
 8002408:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800240a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002412:	2a00      	cmp	r2, #0
 8002414:	d102      	bne.n	800241c <ETH_SetMACConfig+0x90>
 8002416:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800241a:	e000      	b.n	800241e <ETH_SetMACConfig+0x92>
 800241c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800241e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	7bdb      	ldrb	r3, [r3, #15]
 8002424:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002426:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800242c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002434:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002436:	4313      	orrs	r3, r2
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	4313      	orrs	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800244e:	2001      	movs	r0, #1
 8002450:	f7ff fae2 	bl	8001a18 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800246a:	4013      	ands	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002472:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800247a:	2a00      	cmp	r2, #0
 800247c:	d101      	bne.n	8002482 <ETH_SetMACConfig+0xf6>
 800247e:	2280      	movs	r2, #128	@ 0x80
 8002480:	e000      	b.n	8002484 <ETH_SetMACConfig+0xf8>
 8002482:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002484:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800248a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002492:	2a01      	cmp	r2, #1
 8002494:	d101      	bne.n	800249a <ETH_SetMACConfig+0x10e>
 8002496:	2208      	movs	r2, #8
 8002498:	e000      	b.n	800249c <ETH_SetMACConfig+0x110>
 800249a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800249c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80024a4:	2a01      	cmp	r2, #1
 80024a6:	d101      	bne.n	80024ac <ETH_SetMACConfig+0x120>
 80024a8:	2204      	movs	r2, #4
 80024aa:	e000      	b.n	80024ae <ETH_SetMACConfig+0x122>
 80024ac:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80024ae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80024b6:	2a01      	cmp	r2, #1
 80024b8:	d101      	bne.n	80024be <ETH_SetMACConfig+0x132>
 80024ba:	2202      	movs	r2, #2
 80024bc:	e000      	b.n	80024c0 <ETH_SetMACConfig+0x134>
 80024be:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024c0:	4313      	orrs	r3, r2
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024d8:	2001      	movs	r0, #1
 80024da:	f7ff fa9d 	bl	8001a18 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	619a      	str	r2, [r3, #24]
}
 80024e6:	bf00      	nop
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	fd20810f 	.word	0xfd20810f

080024f4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	4b3d      	ldr	r3, [pc, #244]	@ (8002604 <ETH_SetDMAConfig+0x110>)
 800250e:	4013      	ands	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	7b1b      	ldrb	r3, [r3, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d102      	bne.n	8002520 <ETH_SetDMAConfig+0x2c>
 800251a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800251e:	e000      	b.n	8002522 <ETH_SetDMAConfig+0x2e>
 8002520:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	7b5b      	ldrb	r3, [r3, #13]
 8002526:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002528:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	7f52      	ldrb	r2, [r2, #29]
 800252e:	2a00      	cmp	r2, #0
 8002530:	d102      	bne.n	8002538 <ETH_SetDMAConfig+0x44>
 8002532:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002536:	e000      	b.n	800253a <ETH_SetDMAConfig+0x46>
 8002538:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800253a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	7b9b      	ldrb	r3, [r3, #14]
 8002540:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002542:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002548:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	7f1b      	ldrb	r3, [r3, #28]
 800254e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002550:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	7f9b      	ldrb	r3, [r3, #30]
 8002556:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002558:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800255e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002566:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002568:	4313      	orrs	r3, r2
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	4313      	orrs	r3, r2
 800256e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002578:	461a      	mov	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800258a:	2001      	movs	r0, #1
 800258c:	f7ff fa44 	bl	8001a18 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002598:	461a      	mov	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	791b      	ldrb	r3, [r3, #4]
 80025a2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025a8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80025ae:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80025b4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80025bc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80025be:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80025c6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80025cc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6812      	ldr	r2, [r2, #0]
 80025d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80025d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025da:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025e8:	2001      	movs	r0, #1
 80025ea:	f7ff fa15 	bl	8001a18 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025f6:	461a      	mov	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6013      	str	r3, [r2, #0]
}
 80025fc:	bf00      	nop
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	f8de3f23 	.word	0xf8de3f23

08002608 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b0a6      	sub	sp, #152	@ 0x98
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002610:	2301      	movs	r3, #1
 8002612:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002616:	2301      	movs	r3, #1
 8002618:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800261c:	2300      	movs	r3, #0
 800261e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002620:	2300      	movs	r3, #0
 8002622:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002626:	2301      	movs	r3, #1
 8002628:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800262c:	2300      	movs	r3, #0
 800262e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002632:	2301      	movs	r3, #1
 8002634:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002638:	2301      	movs	r3, #1
 800263a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800263e:	2300      	movs	r3, #0
 8002640:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002644:	2300      	movs	r3, #0
 8002646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800264a:	2300      	movs	r3, #0
 800264c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800264e:	2300      	movs	r3, #0
 8002650:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002654:	2300      	movs	r3, #0
 8002656:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002658:	2300      	movs	r3, #0
 800265a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800265e:	2300      	movs	r3, #0
 8002660:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002664:	2300      	movs	r3, #0
 8002666:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800266a:	2300      	movs	r3, #0
 800266c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002670:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002674:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002676:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800267a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800267c:	2300      	movs	r3, #0
 800267e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002682:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002686:	4619      	mov	r1, r3
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff fe7f 	bl	800238c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800268e:	2301      	movs	r3, #1
 8002690:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002692:	2301      	movs	r3, #1
 8002694:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002696:	2301      	movs	r3, #1
 8002698:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800269c:	2301      	movs	r3, #1
 800269e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80026a0:	2300      	movs	r3, #0
 80026a2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80026a4:	2300      	movs	r3, #0
 80026a6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80026aa:	2300      	movs	r3, #0
 80026ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80026b0:	2300      	movs	r3, #0
 80026b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80026b4:	2301      	movs	r3, #1
 80026b6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80026ba:	2301      	movs	r3, #1
 80026bc:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80026be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80026c2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80026c4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80026c8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80026ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026ce:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80026d0:	2301      	movs	r3, #1
 80026d2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80026da:	2300      	movs	r3, #0
 80026dc:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80026de:	f107 0308 	add.w	r3, r7, #8
 80026e2:	4619      	mov	r1, r3
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7ff ff05 	bl	80024f4 <ETH_SetDMAConfig>
}
 80026ea:	bf00      	nop
 80026ec:	3798      	adds	r7, #152	@ 0x98
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b087      	sub	sp, #28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3305      	adds	r3, #5
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	021b      	lsls	r3, r3, #8
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	3204      	adds	r2, #4
 800270c:	7812      	ldrb	r2, [r2, #0]
 800270e:	4313      	orrs	r3, r2
 8002710:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	4b11      	ldr	r3, [pc, #68]	@ (800275c <ETH_MACAddressConfig+0x68>)
 8002716:	4413      	add	r3, r2
 8002718:	461a      	mov	r2, r3
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3303      	adds	r3, #3
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	061a      	lsls	r2, r3, #24
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	3302      	adds	r3, #2
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	041b      	lsls	r3, r3, #16
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3301      	adds	r3, #1
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	021b      	lsls	r3, r3, #8
 8002738:	4313      	orrs	r3, r2
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	7812      	ldrb	r2, [r2, #0]
 800273e:	4313      	orrs	r3, r2
 8002740:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	4b06      	ldr	r3, [pc, #24]	@ (8002760 <ETH_MACAddressConfig+0x6c>)
 8002746:	4413      	add	r3, r2
 8002748:	461a      	mov	r2, r3
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	6013      	str	r3, [r2, #0]
}
 800274e:	bf00      	nop
 8002750:	371c      	adds	r7, #28
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40028040 	.word	0x40028040
 8002760:	40028044 	.word	0x40028044

08002764 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800276c:	2300      	movs	r3, #0
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	e03e      	b.n	80027f0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68d9      	ldr	r1, [r3, #12]
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	440b      	add	r3, r1
 8002782:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2200      	movs	r2, #0
 800278e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2200      	movs	r2, #0
 8002794:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2200      	movs	r2, #0
 800279a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800279c:	68b9      	ldr	r1, [r7, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	3206      	adds	r2, #6
 80027a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d80c      	bhi.n	80027d4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68d9      	ldr	r1, [r3, #12]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	1c5a      	adds	r2, r3, #1
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	440b      	add	r3, r1
 80027cc:	461a      	mov	r2, r3
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	60da      	str	r2, [r3, #12]
 80027d2:	e004      	b.n	80027de <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	461a      	mov	r2, r3
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	3301      	adds	r3, #1
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	d9bd      	bls.n	8002772 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002808:	611a      	str	r2, [r3, #16]
}
 800280a:	bf00      	nop
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002816:	b480      	push	{r7}
 8002818:	b085      	sub	sp, #20
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	e048      	b.n	80028b6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6919      	ldr	r1, [r3, #16]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	440b      	add	r3, r1
 8002834:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2200      	movs	r2, #0
 8002840:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2200      	movs	r2, #0
 8002846:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	2200      	movs	r2, #0
 800284c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	2200      	movs	r2, #0
 8002852:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2200      	movs	r2, #0
 8002858:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002860:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800287a:	68b9      	ldr	r1, [r7, #8]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	3212      	adds	r2, #18
 8002882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2b02      	cmp	r3, #2
 800288a:	d80c      	bhi.n	80028a6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6919      	ldr	r1, [r3, #16]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	1c5a      	adds	r2, r3, #1
 8002894:	4613      	mov	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	440b      	add	r3, r1
 800289e:	461a      	mov	r2, r3
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	60da      	str	r2, [r3, #12]
 80028a4:	e004      	b.n	80028b0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	461a      	mov	r2, r3
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	3301      	adds	r3, #1
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d9b3      	bls.n	8002824 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691a      	ldr	r2, [r3, #16]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028e6:	60da      	str	r2, [r3, #12]
}
 80028e8:	bf00      	nop
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b089      	sub	sp, #36	@ 0x24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80028fe:	2300      	movs	r3, #0
 8002900:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002902:	2300      	movs	r3, #0
 8002904:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002906:	2300      	movs	r3, #0
 8002908:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800290a:	2300      	movs	r3, #0
 800290c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800290e:	2300      	movs	r3, #0
 8002910:	61fb      	str	r3, [r7, #28]
 8002912:	e175      	b.n	8002c00 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002914:	2201      	movs	r2, #1
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	4013      	ands	r3, r2
 8002926:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	429a      	cmp	r2, r3
 800292e:	f040 8164 	bne.w	8002bfa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	2b01      	cmp	r3, #1
 800293c:	d005      	beq.n	800294a <HAL_GPIO_Init+0x56>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d130      	bne.n	80029ac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	2203      	movs	r2, #3
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	43db      	mvns	r3, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4013      	ands	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002980:	2201      	movs	r2, #1
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4013      	ands	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	091b      	lsrs	r3, r3, #4
 8002996:	f003 0201 	and.w	r2, r3, #1
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d017      	beq.n	80029e8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	2203      	movs	r2, #3
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4313      	orrs	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d123      	bne.n	8002a3c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	08da      	lsrs	r2, r3, #3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3208      	adds	r2, #8
 80029fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	220f      	movs	r2, #15
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	691a      	ldr	r2, [r3, #16]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	08da      	lsrs	r2, r3, #3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3208      	adds	r2, #8
 8002a36:	69b9      	ldr	r1, [r7, #24]
 8002a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	2203      	movs	r2, #3
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4013      	ands	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 0203 	and.w	r2, r3, #3
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 80be 	beq.w	8002bfa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a7e:	4b66      	ldr	r3, [pc, #408]	@ (8002c18 <HAL_GPIO_Init+0x324>)
 8002a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a82:	4a65      	ldr	r2, [pc, #404]	@ (8002c18 <HAL_GPIO_Init+0x324>)
 8002a84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a88:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a8a:	4b63      	ldr	r3, [pc, #396]	@ (8002c18 <HAL_GPIO_Init+0x324>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002a96:	4a61      	ldr	r2, [pc, #388]	@ (8002c1c <HAL_GPIO_Init+0x328>)
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	089b      	lsrs	r3, r3, #2
 8002a9c:	3302      	adds	r3, #2
 8002a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f003 0303 	and.w	r3, r3, #3
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	220f      	movs	r2, #15
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a58      	ldr	r2, [pc, #352]	@ (8002c20 <HAL_GPIO_Init+0x32c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d037      	beq.n	8002b32 <HAL_GPIO_Init+0x23e>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a57      	ldr	r2, [pc, #348]	@ (8002c24 <HAL_GPIO_Init+0x330>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d031      	beq.n	8002b2e <HAL_GPIO_Init+0x23a>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a56      	ldr	r2, [pc, #344]	@ (8002c28 <HAL_GPIO_Init+0x334>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d02b      	beq.n	8002b2a <HAL_GPIO_Init+0x236>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a55      	ldr	r2, [pc, #340]	@ (8002c2c <HAL_GPIO_Init+0x338>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d025      	beq.n	8002b26 <HAL_GPIO_Init+0x232>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a54      	ldr	r2, [pc, #336]	@ (8002c30 <HAL_GPIO_Init+0x33c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d01f      	beq.n	8002b22 <HAL_GPIO_Init+0x22e>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a53      	ldr	r2, [pc, #332]	@ (8002c34 <HAL_GPIO_Init+0x340>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d019      	beq.n	8002b1e <HAL_GPIO_Init+0x22a>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a52      	ldr	r2, [pc, #328]	@ (8002c38 <HAL_GPIO_Init+0x344>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d013      	beq.n	8002b1a <HAL_GPIO_Init+0x226>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a51      	ldr	r2, [pc, #324]	@ (8002c3c <HAL_GPIO_Init+0x348>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d00d      	beq.n	8002b16 <HAL_GPIO_Init+0x222>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a50      	ldr	r2, [pc, #320]	@ (8002c40 <HAL_GPIO_Init+0x34c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d007      	beq.n	8002b12 <HAL_GPIO_Init+0x21e>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a4f      	ldr	r2, [pc, #316]	@ (8002c44 <HAL_GPIO_Init+0x350>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d101      	bne.n	8002b0e <HAL_GPIO_Init+0x21a>
 8002b0a:	2309      	movs	r3, #9
 8002b0c:	e012      	b.n	8002b34 <HAL_GPIO_Init+0x240>
 8002b0e:	230a      	movs	r3, #10
 8002b10:	e010      	b.n	8002b34 <HAL_GPIO_Init+0x240>
 8002b12:	2308      	movs	r3, #8
 8002b14:	e00e      	b.n	8002b34 <HAL_GPIO_Init+0x240>
 8002b16:	2307      	movs	r3, #7
 8002b18:	e00c      	b.n	8002b34 <HAL_GPIO_Init+0x240>
 8002b1a:	2306      	movs	r3, #6
 8002b1c:	e00a      	b.n	8002b34 <HAL_GPIO_Init+0x240>
 8002b1e:	2305      	movs	r3, #5
 8002b20:	e008      	b.n	8002b34 <HAL_GPIO_Init+0x240>
 8002b22:	2304      	movs	r3, #4
 8002b24:	e006      	b.n	8002b34 <HAL_GPIO_Init+0x240>
 8002b26:	2303      	movs	r3, #3
 8002b28:	e004      	b.n	8002b34 <HAL_GPIO_Init+0x240>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e002      	b.n	8002b34 <HAL_GPIO_Init+0x240>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <HAL_GPIO_Init+0x240>
 8002b32:	2300      	movs	r3, #0
 8002b34:	69fa      	ldr	r2, [r7, #28]
 8002b36:	f002 0203 	and.w	r2, r2, #3
 8002b3a:	0092      	lsls	r2, r2, #2
 8002b3c:	4093      	lsls	r3, r2
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002b44:	4935      	ldr	r1, [pc, #212]	@ (8002c1c <HAL_GPIO_Init+0x328>)
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	089b      	lsrs	r3, r3, #2
 8002b4a:	3302      	adds	r3, #2
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b52:	4b3d      	ldr	r3, [pc, #244]	@ (8002c48 <HAL_GPIO_Init+0x354>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b76:	4a34      	ldr	r2, [pc, #208]	@ (8002c48 <HAL_GPIO_Init+0x354>)
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b7c:	4b32      	ldr	r3, [pc, #200]	@ (8002c48 <HAL_GPIO_Init+0x354>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ba0:	4a29      	ldr	r2, [pc, #164]	@ (8002c48 <HAL_GPIO_Init+0x354>)
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ba6:	4b28      	ldr	r3, [pc, #160]	@ (8002c48 <HAL_GPIO_Init+0x354>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bca:	4a1f      	ldr	r2, [pc, #124]	@ (8002c48 <HAL_GPIO_Init+0x354>)
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bd0:	4b1d      	ldr	r3, [pc, #116]	@ (8002c48 <HAL_GPIO_Init+0x354>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bf4:	4a14      	ldr	r2, [pc, #80]	@ (8002c48 <HAL_GPIO_Init+0x354>)
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	61fb      	str	r3, [r7, #28]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	2b0f      	cmp	r3, #15
 8002c04:	f67f ae86 	bls.w	8002914 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop
 8002c0c:	3724      	adds	r7, #36	@ 0x24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40013800 	.word	0x40013800
 8002c20:	40020000 	.word	0x40020000
 8002c24:	40020400 	.word	0x40020400
 8002c28:	40020800 	.word	0x40020800
 8002c2c:	40020c00 	.word	0x40020c00
 8002c30:	40021000 	.word	0x40021000
 8002c34:	40021400 	.word	0x40021400
 8002c38:	40021800 	.word	0x40021800
 8002c3c:	40021c00 	.word	0x40021c00
 8002c40:	40022000 	.word	0x40022000
 8002c44:	40022400 	.word	0x40022400
 8002c48:	40013c00 	.word	0x40013c00

08002c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	807b      	strh	r3, [r7, #2]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c5c:	787b      	ldrb	r3, [r7, #1]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c62:	887a      	ldrh	r2, [r7, #2]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002c68:	e003      	b.n	8002c72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002c6a:	887b      	ldrh	r3, [r7, #2]
 8002c6c:	041a      	lsls	r2, r3, #16
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	619a      	str	r2, [r3, #24]
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
	...

08002c80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e08b      	b.n	8002daa <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d106      	bne.n	8002cac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7fe fb8e 	bl	80013c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2224      	movs	r2, #36	@ 0x24
 8002cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0201 	bic.w	r2, r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002cd0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ce0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d107      	bne.n	8002cfa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689a      	ldr	r2, [r3, #8]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cf6:	609a      	str	r2, [r3, #8]
 8002cf8:	e006      	b.n	8002d08 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002d06:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d108      	bne.n	8002d22 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d1e:	605a      	str	r2, [r3, #4]
 8002d20:	e007      	b.n	8002d32 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6859      	ldr	r1, [r3, #4]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8002db4 <HAL_I2C_Init+0x134>)
 8002d3e:	430b      	orrs	r3, r1
 8002d40:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691a      	ldr	r2, [r3, #16]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69d9      	ldr	r1, [r3, #28]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a1a      	ldr	r2, [r3, #32]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0201 	orr.w	r2, r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2220      	movs	r2, #32
 8002d96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	02008000 	.word	0x02008000

08002db8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b088      	sub	sp, #32
 8002dbc:	af02      	add	r7, sp, #8
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	607a      	str	r2, [r7, #4]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	817b      	strh	r3, [r7, #10]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b20      	cmp	r3, #32
 8002dd6:	f040 80fd 	bne.w	8002fd4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d101      	bne.n	8002de8 <HAL_I2C_Master_Transmit+0x30>
 8002de4:	2302      	movs	r3, #2
 8002de6:	e0f6      	b.n	8002fd6 <HAL_I2C_Master_Transmit+0x21e>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002df0:	f7fe fe06 	bl	8001a00 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	2319      	movs	r3, #25
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 fa82 	bl	800330c <I2C_WaitOnFlagUntilTimeout>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e0e1      	b.n	8002fd6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2221      	movs	r2, #33	@ 0x21
 8002e16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2210      	movs	r2, #16
 8002e1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	893a      	ldrh	r2, [r7, #8]
 8002e32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	2bff      	cmp	r3, #255	@ 0xff
 8002e42:	d906      	bls.n	8002e52 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	22ff      	movs	r2, #255	@ 0xff
 8002e48:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002e4a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	e007      	b.n	8002e62 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002e5c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e60:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d024      	beq.n	8002eb4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6e:	781a      	ldrb	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	3b01      	subs	r3, #1
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e92:	3b01      	subs	r3, #1
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	8979      	ldrh	r1, [r7, #10]
 8002ea6:	4b4e      	ldr	r3, [pc, #312]	@ (8002fe0 <HAL_I2C_Master_Transmit+0x228>)
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 fbf1 	bl	8003694 <I2C_TransferConfig>
 8002eb2:	e066      	b.n	8002f82 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	8979      	ldrh	r1, [r7, #10]
 8002ebc:	4b48      	ldr	r3, [pc, #288]	@ (8002fe0 <HAL_I2C_Master_Transmit+0x228>)
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 fbe6 	bl	8003694 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002ec8:	e05b      	b.n	8002f82 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	6a39      	ldr	r1, [r7, #32]
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 fa75 	bl	80033be <I2C_WaitOnTXISFlagUntilTimeout>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e07b      	b.n	8002fd6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee2:	781a      	ldrb	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	3b01      	subs	r3, #1
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f06:	3b01      	subs	r3, #1
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d034      	beq.n	8002f82 <HAL_I2C_Master_Transmit+0x1ca>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d130      	bne.n	8002f82 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	2200      	movs	r2, #0
 8002f28:	2180      	movs	r1, #128	@ 0x80
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 f9ee 	bl	800330c <I2C_WaitOnFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e04d      	b.n	8002fd6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	2bff      	cmp	r3, #255	@ 0xff
 8002f42:	d90e      	bls.n	8002f62 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	22ff      	movs	r2, #255	@ 0xff
 8002f48:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	8979      	ldrh	r1, [r7, #10]
 8002f52:	2300      	movs	r3, #0
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 fb9a 	bl	8003694 <I2C_TransferConfig>
 8002f60:	e00f      	b.n	8002f82 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	8979      	ldrh	r1, [r7, #10]
 8002f74:	2300      	movs	r3, #0
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f000 fb89 	bl	8003694 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d19e      	bne.n	8002eca <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	6a39      	ldr	r1, [r7, #32]
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 fa5b 	bl	800344c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e01a      	b.n	8002fd6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6859      	ldr	r1, [r3, #4]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe4 <HAL_I2C_Master_Transmit+0x22c>)
 8002fb4:	400b      	ands	r3, r1
 8002fb6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	e000      	b.n	8002fd6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002fd4:	2302      	movs	r3, #2
  }
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	80002000 	.word	0x80002000
 8002fe4:	fe00e800 	.word	0xfe00e800

08002fe8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b088      	sub	sp, #32
 8002fec:	af02      	add	r7, sp, #8
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	4608      	mov	r0, r1
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	817b      	strh	r3, [r7, #10]
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	813b      	strh	r3, [r7, #8]
 8002ffe:	4613      	mov	r3, r2
 8003000:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b20      	cmp	r3, #32
 800300c:	f040 80fd 	bne.w	800320a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003010:	6a3b      	ldr	r3, [r7, #32]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d002      	beq.n	800301c <HAL_I2C_Mem_Read+0x34>
 8003016:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003018:	2b00      	cmp	r3, #0
 800301a:	d105      	bne.n	8003028 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003022:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e0f1      	b.n	800320c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800302e:	2b01      	cmp	r3, #1
 8003030:	d101      	bne.n	8003036 <HAL_I2C_Mem_Read+0x4e>
 8003032:	2302      	movs	r3, #2
 8003034:	e0ea      	b.n	800320c <HAL_I2C_Mem_Read+0x224>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800303e:	f7fe fcdf 	bl	8001a00 <HAL_GetTick>
 8003042:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	2319      	movs	r3, #25
 800304a:	2201      	movs	r2, #1
 800304c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 f95b 	bl	800330c <I2C_WaitOnFlagUntilTimeout>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e0d5      	b.n	800320c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2222      	movs	r2, #34	@ 0x22
 8003064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2240      	movs	r2, #64	@ 0x40
 800306c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6a3a      	ldr	r2, [r7, #32]
 800307a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003080:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003088:	88f8      	ldrh	r0, [r7, #6]
 800308a:	893a      	ldrh	r2, [r7, #8]
 800308c:	8979      	ldrh	r1, [r7, #10]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	9301      	str	r3, [sp, #4]
 8003092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	4603      	mov	r3, r0
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 f8bf 	bl	800321c <I2C_RequestMemoryRead>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d005      	beq.n	80030b0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e0ad      	b.n	800320c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2bff      	cmp	r3, #255	@ 0xff
 80030b8:	d90e      	bls.n	80030d8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2201      	movs	r2, #1
 80030be:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	8979      	ldrh	r1, [r7, #10]
 80030c8:	4b52      	ldr	r3, [pc, #328]	@ (8003214 <HAL_I2C_Mem_Read+0x22c>)
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f000 fadf 	bl	8003694 <I2C_TransferConfig>
 80030d6:	e00f      	b.n	80030f8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030dc:	b29a      	uxth	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	8979      	ldrh	r1, [r7, #10]
 80030ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003214 <HAL_I2C_Mem_Read+0x22c>)
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 face 	bl	8003694 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030fe:	2200      	movs	r2, #0
 8003100:	2104      	movs	r1, #4
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 f902 	bl	800330c <I2C_WaitOnFlagUntilTimeout>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e07c      	b.n	800320c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311c:	b2d2      	uxtb	r2, r2
 800311e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800312e:	3b01      	subs	r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800313a:	b29b      	uxth	r3, r3
 800313c:	3b01      	subs	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003148:	b29b      	uxth	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d034      	beq.n	80031b8 <HAL_I2C_Mem_Read+0x1d0>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003152:	2b00      	cmp	r3, #0
 8003154:	d130      	bne.n	80031b8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800315c:	2200      	movs	r2, #0
 800315e:	2180      	movs	r1, #128	@ 0x80
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 f8d3 	bl	800330c <I2C_WaitOnFlagUntilTimeout>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e04d      	b.n	800320c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003174:	b29b      	uxth	r3, r3
 8003176:	2bff      	cmp	r3, #255	@ 0xff
 8003178:	d90e      	bls.n	8003198 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2201      	movs	r2, #1
 800317e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003184:	b2da      	uxtb	r2, r3
 8003186:	8979      	ldrh	r1, [r7, #10]
 8003188:	2300      	movs	r3, #0
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 fa7f 	bl	8003694 <I2C_TransferConfig>
 8003196:	e00f      	b.n	80031b8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800319c:	b29a      	uxth	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	8979      	ldrh	r1, [r7, #10]
 80031aa:	2300      	movs	r3, #0
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 fa6e 	bl	8003694 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031bc:	b29b      	uxth	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d19a      	bne.n	80030f8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 f940 	bl	800344c <I2C_WaitOnSTOPFlagUntilTimeout>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e01a      	b.n	800320c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2220      	movs	r2, #32
 80031dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6859      	ldr	r1, [r3, #4]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003218 <HAL_I2C_Mem_Read+0x230>)
 80031ea:	400b      	ands	r3, r1
 80031ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003206:	2300      	movs	r3, #0
 8003208:	e000      	b.n	800320c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800320a:	2302      	movs	r3, #2
  }
}
 800320c:	4618      	mov	r0, r3
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	80002400 	.word	0x80002400
 8003218:	fe00e800 	.word	0xfe00e800

0800321c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af02      	add	r7, sp, #8
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	4608      	mov	r0, r1
 8003226:	4611      	mov	r1, r2
 8003228:	461a      	mov	r2, r3
 800322a:	4603      	mov	r3, r0
 800322c:	817b      	strh	r3, [r7, #10]
 800322e:	460b      	mov	r3, r1
 8003230:	813b      	strh	r3, [r7, #8]
 8003232:	4613      	mov	r3, r2
 8003234:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003236:	88fb      	ldrh	r3, [r7, #6]
 8003238:	b2da      	uxtb	r2, r3
 800323a:	8979      	ldrh	r1, [r7, #10]
 800323c:	4b20      	ldr	r3, [pc, #128]	@ (80032c0 <I2C_RequestMemoryRead+0xa4>)
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	2300      	movs	r3, #0
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 fa26 	bl	8003694 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003248:	69fa      	ldr	r2, [r7, #28]
 800324a:	69b9      	ldr	r1, [r7, #24]
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 f8b6 	bl	80033be <I2C_WaitOnTXISFlagUntilTimeout>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e02c      	b.n	80032b6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800325c:	88fb      	ldrh	r3, [r7, #6]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d105      	bne.n	800326e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003262:	893b      	ldrh	r3, [r7, #8]
 8003264:	b2da      	uxtb	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	629a      	str	r2, [r3, #40]	@ 0x28
 800326c:	e015      	b.n	800329a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800326e:	893b      	ldrh	r3, [r7, #8]
 8003270:	0a1b      	lsrs	r3, r3, #8
 8003272:	b29b      	uxth	r3, r3
 8003274:	b2da      	uxtb	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800327c:	69fa      	ldr	r2, [r7, #28]
 800327e:	69b9      	ldr	r1, [r7, #24]
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 f89c 	bl	80033be <I2C_WaitOnTXISFlagUntilTimeout>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e012      	b.n	80032b6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003290:	893b      	ldrh	r3, [r7, #8]
 8003292:	b2da      	uxtb	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	2200      	movs	r2, #0
 80032a2:	2140      	movs	r1, #64	@ 0x40
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 f831 	bl	800330c <I2C_WaitOnFlagUntilTimeout>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e000      	b.n	80032b6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	80002000 	.word	0x80002000

080032c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d103      	bne.n	80032e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2200      	movs	r2, #0
 80032e0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d007      	beq.n	8003300 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	699a      	ldr	r2, [r3, #24]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f042 0201 	orr.w	r2, r2, #1
 80032fe:	619a      	str	r2, [r3, #24]
  }
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	603b      	str	r3, [r7, #0]
 8003318:	4613      	mov	r3, r2
 800331a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800331c:	e03b      	b.n	8003396 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	6839      	ldr	r1, [r7, #0]
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 f8d6 	bl	80034d4 <I2C_IsErrorOccurred>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e041      	b.n	80033b6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003338:	d02d      	beq.n	8003396 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333a:	f7fe fb61 	bl	8001a00 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d302      	bcc.n	8003350 <I2C_WaitOnFlagUntilTimeout+0x44>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d122      	bne.n	8003396 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	699a      	ldr	r2, [r3, #24]
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	4013      	ands	r3, r2
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	429a      	cmp	r2, r3
 800335e:	bf0c      	ite	eq
 8003360:	2301      	moveq	r3, #1
 8003362:	2300      	movne	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	461a      	mov	r2, r3
 8003368:	79fb      	ldrb	r3, [r7, #7]
 800336a:	429a      	cmp	r2, r3
 800336c:	d113      	bne.n	8003396 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003372:	f043 0220 	orr.w	r2, r3, #32
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2220      	movs	r2, #32
 800337e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e00f      	b.n	80033b6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	699a      	ldr	r2, [r3, #24]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	4013      	ands	r3, r2
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	bf0c      	ite	eq
 80033a6:	2301      	moveq	r3, #1
 80033a8:	2300      	movne	r3, #0
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	461a      	mov	r2, r3
 80033ae:	79fb      	ldrb	r3, [r7, #7]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d0b4      	beq.n	800331e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b084      	sub	sp, #16
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	60f8      	str	r0, [r7, #12]
 80033c6:	60b9      	str	r1, [r7, #8]
 80033c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033ca:	e033      	b.n	8003434 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	68b9      	ldr	r1, [r7, #8]
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 f87f 	bl	80034d4 <I2C_IsErrorOccurred>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e031      	b.n	8003444 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e6:	d025      	beq.n	8003434 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e8:	f7fe fb0a 	bl	8001a00 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d302      	bcc.n	80033fe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d11a      	bne.n	8003434 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b02      	cmp	r3, #2
 800340a:	d013      	beq.n	8003434 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003410:	f043 0220 	orr.w	r2, r3, #32
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2220      	movs	r2, #32
 800341c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e007      	b.n	8003444 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b02      	cmp	r3, #2
 8003440:	d1c4      	bne.n	80033cc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003458:	e02f      	b.n	80034ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	68b9      	ldr	r1, [r7, #8]
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 f838 	bl	80034d4 <I2C_IsErrorOccurred>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e02d      	b.n	80034ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800346e:	f7fe fac7 	bl	8001a00 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	429a      	cmp	r2, r3
 800347c:	d302      	bcc.n	8003484 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d11a      	bne.n	80034ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	f003 0320 	and.w	r3, r3, #32
 800348e:	2b20      	cmp	r3, #32
 8003490:	d013      	beq.n	80034ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003496:	f043 0220 	orr.w	r2, r3, #32
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2220      	movs	r2, #32
 80034a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e007      	b.n	80034ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	f003 0320 	and.w	r3, r3, #32
 80034c4:	2b20      	cmp	r3, #32
 80034c6:	d1c8      	bne.n	800345a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
	...

080034d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08a      	sub	sp, #40	@ 0x28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80034ee:	2300      	movs	r3, #0
 80034f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	f003 0310 	and.w	r3, r3, #16
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d068      	beq.n	80035d2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2210      	movs	r2, #16
 8003506:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003508:	e049      	b.n	800359e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003510:	d045      	beq.n	800359e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003512:	f7fe fa75 	bl	8001a00 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	429a      	cmp	r2, r3
 8003520:	d302      	bcc.n	8003528 <I2C_IsErrorOccurred+0x54>
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d13a      	bne.n	800359e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003532:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800353a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003546:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800354a:	d121      	bne.n	8003590 <I2C_IsErrorOccurred+0xbc>
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003552:	d01d      	beq.n	8003590 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003554:	7cfb      	ldrb	r3, [r7, #19]
 8003556:	2b20      	cmp	r3, #32
 8003558:	d01a      	beq.n	8003590 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003568:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800356a:	f7fe fa49 	bl	8001a00 <HAL_GetTick>
 800356e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003570:	e00e      	b.n	8003590 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003572:	f7fe fa45 	bl	8001a00 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b19      	cmp	r3, #25
 800357e:	d907      	bls.n	8003590 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	f043 0320 	orr.w	r3, r3, #32
 8003586:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800358e:	e006      	b.n	800359e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	f003 0320 	and.w	r3, r3, #32
 800359a:	2b20      	cmp	r3, #32
 800359c:	d1e9      	bne.n	8003572 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	f003 0320 	and.w	r3, r3, #32
 80035a8:	2b20      	cmp	r3, #32
 80035aa:	d003      	beq.n	80035b4 <I2C_IsErrorOccurred+0xe0>
 80035ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0aa      	beq.n	800350a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80035b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d103      	bne.n	80035c4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2220      	movs	r2, #32
 80035c2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	f043 0304 	orr.w	r3, r3, #4
 80035ca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00b      	beq.n	80035fc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80035e4:	6a3b      	ldr	r3, [r7, #32]
 80035e6:	f043 0301 	orr.w	r3, r3, #1
 80035ea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00b      	beq.n	800361e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003606:	6a3b      	ldr	r3, [r7, #32]
 8003608:	f043 0308 	orr.w	r3, r3, #8
 800360c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003616:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00b      	beq.n	8003640 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003628:	6a3b      	ldr	r3, [r7, #32]
 800362a:	f043 0302 	orr.w	r3, r3, #2
 800362e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003638:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003640:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003644:	2b00      	cmp	r3, #0
 8003646:	d01c      	beq.n	8003682 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f7ff fe3b 	bl	80032c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6859      	ldr	r1, [r3, #4]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	4b0d      	ldr	r3, [pc, #52]	@ (8003690 <I2C_IsErrorOccurred+0x1bc>)
 800365a:	400b      	ands	r3, r1
 800365c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	431a      	orrs	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2220      	movs	r2, #32
 800366e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003682:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003686:	4618      	mov	r0, r3
 8003688:	3728      	adds	r7, #40	@ 0x28
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	fe00e800 	.word	0xfe00e800

08003694 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003694:	b480      	push	{r7}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	607b      	str	r3, [r7, #4]
 800369e:	460b      	mov	r3, r1
 80036a0:	817b      	strh	r3, [r7, #10]
 80036a2:	4613      	mov	r3, r2
 80036a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036a6:	897b      	ldrh	r3, [r7, #10]
 80036a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036ac:	7a7b      	ldrb	r3, [r7, #9]
 80036ae:	041b      	lsls	r3, r3, #16
 80036b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	4313      	orrs	r3, r2
 80036be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80036c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	0d5b      	lsrs	r3, r3, #21
 80036ce:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80036d2:	4b08      	ldr	r3, [pc, #32]	@ (80036f4 <I2C_TransferConfig+0x60>)
 80036d4:	430b      	orrs	r3, r1
 80036d6:	43db      	mvns	r3, r3
 80036d8:	ea02 0103 	and.w	r1, r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80036e6:	bf00      	nop
 80036e8:	371c      	adds	r7, #28
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	03ff63ff 	.word	0x03ff63ff

080036f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b20      	cmp	r3, #32
 800370c:	d138      	bne.n	8003780 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003714:	2b01      	cmp	r3, #1
 8003716:	d101      	bne.n	800371c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003718:	2302      	movs	r3, #2
 800371a:	e032      	b.n	8003782 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2224      	movs	r2, #36	@ 0x24
 8003728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0201 	bic.w	r2, r2, #1
 800373a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800374a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6819      	ldr	r1, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0201 	orr.w	r2, r2, #1
 800376a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800377c:	2300      	movs	r3, #0
 800377e:	e000      	b.n	8003782 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003780:	2302      	movs	r3, #2
  }
}
 8003782:	4618      	mov	r0, r3
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800378e:	b480      	push	{r7}
 8003790:	b085      	sub	sp, #20
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
 8003796:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b20      	cmp	r3, #32
 80037a2:	d139      	bne.n	8003818 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d101      	bne.n	80037b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037ae:	2302      	movs	r3, #2
 80037b0:	e033      	b.n	800381a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2224      	movs	r2, #36	@ 0x24
 80037be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0201 	bic.w	r2, r2, #1
 80037d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80037e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	021b      	lsls	r3, r3, #8
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 0201 	orr.w	r2, r2, #1
 8003802:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2220      	movs	r2, #32
 8003808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003814:	2300      	movs	r3, #0
 8003816:	e000      	b.n	800381a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003818:	2302      	movs	r3, #2
  }
}
 800381a:	4618      	mov	r0, r3
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b086      	sub	sp, #24
 800382a:	af02      	add	r7, sp, #8
 800382c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e108      	b.n	8003a4a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d106      	bne.n	8003858 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7fd ff8a 	bl	800176c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2203      	movs	r2, #3
 800385c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003866:	d102      	bne.n	800386e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f001 ff96 	bl	80057a4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6818      	ldr	r0, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	7c1a      	ldrb	r2, [r3, #16]
 8003880:	f88d 2000 	strb.w	r2, [sp]
 8003884:	3304      	adds	r3, #4
 8003886:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003888:	f001 ff32 	bl	80056f0 <USB_CoreInit>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d005      	beq.n	800389e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2202      	movs	r2, #2
 8003896:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e0d5      	b.n	8003a4a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2100      	movs	r1, #0
 80038a4:	4618      	mov	r0, r3
 80038a6:	f001 ff8e 	bl	80057c6 <USB_SetCurrentMode>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d005      	beq.n	80038bc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2202      	movs	r2, #2
 80038b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e0c6      	b.n	8003a4a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038bc:	2300      	movs	r3, #0
 80038be:	73fb      	strb	r3, [r7, #15]
 80038c0:	e04a      	b.n	8003958 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80038c2:	7bfa      	ldrb	r2, [r7, #15]
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	4613      	mov	r3, r2
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	4413      	add	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	440b      	add	r3, r1
 80038d0:	3315      	adds	r3, #21
 80038d2:	2201      	movs	r2, #1
 80038d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80038d6:	7bfa      	ldrb	r2, [r7, #15]
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	4413      	add	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	440b      	add	r3, r1
 80038e4:	3314      	adds	r3, #20
 80038e6:	7bfa      	ldrb	r2, [r7, #15]
 80038e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80038ea:	7bfa      	ldrb	r2, [r7, #15]
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
 80038ee:	b298      	uxth	r0, r3
 80038f0:	6879      	ldr	r1, [r7, #4]
 80038f2:	4613      	mov	r3, r2
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	4413      	add	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	440b      	add	r3, r1
 80038fc:	332e      	adds	r3, #46	@ 0x2e
 80038fe:	4602      	mov	r2, r0
 8003900:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003902:	7bfa      	ldrb	r2, [r7, #15]
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	4613      	mov	r3, r2
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	4413      	add	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	3318      	adds	r3, #24
 8003912:	2200      	movs	r2, #0
 8003914:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003916:	7bfa      	ldrb	r2, [r7, #15]
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	4613      	mov	r3, r2
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	4413      	add	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	440b      	add	r3, r1
 8003924:	331c      	adds	r3, #28
 8003926:	2200      	movs	r2, #0
 8003928:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800392a:	7bfa      	ldrb	r2, [r7, #15]
 800392c:	6879      	ldr	r1, [r7, #4]
 800392e:	4613      	mov	r3, r2
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	4413      	add	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	440b      	add	r3, r1
 8003938:	3320      	adds	r3, #32
 800393a:	2200      	movs	r2, #0
 800393c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800393e:	7bfa      	ldrb	r2, [r7, #15]
 8003940:	6879      	ldr	r1, [r7, #4]
 8003942:	4613      	mov	r3, r2
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	4413      	add	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	440b      	add	r3, r1
 800394c:	3324      	adds	r3, #36	@ 0x24
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003952:	7bfb      	ldrb	r3, [r7, #15]
 8003954:	3301      	adds	r3, #1
 8003956:	73fb      	strb	r3, [r7, #15]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	791b      	ldrb	r3, [r3, #4]
 800395c:	7bfa      	ldrb	r2, [r7, #15]
 800395e:	429a      	cmp	r2, r3
 8003960:	d3af      	bcc.n	80038c2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003962:	2300      	movs	r3, #0
 8003964:	73fb      	strb	r3, [r7, #15]
 8003966:	e044      	b.n	80039f2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003968:	7bfa      	ldrb	r2, [r7, #15]
 800396a:	6879      	ldr	r1, [r7, #4]
 800396c:	4613      	mov	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	4413      	add	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800397a:	2200      	movs	r2, #0
 800397c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800397e:	7bfa      	ldrb	r2, [r7, #15]
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	4613      	mov	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	4413      	add	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	440b      	add	r3, r1
 800398c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003990:	7bfa      	ldrb	r2, [r7, #15]
 8003992:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003994:	7bfa      	ldrb	r2, [r7, #15]
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	4613      	mov	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	4413      	add	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80039a6:	2200      	movs	r2, #0
 80039a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80039aa:	7bfa      	ldrb	r2, [r7, #15]
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	4613      	mov	r3, r2
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	4413      	add	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	440b      	add	r3, r1
 80039b8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80039c0:	7bfa      	ldrb	r2, [r7, #15]
 80039c2:	6879      	ldr	r1, [r7, #4]
 80039c4:	4613      	mov	r3, r2
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	4413      	add	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	440b      	add	r3, r1
 80039ce:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80039d6:	7bfa      	ldrb	r2, [r7, #15]
 80039d8:	6879      	ldr	r1, [r7, #4]
 80039da:	4613      	mov	r3, r2
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	4413      	add	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	440b      	add	r3, r1
 80039e4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
 80039ee:	3301      	adds	r3, #1
 80039f0:	73fb      	strb	r3, [r7, #15]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	791b      	ldrb	r3, [r3, #4]
 80039f6:	7bfa      	ldrb	r2, [r7, #15]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d3b5      	bcc.n	8003968 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6818      	ldr	r0, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	7c1a      	ldrb	r2, [r3, #16]
 8003a04:	f88d 2000 	strb.w	r2, [sp]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a0c:	f001 ff28 	bl	8005860 <USB_DevInit>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d005      	beq.n	8003a22 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2202      	movs	r2, #2
 8003a1a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e013      	b.n	8003a4a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	7b1b      	ldrb	r3, [r3, #12]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d102      	bne.n	8003a3e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 f80b 	bl	8003a54 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f002 f8e3 	bl	8005c0e <USB_DevDisconnect>

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
	...

08003a54 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a82:	4b05      	ldr	r3, [pc, #20]	@ (8003a98 <HAL_PCDEx_ActivateLPM+0x44>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	10000003 	.word	0x10000003

08003a9c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aa0:	4b05      	ldr	r3, [pc, #20]	@ (8003ab8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a04      	ldr	r2, [pc, #16]	@ (8003ab8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003aa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aaa:	6013      	str	r3, [r2, #0]
}
 8003aac:	bf00      	nop
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	40007000 	.word	0x40007000

08003abc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ac6:	4b23      	ldr	r3, [pc, #140]	@ (8003b54 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aca:	4a22      	ldr	r2, [pc, #136]	@ (8003b54 <HAL_PWREx_EnableOverDrive+0x98>)
 8003acc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ad2:	4b20      	ldr	r3, [pc, #128]	@ (8003b54 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003ade:	4b1e      	ldr	r3, [pc, #120]	@ (8003b58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a1d      	ldr	r2, [pc, #116]	@ (8003b58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ae4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ae8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003aea:	f7fd ff89 	bl	8001a00 <HAL_GetTick>
 8003aee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003af0:	e009      	b.n	8003b06 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003af2:	f7fd ff85 	bl	8001a00 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b00:	d901      	bls.n	8003b06 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e022      	b.n	8003b4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b06:	4b14      	ldr	r3, [pc, #80]	@ (8003b58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b12:	d1ee      	bne.n	8003af2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b14:	4b10      	ldr	r3, [pc, #64]	@ (8003b58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a0f      	ldr	r2, [pc, #60]	@ (8003b58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b1e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b20:	f7fd ff6e 	bl	8001a00 <HAL_GetTick>
 8003b24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b26:	e009      	b.n	8003b3c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b28:	f7fd ff6a 	bl	8001a00 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b36:	d901      	bls.n	8003b3c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e007      	b.n	8003b4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b3c:	4b06      	ldr	r3, [pc, #24]	@ (8003b58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b48:	d1ee      	bne.n	8003b28 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	40023800 	.word	0x40023800
 8003b58:	40007000 	.word	0x40007000

08003b5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003b64:	2300      	movs	r3, #0
 8003b66:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e29b      	b.n	80040aa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 8087 	beq.w	8003c8e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b80:	4b96      	ldr	r3, [pc, #600]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 030c 	and.w	r3, r3, #12
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d00c      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b8c:	4b93      	ldr	r3, [pc, #588]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f003 030c 	and.w	r3, r3, #12
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d112      	bne.n	8003bbe <HAL_RCC_OscConfig+0x62>
 8003b98:	4b90      	ldr	r3, [pc, #576]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ba0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ba4:	d10b      	bne.n	8003bbe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba6:	4b8d      	ldr	r3, [pc, #564]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d06c      	beq.n	8003c8c <HAL_RCC_OscConfig+0x130>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d168      	bne.n	8003c8c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e275      	b.n	80040aa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bc6:	d106      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x7a>
 8003bc8:	4b84      	ldr	r3, [pc, #528]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a83      	ldr	r2, [pc, #524]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003bce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	e02e      	b.n	8003c34 <HAL_RCC_OscConfig+0xd8>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x9c>
 8003bde:	4b7f      	ldr	r3, [pc, #508]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a7e      	ldr	r2, [pc, #504]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003be4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	4b7c      	ldr	r3, [pc, #496]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a7b      	ldr	r2, [pc, #492]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003bf0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	e01d      	b.n	8003c34 <HAL_RCC_OscConfig+0xd8>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c00:	d10c      	bne.n	8003c1c <HAL_RCC_OscConfig+0xc0>
 8003c02:	4b76      	ldr	r3, [pc, #472]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a75      	ldr	r2, [pc, #468]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003c08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	4b73      	ldr	r3, [pc, #460]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a72      	ldr	r2, [pc, #456]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003c14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	e00b      	b.n	8003c34 <HAL_RCC_OscConfig+0xd8>
 8003c1c:	4b6f      	ldr	r3, [pc, #444]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a6e      	ldr	r2, [pc, #440]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003c22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c26:	6013      	str	r3, [r2, #0]
 8003c28:	4b6c      	ldr	r3, [pc, #432]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a6b      	ldr	r2, [pc, #428]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003c2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d013      	beq.n	8003c64 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3c:	f7fd fee0 	bl	8001a00 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c44:	f7fd fedc 	bl	8001a00 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b64      	cmp	r3, #100	@ 0x64
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e229      	b.n	80040aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c56:	4b61      	ldr	r3, [pc, #388]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0f0      	beq.n	8003c44 <HAL_RCC_OscConfig+0xe8>
 8003c62:	e014      	b.n	8003c8e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c64:	f7fd fecc 	bl	8001a00 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c6c:	f7fd fec8 	bl	8001a00 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b64      	cmp	r3, #100	@ 0x64
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e215      	b.n	80040aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c7e:	4b57      	ldr	r3, [pc, #348]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1f0      	bne.n	8003c6c <HAL_RCC_OscConfig+0x110>
 8003c8a:	e000      	b.n	8003c8e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d069      	beq.n	8003d6e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c9a:	4b50      	ldr	r3, [pc, #320]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 030c 	and.w	r3, r3, #12
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00b      	beq.n	8003cbe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ca6:	4b4d      	ldr	r3, [pc, #308]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 030c 	and.w	r3, r3, #12
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d11c      	bne.n	8003cec <HAL_RCC_OscConfig+0x190>
 8003cb2:	4b4a      	ldr	r3, [pc, #296]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d116      	bne.n	8003cec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cbe:	4b47      	ldr	r3, [pc, #284]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d005      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x17a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d001      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e1e9      	b.n	80040aa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd6:	4b41      	ldr	r3, [pc, #260]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	493d      	ldr	r1, [pc, #244]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cea:	e040      	b.n	8003d6e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d023      	beq.n	8003d3c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cf4:	4b39      	ldr	r3, [pc, #228]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a38      	ldr	r2, [pc, #224]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003cfa:	f043 0301 	orr.w	r3, r3, #1
 8003cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d00:	f7fd fe7e 	bl	8001a00 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d08:	f7fd fe7a 	bl	8001a00 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e1c7      	b.n	80040aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d1a:	4b30      	ldr	r3, [pc, #192]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0f0      	beq.n	8003d08 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d26:	4b2d      	ldr	r3, [pc, #180]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	4929      	ldr	r1, [pc, #164]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	600b      	str	r3, [r1, #0]
 8003d3a:	e018      	b.n	8003d6e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d3c:	4b27      	ldr	r3, [pc, #156]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a26      	ldr	r2, [pc, #152]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003d42:	f023 0301 	bic.w	r3, r3, #1
 8003d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d48:	f7fd fe5a 	bl	8001a00 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d50:	f7fd fe56 	bl	8001a00 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e1a3      	b.n	80040aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d62:	4b1e      	ldr	r3, [pc, #120]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1f0      	bne.n	8003d50 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d038      	beq.n	8003dec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d019      	beq.n	8003db6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d82:	4b16      	ldr	r3, [pc, #88]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003d84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d86:	4a15      	ldr	r2, [pc, #84]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003d88:	f043 0301 	orr.w	r3, r3, #1
 8003d8c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8e:	f7fd fe37 	bl	8001a00 <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d96:	f7fd fe33 	bl	8001a00 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e180      	b.n	80040aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003da8:	4b0c      	ldr	r3, [pc, #48]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003daa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0f0      	beq.n	8003d96 <HAL_RCC_OscConfig+0x23a>
 8003db4:	e01a      	b.n	8003dec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003db6:	4b09      	ldr	r3, [pc, #36]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003db8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dba:	4a08      	ldr	r2, [pc, #32]	@ (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003dbc:	f023 0301 	bic.w	r3, r3, #1
 8003dc0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc2:	f7fd fe1d 	bl	8001a00 <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc8:	e00a      	b.n	8003de0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dca:	f7fd fe19 	bl	8001a00 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d903      	bls.n	8003de0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e166      	b.n	80040aa <HAL_RCC_OscConfig+0x54e>
 8003ddc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de0:	4b92      	ldr	r3, [pc, #584]	@ (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003de2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1ee      	bne.n	8003dca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 80a4 	beq.w	8003f42 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dfa:	4b8c      	ldr	r3, [pc, #560]	@ (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10d      	bne.n	8003e22 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e06:	4b89      	ldr	r3, [pc, #548]	@ (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0a:	4a88      	ldr	r2, [pc, #544]	@ (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003e0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e10:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e12:	4b86      	ldr	r3, [pc, #536]	@ (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e1a:	60bb      	str	r3, [r7, #8]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e22:	4b83      	ldr	r3, [pc, #524]	@ (8004030 <HAL_RCC_OscConfig+0x4d4>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d118      	bne.n	8003e60 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e2e:	4b80      	ldr	r3, [pc, #512]	@ (8004030 <HAL_RCC_OscConfig+0x4d4>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a7f      	ldr	r2, [pc, #508]	@ (8004030 <HAL_RCC_OscConfig+0x4d4>)
 8003e34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e3a:	f7fd fde1 	bl	8001a00 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e42:	f7fd fddd 	bl	8001a00 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b64      	cmp	r3, #100	@ 0x64
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e12a      	b.n	80040aa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e54:	4b76      	ldr	r3, [pc, #472]	@ (8004030 <HAL_RCC_OscConfig+0x4d4>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0f0      	beq.n	8003e42 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d106      	bne.n	8003e76 <HAL_RCC_OscConfig+0x31a>
 8003e68:	4b70      	ldr	r3, [pc, #448]	@ (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e6c:	4a6f      	ldr	r2, [pc, #444]	@ (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003e6e:	f043 0301 	orr.w	r3, r3, #1
 8003e72:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e74:	e02d      	b.n	8003ed2 <HAL_RCC_OscConfig+0x376>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10c      	bne.n	8003e98 <HAL_RCC_OscConfig+0x33c>
 8003e7e:	4b6b      	ldr	r3, [pc, #428]	@ (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e82:	4a6a      	ldr	r2, [pc, #424]	@ (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003e84:	f023 0301 	bic.w	r3, r3, #1
 8003e88:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e8a:	4b68      	ldr	r3, [pc, #416]	@ (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e8e:	4a67      	ldr	r2, [pc, #412]	@ (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003e90:	f023 0304 	bic.w	r3, r3, #4
 8003e94:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e96:	e01c      	b.n	8003ed2 <HAL_RCC_OscConfig+0x376>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	2b05      	cmp	r3, #5
 8003e9e:	d10c      	bne.n	8003eba <HAL_RCC_OscConfig+0x35e>
 8003ea0:	4b62      	ldr	r3, [pc, #392]	@ (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea4:	4a61      	ldr	r2, [pc, #388]	@ (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003ea6:	f043 0304 	orr.w	r3, r3, #4
 8003eaa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eac:	4b5f      	ldr	r3, [pc, #380]	@ (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb0:	4a5e      	ldr	r2, [pc, #376]	@ (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003eb2:	f043 0301 	orr.w	r3, r3, #1
 8003eb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eb8:	e00b      	b.n	8003ed2 <HAL_RCC_OscConfig+0x376>
 8003eba:	4b5c      	ldr	r3, [pc, #368]	@ (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ebe:	4a5b      	ldr	r2, [pc, #364]	@ (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003ec0:	f023 0301 	bic.w	r3, r3, #1
 8003ec4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ec6:	4b59      	ldr	r3, [pc, #356]	@ (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eca:	4a58      	ldr	r2, [pc, #352]	@ (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003ecc:	f023 0304 	bic.w	r3, r3, #4
 8003ed0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d015      	beq.n	8003f06 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eda:	f7fd fd91 	bl	8001a00 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee0:	e00a      	b.n	8003ef8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee2:	f7fd fd8d 	bl	8001a00 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e0d8      	b.n	80040aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef8:	4b4c      	ldr	r3, [pc, #304]	@ (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0ee      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x386>
 8003f04:	e014      	b.n	8003f30 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f06:	f7fd fd7b 	bl	8001a00 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f0c:	e00a      	b.n	8003f24 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f0e:	f7fd fd77 	bl	8001a00 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e0c2      	b.n	80040aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f24:	4b41      	ldr	r3, [pc, #260]	@ (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1ee      	bne.n	8003f0e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f30:	7dfb      	ldrb	r3, [r7, #23]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d105      	bne.n	8003f42 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f36:	4b3d      	ldr	r3, [pc, #244]	@ (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3a:	4a3c      	ldr	r2, [pc, #240]	@ (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003f3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f40:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 80ae 	beq.w	80040a8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f4c:	4b37      	ldr	r3, [pc, #220]	@ (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 030c 	and.w	r3, r3, #12
 8003f54:	2b08      	cmp	r3, #8
 8003f56:	d06d      	beq.n	8004034 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d14b      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f60:	4b32      	ldr	r3, [pc, #200]	@ (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a31      	ldr	r2, [pc, #196]	@ (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003f66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6c:	f7fd fd48 	bl	8001a00 <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f74:	f7fd fd44 	bl	8001a00 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e091      	b.n	80040aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f86:	4b29      	ldr	r3, [pc, #164]	@ (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1f0      	bne.n	8003f74 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	69da      	ldr	r2, [r3, #28]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa0:	019b      	lsls	r3, r3, #6
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa8:	085b      	lsrs	r3, r3, #1
 8003faa:	3b01      	subs	r3, #1
 8003fac:	041b      	lsls	r3, r3, #16
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb4:	061b      	lsls	r3, r3, #24
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fbc:	071b      	lsls	r3, r3, #28
 8003fbe:	491b      	ldr	r1, [pc, #108]	@ (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fc4:	4b19      	ldr	r3, [pc, #100]	@ (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a18      	ldr	r2, [pc, #96]	@ (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003fca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd0:	f7fd fd16 	bl	8001a00 <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd8:	f7fd fd12 	bl	8001a00 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e05f      	b.n	80040aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fea:	4b10      	ldr	r3, [pc, #64]	@ (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d0f0      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x47c>
 8003ff6:	e057      	b.n	80040a8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a0b      	ldr	r2, [pc, #44]	@ (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003ffe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004004:	f7fd fcfc 	bl	8001a00 <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800400c:	f7fd fcf8 	bl	8001a00 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e045      	b.n	80040aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800401e:	4b03      	ldr	r3, [pc, #12]	@ (800402c <HAL_RCC_OscConfig+0x4d0>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f0      	bne.n	800400c <HAL_RCC_OscConfig+0x4b0>
 800402a:	e03d      	b.n	80040a8 <HAL_RCC_OscConfig+0x54c>
 800402c:	40023800 	.word	0x40023800
 8004030:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004034:	4b1f      	ldr	r3, [pc, #124]	@ (80040b4 <HAL_RCC_OscConfig+0x558>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d030      	beq.n	80040a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800404c:	429a      	cmp	r2, r3
 800404e:	d129      	bne.n	80040a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800405a:	429a      	cmp	r2, r3
 800405c:	d122      	bne.n	80040a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004064:	4013      	ands	r3, r2
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800406a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800406c:	4293      	cmp	r3, r2
 800406e:	d119      	bne.n	80040a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800407a:	085b      	lsrs	r3, r3, #1
 800407c:	3b01      	subs	r3, #1
 800407e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004080:	429a      	cmp	r2, r3
 8004082:	d10f      	bne.n	80040a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800408e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004090:	429a      	cmp	r2, r3
 8004092:	d107      	bne.n	80040a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800409e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d001      	beq.n	80040a8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e000      	b.n	80040aa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3718      	adds	r7, #24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40023800 	.word	0x40023800

080040b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80040c2:	2300      	movs	r3, #0
 80040c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e0d0      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040d0:	4b6a      	ldr	r3, [pc, #424]	@ (800427c <HAL_RCC_ClockConfig+0x1c4>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 030f 	and.w	r3, r3, #15
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d910      	bls.n	8004100 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040de:	4b67      	ldr	r3, [pc, #412]	@ (800427c <HAL_RCC_ClockConfig+0x1c4>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f023 020f 	bic.w	r2, r3, #15
 80040e6:	4965      	ldr	r1, [pc, #404]	@ (800427c <HAL_RCC_ClockConfig+0x1c4>)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ee:	4b63      	ldr	r3, [pc, #396]	@ (800427c <HAL_RCC_ClockConfig+0x1c4>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 030f 	and.w	r3, r3, #15
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d001      	beq.n	8004100 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e0b8      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d020      	beq.n	800414e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004118:	4b59      	ldr	r3, [pc, #356]	@ (8004280 <HAL_RCC_ClockConfig+0x1c8>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	4a58      	ldr	r2, [pc, #352]	@ (8004280 <HAL_RCC_ClockConfig+0x1c8>)
 800411e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004122:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	2b00      	cmp	r3, #0
 800412e:	d005      	beq.n	800413c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004130:	4b53      	ldr	r3, [pc, #332]	@ (8004280 <HAL_RCC_ClockConfig+0x1c8>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	4a52      	ldr	r2, [pc, #328]	@ (8004280 <HAL_RCC_ClockConfig+0x1c8>)
 8004136:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800413a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800413c:	4b50      	ldr	r3, [pc, #320]	@ (8004280 <HAL_RCC_ClockConfig+0x1c8>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	494d      	ldr	r1, [pc, #308]	@ (8004280 <HAL_RCC_ClockConfig+0x1c8>)
 800414a:	4313      	orrs	r3, r2
 800414c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d040      	beq.n	80041dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d107      	bne.n	8004172 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004162:	4b47      	ldr	r3, [pc, #284]	@ (8004280 <HAL_RCC_ClockConfig+0x1c8>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d115      	bne.n	800419a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e07f      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2b02      	cmp	r3, #2
 8004178:	d107      	bne.n	800418a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800417a:	4b41      	ldr	r3, [pc, #260]	@ (8004280 <HAL_RCC_ClockConfig+0x1c8>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d109      	bne.n	800419a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e073      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800418a:	4b3d      	ldr	r3, [pc, #244]	@ (8004280 <HAL_RCC_ClockConfig+0x1c8>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e06b      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800419a:	4b39      	ldr	r3, [pc, #228]	@ (8004280 <HAL_RCC_ClockConfig+0x1c8>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f023 0203 	bic.w	r2, r3, #3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	4936      	ldr	r1, [pc, #216]	@ (8004280 <HAL_RCC_ClockConfig+0x1c8>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041ac:	f7fd fc28 	bl	8001a00 <HAL_GetTick>
 80041b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b2:	e00a      	b.n	80041ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041b4:	f7fd fc24 	bl	8001a00 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e053      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ca:	4b2d      	ldr	r3, [pc, #180]	@ (8004280 <HAL_RCC_ClockConfig+0x1c8>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 020c 	and.w	r2, r3, #12
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	429a      	cmp	r2, r3
 80041da:	d1eb      	bne.n	80041b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041dc:	4b27      	ldr	r3, [pc, #156]	@ (800427c <HAL_RCC_ClockConfig+0x1c4>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 030f 	and.w	r3, r3, #15
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d210      	bcs.n	800420c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ea:	4b24      	ldr	r3, [pc, #144]	@ (800427c <HAL_RCC_ClockConfig+0x1c4>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f023 020f 	bic.w	r2, r3, #15
 80041f2:	4922      	ldr	r1, [pc, #136]	@ (800427c <HAL_RCC_ClockConfig+0x1c4>)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041fa:	4b20      	ldr	r3, [pc, #128]	@ (800427c <HAL_RCC_ClockConfig+0x1c4>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 030f 	and.w	r3, r3, #15
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	429a      	cmp	r2, r3
 8004206:	d001      	beq.n	800420c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e032      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b00      	cmp	r3, #0
 8004216:	d008      	beq.n	800422a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004218:	4b19      	ldr	r3, [pc, #100]	@ (8004280 <HAL_RCC_ClockConfig+0x1c8>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	4916      	ldr	r1, [pc, #88]	@ (8004280 <HAL_RCC_ClockConfig+0x1c8>)
 8004226:	4313      	orrs	r3, r2
 8004228:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0308 	and.w	r3, r3, #8
 8004232:	2b00      	cmp	r3, #0
 8004234:	d009      	beq.n	800424a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004236:	4b12      	ldr	r3, [pc, #72]	@ (8004280 <HAL_RCC_ClockConfig+0x1c8>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	490e      	ldr	r1, [pc, #56]	@ (8004280 <HAL_RCC_ClockConfig+0x1c8>)
 8004246:	4313      	orrs	r3, r2
 8004248:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800424a:	f000 f821 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 800424e:	4602      	mov	r2, r0
 8004250:	4b0b      	ldr	r3, [pc, #44]	@ (8004280 <HAL_RCC_ClockConfig+0x1c8>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	091b      	lsrs	r3, r3, #4
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	490a      	ldr	r1, [pc, #40]	@ (8004284 <HAL_RCC_ClockConfig+0x1cc>)
 800425c:	5ccb      	ldrb	r3, [r1, r3]
 800425e:	fa22 f303 	lsr.w	r3, r2, r3
 8004262:	4a09      	ldr	r2, [pc, #36]	@ (8004288 <HAL_RCC_ClockConfig+0x1d0>)
 8004264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004266:	4b09      	ldr	r3, [pc, #36]	@ (800428c <HAL_RCC_ClockConfig+0x1d4>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f7fd fb84 	bl	8001978 <HAL_InitTick>

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	40023c00 	.word	0x40023c00
 8004280:	40023800 	.word	0x40023800
 8004284:	08005d5c 	.word	0x08005d5c
 8004288:	20000008 	.word	0x20000008
 800428c:	2000000c 	.word	0x2000000c

08004290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004290:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004294:	b094      	sub	sp, #80	@ 0x50
 8004296:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004298:	2300      	movs	r3, #0
 800429a:	647b      	str	r3, [r7, #68]	@ 0x44
 800429c:	2300      	movs	r3, #0
 800429e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042a0:	2300      	movs	r3, #0
 80042a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80042a4:	2300      	movs	r3, #0
 80042a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042a8:	4b79      	ldr	r3, [pc, #484]	@ (8004490 <HAL_RCC_GetSysClockFreq+0x200>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f003 030c 	and.w	r3, r3, #12
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d00d      	beq.n	80042d0 <HAL_RCC_GetSysClockFreq+0x40>
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	f200 80e1 	bhi.w	800447c <HAL_RCC_GetSysClockFreq+0x1ec>
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <HAL_RCC_GetSysClockFreq+0x34>
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d003      	beq.n	80042ca <HAL_RCC_GetSysClockFreq+0x3a>
 80042c2:	e0db      	b.n	800447c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042c4:	4b73      	ldr	r3, [pc, #460]	@ (8004494 <HAL_RCC_GetSysClockFreq+0x204>)
 80042c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042c8:	e0db      	b.n	8004482 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042ca:	4b73      	ldr	r3, [pc, #460]	@ (8004498 <HAL_RCC_GetSysClockFreq+0x208>)
 80042cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042ce:	e0d8      	b.n	8004482 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042d0:	4b6f      	ldr	r3, [pc, #444]	@ (8004490 <HAL_RCC_GetSysClockFreq+0x200>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042d8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80042da:	4b6d      	ldr	r3, [pc, #436]	@ (8004490 <HAL_RCC_GetSysClockFreq+0x200>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d063      	beq.n	80043ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042e6:	4b6a      	ldr	r3, [pc, #424]	@ (8004490 <HAL_RCC_GetSysClockFreq+0x200>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	099b      	lsrs	r3, r3, #6
 80042ec:	2200      	movs	r2, #0
 80042ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80042f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80042f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80042fa:	2300      	movs	r3, #0
 80042fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80042fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004302:	4622      	mov	r2, r4
 8004304:	462b      	mov	r3, r5
 8004306:	f04f 0000 	mov.w	r0, #0
 800430a:	f04f 0100 	mov.w	r1, #0
 800430e:	0159      	lsls	r1, r3, #5
 8004310:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004314:	0150      	lsls	r0, r2, #5
 8004316:	4602      	mov	r2, r0
 8004318:	460b      	mov	r3, r1
 800431a:	4621      	mov	r1, r4
 800431c:	1a51      	subs	r1, r2, r1
 800431e:	6139      	str	r1, [r7, #16]
 8004320:	4629      	mov	r1, r5
 8004322:	eb63 0301 	sbc.w	r3, r3, r1
 8004326:	617b      	str	r3, [r7, #20]
 8004328:	f04f 0200 	mov.w	r2, #0
 800432c:	f04f 0300 	mov.w	r3, #0
 8004330:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004334:	4659      	mov	r1, fp
 8004336:	018b      	lsls	r3, r1, #6
 8004338:	4651      	mov	r1, sl
 800433a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800433e:	4651      	mov	r1, sl
 8004340:	018a      	lsls	r2, r1, #6
 8004342:	4651      	mov	r1, sl
 8004344:	ebb2 0801 	subs.w	r8, r2, r1
 8004348:	4659      	mov	r1, fp
 800434a:	eb63 0901 	sbc.w	r9, r3, r1
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800435a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800435e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004362:	4690      	mov	r8, r2
 8004364:	4699      	mov	r9, r3
 8004366:	4623      	mov	r3, r4
 8004368:	eb18 0303 	adds.w	r3, r8, r3
 800436c:	60bb      	str	r3, [r7, #8]
 800436e:	462b      	mov	r3, r5
 8004370:	eb49 0303 	adc.w	r3, r9, r3
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	f04f 0300 	mov.w	r3, #0
 800437e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004382:	4629      	mov	r1, r5
 8004384:	024b      	lsls	r3, r1, #9
 8004386:	4621      	mov	r1, r4
 8004388:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800438c:	4621      	mov	r1, r4
 800438e:	024a      	lsls	r2, r1, #9
 8004390:	4610      	mov	r0, r2
 8004392:	4619      	mov	r1, r3
 8004394:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004396:	2200      	movs	r2, #0
 8004398:	62bb      	str	r3, [r7, #40]	@ 0x28
 800439a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800439c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80043a0:	f7fb ff4a 	bl	8000238 <__aeabi_uldivmod>
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	4613      	mov	r3, r2
 80043aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043ac:	e058      	b.n	8004460 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ae:	4b38      	ldr	r3, [pc, #224]	@ (8004490 <HAL_RCC_GetSysClockFreq+0x200>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	099b      	lsrs	r3, r3, #6
 80043b4:	2200      	movs	r2, #0
 80043b6:	4618      	mov	r0, r3
 80043b8:	4611      	mov	r1, r2
 80043ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043be:	623b      	str	r3, [r7, #32]
 80043c0:	2300      	movs	r3, #0
 80043c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80043c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043c8:	4642      	mov	r2, r8
 80043ca:	464b      	mov	r3, r9
 80043cc:	f04f 0000 	mov.w	r0, #0
 80043d0:	f04f 0100 	mov.w	r1, #0
 80043d4:	0159      	lsls	r1, r3, #5
 80043d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043da:	0150      	lsls	r0, r2, #5
 80043dc:	4602      	mov	r2, r0
 80043de:	460b      	mov	r3, r1
 80043e0:	4641      	mov	r1, r8
 80043e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80043e6:	4649      	mov	r1, r9
 80043e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80043ec:	f04f 0200 	mov.w	r2, #0
 80043f0:	f04f 0300 	mov.w	r3, #0
 80043f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004400:	ebb2 040a 	subs.w	r4, r2, sl
 8004404:	eb63 050b 	sbc.w	r5, r3, fp
 8004408:	f04f 0200 	mov.w	r2, #0
 800440c:	f04f 0300 	mov.w	r3, #0
 8004410:	00eb      	lsls	r3, r5, #3
 8004412:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004416:	00e2      	lsls	r2, r4, #3
 8004418:	4614      	mov	r4, r2
 800441a:	461d      	mov	r5, r3
 800441c:	4643      	mov	r3, r8
 800441e:	18e3      	adds	r3, r4, r3
 8004420:	603b      	str	r3, [r7, #0]
 8004422:	464b      	mov	r3, r9
 8004424:	eb45 0303 	adc.w	r3, r5, r3
 8004428:	607b      	str	r3, [r7, #4]
 800442a:	f04f 0200 	mov.w	r2, #0
 800442e:	f04f 0300 	mov.w	r3, #0
 8004432:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004436:	4629      	mov	r1, r5
 8004438:	028b      	lsls	r3, r1, #10
 800443a:	4621      	mov	r1, r4
 800443c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004440:	4621      	mov	r1, r4
 8004442:	028a      	lsls	r2, r1, #10
 8004444:	4610      	mov	r0, r2
 8004446:	4619      	mov	r1, r3
 8004448:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800444a:	2200      	movs	r2, #0
 800444c:	61bb      	str	r3, [r7, #24]
 800444e:	61fa      	str	r2, [r7, #28]
 8004450:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004454:	f7fb fef0 	bl	8000238 <__aeabi_uldivmod>
 8004458:	4602      	mov	r2, r0
 800445a:	460b      	mov	r3, r1
 800445c:	4613      	mov	r3, r2
 800445e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004460:	4b0b      	ldr	r3, [pc, #44]	@ (8004490 <HAL_RCC_GetSysClockFreq+0x200>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	0c1b      	lsrs	r3, r3, #16
 8004466:	f003 0303 	and.w	r3, r3, #3
 800446a:	3301      	adds	r3, #1
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004470:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004472:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004474:	fbb2 f3f3 	udiv	r3, r2, r3
 8004478:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800447a:	e002      	b.n	8004482 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800447c:	4b05      	ldr	r3, [pc, #20]	@ (8004494 <HAL_RCC_GetSysClockFreq+0x204>)
 800447e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004480:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004482:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004484:	4618      	mov	r0, r3
 8004486:	3750      	adds	r7, #80	@ 0x50
 8004488:	46bd      	mov	sp, r7
 800448a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800448e:	bf00      	nop
 8004490:	40023800 	.word	0x40023800
 8004494:	00f42400 	.word	0x00f42400
 8004498:	007a1200 	.word	0x007a1200

0800449c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800449c:	b480      	push	{r7}
 800449e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044a0:	4b03      	ldr	r3, [pc, #12]	@ (80044b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80044a2:	681b      	ldr	r3, [r3, #0]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	20000008 	.word	0x20000008

080044b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044b8:	f7ff fff0 	bl	800449c <HAL_RCC_GetHCLKFreq>
 80044bc:	4602      	mov	r2, r0
 80044be:	4b05      	ldr	r3, [pc, #20]	@ (80044d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	0a9b      	lsrs	r3, r3, #10
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	4903      	ldr	r1, [pc, #12]	@ (80044d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044ca:	5ccb      	ldrb	r3, [r1, r3]
 80044cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	40023800 	.word	0x40023800
 80044d8:	08005d6c 	.word	0x08005d6c

080044dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044e0:	f7ff ffdc 	bl	800449c <HAL_RCC_GetHCLKFreq>
 80044e4:	4602      	mov	r2, r0
 80044e6:	4b05      	ldr	r3, [pc, #20]	@ (80044fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	0b5b      	lsrs	r3, r3, #13
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	4903      	ldr	r1, [pc, #12]	@ (8004500 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044f2:	5ccb      	ldrb	r3, [r1, r3]
 80044f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40023800 	.word	0x40023800
 8004500:	08005d6c 	.word	0x08005d6c

08004504 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b088      	sub	sp, #32
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800450c:	2300      	movs	r3, #0
 800450e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004510:	2300      	movs	r3, #0
 8004512:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004514:	2300      	movs	r3, #0
 8004516:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004518:	2300      	movs	r3, #0
 800451a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800451c:	2300      	movs	r3, #0
 800451e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b00      	cmp	r3, #0
 800452a:	d012      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800452c:	4b69      	ldr	r3, [pc, #420]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	4a68      	ldr	r2, [pc, #416]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004532:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004536:	6093      	str	r3, [r2, #8]
 8004538:	4b66      	ldr	r3, [pc, #408]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004540:	4964      	ldr	r1, [pc, #400]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004542:	4313      	orrs	r3, r2
 8004544:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800454e:	2301      	movs	r3, #1
 8004550:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d017      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800455e:	4b5d      	ldr	r3, [pc, #372]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004560:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004564:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800456c:	4959      	ldr	r1, [pc, #356]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800456e:	4313      	orrs	r3, r2
 8004570:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004578:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800457c:	d101      	bne.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800457e:	2301      	movs	r3, #1
 8004580:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800458a:	2301      	movs	r3, #1
 800458c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d017      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800459a:	4b4e      	ldr	r3, [pc, #312]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800459c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045a0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a8:	494a      	ldr	r1, [pc, #296]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045b8:	d101      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80045ba:	2301      	movs	r3, #1
 80045bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80045c6:	2301      	movs	r3, #1
 80045c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80045d6:	2301      	movs	r3, #1
 80045d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0320 	and.w	r3, r3, #32
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 808b 	beq.w	80046fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80045e8:	4b3a      	ldr	r3, [pc, #232]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ec:	4a39      	ldr	r2, [pc, #228]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80045f4:	4b37      	ldr	r3, [pc, #220]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045fc:	60bb      	str	r3, [r7, #8]
 80045fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004600:	4b35      	ldr	r3, [pc, #212]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a34      	ldr	r2, [pc, #208]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004606:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800460a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800460c:	f7fd f9f8 	bl	8001a00 <HAL_GetTick>
 8004610:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004612:	e008      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004614:	f7fd f9f4 	bl	8001a00 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b64      	cmp	r3, #100	@ 0x64
 8004620:	d901      	bls.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e38f      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004626:	4b2c      	ldr	r3, [pc, #176]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0f0      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004632:	4b28      	ldr	r3, [pc, #160]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004636:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800463a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d035      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004646:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	429a      	cmp	r2, r3
 800464e:	d02e      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004650:	4b20      	ldr	r3, [pc, #128]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004654:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004658:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800465a:	4b1e      	ldr	r3, [pc, #120]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800465c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800465e:	4a1d      	ldr	r2, [pc, #116]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004664:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004666:	4b1b      	ldr	r3, [pc, #108]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800466a:	4a1a      	ldr	r2, [pc, #104]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800466c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004670:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004672:	4a18      	ldr	r2, [pc, #96]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004678:	4b16      	ldr	r3, [pc, #88]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800467a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b01      	cmp	r3, #1
 8004682:	d114      	bne.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004684:	f7fd f9bc 	bl	8001a00 <HAL_GetTick>
 8004688:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800468a:	e00a      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800468c:	f7fd f9b8 	bl	8001a00 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800469a:	4293      	cmp	r3, r2
 800469c:	d901      	bls.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e351      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a2:	4b0c      	ldr	r3, [pc, #48]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0ee      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046ba:	d111      	bne.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80046bc:	4b05      	ldr	r3, [pc, #20]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80046c8:	4b04      	ldr	r3, [pc, #16]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80046ca:	400b      	ands	r3, r1
 80046cc:	4901      	ldr	r1, [pc, #4]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	608b      	str	r3, [r1, #8]
 80046d2:	e00b      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80046d4:	40023800 	.word	0x40023800
 80046d8:	40007000 	.word	0x40007000
 80046dc:	0ffffcff 	.word	0x0ffffcff
 80046e0:	4bac      	ldr	r3, [pc, #688]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	4aab      	ldr	r2, [pc, #684]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046e6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80046ea:	6093      	str	r3, [r2, #8]
 80046ec:	4ba9      	ldr	r3, [pc, #676]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046f8:	49a6      	ldr	r1, [pc, #664]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0310 	and.w	r3, r3, #16
 8004706:	2b00      	cmp	r3, #0
 8004708:	d010      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800470a:	4ba2      	ldr	r3, [pc, #648]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800470c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004710:	4aa0      	ldr	r2, [pc, #640]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004712:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004716:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800471a:	4b9e      	ldr	r3, [pc, #632]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800471c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004724:	499b      	ldr	r1, [pc, #620]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004726:	4313      	orrs	r3, r2
 8004728:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00a      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004738:	4b96      	ldr	r3, [pc, #600]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800473a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800473e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004746:	4993      	ldr	r1, [pc, #588]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004748:	4313      	orrs	r3, r2
 800474a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00a      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800475a:	4b8e      	ldr	r3, [pc, #568]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800475c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004760:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004768:	498a      	ldr	r1, [pc, #552]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800476a:	4313      	orrs	r3, r2
 800476c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00a      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800477c:	4b85      	ldr	r3, [pc, #532]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800477e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004782:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800478a:	4982      	ldr	r1, [pc, #520]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800478c:	4313      	orrs	r3, r2
 800478e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00a      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800479e:	4b7d      	ldr	r3, [pc, #500]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047a4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ac:	4979      	ldr	r1, [pc, #484]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00a      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047c0:	4b74      	ldr	r3, [pc, #464]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c6:	f023 0203 	bic.w	r2, r3, #3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ce:	4971      	ldr	r1, [pc, #452]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047e2:	4b6c      	ldr	r3, [pc, #432]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e8:	f023 020c 	bic.w	r2, r3, #12
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047f0:	4968      	ldr	r1, [pc, #416]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00a      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004804:	4b63      	ldr	r3, [pc, #396]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800480a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004812:	4960      	ldr	r1, [pc, #384]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004814:	4313      	orrs	r3, r2
 8004816:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00a      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004826:	4b5b      	ldr	r3, [pc, #364]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800482c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004834:	4957      	ldr	r1, [pc, #348]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004836:	4313      	orrs	r3, r2
 8004838:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00a      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004848:	4b52      	ldr	r3, [pc, #328]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800484a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800484e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004856:	494f      	ldr	r1, [pc, #316]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004858:	4313      	orrs	r3, r2
 800485a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00a      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800486a:	4b4a      	ldr	r3, [pc, #296]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800486c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004870:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004878:	4946      	ldr	r1, [pc, #280]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800487a:	4313      	orrs	r3, r2
 800487c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00a      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800488c:	4b41      	ldr	r3, [pc, #260]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800488e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004892:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800489a:	493e      	ldr	r1, [pc, #248]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800489c:	4313      	orrs	r3, r2
 800489e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00a      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80048ae:	4b39      	ldr	r3, [pc, #228]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048bc:	4935      	ldr	r1, [pc, #212]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00a      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80048d0:	4b30      	ldr	r3, [pc, #192]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048d6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048de:	492d      	ldr	r1, [pc, #180]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d011      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80048f2:	4b28      	ldr	r3, [pc, #160]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048f8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004900:	4924      	ldr	r1, [pc, #144]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004902:	4313      	orrs	r3, r2
 8004904:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800490c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004910:	d101      	bne.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004912:	2301      	movs	r3, #1
 8004914:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0308 	and.w	r3, r3, #8
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004922:	2301      	movs	r3, #1
 8004924:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004932:	4b18      	ldr	r3, [pc, #96]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004938:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004940:	4914      	ldr	r1, [pc, #80]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004942:	4313      	orrs	r3, r2
 8004944:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00b      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004954:	4b0f      	ldr	r3, [pc, #60]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800495a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004964:	490b      	ldr	r1, [pc, #44]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004966:	4313      	orrs	r3, r2
 8004968:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00f      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004978:	4b06      	ldr	r3, [pc, #24]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800497a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800497e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004988:	4902      	ldr	r1, [pc, #8]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800498a:	4313      	orrs	r3, r2
 800498c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004990:	e002      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004992:	bf00      	nop
 8004994:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00b      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049a4:	4b8a      	ldr	r3, [pc, #552]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049aa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b4:	4986      	ldr	r1, [pc, #536]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00b      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80049c8:	4b81      	ldr	r3, [pc, #516]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049ce:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049d8:	497d      	ldr	r1, [pc, #500]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d006      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f000 80d6 	beq.w	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80049f4:	4b76      	ldr	r3, [pc, #472]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a75      	ldr	r2, [pc, #468]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80049fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a00:	f7fc fffe 	bl	8001a00 <HAL_GetTick>
 8004a04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a06:	e008      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a08:	f7fc fffa 	bl	8001a00 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b64      	cmp	r3, #100	@ 0x64
 8004a14:	d901      	bls.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e195      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a1a:	4b6d      	ldr	r3, [pc, #436]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1f0      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d021      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d11d      	bne.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a3a:	4b65      	ldr	r3, [pc, #404]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a40:	0c1b      	lsrs	r3, r3, #16
 8004a42:	f003 0303 	and.w	r3, r3, #3
 8004a46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a48:	4b61      	ldr	r3, [pc, #388]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a4e:	0e1b      	lsrs	r3, r3, #24
 8004a50:	f003 030f 	and.w	r3, r3, #15
 8004a54:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	019a      	lsls	r2, r3, #6
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	041b      	lsls	r3, r3, #16
 8004a60:	431a      	orrs	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	061b      	lsls	r3, r3, #24
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	071b      	lsls	r3, r3, #28
 8004a6e:	4958      	ldr	r1, [pc, #352]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d004      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a8a:	d00a      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d02e      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004aa0:	d129      	bne.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004aa2:	4b4b      	ldr	r3, [pc, #300]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004aa8:	0c1b      	lsrs	r3, r3, #16
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ab0:	4b47      	ldr	r3, [pc, #284]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ab6:	0f1b      	lsrs	r3, r3, #28
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	019a      	lsls	r2, r3, #6
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	041b      	lsls	r3, r3, #16
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	061b      	lsls	r3, r3, #24
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	071b      	lsls	r3, r3, #28
 8004ad6:	493e      	ldr	r1, [pc, #248]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004ade:	4b3c      	ldr	r3, [pc, #240]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ae4:	f023 021f 	bic.w	r2, r3, #31
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aec:	3b01      	subs	r3, #1
 8004aee:	4938      	ldr	r1, [pc, #224]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d01d      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b02:	4b33      	ldr	r3, [pc, #204]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b08:	0e1b      	lsrs	r3, r3, #24
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b10:	4b2f      	ldr	r3, [pc, #188]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b16:	0f1b      	lsrs	r3, r3, #28
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	019a      	lsls	r2, r3, #6
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	041b      	lsls	r3, r3, #16
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	061b      	lsls	r3, r3, #24
 8004b30:	431a      	orrs	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	071b      	lsls	r3, r3, #28
 8004b36:	4926      	ldr	r1, [pc, #152]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d011      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	019a      	lsls	r2, r3, #6
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	041b      	lsls	r3, r3, #16
 8004b56:	431a      	orrs	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	061b      	lsls	r3, r3, #24
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	071b      	lsls	r3, r3, #28
 8004b66:	491a      	ldr	r1, [pc, #104]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b6e:	4b18      	ldr	r3, [pc, #96]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a17      	ldr	r2, [pc, #92]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b74:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b7a:	f7fc ff41 	bl	8001a00 <HAL_GetTick>
 8004b7e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b80:	e008      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b82:	f7fc ff3d 	bl	8001a00 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b64      	cmp	r3, #100	@ 0x64
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e0d8      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b94:	4b0e      	ldr	r3, [pc, #56]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d0f0      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	f040 80ce 	bne.w	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004ba8:	4b09      	ldr	r3, [pc, #36]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a08      	ldr	r2, [pc, #32]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bb4:	f7fc ff24 	bl	8001a00 <HAL_GetTick>
 8004bb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bba:	e00b      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004bbc:	f7fc ff20 	bl	8001a00 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b64      	cmp	r3, #100	@ 0x64
 8004bc8:	d904      	bls.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e0bb      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004bce:	bf00      	nop
 8004bd0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bd4:	4b5e      	ldr	r3, [pc, #376]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004be0:	d0ec      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d009      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d02e      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d12a      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c0a:	4b51      	ldr	r3, [pc, #324]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c10:	0c1b      	lsrs	r3, r3, #16
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c18:	4b4d      	ldr	r3, [pc, #308]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c1e:	0f1b      	lsrs	r3, r3, #28
 8004c20:	f003 0307 	and.w	r3, r3, #7
 8004c24:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	019a      	lsls	r2, r3, #6
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	041b      	lsls	r3, r3, #16
 8004c30:	431a      	orrs	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	061b      	lsls	r3, r3, #24
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	071b      	lsls	r3, r3, #28
 8004c3e:	4944      	ldr	r1, [pc, #272]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c46:	4b42      	ldr	r3, [pc, #264]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c4c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c54:	3b01      	subs	r3, #1
 8004c56:	021b      	lsls	r3, r3, #8
 8004c58:	493d      	ldr	r1, [pc, #244]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d022      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c74:	d11d      	bne.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c76:	4b36      	ldr	r3, [pc, #216]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c7c:	0e1b      	lsrs	r3, r3, #24
 8004c7e:	f003 030f 	and.w	r3, r3, #15
 8004c82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c84:	4b32      	ldr	r3, [pc, #200]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c8a:	0f1b      	lsrs	r3, r3, #28
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	019a      	lsls	r2, r3, #6
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a1b      	ldr	r3, [r3, #32]
 8004c9c:	041b      	lsls	r3, r3, #16
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	061b      	lsls	r3, r3, #24
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	071b      	lsls	r3, r3, #28
 8004caa:	4929      	ldr	r1, [pc, #164]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0308 	and.w	r3, r3, #8
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d028      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004cbe:	4b24      	ldr	r3, [pc, #144]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cc4:	0e1b      	lsrs	r3, r3, #24
 8004cc6:	f003 030f 	and.w	r3, r3, #15
 8004cca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ccc:	4b20      	ldr	r3, [pc, #128]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cd2:	0c1b      	lsrs	r3, r3, #16
 8004cd4:	f003 0303 	and.w	r3, r3, #3
 8004cd8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	019a      	lsls	r2, r3, #6
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	041b      	lsls	r3, r3, #16
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	061b      	lsls	r3, r3, #24
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	69db      	ldr	r3, [r3, #28]
 8004cf0:	071b      	lsls	r3, r3, #28
 8004cf2:	4917      	ldr	r1, [pc, #92]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004cfa:	4b15      	ldr	r3, [pc, #84]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d00:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d08:	4911      	ldr	r1, [pc, #68]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d10:	4b0f      	ldr	r3, [pc, #60]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a0e      	ldr	r2, [pc, #56]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d1c:	f7fc fe70 	bl	8001a00 <HAL_GetTick>
 8004d20:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d22:	e008      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d24:	f7fc fe6c 	bl	8001a00 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b64      	cmp	r3, #100	@ 0x64
 8004d30:	d901      	bls.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e007      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d36:	4b06      	ldr	r3, [pc, #24]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d42:	d1ef      	bne.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3720      	adds	r7, #32
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	40023800 	.word	0x40023800

08004d54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e040      	b.n	8004de8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d106      	bne.n	8004d7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7fc fc32 	bl	80015e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2224      	movs	r2, #36	@ 0x24
 8004d80:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 0201 	bic.w	r2, r2, #1
 8004d90:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d002      	beq.n	8004da0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 fa8c 	bl	80052b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 f825 	bl	8004df0 <UART_SetConfig>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d101      	bne.n	8004db0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e01b      	b.n	8004de8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004dbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689a      	ldr	r2, [r3, #8]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004dce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f042 0201 	orr.w	r2, r2, #1
 8004dde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 fb0b 	bl	80053fc <UART_CheckIdleState>
 8004de6:	4603      	mov	r3, r0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3708      	adds	r7, #8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b088      	sub	sp, #32
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	431a      	orrs	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	69db      	ldr	r3, [r3, #28]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	4ba6      	ldr	r3, [pc, #664]	@ (80050b4 <UART_SetConfig+0x2c4>)
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6812      	ldr	r2, [r2, #0]
 8004e22:	6979      	ldr	r1, [r7, #20]
 8004e24:	430b      	orrs	r3, r1
 8004e26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a1b      	ldr	r3, [r3, #32]
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a94      	ldr	r2, [pc, #592]	@ (80050b8 <UART_SetConfig+0x2c8>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d120      	bne.n	8004eae <UART_SetConfig+0xbe>
 8004e6c:	4b93      	ldr	r3, [pc, #588]	@ (80050bc <UART_SetConfig+0x2cc>)
 8004e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e72:	f003 0303 	and.w	r3, r3, #3
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	d816      	bhi.n	8004ea8 <UART_SetConfig+0xb8>
 8004e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e80 <UART_SetConfig+0x90>)
 8004e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e80:	08004e91 	.word	0x08004e91
 8004e84:	08004e9d 	.word	0x08004e9d
 8004e88:	08004e97 	.word	0x08004e97
 8004e8c:	08004ea3 	.word	0x08004ea3
 8004e90:	2301      	movs	r3, #1
 8004e92:	77fb      	strb	r3, [r7, #31]
 8004e94:	e150      	b.n	8005138 <UART_SetConfig+0x348>
 8004e96:	2302      	movs	r3, #2
 8004e98:	77fb      	strb	r3, [r7, #31]
 8004e9a:	e14d      	b.n	8005138 <UART_SetConfig+0x348>
 8004e9c:	2304      	movs	r3, #4
 8004e9e:	77fb      	strb	r3, [r7, #31]
 8004ea0:	e14a      	b.n	8005138 <UART_SetConfig+0x348>
 8004ea2:	2308      	movs	r3, #8
 8004ea4:	77fb      	strb	r3, [r7, #31]
 8004ea6:	e147      	b.n	8005138 <UART_SetConfig+0x348>
 8004ea8:	2310      	movs	r3, #16
 8004eaa:	77fb      	strb	r3, [r7, #31]
 8004eac:	e144      	b.n	8005138 <UART_SetConfig+0x348>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a83      	ldr	r2, [pc, #524]	@ (80050c0 <UART_SetConfig+0x2d0>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d132      	bne.n	8004f1e <UART_SetConfig+0x12e>
 8004eb8:	4b80      	ldr	r3, [pc, #512]	@ (80050bc <UART_SetConfig+0x2cc>)
 8004eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ebe:	f003 030c 	and.w	r3, r3, #12
 8004ec2:	2b0c      	cmp	r3, #12
 8004ec4:	d828      	bhi.n	8004f18 <UART_SetConfig+0x128>
 8004ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8004ecc <UART_SetConfig+0xdc>)
 8004ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ecc:	08004f01 	.word	0x08004f01
 8004ed0:	08004f19 	.word	0x08004f19
 8004ed4:	08004f19 	.word	0x08004f19
 8004ed8:	08004f19 	.word	0x08004f19
 8004edc:	08004f0d 	.word	0x08004f0d
 8004ee0:	08004f19 	.word	0x08004f19
 8004ee4:	08004f19 	.word	0x08004f19
 8004ee8:	08004f19 	.word	0x08004f19
 8004eec:	08004f07 	.word	0x08004f07
 8004ef0:	08004f19 	.word	0x08004f19
 8004ef4:	08004f19 	.word	0x08004f19
 8004ef8:	08004f19 	.word	0x08004f19
 8004efc:	08004f13 	.word	0x08004f13
 8004f00:	2300      	movs	r3, #0
 8004f02:	77fb      	strb	r3, [r7, #31]
 8004f04:	e118      	b.n	8005138 <UART_SetConfig+0x348>
 8004f06:	2302      	movs	r3, #2
 8004f08:	77fb      	strb	r3, [r7, #31]
 8004f0a:	e115      	b.n	8005138 <UART_SetConfig+0x348>
 8004f0c:	2304      	movs	r3, #4
 8004f0e:	77fb      	strb	r3, [r7, #31]
 8004f10:	e112      	b.n	8005138 <UART_SetConfig+0x348>
 8004f12:	2308      	movs	r3, #8
 8004f14:	77fb      	strb	r3, [r7, #31]
 8004f16:	e10f      	b.n	8005138 <UART_SetConfig+0x348>
 8004f18:	2310      	movs	r3, #16
 8004f1a:	77fb      	strb	r3, [r7, #31]
 8004f1c:	e10c      	b.n	8005138 <UART_SetConfig+0x348>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a68      	ldr	r2, [pc, #416]	@ (80050c4 <UART_SetConfig+0x2d4>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d120      	bne.n	8004f6a <UART_SetConfig+0x17a>
 8004f28:	4b64      	ldr	r3, [pc, #400]	@ (80050bc <UART_SetConfig+0x2cc>)
 8004f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f2e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004f32:	2b30      	cmp	r3, #48	@ 0x30
 8004f34:	d013      	beq.n	8004f5e <UART_SetConfig+0x16e>
 8004f36:	2b30      	cmp	r3, #48	@ 0x30
 8004f38:	d814      	bhi.n	8004f64 <UART_SetConfig+0x174>
 8004f3a:	2b20      	cmp	r3, #32
 8004f3c:	d009      	beq.n	8004f52 <UART_SetConfig+0x162>
 8004f3e:	2b20      	cmp	r3, #32
 8004f40:	d810      	bhi.n	8004f64 <UART_SetConfig+0x174>
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d002      	beq.n	8004f4c <UART_SetConfig+0x15c>
 8004f46:	2b10      	cmp	r3, #16
 8004f48:	d006      	beq.n	8004f58 <UART_SetConfig+0x168>
 8004f4a:	e00b      	b.n	8004f64 <UART_SetConfig+0x174>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	77fb      	strb	r3, [r7, #31]
 8004f50:	e0f2      	b.n	8005138 <UART_SetConfig+0x348>
 8004f52:	2302      	movs	r3, #2
 8004f54:	77fb      	strb	r3, [r7, #31]
 8004f56:	e0ef      	b.n	8005138 <UART_SetConfig+0x348>
 8004f58:	2304      	movs	r3, #4
 8004f5a:	77fb      	strb	r3, [r7, #31]
 8004f5c:	e0ec      	b.n	8005138 <UART_SetConfig+0x348>
 8004f5e:	2308      	movs	r3, #8
 8004f60:	77fb      	strb	r3, [r7, #31]
 8004f62:	e0e9      	b.n	8005138 <UART_SetConfig+0x348>
 8004f64:	2310      	movs	r3, #16
 8004f66:	77fb      	strb	r3, [r7, #31]
 8004f68:	e0e6      	b.n	8005138 <UART_SetConfig+0x348>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a56      	ldr	r2, [pc, #344]	@ (80050c8 <UART_SetConfig+0x2d8>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d120      	bne.n	8004fb6 <UART_SetConfig+0x1c6>
 8004f74:	4b51      	ldr	r3, [pc, #324]	@ (80050bc <UART_SetConfig+0x2cc>)
 8004f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f7a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004f7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f80:	d013      	beq.n	8004faa <UART_SetConfig+0x1ba>
 8004f82:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f84:	d814      	bhi.n	8004fb0 <UART_SetConfig+0x1c0>
 8004f86:	2b80      	cmp	r3, #128	@ 0x80
 8004f88:	d009      	beq.n	8004f9e <UART_SetConfig+0x1ae>
 8004f8a:	2b80      	cmp	r3, #128	@ 0x80
 8004f8c:	d810      	bhi.n	8004fb0 <UART_SetConfig+0x1c0>
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d002      	beq.n	8004f98 <UART_SetConfig+0x1a8>
 8004f92:	2b40      	cmp	r3, #64	@ 0x40
 8004f94:	d006      	beq.n	8004fa4 <UART_SetConfig+0x1b4>
 8004f96:	e00b      	b.n	8004fb0 <UART_SetConfig+0x1c0>
 8004f98:	2300      	movs	r3, #0
 8004f9a:	77fb      	strb	r3, [r7, #31]
 8004f9c:	e0cc      	b.n	8005138 <UART_SetConfig+0x348>
 8004f9e:	2302      	movs	r3, #2
 8004fa0:	77fb      	strb	r3, [r7, #31]
 8004fa2:	e0c9      	b.n	8005138 <UART_SetConfig+0x348>
 8004fa4:	2304      	movs	r3, #4
 8004fa6:	77fb      	strb	r3, [r7, #31]
 8004fa8:	e0c6      	b.n	8005138 <UART_SetConfig+0x348>
 8004faa:	2308      	movs	r3, #8
 8004fac:	77fb      	strb	r3, [r7, #31]
 8004fae:	e0c3      	b.n	8005138 <UART_SetConfig+0x348>
 8004fb0:	2310      	movs	r3, #16
 8004fb2:	77fb      	strb	r3, [r7, #31]
 8004fb4:	e0c0      	b.n	8005138 <UART_SetConfig+0x348>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a44      	ldr	r2, [pc, #272]	@ (80050cc <UART_SetConfig+0x2dc>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d125      	bne.n	800500c <UART_SetConfig+0x21c>
 8004fc0:	4b3e      	ldr	r3, [pc, #248]	@ (80050bc <UART_SetConfig+0x2cc>)
 8004fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fce:	d017      	beq.n	8005000 <UART_SetConfig+0x210>
 8004fd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fd4:	d817      	bhi.n	8005006 <UART_SetConfig+0x216>
 8004fd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fda:	d00b      	beq.n	8004ff4 <UART_SetConfig+0x204>
 8004fdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fe0:	d811      	bhi.n	8005006 <UART_SetConfig+0x216>
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d003      	beq.n	8004fee <UART_SetConfig+0x1fe>
 8004fe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fea:	d006      	beq.n	8004ffa <UART_SetConfig+0x20a>
 8004fec:	e00b      	b.n	8005006 <UART_SetConfig+0x216>
 8004fee:	2300      	movs	r3, #0
 8004ff0:	77fb      	strb	r3, [r7, #31]
 8004ff2:	e0a1      	b.n	8005138 <UART_SetConfig+0x348>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	77fb      	strb	r3, [r7, #31]
 8004ff8:	e09e      	b.n	8005138 <UART_SetConfig+0x348>
 8004ffa:	2304      	movs	r3, #4
 8004ffc:	77fb      	strb	r3, [r7, #31]
 8004ffe:	e09b      	b.n	8005138 <UART_SetConfig+0x348>
 8005000:	2308      	movs	r3, #8
 8005002:	77fb      	strb	r3, [r7, #31]
 8005004:	e098      	b.n	8005138 <UART_SetConfig+0x348>
 8005006:	2310      	movs	r3, #16
 8005008:	77fb      	strb	r3, [r7, #31]
 800500a:	e095      	b.n	8005138 <UART_SetConfig+0x348>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a2f      	ldr	r2, [pc, #188]	@ (80050d0 <UART_SetConfig+0x2e0>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d125      	bne.n	8005062 <UART_SetConfig+0x272>
 8005016:	4b29      	ldr	r3, [pc, #164]	@ (80050bc <UART_SetConfig+0x2cc>)
 8005018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800501c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005020:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005024:	d017      	beq.n	8005056 <UART_SetConfig+0x266>
 8005026:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800502a:	d817      	bhi.n	800505c <UART_SetConfig+0x26c>
 800502c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005030:	d00b      	beq.n	800504a <UART_SetConfig+0x25a>
 8005032:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005036:	d811      	bhi.n	800505c <UART_SetConfig+0x26c>
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <UART_SetConfig+0x254>
 800503c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005040:	d006      	beq.n	8005050 <UART_SetConfig+0x260>
 8005042:	e00b      	b.n	800505c <UART_SetConfig+0x26c>
 8005044:	2301      	movs	r3, #1
 8005046:	77fb      	strb	r3, [r7, #31]
 8005048:	e076      	b.n	8005138 <UART_SetConfig+0x348>
 800504a:	2302      	movs	r3, #2
 800504c:	77fb      	strb	r3, [r7, #31]
 800504e:	e073      	b.n	8005138 <UART_SetConfig+0x348>
 8005050:	2304      	movs	r3, #4
 8005052:	77fb      	strb	r3, [r7, #31]
 8005054:	e070      	b.n	8005138 <UART_SetConfig+0x348>
 8005056:	2308      	movs	r3, #8
 8005058:	77fb      	strb	r3, [r7, #31]
 800505a:	e06d      	b.n	8005138 <UART_SetConfig+0x348>
 800505c:	2310      	movs	r3, #16
 800505e:	77fb      	strb	r3, [r7, #31]
 8005060:	e06a      	b.n	8005138 <UART_SetConfig+0x348>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a1b      	ldr	r2, [pc, #108]	@ (80050d4 <UART_SetConfig+0x2e4>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d138      	bne.n	80050de <UART_SetConfig+0x2ee>
 800506c:	4b13      	ldr	r3, [pc, #76]	@ (80050bc <UART_SetConfig+0x2cc>)
 800506e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005072:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005076:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800507a:	d017      	beq.n	80050ac <UART_SetConfig+0x2bc>
 800507c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005080:	d82a      	bhi.n	80050d8 <UART_SetConfig+0x2e8>
 8005082:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005086:	d00b      	beq.n	80050a0 <UART_SetConfig+0x2b0>
 8005088:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800508c:	d824      	bhi.n	80050d8 <UART_SetConfig+0x2e8>
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <UART_SetConfig+0x2aa>
 8005092:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005096:	d006      	beq.n	80050a6 <UART_SetConfig+0x2b6>
 8005098:	e01e      	b.n	80050d8 <UART_SetConfig+0x2e8>
 800509a:	2300      	movs	r3, #0
 800509c:	77fb      	strb	r3, [r7, #31]
 800509e:	e04b      	b.n	8005138 <UART_SetConfig+0x348>
 80050a0:	2302      	movs	r3, #2
 80050a2:	77fb      	strb	r3, [r7, #31]
 80050a4:	e048      	b.n	8005138 <UART_SetConfig+0x348>
 80050a6:	2304      	movs	r3, #4
 80050a8:	77fb      	strb	r3, [r7, #31]
 80050aa:	e045      	b.n	8005138 <UART_SetConfig+0x348>
 80050ac:	2308      	movs	r3, #8
 80050ae:	77fb      	strb	r3, [r7, #31]
 80050b0:	e042      	b.n	8005138 <UART_SetConfig+0x348>
 80050b2:	bf00      	nop
 80050b4:	efff69f3 	.word	0xefff69f3
 80050b8:	40011000 	.word	0x40011000
 80050bc:	40023800 	.word	0x40023800
 80050c0:	40004400 	.word	0x40004400
 80050c4:	40004800 	.word	0x40004800
 80050c8:	40004c00 	.word	0x40004c00
 80050cc:	40005000 	.word	0x40005000
 80050d0:	40011400 	.word	0x40011400
 80050d4:	40007800 	.word	0x40007800
 80050d8:	2310      	movs	r3, #16
 80050da:	77fb      	strb	r3, [r7, #31]
 80050dc:	e02c      	b.n	8005138 <UART_SetConfig+0x348>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a72      	ldr	r2, [pc, #456]	@ (80052ac <UART_SetConfig+0x4bc>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d125      	bne.n	8005134 <UART_SetConfig+0x344>
 80050e8:	4b71      	ldr	r3, [pc, #452]	@ (80052b0 <UART_SetConfig+0x4c0>)
 80050ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ee:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80050f2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80050f6:	d017      	beq.n	8005128 <UART_SetConfig+0x338>
 80050f8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80050fc:	d817      	bhi.n	800512e <UART_SetConfig+0x33e>
 80050fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005102:	d00b      	beq.n	800511c <UART_SetConfig+0x32c>
 8005104:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005108:	d811      	bhi.n	800512e <UART_SetConfig+0x33e>
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <UART_SetConfig+0x326>
 800510e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005112:	d006      	beq.n	8005122 <UART_SetConfig+0x332>
 8005114:	e00b      	b.n	800512e <UART_SetConfig+0x33e>
 8005116:	2300      	movs	r3, #0
 8005118:	77fb      	strb	r3, [r7, #31]
 800511a:	e00d      	b.n	8005138 <UART_SetConfig+0x348>
 800511c:	2302      	movs	r3, #2
 800511e:	77fb      	strb	r3, [r7, #31]
 8005120:	e00a      	b.n	8005138 <UART_SetConfig+0x348>
 8005122:	2304      	movs	r3, #4
 8005124:	77fb      	strb	r3, [r7, #31]
 8005126:	e007      	b.n	8005138 <UART_SetConfig+0x348>
 8005128:	2308      	movs	r3, #8
 800512a:	77fb      	strb	r3, [r7, #31]
 800512c:	e004      	b.n	8005138 <UART_SetConfig+0x348>
 800512e:	2310      	movs	r3, #16
 8005130:	77fb      	strb	r3, [r7, #31]
 8005132:	e001      	b.n	8005138 <UART_SetConfig+0x348>
 8005134:	2310      	movs	r3, #16
 8005136:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	69db      	ldr	r3, [r3, #28]
 800513c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005140:	d15b      	bne.n	80051fa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005142:	7ffb      	ldrb	r3, [r7, #31]
 8005144:	2b08      	cmp	r3, #8
 8005146:	d828      	bhi.n	800519a <UART_SetConfig+0x3aa>
 8005148:	a201      	add	r2, pc, #4	@ (adr r2, 8005150 <UART_SetConfig+0x360>)
 800514a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514e:	bf00      	nop
 8005150:	08005175 	.word	0x08005175
 8005154:	0800517d 	.word	0x0800517d
 8005158:	08005185 	.word	0x08005185
 800515c:	0800519b 	.word	0x0800519b
 8005160:	0800518b 	.word	0x0800518b
 8005164:	0800519b 	.word	0x0800519b
 8005168:	0800519b 	.word	0x0800519b
 800516c:	0800519b 	.word	0x0800519b
 8005170:	08005193 	.word	0x08005193
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005174:	f7ff f99e 	bl	80044b4 <HAL_RCC_GetPCLK1Freq>
 8005178:	61b8      	str	r0, [r7, #24]
        break;
 800517a:	e013      	b.n	80051a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800517c:	f7ff f9ae 	bl	80044dc <HAL_RCC_GetPCLK2Freq>
 8005180:	61b8      	str	r0, [r7, #24]
        break;
 8005182:	e00f      	b.n	80051a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005184:	4b4b      	ldr	r3, [pc, #300]	@ (80052b4 <UART_SetConfig+0x4c4>)
 8005186:	61bb      	str	r3, [r7, #24]
        break;
 8005188:	e00c      	b.n	80051a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800518a:	f7ff f881 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 800518e:	61b8      	str	r0, [r7, #24]
        break;
 8005190:	e008      	b.n	80051a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005192:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005196:	61bb      	str	r3, [r7, #24]
        break;
 8005198:	e004      	b.n	80051a4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800519a:	2300      	movs	r3, #0
 800519c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	77bb      	strb	r3, [r7, #30]
        break;
 80051a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d074      	beq.n	8005294 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	005a      	lsls	r2, r3, #1
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	085b      	lsrs	r3, r3, #1
 80051b4:	441a      	add	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80051be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	2b0f      	cmp	r3, #15
 80051c4:	d916      	bls.n	80051f4 <UART_SetConfig+0x404>
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051cc:	d212      	bcs.n	80051f4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	f023 030f 	bic.w	r3, r3, #15
 80051d6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	085b      	lsrs	r3, r3, #1
 80051dc:	b29b      	uxth	r3, r3
 80051de:	f003 0307 	and.w	r3, r3, #7
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	89fb      	ldrh	r3, [r7, #14]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	89fa      	ldrh	r2, [r7, #14]
 80051f0:	60da      	str	r2, [r3, #12]
 80051f2:	e04f      	b.n	8005294 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	77bb      	strb	r3, [r7, #30]
 80051f8:	e04c      	b.n	8005294 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051fa:	7ffb      	ldrb	r3, [r7, #31]
 80051fc:	2b08      	cmp	r3, #8
 80051fe:	d828      	bhi.n	8005252 <UART_SetConfig+0x462>
 8005200:	a201      	add	r2, pc, #4	@ (adr r2, 8005208 <UART_SetConfig+0x418>)
 8005202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005206:	bf00      	nop
 8005208:	0800522d 	.word	0x0800522d
 800520c:	08005235 	.word	0x08005235
 8005210:	0800523d 	.word	0x0800523d
 8005214:	08005253 	.word	0x08005253
 8005218:	08005243 	.word	0x08005243
 800521c:	08005253 	.word	0x08005253
 8005220:	08005253 	.word	0x08005253
 8005224:	08005253 	.word	0x08005253
 8005228:	0800524b 	.word	0x0800524b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800522c:	f7ff f942 	bl	80044b4 <HAL_RCC_GetPCLK1Freq>
 8005230:	61b8      	str	r0, [r7, #24]
        break;
 8005232:	e013      	b.n	800525c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005234:	f7ff f952 	bl	80044dc <HAL_RCC_GetPCLK2Freq>
 8005238:	61b8      	str	r0, [r7, #24]
        break;
 800523a:	e00f      	b.n	800525c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800523c:	4b1d      	ldr	r3, [pc, #116]	@ (80052b4 <UART_SetConfig+0x4c4>)
 800523e:	61bb      	str	r3, [r7, #24]
        break;
 8005240:	e00c      	b.n	800525c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005242:	f7ff f825 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 8005246:	61b8      	str	r0, [r7, #24]
        break;
 8005248:	e008      	b.n	800525c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800524a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800524e:	61bb      	str	r3, [r7, #24]
        break;
 8005250:	e004      	b.n	800525c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005252:	2300      	movs	r3, #0
 8005254:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	77bb      	strb	r3, [r7, #30]
        break;
 800525a:	bf00      	nop
    }

    if (pclk != 0U)
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d018      	beq.n	8005294 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	085a      	lsrs	r2, r3, #1
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	441a      	add	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	fbb2 f3f3 	udiv	r3, r2, r3
 8005274:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	2b0f      	cmp	r3, #15
 800527a:	d909      	bls.n	8005290 <UART_SetConfig+0x4a0>
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005282:	d205      	bcs.n	8005290 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	b29a      	uxth	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	60da      	str	r2, [r3, #12]
 800528e:	e001      	b.n	8005294 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80052a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3720      	adds	r7, #32
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	40007c00 	.word	0x40007c00
 80052b0:	40023800 	.word	0x40023800
 80052b4:	00f42400 	.word	0x00f42400

080052b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c4:	f003 0308 	and.w	r3, r3, #8
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00a      	beq.n	80052e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00a      	beq.n	8005304 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00a      	beq.n	8005326 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800532a:	f003 0304 	and.w	r3, r3, #4
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00a      	beq.n	8005348 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	430a      	orrs	r2, r1
 8005346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534c:	f003 0310 	and.w	r3, r3, #16
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00a      	beq.n	800536a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	430a      	orrs	r2, r1
 8005368:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800536e:	f003 0320 	and.w	r3, r3, #32
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00a      	beq.n	800538c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005394:	2b00      	cmp	r3, #0
 8005396:	d01a      	beq.n	80053ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053b6:	d10a      	bne.n	80053ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	605a      	str	r2, [r3, #4]
  }
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b098      	sub	sp, #96	@ 0x60
 8005400:	af02      	add	r7, sp, #8
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800540c:	f7fc faf8 	bl	8001a00 <HAL_GetTick>
 8005410:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0308 	and.w	r3, r3, #8
 800541c:	2b08      	cmp	r3, #8
 800541e:	d12e      	bne.n	800547e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005420:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005428:	2200      	movs	r2, #0
 800542a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f88c 	bl	800554c <UART_WaitOnFlagUntilTimeout>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d021      	beq.n	800547e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005442:	e853 3f00 	ldrex	r3, [r3]
 8005446:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800544a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800544e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	461a      	mov	r2, r3
 8005456:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005458:	647b      	str	r3, [r7, #68]	@ 0x44
 800545a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800545e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005460:	e841 2300 	strex	r3, r2, [r1]
 8005464:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1e6      	bne.n	800543a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2220      	movs	r2, #32
 8005470:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e062      	b.n	8005544 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0304 	and.w	r3, r3, #4
 8005488:	2b04      	cmp	r3, #4
 800548a:	d149      	bne.n	8005520 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800548c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005494:	2200      	movs	r2, #0
 8005496:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f856 	bl	800554c <UART_WaitOnFlagUntilTimeout>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d03c      	beq.n	8005520 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ae:	e853 3f00 	ldrex	r3, [r3]
 80054b2:	623b      	str	r3, [r7, #32]
   return(result);
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	461a      	mov	r2, r3
 80054c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80054c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054cc:	e841 2300 	strex	r3, r2, [r1]
 80054d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1e6      	bne.n	80054a6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	3308      	adds	r3, #8
 80054de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	e853 3f00 	ldrex	r3, [r3]
 80054e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f023 0301 	bic.w	r3, r3, #1
 80054ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	3308      	adds	r3, #8
 80054f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054f8:	61fa      	str	r2, [r7, #28]
 80054fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fc:	69b9      	ldr	r1, [r7, #24]
 80054fe:	69fa      	ldr	r2, [r7, #28]
 8005500:	e841 2300 	strex	r3, r2, [r1]
 8005504:	617b      	str	r3, [r7, #20]
   return(result);
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1e5      	bne.n	80054d8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2220      	movs	r2, #32
 8005510:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e011      	b.n	8005544 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2220      	movs	r2, #32
 8005524:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2220      	movs	r2, #32
 800552a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3758      	adds	r7, #88	@ 0x58
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	603b      	str	r3, [r7, #0]
 8005558:	4613      	mov	r3, r2
 800555a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800555c:	e04f      	b.n	80055fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005564:	d04b      	beq.n	80055fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005566:	f7fc fa4b 	bl	8001a00 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	429a      	cmp	r2, r3
 8005574:	d302      	bcc.n	800557c <UART_WaitOnFlagUntilTimeout+0x30>
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d101      	bne.n	8005580 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e04e      	b.n	800561e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0304 	and.w	r3, r3, #4
 800558a:	2b00      	cmp	r3, #0
 800558c:	d037      	beq.n	80055fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	2b80      	cmp	r3, #128	@ 0x80
 8005592:	d034      	beq.n	80055fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2b40      	cmp	r3, #64	@ 0x40
 8005598:	d031      	beq.n	80055fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	69db      	ldr	r3, [r3, #28]
 80055a0:	f003 0308 	and.w	r3, r3, #8
 80055a4:	2b08      	cmp	r3, #8
 80055a6:	d110      	bne.n	80055ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2208      	movs	r2, #8
 80055ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f000 f838 	bl	8005626 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2208      	movs	r2, #8
 80055ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e029      	b.n	800561e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	69db      	ldr	r3, [r3, #28]
 80055d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055d8:	d111      	bne.n	80055fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80055e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f000 f81e 	bl	8005626 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2220      	movs	r2, #32
 80055ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e00f      	b.n	800561e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	69da      	ldr	r2, [r3, #28]
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	4013      	ands	r3, r2
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	429a      	cmp	r2, r3
 800560c:	bf0c      	ite	eq
 800560e:	2301      	moveq	r3, #1
 8005610:	2300      	movne	r3, #0
 8005612:	b2db      	uxtb	r3, r3
 8005614:	461a      	mov	r2, r3
 8005616:	79fb      	ldrb	r3, [r7, #7]
 8005618:	429a      	cmp	r2, r3
 800561a:	d0a0      	beq.n	800555e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005626:	b480      	push	{r7}
 8005628:	b095      	sub	sp, #84	@ 0x54
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005636:	e853 3f00 	ldrex	r3, [r3]
 800563a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800563c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005642:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	461a      	mov	r2, r3
 800564a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800564c:	643b      	str	r3, [r7, #64]	@ 0x40
 800564e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005650:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005652:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005654:	e841 2300 	strex	r3, r2, [r1]
 8005658:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800565a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1e6      	bne.n	800562e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	3308      	adds	r3, #8
 8005666:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005668:	6a3b      	ldr	r3, [r7, #32]
 800566a:	e853 3f00 	ldrex	r3, [r3]
 800566e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	f023 0301 	bic.w	r3, r3, #1
 8005676:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	3308      	adds	r3, #8
 800567e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005680:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005682:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005684:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005686:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005688:	e841 2300 	strex	r3, r2, [r1]
 800568c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800568e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1e5      	bne.n	8005660 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005698:	2b01      	cmp	r3, #1
 800569a:	d118      	bne.n	80056ce <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	e853 3f00 	ldrex	r3, [r3]
 80056a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	f023 0310 	bic.w	r3, r3, #16
 80056b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	461a      	mov	r2, r3
 80056b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056ba:	61bb      	str	r3, [r7, #24]
 80056bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056be:	6979      	ldr	r1, [r7, #20]
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	e841 2300 	strex	r3, r2, [r1]
 80056c6:	613b      	str	r3, [r7, #16]
   return(result);
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1e6      	bne.n	800569c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80056e2:	bf00      	nop
 80056e4:	3754      	adds	r7, #84	@ 0x54
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
	...

080056f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056f0:	b084      	sub	sp, #16
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b084      	sub	sp, #16
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
 80056fa:	f107 001c 	add.w	r0, r7, #28
 80056fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005702:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005706:	2b01      	cmp	r3, #1
 8005708:	d121      	bne.n	800574e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800570e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68da      	ldr	r2, [r3, #12]
 800571a:	4b21      	ldr	r3, [pc, #132]	@ (80057a0 <USB_CoreInit+0xb0>)
 800571c:	4013      	ands	r3, r2
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800572e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005732:	2b01      	cmp	r3, #1
 8005734:	d105      	bne.n	8005742 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 fa92 	bl	8005c6c <USB_CoreReset>
 8005748:	4603      	mov	r3, r0
 800574a:	73fb      	strb	r3, [r7, #15]
 800574c:	e010      	b.n	8005770 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fa86 	bl	8005c6c <USB_CoreReset>
 8005760:	4603      	mov	r3, r0
 8005762:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005768:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8005770:	7fbb      	ldrb	r3, [r7, #30]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d10b      	bne.n	800578e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f043 0206 	orr.w	r2, r3, #6
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f043 0220 	orr.w	r2, r3, #32
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800578e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3710      	adds	r7, #16
 8005794:	46bd      	mov	sp, r7
 8005796:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800579a:	b004      	add	sp, #16
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	ffbdffbf 	.word	0xffbdffbf

080057a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f023 0201 	bic.w	r2, r3, #1
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b084      	sub	sp, #16
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
 80057ce:	460b      	mov	r3, r1
 80057d0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80057d2:	2300      	movs	r3, #0
 80057d4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80057e2:	78fb      	ldrb	r3, [r7, #3]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d115      	bne.n	8005814 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80057f4:	200a      	movs	r0, #10
 80057f6:	f7fc f90f 	bl	8001a18 <HAL_Delay>
      ms += 10U;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	330a      	adds	r3, #10
 80057fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 fa25 	bl	8005c50 <USB_GetMode>
 8005806:	4603      	mov	r3, r0
 8005808:	2b01      	cmp	r3, #1
 800580a:	d01e      	beq.n	800584a <USB_SetCurrentMode+0x84>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005810:	d9f0      	bls.n	80057f4 <USB_SetCurrentMode+0x2e>
 8005812:	e01a      	b.n	800584a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005814:	78fb      	ldrb	r3, [r7, #3]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d115      	bne.n	8005846 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005826:	200a      	movs	r0, #10
 8005828:	f7fc f8f6 	bl	8001a18 <HAL_Delay>
      ms += 10U;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	330a      	adds	r3, #10
 8005830:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 fa0c 	bl	8005c50 <USB_GetMode>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d005      	beq.n	800584a <USB_SetCurrentMode+0x84>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2bc7      	cmp	r3, #199	@ 0xc7
 8005842:	d9f0      	bls.n	8005826 <USB_SetCurrentMode+0x60>
 8005844:	e001      	b.n	800584a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e005      	b.n	8005856 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2bc8      	cmp	r3, #200	@ 0xc8
 800584e:	d101      	bne.n	8005854 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e000      	b.n	8005856 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
	...

08005860 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005860:	b084      	sub	sp, #16
 8005862:	b580      	push	{r7, lr}
 8005864:	b086      	sub	sp, #24
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
 800586a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800586e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005872:	2300      	movs	r3, #0
 8005874:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800587a:	2300      	movs	r3, #0
 800587c:	613b      	str	r3, [r7, #16]
 800587e:	e009      	b.n	8005894 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	3340      	adds	r3, #64	@ 0x40
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	4413      	add	r3, r2
 800588a:	2200      	movs	r2, #0
 800588c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	3301      	adds	r3, #1
 8005892:	613b      	str	r3, [r7, #16]
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	2b0e      	cmp	r3, #14
 8005898:	d9f2      	bls.n	8005880 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800589a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d11c      	bne.n	80058dc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058b0:	f043 0302 	orr.w	r3, r3, #2
 80058b4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ba:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	e005      	b.n	80058e8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80058ee:	461a      	mov	r2, r3
 80058f0:	2300      	movs	r3, #0
 80058f2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058f4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d10d      	bne.n	8005918 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80058fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005900:	2b00      	cmp	r3, #0
 8005902:	d104      	bne.n	800590e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005904:	2100      	movs	r1, #0
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f968 	bl	8005bdc <USB_SetDevSpeed>
 800590c:	e008      	b.n	8005920 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800590e:	2101      	movs	r1, #1
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 f963 	bl	8005bdc <USB_SetDevSpeed>
 8005916:	e003      	b.n	8005920 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005918:	2103      	movs	r1, #3
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f95e 	bl	8005bdc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005920:	2110      	movs	r1, #16
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f8fa 	bl	8005b1c <USB_FlushTxFifo>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d001      	beq.n	8005932 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f924 	bl	8005b80 <USB_FlushRxFifo>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005948:	461a      	mov	r2, r3
 800594a:	2300      	movs	r3, #0
 800594c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005954:	461a      	mov	r2, r3
 8005956:	2300      	movs	r3, #0
 8005958:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005960:	461a      	mov	r2, r3
 8005962:	2300      	movs	r3, #0
 8005964:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005966:	2300      	movs	r3, #0
 8005968:	613b      	str	r3, [r7, #16]
 800596a:	e043      	b.n	80059f4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	4413      	add	r3, r2
 8005974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800597e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005982:	d118      	bne.n	80059b6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10a      	bne.n	80059a0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	015a      	lsls	r2, r3, #5
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	4413      	add	r3, r2
 8005992:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005996:	461a      	mov	r2, r3
 8005998:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	e013      	b.n	80059c8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059ac:	461a      	mov	r2, r3
 80059ae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80059b2:	6013      	str	r3, [r2, #0]
 80059b4:	e008      	b.n	80059c8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	015a      	lsls	r2, r3, #5
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	4413      	add	r3, r2
 80059be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059c2:	461a      	mov	r2, r3
 80059c4:	2300      	movs	r3, #0
 80059c6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059d4:	461a      	mov	r2, r3
 80059d6:	2300      	movs	r3, #0
 80059d8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	015a      	lsls	r2, r3, #5
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	4413      	add	r3, r2
 80059e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059e6:	461a      	mov	r2, r3
 80059e8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80059ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	3301      	adds	r3, #1
 80059f2:	613b      	str	r3, [r7, #16]
 80059f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80059f8:	461a      	mov	r2, r3
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d3b5      	bcc.n	800596c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a00:	2300      	movs	r3, #0
 8005a02:	613b      	str	r3, [r7, #16]
 8005a04:	e043      	b.n	8005a8e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a1c:	d118      	bne.n	8005a50 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10a      	bne.n	8005a3a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	015a      	lsls	r2, r3, #5
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a30:	461a      	mov	r2, r3
 8005a32:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005a36:	6013      	str	r3, [r2, #0]
 8005a38:	e013      	b.n	8005a62 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a46:	461a      	mov	r2, r3
 8005a48:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005a4c:	6013      	str	r3, [r2, #0]
 8005a4e:	e008      	b.n	8005a62 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	2300      	movs	r3, #0
 8005a60:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	015a      	lsls	r2, r3, #5
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a6e:	461a      	mov	r2, r3
 8005a70:	2300      	movs	r3, #0
 8005a72:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	015a      	lsls	r2, r3, #5
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a80:	461a      	mov	r2, r3
 8005a82:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005a86:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	613b      	str	r3, [r7, #16]
 8005a8e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005a92:	461a      	mov	r2, r3
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d3b5      	bcc.n	8005a06 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005aa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005aac:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005aba:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005abc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d105      	bne.n	8005ad0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	f043 0210 	orr.w	r2, r3, #16
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	699a      	ldr	r2, [r3, #24]
 8005ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8005b14 <USB_DevInit+0x2b4>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005adc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d005      	beq.n	8005af0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	f043 0208 	orr.w	r2, r3, #8
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005af0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d105      	bne.n	8005b04 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	699a      	ldr	r2, [r3, #24]
 8005afc:	4b06      	ldr	r3, [pc, #24]	@ (8005b18 <USB_DevInit+0x2b8>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3718      	adds	r7, #24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b10:	b004      	add	sp, #16
 8005b12:	4770      	bx	lr
 8005b14:	803c3800 	.word	0x803c3800
 8005b18:	40000004 	.word	0x40000004

08005b1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b36:	d901      	bls.n	8005b3c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e01b      	b.n	8005b74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	daf2      	bge.n	8005b2a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	019b      	lsls	r3, r3, #6
 8005b4c:	f043 0220 	orr.w	r2, r3, #32
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	3301      	adds	r3, #1
 8005b58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b60:	d901      	bls.n	8005b66 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e006      	b.n	8005b74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	f003 0320 	and.w	r3, r3, #32
 8005b6e:	2b20      	cmp	r3, #32
 8005b70:	d0f0      	beq.n	8005b54 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3714      	adds	r7, #20
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b98:	d901      	bls.n	8005b9e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e018      	b.n	8005bd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	daf2      	bge.n	8005b8c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2210      	movs	r2, #16
 8005bae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005bbc:	d901      	bls.n	8005bc2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e006      	b.n	8005bd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	f003 0310 	and.w	r3, r3, #16
 8005bca:	2b10      	cmp	r3, #16
 8005bcc:	d0f0      	beq.n	8005bb0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3714      	adds	r7, #20
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	460b      	mov	r3, r1
 8005be6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	78fb      	ldrb	r3, [r7, #3]
 8005bf6:	68f9      	ldr	r1, [r7, #12]
 8005bf8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3714      	adds	r7, #20
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b085      	sub	sp, #20
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005c28:	f023 0303 	bic.w	r3, r3, #3
 8005c2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c3c:	f043 0302 	orr.w	r3, r3, #2
 8005c40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3714      	adds	r7, #20
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	f003 0301 	and.w	r3, r3, #1
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c74:	2300      	movs	r3, #0
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c84:	d901      	bls.n	8005c8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e01b      	b.n	8005cc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	daf2      	bge.n	8005c78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c92:	2300      	movs	r3, #0
 8005c94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	f043 0201 	orr.w	r2, r3, #1
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005cae:	d901      	bls.n	8005cb4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e006      	b.n	8005cc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d0f0      	beq.n	8005ca2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <memset>:
 8005cce:	4402      	add	r2, r0
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d100      	bne.n	8005cd8 <memset+0xa>
 8005cd6:	4770      	bx	lr
 8005cd8:	f803 1b01 	strb.w	r1, [r3], #1
 8005cdc:	e7f9      	b.n	8005cd2 <memset+0x4>
	...

08005ce0 <__libc_init_array>:
 8005ce0:	b570      	push	{r4, r5, r6, lr}
 8005ce2:	4d0d      	ldr	r5, [pc, #52]	@ (8005d18 <__libc_init_array+0x38>)
 8005ce4:	4c0d      	ldr	r4, [pc, #52]	@ (8005d1c <__libc_init_array+0x3c>)
 8005ce6:	1b64      	subs	r4, r4, r5
 8005ce8:	10a4      	asrs	r4, r4, #2
 8005cea:	2600      	movs	r6, #0
 8005cec:	42a6      	cmp	r6, r4
 8005cee:	d109      	bne.n	8005d04 <__libc_init_array+0x24>
 8005cf0:	4d0b      	ldr	r5, [pc, #44]	@ (8005d20 <__libc_init_array+0x40>)
 8005cf2:	4c0c      	ldr	r4, [pc, #48]	@ (8005d24 <__libc_init_array+0x44>)
 8005cf4:	f000 f818 	bl	8005d28 <_init>
 8005cf8:	1b64      	subs	r4, r4, r5
 8005cfa:	10a4      	asrs	r4, r4, #2
 8005cfc:	2600      	movs	r6, #0
 8005cfe:	42a6      	cmp	r6, r4
 8005d00:	d105      	bne.n	8005d0e <__libc_init_array+0x2e>
 8005d02:	bd70      	pop	{r4, r5, r6, pc}
 8005d04:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d08:	4798      	blx	r3
 8005d0a:	3601      	adds	r6, #1
 8005d0c:	e7ee      	b.n	8005cec <__libc_init_array+0xc>
 8005d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d12:	4798      	blx	r3
 8005d14:	3601      	adds	r6, #1
 8005d16:	e7f2      	b.n	8005cfe <__libc_init_array+0x1e>
 8005d18:	08005d84 	.word	0x08005d84
 8005d1c:	08005d84 	.word	0x08005d84
 8005d20:	08005d84 	.word	0x08005d84
 8005d24:	08005d88 	.word	0x08005d88

08005d28 <_init>:
 8005d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d2a:	bf00      	nop
 8005d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d2e:	bc08      	pop	{r3}
 8005d30:	469e      	mov	lr, r3
 8005d32:	4770      	bx	lr

08005d34 <_fini>:
 8005d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d36:	bf00      	nop
 8005d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d3a:	bc08      	pop	{r3}
 8005d3c:	469e      	mov	lr, r3
 8005d3e:	4770      	bx	lr
