
bluetooth-master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000569c  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005894  08005894  00006894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058ac  080058ac  0000714c  2**0
                  CONTENTS
  4 .ARM          00000008  080058ac  080058ac  000068ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058b4  080058b4  0000714c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058b4  080058b4  000068b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080058b8  080058b8  000068b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080058bc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  080058c8  0000700c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  08005968  000070ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000750  2000014c  08005a08  0000714c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000089c  08005a08  0000789c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000714c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013cd2  00000000  00000000  0000717a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002a0f  00000000  00000000  0001ae4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ec0  00000000  00000000  0001d860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b5c  00000000  00000000  0001e720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000290b9  00000000  00000000  0001f27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012c1d  00000000  00000000  00048335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fe592  00000000  00000000  0005af52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001594e4  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003d8c  00000000  00000000  00159528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005b  00000000  00000000  0015d2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000014c 	.word	0x2000014c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800587c 	.word	0x0800587c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000150 	.word	0x20000150
 8000234:	0800587c 	.word	0x0800587c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart2.Instance) {
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	4b0f      	ldr	r3, [pc, #60]	@ (8000574 <HAL_UART_RxCpltCallback+0x4c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	429a      	cmp	r2, r3
 800053a:	d117      	bne.n	800056c <HAL_UART_RxCpltCallback+0x44>
		if (RX_BUFFER[0] == '1') {
 800053c:	4b0e      	ldr	r3, [pc, #56]	@ (8000578 <HAL_UART_RxCpltCallback+0x50>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	2b31      	cmp	r3, #49	@ 0x31
 8000542:	d105      	bne.n	8000550 <HAL_UART_RxCpltCallback+0x28>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8000544:	2201      	movs	r2, #1
 8000546:	2180      	movs	r1, #128	@ 0x80
 8000548:	480c      	ldr	r0, [pc, #48]	@ (800057c <HAL_UART_RxCpltCallback+0x54>)
 800054a:	f002 f86f 	bl	800262c <HAL_GPIO_WritePin>
 800054e:	e008      	b.n	8000562 <HAL_UART_RxCpltCallback+0x3a>
		}
		else if (RX_BUFFER[0] == '0') {
 8000550:	4b09      	ldr	r3, [pc, #36]	@ (8000578 <HAL_UART_RxCpltCallback+0x50>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b30      	cmp	r3, #48	@ 0x30
 8000556:	d104      	bne.n	8000562 <HAL_UART_RxCpltCallback+0x3a>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8000558:	2200      	movs	r2, #0
 800055a:	2180      	movs	r1, #128	@ 0x80
 800055c:	4807      	ldr	r0, [pc, #28]	@ (800057c <HAL_UART_RxCpltCallback+0x54>)
 800055e:	f002 f865 	bl	800262c <HAL_GPIO_WritePin>
		}
		HAL_UART_Receive_IT(&huart2, RX_BUFFER, BUFFER_LEN);
 8000562:	2201      	movs	r2, #1
 8000564:	4904      	ldr	r1, [pc, #16]	@ (8000578 <HAL_UART_RxCpltCallback+0x50>)
 8000566:	4803      	ldr	r0, [pc, #12]	@ (8000574 <HAL_UART_RxCpltCallback+0x4c>)
 8000568:	f003 fbe7 	bl	8003d3a <HAL_UART_Receive_IT>
	}
}
 800056c:	bf00      	nop
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000298 	.word	0x20000298
 8000578:	20000888 	.word	0x20000888
 800057c:	40020400 	.word	0x40020400

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 fd38 	bl	8000ffa <HAL_Init>

  /* USER CODE BEGIN Init */
  uint16_t AD_RES = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f837 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f9d5 	bl	8000940 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000596:	f000 f8a5 	bl	80006e4 <MX_ADC1_Init>
  MX_ETH_Init();
 800059a:	f000 f8f5 	bl	8000788 <MX_ETH_Init>
  MX_USART2_UART_Init();
 800059e:	f000 f941 	bl	8000824 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005a2:	f000 f96f 	bl	8000884 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005a6:	f000 f99d 	bl	80008e4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, RX_BUFFER, BUFFER_LEN);
 80005aa:	2201      	movs	r2, #1
 80005ac:	4910      	ldr	r1, [pc, #64]	@ (80005f0 <main+0x70>)
 80005ae:	4811      	ldr	r0, [pc, #68]	@ (80005f4 <main+0x74>)
 80005b0:	f003 fbc3 	bl	8003d3a <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  // Start ADC Conversion
	  HAL_ADC_Start(&hadc1);
 80005b4:	4810      	ldr	r0, [pc, #64]	@ (80005f8 <main+0x78>)
 80005b6:	f000 fde5 	bl	8001184 <HAL_ADC_Start>
	  // Poll ADC1 Peripheral & TimeOut = 1mSec
	  HAL_ADC_PollForConversion(&hadc1, 1);
 80005ba:	2101      	movs	r1, #1
 80005bc:	480e      	ldr	r0, [pc, #56]	@ (80005f8 <main+0x78>)
 80005be:	f000 feaf 	bl	8001320 <HAL_ADC_PollForConversion>
	  // Read The ADC Conversion Result & Map It to PWM DutyCycle
	  AD_RES = HAL_ADC_GetValue(&hadc1);
 80005c2:	480d      	ldr	r0, [pc, #52]	@ (80005f8 <main+0x78>)
 80005c4:	f000 ff37 	bl	8001436 <HAL_ADC_GetValue>
 80005c8:	4603      	mov	r3, r0
 80005ca:	80fb      	strh	r3, [r7, #6]
	  TX_BUFFER[0] = AD_RES >> 4;
 80005cc:	88fb      	ldrh	r3, [r7, #6]
 80005ce:	091b      	lsrs	r3, r3, #4
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	4b09      	ldr	r3, [pc, #36]	@ (80005fc <main+0x7c>)
 80005d6:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, TX_BUFFER, sizeof(TX_BUFFER), 100);
 80005d8:	2364      	movs	r3, #100	@ 0x64
 80005da:	2201      	movs	r2, #1
 80005dc:	4907      	ldr	r1, [pc, #28]	@ (80005fc <main+0x7c>)
 80005de:	4805      	ldr	r0, [pc, #20]	@ (80005f4 <main+0x74>)
 80005e0:	f003 fb22 	bl	8003c28 <HAL_UART_Transmit>
	  HAL_Delay(25);
 80005e4:	2019      	movs	r0, #25
 80005e6:	f000 fd65 	bl	80010b4 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 80005ea:	bf00      	nop
 80005ec:	e7e2      	b.n	80005b4 <main+0x34>
 80005ee:	bf00      	nop
 80005f0:	20000888 	.word	0x20000888
 80005f4:	20000298 	.word	0x20000298
 80005f8:	200001a0 	.word	0x200001a0
 80005fc:	2000088c 	.word	0x2000088c

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	@ 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 031c 	add.w	r3, r7, #28
 800060a:	2234      	movs	r2, #52	@ 0x34
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f005 f907 	bl	8005822 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000624:	f002 f956 	bl	80028d4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	4b2c      	ldr	r3, [pc, #176]	@ (80006dc <SystemClock_Config+0xdc>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800062c:	4a2b      	ldr	r2, [pc, #172]	@ (80006dc <SystemClock_Config+0xdc>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	@ 0x40
 8000634:	4b29      	ldr	r3, [pc, #164]	@ (80006dc <SystemClock_Config+0xdc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000640:	4b27      	ldr	r3, [pc, #156]	@ (80006e0 <SystemClock_Config+0xe0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000648:	4a25      	ldr	r2, [pc, #148]	@ (80006e0 <SystemClock_Config+0xe0>)
 800064a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b23      	ldr	r3, [pc, #140]	@ (80006e0 <SystemClock_Config+0xe0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000658:	603b      	str	r3, [r7, #0]
 800065a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065c:	2301      	movs	r3, #1
 800065e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000660:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000664:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800066e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000670:	2304      	movs	r3, #4
 8000672:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000674:	2360      	movs	r3, #96	@ 0x60
 8000676:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000678:	2302      	movs	r3, #2
 800067a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800067c:	2304      	movs	r3, #4
 800067e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000680:	2302      	movs	r3, #2
 8000682:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 031c 	add.w	r3, r7, #28
 8000688:	4618      	mov	r0, r3
 800068a:	f002 f983 	bl	8002994 <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000694:	f000 f9f6 	bl	8000a84 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000698:	f002 f92c 	bl	80028f4 <HAL_PWREx_EnableOverDrive>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006a2:	f000 f9ef 	bl	8000a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	230f      	movs	r3, #15
 80006a8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006aa:	2302      	movs	r3, #2
 80006ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006bc:	f107 0308 	add.w	r3, r7, #8
 80006c0:	2103      	movs	r1, #3
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 fc14 	bl	8002ef0 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006ce:	f000 f9d9 	bl	8000a84 <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3750      	adds	r7, #80	@ 0x50
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ea:	463b      	mov	r3, r7
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006f6:	4b21      	ldr	r3, [pc, #132]	@ (800077c <MX_ADC1_Init+0x98>)
 80006f8:	4a21      	ldr	r2, [pc, #132]	@ (8000780 <MX_ADC1_Init+0x9c>)
 80006fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006fc:	4b1f      	ldr	r3, [pc, #124]	@ (800077c <MX_ADC1_Init+0x98>)
 80006fe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000702:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000704:	4b1d      	ldr	r3, [pc, #116]	@ (800077c <MX_ADC1_Init+0x98>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800070a:	4b1c      	ldr	r3, [pc, #112]	@ (800077c <MX_ADC1_Init+0x98>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000710:	4b1a      	ldr	r3, [pc, #104]	@ (800077c <MX_ADC1_Init+0x98>)
 8000712:	2200      	movs	r2, #0
 8000714:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000716:	4b19      	ldr	r3, [pc, #100]	@ (800077c <MX_ADC1_Init+0x98>)
 8000718:	2200      	movs	r2, #0
 800071a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800071e:	4b17      	ldr	r3, [pc, #92]	@ (800077c <MX_ADC1_Init+0x98>)
 8000720:	2200      	movs	r2, #0
 8000722:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000724:	4b15      	ldr	r3, [pc, #84]	@ (800077c <MX_ADC1_Init+0x98>)
 8000726:	4a17      	ldr	r2, [pc, #92]	@ (8000784 <MX_ADC1_Init+0xa0>)
 8000728:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800072a:	4b14      	ldr	r3, [pc, #80]	@ (800077c <MX_ADC1_Init+0x98>)
 800072c:	2200      	movs	r2, #0
 800072e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000730:	4b12      	ldr	r3, [pc, #72]	@ (800077c <MX_ADC1_Init+0x98>)
 8000732:	2201      	movs	r2, #1
 8000734:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000736:	4b11      	ldr	r3, [pc, #68]	@ (800077c <MX_ADC1_Init+0x98>)
 8000738:	2200      	movs	r2, #0
 800073a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800073e:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <MX_ADC1_Init+0x98>)
 8000740:	2201      	movs	r2, #1
 8000742:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000744:	480d      	ldr	r0, [pc, #52]	@ (800077c <MX_ADC1_Init+0x98>)
 8000746:	f000 fcd9 	bl	80010fc <HAL_ADC_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000750:	f000 f998 	bl	8000a84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000754:	2304      	movs	r3, #4
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000758:	2301      	movs	r3, #1
 800075a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000760:	463b      	mov	r3, r7
 8000762:	4619      	mov	r1, r3
 8000764:	4805      	ldr	r0, [pc, #20]	@ (800077c <MX_ADC1_Init+0x98>)
 8000766:	f000 fe73 	bl	8001450 <HAL_ADC_ConfigChannel>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000770:	f000 f988 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200001a0 	.word	0x200001a0
 8000780:	40012000 	.word	0x40012000
 8000784:	0f000001 	.word	0x0f000001

08000788 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800078c:	4b1f      	ldr	r3, [pc, #124]	@ (800080c <MX_ETH_Init+0x84>)
 800078e:	4a20      	ldr	r2, [pc, #128]	@ (8000810 <MX_ETH_Init+0x88>)
 8000790:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000792:	4b20      	ldr	r3, [pc, #128]	@ (8000814 <MX_ETH_Init+0x8c>)
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000798:	4b1e      	ldr	r3, [pc, #120]	@ (8000814 <MX_ETH_Init+0x8c>)
 800079a:	2280      	movs	r2, #128	@ 0x80
 800079c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800079e:	4b1d      	ldr	r3, [pc, #116]	@ (8000814 <MX_ETH_Init+0x8c>)
 80007a0:	22e1      	movs	r2, #225	@ 0xe1
 80007a2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000814 <MX_ETH_Init+0x8c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000814 <MX_ETH_Init+0x8c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007b0:	4b18      	ldr	r3, [pc, #96]	@ (8000814 <MX_ETH_Init+0x8c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007b6:	4b15      	ldr	r3, [pc, #84]	@ (800080c <MX_ETH_Init+0x84>)
 80007b8:	4a16      	ldr	r2, [pc, #88]	@ (8000814 <MX_ETH_Init+0x8c>)
 80007ba:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007bc:	4b13      	ldr	r3, [pc, #76]	@ (800080c <MX_ETH_Init+0x84>)
 80007be:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80007c2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007c4:	4b11      	ldr	r3, [pc, #68]	@ (800080c <MX_ETH_Init+0x84>)
 80007c6:	4a14      	ldr	r2, [pc, #80]	@ (8000818 <MX_ETH_Init+0x90>)
 80007c8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007ca:	4b10      	ldr	r3, [pc, #64]	@ (800080c <MX_ETH_Init+0x84>)
 80007cc:	4a13      	ldr	r2, [pc, #76]	@ (800081c <MX_ETH_Init+0x94>)
 80007ce:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007d0:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <MX_ETH_Init+0x84>)
 80007d2:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80007d6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007d8:	480c      	ldr	r0, [pc, #48]	@ (800080c <MX_ETH_Init+0x84>)
 80007da:	f001 fa2d 	bl	8001c38 <HAL_ETH_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007e4:	f000 f94e 	bl	8000a84 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007e8:	2238      	movs	r2, #56	@ 0x38
 80007ea:	2100      	movs	r1, #0
 80007ec:	480c      	ldr	r0, [pc, #48]	@ (8000820 <MX_ETH_Init+0x98>)
 80007ee:	f005 f818 	bl	8005822 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000820 <MX_ETH_Init+0x98>)
 80007f4:	2221      	movs	r2, #33	@ 0x21
 80007f6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007f8:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <MX_ETH_Init+0x98>)
 80007fa:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80007fe:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000800:	4b07      	ldr	r3, [pc, #28]	@ (8000820 <MX_ETH_Init+0x98>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200001e8 	.word	0x200001e8
 8000810:	40028000 	.word	0x40028000
 8000814:	20000890 	.word	0x20000890
 8000818:	200000ac 	.word	0x200000ac
 800081c:	2000000c 	.word	0x2000000c
 8000820:	20000168 	.word	0x20000168

08000824 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000828:	4b14      	ldr	r3, [pc, #80]	@ (800087c <MX_USART2_UART_Init+0x58>)
 800082a:	4a15      	ldr	r2, [pc, #84]	@ (8000880 <MX_USART2_UART_Init+0x5c>)
 800082c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800082e:	4b13      	ldr	r3, [pc, #76]	@ (800087c <MX_USART2_UART_Init+0x58>)
 8000830:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000834:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b11      	ldr	r3, [pc, #68]	@ (800087c <MX_USART2_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b0f      	ldr	r3, [pc, #60]	@ (800087c <MX_USART2_UART_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000842:	4b0e      	ldr	r3, [pc, #56]	@ (800087c <MX_USART2_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <MX_USART2_UART_Init+0x58>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	@ (800087c <MX_USART2_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b09      	ldr	r3, [pc, #36]	@ (800087c <MX_USART2_UART_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085a:	4b08      	ldr	r3, [pc, #32]	@ (800087c <MX_USART2_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000860:	4b06      	ldr	r3, [pc, #24]	@ (800087c <MX_USART2_UART_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	@ (800087c <MX_USART2_UART_Init+0x58>)
 8000868:	f003 f990 	bl	8003b8c <HAL_UART_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000872:	f000 f907 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000298 	.word	0x20000298
 8000880:	40004400 	.word	0x40004400

08000884 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000888:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <MX_USART3_UART_Init+0x58>)
 800088a:	4a15      	ldr	r2, [pc, #84]	@ (80008e0 <MX_USART3_UART_Init+0x5c>)
 800088c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800088e:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <MX_USART3_UART_Init+0x58>)
 8000890:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000894:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <MX_USART3_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <MX_USART3_UART_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <MX_USART3_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <MX_USART3_UART_Init+0x58>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <MX_USART3_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <MX_USART3_UART_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <MX_USART3_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c0:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <MX_USART3_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	@ (80008dc <MX_USART3_UART_Init+0x58>)
 80008c8:	f003 f960 	bl	8003b8c <HAL_UART_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008d2:	f000 f8d7 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000320 	.word	0x20000320
 80008e0:	40004800 	.word	0x40004800

080008e4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008e8:	4b14      	ldr	r3, [pc, #80]	@ (800093c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80008ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008f0:	4b12      	ldr	r3, [pc, #72]	@ (800093c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f2:	2206      	movs	r2, #6
 80008f4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008f6:	4b11      	ldr	r3, [pc, #68]	@ (800093c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f8:	2202      	movs	r2, #2
 80008fa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000902:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000904:	2202      	movs	r2, #2
 8000906:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000908:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090a:	2201      	movs	r2, #1
 800090c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	@ (800093c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000914:	4b09      	ldr	r3, [pc, #36]	@ (800093c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800091a:	4b08      	ldr	r3, [pc, #32]	@ (800093c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091c:	2201      	movs	r2, #1
 800091e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000920:	4b06      	ldr	r3, [pc, #24]	@ (800093c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000922:	2200      	movs	r2, #0
 8000924:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	@ (800093c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000928:	f001 fe99 	bl	800265e <HAL_PCD_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000932:	f000 f8a7 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200003a8 	.word	0x200003a8

08000940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08c      	sub	sp, #48	@ 0x30
 8000944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000956:	4b47      	ldr	r3, [pc, #284]	@ (8000a74 <MX_GPIO_Init+0x134>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a46      	ldr	r2, [pc, #280]	@ (8000a74 <MX_GPIO_Init+0x134>)
 800095c:	f043 0304 	orr.w	r3, r3, #4
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b44      	ldr	r3, [pc, #272]	@ (8000a74 <MX_GPIO_Init+0x134>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0304 	and.w	r3, r3, #4
 800096a:	61bb      	str	r3, [r7, #24]
 800096c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096e:	4b41      	ldr	r3, [pc, #260]	@ (8000a74 <MX_GPIO_Init+0x134>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a40      	ldr	r2, [pc, #256]	@ (8000a74 <MX_GPIO_Init+0x134>)
 8000974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b3e      	ldr	r3, [pc, #248]	@ (8000a74 <MX_GPIO_Init+0x134>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	4b3b      	ldr	r3, [pc, #236]	@ (8000a74 <MX_GPIO_Init+0x134>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	4a3a      	ldr	r2, [pc, #232]	@ (8000a74 <MX_GPIO_Init+0x134>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6313      	str	r3, [r2, #48]	@ 0x30
 8000992:	4b38      	ldr	r3, [pc, #224]	@ (8000a74 <MX_GPIO_Init+0x134>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099e:	4b35      	ldr	r3, [pc, #212]	@ (8000a74 <MX_GPIO_Init+0x134>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a34      	ldr	r2, [pc, #208]	@ (8000a74 <MX_GPIO_Init+0x134>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009aa:	4b32      	ldr	r3, [pc, #200]	@ (8000a74 <MX_GPIO_Init+0x134>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b6:	4b2f      	ldr	r3, [pc, #188]	@ (8000a74 <MX_GPIO_Init+0x134>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	4a2e      	ldr	r2, [pc, #184]	@ (8000a74 <MX_GPIO_Init+0x134>)
 80009bc:	f043 0308 	orr.w	r3, r3, #8
 80009c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000a74 <MX_GPIO_Init+0x134>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	f003 0308 	and.w	r3, r3, #8
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009ce:	4b29      	ldr	r3, [pc, #164]	@ (8000a74 <MX_GPIO_Init+0x134>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	4a28      	ldr	r2, [pc, #160]	@ (8000a74 <MX_GPIO_Init+0x134>)
 80009d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009da:	4b26      	ldr	r3, [pc, #152]	@ (8000a74 <MX_GPIO_Init+0x134>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80009ec:	4822      	ldr	r0, [pc, #136]	@ (8000a78 <MX_GPIO_Init+0x138>)
 80009ee:	f001 fe1d 	bl	800262c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2140      	movs	r1, #64	@ 0x40
 80009f6:	4821      	ldr	r0, [pc, #132]	@ (8000a7c <MX_GPIO_Init+0x13c>)
 80009f8:	f001 fe18 	bl	800262c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a02:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	481b      	ldr	r0, [pc, #108]	@ (8000a80 <MX_GPIO_Init+0x140>)
 8000a14:	f001 fc5e 	bl	80022d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a18:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4811      	ldr	r0, [pc, #68]	@ (8000a78 <MX_GPIO_Init+0x138>)
 8000a32:	f001 fc4f 	bl	80022d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a36:	2340      	movs	r3, #64	@ 0x40
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	480b      	ldr	r0, [pc, #44]	@ (8000a7c <MX_GPIO_Init+0x13c>)
 8000a4e:	f001 fc41 	bl	80022d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a52:	2380      	movs	r3, #128	@ 0x80
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a56:	2300      	movs	r3, #0
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4619      	mov	r1, r3
 8000a64:	4805      	ldr	r0, [pc, #20]	@ (8000a7c <MX_GPIO_Init+0x13c>)
 8000a66:	f001 fc35 	bl	80022d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a6a:	bf00      	nop
 8000a6c:	3730      	adds	r7, #48	@ 0x30
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020400 	.word	0x40020400
 8000a7c:	40021800 	.word	0x40021800
 8000a80:	40020800 	.word	0x40020800

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <Error_Handler+0x8>

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad4 <HAL_MspInit+0x44>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ad4 <HAL_MspInit+0x44>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad4 <HAL_MspInit+0x44>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <HAL_MspInit+0x44>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab2:	4a08      	ldr	r2, [pc, #32]	@ (8000ad4 <HAL_MspInit+0x44>)
 8000ab4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ab8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aba:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <HAL_MspInit+0x44>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000abe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800

08000ad8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	@ 0x28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a15      	ldr	r2, [pc, #84]	@ (8000b4c <HAL_ADC_MspInit+0x74>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d123      	bne.n	8000b42 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000afa:	4b15      	ldr	r3, [pc, #84]	@ (8000b50 <HAL_ADC_MspInit+0x78>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000afe:	4a14      	ldr	r2, [pc, #80]	@ (8000b50 <HAL_ADC_MspInit+0x78>)
 8000b00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b06:	4b12      	ldr	r3, [pc, #72]	@ (8000b50 <HAL_ADC_MspInit+0x78>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	4b0f      	ldr	r3, [pc, #60]	@ (8000b50 <HAL_ADC_MspInit+0x78>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	4a0e      	ldr	r2, [pc, #56]	@ (8000b50 <HAL_ADC_MspInit+0x78>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <HAL_ADC_MspInit+0x78>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b2a:	2310      	movs	r3, #16
 8000b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4805      	ldr	r0, [pc, #20]	@ (8000b54 <HAL_ADC_MspInit+0x7c>)
 8000b3e:	f001 fbc9 	bl	80022d4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b42:	bf00      	nop
 8000b44:	3728      	adds	r7, #40	@ 0x28
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40012000 	.word	0x40012000
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020000 	.word	0x40020000

08000b58 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08e      	sub	sp, #56	@ 0x38
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a4e      	ldr	r2, [pc, #312]	@ (8000cb0 <HAL_ETH_MspInit+0x158>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	f040 8096 	bne.w	8000ca8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b7c:	4b4d      	ldr	r3, [pc, #308]	@ (8000cb4 <HAL_ETH_MspInit+0x15c>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b80:	4a4c      	ldr	r2, [pc, #304]	@ (8000cb4 <HAL_ETH_MspInit+0x15c>)
 8000b82:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b86:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b88:	4b4a      	ldr	r3, [pc, #296]	@ (8000cb4 <HAL_ETH_MspInit+0x15c>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b90:	623b      	str	r3, [r7, #32]
 8000b92:	6a3b      	ldr	r3, [r7, #32]
 8000b94:	4b47      	ldr	r3, [pc, #284]	@ (8000cb4 <HAL_ETH_MspInit+0x15c>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b98:	4a46      	ldr	r2, [pc, #280]	@ (8000cb4 <HAL_ETH_MspInit+0x15c>)
 8000b9a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000b9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba0:	4b44      	ldr	r3, [pc, #272]	@ (8000cb4 <HAL_ETH_MspInit+0x15c>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000ba8:	61fb      	str	r3, [r7, #28]
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	4b41      	ldr	r3, [pc, #260]	@ (8000cb4 <HAL_ETH_MspInit+0x15c>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb0:	4a40      	ldr	r2, [pc, #256]	@ (8000cb4 <HAL_ETH_MspInit+0x15c>)
 8000bb2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000bb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb8:	4b3e      	ldr	r3, [pc, #248]	@ (8000cb4 <HAL_ETH_MspInit+0x15c>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000bc0:	61bb      	str	r3, [r7, #24]
 8000bc2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc4:	4b3b      	ldr	r3, [pc, #236]	@ (8000cb4 <HAL_ETH_MspInit+0x15c>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc8:	4a3a      	ldr	r2, [pc, #232]	@ (8000cb4 <HAL_ETH_MspInit+0x15c>)
 8000bca:	f043 0304 	orr.w	r3, r3, #4
 8000bce:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd0:	4b38      	ldr	r3, [pc, #224]	@ (8000cb4 <HAL_ETH_MspInit+0x15c>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd4:	f003 0304 	and.w	r3, r3, #4
 8000bd8:	617b      	str	r3, [r7, #20]
 8000bda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bdc:	4b35      	ldr	r3, [pc, #212]	@ (8000cb4 <HAL_ETH_MspInit+0x15c>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be0:	4a34      	ldr	r2, [pc, #208]	@ (8000cb4 <HAL_ETH_MspInit+0x15c>)
 8000be2:	f043 0301 	orr.w	r3, r3, #1
 8000be6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be8:	4b32      	ldr	r3, [pc, #200]	@ (8000cb4 <HAL_ETH_MspInit+0x15c>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bec:	f003 0301 	and.w	r3, r3, #1
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf4:	4b2f      	ldr	r3, [pc, #188]	@ (8000cb4 <HAL_ETH_MspInit+0x15c>)
 8000bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf8:	4a2e      	ldr	r2, [pc, #184]	@ (8000cb4 <HAL_ETH_MspInit+0x15c>)
 8000bfa:	f043 0302 	orr.w	r3, r3, #2
 8000bfe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c00:	4b2c      	ldr	r3, [pc, #176]	@ (8000cb4 <HAL_ETH_MspInit+0x15c>)
 8000c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c04:	f003 0302 	and.w	r3, r3, #2
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c0c:	4b29      	ldr	r3, [pc, #164]	@ (8000cb4 <HAL_ETH_MspInit+0x15c>)
 8000c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c10:	4a28      	ldr	r2, [pc, #160]	@ (8000cb4 <HAL_ETH_MspInit+0x15c>)
 8000c12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c16:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c18:	4b26      	ldr	r3, [pc, #152]	@ (8000cb4 <HAL_ETH_MspInit+0x15c>)
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c24:	2332      	movs	r3, #50	@ 0x32
 8000c26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c30:	2303      	movs	r3, #3
 8000c32:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c34:	230b      	movs	r3, #11
 8000c36:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	481e      	ldr	r0, [pc, #120]	@ (8000cb8 <HAL_ETH_MspInit+0x160>)
 8000c40:	f001 fb48 	bl	80022d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c44:	2386      	movs	r3, #134	@ 0x86
 8000c46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c54:	230b      	movs	r3, #11
 8000c56:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4817      	ldr	r0, [pc, #92]	@ (8000cbc <HAL_ETH_MspInit+0x164>)
 8000c60:	f001 fb38 	bl	80022d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c76:	230b      	movs	r3, #11
 8000c78:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c7e:	4619      	mov	r1, r3
 8000c80:	480f      	ldr	r0, [pc, #60]	@ (8000cc0 <HAL_ETH_MspInit+0x168>)
 8000c82:	f001 fb27 	bl	80022d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c86:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c94:	2303      	movs	r3, #3
 8000c96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c98:	230b      	movs	r3, #11
 8000c9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4808      	ldr	r0, [pc, #32]	@ (8000cc4 <HAL_ETH_MspInit+0x16c>)
 8000ca4:	f001 fb16 	bl	80022d4 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000ca8:	bf00      	nop
 8000caa:	3738      	adds	r7, #56	@ 0x38
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40028000 	.word	0x40028000
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020800 	.word	0x40020800
 8000cbc:	40020000 	.word	0x40020000
 8000cc0:	40020400 	.word	0x40020400
 8000cc4:	40021800 	.word	0x40021800

08000cc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b0b0      	sub	sp, #192	@ 0xc0
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	2290      	movs	r2, #144	@ 0x90
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f004 fd9a 	bl	8005822 <memset>
  if(huart->Instance==USART2)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a46      	ldr	r2, [pc, #280]	@ (8000e0c <HAL_UART_MspInit+0x144>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d143      	bne.n	8000d80 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cf8:	2380      	movs	r3, #128	@ 0x80
 8000cfa:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d00:	f107 031c 	add.w	r3, r7, #28
 8000d04:	4618      	mov	r0, r3
 8000d06:	f002 fb19 	bl	800333c <HAL_RCCEx_PeriphCLKConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d10:	f7ff feb8 	bl	8000a84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d14:	4b3e      	ldr	r3, [pc, #248]	@ (8000e10 <HAL_UART_MspInit+0x148>)
 8000d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d18:	4a3d      	ldr	r2, [pc, #244]	@ (8000e10 <HAL_UART_MspInit+0x148>)
 8000d1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d20:	4b3b      	ldr	r3, [pc, #236]	@ (8000e10 <HAL_UART_MspInit+0x148>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d28:	61bb      	str	r3, [r7, #24]
 8000d2a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2c:	4b38      	ldr	r3, [pc, #224]	@ (8000e10 <HAL_UART_MspInit+0x148>)
 8000d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d30:	4a37      	ldr	r2, [pc, #220]	@ (8000e10 <HAL_UART_MspInit+0x148>)
 8000d32:	f043 0308 	orr.w	r3, r3, #8
 8000d36:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d38:	4b35      	ldr	r3, [pc, #212]	@ (8000e10 <HAL_UART_MspInit+0x148>)
 8000d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3c:	f003 0308 	and.w	r3, r3, #8
 8000d40:	617b      	str	r3, [r7, #20]
 8000d42:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000d44:	2360      	movs	r3, #96	@ 0x60
 8000d46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d56:	2303      	movs	r3, #3
 8000d58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d5c:	2307      	movs	r3, #7
 8000d5e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d62:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000d66:	4619      	mov	r1, r3
 8000d68:	482a      	ldr	r0, [pc, #168]	@ (8000e14 <HAL_UART_MspInit+0x14c>)
 8000d6a:	f001 fab3 	bl	80022d4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2100      	movs	r1, #0
 8000d72:	2026      	movs	r0, #38	@ 0x26
 8000d74:	f000 fe97 	bl	8001aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d78:	2026      	movs	r0, #38	@ 0x26
 8000d7a:	f000 feb0 	bl	8001ade <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d7e:	e041      	b.n	8000e04 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a24      	ldr	r2, [pc, #144]	@ (8000e18 <HAL_UART_MspInit+0x150>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d13c      	bne.n	8000e04 <HAL_UART_MspInit+0x13c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d8e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d90:	2300      	movs	r3, #0
 8000d92:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d94:	f107 031c 	add.w	r3, r7, #28
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f002 facf 	bl	800333c <HAL_RCCEx_PeriphCLKConfig>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8000da4:	f7ff fe6e 	bl	8000a84 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000da8:	4b19      	ldr	r3, [pc, #100]	@ (8000e10 <HAL_UART_MspInit+0x148>)
 8000daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dac:	4a18      	ldr	r2, [pc, #96]	@ (8000e10 <HAL_UART_MspInit+0x148>)
 8000dae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000db2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db4:	4b16      	ldr	r3, [pc, #88]	@ (8000e10 <HAL_UART_MspInit+0x148>)
 8000db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc0:	4b13      	ldr	r3, [pc, #76]	@ (8000e10 <HAL_UART_MspInit+0x148>)
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc4:	4a12      	ldr	r2, [pc, #72]	@ (8000e10 <HAL_UART_MspInit+0x148>)
 8000dc6:	f043 0308 	orr.w	r3, r3, #8
 8000dca:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dcc:	4b10      	ldr	r3, [pc, #64]	@ (8000e10 <HAL_UART_MspInit+0x148>)
 8000dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd0:	f003 0308 	and.w	r3, r3, #8
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dd8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ddc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dec:	2303      	movs	r3, #3
 8000dee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000df2:	2307      	movs	r3, #7
 8000df4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000df8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4805      	ldr	r0, [pc, #20]	@ (8000e14 <HAL_UART_MspInit+0x14c>)
 8000e00:	f001 fa68 	bl	80022d4 <HAL_GPIO_Init>
}
 8000e04:	bf00      	nop
 8000e06:	37c0      	adds	r7, #192	@ 0xc0
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40004400 	.word	0x40004400
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40020c00 	.word	0x40020c00
 8000e18:	40004800 	.word	0x40004800

08000e1c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b0ae      	sub	sp, #184	@ 0xb8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	2290      	movs	r2, #144	@ 0x90
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f004 fcf0 	bl	8005822 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e4a:	d159      	bne.n	8000f00 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000e4c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000e50:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f002 fa6d 	bl	800333c <HAL_RCCEx_PeriphCLKConfig>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000e68:	f7ff fe0c 	bl	8000a84 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6c:	4b26      	ldr	r3, [pc, #152]	@ (8000f08 <HAL_PCD_MspInit+0xec>)
 8000e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e70:	4a25      	ldr	r2, [pc, #148]	@ (8000f08 <HAL_PCD_MspInit+0xec>)
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e78:	4b23      	ldr	r3, [pc, #140]	@ (8000f08 <HAL_PCD_MspInit+0xec>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e84:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000e88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e9e:	230a      	movs	r3, #10
 8000ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4818      	ldr	r0, [pc, #96]	@ (8000f0c <HAL_PCD_MspInit+0xf0>)
 8000eac:	f001 fa12 	bl	80022d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000eb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000eb4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ec4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4810      	ldr	r0, [pc, #64]	@ (8000f0c <HAL_PCD_MspInit+0xf0>)
 8000ecc:	f001 fa02 	bl	80022d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ed0:	4b0d      	ldr	r3, [pc, #52]	@ (8000f08 <HAL_PCD_MspInit+0xec>)
 8000ed2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ed4:	4a0c      	ldr	r2, [pc, #48]	@ (8000f08 <HAL_PCD_MspInit+0xec>)
 8000ed6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000eda:	6353      	str	r3, [r2, #52]	@ 0x34
 8000edc:	4b0a      	ldr	r3, [pc, #40]	@ (8000f08 <HAL_PCD_MspInit+0xec>)
 8000ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ee0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	4b07      	ldr	r3, [pc, #28]	@ (8000f08 <HAL_PCD_MspInit+0xec>)
 8000eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eec:	4a06      	ldr	r2, [pc, #24]	@ (8000f08 <HAL_PCD_MspInit+0xec>)
 8000eee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ef2:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ef4:	4b04      	ldr	r3, [pc, #16]	@ (8000f08 <HAL_PCD_MspInit+0xec>)
 8000ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000f00:	bf00      	nop
 8000f02:	37b8      	adds	r7, #184	@ 0xb8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020000 	.word	0x40020000

08000f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <NMI_Handler+0x4>

08000f18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <HardFault_Handler+0x4>

08000f20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <MemManage_Handler+0x4>

08000f28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <BusFault_Handler+0x4>

08000f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f34:	bf00      	nop
 8000f36:	e7fd      	b.n	8000f34 <UsageFault_Handler+0x4>

08000f38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f66:	f000 f885 	bl	8001074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f74:	4802      	ldr	r0, [pc, #8]	@ (8000f80 <USART2_IRQHandler+0x10>)
 8000f76:	f002 ff25 	bl	8003dc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000298 	.word	0x20000298

08000f84 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <SystemInit+0x20>)
 8000f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f8e:	4a05      	ldr	r2, [pc, #20]	@ (8000fa4 <SystemInit+0x20>)
 8000f90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fa8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fe0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fac:	f7ff ffea 	bl	8000f84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fb0:	480c      	ldr	r0, [pc, #48]	@ (8000fe4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fb2:	490d      	ldr	r1, [pc, #52]	@ (8000fe8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000fec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb8:	e002      	b.n	8000fc0 <LoopCopyDataInit>

08000fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fbe:	3304      	adds	r3, #4

08000fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc4:	d3f9      	bcc.n	8000fba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fc8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ff4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fcc:	e001      	b.n	8000fd2 <LoopFillZerobss>

08000fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd0:	3204      	adds	r2, #4

08000fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd4:	d3fb      	bcc.n	8000fce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000fd6:	f004 fc2d 	bl	8005834 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fda:	f7ff fad1 	bl	8000580 <main>
  bx  lr    
 8000fde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fe0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fec:	080058bc 	.word	0x080058bc
  ldr r2, =_sbss
 8000ff0:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000ff4:	2000089c 	.word	0x2000089c

08000ff8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff8:	e7fe      	b.n	8000ff8 <ADC_IRQHandler>

08000ffa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffe:	2003      	movs	r0, #3
 8001000:	f000 fd46 	bl	8001a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001004:	2000      	movs	r0, #0
 8001006:	f000 f805 	bl	8001014 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800100a:	f7ff fd41 	bl	8000a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	bd80      	pop	{r7, pc}

08001014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800101c:	4b12      	ldr	r3, [pc, #72]	@ (8001068 <HAL_InitTick+0x54>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b12      	ldr	r3, [pc, #72]	@ (800106c <HAL_InitTick+0x58>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	4619      	mov	r1, r3
 8001026:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800102a:	fbb3 f3f1 	udiv	r3, r3, r1
 800102e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001032:	4618      	mov	r0, r3
 8001034:	f000 fd61 	bl	8001afa <HAL_SYSTICK_Config>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e00e      	b.n	8001060 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b0f      	cmp	r3, #15
 8001046:	d80a      	bhi.n	800105e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001048:	2200      	movs	r2, #0
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	f04f 30ff 	mov.w	r0, #4294967295
 8001050:	f000 fd29 	bl	8001aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001054:	4a06      	ldr	r2, [pc, #24]	@ (8001070 <HAL_InitTick+0x5c>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800105a:	2300      	movs	r3, #0
 800105c:	e000      	b.n	8001060 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
}
 8001060:	4618      	mov	r0, r3
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000000 	.word	0x20000000
 800106c:	20000008 	.word	0x20000008
 8001070:	20000004 	.word	0x20000004

08001074 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001078:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <HAL_IncTick+0x20>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <HAL_IncTick+0x24>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4413      	add	r3, r2
 8001084:	4a04      	ldr	r2, [pc, #16]	@ (8001098 <HAL_IncTick+0x24>)
 8001086:	6013      	str	r3, [r2, #0]
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000008 	.word	0x20000008
 8001098:	20000898 	.word	0x20000898

0800109c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  return uwTick;
 80010a0:	4b03      	ldr	r3, [pc, #12]	@ (80010b0 <HAL_GetTick+0x14>)
 80010a2:	681b      	ldr	r3, [r3, #0]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	20000898 	.word	0x20000898

080010b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010bc:	f7ff ffee 	bl	800109c <HAL_GetTick>
 80010c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010cc:	d005      	beq.n	80010da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ce:	4b0a      	ldr	r3, [pc, #40]	@ (80010f8 <HAL_Delay+0x44>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4413      	add	r3, r2
 80010d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010da:	bf00      	nop
 80010dc:	f7ff ffde 	bl	800109c <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d8f7      	bhi.n	80010dc <HAL_Delay+0x28>
  {
  }
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000008 	.word	0x20000008

080010fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001104:	2300      	movs	r3, #0
 8001106:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d101      	bne.n	8001112 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e031      	b.n	8001176 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001116:	2b00      	cmp	r3, #0
 8001118:	d109      	bne.n	800112e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff fcdc 	bl	8000ad8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001132:	f003 0310 	and.w	r3, r3, #16
 8001136:	2b00      	cmp	r3, #0
 8001138:	d116      	bne.n	8001168 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800113e:	4b10      	ldr	r3, [pc, #64]	@ (8001180 <HAL_ADC_Init+0x84>)
 8001140:	4013      	ands	r3, r2
 8001142:	f043 0202 	orr.w	r2, r3, #2
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f000 fad6 	bl	80016fc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115a:	f023 0303 	bic.w	r3, r3, #3
 800115e:	f043 0201 	orr.w	r2, r3, #1
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	641a      	str	r2, [r3, #64]	@ 0x40
 8001166:	e001      	b.n	800116c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001174:	7bfb      	ldrb	r3, [r7, #15]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	ffffeefd 	.word	0xffffeefd

08001184 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001196:	2b01      	cmp	r3, #1
 8001198:	d101      	bne.n	800119e <HAL_ADC_Start+0x1a>
 800119a:	2302      	movs	r3, #2
 800119c:	e0ad      	b.n	80012fa <HAL_ADC_Start+0x176>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2201      	movs	r2, #1
 80011a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d018      	beq.n	80011e6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f042 0201 	orr.w	r2, r2, #1
 80011c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80011c4:	4b50      	ldr	r3, [pc, #320]	@ (8001308 <HAL_ADC_Start+0x184>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a50      	ldr	r2, [pc, #320]	@ (800130c <HAL_ADC_Start+0x188>)
 80011ca:	fba2 2303 	umull	r2, r3, r2, r3
 80011ce:	0c9a      	lsrs	r2, r3, #18
 80011d0:	4613      	mov	r3, r2
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	4413      	add	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80011d8:	e002      	b.n	80011e0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	3b01      	subs	r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1f9      	bne.n	80011da <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d175      	bne.n	80012e0 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011f8:	4b45      	ldr	r3, [pc, #276]	@ (8001310 <HAL_ADC_Start+0x18c>)
 80011fa:	4013      	ands	r3, r2
 80011fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800120e:	2b00      	cmp	r3, #0
 8001210:	d007      	beq.n	8001222 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001216:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800121a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001226:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800122a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800122e:	d106      	bne.n	800123e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001234:	f023 0206 	bic.w	r2, r3, #6
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	645a      	str	r2, [r3, #68]	@ 0x44
 800123c:	e002      	b.n	8001244 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001254:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001256:	4b2f      	ldr	r3, [pc, #188]	@ (8001314 <HAL_ADC_Start+0x190>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f003 031f 	and.w	r3, r3, #31
 800125e:	2b00      	cmp	r3, #0
 8001260:	d10f      	bne.n	8001282 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d143      	bne.n	80012f8 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	689a      	ldr	r2, [r3, #8]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	e03a      	b.n	80012f8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a24      	ldr	r2, [pc, #144]	@ (8001318 <HAL_ADC_Start+0x194>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d10e      	bne.n	80012aa <HAL_ADC_Start+0x126>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d107      	bne.n	80012aa <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80012a8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80012aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001314 <HAL_ADC_Start+0x190>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 0310 	and.w	r3, r3, #16
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d120      	bne.n	80012f8 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a18      	ldr	r2, [pc, #96]	@ (800131c <HAL_ADC_Start+0x198>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d11b      	bne.n	80012f8 <HAL_ADC_Start+0x174>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d114      	bne.n	80012f8 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	e00b      	b.n	80012f8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e4:	f043 0210 	orr.w	r2, r3, #16
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f0:	f043 0201 	orr.w	r2, r3, #1
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	20000000 	.word	0x20000000
 800130c:	431bde83 	.word	0x431bde83
 8001310:	fffff8fe 	.word	0xfffff8fe
 8001314:	40012300 	.word	0x40012300
 8001318:	40012000 	.word	0x40012000
 800131c:	40012200 	.word	0x40012200

08001320 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001338:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800133c:	d113      	bne.n	8001366 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001348:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800134c:	d10b      	bne.n	8001366 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001352:	f043 0220 	orr.w	r2, r3, #32
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e063      	b.n	800142e <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001366:	f7ff fe99 	bl	800109c <HAL_GetTick>
 800136a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800136c:	e021      	b.n	80013b2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001374:	d01d      	beq.n	80013b2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d007      	beq.n	800138c <HAL_ADC_PollForConversion+0x6c>
 800137c:	f7ff fe8e 	bl	800109c <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	429a      	cmp	r2, r3
 800138a:	d212      	bcs.n	80013b2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b02      	cmp	r3, #2
 8001398:	d00b      	beq.n	80013b2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139e:	f043 0204 	orr.w	r2, r3, #4
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e03d      	b.n	800142e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d1d6      	bne.n	800136e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f06f 0212 	mvn.w	r2, #18
 80013c8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ce:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d123      	bne.n	800142c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d11f      	bne.n	800142c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013f2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d006      	beq.n	8001408 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001404:	2b00      	cmp	r3, #0
 8001406:	d111      	bne.n	800142c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001418:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d105      	bne.n	800142c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001424:	f043 0201 	orr.w	r2, r3, #1
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001444:	4618      	mov	r0, r3
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001464:	2b01      	cmp	r3, #1
 8001466:	d101      	bne.n	800146c <HAL_ADC_ConfigChannel+0x1c>
 8001468:	2302      	movs	r3, #2
 800146a:	e136      	b.n	80016da <HAL_ADC_ConfigChannel+0x28a>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2201      	movs	r2, #1
 8001470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b09      	cmp	r3, #9
 800147a:	d93a      	bls.n	80014f2 <HAL_ADC_ConfigChannel+0xa2>
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001484:	d035      	beq.n	80014f2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	68d9      	ldr	r1, [r3, #12]
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	b29b      	uxth	r3, r3
 8001492:	461a      	mov	r2, r3
 8001494:	4613      	mov	r3, r2
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4413      	add	r3, r2
 800149a:	3b1e      	subs	r3, #30
 800149c:	2207      	movs	r2, #7
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43da      	mvns	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	400a      	ands	r2, r1
 80014aa:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a8d      	ldr	r2, [pc, #564]	@ (80016e8 <HAL_ADC_ConfigChannel+0x298>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d10a      	bne.n	80014cc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	68d9      	ldr	r1, [r3, #12]
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	061a      	lsls	r2, r3, #24
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	430a      	orrs	r2, r1
 80014c8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014ca:	e035      	b.n	8001538 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68d9      	ldr	r1, [r3, #12]
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	b29b      	uxth	r3, r3
 80014dc:	4618      	mov	r0, r3
 80014de:	4603      	mov	r3, r0
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	4403      	add	r3, r0
 80014e4:	3b1e      	subs	r3, #30
 80014e6:	409a      	lsls	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014f0:	e022      	b.n	8001538 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6919      	ldr	r1, [r3, #16]
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	461a      	mov	r2, r3
 8001500:	4613      	mov	r3, r2
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	4413      	add	r3, r2
 8001506:	2207      	movs	r2, #7
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43da      	mvns	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	400a      	ands	r2, r1
 8001514:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6919      	ldr	r1, [r3, #16]
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	689a      	ldr	r2, [r3, #8]
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	b29b      	uxth	r3, r3
 8001526:	4618      	mov	r0, r3
 8001528:	4603      	mov	r3, r0
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	4403      	add	r3, r0
 800152e:	409a      	lsls	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	430a      	orrs	r2, r1
 8001536:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b06      	cmp	r3, #6
 800153e:	d824      	bhi.n	800158a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685a      	ldr	r2, [r3, #4]
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	3b05      	subs	r3, #5
 8001552:	221f      	movs	r2, #31
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43da      	mvns	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	400a      	ands	r2, r1
 8001560:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	b29b      	uxth	r3, r3
 800156e:	4618      	mov	r0, r3
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	4613      	mov	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	3b05      	subs	r3, #5
 800157c:	fa00 f203 	lsl.w	r2, r0, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	635a      	str	r2, [r3, #52]	@ 0x34
 8001588:	e04c      	b.n	8001624 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b0c      	cmp	r3, #12
 8001590:	d824      	bhi.n	80015dc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	4613      	mov	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	3b23      	subs	r3, #35	@ 0x23
 80015a4:	221f      	movs	r2, #31
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43da      	mvns	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	400a      	ands	r2, r1
 80015b2:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	b29b      	uxth	r3, r3
 80015c0:	4618      	mov	r0, r3
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	4613      	mov	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	3b23      	subs	r3, #35	@ 0x23
 80015ce:	fa00 f203 	lsl.w	r2, r0, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80015da:	e023      	b.n	8001624 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	3b41      	subs	r3, #65	@ 0x41
 80015ee:	221f      	movs	r2, #31
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43da      	mvns	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	400a      	ands	r2, r1
 80015fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	b29b      	uxth	r3, r3
 800160a:	4618      	mov	r0, r3
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	3b41      	subs	r3, #65	@ 0x41
 8001618:	fa00 f203 	lsl.w	r2, r0, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	430a      	orrs	r2, r1
 8001622:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a30      	ldr	r2, [pc, #192]	@ (80016ec <HAL_ADC_ConfigChannel+0x29c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d10a      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x1f4>
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001636:	d105      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001638:	4b2d      	ldr	r3, [pc, #180]	@ (80016f0 <HAL_ADC_ConfigChannel+0x2a0>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	4a2c      	ldr	r2, [pc, #176]	@ (80016f0 <HAL_ADC_ConfigChannel+0x2a0>)
 800163e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001642:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a28      	ldr	r2, [pc, #160]	@ (80016ec <HAL_ADC_ConfigChannel+0x29c>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d10f      	bne.n	800166e <HAL_ADC_ConfigChannel+0x21e>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b12      	cmp	r3, #18
 8001654:	d10b      	bne.n	800166e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001656:	4b26      	ldr	r3, [pc, #152]	@ (80016f0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	4a25      	ldr	r2, [pc, #148]	@ (80016f0 <HAL_ADC_ConfigChannel+0x2a0>)
 800165c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001660:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001662:	4b23      	ldr	r3, [pc, #140]	@ (80016f0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	4a22      	ldr	r2, [pc, #136]	@ (80016f0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001668:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800166c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a1e      	ldr	r2, [pc, #120]	@ (80016ec <HAL_ADC_ConfigChannel+0x29c>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d12b      	bne.n	80016d0 <HAL_ADC_ConfigChannel+0x280>
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a1a      	ldr	r2, [pc, #104]	@ (80016e8 <HAL_ADC_ConfigChannel+0x298>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d003      	beq.n	800168a <HAL_ADC_ConfigChannel+0x23a>
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b11      	cmp	r3, #17
 8001688:	d122      	bne.n	80016d0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800168a:	4b19      	ldr	r3, [pc, #100]	@ (80016f0 <HAL_ADC_ConfigChannel+0x2a0>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	4a18      	ldr	r2, [pc, #96]	@ (80016f0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001690:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001694:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001696:	4b16      	ldr	r3, [pc, #88]	@ (80016f0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	4a15      	ldr	r2, [pc, #84]	@ (80016f0 <HAL_ADC_ConfigChannel+0x2a0>)
 800169c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80016a0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a10      	ldr	r2, [pc, #64]	@ (80016e8 <HAL_ADC_ConfigChannel+0x298>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d111      	bne.n	80016d0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80016ac:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <HAL_ADC_ConfigChannel+0x2a4>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a11      	ldr	r2, [pc, #68]	@ (80016f8 <HAL_ADC_ConfigChannel+0x2a8>)
 80016b2:	fba2 2303 	umull	r2, r3, r2, r3
 80016b6:	0c9a      	lsrs	r2, r3, #18
 80016b8:	4613      	mov	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	4413      	add	r3, r2
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80016c2:	e002      	b.n	80016ca <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1f9      	bne.n	80016c4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	10000012 	.word	0x10000012
 80016ec:	40012000 	.word	0x40012000
 80016f0:	40012300 	.word	0x40012300
 80016f4:	20000000 	.word	0x20000000
 80016f8:	431bde83 	.word	0x431bde83

080016fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001704:	4b78      	ldr	r3, [pc, #480]	@ (80018e8 <ADC_Init+0x1ec>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	4a77      	ldr	r2, [pc, #476]	@ (80018e8 <ADC_Init+0x1ec>)
 800170a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800170e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001710:	4b75      	ldr	r3, [pc, #468]	@ (80018e8 <ADC_Init+0x1ec>)
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	4973      	ldr	r1, [pc, #460]	@ (80018e8 <ADC_Init+0x1ec>)
 800171a:	4313      	orrs	r3, r2
 800171c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800172c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6859      	ldr	r1, [r3, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	021a      	lsls	r2, r3, #8
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001750:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6859      	ldr	r1, [r3, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	430a      	orrs	r2, r1
 8001762:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001772:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6899      	ldr	r1, [r3, #8]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68da      	ldr	r2, [r3, #12]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	430a      	orrs	r2, r1
 8001784:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800178a:	4a58      	ldr	r2, [pc, #352]	@ (80018ec <ADC_Init+0x1f0>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d022      	beq.n	80017d6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800179e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6899      	ldr	r1, [r3, #8]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6899      	ldr	r1, [r3, #8]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	e00f      	b.n	80017f6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80017e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f022 0202 	bic.w	r2, r2, #2
 8001804:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6899      	ldr	r1, [r3, #8]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	005a      	lsls	r2, r3, #1
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	430a      	orrs	r2, r1
 8001818:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d01b      	beq.n	800185c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001832:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	685a      	ldr	r2, [r3, #4]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001842:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6859      	ldr	r1, [r3, #4]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184e:	3b01      	subs	r3, #1
 8001850:	035a      	lsls	r2, r3, #13
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	430a      	orrs	r2, r1
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	e007      	b.n	800186c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800186a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800187a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	3b01      	subs	r3, #1
 8001888:	051a      	lsls	r2, r3, #20
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	430a      	orrs	r2, r1
 8001890:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80018a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6899      	ldr	r1, [r3, #8]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80018ae:	025a      	lsls	r2, r3, #9
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	689a      	ldr	r2, [r3, #8]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6899      	ldr	r1, [r3, #8]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	029a      	lsls	r2, r3, #10
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	430a      	orrs	r2, r1
 80018da:	609a      	str	r2, [r3, #8]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	40012300 	.word	0x40012300
 80018ec:	0f000001 	.word	0x0f000001

080018f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001900:	4b0b      	ldr	r3, [pc, #44]	@ (8001930 <__NVIC_SetPriorityGrouping+0x40>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001906:	68ba      	ldr	r2, [r7, #8]
 8001908:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800190c:	4013      	ands	r3, r2
 800190e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001918:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <__NVIC_SetPriorityGrouping+0x44>)
 800191a:	4313      	orrs	r3, r2
 800191c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800191e:	4a04      	ldr	r2, [pc, #16]	@ (8001930 <__NVIC_SetPriorityGrouping+0x40>)
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	60d3      	str	r3, [r2, #12]
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000ed00 	.word	0xe000ed00
 8001934:	05fa0000 	.word	0x05fa0000

08001938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800193c:	4b04      	ldr	r3, [pc, #16]	@ (8001950 <__NVIC_GetPriorityGrouping+0x18>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	0a1b      	lsrs	r3, r3, #8
 8001942:	f003 0307 	and.w	r3, r3, #7
}
 8001946:	4618      	mov	r0, r3
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	2b00      	cmp	r3, #0
 8001964:	db0b      	blt.n	800197e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	f003 021f 	and.w	r2, r3, #31
 800196c:	4907      	ldr	r1, [pc, #28]	@ (800198c <__NVIC_EnableIRQ+0x38>)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	095b      	lsrs	r3, r3, #5
 8001974:	2001      	movs	r0, #1
 8001976:	fa00 f202 	lsl.w	r2, r0, r2
 800197a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000e100 	.word	0xe000e100

08001990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	6039      	str	r1, [r7, #0]
 800199a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800199c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	db0a      	blt.n	80019ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	490c      	ldr	r1, [pc, #48]	@ (80019dc <__NVIC_SetPriority+0x4c>)
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ae:	0112      	lsls	r2, r2, #4
 80019b0:	b2d2      	uxtb	r2, r2
 80019b2:	440b      	add	r3, r1
 80019b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b8:	e00a      	b.n	80019d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	4908      	ldr	r1, [pc, #32]	@ (80019e0 <__NVIC_SetPriority+0x50>)
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	3b04      	subs	r3, #4
 80019c8:	0112      	lsls	r2, r2, #4
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	440b      	add	r3, r1
 80019ce:	761a      	strb	r2, [r3, #24]
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000e100 	.word	0xe000e100
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b089      	sub	sp, #36	@ 0x24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f1c3 0307 	rsb	r3, r3, #7
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	bf28      	it	cs
 8001a02:	2304      	movcs	r3, #4
 8001a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3304      	adds	r3, #4
 8001a0a:	2b06      	cmp	r3, #6
 8001a0c:	d902      	bls.n	8001a14 <NVIC_EncodePriority+0x30>
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3b03      	subs	r3, #3
 8001a12:	e000      	b.n	8001a16 <NVIC_EncodePriority+0x32>
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a18:	f04f 32ff 	mov.w	r2, #4294967295
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43da      	mvns	r2, r3
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	401a      	ands	r2, r3
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	fa01 f303 	lsl.w	r3, r1, r3
 8001a36:	43d9      	mvns	r1, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a3c:	4313      	orrs	r3, r2
         );
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3724      	adds	r7, #36	@ 0x24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
	...

08001a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a5c:	d301      	bcc.n	8001a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e00f      	b.n	8001a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a62:	4a0a      	ldr	r2, [pc, #40]	@ (8001a8c <SysTick_Config+0x40>)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a6a:	210f      	movs	r1, #15
 8001a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a70:	f7ff ff8e 	bl	8001990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a74:	4b05      	ldr	r3, [pc, #20]	@ (8001a8c <SysTick_Config+0x40>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a7a:	4b04      	ldr	r3, [pc, #16]	@ (8001a8c <SysTick_Config+0x40>)
 8001a7c:	2207      	movs	r2, #7
 8001a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	e000e010 	.word	0xe000e010

08001a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff ff29 	bl	80018f0 <__NVIC_SetPriorityGrouping>
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b086      	sub	sp, #24
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	4603      	mov	r3, r0
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
 8001ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab8:	f7ff ff3e 	bl	8001938 <__NVIC_GetPriorityGrouping>
 8001abc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	68b9      	ldr	r1, [r7, #8]
 8001ac2:	6978      	ldr	r0, [r7, #20]
 8001ac4:	f7ff ff8e 	bl	80019e4 <NVIC_EncodePriority>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ace:	4611      	mov	r1, r2
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff ff5d 	bl	8001990 <__NVIC_SetPriority>
}
 8001ad6:	bf00      	nop
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ff31 	bl	8001954 <__NVIC_EnableIRQ>
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff ffa2 	bl	8001a4c <SysTick_Config>
 8001b08:	4603      	mov	r3, r0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b084      	sub	sp, #16
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b1e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b20:	f7ff fabc 	bl	800109c <HAL_GetTick>
 8001b24:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d008      	beq.n	8001b44 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2280      	movs	r2, #128	@ 0x80
 8001b36:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e052      	b.n	8001bea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0216 	bic.w	r2, r2, #22
 8001b52:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	695a      	ldr	r2, [r3, #20]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b62:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d103      	bne.n	8001b74 <HAL_DMA_Abort+0x62>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d007      	beq.n	8001b84 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0208 	bic.w	r2, r2, #8
 8001b82:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0201 	bic.w	r2, r2, #1
 8001b92:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b94:	e013      	b.n	8001bbe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b96:	f7ff fa81 	bl	800109c <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b05      	cmp	r3, #5
 8001ba2:	d90c      	bls.n	8001bbe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2220      	movs	r2, #32
 8001ba8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2203      	movs	r2, #3
 8001bae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e015      	b.n	8001bea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1e4      	bne.n	8001b96 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bd0:	223f      	movs	r2, #63	@ 0x3f
 8001bd2:	409a      	lsls	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d004      	beq.n	8001c10 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2280      	movs	r2, #128	@ 0x80
 8001c0a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e00c      	b.n	8001c2a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2205      	movs	r2, #5
 8001c14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0201 	bic.w	r2, r2, #1
 8001c26:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e086      	b.n	8001d58 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d106      	bne.n	8001c62 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2223      	movs	r2, #35	@ 0x23
 8001c58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7fe ff7b 	bl	8000b58 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c62:	4b3f      	ldr	r3, [pc, #252]	@ (8001d60 <HAL_ETH_Init+0x128>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c66:	4a3e      	ldr	r2, [pc, #248]	@ (8001d60 <HAL_ETH_Init+0x128>)
 8001c68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c6e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d60 <HAL_ETH_Init+0x128>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001c7a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d64 <HAL_ETH_Init+0x12c>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	4a39      	ldr	r2, [pc, #228]	@ (8001d64 <HAL_ETH_Init+0x12c>)
 8001c80:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001c84:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001c86:	4b37      	ldr	r3, [pc, #220]	@ (8001d64 <HAL_ETH_Init+0x12c>)
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	4935      	ldr	r1, [pc, #212]	@ (8001d64 <HAL_ETH_Init+0x12c>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001c94:	4b33      	ldr	r3, [pc, #204]	@ (8001d64 <HAL_ETH_Init+0x12c>)
 8001c96:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6812      	ldr	r2, [r2, #0]
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001cae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cb0:	f7ff f9f4 	bl	800109c <HAL_GetTick>
 8001cb4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001cb6:	e011      	b.n	8001cdc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001cb8:	f7ff f9f0 	bl	800109c <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001cc6:	d909      	bls.n	8001cdc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2204      	movs	r2, #4
 8001ccc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	22e0      	movs	r2, #224	@ 0xe0
 8001cd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e03d      	b.n	8001d58 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1e4      	bne.n	8001cb8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f97a 	bl	8001fe8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 fa25 	bl	8002144 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 fa7b 	bl	80021f6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	461a      	mov	r2, r3
 8001d06:	2100      	movs	r1, #0
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f9e3 	bl	80020d4 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001d1c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d68 <HAL_ETH_Init+0x130>)
 8001d2c:	430b      	orrs	r3, r1
 8001d2e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001d42:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2210      	movs	r2, #16
 8001d52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40013800 	.word	0x40013800
 8001d68:	00020060 	.word	0x00020060

08001d6c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	4b53      	ldr	r3, [pc, #332]	@ (8001ed0 <ETH_SetMACConfig+0x164>)
 8001d82:	4013      	ands	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	7b9b      	ldrb	r3, [r3, #14]
 8001d8a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	7c12      	ldrb	r2, [r2, #16]
 8001d90:	2a00      	cmp	r2, #0
 8001d92:	d102      	bne.n	8001d9a <ETH_SetMACConfig+0x2e>
 8001d94:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001d98:	e000      	b.n	8001d9c <ETH_SetMACConfig+0x30>
 8001d9a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001d9c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	7c52      	ldrb	r2, [r2, #17]
 8001da2:	2a00      	cmp	r2, #0
 8001da4:	d102      	bne.n	8001dac <ETH_SetMACConfig+0x40>
 8001da6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001daa:	e000      	b.n	8001dae <ETH_SetMACConfig+0x42>
 8001dac:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001dae:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001db4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	7fdb      	ldrb	r3, [r3, #31]
 8001dba:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001dbc:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001dc2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	7f92      	ldrb	r2, [r2, #30]
 8001dc8:	2a00      	cmp	r2, #0
 8001dca:	d102      	bne.n	8001dd2 <ETH_SetMACConfig+0x66>
 8001dcc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dd0:	e000      	b.n	8001dd4 <ETH_SetMACConfig+0x68>
 8001dd2:	2200      	movs	r2, #0
                        macconf->Speed |
 8001dd4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	7f1b      	ldrb	r3, [r3, #28]
 8001dda:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ddc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001de2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	791b      	ldrb	r3, [r3, #4]
 8001de8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001dea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001df2:	2a00      	cmp	r2, #0
 8001df4:	d102      	bne.n	8001dfc <ETH_SetMACConfig+0x90>
 8001df6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dfa:	e000      	b.n	8001dfe <ETH_SetMACConfig+0x92>
 8001dfc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001dfe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	7bdb      	ldrb	r3, [r3, #15]
 8001e04:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001e06:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001e0c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001e14:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001e16:	4313      	orrs	r3, r2
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e2e:	2001      	movs	r0, #1
 8001e30:	f7ff f940 	bl	80010b4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e52:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001e5a:	2a00      	cmp	r2, #0
 8001e5c:	d101      	bne.n	8001e62 <ETH_SetMACConfig+0xf6>
 8001e5e:	2280      	movs	r2, #128	@ 0x80
 8001e60:	e000      	b.n	8001e64 <ETH_SetMACConfig+0xf8>
 8001e62:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e64:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001e6a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001e72:	2a01      	cmp	r2, #1
 8001e74:	d101      	bne.n	8001e7a <ETH_SetMACConfig+0x10e>
 8001e76:	2208      	movs	r2, #8
 8001e78:	e000      	b.n	8001e7c <ETH_SetMACConfig+0x110>
 8001e7a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001e7c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001e84:	2a01      	cmp	r2, #1
 8001e86:	d101      	bne.n	8001e8c <ETH_SetMACConfig+0x120>
 8001e88:	2204      	movs	r2, #4
 8001e8a:	e000      	b.n	8001e8e <ETH_SetMACConfig+0x122>
 8001e8c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001e8e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001e96:	2a01      	cmp	r2, #1
 8001e98:	d101      	bne.n	8001e9e <ETH_SetMACConfig+0x132>
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	e000      	b.n	8001ea0 <ETH_SetMACConfig+0x134>
 8001e9e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eb8:	2001      	movs	r0, #1
 8001eba:	f7ff f8fb 	bl	80010b4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	619a      	str	r2, [r3, #24]
}
 8001ec6:	bf00      	nop
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	fd20810f 	.word	0xfd20810f

08001ed4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	4b3d      	ldr	r3, [pc, #244]	@ (8001fe4 <ETH_SetDMAConfig+0x110>)
 8001eee:	4013      	ands	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	7b1b      	ldrb	r3, [r3, #12]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d102      	bne.n	8001f00 <ETH_SetDMAConfig+0x2c>
 8001efa:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001efe:	e000      	b.n	8001f02 <ETH_SetDMAConfig+0x2e>
 8001f00:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	7b5b      	ldrb	r3, [r3, #13]
 8001f06:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f08:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	7f52      	ldrb	r2, [r2, #29]
 8001f0e:	2a00      	cmp	r2, #0
 8001f10:	d102      	bne.n	8001f18 <ETH_SetDMAConfig+0x44>
 8001f12:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001f16:	e000      	b.n	8001f1a <ETH_SetDMAConfig+0x46>
 8001f18:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001f1a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	7b9b      	ldrb	r3, [r3, #14]
 8001f20:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001f22:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001f28:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	7f1b      	ldrb	r3, [r3, #28]
 8001f2e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001f30:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	7f9b      	ldrb	r3, [r3, #30]
 8001f36:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001f38:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001f3e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f46:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f58:	461a      	mov	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f6a:	2001      	movs	r0, #1
 8001f6c:	f7ff f8a2 	bl	80010b4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f78:	461a      	mov	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	791b      	ldrb	r3, [r3, #4]
 8001f82:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f88:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001f8e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001f94:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f9c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001f9e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001fa6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001fac:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	6812      	ldr	r2, [r2, #0]
 8001fb2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001fb6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001fba:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fc8:	2001      	movs	r0, #1
 8001fca:	f7ff f873 	bl	80010b4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6013      	str	r3, [r2, #0]
}
 8001fdc:	bf00      	nop
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	f8de3f23 	.word	0xf8de3f23

08001fe8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b0a6      	sub	sp, #152	@ 0x98
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002000:	2300      	movs	r3, #0
 8002002:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002006:	2301      	movs	r3, #1
 8002008:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800200c:	2300      	movs	r3, #0
 800200e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002012:	2301      	movs	r3, #1
 8002014:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002018:	2301      	movs	r3, #1
 800201a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800201e:	2300      	movs	r3, #0
 8002020:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002024:	2300      	movs	r3, #0
 8002026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800202a:	2300      	movs	r3, #0
 800202c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800202e:	2300      	movs	r3, #0
 8002030:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002034:	2300      	movs	r3, #0
 8002036:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002038:	2300      	movs	r3, #0
 800203a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800203e:	2300      	movs	r3, #0
 8002040:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002044:	2300      	movs	r3, #0
 8002046:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800204a:	2300      	movs	r3, #0
 800204c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002050:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002054:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002056:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800205a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800205c:	2300      	movs	r3, #0
 800205e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002062:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002066:	4619      	mov	r1, r3
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff fe7f 	bl	8001d6c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800206e:	2301      	movs	r3, #1
 8002070:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002072:	2301      	movs	r3, #1
 8002074:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002076:	2301      	movs	r3, #1
 8002078:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800207c:	2301      	movs	r3, #1
 800207e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002080:	2300      	movs	r3, #0
 8002082:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002084:	2300      	movs	r3, #0
 8002086:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800208a:	2300      	movs	r3, #0
 800208c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002090:	2300      	movs	r3, #0
 8002092:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002094:	2301      	movs	r3, #1
 8002096:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800209a:	2301      	movs	r3, #1
 800209c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800209e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020a2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80020a4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80020a8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80020aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020ae:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80020b0:	2301      	movs	r3, #1
 80020b2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80020be:	f107 0308 	add.w	r3, r7, #8
 80020c2:	4619      	mov	r1, r3
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff ff05 	bl	8001ed4 <ETH_SetDMAConfig>
}
 80020ca:	bf00      	nop
 80020cc:	3798      	adds	r7, #152	@ 0x98
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
	...

080020d4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b087      	sub	sp, #28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3305      	adds	r3, #5
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	021b      	lsls	r3, r3, #8
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	3204      	adds	r2, #4
 80020ec:	7812      	ldrb	r2, [r2, #0]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	4b11      	ldr	r3, [pc, #68]	@ (800213c <ETH_MACAddressConfig+0x68>)
 80020f6:	4413      	add	r3, r2
 80020f8:	461a      	mov	r2, r3
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3303      	adds	r3, #3
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	061a      	lsls	r2, r3, #24
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3302      	adds	r3, #2
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	041b      	lsls	r3, r3, #16
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3301      	adds	r3, #1
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	021b      	lsls	r3, r3, #8
 8002118:	4313      	orrs	r3, r2
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	7812      	ldrb	r2, [r2, #0]
 800211e:	4313      	orrs	r3, r2
 8002120:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	4b06      	ldr	r3, [pc, #24]	@ (8002140 <ETH_MACAddressConfig+0x6c>)
 8002126:	4413      	add	r3, r2
 8002128:	461a      	mov	r2, r3
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	6013      	str	r3, [r2, #0]
}
 800212e:	bf00      	nop
 8002130:	371c      	adds	r7, #28
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40028040 	.word	0x40028040
 8002140:	40028044 	.word	0x40028044

08002144 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	e03e      	b.n	80021d0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68d9      	ldr	r1, [r3, #12]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	440b      	add	r3, r1
 8002162:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2200      	movs	r2, #0
 800216e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2200      	movs	r2, #0
 800217a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800217c:	68b9      	ldr	r1, [r7, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	3206      	adds	r2, #6
 8002184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d80c      	bhi.n	80021b4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68d9      	ldr	r1, [r3, #12]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1c5a      	adds	r2, r3, #1
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	440b      	add	r3, r1
 80021ac:	461a      	mov	r2, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	e004      	b.n	80021be <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	461a      	mov	r2, r3
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	3301      	adds	r3, #1
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	d9bd      	bls.n	8002152 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021e8:	611a      	str	r2, [r3, #16]
}
 80021ea:	bf00      	nop
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b085      	sub	sp, #20
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	e048      	b.n	8002296 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6919      	ldr	r1, [r3, #16]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	440b      	add	r3, r1
 8002214:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2200      	movs	r2, #0
 8002220:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2200      	movs	r2, #0
 8002226:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	2200      	movs	r2, #0
 800222c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	2200      	movs	r2, #0
 8002232:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2200      	movs	r2, #0
 8002238:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002240:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800225a:	68b9      	ldr	r1, [r7, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	3212      	adds	r2, #18
 8002262:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2b02      	cmp	r3, #2
 800226a:	d80c      	bhi.n	8002286 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6919      	ldr	r1, [r3, #16]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	1c5a      	adds	r2, r3, #1
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	440b      	add	r3, r1
 800227e:	461a      	mov	r2, r3
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	60da      	str	r2, [r3, #12]
 8002284:	e004      	b.n	8002290 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	461a      	mov	r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	3301      	adds	r3, #1
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2b03      	cmp	r3, #3
 800229a:	d9b3      	bls.n	8002204 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691a      	ldr	r2, [r3, #16]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022c6:	60da      	str	r2, [r3, #12]
}
 80022c8:	bf00      	nop
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b089      	sub	sp, #36	@ 0x24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80022e2:	2300      	movs	r3, #0
 80022e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80022e6:	2300      	movs	r3, #0
 80022e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80022ea:	2300      	movs	r3, #0
 80022ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
 80022f2:	e175      	b.n	80025e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80022f4:	2201      	movs	r2, #1
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	4013      	ands	r3, r2
 8002306:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	429a      	cmp	r2, r3
 800230e:	f040 8164 	bne.w	80025da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	2b01      	cmp	r3, #1
 800231c:	d005      	beq.n	800232a <HAL_GPIO_Init+0x56>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d130      	bne.n	800238c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	2203      	movs	r2, #3
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43db      	mvns	r3, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4013      	ands	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4313      	orrs	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002360:	2201      	movs	r2, #1
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	091b      	lsrs	r3, r3, #4
 8002376:	f003 0201 	and.w	r2, r3, #1
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	2b03      	cmp	r3, #3
 8002396:	d017      	beq.n	80023c8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	2203      	movs	r2, #3
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4013      	ands	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d123      	bne.n	800241c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	08da      	lsrs	r2, r3, #3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3208      	adds	r2, #8
 80023dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	220f      	movs	r2, #15
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	691a      	ldr	r2, [r3, #16]
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	08da      	lsrs	r2, r3, #3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3208      	adds	r2, #8
 8002416:	69b9      	ldr	r1, [r7, #24]
 8002418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	2203      	movs	r2, #3
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 0203 	and.w	r2, r3, #3
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 80be 	beq.w	80025da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245e:	4b66      	ldr	r3, [pc, #408]	@ (80025f8 <HAL_GPIO_Init+0x324>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002462:	4a65      	ldr	r2, [pc, #404]	@ (80025f8 <HAL_GPIO_Init+0x324>)
 8002464:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002468:	6453      	str	r3, [r2, #68]	@ 0x44
 800246a:	4b63      	ldr	r3, [pc, #396]	@ (80025f8 <HAL_GPIO_Init+0x324>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002476:	4a61      	ldr	r2, [pc, #388]	@ (80025fc <HAL_GPIO_Init+0x328>)
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	089b      	lsrs	r3, r3, #2
 800247c:	3302      	adds	r3, #2
 800247e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	220f      	movs	r2, #15
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43db      	mvns	r3, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4013      	ands	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a58      	ldr	r2, [pc, #352]	@ (8002600 <HAL_GPIO_Init+0x32c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d037      	beq.n	8002512 <HAL_GPIO_Init+0x23e>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a57      	ldr	r2, [pc, #348]	@ (8002604 <HAL_GPIO_Init+0x330>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d031      	beq.n	800250e <HAL_GPIO_Init+0x23a>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a56      	ldr	r2, [pc, #344]	@ (8002608 <HAL_GPIO_Init+0x334>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d02b      	beq.n	800250a <HAL_GPIO_Init+0x236>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a55      	ldr	r2, [pc, #340]	@ (800260c <HAL_GPIO_Init+0x338>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d025      	beq.n	8002506 <HAL_GPIO_Init+0x232>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a54      	ldr	r2, [pc, #336]	@ (8002610 <HAL_GPIO_Init+0x33c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d01f      	beq.n	8002502 <HAL_GPIO_Init+0x22e>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a53      	ldr	r2, [pc, #332]	@ (8002614 <HAL_GPIO_Init+0x340>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d019      	beq.n	80024fe <HAL_GPIO_Init+0x22a>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a52      	ldr	r2, [pc, #328]	@ (8002618 <HAL_GPIO_Init+0x344>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d013      	beq.n	80024fa <HAL_GPIO_Init+0x226>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a51      	ldr	r2, [pc, #324]	@ (800261c <HAL_GPIO_Init+0x348>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d00d      	beq.n	80024f6 <HAL_GPIO_Init+0x222>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a50      	ldr	r2, [pc, #320]	@ (8002620 <HAL_GPIO_Init+0x34c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d007      	beq.n	80024f2 <HAL_GPIO_Init+0x21e>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a4f      	ldr	r2, [pc, #316]	@ (8002624 <HAL_GPIO_Init+0x350>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d101      	bne.n	80024ee <HAL_GPIO_Init+0x21a>
 80024ea:	2309      	movs	r3, #9
 80024ec:	e012      	b.n	8002514 <HAL_GPIO_Init+0x240>
 80024ee:	230a      	movs	r3, #10
 80024f0:	e010      	b.n	8002514 <HAL_GPIO_Init+0x240>
 80024f2:	2308      	movs	r3, #8
 80024f4:	e00e      	b.n	8002514 <HAL_GPIO_Init+0x240>
 80024f6:	2307      	movs	r3, #7
 80024f8:	e00c      	b.n	8002514 <HAL_GPIO_Init+0x240>
 80024fa:	2306      	movs	r3, #6
 80024fc:	e00a      	b.n	8002514 <HAL_GPIO_Init+0x240>
 80024fe:	2305      	movs	r3, #5
 8002500:	e008      	b.n	8002514 <HAL_GPIO_Init+0x240>
 8002502:	2304      	movs	r3, #4
 8002504:	e006      	b.n	8002514 <HAL_GPIO_Init+0x240>
 8002506:	2303      	movs	r3, #3
 8002508:	e004      	b.n	8002514 <HAL_GPIO_Init+0x240>
 800250a:	2302      	movs	r3, #2
 800250c:	e002      	b.n	8002514 <HAL_GPIO_Init+0x240>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <HAL_GPIO_Init+0x240>
 8002512:	2300      	movs	r3, #0
 8002514:	69fa      	ldr	r2, [r7, #28]
 8002516:	f002 0203 	and.w	r2, r2, #3
 800251a:	0092      	lsls	r2, r2, #2
 800251c:	4093      	lsls	r3, r2
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002524:	4935      	ldr	r1, [pc, #212]	@ (80025fc <HAL_GPIO_Init+0x328>)
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	089b      	lsrs	r3, r3, #2
 800252a:	3302      	adds	r3, #2
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002532:	4b3d      	ldr	r3, [pc, #244]	@ (8002628 <HAL_GPIO_Init+0x354>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002556:	4a34      	ldr	r2, [pc, #208]	@ (8002628 <HAL_GPIO_Init+0x354>)
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800255c:	4b32      	ldr	r3, [pc, #200]	@ (8002628 <HAL_GPIO_Init+0x354>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002580:	4a29      	ldr	r2, [pc, #164]	@ (8002628 <HAL_GPIO_Init+0x354>)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002586:	4b28      	ldr	r3, [pc, #160]	@ (8002628 <HAL_GPIO_Init+0x354>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025aa:	4a1f      	ldr	r2, [pc, #124]	@ (8002628 <HAL_GPIO_Init+0x354>)
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002628 <HAL_GPIO_Init+0x354>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025d4:	4a14      	ldr	r2, [pc, #80]	@ (8002628 <HAL_GPIO_Init+0x354>)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	3301      	adds	r3, #1
 80025de:	61fb      	str	r3, [r7, #28]
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	2b0f      	cmp	r3, #15
 80025e4:	f67f ae86 	bls.w	80022f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80025e8:	bf00      	nop
 80025ea:	bf00      	nop
 80025ec:	3724      	adds	r7, #36	@ 0x24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40013800 	.word	0x40013800
 8002600:	40020000 	.word	0x40020000
 8002604:	40020400 	.word	0x40020400
 8002608:	40020800 	.word	0x40020800
 800260c:	40020c00 	.word	0x40020c00
 8002610:	40021000 	.word	0x40021000
 8002614:	40021400 	.word	0x40021400
 8002618:	40021800 	.word	0x40021800
 800261c:	40021c00 	.word	0x40021c00
 8002620:	40022000 	.word	0x40022000
 8002624:	40022400 	.word	0x40022400
 8002628:	40013c00 	.word	0x40013c00

0800262c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	807b      	strh	r3, [r7, #2]
 8002638:	4613      	mov	r3, r2
 800263a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800263c:	787b      	ldrb	r3, [r7, #1]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002642:	887a      	ldrh	r2, [r7, #2]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002648:	e003      	b.n	8002652 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800264a:	887b      	ldrh	r3, [r7, #2]
 800264c:	041a      	lsls	r2, r3, #16
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	619a      	str	r2, [r3, #24]
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b086      	sub	sp, #24
 8002662:	af02      	add	r7, sp, #8
 8002664:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e108      	b.n	8002882 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d106      	bne.n	8002690 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7fe fbc6 	bl	8000e1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2203      	movs	r2, #3
 8002694:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800269e:	d102      	bne.n	80026a6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f002 fe24 	bl	80052f8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6818      	ldr	r0, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	7c1a      	ldrb	r2, [r3, #16]
 80026b8:	f88d 2000 	strb.w	r2, [sp]
 80026bc:	3304      	adds	r3, #4
 80026be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026c0:	f002 fdc0 	bl	8005244 <USB_CoreInit>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d005      	beq.n	80026d6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2202      	movs	r2, #2
 80026ce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e0d5      	b.n	8002882 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2100      	movs	r1, #0
 80026dc:	4618      	mov	r0, r3
 80026de:	f002 fe1c 	bl	800531a <USB_SetCurrentMode>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d005      	beq.n	80026f4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0c6      	b.n	8002882 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026f4:	2300      	movs	r3, #0
 80026f6:	73fb      	strb	r3, [r7, #15]
 80026f8:	e04a      	b.n	8002790 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026fa:	7bfa      	ldrb	r2, [r7, #15]
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	4413      	add	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	440b      	add	r3, r1
 8002708:	3315      	adds	r3, #21
 800270a:	2201      	movs	r2, #1
 800270c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800270e:	7bfa      	ldrb	r2, [r7, #15]
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	4413      	add	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	440b      	add	r3, r1
 800271c:	3314      	adds	r3, #20
 800271e:	7bfa      	ldrb	r2, [r7, #15]
 8002720:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002722:	7bfa      	ldrb	r2, [r7, #15]
 8002724:	7bfb      	ldrb	r3, [r7, #15]
 8002726:	b298      	uxth	r0, r3
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	4413      	add	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	440b      	add	r3, r1
 8002734:	332e      	adds	r3, #46	@ 0x2e
 8002736:	4602      	mov	r2, r0
 8002738:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800273a:	7bfa      	ldrb	r2, [r7, #15]
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	4613      	mov	r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4413      	add	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	440b      	add	r3, r1
 8002748:	3318      	adds	r3, #24
 800274a:	2200      	movs	r2, #0
 800274c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800274e:	7bfa      	ldrb	r2, [r7, #15]
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	4413      	add	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	440b      	add	r3, r1
 800275c:	331c      	adds	r3, #28
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002762:	7bfa      	ldrb	r2, [r7, #15]
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	4613      	mov	r3, r2
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	4413      	add	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	440b      	add	r3, r1
 8002770:	3320      	adds	r3, #32
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002776:	7bfa      	ldrb	r2, [r7, #15]
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	4413      	add	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	3324      	adds	r3, #36	@ 0x24
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800278a:	7bfb      	ldrb	r3, [r7, #15]
 800278c:	3301      	adds	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	791b      	ldrb	r3, [r3, #4]
 8002794:	7bfa      	ldrb	r2, [r7, #15]
 8002796:	429a      	cmp	r2, r3
 8002798:	d3af      	bcc.n	80026fa <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800279a:	2300      	movs	r3, #0
 800279c:	73fb      	strb	r3, [r7, #15]
 800279e:	e044      	b.n	800282a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027a0:	7bfa      	ldrb	r2, [r7, #15]
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	4613      	mov	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	4413      	add	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80027b2:	2200      	movs	r2, #0
 80027b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027b6:	7bfa      	ldrb	r2, [r7, #15]
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4413      	add	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	440b      	add	r3, r1
 80027c4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80027c8:	7bfa      	ldrb	r2, [r7, #15]
 80027ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027cc:	7bfa      	ldrb	r2, [r7, #15]
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	4613      	mov	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	4413      	add	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80027de:	2200      	movs	r2, #0
 80027e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027e2:	7bfa      	ldrb	r2, [r7, #15]
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	4413      	add	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	440b      	add	r3, r1
 80027f0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027f8:	7bfa      	ldrb	r2, [r7, #15]
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4413      	add	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800280e:	7bfa      	ldrb	r2, [r7, #15]
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	4613      	mov	r3, r2
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	4413      	add	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	440b      	add	r3, r1
 800281c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	3301      	adds	r3, #1
 8002828:	73fb      	strb	r3, [r7, #15]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	791b      	ldrb	r3, [r3, #4]
 800282e:	7bfa      	ldrb	r2, [r7, #15]
 8002830:	429a      	cmp	r2, r3
 8002832:	d3b5      	bcc.n	80027a0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6818      	ldr	r0, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	7c1a      	ldrb	r2, [r3, #16]
 800283c:	f88d 2000 	strb.w	r2, [sp]
 8002840:	3304      	adds	r3, #4
 8002842:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002844:	f002 fdb6 	bl	80053b4 <USB_DevInit>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d005      	beq.n	800285a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2202      	movs	r2, #2
 8002852:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e013      	b.n	8002882 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	7b1b      	ldrb	r3, [r3, #12]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d102      	bne.n	8002876 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f80b 	bl	800288c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f002 ff71 	bl	8005762 <USB_DevDisconnect>

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80028ba:	4b05      	ldr	r3, [pc, #20]	@ (80028d0 <HAL_PCDEx_ActivateLPM+0x44>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	10000003 	.word	0x10000003

080028d4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028d8:	4b05      	ldr	r3, [pc, #20]	@ (80028f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a04      	ldr	r2, [pc, #16]	@ (80028f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028e2:	6013      	str	r3, [r2, #0]
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40007000 	.word	0x40007000

080028f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80028fa:	2300      	movs	r3, #0
 80028fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80028fe:	4b23      	ldr	r3, [pc, #140]	@ (800298c <HAL_PWREx_EnableOverDrive+0x98>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002902:	4a22      	ldr	r2, [pc, #136]	@ (800298c <HAL_PWREx_EnableOverDrive+0x98>)
 8002904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002908:	6413      	str	r3, [r2, #64]	@ 0x40
 800290a:	4b20      	ldr	r3, [pc, #128]	@ (800298c <HAL_PWREx_EnableOverDrive+0x98>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002912:	603b      	str	r3, [r7, #0]
 8002914:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002916:	4b1e      	ldr	r3, [pc, #120]	@ (8002990 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a1d      	ldr	r2, [pc, #116]	@ (8002990 <HAL_PWREx_EnableOverDrive+0x9c>)
 800291c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002920:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002922:	f7fe fbbb 	bl	800109c <HAL_GetTick>
 8002926:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002928:	e009      	b.n	800293e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800292a:	f7fe fbb7 	bl	800109c <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002938:	d901      	bls.n	800293e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e022      	b.n	8002984 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800293e:	4b14      	ldr	r3, [pc, #80]	@ (8002990 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002946:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800294a:	d1ee      	bne.n	800292a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800294c:	4b10      	ldr	r3, [pc, #64]	@ (8002990 <HAL_PWREx_EnableOverDrive+0x9c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a0f      	ldr	r2, [pc, #60]	@ (8002990 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002952:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002956:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002958:	f7fe fba0 	bl	800109c <HAL_GetTick>
 800295c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800295e:	e009      	b.n	8002974 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002960:	f7fe fb9c 	bl	800109c <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800296e:	d901      	bls.n	8002974 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e007      	b.n	8002984 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002974:	4b06      	ldr	r3, [pc, #24]	@ (8002990 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002980:	d1ee      	bne.n	8002960 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40023800 	.word	0x40023800
 8002990:	40007000 	.word	0x40007000

08002994 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800299c:	2300      	movs	r3, #0
 800299e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e29b      	b.n	8002ee2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 8087 	beq.w	8002ac6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029b8:	4b96      	ldr	r3, [pc, #600]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 030c 	and.w	r3, r3, #12
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d00c      	beq.n	80029de <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029c4:	4b93      	ldr	r3, [pc, #588]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 030c 	and.w	r3, r3, #12
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d112      	bne.n	80029f6 <HAL_RCC_OscConfig+0x62>
 80029d0:	4b90      	ldr	r3, [pc, #576]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029dc:	d10b      	bne.n	80029f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029de:	4b8d      	ldr	r3, [pc, #564]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d06c      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x130>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d168      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e275      	b.n	8002ee2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029fe:	d106      	bne.n	8002a0e <HAL_RCC_OscConfig+0x7a>
 8002a00:	4b84      	ldr	r3, [pc, #528]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a83      	ldr	r2, [pc, #524]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 8002a06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a0a:	6013      	str	r3, [r2, #0]
 8002a0c:	e02e      	b.n	8002a6c <HAL_RCC_OscConfig+0xd8>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10c      	bne.n	8002a30 <HAL_RCC_OscConfig+0x9c>
 8002a16:	4b7f      	ldr	r3, [pc, #508]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a7e      	ldr	r2, [pc, #504]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 8002a1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	4b7c      	ldr	r3, [pc, #496]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a7b      	ldr	r2, [pc, #492]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 8002a28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	e01d      	b.n	8002a6c <HAL_RCC_OscConfig+0xd8>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a38:	d10c      	bne.n	8002a54 <HAL_RCC_OscConfig+0xc0>
 8002a3a:	4b76      	ldr	r3, [pc, #472]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a75      	ldr	r2, [pc, #468]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 8002a40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	4b73      	ldr	r3, [pc, #460]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a72      	ldr	r2, [pc, #456]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 8002a4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	e00b      	b.n	8002a6c <HAL_RCC_OscConfig+0xd8>
 8002a54:	4b6f      	ldr	r3, [pc, #444]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a6e      	ldr	r2, [pc, #440]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 8002a5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a5e:	6013      	str	r3, [r2, #0]
 8002a60:	4b6c      	ldr	r3, [pc, #432]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a6b      	ldr	r2, [pc, #428]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 8002a66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d013      	beq.n	8002a9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a74:	f7fe fb12 	bl	800109c <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a7c:	f7fe fb0e 	bl	800109c <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b64      	cmp	r3, #100	@ 0x64
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e229      	b.n	8002ee2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8e:	4b61      	ldr	r3, [pc, #388]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f0      	beq.n	8002a7c <HAL_RCC_OscConfig+0xe8>
 8002a9a:	e014      	b.n	8002ac6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9c:	f7fe fafe 	bl	800109c <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa4:	f7fe fafa 	bl	800109c <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b64      	cmp	r3, #100	@ 0x64
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e215      	b.n	8002ee2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab6:	4b57      	ldr	r3, [pc, #348]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x110>
 8002ac2:	e000      	b.n	8002ac6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d069      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ad2:	4b50      	ldr	r3, [pc, #320]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00b      	beq.n	8002af6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ade:	4b4d      	ldr	r3, [pc, #308]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d11c      	bne.n	8002b24 <HAL_RCC_OscConfig+0x190>
 8002aea:	4b4a      	ldr	r3, [pc, #296]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d116      	bne.n	8002b24 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af6:	4b47      	ldr	r3, [pc, #284]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d005      	beq.n	8002b0e <HAL_RCC_OscConfig+0x17a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d001      	beq.n	8002b0e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e1e9      	b.n	8002ee2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0e:	4b41      	ldr	r3, [pc, #260]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	493d      	ldr	r1, [pc, #244]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b22:	e040      	b.n	8002ba6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d023      	beq.n	8002b74 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b2c:	4b39      	ldr	r3, [pc, #228]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a38      	ldr	r2, [pc, #224]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b38:	f7fe fab0 	bl	800109c <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b40:	f7fe faac 	bl	800109c <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e1c7      	b.n	8002ee2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b52:	4b30      	ldr	r3, [pc, #192]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b5e:	4b2d      	ldr	r3, [pc, #180]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	4929      	ldr	r1, [pc, #164]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	600b      	str	r3, [r1, #0]
 8002b72:	e018      	b.n	8002ba6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b74:	4b27      	ldr	r3, [pc, #156]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a26      	ldr	r2, [pc, #152]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 8002b7a:	f023 0301 	bic.w	r3, r3, #1
 8002b7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b80:	f7fe fa8c 	bl	800109c <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b88:	f7fe fa88 	bl	800109c <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e1a3      	b.n	8002ee2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f0      	bne.n	8002b88 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d038      	beq.n	8002c24 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d019      	beq.n	8002bee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bba:	4b16      	ldr	r3, [pc, #88]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 8002bbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bbe:	4a15      	ldr	r2, [pc, #84]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 8002bc0:	f043 0301 	orr.w	r3, r3, #1
 8002bc4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc6:	f7fe fa69 	bl	800109c <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bce:	f7fe fa65 	bl	800109c <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e180      	b.n	8002ee2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be0:	4b0c      	ldr	r3, [pc, #48]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 8002be2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f0      	beq.n	8002bce <HAL_RCC_OscConfig+0x23a>
 8002bec:	e01a      	b.n	8002c24 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bee:	4b09      	ldr	r3, [pc, #36]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 8002bf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bf2:	4a08      	ldr	r2, [pc, #32]	@ (8002c14 <HAL_RCC_OscConfig+0x280>)
 8002bf4:	f023 0301 	bic.w	r3, r3, #1
 8002bf8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bfa:	f7fe fa4f 	bl	800109c <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c00:	e00a      	b.n	8002c18 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c02:	f7fe fa4b 	bl	800109c <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d903      	bls.n	8002c18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e166      	b.n	8002ee2 <HAL_RCC_OscConfig+0x54e>
 8002c14:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c18:	4b92      	ldr	r3, [pc, #584]	@ (8002e64 <HAL_RCC_OscConfig+0x4d0>)
 8002c1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1ee      	bne.n	8002c02 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 80a4 	beq.w	8002d7a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c32:	4b8c      	ldr	r3, [pc, #560]	@ (8002e64 <HAL_RCC_OscConfig+0x4d0>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10d      	bne.n	8002c5a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c3e:	4b89      	ldr	r3, [pc, #548]	@ (8002e64 <HAL_RCC_OscConfig+0x4d0>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c42:	4a88      	ldr	r2, [pc, #544]	@ (8002e64 <HAL_RCC_OscConfig+0x4d0>)
 8002c44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c4a:	4b86      	ldr	r3, [pc, #536]	@ (8002e64 <HAL_RCC_OscConfig+0x4d0>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c52:	60bb      	str	r3, [r7, #8]
 8002c54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c56:	2301      	movs	r3, #1
 8002c58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c5a:	4b83      	ldr	r3, [pc, #524]	@ (8002e68 <HAL_RCC_OscConfig+0x4d4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d118      	bne.n	8002c98 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002c66:	4b80      	ldr	r3, [pc, #512]	@ (8002e68 <HAL_RCC_OscConfig+0x4d4>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a7f      	ldr	r2, [pc, #508]	@ (8002e68 <HAL_RCC_OscConfig+0x4d4>)
 8002c6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c72:	f7fe fa13 	bl	800109c <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c78:	e008      	b.n	8002c8c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c7a:	f7fe fa0f 	bl	800109c <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b64      	cmp	r3, #100	@ 0x64
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e12a      	b.n	8002ee2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c8c:	4b76      	ldr	r3, [pc, #472]	@ (8002e68 <HAL_RCC_OscConfig+0x4d4>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d0f0      	beq.n	8002c7a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d106      	bne.n	8002cae <HAL_RCC_OscConfig+0x31a>
 8002ca0:	4b70      	ldr	r3, [pc, #448]	@ (8002e64 <HAL_RCC_OscConfig+0x4d0>)
 8002ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ca4:	4a6f      	ldr	r2, [pc, #444]	@ (8002e64 <HAL_RCC_OscConfig+0x4d0>)
 8002ca6:	f043 0301 	orr.w	r3, r3, #1
 8002caa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cac:	e02d      	b.n	8002d0a <HAL_RCC_OscConfig+0x376>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10c      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x33c>
 8002cb6:	4b6b      	ldr	r3, [pc, #428]	@ (8002e64 <HAL_RCC_OscConfig+0x4d0>)
 8002cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cba:	4a6a      	ldr	r2, [pc, #424]	@ (8002e64 <HAL_RCC_OscConfig+0x4d0>)
 8002cbc:	f023 0301 	bic.w	r3, r3, #1
 8002cc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cc2:	4b68      	ldr	r3, [pc, #416]	@ (8002e64 <HAL_RCC_OscConfig+0x4d0>)
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc6:	4a67      	ldr	r2, [pc, #412]	@ (8002e64 <HAL_RCC_OscConfig+0x4d0>)
 8002cc8:	f023 0304 	bic.w	r3, r3, #4
 8002ccc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cce:	e01c      	b.n	8002d0a <HAL_RCC_OscConfig+0x376>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	2b05      	cmp	r3, #5
 8002cd6:	d10c      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x35e>
 8002cd8:	4b62      	ldr	r3, [pc, #392]	@ (8002e64 <HAL_RCC_OscConfig+0x4d0>)
 8002cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cdc:	4a61      	ldr	r2, [pc, #388]	@ (8002e64 <HAL_RCC_OscConfig+0x4d0>)
 8002cde:	f043 0304 	orr.w	r3, r3, #4
 8002ce2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ce4:	4b5f      	ldr	r3, [pc, #380]	@ (8002e64 <HAL_RCC_OscConfig+0x4d0>)
 8002ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce8:	4a5e      	ldr	r2, [pc, #376]	@ (8002e64 <HAL_RCC_OscConfig+0x4d0>)
 8002cea:	f043 0301 	orr.w	r3, r3, #1
 8002cee:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cf0:	e00b      	b.n	8002d0a <HAL_RCC_OscConfig+0x376>
 8002cf2:	4b5c      	ldr	r3, [pc, #368]	@ (8002e64 <HAL_RCC_OscConfig+0x4d0>)
 8002cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf6:	4a5b      	ldr	r2, [pc, #364]	@ (8002e64 <HAL_RCC_OscConfig+0x4d0>)
 8002cf8:	f023 0301 	bic.w	r3, r3, #1
 8002cfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cfe:	4b59      	ldr	r3, [pc, #356]	@ (8002e64 <HAL_RCC_OscConfig+0x4d0>)
 8002d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d02:	4a58      	ldr	r2, [pc, #352]	@ (8002e64 <HAL_RCC_OscConfig+0x4d0>)
 8002d04:	f023 0304 	bic.w	r3, r3, #4
 8002d08:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d015      	beq.n	8002d3e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d12:	f7fe f9c3 	bl	800109c <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d18:	e00a      	b.n	8002d30 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d1a:	f7fe f9bf 	bl	800109c <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e0d8      	b.n	8002ee2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d30:	4b4c      	ldr	r3, [pc, #304]	@ (8002e64 <HAL_RCC_OscConfig+0x4d0>)
 8002d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0ee      	beq.n	8002d1a <HAL_RCC_OscConfig+0x386>
 8002d3c:	e014      	b.n	8002d68 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d3e:	f7fe f9ad 	bl	800109c <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d44:	e00a      	b.n	8002d5c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d46:	f7fe f9a9 	bl	800109c <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e0c2      	b.n	8002ee2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d5c:	4b41      	ldr	r3, [pc, #260]	@ (8002e64 <HAL_RCC_OscConfig+0x4d0>)
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1ee      	bne.n	8002d46 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d68:	7dfb      	ldrb	r3, [r7, #23]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d105      	bne.n	8002d7a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d6e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e64 <HAL_RCC_OscConfig+0x4d0>)
 8002d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d72:	4a3c      	ldr	r2, [pc, #240]	@ (8002e64 <HAL_RCC_OscConfig+0x4d0>)
 8002d74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d78:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 80ae 	beq.w	8002ee0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d84:	4b37      	ldr	r3, [pc, #220]	@ (8002e64 <HAL_RCC_OscConfig+0x4d0>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 030c 	and.w	r3, r3, #12
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d06d      	beq.n	8002e6c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d14b      	bne.n	8002e30 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d98:	4b32      	ldr	r3, [pc, #200]	@ (8002e64 <HAL_RCC_OscConfig+0x4d0>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a31      	ldr	r2, [pc, #196]	@ (8002e64 <HAL_RCC_OscConfig+0x4d0>)
 8002d9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da4:	f7fe f97a 	bl	800109c <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dac:	f7fe f976 	bl	800109c <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e091      	b.n	8002ee2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dbe:	4b29      	ldr	r3, [pc, #164]	@ (8002e64 <HAL_RCC_OscConfig+0x4d0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f0      	bne.n	8002dac <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69da      	ldr	r2, [r3, #28]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd8:	019b      	lsls	r3, r3, #6
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de0:	085b      	lsrs	r3, r3, #1
 8002de2:	3b01      	subs	r3, #1
 8002de4:	041b      	lsls	r3, r3, #16
 8002de6:	431a      	orrs	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dec:	061b      	lsls	r3, r3, #24
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df4:	071b      	lsls	r3, r3, #28
 8002df6:	491b      	ldr	r1, [pc, #108]	@ (8002e64 <HAL_RCC_OscConfig+0x4d0>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dfc:	4b19      	ldr	r3, [pc, #100]	@ (8002e64 <HAL_RCC_OscConfig+0x4d0>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a18      	ldr	r2, [pc, #96]	@ (8002e64 <HAL_RCC_OscConfig+0x4d0>)
 8002e02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e08:	f7fe f948 	bl	800109c <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e10:	f7fe f944 	bl	800109c <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e05f      	b.n	8002ee2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e22:	4b10      	ldr	r3, [pc, #64]	@ (8002e64 <HAL_RCC_OscConfig+0x4d0>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0f0      	beq.n	8002e10 <HAL_RCC_OscConfig+0x47c>
 8002e2e:	e057      	b.n	8002ee0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e30:	4b0c      	ldr	r3, [pc, #48]	@ (8002e64 <HAL_RCC_OscConfig+0x4d0>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a0b      	ldr	r2, [pc, #44]	@ (8002e64 <HAL_RCC_OscConfig+0x4d0>)
 8002e36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3c:	f7fe f92e 	bl	800109c <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e44:	f7fe f92a 	bl	800109c <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e045      	b.n	8002ee2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e56:	4b03      	ldr	r3, [pc, #12]	@ (8002e64 <HAL_RCC_OscConfig+0x4d0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f0      	bne.n	8002e44 <HAL_RCC_OscConfig+0x4b0>
 8002e62:	e03d      	b.n	8002ee0 <HAL_RCC_OscConfig+0x54c>
 8002e64:	40023800 	.word	0x40023800
 8002e68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002e6c:	4b1f      	ldr	r3, [pc, #124]	@ (8002eec <HAL_RCC_OscConfig+0x558>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d030      	beq.n	8002edc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d129      	bne.n	8002edc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d122      	bne.n	8002edc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ea2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d119      	bne.n	8002edc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb2:	085b      	lsrs	r3, r3, #1
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d10f      	bne.n	8002edc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d107      	bne.n	8002edc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d001      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e000      	b.n	8002ee2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40023800 	.word	0x40023800

08002ef0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002efa:	2300      	movs	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0d0      	b.n	80030aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f08:	4b6a      	ldr	r3, [pc, #424]	@ (80030b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 030f 	and.w	r3, r3, #15
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d910      	bls.n	8002f38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f16:	4b67      	ldr	r3, [pc, #412]	@ (80030b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f023 020f 	bic.w	r2, r3, #15
 8002f1e:	4965      	ldr	r1, [pc, #404]	@ (80030b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f26:	4b63      	ldr	r3, [pc, #396]	@ (80030b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d001      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0b8      	b.n	80030aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d020      	beq.n	8002f86 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d005      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f50:	4b59      	ldr	r3, [pc, #356]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	4a58      	ldr	r2, [pc, #352]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0308 	and.w	r3, r3, #8
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d005      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f68:	4b53      	ldr	r3, [pc, #332]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	4a52      	ldr	r2, [pc, #328]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f74:	4b50      	ldr	r3, [pc, #320]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	494d      	ldr	r1, [pc, #308]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d040      	beq.n	8003014 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d107      	bne.n	8002faa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9a:	4b47      	ldr	r3, [pc, #284]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d115      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e07f      	b.n	80030aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d107      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb2:	4b41      	ldr	r3, [pc, #260]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d109      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e073      	b.n	80030aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc2:	4b3d      	ldr	r3, [pc, #244]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e06b      	b.n	80030aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fd2:	4b39      	ldr	r3, [pc, #228]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f023 0203 	bic.w	r2, r3, #3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	4936      	ldr	r1, [pc, #216]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fe4:	f7fe f85a 	bl	800109c <HAL_GetTick>
 8002fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fea:	e00a      	b.n	8003002 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fec:	f7fe f856 	bl	800109c <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e053      	b.n	80030aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003002:	4b2d      	ldr	r3, [pc, #180]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 020c 	and.w	r2, r3, #12
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	429a      	cmp	r2, r3
 8003012:	d1eb      	bne.n	8002fec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003014:	4b27      	ldr	r3, [pc, #156]	@ (80030b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 030f 	and.w	r3, r3, #15
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d210      	bcs.n	8003044 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003022:	4b24      	ldr	r3, [pc, #144]	@ (80030b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 020f 	bic.w	r2, r3, #15
 800302a:	4922      	ldr	r1, [pc, #136]	@ (80030b4 <HAL_RCC_ClockConfig+0x1c4>)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	4313      	orrs	r3, r2
 8003030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003032:	4b20      	ldr	r3, [pc, #128]	@ (80030b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d001      	beq.n	8003044 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e032      	b.n	80030aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	d008      	beq.n	8003062 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003050:	4b19      	ldr	r3, [pc, #100]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	4916      	ldr	r1, [pc, #88]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 800305e:	4313      	orrs	r3, r2
 8003060:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	2b00      	cmp	r3, #0
 800306c:	d009      	beq.n	8003082 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800306e:	4b12      	ldr	r3, [pc, #72]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	490e      	ldr	r1, [pc, #56]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 800307e:	4313      	orrs	r3, r2
 8003080:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003082:	f000 f821 	bl	80030c8 <HAL_RCC_GetSysClockFreq>
 8003086:	4602      	mov	r2, r0
 8003088:	4b0b      	ldr	r3, [pc, #44]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	091b      	lsrs	r3, r3, #4
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	490a      	ldr	r1, [pc, #40]	@ (80030bc <HAL_RCC_ClockConfig+0x1cc>)
 8003094:	5ccb      	ldrb	r3, [r1, r3]
 8003096:	fa22 f303 	lsr.w	r3, r2, r3
 800309a:	4a09      	ldr	r2, [pc, #36]	@ (80030c0 <HAL_RCC_ClockConfig+0x1d0>)
 800309c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800309e:	4b09      	ldr	r3, [pc, #36]	@ (80030c4 <HAL_RCC_ClockConfig+0x1d4>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fd ffb6 	bl	8001014 <HAL_InitTick>

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40023c00 	.word	0x40023c00
 80030b8:	40023800 	.word	0x40023800
 80030bc:	08005894 	.word	0x08005894
 80030c0:	20000000 	.word	0x20000000
 80030c4:	20000004 	.word	0x20000004

080030c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030cc:	b094      	sub	sp, #80	@ 0x50
 80030ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80030d0:	2300      	movs	r3, #0
 80030d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80030d4:	2300      	movs	r3, #0
 80030d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030d8:	2300      	movs	r3, #0
 80030da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80030dc:	2300      	movs	r3, #0
 80030de:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030e0:	4b79      	ldr	r3, [pc, #484]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 030c 	and.w	r3, r3, #12
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d00d      	beq.n	8003108 <HAL_RCC_GetSysClockFreq+0x40>
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	f200 80e1 	bhi.w	80032b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d002      	beq.n	80030fc <HAL_RCC_GetSysClockFreq+0x34>
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d003      	beq.n	8003102 <HAL_RCC_GetSysClockFreq+0x3a>
 80030fa:	e0db      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030fc:	4b73      	ldr	r3, [pc, #460]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x204>)
 80030fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003100:	e0db      	b.n	80032ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003102:	4b73      	ldr	r3, [pc, #460]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003104:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003106:	e0d8      	b.n	80032ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003108:	4b6f      	ldr	r3, [pc, #444]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003110:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003112:	4b6d      	ldr	r3, [pc, #436]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d063      	beq.n	80031e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800311e:	4b6a      	ldr	r3, [pc, #424]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	099b      	lsrs	r3, r3, #6
 8003124:	2200      	movs	r2, #0
 8003126:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003128:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800312a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800312c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003130:	633b      	str	r3, [r7, #48]	@ 0x30
 8003132:	2300      	movs	r3, #0
 8003134:	637b      	str	r3, [r7, #52]	@ 0x34
 8003136:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800313a:	4622      	mov	r2, r4
 800313c:	462b      	mov	r3, r5
 800313e:	f04f 0000 	mov.w	r0, #0
 8003142:	f04f 0100 	mov.w	r1, #0
 8003146:	0159      	lsls	r1, r3, #5
 8003148:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800314c:	0150      	lsls	r0, r2, #5
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	4621      	mov	r1, r4
 8003154:	1a51      	subs	r1, r2, r1
 8003156:	6139      	str	r1, [r7, #16]
 8003158:	4629      	mov	r1, r5
 800315a:	eb63 0301 	sbc.w	r3, r3, r1
 800315e:	617b      	str	r3, [r7, #20]
 8003160:	f04f 0200 	mov.w	r2, #0
 8003164:	f04f 0300 	mov.w	r3, #0
 8003168:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800316c:	4659      	mov	r1, fp
 800316e:	018b      	lsls	r3, r1, #6
 8003170:	4651      	mov	r1, sl
 8003172:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003176:	4651      	mov	r1, sl
 8003178:	018a      	lsls	r2, r1, #6
 800317a:	4651      	mov	r1, sl
 800317c:	ebb2 0801 	subs.w	r8, r2, r1
 8003180:	4659      	mov	r1, fp
 8003182:	eb63 0901 	sbc.w	r9, r3, r1
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003192:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003196:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800319a:	4690      	mov	r8, r2
 800319c:	4699      	mov	r9, r3
 800319e:	4623      	mov	r3, r4
 80031a0:	eb18 0303 	adds.w	r3, r8, r3
 80031a4:	60bb      	str	r3, [r7, #8]
 80031a6:	462b      	mov	r3, r5
 80031a8:	eb49 0303 	adc.w	r3, r9, r3
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	f04f 0300 	mov.w	r3, #0
 80031b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031ba:	4629      	mov	r1, r5
 80031bc:	024b      	lsls	r3, r1, #9
 80031be:	4621      	mov	r1, r4
 80031c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031c4:	4621      	mov	r1, r4
 80031c6:	024a      	lsls	r2, r1, #9
 80031c8:	4610      	mov	r0, r2
 80031ca:	4619      	mov	r1, r3
 80031cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031ce:	2200      	movs	r2, #0
 80031d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80031d8:	f7fd f82e 	bl	8000238 <__aeabi_uldivmod>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4613      	mov	r3, r2
 80031e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031e4:	e058      	b.n	8003298 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031e6:	4b38      	ldr	r3, [pc, #224]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	099b      	lsrs	r3, r3, #6
 80031ec:	2200      	movs	r2, #0
 80031ee:	4618      	mov	r0, r3
 80031f0:	4611      	mov	r1, r2
 80031f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031f6:	623b      	str	r3, [r7, #32]
 80031f8:	2300      	movs	r3, #0
 80031fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80031fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003200:	4642      	mov	r2, r8
 8003202:	464b      	mov	r3, r9
 8003204:	f04f 0000 	mov.w	r0, #0
 8003208:	f04f 0100 	mov.w	r1, #0
 800320c:	0159      	lsls	r1, r3, #5
 800320e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003212:	0150      	lsls	r0, r2, #5
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	4641      	mov	r1, r8
 800321a:	ebb2 0a01 	subs.w	sl, r2, r1
 800321e:	4649      	mov	r1, r9
 8003220:	eb63 0b01 	sbc.w	fp, r3, r1
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003230:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003234:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003238:	ebb2 040a 	subs.w	r4, r2, sl
 800323c:	eb63 050b 	sbc.w	r5, r3, fp
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	00eb      	lsls	r3, r5, #3
 800324a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800324e:	00e2      	lsls	r2, r4, #3
 8003250:	4614      	mov	r4, r2
 8003252:	461d      	mov	r5, r3
 8003254:	4643      	mov	r3, r8
 8003256:	18e3      	adds	r3, r4, r3
 8003258:	603b      	str	r3, [r7, #0]
 800325a:	464b      	mov	r3, r9
 800325c:	eb45 0303 	adc.w	r3, r5, r3
 8003260:	607b      	str	r3, [r7, #4]
 8003262:	f04f 0200 	mov.w	r2, #0
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800326e:	4629      	mov	r1, r5
 8003270:	028b      	lsls	r3, r1, #10
 8003272:	4621      	mov	r1, r4
 8003274:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003278:	4621      	mov	r1, r4
 800327a:	028a      	lsls	r2, r1, #10
 800327c:	4610      	mov	r0, r2
 800327e:	4619      	mov	r1, r3
 8003280:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003282:	2200      	movs	r2, #0
 8003284:	61bb      	str	r3, [r7, #24]
 8003286:	61fa      	str	r2, [r7, #28]
 8003288:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800328c:	f7fc ffd4 	bl	8000238 <__aeabi_uldivmod>
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	4613      	mov	r3, r2
 8003296:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003298:	4b0b      	ldr	r3, [pc, #44]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	0c1b      	lsrs	r3, r3, #16
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	3301      	adds	r3, #1
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80032a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80032aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032b2:	e002      	b.n	80032ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032b4:	4b05      	ldr	r3, [pc, #20]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x204>)
 80032b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3750      	adds	r7, #80	@ 0x50
 80032c0:	46bd      	mov	sp, r7
 80032c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032c6:	bf00      	nop
 80032c8:	40023800 	.word	0x40023800
 80032cc:	00f42400 	.word	0x00f42400
 80032d0:	007a1200 	.word	0x007a1200

080032d4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032d8:	4b03      	ldr	r3, [pc, #12]	@ (80032e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80032da:	681b      	ldr	r3, [r3, #0]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	20000000 	.word	0x20000000

080032ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032f0:	f7ff fff0 	bl	80032d4 <HAL_RCC_GetHCLKFreq>
 80032f4:	4602      	mov	r2, r0
 80032f6:	4b05      	ldr	r3, [pc, #20]	@ (800330c <HAL_RCC_GetPCLK1Freq+0x20>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	0a9b      	lsrs	r3, r3, #10
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	4903      	ldr	r1, [pc, #12]	@ (8003310 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003302:	5ccb      	ldrb	r3, [r1, r3]
 8003304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003308:	4618      	mov	r0, r3
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40023800 	.word	0x40023800
 8003310:	080058a4 	.word	0x080058a4

08003314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003318:	f7ff ffdc 	bl	80032d4 <HAL_RCC_GetHCLKFreq>
 800331c:	4602      	mov	r2, r0
 800331e:	4b05      	ldr	r3, [pc, #20]	@ (8003334 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	0b5b      	lsrs	r3, r3, #13
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	4903      	ldr	r1, [pc, #12]	@ (8003338 <HAL_RCC_GetPCLK2Freq+0x24>)
 800332a:	5ccb      	ldrb	r3, [r1, r3]
 800332c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003330:	4618      	mov	r0, r3
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40023800 	.word	0x40023800
 8003338:	080058a4 	.word	0x080058a4

0800333c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003344:	2300      	movs	r3, #0
 8003346:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003348:	2300      	movs	r3, #0
 800334a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800334c:	2300      	movs	r3, #0
 800334e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003350:	2300      	movs	r3, #0
 8003352:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003354:	2300      	movs	r3, #0
 8003356:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b00      	cmp	r3, #0
 8003362:	d012      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003364:	4b69      	ldr	r3, [pc, #420]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	4a68      	ldr	r2, [pc, #416]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800336a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800336e:	6093      	str	r3, [r2, #8]
 8003370:	4b66      	ldr	r3, [pc, #408]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003378:	4964      	ldr	r1, [pc, #400]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800337a:	4313      	orrs	r3, r2
 800337c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003386:	2301      	movs	r3, #1
 8003388:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d017      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003396:	4b5d      	ldr	r3, [pc, #372]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003398:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800339c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a4:	4959      	ldr	r1, [pc, #356]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033b4:	d101      	bne.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80033b6:	2301      	movs	r3, #1
 80033b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80033c2:	2301      	movs	r3, #1
 80033c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d017      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033d2:	4b4e      	ldr	r3, [pc, #312]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033d8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e0:	494a      	ldr	r1, [pc, #296]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033f0:	d101      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80033f2:	2301      	movs	r3, #1
 80033f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80033fe:	2301      	movs	r3, #1
 8003400:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800340e:	2301      	movs	r3, #1
 8003410:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0320 	and.w	r3, r3, #32
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 808b 	beq.w	8003536 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003420:	4b3a      	ldr	r3, [pc, #232]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003424:	4a39      	ldr	r2, [pc, #228]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003426:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800342a:	6413      	str	r3, [r2, #64]	@ 0x40
 800342c:	4b37      	ldr	r3, [pc, #220]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800342e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003430:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003438:	4b35      	ldr	r3, [pc, #212]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a34      	ldr	r2, [pc, #208]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800343e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003442:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003444:	f7fd fe2a 	bl	800109c <HAL_GetTick>
 8003448:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800344a:	e008      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800344c:	f7fd fe26 	bl	800109c <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b64      	cmp	r3, #100	@ 0x64
 8003458:	d901      	bls.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e38f      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800345e:	4b2c      	ldr	r3, [pc, #176]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0f0      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800346a:	4b28      	ldr	r3, [pc, #160]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800346c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800346e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003472:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d035      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	429a      	cmp	r2, r3
 8003486:	d02e      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003488:	4b20      	ldr	r3, [pc, #128]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800348c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003490:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003492:	4b1e      	ldr	r3, [pc, #120]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003496:	4a1d      	ldr	r2, [pc, #116]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003498:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800349c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800349e:	4b1b      	ldr	r3, [pc, #108]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034a2:	4a1a      	ldr	r2, [pc, #104]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034a8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80034aa:	4a18      	ldr	r2, [pc, #96]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80034b0:	4b16      	ldr	r3, [pc, #88]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d114      	bne.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034bc:	f7fd fdee 	bl	800109c <HAL_GetTick>
 80034c0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c2:	e00a      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034c4:	f7fd fdea 	bl	800109c <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d901      	bls.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e351      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034da:	4b0c      	ldr	r3, [pc, #48]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d0ee      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034f2:	d111      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80034f4:	4b05      	ldr	r3, [pc, #20]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003500:	4b04      	ldr	r3, [pc, #16]	@ (8003514 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003502:	400b      	ands	r3, r1
 8003504:	4901      	ldr	r1, [pc, #4]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003506:	4313      	orrs	r3, r2
 8003508:	608b      	str	r3, [r1, #8]
 800350a:	e00b      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800350c:	40023800 	.word	0x40023800
 8003510:	40007000 	.word	0x40007000
 8003514:	0ffffcff 	.word	0x0ffffcff
 8003518:	4bac      	ldr	r3, [pc, #688]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	4aab      	ldr	r2, [pc, #684]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800351e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003522:	6093      	str	r3, [r2, #8]
 8003524:	4ba9      	ldr	r3, [pc, #676]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003526:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003530:	49a6      	ldr	r1, [pc, #664]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003532:	4313      	orrs	r3, r2
 8003534:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0310 	and.w	r3, r3, #16
 800353e:	2b00      	cmp	r3, #0
 8003540:	d010      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003542:	4ba2      	ldr	r3, [pc, #648]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003544:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003548:	4aa0      	ldr	r2, [pc, #640]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800354a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800354e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003552:	4b9e      	ldr	r3, [pc, #632]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003554:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800355c:	499b      	ldr	r1, [pc, #620]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00a      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003570:	4b96      	ldr	r3, [pc, #600]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003576:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800357e:	4993      	ldr	r1, [pc, #588]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003592:	4b8e      	ldr	r3, [pc, #568]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003598:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035a0:	498a      	ldr	r1, [pc, #552]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00a      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035b4:	4b85      	ldr	r3, [pc, #532]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035c2:	4982      	ldr	r1, [pc, #520]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00a      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035d6:	4b7d      	ldr	r3, [pc, #500]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035dc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e4:	4979      	ldr	r1, [pc, #484]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00a      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035f8:	4b74      	ldr	r3, [pc, #464]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035fe:	f023 0203 	bic.w	r2, r3, #3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003606:	4971      	ldr	r1, [pc, #452]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003608:	4313      	orrs	r3, r2
 800360a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00a      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800361a:	4b6c      	ldr	r3, [pc, #432]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800361c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003620:	f023 020c 	bic.w	r2, r3, #12
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003628:	4968      	ldr	r1, [pc, #416]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800362a:	4313      	orrs	r3, r2
 800362c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00a      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800363c:	4b63      	ldr	r3, [pc, #396]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800363e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003642:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800364a:	4960      	ldr	r1, [pc, #384]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800364c:	4313      	orrs	r3, r2
 800364e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00a      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800365e:	4b5b      	ldr	r3, [pc, #364]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003664:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800366c:	4957      	ldr	r1, [pc, #348]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800366e:	4313      	orrs	r3, r2
 8003670:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00a      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003680:	4b52      	ldr	r3, [pc, #328]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003686:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800368e:	494f      	ldr	r1, [pc, #316]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003690:	4313      	orrs	r3, r2
 8003692:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80036a2:	4b4a      	ldr	r3, [pc, #296]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036a8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036b0:	4946      	ldr	r1, [pc, #280]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00a      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80036c4:	4b41      	ldr	r3, [pc, #260]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ca:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d2:	493e      	ldr	r1, [pc, #248]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80036e6:	4b39      	ldr	r3, [pc, #228]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f4:	4935      	ldr	r1, [pc, #212]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00a      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003708:	4b30      	ldr	r3, [pc, #192]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800370a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800370e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003716:	492d      	ldr	r1, [pc, #180]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003718:	4313      	orrs	r3, r2
 800371a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d011      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800372a:	4b28      	ldr	r3, [pc, #160]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800372c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003730:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003738:	4924      	ldr	r1, [pc, #144]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800373a:	4313      	orrs	r3, r2
 800373c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003744:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003748:	d101      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800374a:	2301      	movs	r3, #1
 800374c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0308 	and.w	r3, r3, #8
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800375a:	2301      	movs	r3, #1
 800375c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00a      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800376a:	4b18      	ldr	r3, [pc, #96]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800376c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003770:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003778:	4914      	ldr	r1, [pc, #80]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800377a:	4313      	orrs	r3, r2
 800377c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00b      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800378c:	4b0f      	ldr	r3, [pc, #60]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800378e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003792:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800379c:	490b      	ldr	r1, [pc, #44]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00f      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80037b0:	4b06      	ldr	r3, [pc, #24]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037b6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037c0:	4902      	ldr	r1, [pc, #8]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80037c8:	e002      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80037ca:	bf00      	nop
 80037cc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00b      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037dc:	4b8a      	ldr	r3, [pc, #552]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037e2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ec:	4986      	ldr	r1, [pc, #536]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00b      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003800:	4b81      	ldr	r3, [pc, #516]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003802:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003806:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003810:	497d      	ldr	r1, [pc, #500]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d006      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 80d6 	beq.w	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800382c:	4b76      	ldr	r3, [pc, #472]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a75      	ldr	r2, [pc, #468]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003832:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003836:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003838:	f7fd fc30 	bl	800109c <HAL_GetTick>
 800383c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800383e:	e008      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003840:	f7fd fc2c 	bl	800109c <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b64      	cmp	r3, #100	@ 0x64
 800384c:	d901      	bls.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e195      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003852:	4b6d      	ldr	r3, [pc, #436]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1f0      	bne.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d021      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x572>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800386e:	2b00      	cmp	r3, #0
 8003870:	d11d      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003872:	4b65      	ldr	r3, [pc, #404]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003874:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003878:	0c1b      	lsrs	r3, r3, #16
 800387a:	f003 0303 	and.w	r3, r3, #3
 800387e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003880:	4b61      	ldr	r3, [pc, #388]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003882:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003886:	0e1b      	lsrs	r3, r3, #24
 8003888:	f003 030f 	and.w	r3, r3, #15
 800388c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	019a      	lsls	r2, r3, #6
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	041b      	lsls	r3, r3, #16
 8003898:	431a      	orrs	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	061b      	lsls	r3, r3, #24
 800389e:	431a      	orrs	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	071b      	lsls	r3, r3, #28
 80038a6:	4958      	ldr	r1, [pc, #352]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d004      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038c2:	d00a      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d02e      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038d8:	d129      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038da:	4b4b      	ldr	r3, [pc, #300]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038e0:	0c1b      	lsrs	r3, r3, #16
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80038e8:	4b47      	ldr	r3, [pc, #284]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038ee:	0f1b      	lsrs	r3, r3, #28
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	019a      	lsls	r2, r3, #6
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	041b      	lsls	r3, r3, #16
 8003900:	431a      	orrs	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	061b      	lsls	r3, r3, #24
 8003908:	431a      	orrs	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	071b      	lsls	r3, r3, #28
 800390e:	493e      	ldr	r1, [pc, #248]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003916:	4b3c      	ldr	r3, [pc, #240]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003918:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800391c:	f023 021f 	bic.w	r2, r3, #31
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003924:	3b01      	subs	r3, #1
 8003926:	4938      	ldr	r1, [pc, #224]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003928:	4313      	orrs	r3, r2
 800392a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d01d      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800393a:	4b33      	ldr	r3, [pc, #204]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800393c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003940:	0e1b      	lsrs	r3, r3, #24
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003948:	4b2f      	ldr	r3, [pc, #188]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800394a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800394e:	0f1b      	lsrs	r3, r3, #28
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	019a      	lsls	r2, r3, #6
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	041b      	lsls	r3, r3, #16
 8003962:	431a      	orrs	r2, r3
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	061b      	lsls	r3, r3, #24
 8003968:	431a      	orrs	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	071b      	lsls	r3, r3, #28
 800396e:	4926      	ldr	r1, [pc, #152]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003970:	4313      	orrs	r3, r2
 8003972:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d011      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	019a      	lsls	r2, r3, #6
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	041b      	lsls	r3, r3, #16
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	061b      	lsls	r3, r3, #24
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	071b      	lsls	r3, r3, #28
 800399e:	491a      	ldr	r1, [pc, #104]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80039a6:	4b18      	ldr	r3, [pc, #96]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a17      	ldr	r2, [pc, #92]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80039b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039b2:	f7fd fb73 	bl	800109c <HAL_GetTick>
 80039b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039b8:	e008      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039ba:	f7fd fb6f 	bl	800109c <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b64      	cmp	r3, #100	@ 0x64
 80039c6:	d901      	bls.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e0d8      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039cc:	4b0e      	ldr	r3, [pc, #56]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0f0      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	f040 80ce 	bne.w	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80039e0:	4b09      	ldr	r3, [pc, #36]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a08      	ldr	r2, [pc, #32]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ec:	f7fd fb56 	bl	800109c <HAL_GetTick>
 80039f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039f2:	e00b      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039f4:	f7fd fb52 	bl	800109c <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b64      	cmp	r3, #100	@ 0x64
 8003a00:	d904      	bls.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e0bb      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003a06:	bf00      	nop
 8003a08:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a0c:	4b5e      	ldr	r3, [pc, #376]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a18:	d0ec      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d009      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d02e      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d12a      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a42:	4b51      	ldr	r3, [pc, #324]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a48:	0c1b      	lsrs	r3, r3, #16
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a50:	4b4d      	ldr	r3, [pc, #308]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a56:	0f1b      	lsrs	r3, r3, #28
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	019a      	lsls	r2, r3, #6
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	041b      	lsls	r3, r3, #16
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	061b      	lsls	r3, r3, #24
 8003a70:	431a      	orrs	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	071b      	lsls	r3, r3, #28
 8003a76:	4944      	ldr	r1, [pc, #272]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a7e:	4b42      	ldr	r3, [pc, #264]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a84:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	021b      	lsls	r3, r3, #8
 8003a90:	493d      	ldr	r1, [pc, #244]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d022      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003aa8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003aac:	d11d      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003aae:	4b36      	ldr	r3, [pc, #216]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ab4:	0e1b      	lsrs	r3, r3, #24
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003abc:	4b32      	ldr	r3, [pc, #200]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ac2:	0f1b      	lsrs	r3, r3, #28
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	019a      	lsls	r2, r3, #6
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	041b      	lsls	r3, r3, #16
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	061b      	lsls	r3, r3, #24
 8003adc:	431a      	orrs	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	071b      	lsls	r3, r3, #28
 8003ae2:	4929      	ldr	r1, [pc, #164]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d028      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003af6:	4b24      	ldr	r3, [pc, #144]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003afc:	0e1b      	lsrs	r3, r3, #24
 8003afe:	f003 030f 	and.w	r3, r3, #15
 8003b02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b04:	4b20      	ldr	r3, [pc, #128]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b0a:	0c1b      	lsrs	r3, r3, #16
 8003b0c:	f003 0303 	and.w	r3, r3, #3
 8003b10:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	019a      	lsls	r2, r3, #6
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	041b      	lsls	r3, r3, #16
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	061b      	lsls	r3, r3, #24
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	69db      	ldr	r3, [r3, #28]
 8003b28:	071b      	lsls	r3, r3, #28
 8003b2a:	4917      	ldr	r1, [pc, #92]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003b32:	4b15      	ldr	r3, [pc, #84]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b38:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b40:	4911      	ldr	r1, [pc, #68]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003b48:	4b0f      	ldr	r3, [pc, #60]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a0e      	ldr	r2, [pc, #56]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b54:	f7fd faa2 	bl	800109c <HAL_GetTick>
 8003b58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b5c:	f7fd fa9e 	bl	800109c <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b64      	cmp	r3, #100	@ 0x64
 8003b68:	d901      	bls.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e007      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b6e:	4b06      	ldr	r3, [pc, #24]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b7a:	d1ef      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3720      	adds	r7, #32
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	40023800 	.word	0x40023800

08003b8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e040      	b.n	8003c20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d106      	bne.n	8003bb4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7fd f88a 	bl	8000cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2224      	movs	r2, #36	@ 0x24
 8003bb8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0201 	bic.w	r2, r2, #1
 8003bc8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d002      	beq.n	8003bd8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 fe6c 	bl	80048b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 fc05 	bl	80043e8 <UART_SetConfig>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d101      	bne.n	8003be8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e01b      	b.n	8003c20 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003bf6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689a      	ldr	r2, [r3, #8]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0201 	orr.w	r2, r2, #1
 8003c16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 feeb 	bl	80049f4 <UART_CheckIdleState>
 8003c1e:	4603      	mov	r3, r0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b08a      	sub	sp, #40	@ 0x28
 8003c2c:	af02      	add	r7, sp, #8
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	603b      	str	r3, [r7, #0]
 8003c34:	4613      	mov	r3, r2
 8003c36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c3c:	2b20      	cmp	r3, #32
 8003c3e:	d177      	bne.n	8003d30 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <HAL_UART_Transmit+0x24>
 8003c46:	88fb      	ldrh	r3, [r7, #6]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e070      	b.n	8003d32 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2221      	movs	r2, #33	@ 0x21
 8003c5c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c5e:	f7fd fa1d 	bl	800109c <HAL_GetTick>
 8003c62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	88fa      	ldrh	r2, [r7, #6]
 8003c68:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	88fa      	ldrh	r2, [r7, #6]
 8003c70:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c7c:	d108      	bne.n	8003c90 <HAL_UART_Transmit+0x68>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d104      	bne.n	8003c90 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003c86:	2300      	movs	r3, #0
 8003c88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	61bb      	str	r3, [r7, #24]
 8003c8e:	e003      	b.n	8003c98 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c94:	2300      	movs	r3, #0
 8003c96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c98:	e02f      	b.n	8003cfa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	2180      	movs	r1, #128	@ 0x80
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f000 ff4d 	bl	8004b44 <UART_WaitOnFlagUntilTimeout>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d004      	beq.n	8003cba <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e03b      	b.n	8003d32 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10b      	bne.n	8003cd8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cce:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	3302      	adds	r3, #2
 8003cd4:	61bb      	str	r3, [r7, #24]
 8003cd6:	e007      	b.n	8003ce8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	781a      	ldrb	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1c9      	bne.n	8003c9a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	2140      	movs	r1, #64	@ 0x40
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 ff17 	bl	8004b44 <UART_WaitOnFlagUntilTimeout>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d004      	beq.n	8003d26 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e005      	b.n	8003d32 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	e000      	b.n	8003d32 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003d30:	2302      	movs	r3, #2
  }
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3720      	adds	r7, #32
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b08a      	sub	sp, #40	@ 0x28
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	60f8      	str	r0, [r7, #12]
 8003d42:	60b9      	str	r1, [r7, #8]
 8003d44:	4613      	mov	r3, r2
 8003d46:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d4e:	2b20      	cmp	r3, #32
 8003d50:	d132      	bne.n	8003db8 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d002      	beq.n	8003d5e <HAL_UART_Receive_IT+0x24>
 8003d58:	88fb      	ldrh	r3, [r7, #6]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e02b      	b.n	8003dba <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d018      	beq.n	8003da8 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	e853 3f00 	ldrex	r3, [r3]
 8003d82:	613b      	str	r3, [r7, #16]
   return(result);
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	461a      	mov	r2, r3
 8003d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d94:	623b      	str	r3, [r7, #32]
 8003d96:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d98:	69f9      	ldr	r1, [r7, #28]
 8003d9a:	6a3a      	ldr	r2, [r7, #32]
 8003d9c:	e841 2300 	strex	r3, r2, [r1]
 8003da0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1e6      	bne.n	8003d76 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003da8:	88fb      	ldrh	r3, [r7, #6]
 8003daa:	461a      	mov	r2, r3
 8003dac:	68b9      	ldr	r1, [r7, #8]
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 ff36 	bl	8004c20 <UART_Start_Receive_IT>
 8003db4:	4603      	mov	r3, r0
 8003db6:	e000      	b.n	8003dba <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003db8:	2302      	movs	r3, #2
  }
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3728      	adds	r7, #40	@ 0x28
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
	...

08003dc4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b0ba      	sub	sp, #232	@ 0xe8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003dea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003dee:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003df2:	4013      	ands	r3, r2
 8003df4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003df8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d115      	bne.n	8003e2c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e04:	f003 0320 	and.w	r3, r3, #32
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00f      	beq.n	8003e2c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e10:	f003 0320 	and.w	r3, r3, #32
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d009      	beq.n	8003e2c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 82ac 	beq.w	800437a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	4798      	blx	r3
      }
      return;
 8003e2a:	e2a6      	b.n	800437a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003e2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 8117 	beq.w	8004064 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d106      	bne.n	8003e50 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003e42:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003e46:	4b85      	ldr	r3, [pc, #532]	@ (800405c <HAL_UART_IRQHandler+0x298>)
 8003e48:	4013      	ands	r3, r2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f000 810a 	beq.w	8004064 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d011      	beq.n	8003e80 <HAL_UART_IRQHandler+0xbc>
 8003e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00b      	beq.n	8003e80 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e76:	f043 0201 	orr.w	r2, r3, #1
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d011      	beq.n	8003eb0 <HAL_UART_IRQHandler+0xec>
 8003e8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00b      	beq.n	8003eb0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2202      	movs	r2, #2
 8003e9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ea6:	f043 0204 	orr.w	r2, r3, #4
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d011      	beq.n	8003ee0 <HAL_UART_IRQHandler+0x11c>
 8003ebc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00b      	beq.n	8003ee0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2204      	movs	r2, #4
 8003ece:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ed6:	f043 0202 	orr.w	r2, r3, #2
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ee4:	f003 0308 	and.w	r3, r3, #8
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d017      	beq.n	8003f1c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ef0:	f003 0320 	and.w	r3, r3, #32
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d105      	bne.n	8003f04 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003ef8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003efc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00b      	beq.n	8003f1c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2208      	movs	r2, #8
 8003f0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f12:	f043 0208 	orr.w	r2, r3, #8
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d012      	beq.n	8003f4e <HAL_UART_IRQHandler+0x18a>
 8003f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00c      	beq.n	8003f4e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f44:	f043 0220 	orr.w	r2, r3, #32
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 8212 	beq.w	800437e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f5e:	f003 0320 	and.w	r3, r3, #32
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00d      	beq.n	8003f82 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f6a:	f003 0320 	and.w	r3, r3, #32
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d007      	beq.n	8003f82 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f88:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f96:	2b40      	cmp	r3, #64	@ 0x40
 8003f98:	d005      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003f9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f9e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d04f      	beq.n	8004046 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 ff00 	bl	8004dac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb6:	2b40      	cmp	r3, #64	@ 0x40
 8003fb8:	d141      	bne.n	800403e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	3308      	adds	r3, #8
 8003fc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003fc8:	e853 3f00 	ldrex	r3, [r3]
 8003fcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003fd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003fd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	3308      	adds	r3, #8
 8003fe2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003fe6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003fea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003ff2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003ff6:	e841 2300 	strex	r3, r2, [r1]
 8003ffa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003ffe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1d9      	bne.n	8003fba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800400a:	2b00      	cmp	r3, #0
 800400c:	d013      	beq.n	8004036 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004012:	4a13      	ldr	r2, [pc, #76]	@ (8004060 <HAL_UART_IRQHandler+0x29c>)
 8004014:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800401a:	4618      	mov	r0, r3
 800401c:	f7fd fde9 	bl	8001bf2 <HAL_DMA_Abort_IT>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d017      	beq.n	8004056 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800402a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004030:	4610      	mov	r0, r2
 8004032:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004034:	e00f      	b.n	8004056 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f9b6 	bl	80043a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800403c:	e00b      	b.n	8004056 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f9b2 	bl	80043a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004044:	e007      	b.n	8004056 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f9ae 	bl	80043a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004054:	e193      	b.n	800437e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004056:	bf00      	nop
    return;
 8004058:	e191      	b.n	800437e <HAL_UART_IRQHandler+0x5ba>
 800405a:	bf00      	nop
 800405c:	04000120 	.word	0x04000120
 8004060:	08004e75 	.word	0x08004e75

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004068:	2b01      	cmp	r3, #1
 800406a:	f040 814c 	bne.w	8004306 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800406e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004072:	f003 0310 	and.w	r3, r3, #16
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 8145 	beq.w	8004306 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800407c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004080:	f003 0310 	and.w	r3, r3, #16
 8004084:	2b00      	cmp	r3, #0
 8004086:	f000 813e 	beq.w	8004306 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2210      	movs	r2, #16
 8004090:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800409c:	2b40      	cmp	r3, #64	@ 0x40
 800409e:	f040 80b6 	bne.w	800420e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 8165 	beq.w	8004382 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80040be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040c2:	429a      	cmp	r2, r3
 80040c4:	f080 815d 	bcs.w	8004382 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040ce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040d6:	69db      	ldr	r3, [r3, #28]
 80040d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040dc:	f000 8086 	beq.w	80041ec <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80040ec:	e853 3f00 	ldrex	r3, [r3]
 80040f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80040f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80040f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	461a      	mov	r2, r3
 8004106:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800410a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800410e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004112:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004116:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800411a:	e841 2300 	strex	r3, r2, [r1]
 800411e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004122:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1da      	bne.n	80040e0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	3308      	adds	r3, #8
 8004130:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004132:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004134:	e853 3f00 	ldrex	r3, [r3]
 8004138:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800413a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800413c:	f023 0301 	bic.w	r3, r3, #1
 8004140:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	3308      	adds	r3, #8
 800414a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800414e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004152:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004154:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004156:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800415a:	e841 2300 	strex	r3, r2, [r1]
 800415e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004160:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1e1      	bne.n	800412a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	3308      	adds	r3, #8
 800416c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004170:	e853 3f00 	ldrex	r3, [r3]
 8004174:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004176:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004178:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800417c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	3308      	adds	r3, #8
 8004186:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800418a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800418c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004190:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004192:	e841 2300 	strex	r3, r2, [r1]
 8004196:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004198:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1e3      	bne.n	8004166 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2220      	movs	r2, #32
 80041a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041b4:	e853 3f00 	ldrex	r3, [r3]
 80041b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80041ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041bc:	f023 0310 	bic.w	r3, r3, #16
 80041c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	461a      	mov	r2, r3
 80041ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80041ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80041d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80041d6:	e841 2300 	strex	r3, r2, [r1]
 80041da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80041dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1e4      	bne.n	80041ac <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fd fc93 	bl	8001b12 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80041fe:	b29b      	uxth	r3, r3
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	b29b      	uxth	r3, r3
 8004204:	4619      	mov	r1, r3
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f8d8 	bl	80043bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800420c:	e0b9      	b.n	8004382 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800421a:	b29b      	uxth	r3, r3
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004228:	b29b      	uxth	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 80ab 	beq.w	8004386 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8004230:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 80a6 	beq.w	8004386 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004242:	e853 3f00 	ldrex	r3, [r3]
 8004246:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800424a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800424e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	461a      	mov	r2, r3
 8004258:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800425c:	647b      	str	r3, [r7, #68]	@ 0x44
 800425e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004260:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004262:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004264:	e841 2300 	strex	r3, r2, [r1]
 8004268:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800426a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1e4      	bne.n	800423a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	3308      	adds	r3, #8
 8004276:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427a:	e853 3f00 	ldrex	r3, [r3]
 800427e:	623b      	str	r3, [r7, #32]
   return(result);
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	f023 0301 	bic.w	r3, r3, #1
 8004286:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	3308      	adds	r3, #8
 8004290:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004294:	633a      	str	r2, [r7, #48]	@ 0x30
 8004296:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004298:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800429a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800429c:	e841 2300 	strex	r3, r2, [r1]
 80042a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1e3      	bne.n	8004270 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	e853 3f00 	ldrex	r3, [r3]
 80042c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f023 0310 	bic.w	r3, r3, #16
 80042d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	461a      	mov	r2, r3
 80042da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80042de:	61fb      	str	r3, [r7, #28]
 80042e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e2:	69b9      	ldr	r1, [r7, #24]
 80042e4:	69fa      	ldr	r2, [r7, #28]
 80042e6:	e841 2300 	strex	r3, r2, [r1]
 80042ea:	617b      	str	r3, [r7, #20]
   return(result);
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1e4      	bne.n	80042bc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2202      	movs	r2, #2
 80042f6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042fc:	4619      	mov	r1, r3
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f85c 	bl	80043bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004304:	e03f      	b.n	8004386 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800430a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00e      	beq.n	8004330 <HAL_UART_IRQHandler+0x56c>
 8004312:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004316:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d008      	beq.n	8004330 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004326:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 f853 	bl	80043d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800432e:	e02d      	b.n	800438c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004334:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00e      	beq.n	800435a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800433c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004340:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004344:	2b00      	cmp	r3, #0
 8004346:	d008      	beq.n	800435a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800434c:	2b00      	cmp	r3, #0
 800434e:	d01c      	beq.n	800438a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	4798      	blx	r3
    }
    return;
 8004358:	e017      	b.n	800438a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800435a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800435e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004362:	2b00      	cmp	r3, #0
 8004364:	d012      	beq.n	800438c <HAL_UART_IRQHandler+0x5c8>
 8004366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800436a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00c      	beq.n	800438c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 fd94 	bl	8004ea0 <UART_EndTransmit_IT>
    return;
 8004378:	e008      	b.n	800438c <HAL_UART_IRQHandler+0x5c8>
      return;
 800437a:	bf00      	nop
 800437c:	e006      	b.n	800438c <HAL_UART_IRQHandler+0x5c8>
    return;
 800437e:	bf00      	nop
 8004380:	e004      	b.n	800438c <HAL_UART_IRQHandler+0x5c8>
      return;
 8004382:	bf00      	nop
 8004384:	e002      	b.n	800438c <HAL_UART_IRQHandler+0x5c8>
      return;
 8004386:	bf00      	nop
 8004388:	e000      	b.n	800438c <HAL_UART_IRQHandler+0x5c8>
    return;
 800438a:	bf00      	nop
  }

}
 800438c:	37e8      	adds	r7, #232	@ 0xe8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop

08004394 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	460b      	mov	r3, r1
 80043c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b088      	sub	sp, #32
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043f0:	2300      	movs	r3, #0
 80043f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689a      	ldr	r2, [r3, #8]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	431a      	orrs	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	69db      	ldr	r3, [r3, #28]
 8004408:	4313      	orrs	r3, r2
 800440a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	4ba6      	ldr	r3, [pc, #664]	@ (80046ac <UART_SetConfig+0x2c4>)
 8004414:	4013      	ands	r3, r2
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	6812      	ldr	r2, [r2, #0]
 800441a:	6979      	ldr	r1, [r7, #20]
 800441c:	430b      	orrs	r3, r1
 800441e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68da      	ldr	r2, [r3, #12]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	4313      	orrs	r3, r2
 8004444:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	430a      	orrs	r2, r1
 8004458:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a94      	ldr	r2, [pc, #592]	@ (80046b0 <UART_SetConfig+0x2c8>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d120      	bne.n	80044a6 <UART_SetConfig+0xbe>
 8004464:	4b93      	ldr	r3, [pc, #588]	@ (80046b4 <UART_SetConfig+0x2cc>)
 8004466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	2b03      	cmp	r3, #3
 8004470:	d816      	bhi.n	80044a0 <UART_SetConfig+0xb8>
 8004472:	a201      	add	r2, pc, #4	@ (adr r2, 8004478 <UART_SetConfig+0x90>)
 8004474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004478:	08004489 	.word	0x08004489
 800447c:	08004495 	.word	0x08004495
 8004480:	0800448f 	.word	0x0800448f
 8004484:	0800449b 	.word	0x0800449b
 8004488:	2301      	movs	r3, #1
 800448a:	77fb      	strb	r3, [r7, #31]
 800448c:	e150      	b.n	8004730 <UART_SetConfig+0x348>
 800448e:	2302      	movs	r3, #2
 8004490:	77fb      	strb	r3, [r7, #31]
 8004492:	e14d      	b.n	8004730 <UART_SetConfig+0x348>
 8004494:	2304      	movs	r3, #4
 8004496:	77fb      	strb	r3, [r7, #31]
 8004498:	e14a      	b.n	8004730 <UART_SetConfig+0x348>
 800449a:	2308      	movs	r3, #8
 800449c:	77fb      	strb	r3, [r7, #31]
 800449e:	e147      	b.n	8004730 <UART_SetConfig+0x348>
 80044a0:	2310      	movs	r3, #16
 80044a2:	77fb      	strb	r3, [r7, #31]
 80044a4:	e144      	b.n	8004730 <UART_SetConfig+0x348>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a83      	ldr	r2, [pc, #524]	@ (80046b8 <UART_SetConfig+0x2d0>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d132      	bne.n	8004516 <UART_SetConfig+0x12e>
 80044b0:	4b80      	ldr	r3, [pc, #512]	@ (80046b4 <UART_SetConfig+0x2cc>)
 80044b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044b6:	f003 030c 	and.w	r3, r3, #12
 80044ba:	2b0c      	cmp	r3, #12
 80044bc:	d828      	bhi.n	8004510 <UART_SetConfig+0x128>
 80044be:	a201      	add	r2, pc, #4	@ (adr r2, 80044c4 <UART_SetConfig+0xdc>)
 80044c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c4:	080044f9 	.word	0x080044f9
 80044c8:	08004511 	.word	0x08004511
 80044cc:	08004511 	.word	0x08004511
 80044d0:	08004511 	.word	0x08004511
 80044d4:	08004505 	.word	0x08004505
 80044d8:	08004511 	.word	0x08004511
 80044dc:	08004511 	.word	0x08004511
 80044e0:	08004511 	.word	0x08004511
 80044e4:	080044ff 	.word	0x080044ff
 80044e8:	08004511 	.word	0x08004511
 80044ec:	08004511 	.word	0x08004511
 80044f0:	08004511 	.word	0x08004511
 80044f4:	0800450b 	.word	0x0800450b
 80044f8:	2300      	movs	r3, #0
 80044fa:	77fb      	strb	r3, [r7, #31]
 80044fc:	e118      	b.n	8004730 <UART_SetConfig+0x348>
 80044fe:	2302      	movs	r3, #2
 8004500:	77fb      	strb	r3, [r7, #31]
 8004502:	e115      	b.n	8004730 <UART_SetConfig+0x348>
 8004504:	2304      	movs	r3, #4
 8004506:	77fb      	strb	r3, [r7, #31]
 8004508:	e112      	b.n	8004730 <UART_SetConfig+0x348>
 800450a:	2308      	movs	r3, #8
 800450c:	77fb      	strb	r3, [r7, #31]
 800450e:	e10f      	b.n	8004730 <UART_SetConfig+0x348>
 8004510:	2310      	movs	r3, #16
 8004512:	77fb      	strb	r3, [r7, #31]
 8004514:	e10c      	b.n	8004730 <UART_SetConfig+0x348>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a68      	ldr	r2, [pc, #416]	@ (80046bc <UART_SetConfig+0x2d4>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d120      	bne.n	8004562 <UART_SetConfig+0x17a>
 8004520:	4b64      	ldr	r3, [pc, #400]	@ (80046b4 <UART_SetConfig+0x2cc>)
 8004522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004526:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800452a:	2b30      	cmp	r3, #48	@ 0x30
 800452c:	d013      	beq.n	8004556 <UART_SetConfig+0x16e>
 800452e:	2b30      	cmp	r3, #48	@ 0x30
 8004530:	d814      	bhi.n	800455c <UART_SetConfig+0x174>
 8004532:	2b20      	cmp	r3, #32
 8004534:	d009      	beq.n	800454a <UART_SetConfig+0x162>
 8004536:	2b20      	cmp	r3, #32
 8004538:	d810      	bhi.n	800455c <UART_SetConfig+0x174>
 800453a:	2b00      	cmp	r3, #0
 800453c:	d002      	beq.n	8004544 <UART_SetConfig+0x15c>
 800453e:	2b10      	cmp	r3, #16
 8004540:	d006      	beq.n	8004550 <UART_SetConfig+0x168>
 8004542:	e00b      	b.n	800455c <UART_SetConfig+0x174>
 8004544:	2300      	movs	r3, #0
 8004546:	77fb      	strb	r3, [r7, #31]
 8004548:	e0f2      	b.n	8004730 <UART_SetConfig+0x348>
 800454a:	2302      	movs	r3, #2
 800454c:	77fb      	strb	r3, [r7, #31]
 800454e:	e0ef      	b.n	8004730 <UART_SetConfig+0x348>
 8004550:	2304      	movs	r3, #4
 8004552:	77fb      	strb	r3, [r7, #31]
 8004554:	e0ec      	b.n	8004730 <UART_SetConfig+0x348>
 8004556:	2308      	movs	r3, #8
 8004558:	77fb      	strb	r3, [r7, #31]
 800455a:	e0e9      	b.n	8004730 <UART_SetConfig+0x348>
 800455c:	2310      	movs	r3, #16
 800455e:	77fb      	strb	r3, [r7, #31]
 8004560:	e0e6      	b.n	8004730 <UART_SetConfig+0x348>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a56      	ldr	r2, [pc, #344]	@ (80046c0 <UART_SetConfig+0x2d8>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d120      	bne.n	80045ae <UART_SetConfig+0x1c6>
 800456c:	4b51      	ldr	r3, [pc, #324]	@ (80046b4 <UART_SetConfig+0x2cc>)
 800456e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004572:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004576:	2bc0      	cmp	r3, #192	@ 0xc0
 8004578:	d013      	beq.n	80045a2 <UART_SetConfig+0x1ba>
 800457a:	2bc0      	cmp	r3, #192	@ 0xc0
 800457c:	d814      	bhi.n	80045a8 <UART_SetConfig+0x1c0>
 800457e:	2b80      	cmp	r3, #128	@ 0x80
 8004580:	d009      	beq.n	8004596 <UART_SetConfig+0x1ae>
 8004582:	2b80      	cmp	r3, #128	@ 0x80
 8004584:	d810      	bhi.n	80045a8 <UART_SetConfig+0x1c0>
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <UART_SetConfig+0x1a8>
 800458a:	2b40      	cmp	r3, #64	@ 0x40
 800458c:	d006      	beq.n	800459c <UART_SetConfig+0x1b4>
 800458e:	e00b      	b.n	80045a8 <UART_SetConfig+0x1c0>
 8004590:	2300      	movs	r3, #0
 8004592:	77fb      	strb	r3, [r7, #31]
 8004594:	e0cc      	b.n	8004730 <UART_SetConfig+0x348>
 8004596:	2302      	movs	r3, #2
 8004598:	77fb      	strb	r3, [r7, #31]
 800459a:	e0c9      	b.n	8004730 <UART_SetConfig+0x348>
 800459c:	2304      	movs	r3, #4
 800459e:	77fb      	strb	r3, [r7, #31]
 80045a0:	e0c6      	b.n	8004730 <UART_SetConfig+0x348>
 80045a2:	2308      	movs	r3, #8
 80045a4:	77fb      	strb	r3, [r7, #31]
 80045a6:	e0c3      	b.n	8004730 <UART_SetConfig+0x348>
 80045a8:	2310      	movs	r3, #16
 80045aa:	77fb      	strb	r3, [r7, #31]
 80045ac:	e0c0      	b.n	8004730 <UART_SetConfig+0x348>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a44      	ldr	r2, [pc, #272]	@ (80046c4 <UART_SetConfig+0x2dc>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d125      	bne.n	8004604 <UART_SetConfig+0x21c>
 80045b8:	4b3e      	ldr	r3, [pc, #248]	@ (80046b4 <UART_SetConfig+0x2cc>)
 80045ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045c6:	d017      	beq.n	80045f8 <UART_SetConfig+0x210>
 80045c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045cc:	d817      	bhi.n	80045fe <UART_SetConfig+0x216>
 80045ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045d2:	d00b      	beq.n	80045ec <UART_SetConfig+0x204>
 80045d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045d8:	d811      	bhi.n	80045fe <UART_SetConfig+0x216>
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d003      	beq.n	80045e6 <UART_SetConfig+0x1fe>
 80045de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045e2:	d006      	beq.n	80045f2 <UART_SetConfig+0x20a>
 80045e4:	e00b      	b.n	80045fe <UART_SetConfig+0x216>
 80045e6:	2300      	movs	r3, #0
 80045e8:	77fb      	strb	r3, [r7, #31]
 80045ea:	e0a1      	b.n	8004730 <UART_SetConfig+0x348>
 80045ec:	2302      	movs	r3, #2
 80045ee:	77fb      	strb	r3, [r7, #31]
 80045f0:	e09e      	b.n	8004730 <UART_SetConfig+0x348>
 80045f2:	2304      	movs	r3, #4
 80045f4:	77fb      	strb	r3, [r7, #31]
 80045f6:	e09b      	b.n	8004730 <UART_SetConfig+0x348>
 80045f8:	2308      	movs	r3, #8
 80045fa:	77fb      	strb	r3, [r7, #31]
 80045fc:	e098      	b.n	8004730 <UART_SetConfig+0x348>
 80045fe:	2310      	movs	r3, #16
 8004600:	77fb      	strb	r3, [r7, #31]
 8004602:	e095      	b.n	8004730 <UART_SetConfig+0x348>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a2f      	ldr	r2, [pc, #188]	@ (80046c8 <UART_SetConfig+0x2e0>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d125      	bne.n	800465a <UART_SetConfig+0x272>
 800460e:	4b29      	ldr	r3, [pc, #164]	@ (80046b4 <UART_SetConfig+0x2cc>)
 8004610:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004614:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004618:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800461c:	d017      	beq.n	800464e <UART_SetConfig+0x266>
 800461e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004622:	d817      	bhi.n	8004654 <UART_SetConfig+0x26c>
 8004624:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004628:	d00b      	beq.n	8004642 <UART_SetConfig+0x25a>
 800462a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800462e:	d811      	bhi.n	8004654 <UART_SetConfig+0x26c>
 8004630:	2b00      	cmp	r3, #0
 8004632:	d003      	beq.n	800463c <UART_SetConfig+0x254>
 8004634:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004638:	d006      	beq.n	8004648 <UART_SetConfig+0x260>
 800463a:	e00b      	b.n	8004654 <UART_SetConfig+0x26c>
 800463c:	2301      	movs	r3, #1
 800463e:	77fb      	strb	r3, [r7, #31]
 8004640:	e076      	b.n	8004730 <UART_SetConfig+0x348>
 8004642:	2302      	movs	r3, #2
 8004644:	77fb      	strb	r3, [r7, #31]
 8004646:	e073      	b.n	8004730 <UART_SetConfig+0x348>
 8004648:	2304      	movs	r3, #4
 800464a:	77fb      	strb	r3, [r7, #31]
 800464c:	e070      	b.n	8004730 <UART_SetConfig+0x348>
 800464e:	2308      	movs	r3, #8
 8004650:	77fb      	strb	r3, [r7, #31]
 8004652:	e06d      	b.n	8004730 <UART_SetConfig+0x348>
 8004654:	2310      	movs	r3, #16
 8004656:	77fb      	strb	r3, [r7, #31]
 8004658:	e06a      	b.n	8004730 <UART_SetConfig+0x348>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a1b      	ldr	r2, [pc, #108]	@ (80046cc <UART_SetConfig+0x2e4>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d138      	bne.n	80046d6 <UART_SetConfig+0x2ee>
 8004664:	4b13      	ldr	r3, [pc, #76]	@ (80046b4 <UART_SetConfig+0x2cc>)
 8004666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800466a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800466e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004672:	d017      	beq.n	80046a4 <UART_SetConfig+0x2bc>
 8004674:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004678:	d82a      	bhi.n	80046d0 <UART_SetConfig+0x2e8>
 800467a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800467e:	d00b      	beq.n	8004698 <UART_SetConfig+0x2b0>
 8004680:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004684:	d824      	bhi.n	80046d0 <UART_SetConfig+0x2e8>
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <UART_SetConfig+0x2aa>
 800468a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800468e:	d006      	beq.n	800469e <UART_SetConfig+0x2b6>
 8004690:	e01e      	b.n	80046d0 <UART_SetConfig+0x2e8>
 8004692:	2300      	movs	r3, #0
 8004694:	77fb      	strb	r3, [r7, #31]
 8004696:	e04b      	b.n	8004730 <UART_SetConfig+0x348>
 8004698:	2302      	movs	r3, #2
 800469a:	77fb      	strb	r3, [r7, #31]
 800469c:	e048      	b.n	8004730 <UART_SetConfig+0x348>
 800469e:	2304      	movs	r3, #4
 80046a0:	77fb      	strb	r3, [r7, #31]
 80046a2:	e045      	b.n	8004730 <UART_SetConfig+0x348>
 80046a4:	2308      	movs	r3, #8
 80046a6:	77fb      	strb	r3, [r7, #31]
 80046a8:	e042      	b.n	8004730 <UART_SetConfig+0x348>
 80046aa:	bf00      	nop
 80046ac:	efff69f3 	.word	0xefff69f3
 80046b0:	40011000 	.word	0x40011000
 80046b4:	40023800 	.word	0x40023800
 80046b8:	40004400 	.word	0x40004400
 80046bc:	40004800 	.word	0x40004800
 80046c0:	40004c00 	.word	0x40004c00
 80046c4:	40005000 	.word	0x40005000
 80046c8:	40011400 	.word	0x40011400
 80046cc:	40007800 	.word	0x40007800
 80046d0:	2310      	movs	r3, #16
 80046d2:	77fb      	strb	r3, [r7, #31]
 80046d4:	e02c      	b.n	8004730 <UART_SetConfig+0x348>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a72      	ldr	r2, [pc, #456]	@ (80048a4 <UART_SetConfig+0x4bc>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d125      	bne.n	800472c <UART_SetConfig+0x344>
 80046e0:	4b71      	ldr	r3, [pc, #452]	@ (80048a8 <UART_SetConfig+0x4c0>)
 80046e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046e6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80046ea:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80046ee:	d017      	beq.n	8004720 <UART_SetConfig+0x338>
 80046f0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80046f4:	d817      	bhi.n	8004726 <UART_SetConfig+0x33e>
 80046f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046fa:	d00b      	beq.n	8004714 <UART_SetConfig+0x32c>
 80046fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004700:	d811      	bhi.n	8004726 <UART_SetConfig+0x33e>
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <UART_SetConfig+0x326>
 8004706:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800470a:	d006      	beq.n	800471a <UART_SetConfig+0x332>
 800470c:	e00b      	b.n	8004726 <UART_SetConfig+0x33e>
 800470e:	2300      	movs	r3, #0
 8004710:	77fb      	strb	r3, [r7, #31]
 8004712:	e00d      	b.n	8004730 <UART_SetConfig+0x348>
 8004714:	2302      	movs	r3, #2
 8004716:	77fb      	strb	r3, [r7, #31]
 8004718:	e00a      	b.n	8004730 <UART_SetConfig+0x348>
 800471a:	2304      	movs	r3, #4
 800471c:	77fb      	strb	r3, [r7, #31]
 800471e:	e007      	b.n	8004730 <UART_SetConfig+0x348>
 8004720:	2308      	movs	r3, #8
 8004722:	77fb      	strb	r3, [r7, #31]
 8004724:	e004      	b.n	8004730 <UART_SetConfig+0x348>
 8004726:	2310      	movs	r3, #16
 8004728:	77fb      	strb	r3, [r7, #31]
 800472a:	e001      	b.n	8004730 <UART_SetConfig+0x348>
 800472c:	2310      	movs	r3, #16
 800472e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	69db      	ldr	r3, [r3, #28]
 8004734:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004738:	d15b      	bne.n	80047f2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800473a:	7ffb      	ldrb	r3, [r7, #31]
 800473c:	2b08      	cmp	r3, #8
 800473e:	d828      	bhi.n	8004792 <UART_SetConfig+0x3aa>
 8004740:	a201      	add	r2, pc, #4	@ (adr r2, 8004748 <UART_SetConfig+0x360>)
 8004742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004746:	bf00      	nop
 8004748:	0800476d 	.word	0x0800476d
 800474c:	08004775 	.word	0x08004775
 8004750:	0800477d 	.word	0x0800477d
 8004754:	08004793 	.word	0x08004793
 8004758:	08004783 	.word	0x08004783
 800475c:	08004793 	.word	0x08004793
 8004760:	08004793 	.word	0x08004793
 8004764:	08004793 	.word	0x08004793
 8004768:	0800478b 	.word	0x0800478b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800476c:	f7fe fdbe 	bl	80032ec <HAL_RCC_GetPCLK1Freq>
 8004770:	61b8      	str	r0, [r7, #24]
        break;
 8004772:	e013      	b.n	800479c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004774:	f7fe fdce 	bl	8003314 <HAL_RCC_GetPCLK2Freq>
 8004778:	61b8      	str	r0, [r7, #24]
        break;
 800477a:	e00f      	b.n	800479c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800477c:	4b4b      	ldr	r3, [pc, #300]	@ (80048ac <UART_SetConfig+0x4c4>)
 800477e:	61bb      	str	r3, [r7, #24]
        break;
 8004780:	e00c      	b.n	800479c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004782:	f7fe fca1 	bl	80030c8 <HAL_RCC_GetSysClockFreq>
 8004786:	61b8      	str	r0, [r7, #24]
        break;
 8004788:	e008      	b.n	800479c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800478a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800478e:	61bb      	str	r3, [r7, #24]
        break;
 8004790:	e004      	b.n	800479c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004792:	2300      	movs	r3, #0
 8004794:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	77bb      	strb	r3, [r7, #30]
        break;
 800479a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d074      	beq.n	800488c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	005a      	lsls	r2, r3, #1
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	085b      	lsrs	r3, r3, #1
 80047ac:	441a      	add	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	2b0f      	cmp	r3, #15
 80047bc:	d916      	bls.n	80047ec <UART_SetConfig+0x404>
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047c4:	d212      	bcs.n	80047ec <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	f023 030f 	bic.w	r3, r3, #15
 80047ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	085b      	lsrs	r3, r3, #1
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	b29a      	uxth	r2, r3
 80047dc:	89fb      	ldrh	r3, [r7, #14]
 80047de:	4313      	orrs	r3, r2
 80047e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	89fa      	ldrh	r2, [r7, #14]
 80047e8:	60da      	str	r2, [r3, #12]
 80047ea:	e04f      	b.n	800488c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	77bb      	strb	r3, [r7, #30]
 80047f0:	e04c      	b.n	800488c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047f2:	7ffb      	ldrb	r3, [r7, #31]
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d828      	bhi.n	800484a <UART_SetConfig+0x462>
 80047f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004800 <UART_SetConfig+0x418>)
 80047fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fe:	bf00      	nop
 8004800:	08004825 	.word	0x08004825
 8004804:	0800482d 	.word	0x0800482d
 8004808:	08004835 	.word	0x08004835
 800480c:	0800484b 	.word	0x0800484b
 8004810:	0800483b 	.word	0x0800483b
 8004814:	0800484b 	.word	0x0800484b
 8004818:	0800484b 	.word	0x0800484b
 800481c:	0800484b 	.word	0x0800484b
 8004820:	08004843 	.word	0x08004843
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004824:	f7fe fd62 	bl	80032ec <HAL_RCC_GetPCLK1Freq>
 8004828:	61b8      	str	r0, [r7, #24]
        break;
 800482a:	e013      	b.n	8004854 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800482c:	f7fe fd72 	bl	8003314 <HAL_RCC_GetPCLK2Freq>
 8004830:	61b8      	str	r0, [r7, #24]
        break;
 8004832:	e00f      	b.n	8004854 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004834:	4b1d      	ldr	r3, [pc, #116]	@ (80048ac <UART_SetConfig+0x4c4>)
 8004836:	61bb      	str	r3, [r7, #24]
        break;
 8004838:	e00c      	b.n	8004854 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800483a:	f7fe fc45 	bl	80030c8 <HAL_RCC_GetSysClockFreq>
 800483e:	61b8      	str	r0, [r7, #24]
        break;
 8004840:	e008      	b.n	8004854 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004842:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004846:	61bb      	str	r3, [r7, #24]
        break;
 8004848:	e004      	b.n	8004854 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800484a:	2300      	movs	r3, #0
 800484c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	77bb      	strb	r3, [r7, #30]
        break;
 8004852:	bf00      	nop
    }

    if (pclk != 0U)
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d018      	beq.n	800488c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	085a      	lsrs	r2, r3, #1
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	441a      	add	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	fbb2 f3f3 	udiv	r3, r2, r3
 800486c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	2b0f      	cmp	r3, #15
 8004872:	d909      	bls.n	8004888 <UART_SetConfig+0x4a0>
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800487a:	d205      	bcs.n	8004888 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	b29a      	uxth	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	60da      	str	r2, [r3, #12]
 8004886:	e001      	b.n	800488c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004898:	7fbb      	ldrb	r3, [r7, #30]
}
 800489a:	4618      	mov	r0, r3
 800489c:	3720      	adds	r7, #32
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40007c00 	.word	0x40007c00
 80048a8:	40023800 	.word	0x40023800
 80048ac:	00f42400 	.word	0x00f42400

080048b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048bc:	f003 0308 	and.w	r3, r3, #8
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00a      	beq.n	80048da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00a      	beq.n	80048fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	430a      	orrs	r2, r1
 80048fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00a      	beq.n	800491e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	430a      	orrs	r2, r1
 800491c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004922:	f003 0304 	and.w	r3, r3, #4
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00a      	beq.n	8004940 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	430a      	orrs	r2, r1
 800493e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004944:	f003 0310 	and.w	r3, r3, #16
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00a      	beq.n	8004962 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004966:	f003 0320 	and.w	r3, r3, #32
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00a      	beq.n	8004984 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	430a      	orrs	r2, r1
 8004982:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800498c:	2b00      	cmp	r3, #0
 800498e:	d01a      	beq.n	80049c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049ae:	d10a      	bne.n	80049c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00a      	beq.n	80049e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	605a      	str	r2, [r3, #4]
  }
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b098      	sub	sp, #96	@ 0x60
 80049f8:	af02      	add	r7, sp, #8
 80049fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a04:	f7fc fb4a 	bl	800109c <HAL_GetTick>
 8004a08:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0308 	and.w	r3, r3, #8
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d12e      	bne.n	8004a76 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a20:	2200      	movs	r2, #0
 8004a22:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f88c 	bl	8004b44 <UART_WaitOnFlagUntilTimeout>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d021      	beq.n	8004a76 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a3a:	e853 3f00 	ldrex	r3, [r3]
 8004a3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a46:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a50:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a52:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a58:	e841 2300 	strex	r3, r2, [r1]
 8004a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1e6      	bne.n	8004a32 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2220      	movs	r2, #32
 8004a68:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e062      	b.n	8004b3c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	d149      	bne.n	8004b18 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f856 	bl	8004b44 <UART_WaitOnFlagUntilTimeout>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d03c      	beq.n	8004b18 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa6:	e853 3f00 	ldrex	r3, [r3]
 8004aaa:	623b      	str	r3, [r7, #32]
   return(result);
 8004aac:	6a3b      	ldr	r3, [r7, #32]
 8004aae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	461a      	mov	r2, r3
 8004aba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004abc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004abe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ac2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ac4:	e841 2300 	strex	r3, r2, [r1]
 8004ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1e6      	bne.n	8004a9e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3308      	adds	r3, #8
 8004ad6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	e853 3f00 	ldrex	r3, [r3]
 8004ade:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f023 0301 	bic.w	r3, r3, #1
 8004ae6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	3308      	adds	r3, #8
 8004aee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004af0:	61fa      	str	r2, [r7, #28]
 8004af2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af4:	69b9      	ldr	r1, [r7, #24]
 8004af6:	69fa      	ldr	r2, [r7, #28]
 8004af8:	e841 2300 	strex	r3, r2, [r1]
 8004afc:	617b      	str	r3, [r7, #20]
   return(result);
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1e5      	bne.n	8004ad0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e011      	b.n	8004b3c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3758      	adds	r7, #88	@ 0x58
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	603b      	str	r3, [r7, #0]
 8004b50:	4613      	mov	r3, r2
 8004b52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b54:	e04f      	b.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5c:	d04b      	beq.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b5e:	f7fc fa9d 	bl	800109c <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d302      	bcc.n	8004b74 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e04e      	b.n	8004c16 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0304 	and.w	r3, r3, #4
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d037      	beq.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	2b80      	cmp	r3, #128	@ 0x80
 8004b8a:	d034      	beq.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	2b40      	cmp	r3, #64	@ 0x40
 8004b90:	d031      	beq.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	69db      	ldr	r3, [r3, #28]
 8004b98:	f003 0308 	and.w	r3, r3, #8
 8004b9c:	2b08      	cmp	r3, #8
 8004b9e:	d110      	bne.n	8004bc2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2208      	movs	r2, #8
 8004ba6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 f8ff 	bl	8004dac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2208      	movs	r2, #8
 8004bb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e029      	b.n	8004c16 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69db      	ldr	r3, [r3, #28]
 8004bc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bd0:	d111      	bne.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004bda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f000 f8e5 	bl	8004dac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2220      	movs	r2, #32
 8004be6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e00f      	b.n	8004c16 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	69da      	ldr	r2, [r3, #28]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	4013      	ands	r3, r2
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	bf0c      	ite	eq
 8004c06:	2301      	moveq	r3, #1
 8004c08:	2300      	movne	r3, #0
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	79fb      	ldrb	r3, [r7, #7]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d0a0      	beq.n	8004b56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
	...

08004c20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b097      	sub	sp, #92	@ 0x5c
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	88fa      	ldrh	r2, [r7, #6]
 8004c38:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	88fa      	ldrh	r2, [r7, #6]
 8004c40:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c52:	d10e      	bne.n	8004c72 <UART_Start_Receive_IT+0x52>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d105      	bne.n	8004c68 <UART_Start_Receive_IT+0x48>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004c62:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004c66:	e02d      	b.n	8004cc4 <UART_Start_Receive_IT+0xa4>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	22ff      	movs	r2, #255	@ 0xff
 8004c6c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004c70:	e028      	b.n	8004cc4 <UART_Start_Receive_IT+0xa4>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10d      	bne.n	8004c96 <UART_Start_Receive_IT+0x76>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d104      	bne.n	8004c8c <UART_Start_Receive_IT+0x6c>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	22ff      	movs	r2, #255	@ 0xff
 8004c86:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004c8a:	e01b      	b.n	8004cc4 <UART_Start_Receive_IT+0xa4>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	227f      	movs	r2, #127	@ 0x7f
 8004c90:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004c94:	e016      	b.n	8004cc4 <UART_Start_Receive_IT+0xa4>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c9e:	d10d      	bne.n	8004cbc <UART_Start_Receive_IT+0x9c>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d104      	bne.n	8004cb2 <UART_Start_Receive_IT+0x92>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	227f      	movs	r2, #127	@ 0x7f
 8004cac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004cb0:	e008      	b.n	8004cc4 <UART_Start_Receive_IT+0xa4>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	223f      	movs	r2, #63	@ 0x3f
 8004cb6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004cba:	e003      	b.n	8004cc4 <UART_Start_Receive_IT+0xa4>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2222      	movs	r2, #34	@ 0x22
 8004cd0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	3308      	adds	r3, #8
 8004cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cde:	e853 3f00 	ldrex	r3, [r3]
 8004ce2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ce6:	f043 0301 	orr.w	r3, r3, #1
 8004cea:	657b      	str	r3, [r7, #84]	@ 0x54
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	3308      	adds	r3, #8
 8004cf2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004cf4:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004cf6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004cfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cfc:	e841 2300 	strex	r3, r2, [r1]
 8004d00:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004d02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1e5      	bne.n	8004cd4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d10:	d107      	bne.n	8004d22 <UART_Start_Receive_IT+0x102>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d103      	bne.n	8004d22 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	4a21      	ldr	r2, [pc, #132]	@ (8004da4 <UART_Start_Receive_IT+0x184>)
 8004d1e:	669a      	str	r2, [r3, #104]	@ 0x68
 8004d20:	e002      	b.n	8004d28 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	4a20      	ldr	r2, [pc, #128]	@ (8004da8 <UART_Start_Receive_IT+0x188>)
 8004d26:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d019      	beq.n	8004d64 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d38:	e853 3f00 	ldrex	r3, [r3]
 8004d3c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d40:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004d44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d50:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d52:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004d54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004d56:	e841 2300 	strex	r3, r2, [r1]
 8004d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1e6      	bne.n	8004d30 <UART_Start_Receive_IT+0x110>
 8004d62:	e018      	b.n	8004d96 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	e853 3f00 	ldrex	r3, [r3]
 8004d70:	613b      	str	r3, [r7, #16]
   return(result);
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	f043 0320 	orr.w	r3, r3, #32
 8004d78:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d82:	623b      	str	r3, [r7, #32]
 8004d84:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d86:	69f9      	ldr	r1, [r7, #28]
 8004d88:	6a3a      	ldr	r2, [r7, #32]
 8004d8a:	e841 2300 	strex	r3, r2, [r1]
 8004d8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1e6      	bne.n	8004d64 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	375c      	adds	r7, #92	@ 0x5c
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	0800509d 	.word	0x0800509d
 8004da8:	08004ef5 	.word	0x08004ef5

08004dac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b095      	sub	sp, #84	@ 0x54
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dbc:	e853 3f00 	ldrex	r3, [r3]
 8004dc0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dd2:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dd4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004dd8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004dda:	e841 2300 	strex	r3, r2, [r1]
 8004dde:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1e6      	bne.n	8004db4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	3308      	adds	r3, #8
 8004dec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	e853 3f00 	ldrex	r3, [r3]
 8004df4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	f023 0301 	bic.w	r3, r3, #1
 8004dfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	3308      	adds	r3, #8
 8004e04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e0e:	e841 2300 	strex	r3, r2, [r1]
 8004e12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1e5      	bne.n	8004de6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d118      	bne.n	8004e54 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	e853 3f00 	ldrex	r3, [r3]
 8004e2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	f023 0310 	bic.w	r3, r3, #16
 8004e36:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e40:	61bb      	str	r3, [r7, #24]
 8004e42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e44:	6979      	ldr	r1, [r7, #20]
 8004e46:	69ba      	ldr	r2, [r7, #24]
 8004e48:	e841 2300 	strex	r3, r2, [r1]
 8004e4c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1e6      	bne.n	8004e22 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2220      	movs	r2, #32
 8004e58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004e68:	bf00      	nop
 8004e6a:	3754      	adds	r7, #84	@ 0x54
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f7ff fa88 	bl	80043a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e98:	bf00      	nop
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b088      	sub	sp, #32
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ebc:	61fb      	str	r3, [r7, #28]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	61bb      	str	r3, [r7, #24]
 8004ec8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eca:	6979      	ldr	r1, [r7, #20]
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	e841 2300 	strex	r3, r2, [r1]
 8004ed2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1e6      	bne.n	8004ea8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2220      	movs	r2, #32
 8004ede:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7ff fa54 	bl	8004394 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004eec:	bf00      	nop
 8004eee:	3720      	adds	r7, #32
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b09c      	sub	sp, #112	@ 0x70
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004f02:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f0c:	2b22      	cmp	r3, #34	@ 0x22
 8004f0e:	f040 80b9 	bne.w	8005084 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f18:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004f1c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004f20:	b2d9      	uxtb	r1, r3
 8004f22:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004f26:	b2da      	uxtb	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f2c:	400a      	ands	r2, r1
 8004f2e:	b2d2      	uxtb	r2, r2
 8004f30:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f36:	1c5a      	adds	r2, r3, #1
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	3b01      	subs	r3, #1
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f040 809c 	bne.w	8005094 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f64:	e853 3f00 	ldrex	r3, [r3]
 8004f68:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004f6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	461a      	mov	r2, r3
 8004f78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f7a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f7c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004f82:	e841 2300 	strex	r3, r2, [r1]
 8004f86:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004f88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1e6      	bne.n	8004f5c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	3308      	adds	r3, #8
 8004f94:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f98:	e853 3f00 	ldrex	r3, [r3]
 8004f9c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fa0:	f023 0301 	bic.w	r3, r3, #1
 8004fa4:	667b      	str	r3, [r7, #100]	@ 0x64
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3308      	adds	r3, #8
 8004fac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004fae:	647a      	str	r2, [r7, #68]	@ 0x44
 8004fb0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004fb4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fb6:	e841 2300 	strex	r3, r2, [r1]
 8004fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004fbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1e5      	bne.n	8004f8e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d018      	beq.n	8005016 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fec:	e853 3f00 	ldrex	r3, [r3]
 8004ff0:	623b      	str	r3, [r7, #32]
   return(result);
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ff8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	461a      	mov	r2, r3
 8005000:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005002:	633b      	str	r3, [r7, #48]	@ 0x30
 8005004:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005006:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005008:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800500a:	e841 2300 	strex	r3, r2, [r1]
 800500e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1e6      	bne.n	8004fe4 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800501a:	2b01      	cmp	r3, #1
 800501c:	d12e      	bne.n	800507c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	e853 3f00 	ldrex	r3, [r3]
 8005030:	60fb      	str	r3, [r7, #12]
   return(result);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f023 0310 	bic.w	r3, r3, #16
 8005038:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	461a      	mov	r2, r3
 8005040:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005042:	61fb      	str	r3, [r7, #28]
 8005044:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005046:	69b9      	ldr	r1, [r7, #24]
 8005048:	69fa      	ldr	r2, [r7, #28]
 800504a:	e841 2300 	strex	r3, r2, [r1]
 800504e:	617b      	str	r3, [r7, #20]
   return(result);
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1e6      	bne.n	8005024 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	69db      	ldr	r3, [r3, #28]
 800505c:	f003 0310 	and.w	r3, r3, #16
 8005060:	2b10      	cmp	r3, #16
 8005062:	d103      	bne.n	800506c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2210      	movs	r2, #16
 800506a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005072:	4619      	mov	r1, r3
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7ff f9a1 	bl	80043bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800507a:	e00b      	b.n	8005094 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f7fb fa53 	bl	8000528 <HAL_UART_RxCpltCallback>
}
 8005082:	e007      	b.n	8005094 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	699a      	ldr	r2, [r3, #24]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 0208 	orr.w	r2, r2, #8
 8005092:	619a      	str	r2, [r3, #24]
}
 8005094:	bf00      	nop
 8005096:	3770      	adds	r7, #112	@ 0x70
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b09c      	sub	sp, #112	@ 0x70
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80050aa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050b4:	2b22      	cmp	r3, #34	@ 0x22
 80050b6:	f040 80b9 	bne.w	800522c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050c8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80050ca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80050ce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80050d2:	4013      	ands	r3, r2
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050d8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050de:	1c9a      	adds	r2, r3, #2
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f040 809c 	bne.w	800523c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800510c:	e853 3f00 	ldrex	r3, [r3]
 8005110:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005112:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005114:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005118:	667b      	str	r3, [r7, #100]	@ 0x64
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	461a      	mov	r2, r3
 8005120:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005122:	657b      	str	r3, [r7, #84]	@ 0x54
 8005124:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005126:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005128:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800512a:	e841 2300 	strex	r3, r2, [r1]
 800512e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005130:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1e6      	bne.n	8005104 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	3308      	adds	r3, #8
 800513c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005140:	e853 3f00 	ldrex	r3, [r3]
 8005144:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005148:	f023 0301 	bic.w	r3, r3, #1
 800514c:	663b      	str	r3, [r7, #96]	@ 0x60
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	3308      	adds	r3, #8
 8005154:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005156:	643a      	str	r2, [r7, #64]	@ 0x40
 8005158:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800515c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800515e:	e841 2300 	strex	r3, r2, [r1]
 8005162:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1e5      	bne.n	8005136 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2220      	movs	r2, #32
 800516e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d018      	beq.n	80051be <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005192:	6a3b      	ldr	r3, [r7, #32]
 8005194:	e853 3f00 	ldrex	r3, [r3]
 8005198:	61fb      	str	r3, [r7, #28]
   return(result);
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80051a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	461a      	mov	r2, r3
 80051a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051ac:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051b2:	e841 2300 	strex	r3, r2, [r1]
 80051b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80051b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1e6      	bne.n	800518c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d12e      	bne.n	8005224 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	e853 3f00 	ldrex	r3, [r3]
 80051d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	f023 0310 	bic.w	r3, r3, #16
 80051e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	461a      	mov	r2, r3
 80051e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80051ea:	61bb      	str	r3, [r7, #24]
 80051ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ee:	6979      	ldr	r1, [r7, #20]
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	e841 2300 	strex	r3, r2, [r1]
 80051f6:	613b      	str	r3, [r7, #16]
   return(result);
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1e6      	bne.n	80051cc <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	f003 0310 	and.w	r3, r3, #16
 8005208:	2b10      	cmp	r3, #16
 800520a:	d103      	bne.n	8005214 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2210      	movs	r2, #16
 8005212:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800521a:	4619      	mov	r1, r3
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7ff f8cd 	bl	80043bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005222:	e00b      	b.n	800523c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f7fb f97f 	bl	8000528 <HAL_UART_RxCpltCallback>
}
 800522a:	e007      	b.n	800523c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	699a      	ldr	r2, [r3, #24]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0208 	orr.w	r2, r2, #8
 800523a:	619a      	str	r2, [r3, #24]
}
 800523c:	bf00      	nop
 800523e:	3770      	adds	r7, #112	@ 0x70
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005244:	b084      	sub	sp, #16
 8005246:	b580      	push	{r7, lr}
 8005248:	b084      	sub	sp, #16
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
 800524e:	f107 001c 	add.w	r0, r7, #28
 8005252:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005256:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800525a:	2b01      	cmp	r3, #1
 800525c:	d121      	bne.n	80052a2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005262:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	4b21      	ldr	r3, [pc, #132]	@ (80052f4 <USB_CoreInit+0xb0>)
 8005270:	4013      	ands	r3, r2
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005282:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005286:	2b01      	cmp	r3, #1
 8005288:	d105      	bne.n	8005296 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 fa92 	bl	80057c0 <USB_CoreReset>
 800529c:	4603      	mov	r3, r0
 800529e:	73fb      	strb	r3, [r7, #15]
 80052a0:	e010      	b.n	80052c4 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 fa86 	bl	80057c0 <USB_CoreReset>
 80052b4:	4603      	mov	r3, r0
 80052b6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052bc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80052c4:	7fbb      	ldrb	r3, [r7, #30]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d10b      	bne.n	80052e2 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f043 0206 	orr.w	r2, r3, #6
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f043 0220 	orr.w	r2, r3, #32
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80052e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052ee:	b004      	add	sp, #16
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	ffbdffbf 	.word	0xffbdffbf

080052f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f023 0201 	bic.w	r2, r3, #1
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b084      	sub	sp, #16
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	460b      	mov	r3, r1
 8005324:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005326:	2300      	movs	r3, #0
 8005328:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005336:	78fb      	ldrb	r3, [r7, #3]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d115      	bne.n	8005368 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005348:	200a      	movs	r0, #10
 800534a:	f7fb feb3 	bl	80010b4 <HAL_Delay>
      ms += 10U;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	330a      	adds	r3, #10
 8005352:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 fa25 	bl	80057a4 <USB_GetMode>
 800535a:	4603      	mov	r3, r0
 800535c:	2b01      	cmp	r3, #1
 800535e:	d01e      	beq.n	800539e <USB_SetCurrentMode+0x84>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2bc7      	cmp	r3, #199	@ 0xc7
 8005364:	d9f0      	bls.n	8005348 <USB_SetCurrentMode+0x2e>
 8005366:	e01a      	b.n	800539e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005368:	78fb      	ldrb	r3, [r7, #3]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d115      	bne.n	800539a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800537a:	200a      	movs	r0, #10
 800537c:	f7fb fe9a 	bl	80010b4 <HAL_Delay>
      ms += 10U;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	330a      	adds	r3, #10
 8005384:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 fa0c 	bl	80057a4 <USB_GetMode>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d005      	beq.n	800539e <USB_SetCurrentMode+0x84>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2bc7      	cmp	r3, #199	@ 0xc7
 8005396:	d9f0      	bls.n	800537a <USB_SetCurrentMode+0x60>
 8005398:	e001      	b.n	800539e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e005      	b.n	80053aa <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2bc8      	cmp	r3, #200	@ 0xc8
 80053a2:	d101      	bne.n	80053a8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e000      	b.n	80053aa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
	...

080053b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053b4:	b084      	sub	sp, #16
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b086      	sub	sp, #24
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
 80053be:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80053c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80053ce:	2300      	movs	r3, #0
 80053d0:	613b      	str	r3, [r7, #16]
 80053d2:	e009      	b.n	80053e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	3340      	adds	r3, #64	@ 0x40
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	2200      	movs	r2, #0
 80053e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	3301      	adds	r3, #1
 80053e6:	613b      	str	r3, [r7, #16]
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	2b0e      	cmp	r3, #14
 80053ec:	d9f2      	bls.n	80053d4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80053ee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d11c      	bne.n	8005430 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005404:	f043 0302 	orr.w	r3, r3, #2
 8005408:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800540e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	e005      	b.n	800543c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005434:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005442:	461a      	mov	r2, r3
 8005444:	2300      	movs	r3, #0
 8005446:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005448:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800544c:	2b01      	cmp	r3, #1
 800544e:	d10d      	bne.n	800546c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005450:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005454:	2b00      	cmp	r3, #0
 8005456:	d104      	bne.n	8005462 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005458:	2100      	movs	r1, #0
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f968 	bl	8005730 <USB_SetDevSpeed>
 8005460:	e008      	b.n	8005474 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005462:	2101      	movs	r1, #1
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f963 	bl	8005730 <USB_SetDevSpeed>
 800546a:	e003      	b.n	8005474 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800546c:	2103      	movs	r1, #3
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f95e 	bl	8005730 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005474:	2110      	movs	r1, #16
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f8fa 	bl	8005670 <USB_FlushTxFifo>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f924 	bl	80056d4 <USB_FlushRxFifo>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800549c:	461a      	mov	r2, r3
 800549e:	2300      	movs	r3, #0
 80054a0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054a8:	461a      	mov	r2, r3
 80054aa:	2300      	movs	r3, #0
 80054ac:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054b4:	461a      	mov	r2, r3
 80054b6:	2300      	movs	r3, #0
 80054b8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054ba:	2300      	movs	r3, #0
 80054bc:	613b      	str	r3, [r7, #16]
 80054be:	e043      	b.n	8005548 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054d6:	d118      	bne.n	800550a <USB_DevInit+0x156>
    {
      if (i == 0U)
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10a      	bne.n	80054f4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	015a      	lsls	r2, r3, #5
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054ea:	461a      	mov	r2, r3
 80054ec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80054f0:	6013      	str	r3, [r2, #0]
 80054f2:	e013      	b.n	800551c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005500:	461a      	mov	r2, r3
 8005502:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005506:	6013      	str	r3, [r2, #0]
 8005508:	e008      	b.n	800551c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	015a      	lsls	r2, r3, #5
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	4413      	add	r3, r2
 8005512:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005516:	461a      	mov	r2, r3
 8005518:	2300      	movs	r3, #0
 800551a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4413      	add	r3, r2
 8005524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005528:	461a      	mov	r2, r3
 800552a:	2300      	movs	r3, #0
 800552c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	015a      	lsls	r2, r3, #5
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	4413      	add	r3, r2
 8005536:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800553a:	461a      	mov	r2, r3
 800553c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005540:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	3301      	adds	r3, #1
 8005546:	613b      	str	r3, [r7, #16]
 8005548:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800554c:	461a      	mov	r2, r3
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	4293      	cmp	r3, r2
 8005552:	d3b5      	bcc.n	80054c0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005554:	2300      	movs	r3, #0
 8005556:	613b      	str	r3, [r7, #16]
 8005558:	e043      	b.n	80055e2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	4413      	add	r3, r2
 8005562:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800556c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005570:	d118      	bne.n	80055a4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10a      	bne.n	800558e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4413      	add	r3, r2
 8005580:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005584:	461a      	mov	r2, r3
 8005586:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800558a:	6013      	str	r3, [r2, #0]
 800558c:	e013      	b.n	80055b6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	015a      	lsls	r2, r3, #5
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	4413      	add	r3, r2
 8005596:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800559a:	461a      	mov	r2, r3
 800559c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80055a0:	6013      	str	r3, [r2, #0]
 80055a2:	e008      	b.n	80055b6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055b0:	461a      	mov	r2, r3
 80055b2:	2300      	movs	r3, #0
 80055b4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055c2:	461a      	mov	r2, r3
 80055c4:	2300      	movs	r3, #0
 80055c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	015a      	lsls	r2, r3, #5
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	4413      	add	r3, r2
 80055d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055d4:	461a      	mov	r2, r3
 80055d6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80055da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	3301      	adds	r3, #1
 80055e0:	613b      	str	r3, [r7, #16]
 80055e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80055e6:	461a      	mov	r2, r3
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d3b5      	bcc.n	800555a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005600:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800560e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005610:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005614:	2b00      	cmp	r3, #0
 8005616:	d105      	bne.n	8005624 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	f043 0210 	orr.w	r2, r3, #16
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	699a      	ldr	r2, [r3, #24]
 8005628:	4b0f      	ldr	r3, [pc, #60]	@ (8005668 <USB_DevInit+0x2b4>)
 800562a:	4313      	orrs	r3, r2
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005630:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005634:	2b00      	cmp	r3, #0
 8005636:	d005      	beq.n	8005644 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	f043 0208 	orr.w	r2, r3, #8
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005644:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005648:	2b01      	cmp	r3, #1
 800564a:	d105      	bne.n	8005658 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	699a      	ldr	r2, [r3, #24]
 8005650:	4b06      	ldr	r3, [pc, #24]	@ (800566c <USB_DevInit+0x2b8>)
 8005652:	4313      	orrs	r3, r2
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005658:	7dfb      	ldrb	r3, [r7, #23]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3718      	adds	r7, #24
 800565e:	46bd      	mov	sp, r7
 8005660:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005664:	b004      	add	sp, #16
 8005666:	4770      	bx	lr
 8005668:	803c3800 	.word	0x803c3800
 800566c:	40000004 	.word	0x40000004

08005670 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800567a:	2300      	movs	r3, #0
 800567c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	3301      	adds	r3, #1
 8005682:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800568a:	d901      	bls.n	8005690 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e01b      	b.n	80056c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	daf2      	bge.n	800567e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005698:	2300      	movs	r3, #0
 800569a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	019b      	lsls	r3, r3, #6
 80056a0:	f043 0220 	orr.w	r2, r3, #32
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	3301      	adds	r3, #1
 80056ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056b4:	d901      	bls.n	80056ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e006      	b.n	80056c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	f003 0320 	and.w	r3, r3, #32
 80056c2:	2b20      	cmp	r3, #32
 80056c4:	d0f0      	beq.n	80056a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056dc:	2300      	movs	r3, #0
 80056de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	3301      	adds	r3, #1
 80056e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056ec:	d901      	bls.n	80056f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e018      	b.n	8005724 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	daf2      	bge.n	80056e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80056fa:	2300      	movs	r3, #0
 80056fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2210      	movs	r2, #16
 8005702:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	3301      	adds	r3, #1
 8005708:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005710:	d901      	bls.n	8005716 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e006      	b.n	8005724 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	f003 0310 	and.w	r3, r3, #16
 800571e:	2b10      	cmp	r3, #16
 8005720:	d0f0      	beq.n	8005704 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	460b      	mov	r3, r1
 800573a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	78fb      	ldrb	r3, [r7, #3]
 800574a:	68f9      	ldr	r1, [r7, #12]
 800574c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005750:	4313      	orrs	r3, r2
 8005752:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005762:	b480      	push	{r7}
 8005764:	b085      	sub	sp, #20
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800577c:	f023 0303 	bic.w	r3, r3, #3
 8005780:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005790:	f043 0302 	orr.w	r3, r3, #2
 8005794:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3714      	adds	r7, #20
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	f003 0301 	and.w	r3, r3, #1
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057c8:	2300      	movs	r3, #0
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	3301      	adds	r3, #1
 80057d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80057d8:	d901      	bls.n	80057de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e01b      	b.n	8005816 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	daf2      	bge.n	80057cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80057e6:	2300      	movs	r3, #0
 80057e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	f043 0201 	orr.w	r2, r3, #1
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	3301      	adds	r3, #1
 80057fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005802:	d901      	bls.n	8005808 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e006      	b.n	8005816 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	f003 0301 	and.w	r3, r3, #1
 8005810:	2b01      	cmp	r3, #1
 8005812:	d0f0      	beq.n	80057f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr

08005822 <memset>:
 8005822:	4402      	add	r2, r0
 8005824:	4603      	mov	r3, r0
 8005826:	4293      	cmp	r3, r2
 8005828:	d100      	bne.n	800582c <memset+0xa>
 800582a:	4770      	bx	lr
 800582c:	f803 1b01 	strb.w	r1, [r3], #1
 8005830:	e7f9      	b.n	8005826 <memset+0x4>
	...

08005834 <__libc_init_array>:
 8005834:	b570      	push	{r4, r5, r6, lr}
 8005836:	4d0d      	ldr	r5, [pc, #52]	@ (800586c <__libc_init_array+0x38>)
 8005838:	4c0d      	ldr	r4, [pc, #52]	@ (8005870 <__libc_init_array+0x3c>)
 800583a:	1b64      	subs	r4, r4, r5
 800583c:	10a4      	asrs	r4, r4, #2
 800583e:	2600      	movs	r6, #0
 8005840:	42a6      	cmp	r6, r4
 8005842:	d109      	bne.n	8005858 <__libc_init_array+0x24>
 8005844:	4d0b      	ldr	r5, [pc, #44]	@ (8005874 <__libc_init_array+0x40>)
 8005846:	4c0c      	ldr	r4, [pc, #48]	@ (8005878 <__libc_init_array+0x44>)
 8005848:	f000 f818 	bl	800587c <_init>
 800584c:	1b64      	subs	r4, r4, r5
 800584e:	10a4      	asrs	r4, r4, #2
 8005850:	2600      	movs	r6, #0
 8005852:	42a6      	cmp	r6, r4
 8005854:	d105      	bne.n	8005862 <__libc_init_array+0x2e>
 8005856:	bd70      	pop	{r4, r5, r6, pc}
 8005858:	f855 3b04 	ldr.w	r3, [r5], #4
 800585c:	4798      	blx	r3
 800585e:	3601      	adds	r6, #1
 8005860:	e7ee      	b.n	8005840 <__libc_init_array+0xc>
 8005862:	f855 3b04 	ldr.w	r3, [r5], #4
 8005866:	4798      	blx	r3
 8005868:	3601      	adds	r6, #1
 800586a:	e7f2      	b.n	8005852 <__libc_init_array+0x1e>
 800586c:	080058b4 	.word	0x080058b4
 8005870:	080058b4 	.word	0x080058b4
 8005874:	080058b4 	.word	0x080058b4
 8005878:	080058b8 	.word	0x080058b8

0800587c <_init>:
 800587c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800587e:	bf00      	nop
 8005880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005882:	bc08      	pop	{r3}
 8005884:	469e      	mov	lr, r3
 8005886:	4770      	bx	lr

08005888 <_fini>:
 8005888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800588a:	bf00      	nop
 800588c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800588e:	bc08      	pop	{r3}
 8005890:	469e      	mov	lr, r3
 8005892:	4770      	bx	lr
