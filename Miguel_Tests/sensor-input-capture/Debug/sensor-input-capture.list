
sensor-input-capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d88  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08005f80  08005f80  00006f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fa4  08005fa4  0000714c  2**0
                  CONTENTS
  4 .ARM          00000008  08005fa4  08005fa4  00006fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fac  08005fac  0000714c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fac  08005fac  00006fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005fb0  08005fb0  00006fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005fb4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  08005fc0  0000700c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  08006060  000070ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000728  2000014c  08006100  0000714c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000874  08006100  00007874  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000714c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019c47  00000000  00000000  0000717a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002ed2  00000000  00000000  00020dc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001548  00000000  00000000  00023c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010be  00000000  00000000  000251e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029a13  00000000  00000000  0002629e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a6db  00000000  00000000  0004fcb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010419b  00000000  00000000  0006a38c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0016e527  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005c0c  00000000  00000000  0016e56c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005f  00000000  00000000  00174178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000014c 	.word	0x2000014c
 8000214:	00000000 	.word	0x00000000
 8000218:	08005f68 	.word	0x08005f68

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000150 	.word	0x20000150
 8000234:	08005f68 	.word	0x08005f68

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af02      	add	r7, sp, #8
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	f023 030f 	bic.w	r3, r3, #15
 8000538:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	011b      	lsls	r3, r3, #4
 800053e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000540:	7bfb      	ldrb	r3, [r7, #15]
 8000542:	f043 030c 	orr.w	r3, r3, #12
 8000546:	b2db      	uxtb	r3, r3
 8000548:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800054a:	7bfb      	ldrb	r3, [r7, #15]
 800054c:	f043 0308 	orr.w	r3, r3, #8
 8000550:	b2db      	uxtb	r3, r3
 8000552:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000554:	7bbb      	ldrb	r3, [r7, #14]
 8000556:	f043 030c 	orr.w	r3, r3, #12
 800055a:	b2db      	uxtb	r3, r3
 800055c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800055e:	7bbb      	ldrb	r3, [r7, #14]
 8000560:	f043 0308 	orr.w	r3, r3, #8
 8000564:	b2db      	uxtb	r3, r3
 8000566:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000568:	f107 0208 	add.w	r2, r7, #8
 800056c:	2364      	movs	r3, #100	@ 0x64
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	2304      	movs	r3, #4
 8000572:	214e      	movs	r1, #78	@ 0x4e
 8000574:	4803      	ldr	r0, [pc, #12]	@ (8000584 <lcd_send_cmd+0x5c>)
 8000576:	f001 fe99 	bl	80022ac <HAL_I2C_Master_Transmit>
}
 800057a:	bf00      	nop
 800057c:	3710      	adds	r7, #16
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000250 	.word	0x20000250

08000588 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af02      	add	r7, sp, #8
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	f023 030f 	bic.w	r3, r3, #15
 8000598:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	011b      	lsls	r3, r3, #4
 800059e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80005a0:	7bfb      	ldrb	r3, [r7, #15]
 80005a2:	f043 030d 	orr.w	r3, r3, #13
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	f043 0309 	orr.w	r3, r3, #9
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80005b4:	7bbb      	ldrb	r3, [r7, #14]
 80005b6:	f043 030d 	orr.w	r3, r3, #13
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80005be:	7bbb      	ldrb	r3, [r7, #14]
 80005c0:	f043 0309 	orr.w	r3, r3, #9
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005c8:	f107 0208 	add.w	r2, r7, #8
 80005cc:	2364      	movs	r3, #100	@ 0x64
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	2304      	movs	r3, #4
 80005d2:	214e      	movs	r1, #78	@ 0x4e
 80005d4:	4803      	ldr	r0, [pc, #12]	@ (80005e4 <lcd_send_data+0x5c>)
 80005d6:	f001 fe69 	bl	80022ac <HAL_I2C_Master_Transmit>
}
 80005da:	bf00      	nop
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000250 	.word	0x20000250

080005e8 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	6039      	str	r1, [r7, #0]
    switch (row)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d003      	beq.n	8000600 <lcd_put_cur+0x18>
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d005      	beq.n	800060a <lcd_put_cur+0x22>
 80005fe:	e009      	b.n	8000614 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000606:	603b      	str	r3, [r7, #0]
            break;
 8000608:	e004      	b.n	8000614 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000610:	603b      	str	r3, [r7, #0]
            break;
 8000612:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	b2db      	uxtb	r3, r3
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff ff85 	bl	8000528 <lcd_send_cmd>
}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <lcd_init>:


void lcd_init (void)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800062a:	2032      	movs	r0, #50	@ 0x32
 800062c:	f000 ff58 	bl	80014e0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000630:	2030      	movs	r0, #48	@ 0x30
 8000632:	f7ff ff79 	bl	8000528 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000636:	2005      	movs	r0, #5
 8000638:	f000 ff52 	bl	80014e0 <HAL_Delay>
	lcd_send_cmd (0x30);
 800063c:	2030      	movs	r0, #48	@ 0x30
 800063e:	f7ff ff73 	bl	8000528 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000642:	2001      	movs	r0, #1
 8000644:	f000 ff4c 	bl	80014e0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000648:	2030      	movs	r0, #48	@ 0x30
 800064a:	f7ff ff6d 	bl	8000528 <lcd_send_cmd>
	HAL_Delay(10);
 800064e:	200a      	movs	r0, #10
 8000650:	f000 ff46 	bl	80014e0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000654:	2020      	movs	r0, #32
 8000656:	f7ff ff67 	bl	8000528 <lcd_send_cmd>
	HAL_Delay(10);
 800065a:	200a      	movs	r0, #10
 800065c:	f000 ff40 	bl	80014e0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000660:	2028      	movs	r0, #40	@ 0x28
 8000662:	f7ff ff61 	bl	8000528 <lcd_send_cmd>
	HAL_Delay(1);
 8000666:	2001      	movs	r0, #1
 8000668:	f000 ff3a 	bl	80014e0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800066c:	2008      	movs	r0, #8
 800066e:	f7ff ff5b 	bl	8000528 <lcd_send_cmd>
	HAL_Delay(1);
 8000672:	2001      	movs	r0, #1
 8000674:	f000 ff34 	bl	80014e0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000678:	2001      	movs	r0, #1
 800067a:	f7ff ff55 	bl	8000528 <lcd_send_cmd>
	HAL_Delay(1);
 800067e:	2001      	movs	r0, #1
 8000680:	f000 ff2e 	bl	80014e0 <HAL_Delay>
	HAL_Delay(1);
 8000684:	2001      	movs	r0, #1
 8000686:	f000 ff2b 	bl	80014e0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800068a:	2006      	movs	r0, #6
 800068c:	f7ff ff4c 	bl	8000528 <lcd_send_cmd>
	HAL_Delay(1);
 8000690:	2001      	movs	r0, #1
 8000692:	f000 ff25 	bl	80014e0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000696:	200c      	movs	r0, #12
 8000698:	f7ff ff46 	bl	8000528 <lcd_send_cmd>
}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}

080006a0 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80006a8:	e006      	b.n	80006b8 <lcd_send_string+0x18>
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	1c5a      	adds	r2, r3, #1
 80006ae:	607a      	str	r2, [r7, #4]
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff68 	bl	8000588 <lcd_send_data>
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d1f4      	bne.n	80006aa <lcd_send_string+0xa>
}
 80006c0:	bf00      	nop
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
	...

080006cc <delay_in_us>:
uint32_t diff = 0;
uint8_t is_first_captured = 0; // Has the first value been captured
uint8_t distance  = 0;

// Function that delays in microseconds (usec)
void delay_in_us (uint16_t time) {
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <delay_in_us+0x30>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2200      	movs	r2, #0
 80006dc:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) <  time);
 80006de:	bf00      	nop
 80006e0:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <delay_in_us+0x30>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80006e6:	88fb      	ldrh	r3, [r7, #6]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d3f9      	bcc.n	80006e0 <delay_in_us+0x14>
}
 80006ec:	bf00      	nop
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	200002a4 	.word	0x200002a4

08000700 <HAL_TIM_IC_CaptureCallback>:

// Input Capture Callback ISR
// No function prototype because it is ISR and a HAL function
void HAL_TIM_IC_CaptureCallback (TIM_HandleTypeDef *htim) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) { // If the interrupt source is channel 1
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	7f1b      	ldrb	r3, [r3, #28]
 800070c:	2b01      	cmp	r3, #1
 800070e:	d17a      	bne.n	8000806 <HAL_TIM_IC_CaptureCallback+0x106>
		if (is_first_captured == 0) { // If the first value is not captured
 8000710:	4b41      	ldr	r3, [pc, #260]	@ (8000818 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d11a      	bne.n	800074e <HAL_TIM_IC_CaptureCallback+0x4e>
			val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // Read the first value
 8000718:	2100      	movs	r1, #0
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f004 f88c 	bl	8004838 <HAL_TIM_ReadCapturedValue>
 8000720:	4603      	mov	r3, r0
 8000722:	4a3e      	ldr	r2, [pc, #248]	@ (800081c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000724:	6013      	str	r3, [r2, #0]
			is_first_captured = 1;
 8000726:	4b3c      	ldr	r3, [pc, #240]	@ (8000818 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000728:	2201      	movs	r2, #1
 800072a:	701a      	strb	r2, [r3, #0]
			// Change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	6a1a      	ldr	r2, [r3, #32]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f022 020a 	bic.w	r2, r2, #10
 800073a:	621a      	str	r2, [r3, #32]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	6a1a      	ldr	r2, [r3, #32]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f042 0202 	orr.w	r2, r2, #2
 800074a:	621a      	str	r2, [r3, #32]
			// Set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 800074c:	e05b      	b.n	8000806 <HAL_TIM_IC_CaptureCallback+0x106>
		else if (is_first_captured == 1) { // If the first is already captured
 800074e:	4b32      	ldr	r3, [pc, #200]	@ (8000818 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d157      	bne.n	8000806 <HAL_TIM_IC_CaptureCallback+0x106>
			val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // Read second value
 8000756:	2100      	movs	r1, #0
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f004 f86d 	bl	8004838 <HAL_TIM_ReadCapturedValue>
 800075e:	4603      	mov	r3, r0
 8000760:	4a2f      	ldr	r2, [pc, #188]	@ (8000820 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000762:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // Reset the counter
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2200      	movs	r2, #0
 800076a:	625a      	str	r2, [r3, #36]	@ 0x24
			if (val2 > val1) {
 800076c:	4b2c      	ldr	r3, [pc, #176]	@ (8000820 <HAL_TIM_IC_CaptureCallback+0x120>)
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	4b2a      	ldr	r3, [pc, #168]	@ (800081c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	429a      	cmp	r2, r3
 8000776:	d907      	bls.n	8000788 <HAL_TIM_IC_CaptureCallback+0x88>
				diff = val2 - val1; // diff is in microseconds
 8000778:	4b29      	ldr	r3, [pc, #164]	@ (8000820 <HAL_TIM_IC_CaptureCallback+0x120>)
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b27      	ldr	r3, [pc, #156]	@ (800081c <HAL_TIM_IC_CaptureCallback+0x11c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	4a28      	ldr	r2, [pc, #160]	@ (8000824 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000784:	6013      	str	r3, [r2, #0]
 8000786:	e00f      	b.n	80007a8 <HAL_TIM_IC_CaptureCallback+0xa8>
			else if (val1 > val2) {
 8000788:	4b24      	ldr	r3, [pc, #144]	@ (800081c <HAL_TIM_IC_CaptureCallback+0x11c>)
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4b24      	ldr	r3, [pc, #144]	@ (8000820 <HAL_TIM_IC_CaptureCallback+0x120>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	429a      	cmp	r2, r3
 8000792:	d909      	bls.n	80007a8 <HAL_TIM_IC_CaptureCallback+0xa8>
				diff = (0xffff - val1) + val2;  // diff is in microseconds
 8000794:	4b22      	ldr	r3, [pc, #136]	@ (8000820 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	4b20      	ldr	r3, [pc, #128]	@ (800081c <HAL_TIM_IC_CaptureCallback+0x11c>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	1ad2      	subs	r2, r2, r3
 800079e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007a2:	4413      	add	r3, r2
 80007a4:	4a1f      	ldr	r2, [pc, #124]	@ (8000824 <HAL_TIM_IC_CaptureCallback+0x124>)
 80007a6:	6013      	str	r3, [r2, #0]
			distance = diff * .034/2;  // UNITS BREAKDOWN: (10^(-6) s) * (10^4 m/s) = 10^(-2) m = cm -> distance is in cm
 80007a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000824 <HAL_TIM_IC_CaptureCallback+0x124>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	ee07 3a90 	vmov	s15, r3
 80007b0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80007b4:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 8000810 <HAL_TIM_IC_CaptureCallback+0x110>
 80007b8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007bc:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 80007c0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80007c4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007c8:	edc7 7a00 	vstr	s15, [r7]
 80007cc:	783b      	ldrb	r3, [r7, #0]
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <HAL_TIM_IC_CaptureCallback+0x128>)
 80007d2:	701a      	strb	r2, [r3, #0]
			is_first_captured = 0; // Set back to false
 80007d4:	4b10      	ldr	r3, [pc, #64]	@ (8000818 <HAL_TIM_IC_CaptureCallback+0x118>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	6a1a      	ldr	r2, [r3, #32]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f022 020a 	bic.w	r2, r2, #10
 80007e8:	621a      	str	r2, [r3, #32]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	6a12      	ldr	r2, [r2, #32]
 80007f4:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 80007f6:	4b0d      	ldr	r3, [pc, #52]	@ (800082c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	68da      	ldr	r2, [r3, #12]
 80007fc:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f022 0202 	bic.w	r2, r2, #2
 8000804:	60da      	str	r2, [r3, #12]
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	b020c49c 	.word	0xb020c49c
 8000814:	3fa16872 	.word	0x3fa16872
 8000818:	20000864 	.word	0x20000864
 800081c:	20000858 	.word	0x20000858
 8000820:	2000085c 	.word	0x2000085c
 8000824:	20000860 	.word	0x20000860
 8000828:	20000865 	.word	0x20000865
 800082c:	200002a4 	.word	0x200002a4

08000830 <HCSR04_Read>:

// Drive TRIG Pin
static void HCSR04_Read (void) {
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000834:	2201      	movs	r2, #1
 8000836:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800083a:	480b      	ldr	r0, [pc, #44]	@ (8000868 <HCSR04_Read+0x38>)
 800083c:	f001 fc80 	bl	8002140 <HAL_GPIO_WritePin>
	delay_in_us(10);  // wait for 10 us
 8000840:	200a      	movs	r0, #10
 8000842:	f7ff ff43 	bl	80006cc <delay_in_us>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000846:	2200      	movs	r2, #0
 8000848:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800084c:	4806      	ldr	r0, [pc, #24]	@ (8000868 <HCSR04_Read+0x38>)
 800084e:	f001 fc77 	bl	8002140 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000852:	4b06      	ldr	r3, [pc, #24]	@ (800086c <HCSR04_Read+0x3c>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	68da      	ldr	r2, [r3, #12]
 8000858:	4b04      	ldr	r3, [pc, #16]	@ (800086c <HCSR04_Read+0x3c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f042 0202 	orr.w	r2, r2, #2
 8000860:	60da      	str	r2, [r3, #12]
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40021000 	.word	0x40021000
 800086c:	200002a4 	.word	0x200002a4

08000870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000874:	f000 fdd7 	bl	8001426 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000878:	f000 f862 	bl	8000940 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087c:	f000 fa32 	bl	8000ce4 <MX_GPIO_Init>
  MX_ETH_Init();
 8000880:	f000 f8ce 	bl	8000a20 <MX_ETH_Init>
  MX_TIM1_Init();
 8000884:	f000 f95a 	bl	8000b3c <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000888:	f000 f9ce 	bl	8000c28 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800088c:	f000 f9fc 	bl	8000c88 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000890:	f000 f914 	bl	8000abc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000894:	f7ff fec7 	bl	8000626 <lcd_init>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000898:	2100      	movs	r1, #0
 800089a:	4823      	ldr	r0, [pc, #140]	@ (8000928 <main+0xb8>)
 800089c:	f003 fc0e 	bl	80040bc <HAL_TIM_IC_Start_IT>
  lcd_send_string ("Dist= ");
 80008a0:	4822      	ldr	r0, [pc, #136]	@ (800092c <main+0xbc>)
 80008a2:	f7ff fefd 	bl	80006a0 <lcd_send_string>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HCSR04_Read();
 80008a6:	f7ff ffc3 	bl	8000830 <HCSR04_Read>
	lcd_put_cur(0, 6);
 80008aa:	2106      	movs	r1, #6
 80008ac:	2000      	movs	r0, #0
 80008ae:	f7ff fe9b 	bl	80005e8 <lcd_put_cur>
	lcd_send_data((distance/100) + 48);   // 100th pos
 80008b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000930 <main+0xc0>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	4a1f      	ldr	r2, [pc, #124]	@ (8000934 <main+0xc4>)
 80008b8:	fba2 2303 	umull	r2, r3, r2, r3
 80008bc:	095b      	lsrs	r3, r3, #5
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	3330      	adds	r3, #48	@ 0x30
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff fe5f 	bl	8000588 <lcd_send_data>
	lcd_send_data(((distance/10)%10) +48);  // 10th pos
 80008ca:	4b19      	ldr	r3, [pc, #100]	@ (8000930 <main+0xc0>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	4a1a      	ldr	r2, [pc, #104]	@ (8000938 <main+0xc8>)
 80008d0:	fba2 2303 	umull	r2, r3, r2, r3
 80008d4:	08db      	lsrs	r3, r3, #3
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	4b17      	ldr	r3, [pc, #92]	@ (8000938 <main+0xc8>)
 80008da:	fba3 1302 	umull	r1, r3, r3, r2
 80008de:	08d9      	lsrs	r1, r3, #3
 80008e0:	460b      	mov	r3, r1
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	440b      	add	r3, r1
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	3330      	adds	r3, #48	@ 0x30
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff fe49 	bl	8000588 <lcd_send_data>
	lcd_send_data((distance%10)+48);  // 1st pos
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <main+0xc0>)
 80008f8:	781a      	ldrb	r2, [r3, #0]
 80008fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <main+0xc8>)
 80008fc:	fba3 1302 	umull	r1, r3, r3, r2
 8000900:	08d9      	lsrs	r1, r3, #3
 8000902:	460b      	mov	r3, r1
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	440b      	add	r3, r1
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	1ad3      	subs	r3, r2, r3
 800090c:	b2db      	uxtb	r3, r3
 800090e:	3330      	adds	r3, #48	@ 0x30
 8000910:	b2db      	uxtb	r3, r3
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff fe38 	bl	8000588 <lcd_send_data>
	lcd_send_string(" cm");
 8000918:	4808      	ldr	r0, [pc, #32]	@ (800093c <main+0xcc>)
 800091a:	f7ff fec1 	bl	80006a0 <lcd_send_string>
	HAL_Delay(200);
 800091e:	20c8      	movs	r0, #200	@ 0xc8
 8000920:	f000 fdde 	bl	80014e0 <HAL_Delay>
	HCSR04_Read();
 8000924:	bf00      	nop
 8000926:	e7be      	b.n	80008a6 <main+0x36>
 8000928:	200002a4 	.word	0x200002a4
 800092c:	08005f80 	.word	0x08005f80
 8000930:	20000865 	.word	0x20000865
 8000934:	51eb851f 	.word	0x51eb851f
 8000938:	cccccccd 	.word	0xcccccccd
 800093c:	08005f88 	.word	0x08005f88

08000940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b094      	sub	sp, #80	@ 0x50
 8000944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	2234      	movs	r2, #52	@ 0x34
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f005 fadd 	bl	8005f0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000954:	f107 0308 	add.w	r3, r7, #8
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000964:	4b2c      	ldr	r3, [pc, #176]	@ (8000a18 <SystemClock_Config+0xd8>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000968:	4a2b      	ldr	r2, [pc, #172]	@ (8000a18 <SystemClock_Config+0xd8>)
 800096a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800096e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000970:	4b29      	ldr	r3, [pc, #164]	@ (8000a18 <SystemClock_Config+0xd8>)
 8000972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000974:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800097c:	4b27      	ldr	r3, [pc, #156]	@ (8000a1c <SystemClock_Config+0xdc>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000984:	4a25      	ldr	r2, [pc, #148]	@ (8000a1c <SystemClock_Config+0xdc>)
 8000986:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800098a:	6013      	str	r3, [r2, #0]
 800098c:	4b23      	ldr	r3, [pc, #140]	@ (8000a1c <SystemClock_Config+0xdc>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000998:	2301      	movs	r3, #1
 800099a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800099c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a2:	2302      	movs	r3, #2
 80009a4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009ac:	2304      	movs	r3, #4
 80009ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80009b0:	2360      	movs	r3, #96	@ 0x60
 80009b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009b8:	2304      	movs	r3, #4
 80009ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009bc:	2302      	movs	r3, #2
 80009be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4618      	mov	r0, r3
 80009c6:	f002 f9c5 	bl	8002d54 <HAL_RCC_OscConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009d0:	f000 fa4c 	bl	8000e6c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009d4:	f002 f96e 	bl	8002cb4 <HAL_PWREx_EnableOverDrive>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80009de:	f000 fa45 	bl	8000e6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e2:	230f      	movs	r3, #15
 80009e4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e6:	2302      	movs	r3, #2
 80009e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009f8:	f107 0308 	add.w	r3, r7, #8
 80009fc:	2103      	movs	r1, #3
 80009fe:	4618      	mov	r0, r3
 8000a00:	f002 fc56 	bl	80032b0 <HAL_RCC_ClockConfig>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000a0a:	f000 fa2f 	bl	8000e6c <Error_Handler>
  }
}
 8000a0e:	bf00      	nop
 8000a10:	3750      	adds	r7, #80	@ 0x50
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40007000 	.word	0x40007000

08000a20 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a24:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa4 <MX_ETH_Init+0x84>)
 8000a26:	4a20      	ldr	r2, [pc, #128]	@ (8000aa8 <MX_ETH_Init+0x88>)
 8000a28:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a2a:	4b20      	ldr	r3, [pc, #128]	@ (8000aac <MX_ETH_Init+0x8c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a30:	4b1e      	ldr	r3, [pc, #120]	@ (8000aac <MX_ETH_Init+0x8c>)
 8000a32:	2280      	movs	r2, #128	@ 0x80
 8000a34:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a36:	4b1d      	ldr	r3, [pc, #116]	@ (8000aac <MX_ETH_Init+0x8c>)
 8000a38:	22e1      	movs	r2, #225	@ 0xe1
 8000a3a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000aac <MX_ETH_Init+0x8c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a42:	4b1a      	ldr	r3, [pc, #104]	@ (8000aac <MX_ETH_Init+0x8c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a48:	4b18      	ldr	r3, [pc, #96]	@ (8000aac <MX_ETH_Init+0x8c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a4e:	4b15      	ldr	r3, [pc, #84]	@ (8000aa4 <MX_ETH_Init+0x84>)
 8000a50:	4a16      	ldr	r2, [pc, #88]	@ (8000aac <MX_ETH_Init+0x8c>)
 8000a52:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a54:	4b13      	ldr	r3, [pc, #76]	@ (8000aa4 <MX_ETH_Init+0x84>)
 8000a56:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000a5a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	@ (8000aa4 <MX_ETH_Init+0x84>)
 8000a5e:	4a14      	ldr	r2, [pc, #80]	@ (8000ab0 <MX_ETH_Init+0x90>)
 8000a60:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a62:	4b10      	ldr	r3, [pc, #64]	@ (8000aa4 <MX_ETH_Init+0x84>)
 8000a64:	4a13      	ldr	r2, [pc, #76]	@ (8000ab4 <MX_ETH_Init+0x94>)
 8000a66:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a68:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa4 <MX_ETH_Init+0x84>)
 8000a6a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000a6e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a70:	480c      	ldr	r0, [pc, #48]	@ (8000aa4 <MX_ETH_Init+0x84>)
 8000a72:	f000 fe6b 	bl	800174c <HAL_ETH_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000a7c:	f000 f9f6 	bl	8000e6c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a80:	2238      	movs	r2, #56	@ 0x38
 8000a82:	2100      	movs	r1, #0
 8000a84:	480c      	ldr	r0, [pc, #48]	@ (8000ab8 <MX_ETH_Init+0x98>)
 8000a86:	f005 fa42 	bl	8005f0e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab8 <MX_ETH_Init+0x98>)
 8000a8c:	2221      	movs	r2, #33	@ 0x21
 8000a8e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a90:	4b09      	ldr	r3, [pc, #36]	@ (8000ab8 <MX_ETH_Init+0x98>)
 8000a92:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000a96:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a98:	4b07      	ldr	r3, [pc, #28]	@ (8000ab8 <MX_ETH_Init+0x98>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	200001a0 	.word	0x200001a0
 8000aa8:	40028000 	.word	0x40028000
 8000aac:	20000868 	.word	0x20000868
 8000ab0:	200000ac 	.word	0x200000ac
 8000ab4:	2000000c 	.word	0x2000000c
 8000ab8:	20000168 	.word	0x20000168

08000abc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000ac2:	4a1c      	ldr	r2, [pc, #112]	@ (8000b34 <MX_I2C1_Init+0x78>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b38 <MX_I2C1_Init+0x7c>)
 8000aca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000acc:	4b18      	ldr	r3, [pc, #96]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad2:	4b17      	ldr	r3, [pc, #92]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad8:	4b15      	ldr	r3, [pc, #84]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ade:	4b14      	ldr	r3, [pc, #80]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ae4:	4b12      	ldr	r3, [pc, #72]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aea:	4b11      	ldr	r3, [pc, #68]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000af6:	480e      	ldr	r0, [pc, #56]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000af8:	f001 fb3c 	bl	8002174 <HAL_I2C_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b02:	f000 f9b3 	bl	8000e6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b06:	2100      	movs	r1, #0
 8000b08:	4809      	ldr	r0, [pc, #36]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000b0a:	f001 ff01 	bl	8002910 <HAL_I2CEx_ConfigAnalogFilter>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b14:	f000 f9aa 	bl	8000e6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4805      	ldr	r0, [pc, #20]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000b1c:	f001 ff43 	bl	80029a6 <HAL_I2CEx_ConfigDigitalFilter>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b26:	f000 f9a1 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000250 	.word	0x20000250
 8000b34:	40005400 	.word	0x40005400
 8000b38:	20303e5d 	.word	0x20303e5d

08000b3c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08c      	sub	sp, #48	@ 0x30
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b42:	f107 0320 	add.w	r3, r7, #32
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b68:	4b2d      	ldr	r3, [pc, #180]	@ (8000c20 <MX_TIM1_Init+0xe4>)
 8000b6a:	4a2e      	ldr	r2, [pc, #184]	@ (8000c24 <MX_TIM1_Init+0xe8>)
 8000b6c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 8000b6e:	4b2c      	ldr	r3, [pc, #176]	@ (8000c20 <MX_TIM1_Init+0xe4>)
 8000b70:	225f      	movs	r2, #95	@ 0x5f
 8000b72:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b74:	4b2a      	ldr	r3, [pc, #168]	@ (8000c20 <MX_TIM1_Init+0xe4>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000b7a:	4b29      	ldr	r3, [pc, #164]	@ (8000c20 <MX_TIM1_Init+0xe4>)
 8000b7c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000b80:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b82:	4b27      	ldr	r3, [pc, #156]	@ (8000c20 <MX_TIM1_Init+0xe4>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b88:	4b25      	ldr	r3, [pc, #148]	@ (8000c20 <MX_TIM1_Init+0xe4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8e:	4b24      	ldr	r3, [pc, #144]	@ (8000c20 <MX_TIM1_Init+0xe4>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b94:	4822      	ldr	r0, [pc, #136]	@ (8000c20 <MX_TIM1_Init+0xe4>)
 8000b96:	f003 f9d9 	bl	8003f4c <HAL_TIM_Base_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000ba0:	f000 f964 	bl	8000e6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ba8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000baa:	f107 0320 	add.w	r3, r7, #32
 8000bae:	4619      	mov	r1, r3
 8000bb0:	481b      	ldr	r0, [pc, #108]	@ (8000c20 <MX_TIM1_Init+0xe4>)
 8000bb2:	f003 fd77 	bl	80046a4 <HAL_TIM_ConfigClockSource>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000bbc:	f000 f956 	bl	8000e6c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000bc0:	4817      	ldr	r0, [pc, #92]	@ (8000c20 <MX_TIM1_Init+0xe4>)
 8000bc2:	f003 fa1a 	bl	8003ffa <HAL_TIM_IC_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000bcc:	f000 f94e 	bl	8000e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	480f      	ldr	r0, [pc, #60]	@ (8000c20 <MX_TIM1_Init+0xe4>)
 8000be4:	f004 f92a 	bl	8004e3c <HAL_TIMEx_MasterConfigSynchronization>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000bee:	f000 f93d 	bl	8000e6c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	2200      	movs	r2, #0
 8000c06:	4619      	mov	r1, r3
 8000c08:	4805      	ldr	r0, [pc, #20]	@ (8000c20 <MX_TIM1_Init+0xe4>)
 8000c0a:	f003 fcae 	bl	800456a <HAL_TIM_IC_ConfigChannel>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000c14:	f000 f92a 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	3730      	adds	r7, #48	@ 0x30
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	200002a4 	.word	0x200002a4
 8000c24:	40010000 	.word	0x40010000

08000c28 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c2c:	4b14      	ldr	r3, [pc, #80]	@ (8000c80 <MX_USART3_UART_Init+0x58>)
 8000c2e:	4a15      	ldr	r2, [pc, #84]	@ (8000c84 <MX_USART3_UART_Init+0x5c>)
 8000c30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c32:	4b13      	ldr	r3, [pc, #76]	@ (8000c80 <MX_USART3_UART_Init+0x58>)
 8000c34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3a:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <MX_USART3_UART_Init+0x58>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	@ (8000c80 <MX_USART3_UART_Init+0x58>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <MX_USART3_UART_Init+0x58>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <MX_USART3_UART_Init+0x58>)
 8000c4e:	220c      	movs	r2, #12
 8000c50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c52:	4b0b      	ldr	r3, [pc, #44]	@ (8000c80 <MX_USART3_UART_Init+0x58>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c58:	4b09      	ldr	r3, [pc, #36]	@ (8000c80 <MX_USART3_UART_Init+0x58>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c5e:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <MX_USART3_UART_Init+0x58>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c64:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <MX_USART3_UART_Init+0x58>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c6a:	4805      	ldr	r0, [pc, #20]	@ (8000c80 <MX_USART3_UART_Init+0x58>)
 8000c6c:	f004 f992 	bl	8004f94 <HAL_UART_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c76:	f000 f8f9 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	200002f0 	.word	0x200002f0
 8000c84:	40004800 	.word	0x40004800

08000c88 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ce0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c8e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000c92:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c94:	4b12      	ldr	r3, [pc, #72]	@ (8000ce0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c96:	2206      	movs	r2, #6
 8000c98:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ce0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c9c:	2202      	movs	r2, #2
 8000c9e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ca8:	2202      	movs	r2, #2
 8000caa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000cac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000cb8:	4b09      	ldr	r3, [pc, #36]	@ (8000ce0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000cbe:	4b08      	ldr	r3, [pc, #32]	@ (8000ce0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000cca:	4805      	ldr	r0, [pc, #20]	@ (8000ce0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ccc:	f001 feb7 	bl	8002a3e <HAL_PCD_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000cd6:	f000 f8c9 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000378 	.word	0x20000378

08000ce4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08c      	sub	sp, #48	@ 0x30
 8000ce8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cea:	f107 031c 	add.w	r3, r7, #28
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfa:	4b57      	ldr	r3, [pc, #348]	@ (8000e58 <MX_GPIO_Init+0x174>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	4a56      	ldr	r2, [pc, #344]	@ (8000e58 <MX_GPIO_Init+0x174>)
 8000d00:	f043 0304 	orr.w	r3, r3, #4
 8000d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d06:	4b54      	ldr	r3, [pc, #336]	@ (8000e58 <MX_GPIO_Init+0x174>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	f003 0304 	and.w	r3, r3, #4
 8000d0e:	61bb      	str	r3, [r7, #24]
 8000d10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d12:	4b51      	ldr	r3, [pc, #324]	@ (8000e58 <MX_GPIO_Init+0x174>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	4a50      	ldr	r2, [pc, #320]	@ (8000e58 <MX_GPIO_Init+0x174>)
 8000d18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1e:	4b4e      	ldr	r3, [pc, #312]	@ (8000e58 <MX_GPIO_Init+0x174>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	4b4b      	ldr	r3, [pc, #300]	@ (8000e58 <MX_GPIO_Init+0x174>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	4a4a      	ldr	r2, [pc, #296]	@ (8000e58 <MX_GPIO_Init+0x174>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d36:	4b48      	ldr	r3, [pc, #288]	@ (8000e58 <MX_GPIO_Init+0x174>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d42:	4b45      	ldr	r3, [pc, #276]	@ (8000e58 <MX_GPIO_Init+0x174>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	4a44      	ldr	r2, [pc, #272]	@ (8000e58 <MX_GPIO_Init+0x174>)
 8000d48:	f043 0302 	orr.w	r3, r3, #2
 8000d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4e:	4b42      	ldr	r3, [pc, #264]	@ (8000e58 <MX_GPIO_Init+0x174>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d5a:	4b3f      	ldr	r3, [pc, #252]	@ (8000e58 <MX_GPIO_Init+0x174>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	4a3e      	ldr	r2, [pc, #248]	@ (8000e58 <MX_GPIO_Init+0x174>)
 8000d60:	f043 0310 	orr.w	r3, r3, #16
 8000d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d66:	4b3c      	ldr	r3, [pc, #240]	@ (8000e58 <MX_GPIO_Init+0x174>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	f003 0310 	and.w	r3, r3, #16
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d72:	4b39      	ldr	r3, [pc, #228]	@ (8000e58 <MX_GPIO_Init+0x174>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	4a38      	ldr	r2, [pc, #224]	@ (8000e58 <MX_GPIO_Init+0x174>)
 8000d78:	f043 0308 	orr.w	r3, r3, #8
 8000d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7e:	4b36      	ldr	r3, [pc, #216]	@ (8000e58 <MX_GPIO_Init+0x174>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	f003 0308 	and.w	r3, r3, #8
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d8a:	4b33      	ldr	r3, [pc, #204]	@ (8000e58 <MX_GPIO_Init+0x174>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	4a32      	ldr	r2, [pc, #200]	@ (8000e58 <MX_GPIO_Init+0x174>)
 8000d90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d96:	4b30      	ldr	r3, [pc, #192]	@ (8000e58 <MX_GPIO_Init+0x174>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000da8:	482c      	ldr	r0, [pc, #176]	@ (8000e5c <MX_GPIO_Init+0x178>)
 8000daa:	f001 f9c9 	bl	8002140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000db4:	482a      	ldr	r0, [pc, #168]	@ (8000e60 <MX_GPIO_Init+0x17c>)
 8000db6:	f001 f9c3 	bl	8002140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2140      	movs	r1, #64	@ 0x40
 8000dbe:	4829      	ldr	r0, [pc, #164]	@ (8000e64 <MX_GPIO_Init+0x180>)
 8000dc0:	f001 f9be 	bl	8002140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000dc4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000dce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000dd4:	f107 031c 	add.w	r3, r7, #28
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4823      	ldr	r0, [pc, #140]	@ (8000e68 <MX_GPIO_Init+0x184>)
 8000ddc:	f001 f804 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000de0:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de6:	2301      	movs	r3, #1
 8000de8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	4818      	ldr	r0, [pc, #96]	@ (8000e5c <MX_GPIO_Init+0x178>)
 8000dfa:	f000 fff5 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000dfe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e04:	2301      	movs	r3, #1
 8000e06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e10:	f107 031c 	add.w	r3, r7, #28
 8000e14:	4619      	mov	r1, r3
 8000e16:	4812      	ldr	r0, [pc, #72]	@ (8000e60 <MX_GPIO_Init+0x17c>)
 8000e18:	f000 ffe6 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e1c:	2340      	movs	r3, #64	@ 0x40
 8000e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e20:	2301      	movs	r3, #1
 8000e22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	4619      	mov	r1, r3
 8000e32:	480c      	ldr	r0, [pc, #48]	@ (8000e64 <MX_GPIO_Init+0x180>)
 8000e34:	f000 ffd8 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e38:	2380      	movs	r3, #128	@ 0x80
 8000e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e44:	f107 031c 	add.w	r3, r7, #28
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4806      	ldr	r0, [pc, #24]	@ (8000e64 <MX_GPIO_Init+0x180>)
 8000e4c:	f000 ffcc 	bl	8001de8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e50:	bf00      	nop
 8000e52:	3730      	adds	r7, #48	@ 0x30
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020400 	.word	0x40020400
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40021800 	.word	0x40021800
 8000e68:	40020800 	.word	0x40020800

08000e6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e70:	b672      	cpsid	i
}
 8000e72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <Error_Handler+0x8>

08000e78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ebc <HAL_MspInit+0x44>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e82:	4a0e      	ldr	r2, [pc, #56]	@ (8000ebc <HAL_MspInit+0x44>)
 8000e84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ebc <HAL_MspInit+0x44>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e96:	4b09      	ldr	r3, [pc, #36]	@ (8000ebc <HAL_MspInit+0x44>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9a:	4a08      	ldr	r2, [pc, #32]	@ (8000ebc <HAL_MspInit+0x44>)
 8000e9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ea0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ea2:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <HAL_MspInit+0x44>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ea6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	40023800 	.word	0x40023800

08000ec0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08e      	sub	sp, #56	@ 0x38
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a4e      	ldr	r2, [pc, #312]	@ (8001018 <HAL_ETH_MspInit+0x158>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	f040 8096 	bne.w	8001010 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ee4:	4b4d      	ldr	r3, [pc, #308]	@ (800101c <HAL_ETH_MspInit+0x15c>)
 8000ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee8:	4a4c      	ldr	r2, [pc, #304]	@ (800101c <HAL_ETH_MspInit+0x15c>)
 8000eea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000eee:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef0:	4b4a      	ldr	r3, [pc, #296]	@ (800101c <HAL_ETH_MspInit+0x15c>)
 8000ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ef8:	623b      	str	r3, [r7, #32]
 8000efa:	6a3b      	ldr	r3, [r7, #32]
 8000efc:	4b47      	ldr	r3, [pc, #284]	@ (800101c <HAL_ETH_MspInit+0x15c>)
 8000efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f00:	4a46      	ldr	r2, [pc, #280]	@ (800101c <HAL_ETH_MspInit+0x15c>)
 8000f02:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000f06:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f08:	4b44      	ldr	r3, [pc, #272]	@ (800101c <HAL_ETH_MspInit+0x15c>)
 8000f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000f10:	61fb      	str	r3, [r7, #28]
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	4b41      	ldr	r3, [pc, #260]	@ (800101c <HAL_ETH_MspInit+0x15c>)
 8000f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f18:	4a40      	ldr	r2, [pc, #256]	@ (800101c <HAL_ETH_MspInit+0x15c>)
 8000f1a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000f1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f20:	4b3e      	ldr	r3, [pc, #248]	@ (800101c <HAL_ETH_MspInit+0x15c>)
 8000f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000f28:	61bb      	str	r3, [r7, #24]
 8000f2a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2c:	4b3b      	ldr	r3, [pc, #236]	@ (800101c <HAL_ETH_MspInit+0x15c>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f30:	4a3a      	ldr	r2, [pc, #232]	@ (800101c <HAL_ETH_MspInit+0x15c>)
 8000f32:	f043 0304 	orr.w	r3, r3, #4
 8000f36:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f38:	4b38      	ldr	r3, [pc, #224]	@ (800101c <HAL_ETH_MspInit+0x15c>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3c:	f003 0304 	and.w	r3, r3, #4
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f44:	4b35      	ldr	r3, [pc, #212]	@ (800101c <HAL_ETH_MspInit+0x15c>)
 8000f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f48:	4a34      	ldr	r2, [pc, #208]	@ (800101c <HAL_ETH_MspInit+0x15c>)
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f50:	4b32      	ldr	r3, [pc, #200]	@ (800101c <HAL_ETH_MspInit+0x15c>)
 8000f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5c:	4b2f      	ldr	r3, [pc, #188]	@ (800101c <HAL_ETH_MspInit+0x15c>)
 8000f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f60:	4a2e      	ldr	r2, [pc, #184]	@ (800101c <HAL_ETH_MspInit+0x15c>)
 8000f62:	f043 0302 	orr.w	r3, r3, #2
 8000f66:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f68:	4b2c      	ldr	r3, [pc, #176]	@ (800101c <HAL_ETH_MspInit+0x15c>)
 8000f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6c:	f003 0302 	and.w	r3, r3, #2
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f74:	4b29      	ldr	r3, [pc, #164]	@ (800101c <HAL_ETH_MspInit+0x15c>)
 8000f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f78:	4a28      	ldr	r2, [pc, #160]	@ (800101c <HAL_ETH_MspInit+0x15c>)
 8000f7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f80:	4b26      	ldr	r3, [pc, #152]	@ (800101c <HAL_ETH_MspInit+0x15c>)
 8000f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f8c:	2332      	movs	r3, #50	@ 0x32
 8000f8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f9c:	230b      	movs	r3, #11
 8000f9e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	481e      	ldr	r0, [pc, #120]	@ (8001020 <HAL_ETH_MspInit+0x160>)
 8000fa8:	f000 ff1e 	bl	8001de8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000fac:	2386      	movs	r3, #134	@ 0x86
 8000fae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fbc:	230b      	movs	r3, #11
 8000fbe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4817      	ldr	r0, [pc, #92]	@ (8001024 <HAL_ETH_MspInit+0x164>)
 8000fc8:	f000 ff0e 	bl	8001de8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000fcc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fd0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fde:	230b      	movs	r3, #11
 8000fe0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000fe2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	480f      	ldr	r0, [pc, #60]	@ (8001028 <HAL_ETH_MspInit+0x168>)
 8000fea:	f000 fefd 	bl	8001de8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000fee:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ff2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001000:	230b      	movs	r3, #11
 8001002:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001004:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001008:	4619      	mov	r1, r3
 800100a:	4808      	ldr	r0, [pc, #32]	@ (800102c <HAL_ETH_MspInit+0x16c>)
 800100c:	f000 feec 	bl	8001de8 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8001010:	bf00      	nop
 8001012:	3738      	adds	r7, #56	@ 0x38
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40028000 	.word	0x40028000
 800101c:	40023800 	.word	0x40023800
 8001020:	40020800 	.word	0x40020800
 8001024:	40020000 	.word	0x40020000
 8001028:	40020400 	.word	0x40020400
 800102c:	40021800 	.word	0x40021800

08001030 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b0ae      	sub	sp, #184	@ 0xb8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	2290      	movs	r2, #144	@ 0x90
 800104e:	2100      	movs	r1, #0
 8001050:	4618      	mov	r0, r3
 8001052:	f004 ff5c 	bl	8005f0e <memset>
  if(hi2c->Instance==I2C1)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a22      	ldr	r2, [pc, #136]	@ (80010e4 <HAL_I2C_MspInit+0xb4>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d13c      	bne.n	80010da <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001060:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001064:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001066:	2300      	movs	r3, #0
 8001068:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	4618      	mov	r0, r3
 8001070:	f002 fb44 	bl	80036fc <HAL_RCCEx_PeriphCLKConfig>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800107a:	f7ff fef7 	bl	8000e6c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107e:	4b1a      	ldr	r3, [pc, #104]	@ (80010e8 <HAL_I2C_MspInit+0xb8>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001082:	4a19      	ldr	r2, [pc, #100]	@ (80010e8 <HAL_I2C_MspInit+0xb8>)
 8001084:	f043 0302 	orr.w	r3, r3, #2
 8001088:	6313      	str	r3, [r2, #48]	@ 0x30
 800108a:	4b17      	ldr	r3, [pc, #92]	@ (80010e8 <HAL_I2C_MspInit+0xb8>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001096:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800109a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800109e:	2312      	movs	r3, #18
 80010a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010a4:	2301      	movs	r3, #1
 80010a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010aa:	2303      	movs	r3, #3
 80010ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010b0:	2304      	movs	r3, #4
 80010b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010ba:	4619      	mov	r1, r3
 80010bc:	480b      	ldr	r0, [pc, #44]	@ (80010ec <HAL_I2C_MspInit+0xbc>)
 80010be:	f000 fe93 	bl	8001de8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010c2:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <HAL_I2C_MspInit+0xb8>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c6:	4a08      	ldr	r2, [pc, #32]	@ (80010e8 <HAL_I2C_MspInit+0xb8>)
 80010c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ce:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <HAL_I2C_MspInit+0xb8>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80010da:	bf00      	nop
 80010dc:	37b8      	adds	r7, #184	@ 0xb8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40005400 	.word	0x40005400
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40020400 	.word	0x40020400

080010f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	@ 0x28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a1b      	ldr	r2, [pc, #108]	@ (800117c <HAL_TIM_Base_MspInit+0x8c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d130      	bne.n	8001174 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001112:	4b1b      	ldr	r3, [pc, #108]	@ (8001180 <HAL_TIM_Base_MspInit+0x90>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001116:	4a1a      	ldr	r2, [pc, #104]	@ (8001180 <HAL_TIM_Base_MspInit+0x90>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6453      	str	r3, [r2, #68]	@ 0x44
 800111e:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <HAL_TIM_Base_MspInit+0x90>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800112a:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <HAL_TIM_Base_MspInit+0x90>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	4a14      	ldr	r2, [pc, #80]	@ (8001180 <HAL_TIM_Base_MspInit+0x90>)
 8001130:	f043 0310 	orr.w	r3, r3, #16
 8001134:	6313      	str	r3, [r2, #48]	@ 0x30
 8001136:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <HAL_TIM_Base_MspInit+0x90>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	f003 0310 	and.w	r3, r3, #16
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001142:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001154:	2301      	movs	r3, #1
 8001156:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	4619      	mov	r1, r3
 800115e:	4809      	ldr	r0, [pc, #36]	@ (8001184 <HAL_TIM_Base_MspInit+0x94>)
 8001160:	f000 fe42 	bl	8001de8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001164:	2200      	movs	r2, #0
 8001166:	2100      	movs	r1, #0
 8001168:	201b      	movs	r0, #27
 800116a:	f000 fab8 	bl	80016de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800116e:	201b      	movs	r0, #27
 8001170:	f000 fad1 	bl	8001716 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001174:	bf00      	nop
 8001176:	3728      	adds	r7, #40	@ 0x28
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40010000 	.word	0x40010000
 8001180:	40023800 	.word	0x40023800
 8001184:	40021000 	.word	0x40021000

08001188 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b0ae      	sub	sp, #184	@ 0xb8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	2290      	movs	r2, #144	@ 0x90
 80011a6:	2100      	movs	r1, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f004 feb0 	bl	8005f0e <memset>
  if(huart->Instance==USART3)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a22      	ldr	r2, [pc, #136]	@ (800123c <HAL_UART_MspInit+0xb4>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d13c      	bne.n	8001232 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011bc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011be:	2300      	movs	r3, #0
 80011c0:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	4618      	mov	r0, r3
 80011c8:	f002 fa98 	bl	80036fc <HAL_RCCEx_PeriphCLKConfig>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011d2:	f7ff fe4b 	bl	8000e6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001240 <HAL_UART_MspInit+0xb8>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011da:	4a19      	ldr	r2, [pc, #100]	@ (8001240 <HAL_UART_MspInit+0xb8>)
 80011dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011e2:	4b17      	ldr	r3, [pc, #92]	@ (8001240 <HAL_UART_MspInit+0xb8>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ee:	4b14      	ldr	r3, [pc, #80]	@ (8001240 <HAL_UART_MspInit+0xb8>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a13      	ldr	r2, [pc, #76]	@ (8001240 <HAL_UART_MspInit+0xb8>)
 80011f4:	f043 0308 	orr.w	r3, r3, #8
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b11      	ldr	r3, [pc, #68]	@ (8001240 <HAL_UART_MspInit+0xb8>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f003 0308 	and.w	r3, r3, #8
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001206:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800120a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121a:	2303      	movs	r3, #3
 800121c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001220:	2307      	movs	r3, #7
 8001222:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001226:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	@ (8001244 <HAL_UART_MspInit+0xbc>)
 800122e:	f000 fddb 	bl	8001de8 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001232:	bf00      	nop
 8001234:	37b8      	adds	r7, #184	@ 0xb8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40004800 	.word	0x40004800
 8001240:	40023800 	.word	0x40023800
 8001244:	40020c00 	.word	0x40020c00

08001248 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b0ae      	sub	sp, #184	@ 0xb8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2290      	movs	r2, #144	@ 0x90
 8001266:	2100      	movs	r1, #0
 8001268:	4618      	mov	r0, r3
 800126a:	f004 fe50 	bl	8005f0e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001276:	d159      	bne.n	800132c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001278:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800127c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800127e:	2300      	movs	r3, #0
 8001280:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	4618      	mov	r0, r3
 800128a:	f002 fa37 	bl	80036fc <HAL_RCCEx_PeriphCLKConfig>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001294:	f7ff fdea 	bl	8000e6c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001298:	4b26      	ldr	r3, [pc, #152]	@ (8001334 <HAL_PCD_MspInit+0xec>)
 800129a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129c:	4a25      	ldr	r2, [pc, #148]	@ (8001334 <HAL_PCD_MspInit+0xec>)
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a4:	4b23      	ldr	r3, [pc, #140]	@ (8001334 <HAL_PCD_MspInit+0xec>)
 80012a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	613b      	str	r3, [r7, #16]
 80012ae:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80012b0:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80012b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c4:	2303      	movs	r3, #3
 80012c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012ca:	230a      	movs	r3, #10
 80012cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012d4:	4619      	mov	r1, r3
 80012d6:	4818      	ldr	r0, [pc, #96]	@ (8001338 <HAL_PCD_MspInit+0xf0>)
 80012d8:	f000 fd86 	bl	8001de8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80012dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e4:	2300      	movs	r3, #0
 80012e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012f0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012f4:	4619      	mov	r1, r3
 80012f6:	4810      	ldr	r0, [pc, #64]	@ (8001338 <HAL_PCD_MspInit+0xf0>)
 80012f8:	f000 fd76 	bl	8001de8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001334 <HAL_PCD_MspInit+0xec>)
 80012fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001300:	4a0c      	ldr	r2, [pc, #48]	@ (8001334 <HAL_PCD_MspInit+0xec>)
 8001302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001306:	6353      	str	r3, [r2, #52]	@ 0x34
 8001308:	4b0a      	ldr	r3, [pc, #40]	@ (8001334 <HAL_PCD_MspInit+0xec>)
 800130a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800130c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	4b07      	ldr	r3, [pc, #28]	@ (8001334 <HAL_PCD_MspInit+0xec>)
 8001316:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001318:	4a06      	ldr	r2, [pc, #24]	@ (8001334 <HAL_PCD_MspInit+0xec>)
 800131a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800131e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001320:	4b04      	ldr	r3, [pc, #16]	@ (8001334 <HAL_PCD_MspInit+0xec>)
 8001322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001324:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800132c:	bf00      	nop
 800132e:	37b8      	adds	r7, #184	@ 0xb8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40023800 	.word	0x40023800
 8001338:	40020000 	.word	0x40020000

0800133c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <NMI_Handler+0x4>

08001344 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <HardFault_Handler+0x4>

0800134c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <MemManage_Handler+0x4>

08001354 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <BusFault_Handler+0x4>

0800135c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <UsageFault_Handler+0x4>

08001364 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001392:	f000 f885 	bl	80014a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013a0:	4802      	ldr	r0, [pc, #8]	@ (80013ac <TIM1_CC_IRQHandler+0x10>)
 80013a2:	f002 ffdb 	bl	800435c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200002a4 	.word	0x200002a4

080013b0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b4:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <SystemInit+0x20>)
 80013b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013ba:	4a05      	ldr	r2, [pc, #20]	@ (80013d0 <SystemInit+0x20>)
 80013bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800140c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013d8:	f7ff ffea 	bl	80013b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013dc:	480c      	ldr	r0, [pc, #48]	@ (8001410 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013de:	490d      	ldr	r1, [pc, #52]	@ (8001414 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001418 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e4:	e002      	b.n	80013ec <LoopCopyDataInit>

080013e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ea:	3304      	adds	r3, #4

080013ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f0:	d3f9      	bcc.n	80013e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f2:	4a0a      	ldr	r2, [pc, #40]	@ (800141c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001420 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f8:	e001      	b.n	80013fe <LoopFillZerobss>

080013fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013fc:	3204      	adds	r2, #4

080013fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001400:	d3fb      	bcc.n	80013fa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001402:	f004 fd8d 	bl	8005f20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001406:	f7ff fa33 	bl	8000870 <main>
  bx  lr    
 800140a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800140c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001414:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001418:	08005fb4 	.word	0x08005fb4
  ldr r2, =_sbss
 800141c:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8001420:	20000874 	.word	0x20000874

08001424 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001424:	e7fe      	b.n	8001424 <ADC_IRQHandler>

08001426 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800142a:	2003      	movs	r0, #3
 800142c:	f000 f94c 	bl	80016c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001430:	2000      	movs	r0, #0
 8001432:	f000 f805 	bl	8001440 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001436:	f7ff fd1f 	bl	8000e78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	bd80      	pop	{r7, pc}

08001440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001448:	4b12      	ldr	r3, [pc, #72]	@ (8001494 <HAL_InitTick+0x54>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b12      	ldr	r3, [pc, #72]	@ (8001498 <HAL_InitTick+0x58>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	4619      	mov	r1, r3
 8001452:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001456:	fbb3 f3f1 	udiv	r3, r3, r1
 800145a:	fbb2 f3f3 	udiv	r3, r2, r3
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f967 	bl	8001732 <HAL_SYSTICK_Config>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e00e      	b.n	800148c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b0f      	cmp	r3, #15
 8001472:	d80a      	bhi.n	800148a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001474:	2200      	movs	r2, #0
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	f04f 30ff 	mov.w	r0, #4294967295
 800147c:	f000 f92f 	bl	80016de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001480:	4a06      	ldr	r2, [pc, #24]	@ (800149c <HAL_InitTick+0x5c>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001486:	2300      	movs	r3, #0
 8001488:	e000      	b.n	800148c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000000 	.word	0x20000000
 8001498:	20000008 	.word	0x20000008
 800149c:	20000004 	.word	0x20000004

080014a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a4:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <HAL_IncTick+0x20>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <HAL_IncTick+0x24>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	4a04      	ldr	r2, [pc, #16]	@ (80014c4 <HAL_IncTick+0x24>)
 80014b2:	6013      	str	r3, [r2, #0]
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	20000008 	.word	0x20000008
 80014c4:	20000870 	.word	0x20000870

080014c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return uwTick;
 80014cc:	4b03      	ldr	r3, [pc, #12]	@ (80014dc <HAL_GetTick+0x14>)
 80014ce:	681b      	ldr	r3, [r3, #0]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	20000870 	.word	0x20000870

080014e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e8:	f7ff ffee 	bl	80014c8 <HAL_GetTick>
 80014ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f8:	d005      	beq.n	8001506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001524 <HAL_Delay+0x44>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4413      	add	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001506:	bf00      	nop
 8001508:	f7ff ffde 	bl	80014c8 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	429a      	cmp	r2, r3
 8001516:	d8f7      	bhi.n	8001508 <HAL_Delay+0x28>
  {
  }
}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000008 	.word	0x20000008

08001528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001538:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <__NVIC_SetPriorityGrouping+0x40>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001544:	4013      	ands	r3, r2
 8001546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001550:	4b06      	ldr	r3, [pc, #24]	@ (800156c <__NVIC_SetPriorityGrouping+0x44>)
 8001552:	4313      	orrs	r3, r2
 8001554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001556:	4a04      	ldr	r2, [pc, #16]	@ (8001568 <__NVIC_SetPriorityGrouping+0x40>)
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	60d3      	str	r3, [r2, #12]
}
 800155c:	bf00      	nop
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000ed00 	.word	0xe000ed00
 800156c:	05fa0000 	.word	0x05fa0000

08001570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001574:	4b04      	ldr	r3, [pc, #16]	@ (8001588 <__NVIC_GetPriorityGrouping+0x18>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	0a1b      	lsrs	r3, r3, #8
 800157a:	f003 0307 	and.w	r3, r3, #7
}
 800157e:	4618      	mov	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	2b00      	cmp	r3, #0
 800159c:	db0b      	blt.n	80015b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	f003 021f 	and.w	r2, r3, #31
 80015a4:	4907      	ldr	r1, [pc, #28]	@ (80015c4 <__NVIC_EnableIRQ+0x38>)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	095b      	lsrs	r3, r3, #5
 80015ac:	2001      	movs	r0, #1
 80015ae:	fa00 f202 	lsl.w	r2, r0, r2
 80015b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000e100 	.word	0xe000e100

080015c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	6039      	str	r1, [r7, #0]
 80015d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	db0a      	blt.n	80015f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	490c      	ldr	r1, [pc, #48]	@ (8001614 <__NVIC_SetPriority+0x4c>)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	0112      	lsls	r2, r2, #4
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	440b      	add	r3, r1
 80015ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f0:	e00a      	b.n	8001608 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4908      	ldr	r1, [pc, #32]	@ (8001618 <__NVIC_SetPriority+0x50>)
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	3b04      	subs	r3, #4
 8001600:	0112      	lsls	r2, r2, #4
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	440b      	add	r3, r1
 8001606:	761a      	strb	r2, [r3, #24]
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000e100 	.word	0xe000e100
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161c:	b480      	push	{r7}
 800161e:	b089      	sub	sp, #36	@ 0x24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f1c3 0307 	rsb	r3, r3, #7
 8001636:	2b04      	cmp	r3, #4
 8001638:	bf28      	it	cs
 800163a:	2304      	movcs	r3, #4
 800163c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3304      	adds	r3, #4
 8001642:	2b06      	cmp	r3, #6
 8001644:	d902      	bls.n	800164c <NVIC_EncodePriority+0x30>
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3b03      	subs	r3, #3
 800164a:	e000      	b.n	800164e <NVIC_EncodePriority+0x32>
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001650:	f04f 32ff 	mov.w	r2, #4294967295
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43da      	mvns	r2, r3
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	401a      	ands	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001664:	f04f 31ff 	mov.w	r1, #4294967295
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa01 f303 	lsl.w	r3, r1, r3
 800166e:	43d9      	mvns	r1, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	4313      	orrs	r3, r2
         );
}
 8001676:	4618      	mov	r0, r3
 8001678:	3724      	adds	r7, #36	@ 0x24
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3b01      	subs	r3, #1
 8001690:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001694:	d301      	bcc.n	800169a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001696:	2301      	movs	r3, #1
 8001698:	e00f      	b.n	80016ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800169a:	4a0a      	ldr	r2, [pc, #40]	@ (80016c4 <SysTick_Config+0x40>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016a2:	210f      	movs	r1, #15
 80016a4:	f04f 30ff 	mov.w	r0, #4294967295
 80016a8:	f7ff ff8e 	bl	80015c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016ac:	4b05      	ldr	r3, [pc, #20]	@ (80016c4 <SysTick_Config+0x40>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016b2:	4b04      	ldr	r3, [pc, #16]	@ (80016c4 <SysTick_Config+0x40>)
 80016b4:	2207      	movs	r2, #7
 80016b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	e000e010 	.word	0xe000e010

080016c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff ff29 	bl	8001528 <__NVIC_SetPriorityGrouping>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016de:	b580      	push	{r7, lr}
 80016e0:	b086      	sub	sp, #24
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	4603      	mov	r3, r0
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
 80016ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016f0:	f7ff ff3e 	bl	8001570 <__NVIC_GetPriorityGrouping>
 80016f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	68b9      	ldr	r1, [r7, #8]
 80016fa:	6978      	ldr	r0, [r7, #20]
 80016fc:	f7ff ff8e 	bl	800161c <NVIC_EncodePriority>
 8001700:	4602      	mov	r2, r0
 8001702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001706:	4611      	mov	r1, r2
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ff5d 	bl	80015c8 <__NVIC_SetPriority>
}
 800170e:	bf00      	nop
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	4603      	mov	r3, r0
 800171e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff31 	bl	800158c <__NVIC_EnableIRQ>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff ffa2 	bl	8001684 <SysTick_Config>
 8001740:	4603      	mov	r3, r0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e086      	b.n	800186c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001764:	2b00      	cmp	r3, #0
 8001766:	d106      	bne.n	8001776 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2223      	movs	r2, #35	@ 0x23
 800176c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff fba5 	bl	8000ec0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001776:	4b3f      	ldr	r3, [pc, #252]	@ (8001874 <HAL_ETH_Init+0x128>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177a:	4a3e      	ldr	r2, [pc, #248]	@ (8001874 <HAL_ETH_Init+0x128>)
 800177c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001780:	6453      	str	r3, [r2, #68]	@ 0x44
 8001782:	4b3c      	ldr	r3, [pc, #240]	@ (8001874 <HAL_ETH_Init+0x128>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001786:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800178e:	4b3a      	ldr	r3, [pc, #232]	@ (8001878 <HAL_ETH_Init+0x12c>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	4a39      	ldr	r2, [pc, #228]	@ (8001878 <HAL_ETH_Init+0x12c>)
 8001794:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001798:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800179a:	4b37      	ldr	r3, [pc, #220]	@ (8001878 <HAL_ETH_Init+0x12c>)
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	4935      	ldr	r1, [pc, #212]	@ (8001878 <HAL_ETH_Init+0x12c>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80017a8:	4b33      	ldr	r3, [pc, #204]	@ (8001878 <HAL_ETH_Init+0x12c>)
 80017aa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017c4:	f7ff fe80 	bl	80014c8 <HAL_GetTick>
 80017c8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80017ca:	e011      	b.n	80017f0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80017cc:	f7ff fe7c 	bl	80014c8 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80017da:	d909      	bls.n	80017f0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2204      	movs	r2, #4
 80017e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	22e0      	movs	r2, #224	@ 0xe0
 80017e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e03d      	b.n	800186c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1e4      	bne.n	80017cc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 f97a 	bl	8001afc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f000 fa25 	bl	8001c58 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 fa7b 	bl	8001d0a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	461a      	mov	r2, r3
 800181a:	2100      	movs	r1, #0
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 f9e3 	bl	8001be8 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001830:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	4b0f      	ldr	r3, [pc, #60]	@ (800187c <HAL_ETH_Init+0x130>)
 8001840:	430b      	orrs	r3, r1
 8001842:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001856:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2210      	movs	r2, #16
 8001866:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40023800 	.word	0x40023800
 8001878:	40013800 	.word	0x40013800
 800187c:	00020060 	.word	0x00020060

08001880 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	4b53      	ldr	r3, [pc, #332]	@ (80019e4 <ETH_SetMACConfig+0x164>)
 8001896:	4013      	ands	r3, r2
 8001898:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	7b9b      	ldrb	r3, [r3, #14]
 800189e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	7c12      	ldrb	r2, [r2, #16]
 80018a4:	2a00      	cmp	r2, #0
 80018a6:	d102      	bne.n	80018ae <ETH_SetMACConfig+0x2e>
 80018a8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80018ac:	e000      	b.n	80018b0 <ETH_SetMACConfig+0x30>
 80018ae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80018b0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	7c52      	ldrb	r2, [r2, #17]
 80018b6:	2a00      	cmp	r2, #0
 80018b8:	d102      	bne.n	80018c0 <ETH_SetMACConfig+0x40>
 80018ba:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80018be:	e000      	b.n	80018c2 <ETH_SetMACConfig+0x42>
 80018c0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80018c2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80018c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	7fdb      	ldrb	r3, [r3, #31]
 80018ce:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80018d0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80018d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	7f92      	ldrb	r2, [r2, #30]
 80018dc:	2a00      	cmp	r2, #0
 80018de:	d102      	bne.n	80018e6 <ETH_SetMACConfig+0x66>
 80018e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018e4:	e000      	b.n	80018e8 <ETH_SetMACConfig+0x68>
 80018e6:	2200      	movs	r2, #0
                        macconf->Speed |
 80018e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	7f1b      	ldrb	r3, [r3, #28]
 80018ee:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80018f0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80018f6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	791b      	ldrb	r3, [r3, #4]
 80018fc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80018fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001906:	2a00      	cmp	r2, #0
 8001908:	d102      	bne.n	8001910 <ETH_SetMACConfig+0x90>
 800190a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800190e:	e000      	b.n	8001912 <ETH_SetMACConfig+0x92>
 8001910:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001912:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	7bdb      	ldrb	r3, [r3, #15]
 8001918:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800191a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001920:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001928:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800192a:	4313      	orrs	r3, r2
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	4313      	orrs	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001942:	2001      	movs	r0, #1
 8001944:	f7ff fdcc 	bl	80014e0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800195e:	4013      	ands	r3, r2
 8001960:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001966:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800196e:	2a00      	cmp	r2, #0
 8001970:	d101      	bne.n	8001976 <ETH_SetMACConfig+0xf6>
 8001972:	2280      	movs	r2, #128	@ 0x80
 8001974:	e000      	b.n	8001978 <ETH_SetMACConfig+0xf8>
 8001976:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001978:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800197e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001986:	2a01      	cmp	r2, #1
 8001988:	d101      	bne.n	800198e <ETH_SetMACConfig+0x10e>
 800198a:	2208      	movs	r2, #8
 800198c:	e000      	b.n	8001990 <ETH_SetMACConfig+0x110>
 800198e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001990:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001998:	2a01      	cmp	r2, #1
 800199a:	d101      	bne.n	80019a0 <ETH_SetMACConfig+0x120>
 800199c:	2204      	movs	r2, #4
 800199e:	e000      	b.n	80019a2 <ETH_SetMACConfig+0x122>
 80019a0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80019a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80019aa:	2a01      	cmp	r2, #1
 80019ac:	d101      	bne.n	80019b2 <ETH_SetMACConfig+0x132>
 80019ae:	2202      	movs	r2, #2
 80019b0:	e000      	b.n	80019b4 <ETH_SetMACConfig+0x134>
 80019b2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80019b4:	4313      	orrs	r3, r2
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019cc:	2001      	movs	r0, #1
 80019ce:	f7ff fd87 	bl	80014e0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	619a      	str	r2, [r3, #24]
}
 80019da:	bf00      	nop
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	fd20810f 	.word	0xfd20810f

080019e8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	4b3d      	ldr	r3, [pc, #244]	@ (8001af8 <ETH_SetDMAConfig+0x110>)
 8001a02:	4013      	ands	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	7b1b      	ldrb	r3, [r3, #12]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d102      	bne.n	8001a14 <ETH_SetDMAConfig+0x2c>
 8001a0e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001a12:	e000      	b.n	8001a16 <ETH_SetDMAConfig+0x2e>
 8001a14:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	7b5b      	ldrb	r3, [r3, #13]
 8001a1a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001a1c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	7f52      	ldrb	r2, [r2, #29]
 8001a22:	2a00      	cmp	r2, #0
 8001a24:	d102      	bne.n	8001a2c <ETH_SetDMAConfig+0x44>
 8001a26:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001a2a:	e000      	b.n	8001a2e <ETH_SetDMAConfig+0x46>
 8001a2c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001a2e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	7b9b      	ldrb	r3, [r3, #14]
 8001a34:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001a36:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001a3c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	7f1b      	ldrb	r3, [r3, #28]
 8001a42:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001a44:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	7f9b      	ldrb	r3, [r3, #30]
 8001a4a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001a4c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001a52:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a5a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a7e:	2001      	movs	r0, #1
 8001a80:	f7ff fd2e 	bl	80014e0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	791b      	ldrb	r3, [r3, #4]
 8001a96:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001a9c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001aa2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001aa8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ab0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001ab2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001aba:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ac0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	6812      	ldr	r2, [r2, #0]
 8001ac6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001aca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ace:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001adc:	2001      	movs	r0, #1
 8001ade:	f7ff fcff 	bl	80014e0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001aea:	461a      	mov	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6013      	str	r3, [r2, #0]
}
 8001af0:	bf00      	nop
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	f8de3f23 	.word	0xf8de3f23

08001afc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b0a6      	sub	sp, #152	@ 0x98
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001b04:	2301      	movs	r3, #1
 8001b06:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001b10:	2300      	movs	r3, #0
 8001b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001b20:	2300      	movs	r3, #0
 8001b22:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001b26:	2301      	movs	r3, #1
 8001b28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001b32:	2300      	movs	r3, #0
 8001b34:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001b52:	2300      	movs	r3, #0
 8001b54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001b64:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b68:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001b6a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001b76:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff fe7f 	bl	8001880 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001b82:	2301      	movs	r3, #1
 8001b84:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001b86:	2301      	movs	r3, #1
 8001b88:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001b90:	2301      	movs	r3, #1
 8001b92:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001bb2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bb6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001bb8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001bbc:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001bbe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bc2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001bd2:	f107 0308 	add.w	r3, r7, #8
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff ff05 	bl	80019e8 <ETH_SetDMAConfig>
}
 8001bde:	bf00      	nop
 8001be0:	3798      	adds	r7, #152	@ 0x98
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b087      	sub	sp, #28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3305      	adds	r3, #5
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	021b      	lsls	r3, r3, #8
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	3204      	adds	r2, #4
 8001c00:	7812      	ldrb	r2, [r2, #0]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	4b11      	ldr	r3, [pc, #68]	@ (8001c50 <ETH_MACAddressConfig+0x68>)
 8001c0a:	4413      	add	r3, r2
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3303      	adds	r3, #3
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	061a      	lsls	r2, r3, #24
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	3302      	adds	r3, #2
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	041b      	lsls	r3, r3, #16
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3301      	adds	r3, #1
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	021b      	lsls	r3, r3, #8
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	7812      	ldrb	r2, [r2, #0]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	4b06      	ldr	r3, [pc, #24]	@ (8001c54 <ETH_MACAddressConfig+0x6c>)
 8001c3a:	4413      	add	r3, r2
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	6013      	str	r3, [r2, #0]
}
 8001c42:	bf00      	nop
 8001c44:	371c      	adds	r7, #28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	40028040 	.word	0x40028040
 8001c54:	40028044 	.word	0x40028044

08001c58 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c60:	2300      	movs	r3, #0
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	e03e      	b.n	8001ce4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68d9      	ldr	r1, [r3, #12]
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	440b      	add	r3, r1
 8001c76:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	2200      	movs	r2, #0
 8001c82:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	2200      	movs	r2, #0
 8001c88:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001c90:	68b9      	ldr	r1, [r7, #8]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	3206      	adds	r2, #6
 8001c98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d80c      	bhi.n	8001cc8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68d9      	ldr	r1, [r3, #12]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	1c5a      	adds	r2, r3, #1
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	440b      	add	r3, r1
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	e004      	b.n	8001cd2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2b03      	cmp	r3, #3
 8001ce8:	d9bd      	bls.n	8001c66 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68da      	ldr	r2, [r3, #12]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cfc:	611a      	str	r2, [r3, #16]
}
 8001cfe:	bf00      	nop
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b085      	sub	sp, #20
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	e048      	b.n	8001daa <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6919      	ldr	r1, [r3, #16]
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	440b      	add	r3, r1
 8001d28:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	2200      	movs	r2, #0
 8001d34:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	2200      	movs	r2, #0
 8001d46:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001d54:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001d6e:	68b9      	ldr	r1, [r7, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	3212      	adds	r2, #18
 8001d76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d80c      	bhi.n	8001d9a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6919      	ldr	r1, [r3, #16]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	1c5a      	adds	r2, r3, #1
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	440b      	add	r3, r1
 8001d92:	461a      	mov	r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	60da      	str	r2, [r3, #12]
 8001d98:	e004      	b.n	8001da4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	3301      	adds	r3, #1
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2b03      	cmp	r3, #3
 8001dae:	d9b3      	bls.n	8001d18 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691a      	ldr	r2, [r3, #16]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dda:	60da      	str	r2, [r3, #12]
}
 8001ddc:	bf00      	nop
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b089      	sub	sp, #36	@ 0x24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
 8001e06:	e175      	b.n	80020f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e08:	2201      	movs	r2, #1
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	f040 8164 	bne.w	80020ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d005      	beq.n	8001e3e <HAL_GPIO_Init+0x56>
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d130      	bne.n	8001ea0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	2203      	movs	r2, #3
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4013      	ands	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e74:	2201      	movs	r2, #1
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	091b      	lsrs	r3, r3, #4
 8001e8a:	f003 0201 	and.w	r2, r3, #1
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	2b03      	cmp	r3, #3
 8001eaa:	d017      	beq.n	8001edc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d123      	bne.n	8001f30 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	08da      	lsrs	r2, r3, #3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3208      	adds	r2, #8
 8001ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	220f      	movs	r2, #15
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	691a      	ldr	r2, [r3, #16]
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	08da      	lsrs	r2, r3, #3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3208      	adds	r2, #8
 8001f2a:	69b9      	ldr	r1, [r7, #24]
 8001f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	2203      	movs	r2, #3
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 0203 	and.w	r2, r3, #3
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 80be 	beq.w	80020ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f72:	4b66      	ldr	r3, [pc, #408]	@ (800210c <HAL_GPIO_Init+0x324>)
 8001f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f76:	4a65      	ldr	r2, [pc, #404]	@ (800210c <HAL_GPIO_Init+0x324>)
 8001f78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f7e:	4b63      	ldr	r3, [pc, #396]	@ (800210c <HAL_GPIO_Init+0x324>)
 8001f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f8a:	4a61      	ldr	r2, [pc, #388]	@ (8002110 <HAL_GPIO_Init+0x328>)
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	089b      	lsrs	r3, r3, #2
 8001f90:	3302      	adds	r3, #2
 8001f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	220f      	movs	r2, #15
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4013      	ands	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a58      	ldr	r2, [pc, #352]	@ (8002114 <HAL_GPIO_Init+0x32c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d037      	beq.n	8002026 <HAL_GPIO_Init+0x23e>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a57      	ldr	r2, [pc, #348]	@ (8002118 <HAL_GPIO_Init+0x330>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d031      	beq.n	8002022 <HAL_GPIO_Init+0x23a>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a56      	ldr	r2, [pc, #344]	@ (800211c <HAL_GPIO_Init+0x334>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d02b      	beq.n	800201e <HAL_GPIO_Init+0x236>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a55      	ldr	r2, [pc, #340]	@ (8002120 <HAL_GPIO_Init+0x338>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d025      	beq.n	800201a <HAL_GPIO_Init+0x232>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a54      	ldr	r2, [pc, #336]	@ (8002124 <HAL_GPIO_Init+0x33c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d01f      	beq.n	8002016 <HAL_GPIO_Init+0x22e>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a53      	ldr	r2, [pc, #332]	@ (8002128 <HAL_GPIO_Init+0x340>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d019      	beq.n	8002012 <HAL_GPIO_Init+0x22a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a52      	ldr	r2, [pc, #328]	@ (800212c <HAL_GPIO_Init+0x344>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d013      	beq.n	800200e <HAL_GPIO_Init+0x226>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a51      	ldr	r2, [pc, #324]	@ (8002130 <HAL_GPIO_Init+0x348>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d00d      	beq.n	800200a <HAL_GPIO_Init+0x222>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a50      	ldr	r2, [pc, #320]	@ (8002134 <HAL_GPIO_Init+0x34c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d007      	beq.n	8002006 <HAL_GPIO_Init+0x21e>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a4f      	ldr	r2, [pc, #316]	@ (8002138 <HAL_GPIO_Init+0x350>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d101      	bne.n	8002002 <HAL_GPIO_Init+0x21a>
 8001ffe:	2309      	movs	r3, #9
 8002000:	e012      	b.n	8002028 <HAL_GPIO_Init+0x240>
 8002002:	230a      	movs	r3, #10
 8002004:	e010      	b.n	8002028 <HAL_GPIO_Init+0x240>
 8002006:	2308      	movs	r3, #8
 8002008:	e00e      	b.n	8002028 <HAL_GPIO_Init+0x240>
 800200a:	2307      	movs	r3, #7
 800200c:	e00c      	b.n	8002028 <HAL_GPIO_Init+0x240>
 800200e:	2306      	movs	r3, #6
 8002010:	e00a      	b.n	8002028 <HAL_GPIO_Init+0x240>
 8002012:	2305      	movs	r3, #5
 8002014:	e008      	b.n	8002028 <HAL_GPIO_Init+0x240>
 8002016:	2304      	movs	r3, #4
 8002018:	e006      	b.n	8002028 <HAL_GPIO_Init+0x240>
 800201a:	2303      	movs	r3, #3
 800201c:	e004      	b.n	8002028 <HAL_GPIO_Init+0x240>
 800201e:	2302      	movs	r3, #2
 8002020:	e002      	b.n	8002028 <HAL_GPIO_Init+0x240>
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <HAL_GPIO_Init+0x240>
 8002026:	2300      	movs	r3, #0
 8002028:	69fa      	ldr	r2, [r7, #28]
 800202a:	f002 0203 	and.w	r2, r2, #3
 800202e:	0092      	lsls	r2, r2, #2
 8002030:	4093      	lsls	r3, r2
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002038:	4935      	ldr	r1, [pc, #212]	@ (8002110 <HAL_GPIO_Init+0x328>)
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	089b      	lsrs	r3, r3, #2
 800203e:	3302      	adds	r3, #2
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002046:	4b3d      	ldr	r3, [pc, #244]	@ (800213c <HAL_GPIO_Init+0x354>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800206a:	4a34      	ldr	r2, [pc, #208]	@ (800213c <HAL_GPIO_Init+0x354>)
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002070:	4b32      	ldr	r3, [pc, #200]	@ (800213c <HAL_GPIO_Init+0x354>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	43db      	mvns	r3, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002094:	4a29      	ldr	r2, [pc, #164]	@ (800213c <HAL_GPIO_Init+0x354>)
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800209a:	4b28      	ldr	r3, [pc, #160]	@ (800213c <HAL_GPIO_Init+0x354>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	43db      	mvns	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020be:	4a1f      	ldr	r2, [pc, #124]	@ (800213c <HAL_GPIO_Init+0x354>)
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020c4:	4b1d      	ldr	r3, [pc, #116]	@ (800213c <HAL_GPIO_Init+0x354>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	43db      	mvns	r3, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4013      	ands	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020e8:	4a14      	ldr	r2, [pc, #80]	@ (800213c <HAL_GPIO_Init+0x354>)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3301      	adds	r3, #1
 80020f2:	61fb      	str	r3, [r7, #28]
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	2b0f      	cmp	r3, #15
 80020f8:	f67f ae86 	bls.w	8001e08 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80020fc:	bf00      	nop
 80020fe:	bf00      	nop
 8002100:	3724      	adds	r7, #36	@ 0x24
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	40023800 	.word	0x40023800
 8002110:	40013800 	.word	0x40013800
 8002114:	40020000 	.word	0x40020000
 8002118:	40020400 	.word	0x40020400
 800211c:	40020800 	.word	0x40020800
 8002120:	40020c00 	.word	0x40020c00
 8002124:	40021000 	.word	0x40021000
 8002128:	40021400 	.word	0x40021400
 800212c:	40021800 	.word	0x40021800
 8002130:	40021c00 	.word	0x40021c00
 8002134:	40022000 	.word	0x40022000
 8002138:	40022400 	.word	0x40022400
 800213c:	40013c00 	.word	0x40013c00

08002140 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	807b      	strh	r3, [r7, #2]
 800214c:	4613      	mov	r3, r2
 800214e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002150:	787b      	ldrb	r3, [r7, #1]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002156:	887a      	ldrh	r2, [r7, #2]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800215c:	e003      	b.n	8002166 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800215e:	887b      	ldrh	r3, [r7, #2]
 8002160:	041a      	lsls	r2, r3, #16
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	619a      	str	r2, [r3, #24]
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
	...

08002174 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e08b      	b.n	800229e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d106      	bne.n	80021a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7fe ff48 	bl	8001030 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2224      	movs	r2, #36	@ 0x24
 80021a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0201 	bic.w	r2, r2, #1
 80021b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d107      	bne.n	80021ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	e006      	b.n	80021fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80021fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	2b02      	cmp	r3, #2
 8002202:	d108      	bne.n	8002216 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002212:	605a      	str	r2, [r3, #4]
 8002214:	e007      	b.n	8002226 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002224:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6859      	ldr	r1, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	4b1d      	ldr	r3, [pc, #116]	@ (80022a8 <HAL_I2C_Init+0x134>)
 8002232:	430b      	orrs	r3, r1
 8002234:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002244:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691a      	ldr	r2, [r3, #16]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	430a      	orrs	r2, r1
 800225e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69d9      	ldr	r1, [r3, #28]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a1a      	ldr	r2, [r3, #32]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 0201 	orr.w	r2, r2, #1
 800227e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2220      	movs	r2, #32
 800228a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	02008000 	.word	0x02008000

080022ac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b088      	sub	sp, #32
 80022b0:	af02      	add	r7, sp, #8
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	607a      	str	r2, [r7, #4]
 80022b6:	461a      	mov	r2, r3
 80022b8:	460b      	mov	r3, r1
 80022ba:	817b      	strh	r3, [r7, #10]
 80022bc:	4613      	mov	r3, r2
 80022be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b20      	cmp	r3, #32
 80022ca:	f040 80fd 	bne.w	80024c8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_I2C_Master_Transmit+0x30>
 80022d8:	2302      	movs	r3, #2
 80022da:	e0f6      	b.n	80024ca <HAL_I2C_Master_Transmit+0x21e>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022e4:	f7ff f8f0 	bl	80014c8 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	2319      	movs	r3, #25
 80022f0:	2201      	movs	r2, #1
 80022f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 f914 	bl	8002524 <I2C_WaitOnFlagUntilTimeout>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e0e1      	b.n	80024ca <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2221      	movs	r2, #33	@ 0x21
 800230a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2210      	movs	r2, #16
 8002312:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	893a      	ldrh	r2, [r7, #8]
 8002326:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002332:	b29b      	uxth	r3, r3
 8002334:	2bff      	cmp	r3, #255	@ 0xff
 8002336:	d906      	bls.n	8002346 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	22ff      	movs	r2, #255	@ 0xff
 800233c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800233e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	e007      	b.n	8002356 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800234a:	b29a      	uxth	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002350:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002354:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800235a:	2b00      	cmp	r3, #0
 800235c:	d024      	beq.n	80023a8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002362:	781a      	ldrb	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236e:	1c5a      	adds	r2, r3, #1
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002378:	b29b      	uxth	r3, r3
 800237a:	3b01      	subs	r3, #1
 800237c:	b29a      	uxth	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002386:	3b01      	subs	r3, #1
 8002388:	b29a      	uxth	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002392:	b2db      	uxtb	r3, r3
 8002394:	3301      	adds	r3, #1
 8002396:	b2da      	uxtb	r2, r3
 8002398:	8979      	ldrh	r1, [r7, #10]
 800239a:	4b4e      	ldr	r3, [pc, #312]	@ (80024d4 <HAL_I2C_Master_Transmit+0x228>)
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f000 fa83 	bl	80028ac <I2C_TransferConfig>
 80023a6:	e066      	b.n	8002476 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	8979      	ldrh	r1, [r7, #10]
 80023b0:	4b48      	ldr	r3, [pc, #288]	@ (80024d4 <HAL_I2C_Master_Transmit+0x228>)
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 fa78 	bl	80028ac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80023bc:	e05b      	b.n	8002476 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	6a39      	ldr	r1, [r7, #32]
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 f907 	bl	80025d6 <I2C_WaitOnTXISFlagUntilTimeout>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e07b      	b.n	80024ca <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d6:	781a      	ldrb	r2, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	3b01      	subs	r3, #1
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023fa:	3b01      	subs	r3, #1
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002406:	b29b      	uxth	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d034      	beq.n	8002476 <HAL_I2C_Master_Transmit+0x1ca>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002410:	2b00      	cmp	r3, #0
 8002412:	d130      	bne.n	8002476 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	2200      	movs	r2, #0
 800241c:	2180      	movs	r1, #128	@ 0x80
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 f880 	bl	8002524 <I2C_WaitOnFlagUntilTimeout>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e04d      	b.n	80024ca <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002432:	b29b      	uxth	r3, r3
 8002434:	2bff      	cmp	r3, #255	@ 0xff
 8002436:	d90e      	bls.n	8002456 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	22ff      	movs	r2, #255	@ 0xff
 800243c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002442:	b2da      	uxtb	r2, r3
 8002444:	8979      	ldrh	r1, [r7, #10]
 8002446:	2300      	movs	r3, #0
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 fa2c 	bl	80028ac <I2C_TransferConfig>
 8002454:	e00f      	b.n	8002476 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800245a:	b29a      	uxth	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002464:	b2da      	uxtb	r2, r3
 8002466:	8979      	ldrh	r1, [r7, #10]
 8002468:	2300      	movs	r3, #0
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 fa1b 	bl	80028ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800247a:	b29b      	uxth	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	d19e      	bne.n	80023be <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	6a39      	ldr	r1, [r7, #32]
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f000 f8ed 	bl	8002664 <I2C_WaitOnSTOPFlagUntilTimeout>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e01a      	b.n	80024ca <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2220      	movs	r2, #32
 800249a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6859      	ldr	r1, [r3, #4]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	4b0c      	ldr	r3, [pc, #48]	@ (80024d8 <HAL_I2C_Master_Transmit+0x22c>)
 80024a8:	400b      	ands	r3, r1
 80024aa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2220      	movs	r2, #32
 80024b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	e000      	b.n	80024ca <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80024c8:	2302      	movs	r3, #2
  }
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	80002000 	.word	0x80002000
 80024d8:	fe00e800 	.word	0xfe00e800

080024dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d103      	bne.n	80024fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2200      	movs	r2, #0
 80024f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b01      	cmp	r3, #1
 8002506:	d007      	beq.n	8002518 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	699a      	ldr	r2, [r3, #24]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0201 	orr.w	r2, r2, #1
 8002516:	619a      	str	r2, [r3, #24]
  }
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	603b      	str	r3, [r7, #0]
 8002530:	4613      	mov	r3, r2
 8002532:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002534:	e03b      	b.n	80025ae <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	6839      	ldr	r1, [r7, #0]
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 f8d6 	bl	80026ec <I2C_IsErrorOccurred>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e041      	b.n	80025ce <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002550:	d02d      	beq.n	80025ae <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002552:	f7fe ffb9 	bl	80014c8 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d302      	bcc.n	8002568 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d122      	bne.n	80025ae <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	699a      	ldr	r2, [r3, #24]
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	4013      	ands	r3, r2
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	429a      	cmp	r2, r3
 8002576:	bf0c      	ite	eq
 8002578:	2301      	moveq	r3, #1
 800257a:	2300      	movne	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	461a      	mov	r2, r3
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	429a      	cmp	r2, r3
 8002584:	d113      	bne.n	80025ae <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800258a:	f043 0220 	orr.w	r2, r3, #32
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2220      	movs	r2, #32
 8002596:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e00f      	b.n	80025ce <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	699a      	ldr	r2, [r3, #24]
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	4013      	ands	r3, r2
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	bf0c      	ite	eq
 80025be:	2301      	moveq	r3, #1
 80025c0:	2300      	movne	r3, #0
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	461a      	mov	r2, r3
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d0b4      	beq.n	8002536 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b084      	sub	sp, #16
 80025da:	af00      	add	r7, sp, #0
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025e2:	e033      	b.n	800264c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	68b9      	ldr	r1, [r7, #8]
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f000 f87f 	bl	80026ec <I2C_IsErrorOccurred>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e031      	b.n	800265c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fe:	d025      	beq.n	800264c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002600:	f7fe ff62 	bl	80014c8 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	429a      	cmp	r2, r3
 800260e:	d302      	bcc.n	8002616 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d11a      	bne.n	800264c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b02      	cmp	r3, #2
 8002622:	d013      	beq.n	800264c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002628:	f043 0220 	orr.w	r2, r3, #32
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2220      	movs	r2, #32
 8002634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e007      	b.n	800265c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b02      	cmp	r3, #2
 8002658:	d1c4      	bne.n	80025e4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002670:	e02f      	b.n	80026d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68b9      	ldr	r1, [r7, #8]
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 f838 	bl	80026ec <I2C_IsErrorOccurred>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e02d      	b.n	80026e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002686:	f7fe ff1f 	bl	80014c8 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	429a      	cmp	r2, r3
 8002694:	d302      	bcc.n	800269c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d11a      	bne.n	80026d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	f003 0320 	and.w	r3, r3, #32
 80026a6:	2b20      	cmp	r3, #32
 80026a8:	d013      	beq.n	80026d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ae:	f043 0220 	orr.w	r2, r3, #32
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2220      	movs	r2, #32
 80026ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e007      	b.n	80026e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	f003 0320 	and.w	r3, r3, #32
 80026dc:	2b20      	cmp	r3, #32
 80026de:	d1c8      	bne.n	8002672 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b08a      	sub	sp, #40	@ 0x28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026f8:	2300      	movs	r3, #0
 80026fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	f003 0310 	and.w	r3, r3, #16
 8002714:	2b00      	cmp	r3, #0
 8002716:	d068      	beq.n	80027ea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2210      	movs	r2, #16
 800271e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002720:	e049      	b.n	80027b6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002728:	d045      	beq.n	80027b6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800272a:	f7fe fecd 	bl	80014c8 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	68ba      	ldr	r2, [r7, #8]
 8002736:	429a      	cmp	r2, r3
 8002738:	d302      	bcc.n	8002740 <I2C_IsErrorOccurred+0x54>
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d13a      	bne.n	80027b6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800274a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002752:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800275e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002762:	d121      	bne.n	80027a8 <I2C_IsErrorOccurred+0xbc>
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800276a:	d01d      	beq.n	80027a8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800276c:	7cfb      	ldrb	r3, [r7, #19]
 800276e:	2b20      	cmp	r3, #32
 8002770:	d01a      	beq.n	80027a8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002780:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002782:	f7fe fea1 	bl	80014c8 <HAL_GetTick>
 8002786:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002788:	e00e      	b.n	80027a8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800278a:	f7fe fe9d 	bl	80014c8 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b19      	cmp	r3, #25
 8002796:	d907      	bls.n	80027a8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	f043 0320 	orr.w	r3, r3, #32
 800279e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80027a6:	e006      	b.n	80027b6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	f003 0320 	and.w	r3, r3, #32
 80027b2:	2b20      	cmp	r3, #32
 80027b4:	d1e9      	bne.n	800278a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	f003 0320 	and.w	r3, r3, #32
 80027c0:	2b20      	cmp	r3, #32
 80027c2:	d003      	beq.n	80027cc <I2C_IsErrorOccurred+0xe0>
 80027c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0aa      	beq.n	8002722 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80027cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d103      	bne.n	80027dc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2220      	movs	r2, #32
 80027da:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	f043 0304 	orr.w	r3, r3, #4
 80027e2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00b      	beq.n	8002814 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80027fc:	6a3b      	ldr	r3, [r7, #32]
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800280c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00b      	beq.n	8002836 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	f043 0308 	orr.w	r3, r3, #8
 8002824:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800282e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00b      	beq.n	8002858 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002840:	6a3b      	ldr	r3, [r7, #32]
 8002842:	f043 0302 	orr.w	r3, r3, #2
 8002846:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002850:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002858:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800285c:	2b00      	cmp	r3, #0
 800285e:	d01c      	beq.n	800289a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f7ff fe3b 	bl	80024dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6859      	ldr	r1, [r3, #4]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	4b0d      	ldr	r3, [pc, #52]	@ (80028a8 <I2C_IsErrorOccurred+0x1bc>)
 8002872:	400b      	ands	r3, r1
 8002874:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800287a:	6a3b      	ldr	r3, [r7, #32]
 800287c:	431a      	orrs	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2220      	movs	r2, #32
 8002886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800289a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3728      	adds	r7, #40	@ 0x28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	fe00e800 	.word	0xfe00e800

080028ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b087      	sub	sp, #28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	607b      	str	r3, [r7, #4]
 80028b6:	460b      	mov	r3, r1
 80028b8:	817b      	strh	r3, [r7, #10]
 80028ba:	4613      	mov	r3, r2
 80028bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028be:	897b      	ldrh	r3, [r7, #10]
 80028c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028c4:	7a7b      	ldrb	r3, [r7, #9]
 80028c6:	041b      	lsls	r3, r3, #16
 80028c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028cc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028d2:	6a3b      	ldr	r3, [r7, #32]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028da:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	6a3b      	ldr	r3, [r7, #32]
 80028e4:	0d5b      	lsrs	r3, r3, #21
 80028e6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80028ea:	4b08      	ldr	r3, [pc, #32]	@ (800290c <I2C_TransferConfig+0x60>)
 80028ec:	430b      	orrs	r3, r1
 80028ee:	43db      	mvns	r3, r3
 80028f0:	ea02 0103 	and.w	r1, r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80028fe:	bf00      	nop
 8002900:	371c      	adds	r7, #28
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	03ff63ff 	.word	0x03ff63ff

08002910 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b20      	cmp	r3, #32
 8002924:	d138      	bne.n	8002998 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800292c:	2b01      	cmp	r3, #1
 800292e:	d101      	bne.n	8002934 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002930:	2302      	movs	r3, #2
 8002932:	e032      	b.n	800299a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2224      	movs	r2, #36	@ 0x24
 8002940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0201 	bic.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002962:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6819      	ldr	r1, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2220      	movs	r2, #32
 8002988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002994:	2300      	movs	r3, #0
 8002996:	e000      	b.n	800299a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002998:	2302      	movs	r3, #2
  }
}
 800299a:	4618      	mov	r0, r3
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b085      	sub	sp, #20
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
 80029ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b20      	cmp	r3, #32
 80029ba:	d139      	bne.n	8002a30 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d101      	bne.n	80029ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029c6:	2302      	movs	r3, #2
 80029c8:	e033      	b.n	8002a32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2224      	movs	r2, #36	@ 0x24
 80029d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0201 	bic.w	r2, r2, #1
 80029e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80029f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	021b      	lsls	r3, r3, #8
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0201 	orr.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	e000      	b.n	8002a32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a30:	2302      	movs	r3, #2
  }
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b086      	sub	sp, #24
 8002a42:	af02      	add	r7, sp, #8
 8002a44:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e108      	b.n	8002c62 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d106      	bne.n	8002a70 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7fe fbec 	bl	8001248 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2203      	movs	r2, #3
 8002a74:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a7e:	d102      	bne.n	8002a86 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f002 ffaa 	bl	80059e4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6818      	ldr	r0, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	7c1a      	ldrb	r2, [r3, #16]
 8002a98:	f88d 2000 	strb.w	r2, [sp]
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aa0:	f002 ff46 	bl	8005930 <USB_CoreInit>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d005      	beq.n	8002ab6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2202      	movs	r2, #2
 8002aae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e0d5      	b.n	8002c62 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2100      	movs	r1, #0
 8002abc:	4618      	mov	r0, r3
 8002abe:	f002 ffa2 	bl	8005a06 <USB_SetCurrentMode>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d005      	beq.n	8002ad4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2202      	movs	r2, #2
 8002acc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e0c6      	b.n	8002c62 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	73fb      	strb	r3, [r7, #15]
 8002ad8:	e04a      	b.n	8002b70 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ada:	7bfa      	ldrb	r2, [r7, #15]
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	3315      	adds	r3, #21
 8002aea:	2201      	movs	r2, #1
 8002aec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002aee:	7bfa      	ldrb	r2, [r7, #15]
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	4413      	add	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	440b      	add	r3, r1
 8002afc:	3314      	adds	r3, #20
 8002afe:	7bfa      	ldrb	r2, [r7, #15]
 8002b00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b02:	7bfa      	ldrb	r2, [r7, #15]
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	b298      	uxth	r0, r3
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	4413      	add	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	440b      	add	r3, r1
 8002b14:	332e      	adds	r3, #46	@ 0x2e
 8002b16:	4602      	mov	r2, r0
 8002b18:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b1a:	7bfa      	ldrb	r2, [r7, #15]
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	4413      	add	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	440b      	add	r3, r1
 8002b28:	3318      	adds	r3, #24
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b2e:	7bfa      	ldrb	r2, [r7, #15]
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	4613      	mov	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	4413      	add	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	331c      	adds	r3, #28
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b42:	7bfa      	ldrb	r2, [r7, #15]
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	4613      	mov	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	440b      	add	r3, r1
 8002b50:	3320      	adds	r3, #32
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b56:	7bfa      	ldrb	r2, [r7, #15]
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	4413      	add	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	440b      	add	r3, r1
 8002b64:	3324      	adds	r3, #36	@ 0x24
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	73fb      	strb	r3, [r7, #15]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	791b      	ldrb	r3, [r3, #4]
 8002b74:	7bfa      	ldrb	r2, [r7, #15]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d3af      	bcc.n	8002ada <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	73fb      	strb	r3, [r7, #15]
 8002b7e:	e044      	b.n	8002c0a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b80:	7bfa      	ldrb	r2, [r7, #15]
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	4613      	mov	r3, r2
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	4413      	add	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002b92:	2200      	movs	r2, #0
 8002b94:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b96:	7bfa      	ldrb	r2, [r7, #15]
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002ba8:	7bfa      	ldrb	r2, [r7, #15]
 8002baa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bac:	7bfa      	ldrb	r2, [r7, #15]
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bc2:	7bfa      	ldrb	r2, [r7, #15]
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	4413      	add	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bd8:	7bfa      	ldrb	r2, [r7, #15]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	4413      	add	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bee:	7bfa      	ldrb	r2, [r7, #15]
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
 8002c06:	3301      	adds	r3, #1
 8002c08:	73fb      	strb	r3, [r7, #15]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	791b      	ldrb	r3, [r3, #4]
 8002c0e:	7bfa      	ldrb	r2, [r7, #15]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d3b5      	bcc.n	8002b80 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6818      	ldr	r0, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	7c1a      	ldrb	r2, [r3, #16]
 8002c1c:	f88d 2000 	strb.w	r2, [sp]
 8002c20:	3304      	adds	r3, #4
 8002c22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c24:	f002 ff3c 	bl	8005aa0 <USB_DevInit>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d005      	beq.n	8002c3a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2202      	movs	r2, #2
 8002c32:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e013      	b.n	8002c62 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	7b1b      	ldrb	r3, [r3, #12]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d102      	bne.n	8002c56 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f80b 	bl	8002c6c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f003 f8f7 	bl	8005e4e <USB_DevDisconnect>

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002c9a:	4b05      	ldr	r3, [pc, #20]	@ (8002cb0 <HAL_PCDEx_ActivateLPM+0x44>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	10000003 	.word	0x10000003

08002cb4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002cbe:	4b23      	ldr	r3, [pc, #140]	@ (8002d4c <HAL_PWREx_EnableOverDrive+0x98>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc2:	4a22      	ldr	r2, [pc, #136]	@ (8002d4c <HAL_PWREx_EnableOverDrive+0x98>)
 8002cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cca:	4b20      	ldr	r3, [pc, #128]	@ (8002d4c <HAL_PWREx_EnableOverDrive+0x98>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cd2:	603b      	str	r3, [r7, #0]
 8002cd4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8002d50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a1d      	ldr	r2, [pc, #116]	@ (8002d50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ce0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ce2:	f7fe fbf1 	bl	80014c8 <HAL_GetTick>
 8002ce6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ce8:	e009      	b.n	8002cfe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cea:	f7fe fbed 	bl	80014c8 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002cf8:	d901      	bls.n	8002cfe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e022      	b.n	8002d44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cfe:	4b14      	ldr	r3, [pc, #80]	@ (8002d50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d0a:	d1ee      	bne.n	8002cea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002d0c:	4b10      	ldr	r3, [pc, #64]	@ (8002d50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a0f      	ldr	r2, [pc, #60]	@ (8002d50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d16:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d18:	f7fe fbd6 	bl	80014c8 <HAL_GetTick>
 8002d1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d1e:	e009      	b.n	8002d34 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d20:	f7fe fbd2 	bl	80014c8 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d2e:	d901      	bls.n	8002d34 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e007      	b.n	8002d44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d34:	4b06      	ldr	r3, [pc, #24]	@ (8002d50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d40:	d1ee      	bne.n	8002d20 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	40007000 	.word	0x40007000

08002d54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e29b      	b.n	80032a2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 8087 	beq.w	8002e86 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d78:	4b96      	ldr	r3, [pc, #600]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 030c 	and.w	r3, r3, #12
 8002d80:	2b04      	cmp	r3, #4
 8002d82:	d00c      	beq.n	8002d9e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d84:	4b93      	ldr	r3, [pc, #588]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 030c 	and.w	r3, r3, #12
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d112      	bne.n	8002db6 <HAL_RCC_OscConfig+0x62>
 8002d90:	4b90      	ldr	r3, [pc, #576]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d9c:	d10b      	bne.n	8002db6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d9e:	4b8d      	ldr	r3, [pc, #564]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d06c      	beq.n	8002e84 <HAL_RCC_OscConfig+0x130>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d168      	bne.n	8002e84 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e275      	b.n	80032a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dbe:	d106      	bne.n	8002dce <HAL_RCC_OscConfig+0x7a>
 8002dc0:	4b84      	ldr	r3, [pc, #528]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a83      	ldr	r2, [pc, #524]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002dc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dca:	6013      	str	r3, [r2, #0]
 8002dcc:	e02e      	b.n	8002e2c <HAL_RCC_OscConfig+0xd8>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10c      	bne.n	8002df0 <HAL_RCC_OscConfig+0x9c>
 8002dd6:	4b7f      	ldr	r3, [pc, #508]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a7e      	ldr	r2, [pc, #504]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002ddc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	4b7c      	ldr	r3, [pc, #496]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a7b      	ldr	r2, [pc, #492]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002de8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	e01d      	b.n	8002e2c <HAL_RCC_OscConfig+0xd8>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002df8:	d10c      	bne.n	8002e14 <HAL_RCC_OscConfig+0xc0>
 8002dfa:	4b76      	ldr	r3, [pc, #472]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a75      	ldr	r2, [pc, #468]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002e00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	4b73      	ldr	r3, [pc, #460]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a72      	ldr	r2, [pc, #456]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002e0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	e00b      	b.n	8002e2c <HAL_RCC_OscConfig+0xd8>
 8002e14:	4b6f      	ldr	r3, [pc, #444]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a6e      	ldr	r2, [pc, #440]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002e1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e1e:	6013      	str	r3, [r2, #0]
 8002e20:	4b6c      	ldr	r3, [pc, #432]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a6b      	ldr	r2, [pc, #428]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002e26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d013      	beq.n	8002e5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e34:	f7fe fb48 	bl	80014c8 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e3c:	f7fe fb44 	bl	80014c8 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b64      	cmp	r3, #100	@ 0x64
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e229      	b.n	80032a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4e:	4b61      	ldr	r3, [pc, #388]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0f0      	beq.n	8002e3c <HAL_RCC_OscConfig+0xe8>
 8002e5a:	e014      	b.n	8002e86 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5c:	f7fe fb34 	bl	80014c8 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e64:	f7fe fb30 	bl	80014c8 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b64      	cmp	r3, #100	@ 0x64
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e215      	b.n	80032a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e76:	4b57      	ldr	r3, [pc, #348]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f0      	bne.n	8002e64 <HAL_RCC_OscConfig+0x110>
 8002e82:	e000      	b.n	8002e86 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d069      	beq.n	8002f66 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e92:	4b50      	ldr	r3, [pc, #320]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 030c 	and.w	r3, r3, #12
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00b      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e9e:	4b4d      	ldr	r3, [pc, #308]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 030c 	and.w	r3, r3, #12
 8002ea6:	2b08      	cmp	r3, #8
 8002ea8:	d11c      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x190>
 8002eaa:	4b4a      	ldr	r3, [pc, #296]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d116      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eb6:	4b47      	ldr	r3, [pc, #284]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d005      	beq.n	8002ece <HAL_RCC_OscConfig+0x17a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d001      	beq.n	8002ece <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e1e9      	b.n	80032a2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ece:	4b41      	ldr	r3, [pc, #260]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	493d      	ldr	r1, [pc, #244]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ee2:	e040      	b.n	8002f66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d023      	beq.n	8002f34 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eec:	4b39      	ldr	r3, [pc, #228]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a38      	ldr	r2, [pc, #224]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef8:	f7fe fae6 	bl	80014c8 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f00:	f7fe fae2 	bl	80014c8 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e1c7      	b.n	80032a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f12:	4b30      	ldr	r3, [pc, #192]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f0      	beq.n	8002f00 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f1e:	4b2d      	ldr	r3, [pc, #180]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	4929      	ldr	r1, [pc, #164]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	600b      	str	r3, [r1, #0]
 8002f32:	e018      	b.n	8002f66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f34:	4b27      	ldr	r3, [pc, #156]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a26      	ldr	r2, [pc, #152]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002f3a:	f023 0301 	bic.w	r3, r3, #1
 8002f3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f40:	f7fe fac2 	bl	80014c8 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f48:	f7fe fabe 	bl	80014c8 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e1a3      	b.n	80032a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d038      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d019      	beq.n	8002fae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f7a:	4b16      	ldr	r3, [pc, #88]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002f7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f7e:	4a15      	ldr	r2, [pc, #84]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002f80:	f043 0301 	orr.w	r3, r3, #1
 8002f84:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f86:	f7fe fa9f 	bl	80014c8 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f8e:	f7fe fa9b 	bl	80014c8 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e180      	b.n	80032a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002fa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0f0      	beq.n	8002f8e <HAL_RCC_OscConfig+0x23a>
 8002fac:	e01a      	b.n	8002fe4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fae:	4b09      	ldr	r3, [pc, #36]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002fb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fb2:	4a08      	ldr	r2, [pc, #32]	@ (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002fb4:	f023 0301 	bic.w	r3, r3, #1
 8002fb8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fba:	f7fe fa85 	bl	80014c8 <HAL_GetTick>
 8002fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc0:	e00a      	b.n	8002fd8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fc2:	f7fe fa81 	bl	80014c8 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d903      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e166      	b.n	80032a2 <HAL_RCC_OscConfig+0x54e>
 8002fd4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd8:	4b92      	ldr	r3, [pc, #584]	@ (8003224 <HAL_RCC_OscConfig+0x4d0>)
 8002fda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1ee      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 80a4 	beq.w	800313a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ff2:	4b8c      	ldr	r3, [pc, #560]	@ (8003224 <HAL_RCC_OscConfig+0x4d0>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10d      	bne.n	800301a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ffe:	4b89      	ldr	r3, [pc, #548]	@ (8003224 <HAL_RCC_OscConfig+0x4d0>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003002:	4a88      	ldr	r2, [pc, #544]	@ (8003224 <HAL_RCC_OscConfig+0x4d0>)
 8003004:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003008:	6413      	str	r3, [r2, #64]	@ 0x40
 800300a:	4b86      	ldr	r3, [pc, #536]	@ (8003224 <HAL_RCC_OscConfig+0x4d0>)
 800300c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003012:	60bb      	str	r3, [r7, #8]
 8003014:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003016:	2301      	movs	r3, #1
 8003018:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800301a:	4b83      	ldr	r3, [pc, #524]	@ (8003228 <HAL_RCC_OscConfig+0x4d4>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003022:	2b00      	cmp	r3, #0
 8003024:	d118      	bne.n	8003058 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003026:	4b80      	ldr	r3, [pc, #512]	@ (8003228 <HAL_RCC_OscConfig+0x4d4>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a7f      	ldr	r2, [pc, #508]	@ (8003228 <HAL_RCC_OscConfig+0x4d4>)
 800302c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003030:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003032:	f7fe fa49 	bl	80014c8 <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800303a:	f7fe fa45 	bl	80014c8 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b64      	cmp	r3, #100	@ 0x64
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e12a      	b.n	80032a2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800304c:	4b76      	ldr	r3, [pc, #472]	@ (8003228 <HAL_RCC_OscConfig+0x4d4>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0f0      	beq.n	800303a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d106      	bne.n	800306e <HAL_RCC_OscConfig+0x31a>
 8003060:	4b70      	ldr	r3, [pc, #448]	@ (8003224 <HAL_RCC_OscConfig+0x4d0>)
 8003062:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003064:	4a6f      	ldr	r2, [pc, #444]	@ (8003224 <HAL_RCC_OscConfig+0x4d0>)
 8003066:	f043 0301 	orr.w	r3, r3, #1
 800306a:	6713      	str	r3, [r2, #112]	@ 0x70
 800306c:	e02d      	b.n	80030ca <HAL_RCC_OscConfig+0x376>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10c      	bne.n	8003090 <HAL_RCC_OscConfig+0x33c>
 8003076:	4b6b      	ldr	r3, [pc, #428]	@ (8003224 <HAL_RCC_OscConfig+0x4d0>)
 8003078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800307a:	4a6a      	ldr	r2, [pc, #424]	@ (8003224 <HAL_RCC_OscConfig+0x4d0>)
 800307c:	f023 0301 	bic.w	r3, r3, #1
 8003080:	6713      	str	r3, [r2, #112]	@ 0x70
 8003082:	4b68      	ldr	r3, [pc, #416]	@ (8003224 <HAL_RCC_OscConfig+0x4d0>)
 8003084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003086:	4a67      	ldr	r2, [pc, #412]	@ (8003224 <HAL_RCC_OscConfig+0x4d0>)
 8003088:	f023 0304 	bic.w	r3, r3, #4
 800308c:	6713      	str	r3, [r2, #112]	@ 0x70
 800308e:	e01c      	b.n	80030ca <HAL_RCC_OscConfig+0x376>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	2b05      	cmp	r3, #5
 8003096:	d10c      	bne.n	80030b2 <HAL_RCC_OscConfig+0x35e>
 8003098:	4b62      	ldr	r3, [pc, #392]	@ (8003224 <HAL_RCC_OscConfig+0x4d0>)
 800309a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800309c:	4a61      	ldr	r2, [pc, #388]	@ (8003224 <HAL_RCC_OscConfig+0x4d0>)
 800309e:	f043 0304 	orr.w	r3, r3, #4
 80030a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80030a4:	4b5f      	ldr	r3, [pc, #380]	@ (8003224 <HAL_RCC_OscConfig+0x4d0>)
 80030a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a8:	4a5e      	ldr	r2, [pc, #376]	@ (8003224 <HAL_RCC_OscConfig+0x4d0>)
 80030aa:	f043 0301 	orr.w	r3, r3, #1
 80030ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80030b0:	e00b      	b.n	80030ca <HAL_RCC_OscConfig+0x376>
 80030b2:	4b5c      	ldr	r3, [pc, #368]	@ (8003224 <HAL_RCC_OscConfig+0x4d0>)
 80030b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b6:	4a5b      	ldr	r2, [pc, #364]	@ (8003224 <HAL_RCC_OscConfig+0x4d0>)
 80030b8:	f023 0301 	bic.w	r3, r3, #1
 80030bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80030be:	4b59      	ldr	r3, [pc, #356]	@ (8003224 <HAL_RCC_OscConfig+0x4d0>)
 80030c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c2:	4a58      	ldr	r2, [pc, #352]	@ (8003224 <HAL_RCC_OscConfig+0x4d0>)
 80030c4:	f023 0304 	bic.w	r3, r3, #4
 80030c8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d015      	beq.n	80030fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d2:	f7fe f9f9 	bl	80014c8 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d8:	e00a      	b.n	80030f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030da:	f7fe f9f5 	bl	80014c8 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e0d8      	b.n	80032a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f0:	4b4c      	ldr	r3, [pc, #304]	@ (8003224 <HAL_RCC_OscConfig+0x4d0>)
 80030f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0ee      	beq.n	80030da <HAL_RCC_OscConfig+0x386>
 80030fc:	e014      	b.n	8003128 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fe:	f7fe f9e3 	bl	80014c8 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003104:	e00a      	b.n	800311c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003106:	f7fe f9df 	bl	80014c8 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003114:	4293      	cmp	r3, r2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e0c2      	b.n	80032a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800311c:	4b41      	ldr	r3, [pc, #260]	@ (8003224 <HAL_RCC_OscConfig+0x4d0>)
 800311e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1ee      	bne.n	8003106 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003128:	7dfb      	ldrb	r3, [r7, #23]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d105      	bne.n	800313a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800312e:	4b3d      	ldr	r3, [pc, #244]	@ (8003224 <HAL_RCC_OscConfig+0x4d0>)
 8003130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003132:	4a3c      	ldr	r2, [pc, #240]	@ (8003224 <HAL_RCC_OscConfig+0x4d0>)
 8003134:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003138:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 80ae 	beq.w	80032a0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003144:	4b37      	ldr	r3, [pc, #220]	@ (8003224 <HAL_RCC_OscConfig+0x4d0>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 030c 	and.w	r3, r3, #12
 800314c:	2b08      	cmp	r3, #8
 800314e:	d06d      	beq.n	800322c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	2b02      	cmp	r3, #2
 8003156:	d14b      	bne.n	80031f0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003158:	4b32      	ldr	r3, [pc, #200]	@ (8003224 <HAL_RCC_OscConfig+0x4d0>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a31      	ldr	r2, [pc, #196]	@ (8003224 <HAL_RCC_OscConfig+0x4d0>)
 800315e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003164:	f7fe f9b0 	bl	80014c8 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800316c:	f7fe f9ac 	bl	80014c8 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e091      	b.n	80032a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800317e:	4b29      	ldr	r3, [pc, #164]	@ (8003224 <HAL_RCC_OscConfig+0x4d0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69da      	ldr	r2, [r3, #28]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003198:	019b      	lsls	r3, r3, #6
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a0:	085b      	lsrs	r3, r3, #1
 80031a2:	3b01      	subs	r3, #1
 80031a4:	041b      	lsls	r3, r3, #16
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ac:	061b      	lsls	r3, r3, #24
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b4:	071b      	lsls	r3, r3, #28
 80031b6:	491b      	ldr	r1, [pc, #108]	@ (8003224 <HAL_RCC_OscConfig+0x4d0>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031bc:	4b19      	ldr	r3, [pc, #100]	@ (8003224 <HAL_RCC_OscConfig+0x4d0>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a18      	ldr	r2, [pc, #96]	@ (8003224 <HAL_RCC_OscConfig+0x4d0>)
 80031c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c8:	f7fe f97e 	bl	80014c8 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d0:	f7fe f97a 	bl	80014c8 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e05f      	b.n	80032a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e2:	4b10      	ldr	r3, [pc, #64]	@ (8003224 <HAL_RCC_OscConfig+0x4d0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0f0      	beq.n	80031d0 <HAL_RCC_OscConfig+0x47c>
 80031ee:	e057      	b.n	80032a0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003224 <HAL_RCC_OscConfig+0x4d0>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a0b      	ldr	r2, [pc, #44]	@ (8003224 <HAL_RCC_OscConfig+0x4d0>)
 80031f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fc:	f7fe f964 	bl	80014c8 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003204:	f7fe f960 	bl	80014c8 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e045      	b.n	80032a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003216:	4b03      	ldr	r3, [pc, #12]	@ (8003224 <HAL_RCC_OscConfig+0x4d0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f0      	bne.n	8003204 <HAL_RCC_OscConfig+0x4b0>
 8003222:	e03d      	b.n	80032a0 <HAL_RCC_OscConfig+0x54c>
 8003224:	40023800 	.word	0x40023800
 8003228:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800322c:	4b1f      	ldr	r3, [pc, #124]	@ (80032ac <HAL_RCC_OscConfig+0x558>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d030      	beq.n	800329c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003244:	429a      	cmp	r2, r3
 8003246:	d129      	bne.n	800329c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003252:	429a      	cmp	r2, r3
 8003254:	d122      	bne.n	800329c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800325c:	4013      	ands	r3, r2
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003262:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003264:	4293      	cmp	r3, r2
 8003266:	d119      	bne.n	800329c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003272:	085b      	lsrs	r3, r3, #1
 8003274:	3b01      	subs	r3, #1
 8003276:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003278:	429a      	cmp	r2, r3
 800327a:	d10f      	bne.n	800329c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003286:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003288:	429a      	cmp	r2, r3
 800328a:	d107      	bne.n	800329c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003296:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003298:	429a      	cmp	r2, r3
 800329a:	d001      	beq.n	80032a0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e000      	b.n	80032a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40023800 	.word	0x40023800

080032b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e0d0      	b.n	800346a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032c8:	4b6a      	ldr	r3, [pc, #424]	@ (8003474 <HAL_RCC_ClockConfig+0x1c4>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 030f 	and.w	r3, r3, #15
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d910      	bls.n	80032f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d6:	4b67      	ldr	r3, [pc, #412]	@ (8003474 <HAL_RCC_ClockConfig+0x1c4>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f023 020f 	bic.w	r2, r3, #15
 80032de:	4965      	ldr	r1, [pc, #404]	@ (8003474 <HAL_RCC_ClockConfig+0x1c4>)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e6:	4b63      	ldr	r3, [pc, #396]	@ (8003474 <HAL_RCC_ClockConfig+0x1c4>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d001      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e0b8      	b.n	800346a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d020      	beq.n	8003346 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	d005      	beq.n	800331c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003310:	4b59      	ldr	r3, [pc, #356]	@ (8003478 <HAL_RCC_ClockConfig+0x1c8>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	4a58      	ldr	r2, [pc, #352]	@ (8003478 <HAL_RCC_ClockConfig+0x1c8>)
 8003316:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800331a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0308 	and.w	r3, r3, #8
 8003324:	2b00      	cmp	r3, #0
 8003326:	d005      	beq.n	8003334 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003328:	4b53      	ldr	r3, [pc, #332]	@ (8003478 <HAL_RCC_ClockConfig+0x1c8>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	4a52      	ldr	r2, [pc, #328]	@ (8003478 <HAL_RCC_ClockConfig+0x1c8>)
 800332e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003332:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003334:	4b50      	ldr	r3, [pc, #320]	@ (8003478 <HAL_RCC_ClockConfig+0x1c8>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	494d      	ldr	r1, [pc, #308]	@ (8003478 <HAL_RCC_ClockConfig+0x1c8>)
 8003342:	4313      	orrs	r3, r2
 8003344:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d040      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d107      	bne.n	800336a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335a:	4b47      	ldr	r3, [pc, #284]	@ (8003478 <HAL_RCC_ClockConfig+0x1c8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d115      	bne.n	8003392 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e07f      	b.n	800346a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b02      	cmp	r3, #2
 8003370:	d107      	bne.n	8003382 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003372:	4b41      	ldr	r3, [pc, #260]	@ (8003478 <HAL_RCC_ClockConfig+0x1c8>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d109      	bne.n	8003392 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e073      	b.n	800346a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003382:	4b3d      	ldr	r3, [pc, #244]	@ (8003478 <HAL_RCC_ClockConfig+0x1c8>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e06b      	b.n	800346a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003392:	4b39      	ldr	r3, [pc, #228]	@ (8003478 <HAL_RCC_ClockConfig+0x1c8>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f023 0203 	bic.w	r2, r3, #3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	4936      	ldr	r1, [pc, #216]	@ (8003478 <HAL_RCC_ClockConfig+0x1c8>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033a4:	f7fe f890 	bl	80014c8 <HAL_GetTick>
 80033a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033aa:	e00a      	b.n	80033c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033ac:	f7fe f88c 	bl	80014c8 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e053      	b.n	800346a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c2:	4b2d      	ldr	r3, [pc, #180]	@ (8003478 <HAL_RCC_ClockConfig+0x1c8>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 020c 	and.w	r2, r3, #12
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d1eb      	bne.n	80033ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033d4:	4b27      	ldr	r3, [pc, #156]	@ (8003474 <HAL_RCC_ClockConfig+0x1c4>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 030f 	and.w	r3, r3, #15
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d210      	bcs.n	8003404 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e2:	4b24      	ldr	r3, [pc, #144]	@ (8003474 <HAL_RCC_ClockConfig+0x1c4>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f023 020f 	bic.w	r2, r3, #15
 80033ea:	4922      	ldr	r1, [pc, #136]	@ (8003474 <HAL_RCC_ClockConfig+0x1c4>)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033f2:	4b20      	ldr	r3, [pc, #128]	@ (8003474 <HAL_RCC_ClockConfig+0x1c4>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d001      	beq.n	8003404 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e032      	b.n	800346a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b00      	cmp	r3, #0
 800340e:	d008      	beq.n	8003422 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003410:	4b19      	ldr	r3, [pc, #100]	@ (8003478 <HAL_RCC_ClockConfig+0x1c8>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	4916      	ldr	r1, [pc, #88]	@ (8003478 <HAL_RCC_ClockConfig+0x1c8>)
 800341e:	4313      	orrs	r3, r2
 8003420:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	2b00      	cmp	r3, #0
 800342c:	d009      	beq.n	8003442 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800342e:	4b12      	ldr	r3, [pc, #72]	@ (8003478 <HAL_RCC_ClockConfig+0x1c8>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	490e      	ldr	r1, [pc, #56]	@ (8003478 <HAL_RCC_ClockConfig+0x1c8>)
 800343e:	4313      	orrs	r3, r2
 8003440:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003442:	f000 f821 	bl	8003488 <HAL_RCC_GetSysClockFreq>
 8003446:	4602      	mov	r2, r0
 8003448:	4b0b      	ldr	r3, [pc, #44]	@ (8003478 <HAL_RCC_ClockConfig+0x1c8>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	091b      	lsrs	r3, r3, #4
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	490a      	ldr	r1, [pc, #40]	@ (800347c <HAL_RCC_ClockConfig+0x1cc>)
 8003454:	5ccb      	ldrb	r3, [r1, r3]
 8003456:	fa22 f303 	lsr.w	r3, r2, r3
 800345a:	4a09      	ldr	r2, [pc, #36]	@ (8003480 <HAL_RCC_ClockConfig+0x1d0>)
 800345c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800345e:	4b09      	ldr	r3, [pc, #36]	@ (8003484 <HAL_RCC_ClockConfig+0x1d4>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f7fd ffec 	bl	8001440 <HAL_InitTick>

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	40023c00 	.word	0x40023c00
 8003478:	40023800 	.word	0x40023800
 800347c:	08005f8c 	.word	0x08005f8c
 8003480:	20000000 	.word	0x20000000
 8003484:	20000004 	.word	0x20000004

08003488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800348c:	b094      	sub	sp, #80	@ 0x50
 800348e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003490:	2300      	movs	r3, #0
 8003492:	647b      	str	r3, [r7, #68]	@ 0x44
 8003494:	2300      	movs	r3, #0
 8003496:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003498:	2300      	movs	r3, #0
 800349a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800349c:	2300      	movs	r3, #0
 800349e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034a0:	4b79      	ldr	r3, [pc, #484]	@ (8003688 <HAL_RCC_GetSysClockFreq+0x200>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f003 030c 	and.w	r3, r3, #12
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d00d      	beq.n	80034c8 <HAL_RCC_GetSysClockFreq+0x40>
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	f200 80e1 	bhi.w	8003674 <HAL_RCC_GetSysClockFreq+0x1ec>
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d002      	beq.n	80034bc <HAL_RCC_GetSysClockFreq+0x34>
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	d003      	beq.n	80034c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80034ba:	e0db      	b.n	8003674 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034bc:	4b73      	ldr	r3, [pc, #460]	@ (800368c <HAL_RCC_GetSysClockFreq+0x204>)
 80034be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034c0:	e0db      	b.n	800367a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034c2:	4b73      	ldr	r3, [pc, #460]	@ (8003690 <HAL_RCC_GetSysClockFreq+0x208>)
 80034c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034c6:	e0d8      	b.n	800367a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034c8:	4b6f      	ldr	r3, [pc, #444]	@ (8003688 <HAL_RCC_GetSysClockFreq+0x200>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80034d2:	4b6d      	ldr	r3, [pc, #436]	@ (8003688 <HAL_RCC_GetSysClockFreq+0x200>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d063      	beq.n	80035a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034de:	4b6a      	ldr	r3, [pc, #424]	@ (8003688 <HAL_RCC_GetSysClockFreq+0x200>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	099b      	lsrs	r3, r3, #6
 80034e4:	2200      	movs	r2, #0
 80034e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80034ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80034f2:	2300      	movs	r3, #0
 80034f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80034f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80034fa:	4622      	mov	r2, r4
 80034fc:	462b      	mov	r3, r5
 80034fe:	f04f 0000 	mov.w	r0, #0
 8003502:	f04f 0100 	mov.w	r1, #0
 8003506:	0159      	lsls	r1, r3, #5
 8003508:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800350c:	0150      	lsls	r0, r2, #5
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4621      	mov	r1, r4
 8003514:	1a51      	subs	r1, r2, r1
 8003516:	6139      	str	r1, [r7, #16]
 8003518:	4629      	mov	r1, r5
 800351a:	eb63 0301 	sbc.w	r3, r3, r1
 800351e:	617b      	str	r3, [r7, #20]
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800352c:	4659      	mov	r1, fp
 800352e:	018b      	lsls	r3, r1, #6
 8003530:	4651      	mov	r1, sl
 8003532:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003536:	4651      	mov	r1, sl
 8003538:	018a      	lsls	r2, r1, #6
 800353a:	4651      	mov	r1, sl
 800353c:	ebb2 0801 	subs.w	r8, r2, r1
 8003540:	4659      	mov	r1, fp
 8003542:	eb63 0901 	sbc.w	r9, r3, r1
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	f04f 0300 	mov.w	r3, #0
 800354e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003552:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003556:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800355a:	4690      	mov	r8, r2
 800355c:	4699      	mov	r9, r3
 800355e:	4623      	mov	r3, r4
 8003560:	eb18 0303 	adds.w	r3, r8, r3
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	462b      	mov	r3, r5
 8003568:	eb49 0303 	adc.w	r3, r9, r3
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	f04f 0200 	mov.w	r2, #0
 8003572:	f04f 0300 	mov.w	r3, #0
 8003576:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800357a:	4629      	mov	r1, r5
 800357c:	024b      	lsls	r3, r1, #9
 800357e:	4621      	mov	r1, r4
 8003580:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003584:	4621      	mov	r1, r4
 8003586:	024a      	lsls	r2, r1, #9
 8003588:	4610      	mov	r0, r2
 800358a:	4619      	mov	r1, r3
 800358c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800358e:	2200      	movs	r2, #0
 8003590:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003592:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003594:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003598:	f7fc fe4e 	bl	8000238 <__aeabi_uldivmod>
 800359c:	4602      	mov	r2, r0
 800359e:	460b      	mov	r3, r1
 80035a0:	4613      	mov	r3, r2
 80035a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035a4:	e058      	b.n	8003658 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035a6:	4b38      	ldr	r3, [pc, #224]	@ (8003688 <HAL_RCC_GetSysClockFreq+0x200>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	099b      	lsrs	r3, r3, #6
 80035ac:	2200      	movs	r2, #0
 80035ae:	4618      	mov	r0, r3
 80035b0:	4611      	mov	r1, r2
 80035b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035b6:	623b      	str	r3, [r7, #32]
 80035b8:	2300      	movs	r3, #0
 80035ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80035bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035c0:	4642      	mov	r2, r8
 80035c2:	464b      	mov	r3, r9
 80035c4:	f04f 0000 	mov.w	r0, #0
 80035c8:	f04f 0100 	mov.w	r1, #0
 80035cc:	0159      	lsls	r1, r3, #5
 80035ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035d2:	0150      	lsls	r0, r2, #5
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4641      	mov	r1, r8
 80035da:	ebb2 0a01 	subs.w	sl, r2, r1
 80035de:	4649      	mov	r1, r9
 80035e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	f04f 0300 	mov.w	r3, #0
 80035ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035f8:	ebb2 040a 	subs.w	r4, r2, sl
 80035fc:	eb63 050b 	sbc.w	r5, r3, fp
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	00eb      	lsls	r3, r5, #3
 800360a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800360e:	00e2      	lsls	r2, r4, #3
 8003610:	4614      	mov	r4, r2
 8003612:	461d      	mov	r5, r3
 8003614:	4643      	mov	r3, r8
 8003616:	18e3      	adds	r3, r4, r3
 8003618:	603b      	str	r3, [r7, #0]
 800361a:	464b      	mov	r3, r9
 800361c:	eb45 0303 	adc.w	r3, r5, r3
 8003620:	607b      	str	r3, [r7, #4]
 8003622:	f04f 0200 	mov.w	r2, #0
 8003626:	f04f 0300 	mov.w	r3, #0
 800362a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800362e:	4629      	mov	r1, r5
 8003630:	028b      	lsls	r3, r1, #10
 8003632:	4621      	mov	r1, r4
 8003634:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003638:	4621      	mov	r1, r4
 800363a:	028a      	lsls	r2, r1, #10
 800363c:	4610      	mov	r0, r2
 800363e:	4619      	mov	r1, r3
 8003640:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003642:	2200      	movs	r2, #0
 8003644:	61bb      	str	r3, [r7, #24]
 8003646:	61fa      	str	r2, [r7, #28]
 8003648:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800364c:	f7fc fdf4 	bl	8000238 <__aeabi_uldivmod>
 8003650:	4602      	mov	r2, r0
 8003652:	460b      	mov	r3, r1
 8003654:	4613      	mov	r3, r2
 8003656:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003658:	4b0b      	ldr	r3, [pc, #44]	@ (8003688 <HAL_RCC_GetSysClockFreq+0x200>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	0c1b      	lsrs	r3, r3, #16
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	3301      	adds	r3, #1
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003668:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800366a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800366c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003670:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003672:	e002      	b.n	800367a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003674:	4b05      	ldr	r3, [pc, #20]	@ (800368c <HAL_RCC_GetSysClockFreq+0x204>)
 8003676:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800367a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800367c:	4618      	mov	r0, r3
 800367e:	3750      	adds	r7, #80	@ 0x50
 8003680:	46bd      	mov	sp, r7
 8003682:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003686:	bf00      	nop
 8003688:	40023800 	.word	0x40023800
 800368c:	00f42400 	.word	0x00f42400
 8003690:	007a1200 	.word	0x007a1200

08003694 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003698:	4b03      	ldr	r3, [pc, #12]	@ (80036a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800369a:	681b      	ldr	r3, [r3, #0]
}
 800369c:	4618      	mov	r0, r3
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	20000000 	.word	0x20000000

080036ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036b0:	f7ff fff0 	bl	8003694 <HAL_RCC_GetHCLKFreq>
 80036b4:	4602      	mov	r2, r0
 80036b6:	4b05      	ldr	r3, [pc, #20]	@ (80036cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	0a9b      	lsrs	r3, r3, #10
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	4903      	ldr	r1, [pc, #12]	@ (80036d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036c2:	5ccb      	ldrb	r3, [r1, r3]
 80036c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	40023800 	.word	0x40023800
 80036d0:	08005f9c 	.word	0x08005f9c

080036d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036d8:	f7ff ffdc 	bl	8003694 <HAL_RCC_GetHCLKFreq>
 80036dc:	4602      	mov	r2, r0
 80036de:	4b05      	ldr	r3, [pc, #20]	@ (80036f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	0b5b      	lsrs	r3, r3, #13
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	4903      	ldr	r1, [pc, #12]	@ (80036f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036ea:	5ccb      	ldrb	r3, [r1, r3]
 80036ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40023800 	.word	0x40023800
 80036f8:	08005f9c 	.word	0x08005f9c

080036fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b088      	sub	sp, #32
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003704:	2300      	movs	r3, #0
 8003706:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003708:	2300      	movs	r3, #0
 800370a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800370c:	2300      	movs	r3, #0
 800370e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003710:	2300      	movs	r3, #0
 8003712:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003714:	2300      	movs	r3, #0
 8003716:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d012      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003724:	4b69      	ldr	r3, [pc, #420]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	4a68      	ldr	r2, [pc, #416]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800372a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800372e:	6093      	str	r3, [r2, #8]
 8003730:	4b66      	ldr	r3, [pc, #408]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003738:	4964      	ldr	r1, [pc, #400]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800373a:	4313      	orrs	r3, r2
 800373c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003746:	2301      	movs	r3, #1
 8003748:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d017      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003756:	4b5d      	ldr	r3, [pc, #372]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003758:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800375c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003764:	4959      	ldr	r1, [pc, #356]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003770:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003774:	d101      	bne.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003776:	2301      	movs	r3, #1
 8003778:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003782:	2301      	movs	r3, #1
 8003784:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d017      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003792:	4b4e      	ldr	r3, [pc, #312]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003794:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003798:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a0:	494a      	ldr	r1, [pc, #296]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037b0:	d101      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80037b2:	2301      	movs	r3, #1
 80037b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80037be:	2301      	movs	r3, #1
 80037c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80037ce:	2301      	movs	r3, #1
 80037d0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0320 	and.w	r3, r3, #32
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 808b 	beq.w	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80037e0:	4b3a      	ldr	r3, [pc, #232]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e4:	4a39      	ldr	r2, [pc, #228]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80037ec:	4b37      	ldr	r3, [pc, #220]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037f4:	60bb      	str	r3, [r7, #8]
 80037f6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80037f8:	4b35      	ldr	r3, [pc, #212]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a34      	ldr	r2, [pc, #208]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003802:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003804:	f7fd fe60 	bl	80014c8 <HAL_GetTick>
 8003808:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800380a:	e008      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800380c:	f7fd fe5c 	bl	80014c8 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b64      	cmp	r3, #100	@ 0x64
 8003818:	d901      	bls.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e38f      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800381e:	4b2c      	ldr	r3, [pc, #176]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0f0      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800382a:	4b28      	ldr	r3, [pc, #160]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800382c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800382e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003832:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d035      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	429a      	cmp	r2, r3
 8003846:	d02e      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003848:	4b20      	ldr	r3, [pc, #128]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800384a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800384c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003850:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003852:	4b1e      	ldr	r3, [pc, #120]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003856:	4a1d      	ldr	r2, [pc, #116]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800385c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800385e:	4b1b      	ldr	r3, [pc, #108]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003862:	4a1a      	ldr	r2, [pc, #104]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003864:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003868:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800386a:	4a18      	ldr	r2, [pc, #96]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003870:	4b16      	ldr	r3, [pc, #88]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b01      	cmp	r3, #1
 800387a:	d114      	bne.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387c:	f7fd fe24 	bl	80014c8 <HAL_GetTick>
 8003880:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003882:	e00a      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003884:	f7fd fe20 	bl	80014c8 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003892:	4293      	cmp	r3, r2
 8003894:	d901      	bls.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e351      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800389a:	4b0c      	ldr	r3, [pc, #48]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800389c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0ee      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038b2:	d111      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80038b4:	4b05      	ldr	r3, [pc, #20]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80038c0:	4b04      	ldr	r3, [pc, #16]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80038c2:	400b      	ands	r3, r1
 80038c4:	4901      	ldr	r1, [pc, #4]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	608b      	str	r3, [r1, #8]
 80038ca:	e00b      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80038cc:	40023800 	.word	0x40023800
 80038d0:	40007000 	.word	0x40007000
 80038d4:	0ffffcff 	.word	0x0ffffcff
 80038d8:	4bac      	ldr	r3, [pc, #688]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	4aab      	ldr	r2, [pc, #684]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038de:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80038e2:	6093      	str	r3, [r2, #8]
 80038e4:	4ba9      	ldr	r3, [pc, #676]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038e6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f0:	49a6      	ldr	r1, [pc, #664]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0310 	and.w	r3, r3, #16
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d010      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003902:	4ba2      	ldr	r3, [pc, #648]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003904:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003908:	4aa0      	ldr	r2, [pc, #640]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800390a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800390e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003912:	4b9e      	ldr	r3, [pc, #632]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003914:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800391c:	499b      	ldr	r1, [pc, #620]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00a      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003930:	4b96      	ldr	r3, [pc, #600]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003936:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800393e:	4993      	ldr	r1, [pc, #588]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003940:	4313      	orrs	r3, r2
 8003942:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00a      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003952:	4b8e      	ldr	r3, [pc, #568]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003954:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003958:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003960:	498a      	ldr	r1, [pc, #552]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003962:	4313      	orrs	r3, r2
 8003964:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00a      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003974:	4b85      	ldr	r3, [pc, #532]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800397a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003982:	4982      	ldr	r1, [pc, #520]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003984:	4313      	orrs	r3, r2
 8003986:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00a      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003996:	4b7d      	ldr	r3, [pc, #500]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003998:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800399c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039a4:	4979      	ldr	r1, [pc, #484]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00a      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039b8:	4b74      	ldr	r3, [pc, #464]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039be:	f023 0203 	bic.w	r2, r3, #3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c6:	4971      	ldr	r1, [pc, #452]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00a      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039da:	4b6c      	ldr	r3, [pc, #432]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039e0:	f023 020c 	bic.w	r2, r3, #12
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039e8:	4968      	ldr	r1, [pc, #416]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00a      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039fc:	4b63      	ldr	r3, [pc, #396]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a02:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a0a:	4960      	ldr	r1, [pc, #384]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00a      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a1e:	4b5b      	ldr	r3, [pc, #364]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a24:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a2c:	4957      	ldr	r1, [pc, #348]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00a      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a40:	4b52      	ldr	r3, [pc, #328]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a46:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a4e:	494f      	ldr	r1, [pc, #316]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00a      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003a62:	4b4a      	ldr	r3, [pc, #296]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a68:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a70:	4946      	ldr	r1, [pc, #280]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00a      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003a84:	4b41      	ldr	r3, [pc, #260]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a8a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a92:	493e      	ldr	r1, [pc, #248]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00a      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003aa6:	4b39      	ldr	r3, [pc, #228]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ab4:	4935      	ldr	r1, [pc, #212]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00a      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ac8:	4b30      	ldr	r3, [pc, #192]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ace:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ad6:	492d      	ldr	r1, [pc, #180]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d011      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003aea:	4b28      	ldr	r3, [pc, #160]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003af0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003af8:	4924      	ldr	r1, [pc, #144]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b08:	d101      	bne.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0308 	and.w	r3, r3, #8
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b2a:	4b18      	ldr	r3, [pc, #96]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b30:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b38:	4914      	ldr	r1, [pc, #80]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00b      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b52:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b5c:	490b      	ldr	r1, [pc, #44]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00f      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003b70:	4b06      	ldr	r3, [pc, #24]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b76:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b80:	4902      	ldr	r1, [pc, #8]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003b88:	e002      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003b8a:	bf00      	nop
 8003b8c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00b      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b9c:	4b8a      	ldr	r3, [pc, #552]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ba2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bac:	4986      	ldr	r1, [pc, #536]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00b      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003bc0:	4b81      	ldr	r3, [pc, #516]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bc6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bd0:	497d      	ldr	r1, [pc, #500]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d006      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 80d6 	beq.w	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003bec:	4b76      	ldr	r3, [pc, #472]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a75      	ldr	r2, [pc, #468]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bf2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003bf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bf8:	f7fd fc66 	bl	80014c8 <HAL_GetTick>
 8003bfc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c00:	f7fd fc62 	bl	80014c8 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b64      	cmp	r3, #100	@ 0x64
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e195      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c12:	4b6d      	ldr	r3, [pc, #436]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f0      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d021      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d11d      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c32:	4b65      	ldr	r3, [pc, #404]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c38:	0c1b      	lsrs	r3, r3, #16
 8003c3a:	f003 0303 	and.w	r3, r3, #3
 8003c3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c40:	4b61      	ldr	r3, [pc, #388]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c46:	0e1b      	lsrs	r3, r3, #24
 8003c48:	f003 030f 	and.w	r3, r3, #15
 8003c4c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	019a      	lsls	r2, r3, #6
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	041b      	lsls	r3, r3, #16
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	061b      	lsls	r3, r3, #24
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	071b      	lsls	r3, r3, #28
 8003c66:	4958      	ldr	r1, [pc, #352]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d004      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c82:	d00a      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d02e      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c98:	d129      	bne.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c9a:	4b4b      	ldr	r3, [pc, #300]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ca0:	0c1b      	lsrs	r3, r3, #16
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ca8:	4b47      	ldr	r3, [pc, #284]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cae:	0f1b      	lsrs	r3, r3, #28
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	019a      	lsls	r2, r3, #6
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	041b      	lsls	r3, r3, #16
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	061b      	lsls	r3, r3, #24
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	071b      	lsls	r3, r3, #28
 8003cce:	493e      	ldr	r1, [pc, #248]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003cd6:	4b3c      	ldr	r3, [pc, #240]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cdc:	f023 021f 	bic.w	r2, r3, #31
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	4938      	ldr	r1, [pc, #224]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d01d      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003cfa:	4b33      	ldr	r3, [pc, #204]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d00:	0e1b      	lsrs	r3, r3, #24
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d08:	4b2f      	ldr	r3, [pc, #188]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d0e:	0f1b      	lsrs	r3, r3, #28
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	019a      	lsls	r2, r3, #6
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	041b      	lsls	r3, r3, #16
 8003d22:	431a      	orrs	r2, r3
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	061b      	lsls	r3, r3, #24
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	071b      	lsls	r3, r3, #28
 8003d2e:	4926      	ldr	r1, [pc, #152]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d011      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	019a      	lsls	r2, r3, #6
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	041b      	lsls	r3, r3, #16
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	061b      	lsls	r3, r3, #24
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	071b      	lsls	r3, r3, #28
 8003d5e:	491a      	ldr	r1, [pc, #104]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d66:	4b18      	ldr	r3, [pc, #96]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a17      	ldr	r2, [pc, #92]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d6c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d72:	f7fd fba9 	bl	80014c8 <HAL_GetTick>
 8003d76:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d78:	e008      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d7a:	f7fd fba5 	bl	80014c8 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b64      	cmp	r3, #100	@ 0x64
 8003d86:	d901      	bls.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e0d8      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0f0      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	f040 80ce 	bne.w	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003da0:	4b09      	ldr	r3, [pc, #36]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a08      	ldr	r2, [pc, #32]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003da6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003daa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dac:	f7fd fb8c 	bl	80014c8 <HAL_GetTick>
 8003db0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003db2:	e00b      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003db4:	f7fd fb88 	bl	80014c8 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b64      	cmp	r3, #100	@ 0x64
 8003dc0:	d904      	bls.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e0bb      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003dc6:	bf00      	nop
 8003dc8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003dcc:	4b5e      	ldr	r3, [pc, #376]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003dd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dd8:	d0ec      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d009      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d02e      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d12a      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e02:	4b51      	ldr	r3, [pc, #324]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e08:	0c1b      	lsrs	r3, r3, #16
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e10:	4b4d      	ldr	r3, [pc, #308]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e16:	0f1b      	lsrs	r3, r3, #28
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	019a      	lsls	r2, r3, #6
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	041b      	lsls	r3, r3, #16
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	061b      	lsls	r3, r3, #24
 8003e30:	431a      	orrs	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	071b      	lsls	r3, r3, #28
 8003e36:	4944      	ldr	r1, [pc, #272]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e3e:	4b42      	ldr	r3, [pc, #264]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e44:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	021b      	lsls	r3, r3, #8
 8003e50:	493d      	ldr	r1, [pc, #244]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d022      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e6c:	d11d      	bne.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e6e:	4b36      	ldr	r3, [pc, #216]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e74:	0e1b      	lsrs	r3, r3, #24
 8003e76:	f003 030f 	and.w	r3, r3, #15
 8003e7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e7c:	4b32      	ldr	r3, [pc, #200]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e82:	0f1b      	lsrs	r3, r3, #28
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	019a      	lsls	r2, r3, #6
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	041b      	lsls	r3, r3, #16
 8003e96:	431a      	orrs	r2, r3
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	061b      	lsls	r3, r3, #24
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	071b      	lsls	r3, r3, #28
 8003ea2:	4929      	ldr	r1, [pc, #164]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0308 	and.w	r3, r3, #8
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d028      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003eb6:	4b24      	ldr	r3, [pc, #144]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ebc:	0e1b      	lsrs	r3, r3, #24
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ec4:	4b20      	ldr	r3, [pc, #128]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eca:	0c1b      	lsrs	r3, r3, #16
 8003ecc:	f003 0303 	and.w	r3, r3, #3
 8003ed0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	019a      	lsls	r2, r3, #6
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	041b      	lsls	r3, r3, #16
 8003edc:	431a      	orrs	r2, r3
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	061b      	lsls	r3, r3, #24
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	69db      	ldr	r3, [r3, #28]
 8003ee8:	071b      	lsls	r3, r3, #28
 8003eea:	4917      	ldr	r1, [pc, #92]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ef2:	4b15      	ldr	r3, [pc, #84]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ef8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f00:	4911      	ldr	r1, [pc, #68]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003f08:	4b0f      	ldr	r3, [pc, #60]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a0e      	ldr	r2, [pc, #56]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f14:	f7fd fad8 	bl	80014c8 <HAL_GetTick>
 8003f18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f1c:	f7fd fad4 	bl	80014c8 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b64      	cmp	r3, #100	@ 0x64
 8003f28:	d901      	bls.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e007      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f2e:	4b06      	ldr	r3, [pc, #24]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f3a:	d1ef      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3720      	adds	r7, #32
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	40023800 	.word	0x40023800

08003f4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e049      	b.n	8003ff2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d106      	bne.n	8003f78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7fd f8bc 	bl	80010f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3304      	adds	r3, #4
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4610      	mov	r0, r2
 8003f8c:	f000 fcc0 	bl	8004910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b082      	sub	sp, #8
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e049      	b.n	80040a0 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	d106      	bne.n	8004026 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 f841 	bl	80040a8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2202      	movs	r2, #2
 800402a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3304      	adds	r3, #4
 8004036:	4619      	mov	r1, r3
 8004038:	4610      	mov	r0, r2
 800403a:	f000 fc69 	bl	8004910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d104      	bne.n	80040da <HAL_TIM_IC_Start_IT+0x1e>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	e023      	b.n	8004122 <HAL_TIM_IC_Start_IT+0x66>
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	2b04      	cmp	r3, #4
 80040de:	d104      	bne.n	80040ea <HAL_TIM_IC_Start_IT+0x2e>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	e01b      	b.n	8004122 <HAL_TIM_IC_Start_IT+0x66>
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d104      	bne.n	80040fa <HAL_TIM_IC_Start_IT+0x3e>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	e013      	b.n	8004122 <HAL_TIM_IC_Start_IT+0x66>
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	2b0c      	cmp	r3, #12
 80040fe:	d104      	bne.n	800410a <HAL_TIM_IC_Start_IT+0x4e>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004106:	b2db      	uxtb	r3, r3
 8004108:	e00b      	b.n	8004122 <HAL_TIM_IC_Start_IT+0x66>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	2b10      	cmp	r3, #16
 800410e:	d104      	bne.n	800411a <HAL_TIM_IC_Start_IT+0x5e>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004116:	b2db      	uxtb	r3, r3
 8004118:	e003      	b.n	8004122 <HAL_TIM_IC_Start_IT+0x66>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004120:	b2db      	uxtb	r3, r3
 8004122:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d104      	bne.n	8004134 <HAL_TIM_IC_Start_IT+0x78>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004130:	b2db      	uxtb	r3, r3
 8004132:	e013      	b.n	800415c <HAL_TIM_IC_Start_IT+0xa0>
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	2b04      	cmp	r3, #4
 8004138:	d104      	bne.n	8004144 <HAL_TIM_IC_Start_IT+0x88>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004140:	b2db      	uxtb	r3, r3
 8004142:	e00b      	b.n	800415c <HAL_TIM_IC_Start_IT+0xa0>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	2b08      	cmp	r3, #8
 8004148:	d104      	bne.n	8004154 <HAL_TIM_IC_Start_IT+0x98>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004150:	b2db      	uxtb	r3, r3
 8004152:	e003      	b.n	800415c <HAL_TIM_IC_Start_IT+0xa0>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800415a:	b2db      	uxtb	r3, r3
 800415c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800415e:	7bbb      	ldrb	r3, [r7, #14]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d102      	bne.n	800416a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004164:	7b7b      	ldrb	r3, [r7, #13]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d001      	beq.n	800416e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e0e2      	b.n	8004334 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d104      	bne.n	800417e <HAL_TIM_IC_Start_IT+0xc2>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800417c:	e023      	b.n	80041c6 <HAL_TIM_IC_Start_IT+0x10a>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b04      	cmp	r3, #4
 8004182:	d104      	bne.n	800418e <HAL_TIM_IC_Start_IT+0xd2>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800418c:	e01b      	b.n	80041c6 <HAL_TIM_IC_Start_IT+0x10a>
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b08      	cmp	r3, #8
 8004192:	d104      	bne.n	800419e <HAL_TIM_IC_Start_IT+0xe2>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800419c:	e013      	b.n	80041c6 <HAL_TIM_IC_Start_IT+0x10a>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b0c      	cmp	r3, #12
 80041a2:	d104      	bne.n	80041ae <HAL_TIM_IC_Start_IT+0xf2>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2202      	movs	r2, #2
 80041a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80041ac:	e00b      	b.n	80041c6 <HAL_TIM_IC_Start_IT+0x10a>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b10      	cmp	r3, #16
 80041b2:	d104      	bne.n	80041be <HAL_TIM_IC_Start_IT+0x102>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041bc:	e003      	b.n	80041c6 <HAL_TIM_IC_Start_IT+0x10a>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2202      	movs	r2, #2
 80041c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d104      	bne.n	80041d6 <HAL_TIM_IC_Start_IT+0x11a>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041d4:	e013      	b.n	80041fe <HAL_TIM_IC_Start_IT+0x142>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b04      	cmp	r3, #4
 80041da:	d104      	bne.n	80041e6 <HAL_TIM_IC_Start_IT+0x12a>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041e4:	e00b      	b.n	80041fe <HAL_TIM_IC_Start_IT+0x142>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2b08      	cmp	r3, #8
 80041ea:	d104      	bne.n	80041f6 <HAL_TIM_IC_Start_IT+0x13a>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80041f4:	e003      	b.n	80041fe <HAL_TIM_IC_Start_IT+0x142>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2202      	movs	r2, #2
 80041fa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b0c      	cmp	r3, #12
 8004202:	d841      	bhi.n	8004288 <HAL_TIM_IC_Start_IT+0x1cc>
 8004204:	a201      	add	r2, pc, #4	@ (adr r2, 800420c <HAL_TIM_IC_Start_IT+0x150>)
 8004206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420a:	bf00      	nop
 800420c:	08004241 	.word	0x08004241
 8004210:	08004289 	.word	0x08004289
 8004214:	08004289 	.word	0x08004289
 8004218:	08004289 	.word	0x08004289
 800421c:	08004253 	.word	0x08004253
 8004220:	08004289 	.word	0x08004289
 8004224:	08004289 	.word	0x08004289
 8004228:	08004289 	.word	0x08004289
 800422c:	08004265 	.word	0x08004265
 8004230:	08004289 	.word	0x08004289
 8004234:	08004289 	.word	0x08004289
 8004238:	08004289 	.word	0x08004289
 800423c:	08004277 	.word	0x08004277
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f042 0202 	orr.w	r2, r2, #2
 800424e:	60da      	str	r2, [r3, #12]
      break;
 8004250:	e01d      	b.n	800428e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68da      	ldr	r2, [r3, #12]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f042 0204 	orr.w	r2, r2, #4
 8004260:	60da      	str	r2, [r3, #12]
      break;
 8004262:	e014      	b.n	800428e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68da      	ldr	r2, [r3, #12]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0208 	orr.w	r2, r2, #8
 8004272:	60da      	str	r2, [r3, #12]
      break;
 8004274:	e00b      	b.n	800428e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68da      	ldr	r2, [r3, #12]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f042 0210 	orr.w	r2, r2, #16
 8004284:	60da      	str	r2, [r3, #12]
      break;
 8004286:	e002      	b.n	800428e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	73fb      	strb	r3, [r7, #15]
      break;
 800428c:	bf00      	nop
  }

  if (status == HAL_OK)
 800428e:	7bfb      	ldrb	r3, [r7, #15]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d14e      	bne.n	8004332 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2201      	movs	r2, #1
 800429a:	6839      	ldr	r1, [r7, #0]
 800429c:	4618      	mov	r0, r3
 800429e:	f000 fda7 	bl	8004df0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a25      	ldr	r2, [pc, #148]	@ (800433c <HAL_TIM_IC_Start_IT+0x280>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d022      	beq.n	80042f2 <HAL_TIM_IC_Start_IT+0x236>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042b4:	d01d      	beq.n	80042f2 <HAL_TIM_IC_Start_IT+0x236>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a21      	ldr	r2, [pc, #132]	@ (8004340 <HAL_TIM_IC_Start_IT+0x284>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d018      	beq.n	80042f2 <HAL_TIM_IC_Start_IT+0x236>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a1f      	ldr	r2, [pc, #124]	@ (8004344 <HAL_TIM_IC_Start_IT+0x288>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d013      	beq.n	80042f2 <HAL_TIM_IC_Start_IT+0x236>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a1e      	ldr	r2, [pc, #120]	@ (8004348 <HAL_TIM_IC_Start_IT+0x28c>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d00e      	beq.n	80042f2 <HAL_TIM_IC_Start_IT+0x236>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a1c      	ldr	r2, [pc, #112]	@ (800434c <HAL_TIM_IC_Start_IT+0x290>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d009      	beq.n	80042f2 <HAL_TIM_IC_Start_IT+0x236>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a1b      	ldr	r2, [pc, #108]	@ (8004350 <HAL_TIM_IC_Start_IT+0x294>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d004      	beq.n	80042f2 <HAL_TIM_IC_Start_IT+0x236>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a19      	ldr	r2, [pc, #100]	@ (8004354 <HAL_TIM_IC_Start_IT+0x298>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d115      	bne.n	800431e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	4b17      	ldr	r3, [pc, #92]	@ (8004358 <HAL_TIM_IC_Start_IT+0x29c>)
 80042fa:	4013      	ands	r3, r2
 80042fc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	2b06      	cmp	r3, #6
 8004302:	d015      	beq.n	8004330 <HAL_TIM_IC_Start_IT+0x274>
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800430a:	d011      	beq.n	8004330 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0201 	orr.w	r2, r2, #1
 800431a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800431c:	e008      	b.n	8004330 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f042 0201 	orr.w	r2, r2, #1
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	e000      	b.n	8004332 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004330:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004332:	7bfb      	ldrb	r3, [r7, #15]
}
 8004334:	4618      	mov	r0, r3
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40010000 	.word	0x40010000
 8004340:	40000400 	.word	0x40000400
 8004344:	40000800 	.word	0x40000800
 8004348:	40000c00 	.word	0x40000c00
 800434c:	40010400 	.word	0x40010400
 8004350:	40014000 	.word	0x40014000
 8004354:	40001800 	.word	0x40001800
 8004358:	00010007 	.word	0x00010007

0800435c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d020      	beq.n	80043c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d01b      	beq.n	80043c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f06f 0202 	mvn.w	r2, #2
 8004390:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	f003 0303 	and.w	r3, r3, #3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7fc f9aa 	bl	8000700 <HAL_TIM_IC_CaptureCallback>
 80043ac:	e005      	b.n	80043ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 fa90 	bl	80048d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 fa97 	bl	80048e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	f003 0304 	and.w	r3, r3, #4
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d020      	beq.n	800440c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f003 0304 	and.w	r3, r3, #4
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d01b      	beq.n	800440c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f06f 0204 	mvn.w	r2, #4
 80043dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2202      	movs	r2, #2
 80043e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d003      	beq.n	80043fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7fc f984 	bl	8000700 <HAL_TIM_IC_CaptureCallback>
 80043f8:	e005      	b.n	8004406 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 fa6a 	bl	80048d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 fa71 	bl	80048e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	f003 0308 	and.w	r3, r3, #8
 8004412:	2b00      	cmp	r3, #0
 8004414:	d020      	beq.n	8004458 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f003 0308 	and.w	r3, r3, #8
 800441c:	2b00      	cmp	r3, #0
 800441e:	d01b      	beq.n	8004458 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f06f 0208 	mvn.w	r2, #8
 8004428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2204      	movs	r2, #4
 800442e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7fc f95e 	bl	8000700 <HAL_TIM_IC_CaptureCallback>
 8004444:	e005      	b.n	8004452 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fa44 	bl	80048d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 fa4b 	bl	80048e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f003 0310 	and.w	r3, r3, #16
 800445e:	2b00      	cmp	r3, #0
 8004460:	d020      	beq.n	80044a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f003 0310 	and.w	r3, r3, #16
 8004468:	2b00      	cmp	r3, #0
 800446a:	d01b      	beq.n	80044a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f06f 0210 	mvn.w	r2, #16
 8004474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2208      	movs	r2, #8
 800447a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7fc f938 	bl	8000700 <HAL_TIM_IC_CaptureCallback>
 8004490:	e005      	b.n	800449e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fa1e 	bl	80048d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 fa25 	bl	80048e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00c      	beq.n	80044c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d007      	beq.n	80044c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f06f 0201 	mvn.w	r2, #1
 80044c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f9fc 	bl	80048c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d104      	bne.n	80044dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00c      	beq.n	80044f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d007      	beq.n	80044f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80044ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 fd3b 	bl	8004f6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00c      	beq.n	800451a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004506:	2b00      	cmp	r3, #0
 8004508:	d007      	beq.n	800451a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 fd33 	bl	8004f80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00c      	beq.n	800453e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800452a:	2b00      	cmp	r3, #0
 800452c:	d007      	beq.n	800453e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f9df 	bl	80048fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	f003 0320 	and.w	r3, r3, #32
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00c      	beq.n	8004562 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f003 0320 	and.w	r3, r3, #32
 800454e:	2b00      	cmp	r3, #0
 8004550:	d007      	beq.n	8004562 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f06f 0220 	mvn.w	r2, #32
 800455a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 fcfb 	bl	8004f58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004562:	bf00      	nop
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b086      	sub	sp, #24
 800456e:	af00      	add	r7, sp, #0
 8004570:	60f8      	str	r0, [r7, #12]
 8004572:	60b9      	str	r1, [r7, #8]
 8004574:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004576:	2300      	movs	r3, #0
 8004578:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004580:	2b01      	cmp	r3, #1
 8004582:	d101      	bne.n	8004588 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004584:	2302      	movs	r3, #2
 8004586:	e088      	b.n	800469a <HAL_TIM_IC_ConfigChannel+0x130>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d11b      	bne.n	80045ce <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80045a6:	f000 fa5f 	bl	8004a68 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	699a      	ldr	r2, [r3, #24]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 020c 	bic.w	r2, r2, #12
 80045b8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6999      	ldr	r1, [r3, #24]
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	619a      	str	r2, [r3, #24]
 80045cc:	e060      	b.n	8004690 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b04      	cmp	r3, #4
 80045d2:	d11c      	bne.n	800460e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80045e4:	f000 fae3 	bl	8004bae <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	699a      	ldr	r2, [r3, #24]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80045f6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6999      	ldr	r1, [r3, #24]
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	021a      	lsls	r2, r3, #8
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	619a      	str	r2, [r3, #24]
 800460c:	e040      	b.n	8004690 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b08      	cmp	r3, #8
 8004612:	d11b      	bne.n	800464c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004624:	f000 fb30 	bl	8004c88 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	69da      	ldr	r2, [r3, #28]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 020c 	bic.w	r2, r2, #12
 8004636:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	69d9      	ldr	r1, [r3, #28]
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	689a      	ldr	r2, [r3, #8]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	61da      	str	r2, [r3, #28]
 800464a:	e021      	b.n	8004690 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b0c      	cmp	r3, #12
 8004650:	d11c      	bne.n	800468c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004662:	f000 fb4d 	bl	8004d00 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	69da      	ldr	r2, [r3, #28]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004674:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	69d9      	ldr	r1, [r3, #28]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	021a      	lsls	r2, r3, #8
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	61da      	str	r2, [r3, #28]
 800468a:	e001      	b.n	8004690 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004698:	7dfb      	ldrb	r3, [r7, #23]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3718      	adds	r7, #24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ae:	2300      	movs	r3, #0
 80046b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_TIM_ConfigClockSource+0x1c>
 80046bc:	2302      	movs	r3, #2
 80046be:	e0b4      	b.n	800482a <HAL_TIM_ConfigClockSource+0x186>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	4b56      	ldr	r3, [pc, #344]	@ (8004834 <HAL_TIM_ConfigClockSource+0x190>)
 80046dc:	4013      	ands	r3, r2
 80046de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046f8:	d03e      	beq.n	8004778 <HAL_TIM_ConfigClockSource+0xd4>
 80046fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046fe:	f200 8087 	bhi.w	8004810 <HAL_TIM_ConfigClockSource+0x16c>
 8004702:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004706:	f000 8086 	beq.w	8004816 <HAL_TIM_ConfigClockSource+0x172>
 800470a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800470e:	d87f      	bhi.n	8004810 <HAL_TIM_ConfigClockSource+0x16c>
 8004710:	2b70      	cmp	r3, #112	@ 0x70
 8004712:	d01a      	beq.n	800474a <HAL_TIM_ConfigClockSource+0xa6>
 8004714:	2b70      	cmp	r3, #112	@ 0x70
 8004716:	d87b      	bhi.n	8004810 <HAL_TIM_ConfigClockSource+0x16c>
 8004718:	2b60      	cmp	r3, #96	@ 0x60
 800471a:	d050      	beq.n	80047be <HAL_TIM_ConfigClockSource+0x11a>
 800471c:	2b60      	cmp	r3, #96	@ 0x60
 800471e:	d877      	bhi.n	8004810 <HAL_TIM_ConfigClockSource+0x16c>
 8004720:	2b50      	cmp	r3, #80	@ 0x50
 8004722:	d03c      	beq.n	800479e <HAL_TIM_ConfigClockSource+0xfa>
 8004724:	2b50      	cmp	r3, #80	@ 0x50
 8004726:	d873      	bhi.n	8004810 <HAL_TIM_ConfigClockSource+0x16c>
 8004728:	2b40      	cmp	r3, #64	@ 0x40
 800472a:	d058      	beq.n	80047de <HAL_TIM_ConfigClockSource+0x13a>
 800472c:	2b40      	cmp	r3, #64	@ 0x40
 800472e:	d86f      	bhi.n	8004810 <HAL_TIM_ConfigClockSource+0x16c>
 8004730:	2b30      	cmp	r3, #48	@ 0x30
 8004732:	d064      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0x15a>
 8004734:	2b30      	cmp	r3, #48	@ 0x30
 8004736:	d86b      	bhi.n	8004810 <HAL_TIM_ConfigClockSource+0x16c>
 8004738:	2b20      	cmp	r3, #32
 800473a:	d060      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0x15a>
 800473c:	2b20      	cmp	r3, #32
 800473e:	d867      	bhi.n	8004810 <HAL_TIM_ConfigClockSource+0x16c>
 8004740:	2b00      	cmp	r3, #0
 8004742:	d05c      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0x15a>
 8004744:	2b10      	cmp	r3, #16
 8004746:	d05a      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0x15a>
 8004748:	e062      	b.n	8004810 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800475a:	f000 fb29 	bl	8004db0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800476c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	609a      	str	r2, [r3, #8]
      break;
 8004776:	e04f      	b.n	8004818 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004788:	f000 fb12 	bl	8004db0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689a      	ldr	r2, [r3, #8]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800479a:	609a      	str	r2, [r3, #8]
      break;
 800479c:	e03c      	b.n	8004818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047aa:	461a      	mov	r2, r3
 80047ac:	f000 f9d0 	bl	8004b50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2150      	movs	r1, #80	@ 0x50
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 fadf 	bl	8004d7a <TIM_ITRx_SetConfig>
      break;
 80047bc:	e02c      	b.n	8004818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047ca:	461a      	mov	r2, r3
 80047cc:	f000 fa2c 	bl	8004c28 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2160      	movs	r1, #96	@ 0x60
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 facf 	bl	8004d7a <TIM_ITRx_SetConfig>
      break;
 80047dc:	e01c      	b.n	8004818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ea:	461a      	mov	r2, r3
 80047ec:	f000 f9b0 	bl	8004b50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2140      	movs	r1, #64	@ 0x40
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 fabf 	bl	8004d7a <TIM_ITRx_SetConfig>
      break;
 80047fc:	e00c      	b.n	8004818 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4619      	mov	r1, r3
 8004808:	4610      	mov	r0, r2
 800480a:	f000 fab6 	bl	8004d7a <TIM_ITRx_SetConfig>
      break;
 800480e:	e003      	b.n	8004818 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	73fb      	strb	r3, [r7, #15]
      break;
 8004814:	e000      	b.n	8004818 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004816:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004828:	7bfb      	ldrb	r3, [r7, #15]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	fffeff88 	.word	0xfffeff88

08004838 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004842:	2300      	movs	r3, #0
 8004844:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b0c      	cmp	r3, #12
 800484a:	d831      	bhi.n	80048b0 <HAL_TIM_ReadCapturedValue+0x78>
 800484c:	a201      	add	r2, pc, #4	@ (adr r2, 8004854 <HAL_TIM_ReadCapturedValue+0x1c>)
 800484e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004852:	bf00      	nop
 8004854:	08004889 	.word	0x08004889
 8004858:	080048b1 	.word	0x080048b1
 800485c:	080048b1 	.word	0x080048b1
 8004860:	080048b1 	.word	0x080048b1
 8004864:	08004893 	.word	0x08004893
 8004868:	080048b1 	.word	0x080048b1
 800486c:	080048b1 	.word	0x080048b1
 8004870:	080048b1 	.word	0x080048b1
 8004874:	0800489d 	.word	0x0800489d
 8004878:	080048b1 	.word	0x080048b1
 800487c:	080048b1 	.word	0x080048b1
 8004880:	080048b1 	.word	0x080048b1
 8004884:	080048a7 	.word	0x080048a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800488e:	60fb      	str	r3, [r7, #12]

      break;
 8004890:	e00f      	b.n	80048b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004898:	60fb      	str	r3, [r7, #12]

      break;
 800489a:	e00a      	b.n	80048b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048a2:	60fb      	str	r3, [r7, #12]

      break;
 80048a4:	e005      	b.n	80048b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ac:	60fb      	str	r3, [r7, #12]

      break;
 80048ae:	e000      	b.n	80048b2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80048b0:	bf00      	nop
  }

  return tmpreg;
 80048b2:	68fb      	ldr	r3, [r7, #12]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a46      	ldr	r2, [pc, #280]	@ (8004a3c <TIM_Base_SetConfig+0x12c>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d013      	beq.n	8004950 <TIM_Base_SetConfig+0x40>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800492e:	d00f      	beq.n	8004950 <TIM_Base_SetConfig+0x40>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a43      	ldr	r2, [pc, #268]	@ (8004a40 <TIM_Base_SetConfig+0x130>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d00b      	beq.n	8004950 <TIM_Base_SetConfig+0x40>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a42      	ldr	r2, [pc, #264]	@ (8004a44 <TIM_Base_SetConfig+0x134>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d007      	beq.n	8004950 <TIM_Base_SetConfig+0x40>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a41      	ldr	r2, [pc, #260]	@ (8004a48 <TIM_Base_SetConfig+0x138>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d003      	beq.n	8004950 <TIM_Base_SetConfig+0x40>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a40      	ldr	r2, [pc, #256]	@ (8004a4c <TIM_Base_SetConfig+0x13c>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d108      	bne.n	8004962 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	4313      	orrs	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a35      	ldr	r2, [pc, #212]	@ (8004a3c <TIM_Base_SetConfig+0x12c>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d02b      	beq.n	80049c2 <TIM_Base_SetConfig+0xb2>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004970:	d027      	beq.n	80049c2 <TIM_Base_SetConfig+0xb2>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a32      	ldr	r2, [pc, #200]	@ (8004a40 <TIM_Base_SetConfig+0x130>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d023      	beq.n	80049c2 <TIM_Base_SetConfig+0xb2>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a31      	ldr	r2, [pc, #196]	@ (8004a44 <TIM_Base_SetConfig+0x134>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d01f      	beq.n	80049c2 <TIM_Base_SetConfig+0xb2>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a30      	ldr	r2, [pc, #192]	@ (8004a48 <TIM_Base_SetConfig+0x138>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d01b      	beq.n	80049c2 <TIM_Base_SetConfig+0xb2>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a2f      	ldr	r2, [pc, #188]	@ (8004a4c <TIM_Base_SetConfig+0x13c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d017      	beq.n	80049c2 <TIM_Base_SetConfig+0xb2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a2e      	ldr	r2, [pc, #184]	@ (8004a50 <TIM_Base_SetConfig+0x140>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d013      	beq.n	80049c2 <TIM_Base_SetConfig+0xb2>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a2d      	ldr	r2, [pc, #180]	@ (8004a54 <TIM_Base_SetConfig+0x144>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d00f      	beq.n	80049c2 <TIM_Base_SetConfig+0xb2>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a2c      	ldr	r2, [pc, #176]	@ (8004a58 <TIM_Base_SetConfig+0x148>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d00b      	beq.n	80049c2 <TIM_Base_SetConfig+0xb2>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a2b      	ldr	r2, [pc, #172]	@ (8004a5c <TIM_Base_SetConfig+0x14c>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d007      	beq.n	80049c2 <TIM_Base_SetConfig+0xb2>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a2a      	ldr	r2, [pc, #168]	@ (8004a60 <TIM_Base_SetConfig+0x150>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d003      	beq.n	80049c2 <TIM_Base_SetConfig+0xb2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a29      	ldr	r2, [pc, #164]	@ (8004a64 <TIM_Base_SetConfig+0x154>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d108      	bne.n	80049d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	4313      	orrs	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a10      	ldr	r2, [pc, #64]	@ (8004a3c <TIM_Base_SetConfig+0x12c>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d003      	beq.n	8004a08 <TIM_Base_SetConfig+0xf8>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a12      	ldr	r2, [pc, #72]	@ (8004a4c <TIM_Base_SetConfig+0x13c>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d103      	bne.n	8004a10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	691a      	ldr	r2, [r3, #16]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d105      	bne.n	8004a2e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	f023 0201 	bic.w	r2, r3, #1
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	611a      	str	r2, [r3, #16]
  }
}
 8004a2e:	bf00      	nop
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	40010000 	.word	0x40010000
 8004a40:	40000400 	.word	0x40000400
 8004a44:	40000800 	.word	0x40000800
 8004a48:	40000c00 	.word	0x40000c00
 8004a4c:	40010400 	.word	0x40010400
 8004a50:	40014000 	.word	0x40014000
 8004a54:	40014400 	.word	0x40014400
 8004a58:	40014800 	.word	0x40014800
 8004a5c:	40001800 	.word	0x40001800
 8004a60:	40001c00 	.word	0x40001c00
 8004a64:	40002000 	.word	0x40002000

08004a68 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b087      	sub	sp, #28
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
 8004a74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	f023 0201 	bic.w	r2, r3, #1
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4a28      	ldr	r2, [pc, #160]	@ (8004b34 <TIM_TI1_SetConfig+0xcc>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d01b      	beq.n	8004ace <TIM_TI1_SetConfig+0x66>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a9c:	d017      	beq.n	8004ace <TIM_TI1_SetConfig+0x66>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	4a25      	ldr	r2, [pc, #148]	@ (8004b38 <TIM_TI1_SetConfig+0xd0>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d013      	beq.n	8004ace <TIM_TI1_SetConfig+0x66>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4a24      	ldr	r2, [pc, #144]	@ (8004b3c <TIM_TI1_SetConfig+0xd4>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d00f      	beq.n	8004ace <TIM_TI1_SetConfig+0x66>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	4a23      	ldr	r2, [pc, #140]	@ (8004b40 <TIM_TI1_SetConfig+0xd8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d00b      	beq.n	8004ace <TIM_TI1_SetConfig+0x66>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	4a22      	ldr	r2, [pc, #136]	@ (8004b44 <TIM_TI1_SetConfig+0xdc>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d007      	beq.n	8004ace <TIM_TI1_SetConfig+0x66>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	4a21      	ldr	r2, [pc, #132]	@ (8004b48 <TIM_TI1_SetConfig+0xe0>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d003      	beq.n	8004ace <TIM_TI1_SetConfig+0x66>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	4a20      	ldr	r2, [pc, #128]	@ (8004b4c <TIM_TI1_SetConfig+0xe4>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d101      	bne.n	8004ad2 <TIM_TI1_SetConfig+0x6a>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e000      	b.n	8004ad4 <TIM_TI1_SetConfig+0x6c>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d008      	beq.n	8004aea <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f023 0303 	bic.w	r3, r3, #3
 8004ade:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	617b      	str	r3, [r7, #20]
 8004ae8:	e003      	b.n	8004af2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f043 0301 	orr.w	r3, r3, #1
 8004af0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004af8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	f023 030a 	bic.w	r3, r3, #10
 8004b0c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	f003 030a 	and.w	r3, r3, #10
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	621a      	str	r2, [r3, #32]
}
 8004b26:	bf00      	nop
 8004b28:	371c      	adds	r7, #28
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	40010000 	.word	0x40010000
 8004b38:	40000400 	.word	0x40000400
 8004b3c:	40000800 	.word	0x40000800
 8004b40:	40000c00 	.word	0x40000c00
 8004b44:	40010400 	.word	0x40010400
 8004b48:	40014000 	.word	0x40014000
 8004b4c:	40001800 	.word	0x40001800

08004b50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	f023 0201 	bic.w	r2, r3, #1
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	011b      	lsls	r3, r3, #4
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f023 030a 	bic.w	r3, r3, #10
 8004b8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	621a      	str	r2, [r3, #32]
}
 8004ba2:	bf00      	nop
 8004ba4:	371c      	adds	r7, #28
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b087      	sub	sp, #28
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	60f8      	str	r0, [r7, #12]
 8004bb6:	60b9      	str	r1, [r7, #8]
 8004bb8:	607a      	str	r2, [r7, #4]
 8004bba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6a1b      	ldr	r3, [r3, #32]
 8004bc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	f023 0210 	bic.w	r2, r3, #16
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	021b      	lsls	r3, r3, #8
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004bec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	031b      	lsls	r3, r3, #12
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c00:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	011b      	lsls	r3, r3, #4
 8004c06:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	621a      	str	r2, [r3, #32]
}
 8004c1c:	bf00      	nop
 8004c1e:	371c      	adds	r7, #28
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	f023 0210 	bic.w	r2, r3, #16
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	031b      	lsls	r3, r3, #12
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c64:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	011b      	lsls	r3, r3, #4
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	621a      	str	r2, [r3, #32]
}
 8004c7c:	bf00      	nop
 8004c7e:	371c      	adds	r7, #28
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
 8004c94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6a1b      	ldr	r3, [r3, #32]
 8004ca0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	f023 0303 	bic.w	r3, r3, #3
 8004cb4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cc4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	011b      	lsls	r3, r3, #4
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004cd8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	021b      	lsls	r3, r3, #8
 8004cde:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	621a      	str	r2, [r3, #32]
}
 8004cf4:	bf00      	nop
 8004cf6:	371c      	adds	r7, #28
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b087      	sub	sp, #28
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
 8004d0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d2c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	021b      	lsls	r3, r3, #8
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d3e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	031b      	lsls	r3, r3, #12
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004d52:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	031b      	lsls	r3, r3, #12
 8004d58:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	621a      	str	r2, [r3, #32]
}
 8004d6e:	bf00      	nop
 8004d70:	371c      	adds	r7, #28
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b085      	sub	sp, #20
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
 8004d82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	f043 0307 	orr.w	r3, r3, #7
 8004d9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	609a      	str	r2, [r3, #8]
}
 8004da4:	bf00      	nop
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b087      	sub	sp, #28
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
 8004dbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004dca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	021a      	lsls	r2, r3, #8
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	609a      	str	r2, [r3, #8]
}
 8004de4:	bf00      	nop
 8004de6:	371c      	adds	r7, #28
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	f003 031f 	and.w	r3, r3, #31
 8004e02:	2201      	movs	r2, #1
 8004e04:	fa02 f303 	lsl.w	r3, r2, r3
 8004e08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6a1a      	ldr	r2, [r3, #32]
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	43db      	mvns	r3, r3
 8004e12:	401a      	ands	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6a1a      	ldr	r2, [r3, #32]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	f003 031f 	and.w	r3, r3, #31
 8004e22:	6879      	ldr	r1, [r7, #4]
 8004e24:	fa01 f303 	lsl.w	r3, r1, r3
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	621a      	str	r2, [r3, #32]
}
 8004e2e:	bf00      	nop
 8004e30:	371c      	adds	r7, #28
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
	...

08004e3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d101      	bne.n	8004e54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e50:	2302      	movs	r3, #2
 8004e52:	e06d      	b.n	8004f30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a30      	ldr	r2, [pc, #192]	@ (8004f3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d004      	beq.n	8004e88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a2f      	ldr	r2, [pc, #188]	@ (8004f40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d108      	bne.n	8004e9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004e8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ea0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a20      	ldr	r2, [pc, #128]	@ (8004f3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d022      	beq.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ec6:	d01d      	beq.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a1d      	ldr	r2, [pc, #116]	@ (8004f44 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d018      	beq.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a1c      	ldr	r2, [pc, #112]	@ (8004f48 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d013      	beq.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a1a      	ldr	r2, [pc, #104]	@ (8004f4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d00e      	beq.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a15      	ldr	r2, [pc, #84]	@ (8004f40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d009      	beq.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a16      	ldr	r2, [pc, #88]	@ (8004f50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d004      	beq.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a15      	ldr	r2, [pc, #84]	@ (8004f54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d10c      	bne.n	8004f1e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	40010000 	.word	0x40010000
 8004f40:	40010400 	.word	0x40010400
 8004f44:	40000400 	.word	0x40000400
 8004f48:	40000800 	.word	0x40000800
 8004f4c:	40000c00 	.word	0x40000c00
 8004f50:	40014000 	.word	0x40014000
 8004f54:	40001800 	.word	0x40001800

08004f58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e040      	b.n	8005028 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d106      	bne.n	8004fbc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7fc f8e6 	bl	8001188 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2224      	movs	r2, #36	@ 0x24
 8004fc0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 0201 	bic.w	r2, r2, #1
 8004fd0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d002      	beq.n	8004fe0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 fa8c 	bl	80054f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f825 	bl	8005030 <UART_SetConfig>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d101      	bne.n	8004ff0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e01b      	b.n	8005028 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ffe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689a      	ldr	r2, [r3, #8]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800500e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0201 	orr.w	r2, r2, #1
 800501e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 fb0b 	bl	800563c <UART_CheckIdleState>
 8005026:	4603      	mov	r3, r0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3708      	adds	r7, #8
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b088      	sub	sp, #32
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005038:	2300      	movs	r3, #0
 800503a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	431a      	orrs	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	69db      	ldr	r3, [r3, #28]
 8005050:	4313      	orrs	r3, r2
 8005052:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	4ba6      	ldr	r3, [pc, #664]	@ (80052f4 <UART_SetConfig+0x2c4>)
 800505c:	4013      	ands	r3, r2
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6812      	ldr	r2, [r2, #0]
 8005062:	6979      	ldr	r1, [r7, #20]
 8005064:	430b      	orrs	r3, r1
 8005066:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68da      	ldr	r2, [r3, #12]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a1b      	ldr	r3, [r3, #32]
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	4313      	orrs	r3, r2
 800508c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	430a      	orrs	r2, r1
 80050a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a94      	ldr	r2, [pc, #592]	@ (80052f8 <UART_SetConfig+0x2c8>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d120      	bne.n	80050ee <UART_SetConfig+0xbe>
 80050ac:	4b93      	ldr	r3, [pc, #588]	@ (80052fc <UART_SetConfig+0x2cc>)
 80050ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050b2:	f003 0303 	and.w	r3, r3, #3
 80050b6:	2b03      	cmp	r3, #3
 80050b8:	d816      	bhi.n	80050e8 <UART_SetConfig+0xb8>
 80050ba:	a201      	add	r2, pc, #4	@ (adr r2, 80050c0 <UART_SetConfig+0x90>)
 80050bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c0:	080050d1 	.word	0x080050d1
 80050c4:	080050dd 	.word	0x080050dd
 80050c8:	080050d7 	.word	0x080050d7
 80050cc:	080050e3 	.word	0x080050e3
 80050d0:	2301      	movs	r3, #1
 80050d2:	77fb      	strb	r3, [r7, #31]
 80050d4:	e150      	b.n	8005378 <UART_SetConfig+0x348>
 80050d6:	2302      	movs	r3, #2
 80050d8:	77fb      	strb	r3, [r7, #31]
 80050da:	e14d      	b.n	8005378 <UART_SetConfig+0x348>
 80050dc:	2304      	movs	r3, #4
 80050de:	77fb      	strb	r3, [r7, #31]
 80050e0:	e14a      	b.n	8005378 <UART_SetConfig+0x348>
 80050e2:	2308      	movs	r3, #8
 80050e4:	77fb      	strb	r3, [r7, #31]
 80050e6:	e147      	b.n	8005378 <UART_SetConfig+0x348>
 80050e8:	2310      	movs	r3, #16
 80050ea:	77fb      	strb	r3, [r7, #31]
 80050ec:	e144      	b.n	8005378 <UART_SetConfig+0x348>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a83      	ldr	r2, [pc, #524]	@ (8005300 <UART_SetConfig+0x2d0>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d132      	bne.n	800515e <UART_SetConfig+0x12e>
 80050f8:	4b80      	ldr	r3, [pc, #512]	@ (80052fc <UART_SetConfig+0x2cc>)
 80050fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050fe:	f003 030c 	and.w	r3, r3, #12
 8005102:	2b0c      	cmp	r3, #12
 8005104:	d828      	bhi.n	8005158 <UART_SetConfig+0x128>
 8005106:	a201      	add	r2, pc, #4	@ (adr r2, 800510c <UART_SetConfig+0xdc>)
 8005108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510c:	08005141 	.word	0x08005141
 8005110:	08005159 	.word	0x08005159
 8005114:	08005159 	.word	0x08005159
 8005118:	08005159 	.word	0x08005159
 800511c:	0800514d 	.word	0x0800514d
 8005120:	08005159 	.word	0x08005159
 8005124:	08005159 	.word	0x08005159
 8005128:	08005159 	.word	0x08005159
 800512c:	08005147 	.word	0x08005147
 8005130:	08005159 	.word	0x08005159
 8005134:	08005159 	.word	0x08005159
 8005138:	08005159 	.word	0x08005159
 800513c:	08005153 	.word	0x08005153
 8005140:	2300      	movs	r3, #0
 8005142:	77fb      	strb	r3, [r7, #31]
 8005144:	e118      	b.n	8005378 <UART_SetConfig+0x348>
 8005146:	2302      	movs	r3, #2
 8005148:	77fb      	strb	r3, [r7, #31]
 800514a:	e115      	b.n	8005378 <UART_SetConfig+0x348>
 800514c:	2304      	movs	r3, #4
 800514e:	77fb      	strb	r3, [r7, #31]
 8005150:	e112      	b.n	8005378 <UART_SetConfig+0x348>
 8005152:	2308      	movs	r3, #8
 8005154:	77fb      	strb	r3, [r7, #31]
 8005156:	e10f      	b.n	8005378 <UART_SetConfig+0x348>
 8005158:	2310      	movs	r3, #16
 800515a:	77fb      	strb	r3, [r7, #31]
 800515c:	e10c      	b.n	8005378 <UART_SetConfig+0x348>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a68      	ldr	r2, [pc, #416]	@ (8005304 <UART_SetConfig+0x2d4>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d120      	bne.n	80051aa <UART_SetConfig+0x17a>
 8005168:	4b64      	ldr	r3, [pc, #400]	@ (80052fc <UART_SetConfig+0x2cc>)
 800516a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800516e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005172:	2b30      	cmp	r3, #48	@ 0x30
 8005174:	d013      	beq.n	800519e <UART_SetConfig+0x16e>
 8005176:	2b30      	cmp	r3, #48	@ 0x30
 8005178:	d814      	bhi.n	80051a4 <UART_SetConfig+0x174>
 800517a:	2b20      	cmp	r3, #32
 800517c:	d009      	beq.n	8005192 <UART_SetConfig+0x162>
 800517e:	2b20      	cmp	r3, #32
 8005180:	d810      	bhi.n	80051a4 <UART_SetConfig+0x174>
 8005182:	2b00      	cmp	r3, #0
 8005184:	d002      	beq.n	800518c <UART_SetConfig+0x15c>
 8005186:	2b10      	cmp	r3, #16
 8005188:	d006      	beq.n	8005198 <UART_SetConfig+0x168>
 800518a:	e00b      	b.n	80051a4 <UART_SetConfig+0x174>
 800518c:	2300      	movs	r3, #0
 800518e:	77fb      	strb	r3, [r7, #31]
 8005190:	e0f2      	b.n	8005378 <UART_SetConfig+0x348>
 8005192:	2302      	movs	r3, #2
 8005194:	77fb      	strb	r3, [r7, #31]
 8005196:	e0ef      	b.n	8005378 <UART_SetConfig+0x348>
 8005198:	2304      	movs	r3, #4
 800519a:	77fb      	strb	r3, [r7, #31]
 800519c:	e0ec      	b.n	8005378 <UART_SetConfig+0x348>
 800519e:	2308      	movs	r3, #8
 80051a0:	77fb      	strb	r3, [r7, #31]
 80051a2:	e0e9      	b.n	8005378 <UART_SetConfig+0x348>
 80051a4:	2310      	movs	r3, #16
 80051a6:	77fb      	strb	r3, [r7, #31]
 80051a8:	e0e6      	b.n	8005378 <UART_SetConfig+0x348>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a56      	ldr	r2, [pc, #344]	@ (8005308 <UART_SetConfig+0x2d8>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d120      	bne.n	80051f6 <UART_SetConfig+0x1c6>
 80051b4:	4b51      	ldr	r3, [pc, #324]	@ (80052fc <UART_SetConfig+0x2cc>)
 80051b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80051be:	2bc0      	cmp	r3, #192	@ 0xc0
 80051c0:	d013      	beq.n	80051ea <UART_SetConfig+0x1ba>
 80051c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80051c4:	d814      	bhi.n	80051f0 <UART_SetConfig+0x1c0>
 80051c6:	2b80      	cmp	r3, #128	@ 0x80
 80051c8:	d009      	beq.n	80051de <UART_SetConfig+0x1ae>
 80051ca:	2b80      	cmp	r3, #128	@ 0x80
 80051cc:	d810      	bhi.n	80051f0 <UART_SetConfig+0x1c0>
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d002      	beq.n	80051d8 <UART_SetConfig+0x1a8>
 80051d2:	2b40      	cmp	r3, #64	@ 0x40
 80051d4:	d006      	beq.n	80051e4 <UART_SetConfig+0x1b4>
 80051d6:	e00b      	b.n	80051f0 <UART_SetConfig+0x1c0>
 80051d8:	2300      	movs	r3, #0
 80051da:	77fb      	strb	r3, [r7, #31]
 80051dc:	e0cc      	b.n	8005378 <UART_SetConfig+0x348>
 80051de:	2302      	movs	r3, #2
 80051e0:	77fb      	strb	r3, [r7, #31]
 80051e2:	e0c9      	b.n	8005378 <UART_SetConfig+0x348>
 80051e4:	2304      	movs	r3, #4
 80051e6:	77fb      	strb	r3, [r7, #31]
 80051e8:	e0c6      	b.n	8005378 <UART_SetConfig+0x348>
 80051ea:	2308      	movs	r3, #8
 80051ec:	77fb      	strb	r3, [r7, #31]
 80051ee:	e0c3      	b.n	8005378 <UART_SetConfig+0x348>
 80051f0:	2310      	movs	r3, #16
 80051f2:	77fb      	strb	r3, [r7, #31]
 80051f4:	e0c0      	b.n	8005378 <UART_SetConfig+0x348>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a44      	ldr	r2, [pc, #272]	@ (800530c <UART_SetConfig+0x2dc>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d125      	bne.n	800524c <UART_SetConfig+0x21c>
 8005200:	4b3e      	ldr	r3, [pc, #248]	@ (80052fc <UART_SetConfig+0x2cc>)
 8005202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005206:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800520a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800520e:	d017      	beq.n	8005240 <UART_SetConfig+0x210>
 8005210:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005214:	d817      	bhi.n	8005246 <UART_SetConfig+0x216>
 8005216:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800521a:	d00b      	beq.n	8005234 <UART_SetConfig+0x204>
 800521c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005220:	d811      	bhi.n	8005246 <UART_SetConfig+0x216>
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <UART_SetConfig+0x1fe>
 8005226:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800522a:	d006      	beq.n	800523a <UART_SetConfig+0x20a>
 800522c:	e00b      	b.n	8005246 <UART_SetConfig+0x216>
 800522e:	2300      	movs	r3, #0
 8005230:	77fb      	strb	r3, [r7, #31]
 8005232:	e0a1      	b.n	8005378 <UART_SetConfig+0x348>
 8005234:	2302      	movs	r3, #2
 8005236:	77fb      	strb	r3, [r7, #31]
 8005238:	e09e      	b.n	8005378 <UART_SetConfig+0x348>
 800523a:	2304      	movs	r3, #4
 800523c:	77fb      	strb	r3, [r7, #31]
 800523e:	e09b      	b.n	8005378 <UART_SetConfig+0x348>
 8005240:	2308      	movs	r3, #8
 8005242:	77fb      	strb	r3, [r7, #31]
 8005244:	e098      	b.n	8005378 <UART_SetConfig+0x348>
 8005246:	2310      	movs	r3, #16
 8005248:	77fb      	strb	r3, [r7, #31]
 800524a:	e095      	b.n	8005378 <UART_SetConfig+0x348>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a2f      	ldr	r2, [pc, #188]	@ (8005310 <UART_SetConfig+0x2e0>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d125      	bne.n	80052a2 <UART_SetConfig+0x272>
 8005256:	4b29      	ldr	r3, [pc, #164]	@ (80052fc <UART_SetConfig+0x2cc>)
 8005258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800525c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005260:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005264:	d017      	beq.n	8005296 <UART_SetConfig+0x266>
 8005266:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800526a:	d817      	bhi.n	800529c <UART_SetConfig+0x26c>
 800526c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005270:	d00b      	beq.n	800528a <UART_SetConfig+0x25a>
 8005272:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005276:	d811      	bhi.n	800529c <UART_SetConfig+0x26c>
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <UART_SetConfig+0x254>
 800527c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005280:	d006      	beq.n	8005290 <UART_SetConfig+0x260>
 8005282:	e00b      	b.n	800529c <UART_SetConfig+0x26c>
 8005284:	2301      	movs	r3, #1
 8005286:	77fb      	strb	r3, [r7, #31]
 8005288:	e076      	b.n	8005378 <UART_SetConfig+0x348>
 800528a:	2302      	movs	r3, #2
 800528c:	77fb      	strb	r3, [r7, #31]
 800528e:	e073      	b.n	8005378 <UART_SetConfig+0x348>
 8005290:	2304      	movs	r3, #4
 8005292:	77fb      	strb	r3, [r7, #31]
 8005294:	e070      	b.n	8005378 <UART_SetConfig+0x348>
 8005296:	2308      	movs	r3, #8
 8005298:	77fb      	strb	r3, [r7, #31]
 800529a:	e06d      	b.n	8005378 <UART_SetConfig+0x348>
 800529c:	2310      	movs	r3, #16
 800529e:	77fb      	strb	r3, [r7, #31]
 80052a0:	e06a      	b.n	8005378 <UART_SetConfig+0x348>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a1b      	ldr	r2, [pc, #108]	@ (8005314 <UART_SetConfig+0x2e4>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d138      	bne.n	800531e <UART_SetConfig+0x2ee>
 80052ac:	4b13      	ldr	r3, [pc, #76]	@ (80052fc <UART_SetConfig+0x2cc>)
 80052ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052b2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80052b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80052ba:	d017      	beq.n	80052ec <UART_SetConfig+0x2bc>
 80052bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80052c0:	d82a      	bhi.n	8005318 <UART_SetConfig+0x2e8>
 80052c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052c6:	d00b      	beq.n	80052e0 <UART_SetConfig+0x2b0>
 80052c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052cc:	d824      	bhi.n	8005318 <UART_SetConfig+0x2e8>
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <UART_SetConfig+0x2aa>
 80052d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052d6:	d006      	beq.n	80052e6 <UART_SetConfig+0x2b6>
 80052d8:	e01e      	b.n	8005318 <UART_SetConfig+0x2e8>
 80052da:	2300      	movs	r3, #0
 80052dc:	77fb      	strb	r3, [r7, #31]
 80052de:	e04b      	b.n	8005378 <UART_SetConfig+0x348>
 80052e0:	2302      	movs	r3, #2
 80052e2:	77fb      	strb	r3, [r7, #31]
 80052e4:	e048      	b.n	8005378 <UART_SetConfig+0x348>
 80052e6:	2304      	movs	r3, #4
 80052e8:	77fb      	strb	r3, [r7, #31]
 80052ea:	e045      	b.n	8005378 <UART_SetConfig+0x348>
 80052ec:	2308      	movs	r3, #8
 80052ee:	77fb      	strb	r3, [r7, #31]
 80052f0:	e042      	b.n	8005378 <UART_SetConfig+0x348>
 80052f2:	bf00      	nop
 80052f4:	efff69f3 	.word	0xefff69f3
 80052f8:	40011000 	.word	0x40011000
 80052fc:	40023800 	.word	0x40023800
 8005300:	40004400 	.word	0x40004400
 8005304:	40004800 	.word	0x40004800
 8005308:	40004c00 	.word	0x40004c00
 800530c:	40005000 	.word	0x40005000
 8005310:	40011400 	.word	0x40011400
 8005314:	40007800 	.word	0x40007800
 8005318:	2310      	movs	r3, #16
 800531a:	77fb      	strb	r3, [r7, #31]
 800531c:	e02c      	b.n	8005378 <UART_SetConfig+0x348>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a72      	ldr	r2, [pc, #456]	@ (80054ec <UART_SetConfig+0x4bc>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d125      	bne.n	8005374 <UART_SetConfig+0x344>
 8005328:	4b71      	ldr	r3, [pc, #452]	@ (80054f0 <UART_SetConfig+0x4c0>)
 800532a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800532e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005332:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005336:	d017      	beq.n	8005368 <UART_SetConfig+0x338>
 8005338:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800533c:	d817      	bhi.n	800536e <UART_SetConfig+0x33e>
 800533e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005342:	d00b      	beq.n	800535c <UART_SetConfig+0x32c>
 8005344:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005348:	d811      	bhi.n	800536e <UART_SetConfig+0x33e>
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <UART_SetConfig+0x326>
 800534e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005352:	d006      	beq.n	8005362 <UART_SetConfig+0x332>
 8005354:	e00b      	b.n	800536e <UART_SetConfig+0x33e>
 8005356:	2300      	movs	r3, #0
 8005358:	77fb      	strb	r3, [r7, #31]
 800535a:	e00d      	b.n	8005378 <UART_SetConfig+0x348>
 800535c:	2302      	movs	r3, #2
 800535e:	77fb      	strb	r3, [r7, #31]
 8005360:	e00a      	b.n	8005378 <UART_SetConfig+0x348>
 8005362:	2304      	movs	r3, #4
 8005364:	77fb      	strb	r3, [r7, #31]
 8005366:	e007      	b.n	8005378 <UART_SetConfig+0x348>
 8005368:	2308      	movs	r3, #8
 800536a:	77fb      	strb	r3, [r7, #31]
 800536c:	e004      	b.n	8005378 <UART_SetConfig+0x348>
 800536e:	2310      	movs	r3, #16
 8005370:	77fb      	strb	r3, [r7, #31]
 8005372:	e001      	b.n	8005378 <UART_SetConfig+0x348>
 8005374:	2310      	movs	r3, #16
 8005376:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005380:	d15b      	bne.n	800543a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005382:	7ffb      	ldrb	r3, [r7, #31]
 8005384:	2b08      	cmp	r3, #8
 8005386:	d828      	bhi.n	80053da <UART_SetConfig+0x3aa>
 8005388:	a201      	add	r2, pc, #4	@ (adr r2, 8005390 <UART_SetConfig+0x360>)
 800538a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538e:	bf00      	nop
 8005390:	080053b5 	.word	0x080053b5
 8005394:	080053bd 	.word	0x080053bd
 8005398:	080053c5 	.word	0x080053c5
 800539c:	080053db 	.word	0x080053db
 80053a0:	080053cb 	.word	0x080053cb
 80053a4:	080053db 	.word	0x080053db
 80053a8:	080053db 	.word	0x080053db
 80053ac:	080053db 	.word	0x080053db
 80053b0:	080053d3 	.word	0x080053d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053b4:	f7fe f97a 	bl	80036ac <HAL_RCC_GetPCLK1Freq>
 80053b8:	61b8      	str	r0, [r7, #24]
        break;
 80053ba:	e013      	b.n	80053e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053bc:	f7fe f98a 	bl	80036d4 <HAL_RCC_GetPCLK2Freq>
 80053c0:	61b8      	str	r0, [r7, #24]
        break;
 80053c2:	e00f      	b.n	80053e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053c4:	4b4b      	ldr	r3, [pc, #300]	@ (80054f4 <UART_SetConfig+0x4c4>)
 80053c6:	61bb      	str	r3, [r7, #24]
        break;
 80053c8:	e00c      	b.n	80053e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053ca:	f7fe f85d 	bl	8003488 <HAL_RCC_GetSysClockFreq>
 80053ce:	61b8      	str	r0, [r7, #24]
        break;
 80053d0:	e008      	b.n	80053e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053d6:	61bb      	str	r3, [r7, #24]
        break;
 80053d8:	e004      	b.n	80053e4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80053da:	2300      	movs	r3, #0
 80053dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	77bb      	strb	r3, [r7, #30]
        break;
 80053e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d074      	beq.n	80054d4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	005a      	lsls	r2, r3, #1
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	085b      	lsrs	r3, r3, #1
 80053f4:	441a      	add	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	2b0f      	cmp	r3, #15
 8005404:	d916      	bls.n	8005434 <UART_SetConfig+0x404>
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800540c:	d212      	bcs.n	8005434 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	b29b      	uxth	r3, r3
 8005412:	f023 030f 	bic.w	r3, r3, #15
 8005416:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	085b      	lsrs	r3, r3, #1
 800541c:	b29b      	uxth	r3, r3
 800541e:	f003 0307 	and.w	r3, r3, #7
 8005422:	b29a      	uxth	r2, r3
 8005424:	89fb      	ldrh	r3, [r7, #14]
 8005426:	4313      	orrs	r3, r2
 8005428:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	89fa      	ldrh	r2, [r7, #14]
 8005430:	60da      	str	r2, [r3, #12]
 8005432:	e04f      	b.n	80054d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	77bb      	strb	r3, [r7, #30]
 8005438:	e04c      	b.n	80054d4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800543a:	7ffb      	ldrb	r3, [r7, #31]
 800543c:	2b08      	cmp	r3, #8
 800543e:	d828      	bhi.n	8005492 <UART_SetConfig+0x462>
 8005440:	a201      	add	r2, pc, #4	@ (adr r2, 8005448 <UART_SetConfig+0x418>)
 8005442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005446:	bf00      	nop
 8005448:	0800546d 	.word	0x0800546d
 800544c:	08005475 	.word	0x08005475
 8005450:	0800547d 	.word	0x0800547d
 8005454:	08005493 	.word	0x08005493
 8005458:	08005483 	.word	0x08005483
 800545c:	08005493 	.word	0x08005493
 8005460:	08005493 	.word	0x08005493
 8005464:	08005493 	.word	0x08005493
 8005468:	0800548b 	.word	0x0800548b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800546c:	f7fe f91e 	bl	80036ac <HAL_RCC_GetPCLK1Freq>
 8005470:	61b8      	str	r0, [r7, #24]
        break;
 8005472:	e013      	b.n	800549c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005474:	f7fe f92e 	bl	80036d4 <HAL_RCC_GetPCLK2Freq>
 8005478:	61b8      	str	r0, [r7, #24]
        break;
 800547a:	e00f      	b.n	800549c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800547c:	4b1d      	ldr	r3, [pc, #116]	@ (80054f4 <UART_SetConfig+0x4c4>)
 800547e:	61bb      	str	r3, [r7, #24]
        break;
 8005480:	e00c      	b.n	800549c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005482:	f7fe f801 	bl	8003488 <HAL_RCC_GetSysClockFreq>
 8005486:	61b8      	str	r0, [r7, #24]
        break;
 8005488:	e008      	b.n	800549c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800548a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800548e:	61bb      	str	r3, [r7, #24]
        break;
 8005490:	e004      	b.n	800549c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005492:	2300      	movs	r3, #0
 8005494:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	77bb      	strb	r3, [r7, #30]
        break;
 800549a:	bf00      	nop
    }

    if (pclk != 0U)
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d018      	beq.n	80054d4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	085a      	lsrs	r2, r3, #1
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	441a      	add	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	2b0f      	cmp	r3, #15
 80054ba:	d909      	bls.n	80054d0 <UART_SetConfig+0x4a0>
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054c2:	d205      	bcs.n	80054d0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	60da      	str	r2, [r3, #12]
 80054ce:	e001      	b.n	80054d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80054e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3720      	adds	r7, #32
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	40007c00 	.word	0x40007c00
 80054f0:	40023800 	.word	0x40023800
 80054f4:	00f42400 	.word	0x00f42400

080054f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005504:	f003 0308 	and.w	r3, r3, #8
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00a      	beq.n	8005522 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00a      	beq.n	8005544 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005548:	f003 0302 	and.w	r3, r3, #2
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00a      	beq.n	8005566 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800556a:	f003 0304 	and.w	r3, r3, #4
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00a      	beq.n	8005588 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800558c:	f003 0310 	and.w	r3, r3, #16
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00a      	beq.n	80055aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ae:	f003 0320 	and.w	r3, r3, #32
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00a      	beq.n	80055cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d01a      	beq.n	800560e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055f6:	d10a      	bne.n	800560e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	430a      	orrs	r2, r1
 800560c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00a      	beq.n	8005630 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	430a      	orrs	r2, r1
 800562e:	605a      	str	r2, [r3, #4]
  }
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b098      	sub	sp, #96	@ 0x60
 8005640:	af02      	add	r7, sp, #8
 8005642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800564c:	f7fb ff3c 	bl	80014c8 <HAL_GetTick>
 8005650:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0308 	and.w	r3, r3, #8
 800565c:	2b08      	cmp	r3, #8
 800565e:	d12e      	bne.n	80056be <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005660:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005668:	2200      	movs	r2, #0
 800566a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f88c 	bl	800578c <UART_WaitOnFlagUntilTimeout>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d021      	beq.n	80056be <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005682:	e853 3f00 	ldrex	r3, [r3]
 8005686:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800568a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800568e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	461a      	mov	r2, r3
 8005696:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005698:	647b      	str	r3, [r7, #68]	@ 0x44
 800569a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800569e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056a0:	e841 2300 	strex	r3, r2, [r1]
 80056a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80056a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1e6      	bne.n	800567a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2220      	movs	r2, #32
 80056b0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e062      	b.n	8005784 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0304 	and.w	r3, r3, #4
 80056c8:	2b04      	cmp	r3, #4
 80056ca:	d149      	bne.n	8005760 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056d4:	2200      	movs	r2, #0
 80056d6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f856 	bl	800578c <UART_WaitOnFlagUntilTimeout>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d03c      	beq.n	8005760 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ee:	e853 3f00 	ldrex	r3, [r3]
 80056f2:	623b      	str	r3, [r7, #32]
   return(result);
 80056f4:	6a3b      	ldr	r3, [r7, #32]
 80056f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	461a      	mov	r2, r3
 8005702:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005704:	633b      	str	r3, [r7, #48]	@ 0x30
 8005706:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005708:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800570a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800570c:	e841 2300 	strex	r3, r2, [r1]
 8005710:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1e6      	bne.n	80056e6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	3308      	adds	r3, #8
 800571e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	e853 3f00 	ldrex	r3, [r3]
 8005726:	60fb      	str	r3, [r7, #12]
   return(result);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f023 0301 	bic.w	r3, r3, #1
 800572e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	3308      	adds	r3, #8
 8005736:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005738:	61fa      	str	r2, [r7, #28]
 800573a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573c:	69b9      	ldr	r1, [r7, #24]
 800573e:	69fa      	ldr	r2, [r7, #28]
 8005740:	e841 2300 	strex	r3, r2, [r1]
 8005744:	617b      	str	r3, [r7, #20]
   return(result);
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1e5      	bne.n	8005718 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2220      	movs	r2, #32
 8005750:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e011      	b.n	8005784 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2220      	movs	r2, #32
 8005764:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2220      	movs	r2, #32
 800576a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3758      	adds	r7, #88	@ 0x58
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	603b      	str	r3, [r7, #0]
 8005798:	4613      	mov	r3, r2
 800579a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800579c:	e04f      	b.n	800583e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a4:	d04b      	beq.n	800583e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057a6:	f7fb fe8f 	bl	80014c8 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	69ba      	ldr	r2, [r7, #24]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d302      	bcc.n	80057bc <UART_WaitOnFlagUntilTimeout+0x30>
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e04e      	b.n	800585e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0304 	and.w	r3, r3, #4
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d037      	beq.n	800583e <UART_WaitOnFlagUntilTimeout+0xb2>
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	2b80      	cmp	r3, #128	@ 0x80
 80057d2:	d034      	beq.n	800583e <UART_WaitOnFlagUntilTimeout+0xb2>
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2b40      	cmp	r3, #64	@ 0x40
 80057d8:	d031      	beq.n	800583e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	69db      	ldr	r3, [r3, #28]
 80057e0:	f003 0308 	and.w	r3, r3, #8
 80057e4:	2b08      	cmp	r3, #8
 80057e6:	d110      	bne.n	800580a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2208      	movs	r2, #8
 80057ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f000 f838 	bl	8005866 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2208      	movs	r2, #8
 80057fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e029      	b.n	800585e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	69db      	ldr	r3, [r3, #28]
 8005810:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005814:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005818:	d111      	bne.n	800583e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005822:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f000 f81e 	bl	8005866 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2220      	movs	r2, #32
 800582e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e00f      	b.n	800585e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	69da      	ldr	r2, [r3, #28]
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	4013      	ands	r3, r2
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	429a      	cmp	r2, r3
 800584c:	bf0c      	ite	eq
 800584e:	2301      	moveq	r3, #1
 8005850:	2300      	movne	r3, #0
 8005852:	b2db      	uxtb	r3, r3
 8005854:	461a      	mov	r2, r3
 8005856:	79fb      	ldrb	r3, [r7, #7]
 8005858:	429a      	cmp	r2, r3
 800585a:	d0a0      	beq.n	800579e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005866:	b480      	push	{r7}
 8005868:	b095      	sub	sp, #84	@ 0x54
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005876:	e853 3f00 	ldrex	r3, [r3]
 800587a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800587c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800587e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005882:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	461a      	mov	r2, r3
 800588a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800588c:	643b      	str	r3, [r7, #64]	@ 0x40
 800588e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005890:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005892:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005894:	e841 2300 	strex	r3, r2, [r1]
 8005898:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800589a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1e6      	bne.n	800586e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	3308      	adds	r3, #8
 80058a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a8:	6a3b      	ldr	r3, [r7, #32]
 80058aa:	e853 3f00 	ldrex	r3, [r3]
 80058ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	f023 0301 	bic.w	r3, r3, #1
 80058b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	3308      	adds	r3, #8
 80058be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058c8:	e841 2300 	strex	r3, r2, [r1]
 80058cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1e5      	bne.n	80058a0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d118      	bne.n	800590e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	e853 3f00 	ldrex	r3, [r3]
 80058e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	f023 0310 	bic.w	r3, r3, #16
 80058f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058fa:	61bb      	str	r3, [r7, #24]
 80058fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fe:	6979      	ldr	r1, [r7, #20]
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	e841 2300 	strex	r3, r2, [r1]
 8005906:	613b      	str	r3, [r7, #16]
   return(result);
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1e6      	bne.n	80058dc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2220      	movs	r2, #32
 8005912:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005922:	bf00      	nop
 8005924:	3754      	adds	r7, #84	@ 0x54
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
	...

08005930 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005930:	b084      	sub	sp, #16
 8005932:	b580      	push	{r7, lr}
 8005934:	b084      	sub	sp, #16
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
 800593a:	f107 001c 	add.w	r0, r7, #28
 800593e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005942:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005946:	2b01      	cmp	r3, #1
 8005948:	d121      	bne.n	800598e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800594e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	68da      	ldr	r2, [r3, #12]
 800595a:	4b21      	ldr	r3, [pc, #132]	@ (80059e0 <USB_CoreInit+0xb0>)
 800595c:	4013      	ands	r3, r2
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800596e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005972:	2b01      	cmp	r3, #1
 8005974:	d105      	bne.n	8005982 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 fa92 	bl	8005eac <USB_CoreReset>
 8005988:	4603      	mov	r3, r0
 800598a:	73fb      	strb	r3, [r7, #15]
 800598c:	e010      	b.n	80059b0 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 fa86 	bl	8005eac <USB_CoreReset>
 80059a0:	4603      	mov	r3, r0
 80059a2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80059b0:	7fbb      	ldrb	r3, [r7, #30]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d10b      	bne.n	80059ce <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f043 0206 	orr.w	r2, r3, #6
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f043 0220 	orr.w	r2, r3, #32
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80059ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059da:	b004      	add	sp, #16
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	ffbdffbf 	.word	0xffbdffbf

080059e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f023 0201 	bic.w	r2, r3, #1
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b084      	sub	sp, #16
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
 8005a0e:	460b      	mov	r3, r1
 8005a10:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a12:	2300      	movs	r3, #0
 8005a14:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a22:	78fb      	ldrb	r3, [r7, #3]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d115      	bne.n	8005a54 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a34:	200a      	movs	r0, #10
 8005a36:	f7fb fd53 	bl	80014e0 <HAL_Delay>
      ms += 10U;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	330a      	adds	r3, #10
 8005a3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 fa25 	bl	8005e90 <USB_GetMode>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d01e      	beq.n	8005a8a <USB_SetCurrentMode+0x84>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a50:	d9f0      	bls.n	8005a34 <USB_SetCurrentMode+0x2e>
 8005a52:	e01a      	b.n	8005a8a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a54:	78fb      	ldrb	r3, [r7, #3]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d115      	bne.n	8005a86 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a66:	200a      	movs	r0, #10
 8005a68:	f7fb fd3a 	bl	80014e0 <HAL_Delay>
      ms += 10U;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	330a      	adds	r3, #10
 8005a70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 fa0c 	bl	8005e90 <USB_GetMode>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d005      	beq.n	8005a8a <USB_SetCurrentMode+0x84>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a82:	d9f0      	bls.n	8005a66 <USB_SetCurrentMode+0x60>
 8005a84:	e001      	b.n	8005a8a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e005      	b.n	8005a96 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2bc8      	cmp	r3, #200	@ 0xc8
 8005a8e:	d101      	bne.n	8005a94 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e000      	b.n	8005a96 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
	...

08005aa0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005aa0:	b084      	sub	sp, #16
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b086      	sub	sp, #24
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005aae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005aba:	2300      	movs	r3, #0
 8005abc:	613b      	str	r3, [r7, #16]
 8005abe:	e009      	b.n	8005ad4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	3340      	adds	r3, #64	@ 0x40
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4413      	add	r3, r2
 8005aca:	2200      	movs	r2, #0
 8005acc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	613b      	str	r3, [r7, #16]
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	2b0e      	cmp	r3, #14
 8005ad8:	d9f2      	bls.n	8005ac0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005ada:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d11c      	bne.n	8005b1c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005af0:	f043 0302 	orr.w	r3, r3, #2
 8005af4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005afa:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	601a      	str	r2, [r3, #0]
 8005b1a:	e005      	b.n	8005b28 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b20:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b2e:	461a      	mov	r2, r3
 8005b30:	2300      	movs	r3, #0
 8005b32:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b34:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d10d      	bne.n	8005b58 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d104      	bne.n	8005b4e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005b44:	2100      	movs	r1, #0
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f968 	bl	8005e1c <USB_SetDevSpeed>
 8005b4c:	e008      	b.n	8005b60 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005b4e:	2101      	movs	r1, #1
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f963 	bl	8005e1c <USB_SetDevSpeed>
 8005b56:	e003      	b.n	8005b60 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005b58:	2103      	movs	r1, #3
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f95e 	bl	8005e1c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b60:	2110      	movs	r1, #16
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f8fa 	bl	8005d5c <USB_FlushTxFifo>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d001      	beq.n	8005b72 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f924 	bl	8005dc0 <USB_FlushRxFifo>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d001      	beq.n	8005b82 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b88:	461a      	mov	r2, r3
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b94:	461a      	mov	r2, r3
 8005b96:	2300      	movs	r3, #0
 8005b98:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	613b      	str	r3, [r7, #16]
 8005baa:	e043      	b.n	8005c34 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	015a      	lsls	r2, r3, #5
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005bbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005bc2:	d118      	bne.n	8005bf6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10a      	bne.n	8005be0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	015a      	lsls	r2, r3, #5
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005bdc:	6013      	str	r3, [r2, #0]
 8005bde:	e013      	b.n	8005c08 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	015a      	lsls	r2, r3, #5
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bec:	461a      	mov	r2, r3
 8005bee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005bf2:	6013      	str	r3, [r2, #0]
 8005bf4:	e008      	b.n	8005c08 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	015a      	lsls	r2, r3, #5
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c02:	461a      	mov	r2, r3
 8005c04:	2300      	movs	r3, #0
 8005c06:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c14:	461a      	mov	r2, r3
 8005c16:	2300      	movs	r3, #0
 8005c18:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	015a      	lsls	r2, r3, #5
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c26:	461a      	mov	r2, r3
 8005c28:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005c2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	3301      	adds	r3, #1
 8005c32:	613b      	str	r3, [r7, #16]
 8005c34:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005c38:	461a      	mov	r2, r3
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d3b5      	bcc.n	8005bac <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c40:	2300      	movs	r3, #0
 8005c42:	613b      	str	r3, [r7, #16]
 8005c44:	e043      	b.n	8005cce <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	015a      	lsls	r2, r3, #5
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c5c:	d118      	bne.n	8005c90 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10a      	bne.n	8005c7a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c70:	461a      	mov	r2, r3
 8005c72:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005c76:	6013      	str	r3, [r2, #0]
 8005c78:	e013      	b.n	8005ca2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c86:	461a      	mov	r2, r3
 8005c88:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005c8c:	6013      	str	r3, [r2, #0]
 8005c8e:	e008      	b.n	8005ca2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cae:	461a      	mov	r2, r3
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005cc6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	613b      	str	r3, [r7, #16]
 8005cce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d3b5      	bcc.n	8005c46 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ce8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cec:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005cfa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005cfc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d105      	bne.n	8005d10 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	699b      	ldr	r3, [r3, #24]
 8005d08:	f043 0210 	orr.w	r2, r3, #16
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	699a      	ldr	r2, [r3, #24]
 8005d14:	4b0f      	ldr	r3, [pc, #60]	@ (8005d54 <USB_DevInit+0x2b4>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d1c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d005      	beq.n	8005d30 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	f043 0208 	orr.w	r2, r3, #8
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d30:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d105      	bne.n	8005d44 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	699a      	ldr	r2, [r3, #24]
 8005d3c:	4b06      	ldr	r3, [pc, #24]	@ (8005d58 <USB_DevInit+0x2b8>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005d44:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3718      	adds	r7, #24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d50:	b004      	add	sp, #16
 8005d52:	4770      	bx	lr
 8005d54:	803c3800 	.word	0x803c3800
 8005d58:	40000004 	.word	0x40000004

08005d5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d66:	2300      	movs	r3, #0
 8005d68:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d76:	d901      	bls.n	8005d7c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e01b      	b.n	8005db4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	daf2      	bge.n	8005d6a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d84:	2300      	movs	r3, #0
 8005d86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	019b      	lsls	r3, r3, #6
 8005d8c:	f043 0220 	orr.w	r2, r3, #32
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	3301      	adds	r3, #1
 8005d98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005da0:	d901      	bls.n	8005da6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e006      	b.n	8005db4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	f003 0320 	and.w	r3, r3, #32
 8005dae:	2b20      	cmp	r3, #32
 8005db0:	d0f0      	beq.n	8005d94 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3714      	adds	r7, #20
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005dd8:	d901      	bls.n	8005dde <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e018      	b.n	8005e10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	daf2      	bge.n	8005dcc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005de6:	2300      	movs	r3, #0
 8005de8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2210      	movs	r2, #16
 8005dee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	3301      	adds	r3, #1
 8005df4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005dfc:	d901      	bls.n	8005e02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e006      	b.n	8005e10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	f003 0310 	and.w	r3, r3, #16
 8005e0a:	2b10      	cmp	r3, #16
 8005e0c:	d0f0      	beq.n	8005df0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3714      	adds	r7, #20
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	460b      	mov	r3, r1
 8005e26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	78fb      	ldrb	r3, [r7, #3]
 8005e36:	68f9      	ldr	r1, [r7, #12]
 8005e38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3714      	adds	r7, #20
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b085      	sub	sp, #20
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005e68:	f023 0303 	bic.w	r3, r3, #3
 8005e6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e7c:	f043 0302 	orr.w	r3, r3, #2
 8005e80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	695b      	ldr	r3, [r3, #20]
 8005e9c:	f003 0301 	and.w	r3, r3, #1
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ec4:	d901      	bls.n	8005eca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e01b      	b.n	8005f02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	daf2      	bge.n	8005eb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	f043 0201 	orr.w	r2, r3, #1
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005eee:	d901      	bls.n	8005ef4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e006      	b.n	8005f02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	f003 0301 	and.w	r3, r3, #1
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d0f0      	beq.n	8005ee2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3714      	adds	r7, #20
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr

08005f0e <memset>:
 8005f0e:	4402      	add	r2, r0
 8005f10:	4603      	mov	r3, r0
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d100      	bne.n	8005f18 <memset+0xa>
 8005f16:	4770      	bx	lr
 8005f18:	f803 1b01 	strb.w	r1, [r3], #1
 8005f1c:	e7f9      	b.n	8005f12 <memset+0x4>
	...

08005f20 <__libc_init_array>:
 8005f20:	b570      	push	{r4, r5, r6, lr}
 8005f22:	4d0d      	ldr	r5, [pc, #52]	@ (8005f58 <__libc_init_array+0x38>)
 8005f24:	4c0d      	ldr	r4, [pc, #52]	@ (8005f5c <__libc_init_array+0x3c>)
 8005f26:	1b64      	subs	r4, r4, r5
 8005f28:	10a4      	asrs	r4, r4, #2
 8005f2a:	2600      	movs	r6, #0
 8005f2c:	42a6      	cmp	r6, r4
 8005f2e:	d109      	bne.n	8005f44 <__libc_init_array+0x24>
 8005f30:	4d0b      	ldr	r5, [pc, #44]	@ (8005f60 <__libc_init_array+0x40>)
 8005f32:	4c0c      	ldr	r4, [pc, #48]	@ (8005f64 <__libc_init_array+0x44>)
 8005f34:	f000 f818 	bl	8005f68 <_init>
 8005f38:	1b64      	subs	r4, r4, r5
 8005f3a:	10a4      	asrs	r4, r4, #2
 8005f3c:	2600      	movs	r6, #0
 8005f3e:	42a6      	cmp	r6, r4
 8005f40:	d105      	bne.n	8005f4e <__libc_init_array+0x2e>
 8005f42:	bd70      	pop	{r4, r5, r6, pc}
 8005f44:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f48:	4798      	blx	r3
 8005f4a:	3601      	adds	r6, #1
 8005f4c:	e7ee      	b.n	8005f2c <__libc_init_array+0xc>
 8005f4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f52:	4798      	blx	r3
 8005f54:	3601      	adds	r6, #1
 8005f56:	e7f2      	b.n	8005f3e <__libc_init_array+0x1e>
 8005f58:	08005fac 	.word	0x08005fac
 8005f5c:	08005fac 	.word	0x08005fac
 8005f60:	08005fac 	.word	0x08005fac
 8005f64:	08005fb0 	.word	0x08005fb0

08005f68 <_init>:
 8005f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f6a:	bf00      	nop
 8005f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f6e:	bc08      	pop	{r3}
 8005f70:	469e      	mov	lr, r3
 8005f72:	4770      	bx	lr

08005f74 <_fini>:
 8005f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f76:	bf00      	nop
 8005f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f7a:	bc08      	pop	{r3}
 8005f7c:	469e      	mov	lr, r3
 8005f7e:	4770      	bx	lr
