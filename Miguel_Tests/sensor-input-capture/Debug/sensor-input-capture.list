
sensor-input-capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f40  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08004138  08004138  00005138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004154  08004154  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004154  08004154  00005154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800415c  0800415c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800415c  0800415c  0000515c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004160  08004160  00005160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004164  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000000c  08004170  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08004170  000060dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e2e4  00000000  00000000  0000603a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002041  00000000  00000000  0001431e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  00016360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ab4  00000000  00000000  00017120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026bdc  00000000  00000000  00017bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010dcf  00000000  00000000  0003e7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f36db  00000000  00000000  0004f57f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00142c5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039b8  00000000  00000000  00142ca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  00146658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08004120 	.word	0x08004120

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08004120 	.word	0x08004120

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b988 	b.w	8000560 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	468e      	mov	lr, r1
 8000270:	4604      	mov	r4, r0
 8000272:	4688      	mov	r8, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d962      	bls.n	8000344 <__udivmoddi4+0xdc>
 800027e:	fab2 f682 	clz	r6, r2
 8000282:	b14e      	cbz	r6, 8000298 <__udivmoddi4+0x30>
 8000284:	f1c6 0320 	rsb	r3, r6, #32
 8000288:	fa01 f806 	lsl.w	r8, r1, r6
 800028c:	fa20 f303 	lsr.w	r3, r0, r3
 8000290:	40b7      	lsls	r7, r6
 8000292:	ea43 0808 	orr.w	r8, r3, r8
 8000296:	40b4      	lsls	r4, r6
 8000298:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800029c:	fa1f fc87 	uxth.w	ip, r7
 80002a0:	fbb8 f1fe 	udiv	r1, r8, lr
 80002a4:	0c23      	lsrs	r3, r4, #16
 80002a6:	fb0e 8811 	mls	r8, lr, r1, r8
 80002aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ae:	fb01 f20c 	mul.w	r2, r1, ip
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002bc:	f080 80ea 	bcs.w	8000494 <__udivmoddi4+0x22c>
 80002c0:	429a      	cmp	r2, r3
 80002c2:	f240 80e7 	bls.w	8000494 <__udivmoddi4+0x22c>
 80002c6:	3902      	subs	r1, #2
 80002c8:	443b      	add	r3, r7
 80002ca:	1a9a      	subs	r2, r3, r2
 80002cc:	b2a3      	uxth	r3, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002da:	fb00 fc0c 	mul.w	ip, r0, ip
 80002de:	459c      	cmp	ip, r3
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0x8e>
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e8:	f080 80d6 	bcs.w	8000498 <__udivmoddi4+0x230>
 80002ec:	459c      	cmp	ip, r3
 80002ee:	f240 80d3 	bls.w	8000498 <__udivmoddi4+0x230>
 80002f2:	443b      	add	r3, r7
 80002f4:	3802      	subs	r0, #2
 80002f6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fa:	eba3 030c 	sub.w	r3, r3, ip
 80002fe:	2100      	movs	r1, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0xa2>
 8000302:	40f3      	lsrs	r3, r6
 8000304:	2200      	movs	r2, #0
 8000306:	e9c5 3200 	strd	r3, r2, [r5]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d905      	bls.n	800031e <__udivmoddi4+0xb6>
 8000312:	b10d      	cbz	r5, 8000318 <__udivmoddi4+0xb0>
 8000314:	e9c5 0100 	strd	r0, r1, [r5]
 8000318:	2100      	movs	r1, #0
 800031a:	4608      	mov	r0, r1
 800031c:	e7f5      	b.n	800030a <__udivmoddi4+0xa2>
 800031e:	fab3 f183 	clz	r1, r3
 8000322:	2900      	cmp	r1, #0
 8000324:	d146      	bne.n	80003b4 <__udivmoddi4+0x14c>
 8000326:	4573      	cmp	r3, lr
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xc8>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 8105 	bhi.w	800053a <__udivmoddi4+0x2d2>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb6e 0203 	sbc.w	r2, lr, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4690      	mov	r8, r2
 800033a:	2d00      	cmp	r5, #0
 800033c:	d0e5      	beq.n	800030a <__udivmoddi4+0xa2>
 800033e:	e9c5 4800 	strd	r4, r8, [r5]
 8000342:	e7e2      	b.n	800030a <__udivmoddi4+0xa2>
 8000344:	2a00      	cmp	r2, #0
 8000346:	f000 8090 	beq.w	800046a <__udivmoddi4+0x202>
 800034a:	fab2 f682 	clz	r6, r2
 800034e:	2e00      	cmp	r6, #0
 8000350:	f040 80a4 	bne.w	800049c <__udivmoddi4+0x234>
 8000354:	1a8a      	subs	r2, r1, r2
 8000356:	0c03      	lsrs	r3, r0, #16
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	b280      	uxth	r0, r0
 800035e:	b2bc      	uxth	r4, r7
 8000360:	2101      	movs	r1, #1
 8000362:	fbb2 fcfe 	udiv	ip, r2, lr
 8000366:	fb0e 221c 	mls	r2, lr, ip, r2
 800036a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800036e:	fb04 f20c 	mul.w	r2, r4, ip
 8000372:	429a      	cmp	r2, r3
 8000374:	d907      	bls.n	8000386 <__udivmoddi4+0x11e>
 8000376:	18fb      	adds	r3, r7, r3
 8000378:	f10c 38ff 	add.w	r8, ip, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x11c>
 800037e:	429a      	cmp	r2, r3
 8000380:	f200 80e0 	bhi.w	8000544 <__udivmoddi4+0x2dc>
 8000384:	46c4      	mov	ip, r8
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	fbb3 f2fe 	udiv	r2, r3, lr
 800038c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000390:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000394:	fb02 f404 	mul.w	r4, r2, r4
 8000398:	429c      	cmp	r4, r3
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x144>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f102 30ff 	add.w	r0, r2, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x142>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f200 80ca 	bhi.w	800053e <__udivmoddi4+0x2d6>
 80003aa:	4602      	mov	r2, r0
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0x98>
 80003b4:	f1c1 0620 	rsb	r6, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 f706 	lsr.w	r7, r2, r6
 80003be:	431f      	orrs	r7, r3
 80003c0:	fa0e f401 	lsl.w	r4, lr, r1
 80003c4:	fa20 f306 	lsr.w	r3, r0, r6
 80003c8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003cc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d0:	4323      	orrs	r3, r4
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	fa1f fc87 	uxth.w	ip, r7
 80003da:	fbbe f0f9 	udiv	r0, lr, r9
 80003de:	0c1c      	lsrs	r4, r3, #16
 80003e0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003e4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003ec:	45a6      	cmp	lr, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d909      	bls.n	8000408 <__udivmoddi4+0x1a0>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003fa:	f080 809c 	bcs.w	8000536 <__udivmoddi4+0x2ce>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f240 8099 	bls.w	8000536 <__udivmoddi4+0x2ce>
 8000404:	3802      	subs	r0, #2
 8000406:	443c      	add	r4, r7
 8000408:	eba4 040e 	sub.w	r4, r4, lr
 800040c:	fa1f fe83 	uxth.w	lr, r3
 8000410:	fbb4 f3f9 	udiv	r3, r4, r9
 8000414:	fb09 4413 	mls	r4, r9, r3, r4
 8000418:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800041c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000420:	45a4      	cmp	ip, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1ce>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f103 3eff 	add.w	lr, r3, #4294967295
 800042a:	f080 8082 	bcs.w	8000532 <__udivmoddi4+0x2ca>
 800042e:	45a4      	cmp	ip, r4
 8000430:	d97f      	bls.n	8000532 <__udivmoddi4+0x2ca>
 8000432:	3b02      	subs	r3, #2
 8000434:	443c      	add	r4, r7
 8000436:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000442:	4564      	cmp	r4, ip
 8000444:	4673      	mov	r3, lr
 8000446:	46e1      	mov	r9, ip
 8000448:	d362      	bcc.n	8000510 <__udivmoddi4+0x2a8>
 800044a:	d05f      	beq.n	800050c <__udivmoddi4+0x2a4>
 800044c:	b15d      	cbz	r5, 8000466 <__udivmoddi4+0x1fe>
 800044e:	ebb8 0203 	subs.w	r2, r8, r3
 8000452:	eb64 0409 	sbc.w	r4, r4, r9
 8000456:	fa04 f606 	lsl.w	r6, r4, r6
 800045a:	fa22 f301 	lsr.w	r3, r2, r1
 800045e:	431e      	orrs	r6, r3
 8000460:	40cc      	lsrs	r4, r1
 8000462:	e9c5 6400 	strd	r6, r4, [r5]
 8000466:	2100      	movs	r1, #0
 8000468:	e74f      	b.n	800030a <__udivmoddi4+0xa2>
 800046a:	fbb1 fcf2 	udiv	ip, r1, r2
 800046e:	0c01      	lsrs	r1, r0, #16
 8000470:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000474:	b280      	uxth	r0, r0
 8000476:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800047a:	463b      	mov	r3, r7
 800047c:	4638      	mov	r0, r7
 800047e:	463c      	mov	r4, r7
 8000480:	46b8      	mov	r8, r7
 8000482:	46be      	mov	lr, r7
 8000484:	2620      	movs	r6, #32
 8000486:	fbb1 f1f7 	udiv	r1, r1, r7
 800048a:	eba2 0208 	sub.w	r2, r2, r8
 800048e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000492:	e766      	b.n	8000362 <__udivmoddi4+0xfa>
 8000494:	4601      	mov	r1, r0
 8000496:	e718      	b.n	80002ca <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e72c      	b.n	80002f6 <__udivmoddi4+0x8e>
 800049c:	f1c6 0220 	rsb	r2, r6, #32
 80004a0:	fa2e f302 	lsr.w	r3, lr, r2
 80004a4:	40b7      	lsls	r7, r6
 80004a6:	40b1      	lsls	r1, r6
 80004a8:	fa20 f202 	lsr.w	r2, r0, r2
 80004ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b0:	430a      	orrs	r2, r1
 80004b2:	fbb3 f8fe 	udiv	r8, r3, lr
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	fb0e 3318 	mls	r3, lr, r8, r3
 80004bc:	0c11      	lsrs	r1, r2, #16
 80004be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c2:	fb08 f904 	mul.w	r9, r8, r4
 80004c6:	40b0      	lsls	r0, r6
 80004c8:	4589      	cmp	r9, r1
 80004ca:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ce:	b280      	uxth	r0, r0
 80004d0:	d93e      	bls.n	8000550 <__udivmoddi4+0x2e8>
 80004d2:	1879      	adds	r1, r7, r1
 80004d4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d8:	d201      	bcs.n	80004de <__udivmoddi4+0x276>
 80004da:	4589      	cmp	r9, r1
 80004dc:	d81f      	bhi.n	800051e <__udivmoddi4+0x2b6>
 80004de:	eba1 0109 	sub.w	r1, r1, r9
 80004e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e6:	fb09 f804 	mul.w	r8, r9, r4
 80004ea:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ee:	b292      	uxth	r2, r2
 80004f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f4:	4542      	cmp	r2, r8
 80004f6:	d229      	bcs.n	800054c <__udivmoddi4+0x2e4>
 80004f8:	18ba      	adds	r2, r7, r2
 80004fa:	f109 31ff 	add.w	r1, r9, #4294967295
 80004fe:	d2c4      	bcs.n	800048a <__udivmoddi4+0x222>
 8000500:	4542      	cmp	r2, r8
 8000502:	d2c2      	bcs.n	800048a <__udivmoddi4+0x222>
 8000504:	f1a9 0102 	sub.w	r1, r9, #2
 8000508:	443a      	add	r2, r7
 800050a:	e7be      	b.n	800048a <__udivmoddi4+0x222>
 800050c:	45f0      	cmp	r8, lr
 800050e:	d29d      	bcs.n	800044c <__udivmoddi4+0x1e4>
 8000510:	ebbe 0302 	subs.w	r3, lr, r2
 8000514:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000518:	3801      	subs	r0, #1
 800051a:	46e1      	mov	r9, ip
 800051c:	e796      	b.n	800044c <__udivmoddi4+0x1e4>
 800051e:	eba7 0909 	sub.w	r9, r7, r9
 8000522:	4449      	add	r1, r9
 8000524:	f1a8 0c02 	sub.w	ip, r8, #2
 8000528:	fbb1 f9fe 	udiv	r9, r1, lr
 800052c:	fb09 f804 	mul.w	r8, r9, r4
 8000530:	e7db      	b.n	80004ea <__udivmoddi4+0x282>
 8000532:	4673      	mov	r3, lr
 8000534:	e77f      	b.n	8000436 <__udivmoddi4+0x1ce>
 8000536:	4650      	mov	r0, sl
 8000538:	e766      	b.n	8000408 <__udivmoddi4+0x1a0>
 800053a:	4608      	mov	r0, r1
 800053c:	e6fd      	b.n	800033a <__udivmoddi4+0xd2>
 800053e:	443b      	add	r3, r7
 8000540:	3a02      	subs	r2, #2
 8000542:	e733      	b.n	80003ac <__udivmoddi4+0x144>
 8000544:	f1ac 0c02 	sub.w	ip, ip, #2
 8000548:	443b      	add	r3, r7
 800054a:	e71c      	b.n	8000386 <__udivmoddi4+0x11e>
 800054c:	4649      	mov	r1, r9
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x222>
 8000550:	eba1 0109 	sub.w	r1, r1, r9
 8000554:	46c4      	mov	ip, r8
 8000556:	fbb1 f9fe 	udiv	r9, r1, lr
 800055a:	fb09 f804 	mul.w	r8, r9, r4
 800055e:	e7c4      	b.n	80004ea <__udivmoddi4+0x282>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af02      	add	r7, sp, #8
 800056a:	4603      	mov	r3, r0
 800056c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	f023 030f 	bic.w	r3, r3, #15
 8000574:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	011b      	lsls	r3, r3, #4
 800057a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	f043 030c 	orr.w	r3, r3, #12
 8000582:	b2db      	uxtb	r3, r3
 8000584:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000586:	7bfb      	ldrb	r3, [r7, #15]
 8000588:	f043 0308 	orr.w	r3, r3, #8
 800058c:	b2db      	uxtb	r3, r3
 800058e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000590:	7bbb      	ldrb	r3, [r7, #14]
 8000592:	f043 030c 	orr.w	r3, r3, #12
 8000596:	b2db      	uxtb	r3, r3
 8000598:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800059a:	7bbb      	ldrb	r3, [r7, #14]
 800059c:	f043 0308 	orr.w	r3, r3, #8
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005a4:	f107 0208 	add.w	r2, r7, #8
 80005a8:	2364      	movs	r3, #100	@ 0x64
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	2304      	movs	r3, #4
 80005ae:	214e      	movs	r1, #78	@ 0x4e
 80005b0:	4803      	ldr	r0, [pc, #12]	@ (80005c0 <lcd_send_cmd+0x5c>)
 80005b2:	f001 f883 	bl	80016bc <HAL_I2C_Master_Transmit>
}
 80005b6:	bf00      	nop
 80005b8:	3710      	adds	r7, #16
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000028 	.word	0x20000028

080005c4 <lcd_send_data>:

void lcd_send_data (char data)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af02      	add	r7, sp, #8
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	f023 030f 	bic.w	r3, r3, #15
 80005d4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	011b      	lsls	r3, r3, #4
 80005da:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	f043 030d 	orr.w	r3, r3, #13
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	f043 0309 	orr.w	r3, r3, #9
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80005f0:	7bbb      	ldrb	r3, [r7, #14]
 80005f2:	f043 030d 	orr.w	r3, r3, #13
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80005fa:	7bbb      	ldrb	r3, [r7, #14]
 80005fc:	f043 0309 	orr.w	r3, r3, #9
 8000600:	b2db      	uxtb	r3, r3
 8000602:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000604:	f107 0208 	add.w	r2, r7, #8
 8000608:	2364      	movs	r3, #100	@ 0x64
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	2304      	movs	r3, #4
 800060e:	214e      	movs	r1, #78	@ 0x4e
 8000610:	4803      	ldr	r0, [pc, #12]	@ (8000620 <lcd_send_data+0x5c>)
 8000612:	f001 f853 	bl	80016bc <HAL_I2C_Master_Transmit>
}
 8000616:	bf00      	nop
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000028 	.word	0x20000028

08000624 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
    switch (row)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d003      	beq.n	800063c <lcd_put_cur+0x18>
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b01      	cmp	r3, #1
 8000638:	d005      	beq.n	8000646 <lcd_put_cur+0x22>
 800063a:	e009      	b.n	8000650 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000642:	603b      	str	r3, [r7, #0]
            break;
 8000644:	e004      	b.n	8000650 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800064c:	603b      	str	r3, [r7, #0]
            break;
 800064e:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	b2db      	uxtb	r3, r3
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff ff85 	bl	8000564 <lcd_send_cmd>
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <lcd_init>:


void lcd_init (void)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000666:	2032      	movs	r0, #50	@ 0x32
 8000668:	f000 fc90 	bl	8000f8c <HAL_Delay>
	lcd_send_cmd (0x30);
 800066c:	2030      	movs	r0, #48	@ 0x30
 800066e:	f7ff ff79 	bl	8000564 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000672:	2005      	movs	r0, #5
 8000674:	f000 fc8a 	bl	8000f8c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000678:	2030      	movs	r0, #48	@ 0x30
 800067a:	f7ff ff73 	bl	8000564 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800067e:	2001      	movs	r0, #1
 8000680:	f000 fc84 	bl	8000f8c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000684:	2030      	movs	r0, #48	@ 0x30
 8000686:	f7ff ff6d 	bl	8000564 <lcd_send_cmd>
	HAL_Delay(10);
 800068a:	200a      	movs	r0, #10
 800068c:	f000 fc7e 	bl	8000f8c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000690:	2020      	movs	r0, #32
 8000692:	f7ff ff67 	bl	8000564 <lcd_send_cmd>
	HAL_Delay(10);
 8000696:	200a      	movs	r0, #10
 8000698:	f000 fc78 	bl	8000f8c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800069c:	2028      	movs	r0, #40	@ 0x28
 800069e:	f7ff ff61 	bl	8000564 <lcd_send_cmd>
	HAL_Delay(1);
 80006a2:	2001      	movs	r0, #1
 80006a4:	f000 fc72 	bl	8000f8c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80006a8:	2008      	movs	r0, #8
 80006aa:	f7ff ff5b 	bl	8000564 <lcd_send_cmd>
	HAL_Delay(1);
 80006ae:	2001      	movs	r0, #1
 80006b0:	f000 fc6c 	bl	8000f8c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80006b4:	2001      	movs	r0, #1
 80006b6:	f7ff ff55 	bl	8000564 <lcd_send_cmd>
	HAL_Delay(1);
 80006ba:	2001      	movs	r0, #1
 80006bc:	f000 fc66 	bl	8000f8c <HAL_Delay>
	HAL_Delay(1);
 80006c0:	2001      	movs	r0, #1
 80006c2:	f000 fc63 	bl	8000f8c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80006c6:	2006      	movs	r0, #6
 80006c8:	f7ff ff4c 	bl	8000564 <lcd_send_cmd>
	HAL_Delay(1);
 80006cc:	2001      	movs	r0, #1
 80006ce:	f000 fc5d 	bl	8000f8c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80006d2:	200c      	movs	r0, #12
 80006d4:	f7ff ff46 	bl	8000564 <lcd_send_cmd>
}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}

080006dc <lcd_send_string>:

void lcd_send_string (char *str)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80006e4:	e006      	b.n	80006f4 <lcd_send_string+0x18>
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	1c5a      	adds	r2, r3, #1
 80006ea:	607a      	str	r2, [r7, #4]
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ff68 	bl	80005c4 <lcd_send_data>
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d1f4      	bne.n	80006e6 <lcd_send_string+0xa>
}
 80006fc:	bf00      	nop
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <delay_in_us>:
uint32_t diff = 0;
uint8_t is_first_captured = 0; // Has the first value been captured
uint8_t distance  = 0;

// Function that delays in microseconds (usec)
void delay_in_us (uint16_t time) {
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000712:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <delay_in_us+0x30>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2200      	movs	r2, #0
 8000718:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) <  time);
 800071a:	bf00      	nop
 800071c:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <delay_in_us+0x30>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000722:	88fb      	ldrh	r3, [r7, #6]
 8000724:	429a      	cmp	r2, r3
 8000726:	d3f9      	bcc.n	800071c <delay_in_us+0x14>
}
 8000728:	bf00      	nop
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	2000007c 	.word	0x2000007c
 800073c:	00000000 	.word	0x00000000

08000740 <HAL_TIM_IC_CaptureCallback>:

// Input Capture Callback ISR
// No function prototype because it is ISR and a HAL function
void HAL_TIM_IC_CaptureCallback (TIM_HandleTypeDef *htim) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) { // If the interrupt source is channel 1
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	7f1b      	ldrb	r3, [r3, #28]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d17a      	bne.n	8000846 <HAL_TIM_IC_CaptureCallback+0x106>
		if (is_first_captured == 0) { // If the first value is not captured
 8000750:	4b41      	ldr	r3, [pc, #260]	@ (8000858 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d11a      	bne.n	800078e <HAL_TIM_IC_CaptureCallback+0x4e>
			val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // Read the first value
 8000758:	2100      	movs	r1, #0
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f003 f906 	bl	800396c <HAL_TIM_ReadCapturedValue>
 8000760:	4603      	mov	r3, r0
 8000762:	4a3e      	ldr	r2, [pc, #248]	@ (800085c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000764:	6013      	str	r3, [r2, #0]
			is_first_captured = 1;
 8000766:	4b3c      	ldr	r3, [pc, #240]	@ (8000858 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000768:	2201      	movs	r2, #1
 800076a:	701a      	strb	r2, [r3, #0]
			// Change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	6a1a      	ldr	r2, [r3, #32]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f022 020a 	bic.w	r2, r2, #10
 800077a:	621a      	str	r2, [r3, #32]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	6a1a      	ldr	r2, [r3, #32]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f042 0202 	orr.w	r2, r2, #2
 800078a:	621a      	str	r2, [r3, #32]
			// Set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 800078c:	e05b      	b.n	8000846 <HAL_TIM_IC_CaptureCallback+0x106>
		else if (is_first_captured == 1) { // If the first is already captured
 800078e:	4b32      	ldr	r3, [pc, #200]	@ (8000858 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d157      	bne.n	8000846 <HAL_TIM_IC_CaptureCallback+0x106>
			val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // Read second value
 8000796:	2100      	movs	r1, #0
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f003 f8e7 	bl	800396c <HAL_TIM_ReadCapturedValue>
 800079e:	4603      	mov	r3, r0
 80007a0:	4a2f      	ldr	r2, [pc, #188]	@ (8000860 <HAL_TIM_IC_CaptureCallback+0x120>)
 80007a2:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // Reset the counter
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2200      	movs	r2, #0
 80007aa:	625a      	str	r2, [r3, #36]	@ 0x24
			if (val2 > val1) {
 80007ac:	4b2c      	ldr	r3, [pc, #176]	@ (8000860 <HAL_TIM_IC_CaptureCallback+0x120>)
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	4b2a      	ldr	r3, [pc, #168]	@ (800085c <HAL_TIM_IC_CaptureCallback+0x11c>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d907      	bls.n	80007c8 <HAL_TIM_IC_CaptureCallback+0x88>
				diff = val2 - val1; // diff is in microseconds
 80007b8:	4b29      	ldr	r3, [pc, #164]	@ (8000860 <HAL_TIM_IC_CaptureCallback+0x120>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	4b27      	ldr	r3, [pc, #156]	@ (800085c <HAL_TIM_IC_CaptureCallback+0x11c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	1ad3      	subs	r3, r2, r3
 80007c2:	4a28      	ldr	r2, [pc, #160]	@ (8000864 <HAL_TIM_IC_CaptureCallback+0x124>)
 80007c4:	6013      	str	r3, [r2, #0]
 80007c6:	e00f      	b.n	80007e8 <HAL_TIM_IC_CaptureCallback+0xa8>
			else if (val1 > val2) {
 80007c8:	4b24      	ldr	r3, [pc, #144]	@ (800085c <HAL_TIM_IC_CaptureCallback+0x11c>)
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	4b24      	ldr	r3, [pc, #144]	@ (8000860 <HAL_TIM_IC_CaptureCallback+0x120>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d909      	bls.n	80007e8 <HAL_TIM_IC_CaptureCallback+0xa8>
				diff = (0xffff - val1) + val2;  // diff is in microseconds
 80007d4:	4b22      	ldr	r3, [pc, #136]	@ (8000860 <HAL_TIM_IC_CaptureCallback+0x120>)
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	4b20      	ldr	r3, [pc, #128]	@ (800085c <HAL_TIM_IC_CaptureCallback+0x11c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	1ad2      	subs	r2, r2, r3
 80007de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007e2:	4413      	add	r3, r2
 80007e4:	4a1f      	ldr	r2, [pc, #124]	@ (8000864 <HAL_TIM_IC_CaptureCallback+0x124>)
 80007e6:	6013      	str	r3, [r2, #0]
			distance = diff * .034/2;  // UNITS BREAKDOWN: (10^(-6) s) * (10^4 m/s) = 10^(-2) m = cm -> distance is in cm
 80007e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000864 <HAL_TIM_IC_CaptureCallback+0x124>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	ee07 3a90 	vmov	s15, r3
 80007f0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80007f4:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 8000850 <HAL_TIM_IC_CaptureCallback+0x110>
 80007f8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007fc:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 8000800:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000804:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000808:	edc7 7a00 	vstr	s15, [r7]
 800080c:	783b      	ldrb	r3, [r7, #0]
 800080e:	b2da      	uxtb	r2, r3
 8000810:	4b15      	ldr	r3, [pc, #84]	@ (8000868 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000812:	701a      	strb	r2, [r3, #0]
			is_first_captured = 0; // Set back to false
 8000814:	4b10      	ldr	r3, [pc, #64]	@ (8000858 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	6a1a      	ldr	r2, [r3, #32]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f022 020a 	bic.w	r2, r2, #10
 8000828:	621a      	str	r2, [r3, #32]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	6a12      	ldr	r2, [r2, #32]
 8000834:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000836:	4b0d      	ldr	r3, [pc, #52]	@ (800086c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	68da      	ldr	r2, [r3, #12]
 800083c:	4b0b      	ldr	r3, [pc, #44]	@ (800086c <HAL_TIM_IC_CaptureCallback+0x12c>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f022 0202 	bic.w	r2, r2, #2
 8000844:	60da      	str	r2, [r3, #12]
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	b020c49c 	.word	0xb020c49c
 8000854:	3fa16872 	.word	0x3fa16872
 8000858:	200000d4 	.word	0x200000d4
 800085c:	200000c8 	.word	0x200000c8
 8000860:	200000cc 	.word	0x200000cc
 8000864:	200000d0 	.word	0x200000d0
 8000868:	200000d5 	.word	0x200000d5
 800086c:	2000007c 	.word	0x2000007c

08000870 <HCSR04_Read>:

// Drive TRIG Pin
static void HCSR04_Read (void) {
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000874:	2201      	movs	r2, #1
 8000876:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800087a:	480b      	ldr	r0, [pc, #44]	@ (80008a8 <HCSR04_Read+0x38>)
 800087c:	f000 fe68 	bl	8001550 <HAL_GPIO_WritePin>
	delay_in_us(10);  // wait for 10 us
 8000880:	200a      	movs	r0, #10
 8000882:	f7ff ff41 	bl	8000708 <delay_in_us>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000886:	2200      	movs	r2, #0
 8000888:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800088c:	4806      	ldr	r0, [pc, #24]	@ (80008a8 <HCSR04_Read+0x38>)
 800088e:	f000 fe5f 	bl	8001550 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000892:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <HCSR04_Read+0x3c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	68da      	ldr	r2, [r3, #12]
 8000898:	4b04      	ldr	r3, [pc, #16]	@ (80008ac <HCSR04_Read+0x3c>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f042 0202 	orr.w	r2, r2, #2
 80008a0:	60da      	str	r2, [r3, #12]
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40021000 	.word	0x40021000
 80008ac:	2000007c 	.word	0x2000007c

080008b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b4:	f000 fb0d 	bl	8000ed2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b8:	f000 f85c 	bl	8000974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008bc:	f000 f980 	bl	8000bc0 <MX_GPIO_Init>
  MX_TIM1_Init();
 80008c0:	f000 f908 	bl	8000ad4 <MX_TIM1_Init>
  MX_I2C1_Init();
 80008c4:	f000 f8c6 	bl	8000a54 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80008c8:	f7ff fecb 	bl	8000662 <lcd_init>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80008cc:	2100      	movs	r1, #0
 80008ce:	4823      	ldr	r0, [pc, #140]	@ (800095c <main+0xac>)
 80008d0:	f002 fc8e 	bl	80031f0 <HAL_TIM_IC_Start_IT>
  lcd_send_string ("Dist= ");
 80008d4:	4822      	ldr	r0, [pc, #136]	@ (8000960 <main+0xb0>)
 80008d6:	f7ff ff01 	bl	80006dc <lcd_send_string>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HCSR04_Read();
 80008da:	f7ff ffc9 	bl	8000870 <HCSR04_Read>
	lcd_put_cur(0, 6);
 80008de:	2106      	movs	r1, #6
 80008e0:	2000      	movs	r0, #0
 80008e2:	f7ff fe9f 	bl	8000624 <lcd_put_cur>
	lcd_send_data((distance/100) + 48);   // 100th pos
 80008e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000964 <main+0xb4>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	4a1f      	ldr	r2, [pc, #124]	@ (8000968 <main+0xb8>)
 80008ec:	fba2 2303 	umull	r2, r3, r2, r3
 80008f0:	095b      	lsrs	r3, r3, #5
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	3330      	adds	r3, #48	@ 0x30
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff fe63 	bl	80005c4 <lcd_send_data>
	lcd_send_data(((distance/10)%10) +48);  // 10th pos
 80008fe:	4b19      	ldr	r3, [pc, #100]	@ (8000964 <main+0xb4>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	4a1a      	ldr	r2, [pc, #104]	@ (800096c <main+0xbc>)
 8000904:	fba2 2303 	umull	r2, r3, r2, r3
 8000908:	08db      	lsrs	r3, r3, #3
 800090a:	b2da      	uxtb	r2, r3
 800090c:	4b17      	ldr	r3, [pc, #92]	@ (800096c <main+0xbc>)
 800090e:	fba3 1302 	umull	r1, r3, r3, r2
 8000912:	08d9      	lsrs	r1, r3, #3
 8000914:	460b      	mov	r3, r1
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	440b      	add	r3, r1
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	b2db      	uxtb	r3, r3
 8000920:	3330      	adds	r3, #48	@ 0x30
 8000922:	b2db      	uxtb	r3, r3
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fe4d 	bl	80005c4 <lcd_send_data>
	lcd_send_data((distance%10)+48);  // 1st pos
 800092a:	4b0e      	ldr	r3, [pc, #56]	@ (8000964 <main+0xb4>)
 800092c:	781a      	ldrb	r2, [r3, #0]
 800092e:	4b0f      	ldr	r3, [pc, #60]	@ (800096c <main+0xbc>)
 8000930:	fba3 1302 	umull	r1, r3, r3, r2
 8000934:	08d9      	lsrs	r1, r3, #3
 8000936:	460b      	mov	r3, r1
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	440b      	add	r3, r1
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	b2db      	uxtb	r3, r3
 8000942:	3330      	adds	r3, #48	@ 0x30
 8000944:	b2db      	uxtb	r3, r3
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff fe3c 	bl	80005c4 <lcd_send_data>
	lcd_send_string(" cm");
 800094c:	4808      	ldr	r0, [pc, #32]	@ (8000970 <main+0xc0>)
 800094e:	f7ff fec5 	bl	80006dc <lcd_send_string>
	HAL_Delay(100);
 8000952:	2064      	movs	r0, #100	@ 0x64
 8000954:	f000 fb1a 	bl	8000f8c <HAL_Delay>
	HCSR04_Read();
 8000958:	bf00      	nop
 800095a:	e7be      	b.n	80008da <main+0x2a>
 800095c:	2000007c 	.word	0x2000007c
 8000960:	08004138 	.word	0x08004138
 8000964:	200000d5 	.word	0x200000d5
 8000968:	51eb851f 	.word	0x51eb851f
 800096c:	cccccccd 	.word	0xcccccccd
 8000970:	08004140 	.word	0x08004140

08000974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b094      	sub	sp, #80	@ 0x50
 8000978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	2234      	movs	r2, #52	@ 0x34
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f003 fba0 	bl	80040c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000998:	4b2c      	ldr	r3, [pc, #176]	@ (8000a4c <SystemClock_Config+0xd8>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099c:	4a2b      	ldr	r2, [pc, #172]	@ (8000a4c <SystemClock_Config+0xd8>)
 800099e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a4:	4b29      	ldr	r3, [pc, #164]	@ (8000a4c <SystemClock_Config+0xd8>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009b0:	4b27      	ldr	r3, [pc, #156]	@ (8000a50 <SystemClock_Config+0xdc>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009b8:	4a25      	ldr	r2, [pc, #148]	@ (8000a50 <SystemClock_Config+0xdc>)
 80009ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009be:	6013      	str	r3, [r2, #0]
 80009c0:	4b23      	ldr	r3, [pc, #140]	@ (8000a50 <SystemClock_Config+0xdc>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d0:	2301      	movs	r3, #1
 80009d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d4:	2310      	movs	r3, #16
 80009d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d8:	2302      	movs	r3, #2
 80009da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009dc:	2300      	movs	r3, #0
 80009de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009e0:	2308      	movs	r3, #8
 80009e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80009e4:	2360      	movs	r3, #96	@ 0x60
 80009e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009ec:	2304      	movs	r3, #4
 80009ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009f0:	2302      	movs	r3, #2
 80009f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4618      	mov	r0, r3
 80009fa:	f001 fa79 	bl	8001ef0 <HAL_RCC_OscConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a04:	f000 f91c 	bl	8000c40 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a08:	f001 fa22 	bl	8001e50 <HAL_PWREx_EnableOverDrive>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000a12:	f000 f915 	bl	8000c40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a16:	230f      	movs	r3, #15
 8000a18:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a2c:	f107 0308 	add.w	r3, r7, #8
 8000a30:	2103      	movs	r1, #3
 8000a32:	4618      	mov	r0, r3
 8000a34:	f001 fd0a 	bl	800244c <HAL_RCC_ClockConfig>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000a3e:	f000 f8ff 	bl	8000c40 <Error_Handler>
  }
}
 8000a42:	bf00      	nop
 8000a44:	3750      	adds	r7, #80	@ 0x50
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40007000 	.word	0x40007000

08000a54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a58:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac8 <MX_I2C1_Init+0x74>)
 8000a5a:	4a1c      	ldr	r2, [pc, #112]	@ (8000acc <MX_I2C1_Init+0x78>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac8 <MX_I2C1_Init+0x74>)
 8000a60:	4a1b      	ldr	r2, [pc, #108]	@ (8000ad0 <MX_I2C1_Init+0x7c>)
 8000a62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a64:	4b18      	ldr	r3, [pc, #96]	@ (8000ac8 <MX_I2C1_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a6a:	4b17      	ldr	r3, [pc, #92]	@ (8000ac8 <MX_I2C1_Init+0x74>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a70:	4b15      	ldr	r3, [pc, #84]	@ (8000ac8 <MX_I2C1_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a76:	4b14      	ldr	r3, [pc, #80]	@ (8000ac8 <MX_I2C1_Init+0x74>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a7c:	4b12      	ldr	r3, [pc, #72]	@ (8000ac8 <MX_I2C1_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a82:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <MX_I2C1_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac8 <MX_I2C1_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a8e:	480e      	ldr	r0, [pc, #56]	@ (8000ac8 <MX_I2C1_Init+0x74>)
 8000a90:	f000 fd78 	bl	8001584 <HAL_I2C_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a9a:	f000 f8d1 	bl	8000c40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4809      	ldr	r0, [pc, #36]	@ (8000ac8 <MX_I2C1_Init+0x74>)
 8000aa2:	f001 f93d 	bl	8001d20 <HAL_I2CEx_ConfigAnalogFilter>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000aac:	f000 f8c8 	bl	8000c40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4805      	ldr	r0, [pc, #20]	@ (8000ac8 <MX_I2C1_Init+0x74>)
 8000ab4:	f001 f97f 	bl	8001db6 <HAL_I2CEx_ConfigDigitalFilter>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000abe:	f000 f8bf 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000028 	.word	0x20000028
 8000acc:	40005400 	.word	0x40005400
 8000ad0:	20303e5d 	.word	0x20303e5d

08000ad4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08c      	sub	sp, #48	@ 0x30
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ada:	f107 0320 	add.w	r3, r7, #32
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b00:	4b2d      	ldr	r3, [pc, #180]	@ (8000bb8 <MX_TIM1_Init+0xe4>)
 8000b02:	4a2e      	ldr	r2, [pc, #184]	@ (8000bbc <MX_TIM1_Init+0xe8>)
 8000b04:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 8000b06:	4b2c      	ldr	r3, [pc, #176]	@ (8000bb8 <MX_TIM1_Init+0xe4>)
 8000b08:	225f      	movs	r2, #95	@ 0x5f
 8000b0a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0c:	4b2a      	ldr	r3, [pc, #168]	@ (8000bb8 <MX_TIM1_Init+0xe4>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000b12:	4b29      	ldr	r3, [pc, #164]	@ (8000bb8 <MX_TIM1_Init+0xe4>)
 8000b14:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000b18:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b1a:	4b27      	ldr	r3, [pc, #156]	@ (8000bb8 <MX_TIM1_Init+0xe4>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b20:	4b25      	ldr	r3, [pc, #148]	@ (8000bb8 <MX_TIM1_Init+0xe4>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b26:	4b24      	ldr	r3, [pc, #144]	@ (8000bb8 <MX_TIM1_Init+0xe4>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b2c:	4822      	ldr	r0, [pc, #136]	@ (8000bb8 <MX_TIM1_Init+0xe4>)
 8000b2e:	f002 faa7 	bl	8003080 <HAL_TIM_Base_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000b38:	f000 f882 	bl	8000c40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b40:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b42:	f107 0320 	add.w	r3, r7, #32
 8000b46:	4619      	mov	r1, r3
 8000b48:	481b      	ldr	r0, [pc, #108]	@ (8000bb8 <MX_TIM1_Init+0xe4>)
 8000b4a:	f002 fe45 	bl	80037d8 <HAL_TIM_ConfigClockSource>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000b54:	f000 f874 	bl	8000c40 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000b58:	4817      	ldr	r0, [pc, #92]	@ (8000bb8 <MX_TIM1_Init+0xe4>)
 8000b5a:	f002 fae8 	bl	800312e <HAL_TIM_IC_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000b64:	f000 f86c 	bl	8000c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4619      	mov	r1, r3
 8000b7a:	480f      	ldr	r0, [pc, #60]	@ (8000bb8 <MX_TIM1_Init+0xe4>)
 8000b7c:	f003 f9f8 	bl	8003f70 <HAL_TIMEx_MasterConfigSynchronization>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000b86:	f000 f85b 	bl	8000c40 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4805      	ldr	r0, [pc, #20]	@ (8000bb8 <MX_TIM1_Init+0xe4>)
 8000ba2:	f002 fd7c 	bl	800369e <HAL_TIM_IC_ConfigChannel>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000bac:	f000 f848 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	3730      	adds	r7, #48	@ 0x30
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	2000007c 	.word	0x2000007c
 8000bbc:	40010000 	.word	0x40010000

08000bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b088      	sub	sp, #32
 8000bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc6:	f107 030c 	add.w	r3, r7, #12
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
 8000bd4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bd6:	4b18      	ldr	r3, [pc, #96]	@ (8000c38 <MX_GPIO_Init+0x78>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	4a17      	ldr	r2, [pc, #92]	@ (8000c38 <MX_GPIO_Init+0x78>)
 8000bdc:	f043 0310 	orr.w	r3, r3, #16
 8000be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be2:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <MX_GPIO_Init+0x78>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	f003 0310 	and.w	r3, r3, #16
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bee:	4b12      	ldr	r3, [pc, #72]	@ (8000c38 <MX_GPIO_Init+0x78>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	4a11      	ldr	r2, [pc, #68]	@ (8000c38 <MX_GPIO_Init+0x78>)
 8000bf4:	f043 0302 	orr.w	r3, r3, #2
 8000bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000c38 <MX_GPIO_Init+0x78>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c0c:	480b      	ldr	r0, [pc, #44]	@ (8000c3c <MX_GPIO_Init+0x7c>)
 8000c0e:	f000 fc9f 	bl	8001550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c24:	f107 030c 	add.w	r3, r7, #12
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4804      	ldr	r0, [pc, #16]	@ (8000c3c <MX_GPIO_Init+0x7c>)
 8000c2c:	f000 fae4 	bl	80011f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c30:	bf00      	nop
 8000c32:	3720      	adds	r7, #32
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40021000 	.word	0x40021000

08000c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c44:	b672      	cpsid	i
}
 8000c46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <Error_Handler+0x8>

08000c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c52:	4b0f      	ldr	r3, [pc, #60]	@ (8000c90 <HAL_MspInit+0x44>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c56:	4a0e      	ldr	r2, [pc, #56]	@ (8000c90 <HAL_MspInit+0x44>)
 8000c58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <HAL_MspInit+0x44>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6a:	4b09      	ldr	r3, [pc, #36]	@ (8000c90 <HAL_MspInit+0x44>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c6e:	4a08      	ldr	r2, [pc, #32]	@ (8000c90 <HAL_MspInit+0x44>)
 8000c70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c76:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <HAL_MspInit+0x44>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	40023800 	.word	0x40023800

08000c94 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b0ae      	sub	sp, #184	@ 0xb8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	2290      	movs	r2, #144	@ 0x90
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f003 fa07 	bl	80040c8 <memset>
  if(hi2c->Instance==I2C1)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a21      	ldr	r2, [pc, #132]	@ (8000d44 <HAL_I2C_MspInit+0xb0>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d13b      	bne.n	8000d3c <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000cc4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000cc8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f001 fdac 	bl	8002830 <HAL_RCCEx_PeriphCLKConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000cde:	f7ff ffaf 	bl	8000c40 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce2:	4b19      	ldr	r3, [pc, #100]	@ (8000d48 <HAL_I2C_MspInit+0xb4>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	4a18      	ldr	r2, [pc, #96]	@ (8000d48 <HAL_I2C_MspInit+0xb4>)
 8000ce8:	f043 0302 	orr.w	r3, r3, #2
 8000cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cee:	4b16      	ldr	r3, [pc, #88]	@ (8000d48 <HAL_I2C_MspInit+0xb4>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cfa:	23c0      	movs	r3, #192	@ 0xc0
 8000cfc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d00:	2312      	movs	r3, #18
 8000d02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d06:	2301      	movs	r3, #1
 8000d08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d12:	2304      	movs	r3, #4
 8000d14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d18:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	480b      	ldr	r0, [pc, #44]	@ (8000d4c <HAL_I2C_MspInit+0xb8>)
 8000d20:	f000 fa6a 	bl	80011f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d24:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <HAL_I2C_MspInit+0xb4>)
 8000d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d28:	4a07      	ldr	r2, [pc, #28]	@ (8000d48 <HAL_I2C_MspInit+0xb4>)
 8000d2a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d30:	4b05      	ldr	r3, [pc, #20]	@ (8000d48 <HAL_I2C_MspInit+0xb4>)
 8000d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d3c:	bf00      	nop
 8000d3e:	37b8      	adds	r7, #184	@ 0xb8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40005400 	.word	0x40005400
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40020400 	.word	0x40020400

08000d50 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	@ 0x28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ddc <HAL_TIM_Base_MspInit+0x8c>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d130      	bne.n	8000dd4 <HAL_TIM_Base_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d72:	4b1b      	ldr	r3, [pc, #108]	@ (8000de0 <HAL_TIM_Base_MspInit+0x90>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d76:	4a1a      	ldr	r2, [pc, #104]	@ (8000de0 <HAL_TIM_Base_MspInit+0x90>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d7e:	4b18      	ldr	r3, [pc, #96]	@ (8000de0 <HAL_TIM_Base_MspInit+0x90>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d8a:	4b15      	ldr	r3, [pc, #84]	@ (8000de0 <HAL_TIM_Base_MspInit+0x90>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	4a14      	ldr	r2, [pc, #80]	@ (8000de0 <HAL_TIM_Base_MspInit+0x90>)
 8000d90:	f043 0310 	orr.w	r3, r3, #16
 8000d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d96:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <HAL_TIM_Base_MspInit+0x90>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	f003 0310 	and.w	r3, r3, #16
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000da2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000db4:	2301      	movs	r3, #1
 8000db6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4809      	ldr	r0, [pc, #36]	@ (8000de4 <HAL_TIM_Base_MspInit+0x94>)
 8000dc0:	f000 fa1a 	bl	80011f8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	201b      	movs	r0, #27
 8000dca:	f000 f9de 	bl	800118a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000dce:	201b      	movs	r0, #27
 8000dd0:	f000 f9f7 	bl	80011c2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000dd4:	bf00      	nop
 8000dd6:	3728      	adds	r7, #40	@ 0x28
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40010000 	.word	0x40010000
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40021000 	.word	0x40021000

08000de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dec:	bf00      	nop
 8000dee:	e7fd      	b.n	8000dec <NMI_Handler+0x4>

08000df0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <HardFault_Handler+0x4>

08000df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <MemManage_Handler+0x4>

08000e00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <BusFault_Handler+0x4>

08000e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <UsageFault_Handler+0x4>

08000e10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e3e:	f000 f885 	bl	8000f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e4c:	4802      	ldr	r0, [pc, #8]	@ (8000e58 <TIM1_CC_IRQHandler+0x10>)
 8000e4e:	f002 fb1f 	bl	8003490 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	2000007c 	.word	0x2000007c

08000e5c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e60:	4b06      	ldr	r3, [pc, #24]	@ (8000e7c <SystemInit+0x20>)
 8000e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e66:	4a05      	ldr	r2, [pc, #20]	@ (8000e7c <SystemInit+0x20>)
 8000e68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000eb8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e84:	f7ff ffea 	bl	8000e5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e88:	480c      	ldr	r0, [pc, #48]	@ (8000ebc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e8a:	490d      	ldr	r1, [pc, #52]	@ (8000ec0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e90:	e002      	b.n	8000e98 <LoopCopyDataInit>

08000e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e96:	3304      	adds	r3, #4

08000e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e9c:	d3f9      	bcc.n	8000e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ea0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ecc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea4:	e001      	b.n	8000eaa <LoopFillZerobss>

08000ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea8:	3204      	adds	r2, #4

08000eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eac:	d3fb      	bcc.n	8000ea6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000eae:	f003 f913 	bl	80040d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eb2:	f7ff fcfd 	bl	80008b0 <main>
  bx  lr    
 8000eb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000eb8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ec4:	08004164 	.word	0x08004164
  ldr r2, =_sbss
 8000ec8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ecc:	200000dc 	.word	0x200000dc

08000ed0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed0:	e7fe      	b.n	8000ed0 <ADC_IRQHandler>

08000ed2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed6:	2003      	movs	r0, #3
 8000ed8:	f000 f94c 	bl	8001174 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000edc:	2000      	movs	r0, #0
 8000ede:	f000 f805 	bl	8000eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee2:	f7ff feb3 	bl	8000c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee6:	2300      	movs	r3, #0
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <HAL_InitTick+0x54>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <HAL_InitTick+0x58>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 f967 	bl	80011de <HAL_SYSTICK_Config>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00e      	b.n	8000f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b0f      	cmp	r3, #15
 8000f1e:	d80a      	bhi.n	8000f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f20:	2200      	movs	r2, #0
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	f000 f92f 	bl	800118a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f2c:	4a06      	ldr	r2, [pc, #24]	@ (8000f48 <HAL_InitTick+0x5c>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	e000      	b.n	8000f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000000 	.word	0x20000000
 8000f44:	20000008 	.word	0x20000008
 8000f48:	20000004 	.word	0x20000004

08000f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f50:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <HAL_IncTick+0x20>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <HAL_IncTick+0x24>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a04      	ldr	r2, [pc, #16]	@ (8000f70 <HAL_IncTick+0x24>)
 8000f5e:	6013      	str	r3, [r2, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000008 	.word	0x20000008
 8000f70:	200000d8 	.word	0x200000d8

08000f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return uwTick;
 8000f78:	4b03      	ldr	r3, [pc, #12]	@ (8000f88 <HAL_GetTick+0x14>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	200000d8 	.word	0x200000d8

08000f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f94:	f7ff ffee 	bl	8000f74 <HAL_GetTick>
 8000f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa4:	d005      	beq.n	8000fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <HAL_Delay+0x44>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4413      	add	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fb2:	bf00      	nop
 8000fb4:	f7ff ffde 	bl	8000f74 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d8f7      	bhi.n	8000fb4 <HAL_Delay+0x28>
  {
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000008 	.word	0x20000008

08000fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8001014 <__NVIC_SetPriorityGrouping+0x40>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ffc:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8000ffe:	4313      	orrs	r3, r2
 8001000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001002:	4a04      	ldr	r2, [pc, #16]	@ (8001014 <__NVIC_SetPriorityGrouping+0x40>)
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	60d3      	str	r3, [r2, #12]
}
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00
 8001018:	05fa0000 	.word	0x05fa0000

0800101c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001020:	4b04      	ldr	r3, [pc, #16]	@ (8001034 <__NVIC_GetPriorityGrouping+0x18>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	f003 0307 	and.w	r3, r3, #7
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	2b00      	cmp	r3, #0
 8001048:	db0b      	blt.n	8001062 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	f003 021f 	and.w	r2, r3, #31
 8001050:	4907      	ldr	r1, [pc, #28]	@ (8001070 <__NVIC_EnableIRQ+0x38>)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	095b      	lsrs	r3, r3, #5
 8001058:	2001      	movs	r0, #1
 800105a:	fa00 f202 	lsl.w	r2, r0, r2
 800105e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000e100 	.word	0xe000e100

08001074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	db0a      	blt.n	800109e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	b2da      	uxtb	r2, r3
 800108c:	490c      	ldr	r1, [pc, #48]	@ (80010c0 <__NVIC_SetPriority+0x4c>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	440b      	add	r3, r1
 8001098:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800109c:	e00a      	b.n	80010b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4908      	ldr	r1, [pc, #32]	@ (80010c4 <__NVIC_SetPriority+0x50>)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	3b04      	subs	r3, #4
 80010ac:	0112      	lsls	r2, r2, #4
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	440b      	add	r3, r1
 80010b2:	761a      	strb	r2, [r3, #24]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000e100 	.word	0xe000e100
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	@ 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f1c3 0307 	rsb	r3, r3, #7
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	bf28      	it	cs
 80010e6:	2304      	movcs	r3, #4
 80010e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3304      	adds	r3, #4
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d902      	bls.n	80010f8 <NVIC_EncodePriority+0x30>
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3b03      	subs	r3, #3
 80010f6:	e000      	b.n	80010fa <NVIC_EncodePriority+0x32>
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43da      	mvns	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	401a      	ands	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001110:	f04f 31ff 	mov.w	r1, #4294967295
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	43d9      	mvns	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	4313      	orrs	r3, r2
         );
}
 8001122:	4618      	mov	r0, r3
 8001124:	3724      	adds	r7, #36	@ 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001140:	d301      	bcc.n	8001146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001142:	2301      	movs	r3, #1
 8001144:	e00f      	b.n	8001166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001146:	4a0a      	ldr	r2, [pc, #40]	@ (8001170 <SysTick_Config+0x40>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800114e:	210f      	movs	r1, #15
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	f7ff ff8e 	bl	8001074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001158:	4b05      	ldr	r3, [pc, #20]	@ (8001170 <SysTick_Config+0x40>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115e:	4b04      	ldr	r3, [pc, #16]	@ (8001170 <SysTick_Config+0x40>)
 8001160:	2207      	movs	r2, #7
 8001162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	e000e010 	.word	0xe000e010

08001174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff29 	bl	8000fd4 <__NVIC_SetPriorityGrouping>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800118a:	b580      	push	{r7, lr}
 800118c:	b086      	sub	sp, #24
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800119c:	f7ff ff3e 	bl	800101c <__NVIC_GetPriorityGrouping>
 80011a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	68b9      	ldr	r1, [r7, #8]
 80011a6:	6978      	ldr	r0, [r7, #20]
 80011a8:	f7ff ff8e 	bl	80010c8 <NVIC_EncodePriority>
 80011ac:	4602      	mov	r2, r0
 80011ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff5d 	bl	8001074 <__NVIC_SetPriority>
}
 80011ba:	bf00      	nop
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	4603      	mov	r3, r0
 80011ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff31 	bl	8001038 <__NVIC_EnableIRQ>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ffa2 	bl	8001130 <SysTick_Config>
 80011ec:	4603      	mov	r3, r0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b089      	sub	sp, #36	@ 0x24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800120e:	2300      	movs	r3, #0
 8001210:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
 8001216:	e175      	b.n	8001504 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001218:	2201      	movs	r2, #1
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	4013      	ands	r3, r2
 800122a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	429a      	cmp	r2, r3
 8001232:	f040 8164 	bne.w	80014fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	2b01      	cmp	r3, #1
 8001240:	d005      	beq.n	800124e <HAL_GPIO_Init+0x56>
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d130      	bne.n	80012b0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	2203      	movs	r2, #3
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43db      	mvns	r3, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4013      	ands	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	68da      	ldr	r2, [r3, #12]
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001284:	2201      	movs	r2, #1
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	091b      	lsrs	r3, r3, #4
 800129a:	f003 0201 	and.w	r2, r3, #1
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 0303 	and.w	r3, r3, #3
 80012b8:	2b03      	cmp	r3, #3
 80012ba:	d017      	beq.n	80012ec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	2203      	movs	r2, #3
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d123      	bne.n	8001340 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	08da      	lsrs	r2, r3, #3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3208      	adds	r2, #8
 8001300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	f003 0307 	and.w	r3, r3, #7
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	220f      	movs	r2, #15
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	691a      	ldr	r2, [r3, #16]
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	08da      	lsrs	r2, r3, #3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3208      	adds	r2, #8
 800133a:	69b9      	ldr	r1, [r7, #24]
 800133c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	2203      	movs	r2, #3
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 0203 	and.w	r2, r3, #3
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800137c:	2b00      	cmp	r3, #0
 800137e:	f000 80be 	beq.w	80014fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001382:	4b66      	ldr	r3, [pc, #408]	@ (800151c <HAL_GPIO_Init+0x324>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001386:	4a65      	ldr	r2, [pc, #404]	@ (800151c <HAL_GPIO_Init+0x324>)
 8001388:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800138c:	6453      	str	r3, [r2, #68]	@ 0x44
 800138e:	4b63      	ldr	r3, [pc, #396]	@ (800151c <HAL_GPIO_Init+0x324>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001392:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800139a:	4a61      	ldr	r2, [pc, #388]	@ (8001520 <HAL_GPIO_Init+0x328>)
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	089b      	lsrs	r3, r3, #2
 80013a0:	3302      	adds	r3, #2
 80013a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f003 0303 	and.w	r3, r3, #3
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	220f      	movs	r2, #15
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a58      	ldr	r2, [pc, #352]	@ (8001524 <HAL_GPIO_Init+0x32c>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d037      	beq.n	8001436 <HAL_GPIO_Init+0x23e>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a57      	ldr	r2, [pc, #348]	@ (8001528 <HAL_GPIO_Init+0x330>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d031      	beq.n	8001432 <HAL_GPIO_Init+0x23a>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a56      	ldr	r2, [pc, #344]	@ (800152c <HAL_GPIO_Init+0x334>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d02b      	beq.n	800142e <HAL_GPIO_Init+0x236>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a55      	ldr	r2, [pc, #340]	@ (8001530 <HAL_GPIO_Init+0x338>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d025      	beq.n	800142a <HAL_GPIO_Init+0x232>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a54      	ldr	r2, [pc, #336]	@ (8001534 <HAL_GPIO_Init+0x33c>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d01f      	beq.n	8001426 <HAL_GPIO_Init+0x22e>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a53      	ldr	r2, [pc, #332]	@ (8001538 <HAL_GPIO_Init+0x340>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d019      	beq.n	8001422 <HAL_GPIO_Init+0x22a>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a52      	ldr	r2, [pc, #328]	@ (800153c <HAL_GPIO_Init+0x344>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d013      	beq.n	800141e <HAL_GPIO_Init+0x226>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a51      	ldr	r2, [pc, #324]	@ (8001540 <HAL_GPIO_Init+0x348>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d00d      	beq.n	800141a <HAL_GPIO_Init+0x222>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a50      	ldr	r2, [pc, #320]	@ (8001544 <HAL_GPIO_Init+0x34c>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d007      	beq.n	8001416 <HAL_GPIO_Init+0x21e>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a4f      	ldr	r2, [pc, #316]	@ (8001548 <HAL_GPIO_Init+0x350>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d101      	bne.n	8001412 <HAL_GPIO_Init+0x21a>
 800140e:	2309      	movs	r3, #9
 8001410:	e012      	b.n	8001438 <HAL_GPIO_Init+0x240>
 8001412:	230a      	movs	r3, #10
 8001414:	e010      	b.n	8001438 <HAL_GPIO_Init+0x240>
 8001416:	2308      	movs	r3, #8
 8001418:	e00e      	b.n	8001438 <HAL_GPIO_Init+0x240>
 800141a:	2307      	movs	r3, #7
 800141c:	e00c      	b.n	8001438 <HAL_GPIO_Init+0x240>
 800141e:	2306      	movs	r3, #6
 8001420:	e00a      	b.n	8001438 <HAL_GPIO_Init+0x240>
 8001422:	2305      	movs	r3, #5
 8001424:	e008      	b.n	8001438 <HAL_GPIO_Init+0x240>
 8001426:	2304      	movs	r3, #4
 8001428:	e006      	b.n	8001438 <HAL_GPIO_Init+0x240>
 800142a:	2303      	movs	r3, #3
 800142c:	e004      	b.n	8001438 <HAL_GPIO_Init+0x240>
 800142e:	2302      	movs	r3, #2
 8001430:	e002      	b.n	8001438 <HAL_GPIO_Init+0x240>
 8001432:	2301      	movs	r3, #1
 8001434:	e000      	b.n	8001438 <HAL_GPIO_Init+0x240>
 8001436:	2300      	movs	r3, #0
 8001438:	69fa      	ldr	r2, [r7, #28]
 800143a:	f002 0203 	and.w	r2, r2, #3
 800143e:	0092      	lsls	r2, r2, #2
 8001440:	4093      	lsls	r3, r2
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001448:	4935      	ldr	r1, [pc, #212]	@ (8001520 <HAL_GPIO_Init+0x328>)
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	089b      	lsrs	r3, r3, #2
 800144e:	3302      	adds	r3, #2
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001456:	4b3d      	ldr	r3, [pc, #244]	@ (800154c <HAL_GPIO_Init+0x354>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	43db      	mvns	r3, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800147a:	4a34      	ldr	r2, [pc, #208]	@ (800154c <HAL_GPIO_Init+0x354>)
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001480:	4b32      	ldr	r3, [pc, #200]	@ (800154c <HAL_GPIO_Init+0x354>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014a4:	4a29      	ldr	r2, [pc, #164]	@ (800154c <HAL_GPIO_Init+0x354>)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014aa:	4b28      	ldr	r3, [pc, #160]	@ (800154c <HAL_GPIO_Init+0x354>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4013      	ands	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ce:	4a1f      	ldr	r2, [pc, #124]	@ (800154c <HAL_GPIO_Init+0x354>)
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014d4:	4b1d      	ldr	r3, [pc, #116]	@ (800154c <HAL_GPIO_Init+0x354>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014f8:	4a14      	ldr	r2, [pc, #80]	@ (800154c <HAL_GPIO_Init+0x354>)
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3301      	adds	r3, #1
 8001502:	61fb      	str	r3, [r7, #28]
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	2b0f      	cmp	r3, #15
 8001508:	f67f ae86 	bls.w	8001218 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	3724      	adds	r7, #36	@ 0x24
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40023800 	.word	0x40023800
 8001520:	40013800 	.word	0x40013800
 8001524:	40020000 	.word	0x40020000
 8001528:	40020400 	.word	0x40020400
 800152c:	40020800 	.word	0x40020800
 8001530:	40020c00 	.word	0x40020c00
 8001534:	40021000 	.word	0x40021000
 8001538:	40021400 	.word	0x40021400
 800153c:	40021800 	.word	0x40021800
 8001540:	40021c00 	.word	0x40021c00
 8001544:	40022000 	.word	0x40022000
 8001548:	40022400 	.word	0x40022400
 800154c:	40013c00 	.word	0x40013c00

08001550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	807b      	strh	r3, [r7, #2]
 800155c:	4613      	mov	r3, r2
 800155e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001560:	787b      	ldrb	r3, [r7, #1]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001566:	887a      	ldrh	r2, [r7, #2]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800156c:	e003      	b.n	8001576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800156e:	887b      	ldrh	r3, [r7, #2]
 8001570:	041a      	lsls	r2, r3, #16
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	619a      	str	r2, [r3, #24]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e08b      	b.n	80016ae <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d106      	bne.n	80015b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff fb72 	bl	8000c94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2224      	movs	r2, #36	@ 0x24
 80015b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 0201 	bic.w	r2, r2, #1
 80015c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80015e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d107      	bne.n	80015fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689a      	ldr	r2, [r3, #8]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	e006      	b.n	800160c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689a      	ldr	r2, [r3, #8]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800160a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	2b02      	cmp	r3, #2
 8001612:	d108      	bne.n	8001626 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	e007      	b.n	8001636 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001634:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6859      	ldr	r1, [r3, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4b1d      	ldr	r3, [pc, #116]	@ (80016b8 <HAL_I2C_Init+0x134>)
 8001642:	430b      	orrs	r3, r1
 8001644:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68da      	ldr	r2, [r3, #12]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001654:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691a      	ldr	r2, [r3, #16]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	430a      	orrs	r2, r1
 800166e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69d9      	ldr	r1, [r3, #28]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a1a      	ldr	r2, [r3, #32]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	430a      	orrs	r2, r1
 800167e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f042 0201 	orr.w	r2, r2, #1
 800168e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2220      	movs	r2, #32
 800169a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	02008000 	.word	0x02008000

080016bc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b088      	sub	sp, #32
 80016c0:	af02      	add	r7, sp, #8
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	607a      	str	r2, [r7, #4]
 80016c6:	461a      	mov	r2, r3
 80016c8:	460b      	mov	r3, r1
 80016ca:	817b      	strh	r3, [r7, #10]
 80016cc:	4613      	mov	r3, r2
 80016ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b20      	cmp	r3, #32
 80016da:	f040 80fd 	bne.w	80018d8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d101      	bne.n	80016ec <HAL_I2C_Master_Transmit+0x30>
 80016e8:	2302      	movs	r3, #2
 80016ea:	e0f6      	b.n	80018da <HAL_I2C_Master_Transmit+0x21e>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016f4:	f7ff fc3e 	bl	8000f74 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	2319      	movs	r3, #25
 8001700:	2201      	movs	r2, #1
 8001702:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	f000 f914 	bl	8001934 <I2C_WaitOnFlagUntilTimeout>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e0e1      	b.n	80018da <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2221      	movs	r2, #33	@ 0x21
 800171a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2210      	movs	r2, #16
 8001722:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2200      	movs	r2, #0
 800172a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	893a      	ldrh	r2, [r7, #8]
 8001736:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2200      	movs	r2, #0
 800173c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001742:	b29b      	uxth	r3, r3
 8001744:	2bff      	cmp	r3, #255	@ 0xff
 8001746:	d906      	bls.n	8001756 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	22ff      	movs	r2, #255	@ 0xff
 800174c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800174e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	e007      	b.n	8001766 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800175a:	b29a      	uxth	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001760:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001764:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800176a:	2b00      	cmp	r3, #0
 800176c:	d024      	beq.n	80017b8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001772:	781a      	ldrb	r2, [r3, #0]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001788:	b29b      	uxth	r3, r3
 800178a:	3b01      	subs	r3, #1
 800178c:	b29a      	uxth	r2, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001796:	3b01      	subs	r3, #1
 8001798:	b29a      	uxth	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	3301      	adds	r3, #1
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	8979      	ldrh	r1, [r7, #10]
 80017aa:	4b4e      	ldr	r3, [pc, #312]	@ (80018e4 <HAL_I2C_Master_Transmit+0x228>)
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	f000 fa83 	bl	8001cbc <I2C_TransferConfig>
 80017b6:	e066      	b.n	8001886 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	8979      	ldrh	r1, [r7, #10]
 80017c0:	4b48      	ldr	r3, [pc, #288]	@ (80018e4 <HAL_I2C_Master_Transmit+0x228>)
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f000 fa78 	bl	8001cbc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80017cc:	e05b      	b.n	8001886 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	6a39      	ldr	r1, [r7, #32]
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f000 f907 	bl	80019e6 <I2C_WaitOnTXISFlagUntilTimeout>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e07b      	b.n	80018da <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e6:	781a      	ldrb	r2, [r3, #0]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	3b01      	subs	r3, #1
 8001800:	b29a      	uxth	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800180a:	3b01      	subs	r3, #1
 800180c:	b29a      	uxth	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001816:	b29b      	uxth	r3, r3
 8001818:	2b00      	cmp	r3, #0
 800181a:	d034      	beq.n	8001886 <HAL_I2C_Master_Transmit+0x1ca>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001820:	2b00      	cmp	r3, #0
 8001822:	d130      	bne.n	8001886 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	6a3b      	ldr	r3, [r7, #32]
 800182a:	2200      	movs	r2, #0
 800182c:	2180      	movs	r1, #128	@ 0x80
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f000 f880 	bl	8001934 <I2C_WaitOnFlagUntilTimeout>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e04d      	b.n	80018da <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001842:	b29b      	uxth	r3, r3
 8001844:	2bff      	cmp	r3, #255	@ 0xff
 8001846:	d90e      	bls.n	8001866 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	22ff      	movs	r2, #255	@ 0xff
 800184c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001852:	b2da      	uxtb	r2, r3
 8001854:	8979      	ldrh	r1, [r7, #10]
 8001856:	2300      	movs	r3, #0
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	f000 fa2c 	bl	8001cbc <I2C_TransferConfig>
 8001864:	e00f      	b.n	8001886 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800186a:	b29a      	uxth	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001874:	b2da      	uxtb	r2, r3
 8001876:	8979      	ldrh	r1, [r7, #10]
 8001878:	2300      	movs	r3, #0
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	f000 fa1b 	bl	8001cbc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800188a:	b29b      	uxth	r3, r3
 800188c:	2b00      	cmp	r3, #0
 800188e:	d19e      	bne.n	80017ce <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	6a39      	ldr	r1, [r7, #32]
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f000 f8ed 	bl	8001a74 <I2C_WaitOnSTOPFlagUntilTimeout>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e01a      	b.n	80018da <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2220      	movs	r2, #32
 80018aa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6859      	ldr	r1, [r3, #4]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	4b0c      	ldr	r3, [pc, #48]	@ (80018e8 <HAL_I2C_Master_Transmit+0x22c>)
 80018b8:	400b      	ands	r3, r1
 80018ba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2220      	movs	r2, #32
 80018c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80018d4:	2300      	movs	r3, #0
 80018d6:	e000      	b.n	80018da <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80018d8:	2302      	movs	r3, #2
  }
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	80002000 	.word	0x80002000
 80018e8:	fe00e800 	.word	0xfe00e800

080018ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d103      	bne.n	800190a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2200      	movs	r2, #0
 8001908:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b01      	cmp	r3, #1
 8001916:	d007      	beq.n	8001928 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	699a      	ldr	r2, [r3, #24]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f042 0201 	orr.w	r2, r2, #1
 8001926:	619a      	str	r2, [r3, #24]
  }
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	4613      	mov	r3, r2
 8001942:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001944:	e03b      	b.n	80019be <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	6839      	ldr	r1, [r7, #0]
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	f000 f8d6 	bl	8001afc <I2C_IsErrorOccurred>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e041      	b.n	80019de <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001960:	d02d      	beq.n	80019be <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001962:	f7ff fb07 	bl	8000f74 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d302      	bcc.n	8001978 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d122      	bne.n	80019be <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	699a      	ldr	r2, [r3, #24]
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	4013      	ands	r3, r2
 8001982:	68ba      	ldr	r2, [r7, #8]
 8001984:	429a      	cmp	r2, r3
 8001986:	bf0c      	ite	eq
 8001988:	2301      	moveq	r3, #1
 800198a:	2300      	movne	r3, #0
 800198c:	b2db      	uxtb	r3, r3
 800198e:	461a      	mov	r2, r3
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	429a      	cmp	r2, r3
 8001994:	d113      	bne.n	80019be <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199a:	f043 0220 	orr.w	r2, r3, #32
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2220      	movs	r2, #32
 80019a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e00f      	b.n	80019de <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	699a      	ldr	r2, [r3, #24]
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	4013      	ands	r3, r2
 80019c8:	68ba      	ldr	r2, [r7, #8]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	bf0c      	ite	eq
 80019ce:	2301      	moveq	r3, #1
 80019d0:	2300      	movne	r3, #0
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	461a      	mov	r2, r3
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d0b4      	beq.n	8001946 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b084      	sub	sp, #16
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	60f8      	str	r0, [r7, #12]
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019f2:	e033      	b.n	8001a5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	68b9      	ldr	r1, [r7, #8]
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f000 f87f 	bl	8001afc <I2C_IsErrorOccurred>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e031      	b.n	8001a6c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a0e:	d025      	beq.n	8001a5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a10:	f7ff fab0 	bl	8000f74 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d302      	bcc.n	8001a26 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d11a      	bne.n	8001a5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d013      	beq.n	8001a5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a38:	f043 0220 	orr.w	r2, r3, #32
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2220      	movs	r2, #32
 8001a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e007      	b.n	8001a6c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d1c4      	bne.n	80019f4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a80:	e02f      	b.n	8001ae2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	68b9      	ldr	r1, [r7, #8]
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f000 f838 	bl	8001afc <I2C_IsErrorOccurred>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e02d      	b.n	8001af2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a96:	f7ff fa6d 	bl	8000f74 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	68ba      	ldr	r2, [r7, #8]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d302      	bcc.n	8001aac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d11a      	bne.n	8001ae2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	f003 0320 	and.w	r3, r3, #32
 8001ab6:	2b20      	cmp	r3, #32
 8001ab8:	d013      	beq.n	8001ae2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001abe:	f043 0220 	orr.w	r2, r3, #32
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2220      	movs	r2, #32
 8001aca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e007      	b.n	8001af2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	f003 0320 	and.w	r3, r3, #32
 8001aec:	2b20      	cmp	r3, #32
 8001aee:	d1c8      	bne.n	8001a82 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	@ 0x28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	f003 0310 	and.w	r3, r3, #16
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d068      	beq.n	8001bfa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2210      	movs	r2, #16
 8001b2e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b30:	e049      	b.n	8001bc6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b38:	d045      	beq.n	8001bc6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b3a:	f7ff fa1b 	bl	8000f74 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	68ba      	ldr	r2, [r7, #8]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d302      	bcc.n	8001b50 <I2C_IsErrorOccurred+0x54>
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d13a      	bne.n	8001bc6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b5a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001b62:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b72:	d121      	bne.n	8001bb8 <I2C_IsErrorOccurred+0xbc>
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001b7a:	d01d      	beq.n	8001bb8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001b7c:	7cfb      	ldrb	r3, [r7, #19]
 8001b7e:	2b20      	cmp	r3, #32
 8001b80:	d01a      	beq.n	8001bb8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	685a      	ldr	r2, [r3, #4]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b90:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001b92:	f7ff f9ef 	bl	8000f74 <HAL_GetTick>
 8001b96:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b98:	e00e      	b.n	8001bb8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001b9a:	f7ff f9eb 	bl	8000f74 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b19      	cmp	r3, #25
 8001ba6:	d907      	bls.n	8001bb8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001ba8:	6a3b      	ldr	r3, [r7, #32]
 8001baa:	f043 0320 	orr.w	r3, r3, #32
 8001bae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001bb6:	e006      	b.n	8001bc6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	f003 0320 	and.w	r3, r3, #32
 8001bc2:	2b20      	cmp	r3, #32
 8001bc4:	d1e9      	bne.n	8001b9a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	f003 0320 	and.w	r3, r3, #32
 8001bd0:	2b20      	cmp	r3, #32
 8001bd2:	d003      	beq.n	8001bdc <I2C_IsErrorOccurred+0xe0>
 8001bd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0aa      	beq.n	8001b32 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001bdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d103      	bne.n	8001bec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2220      	movs	r2, #32
 8001bea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001bec:	6a3b      	ldr	r3, [r7, #32]
 8001bee:	f043 0304 	orr.w	r3, r3, #4
 8001bf2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d00b      	beq.n	8001c24 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001c0c:	6a3b      	ldr	r3, [r7, #32]
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00b      	beq.n	8001c46 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001c2e:	6a3b      	ldr	r3, [r7, #32]
 8001c30:	f043 0308 	orr.w	r3, r3, #8
 8001c34:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c3e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00b      	beq.n	8001c68 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001c50:	6a3b      	ldr	r3, [r7, #32]
 8001c52:	f043 0302 	orr.w	r3, r3, #2
 8001c56:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001c68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d01c      	beq.n	8001caa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f7ff fe3b 	bl	80018ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6859      	ldr	r1, [r3, #4]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb8 <I2C_IsErrorOccurred+0x1bc>)
 8001c82:	400b      	ands	r3, r1
 8001c84:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2220      	movs	r2, #32
 8001c96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001caa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3728      	adds	r7, #40	@ 0x28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	fe00e800 	.word	0xfe00e800

08001cbc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b087      	sub	sp, #28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	607b      	str	r3, [r7, #4]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	817b      	strh	r3, [r7, #10]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001cce:	897b      	ldrh	r3, [r7, #10]
 8001cd0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001cd4:	7a7b      	ldrb	r3, [r7, #9]
 8001cd6:	041b      	lsls	r3, r3, #16
 8001cd8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001cdc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ce2:	6a3b      	ldr	r3, [r7, #32]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001cea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	6a3b      	ldr	r3, [r7, #32]
 8001cf4:	0d5b      	lsrs	r3, r3, #21
 8001cf6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001cfa:	4b08      	ldr	r3, [pc, #32]	@ (8001d1c <I2C_TransferConfig+0x60>)
 8001cfc:	430b      	orrs	r3, r1
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	ea02 0103 	and.w	r1, r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001d0e:	bf00      	nop
 8001d10:	371c      	adds	r7, #28
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	03ff63ff 	.word	0x03ff63ff

08001d20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b20      	cmp	r3, #32
 8001d34:	d138      	bne.n	8001da8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d101      	bne.n	8001d44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d40:	2302      	movs	r3, #2
 8001d42:	e032      	b.n	8001daa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2224      	movs	r2, #36	@ 0x24
 8001d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 0201 	bic.w	r2, r2, #1
 8001d62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001d72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6819      	ldr	r1, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0201 	orr.w	r2, r2, #1
 8001d92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2220      	movs	r2, #32
 8001d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001da4:	2300      	movs	r3, #0
 8001da6:	e000      	b.n	8001daa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001da8:	2302      	movs	r3, #2
  }
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b085      	sub	sp, #20
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
 8001dbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b20      	cmp	r3, #32
 8001dca:	d139      	bne.n	8001e40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d101      	bne.n	8001dda <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	e033      	b.n	8001e42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2224      	movs	r2, #36	@ 0x24
 8001de6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 0201 	bic.w	r2, r2, #1
 8001df8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001e08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	021b      	lsls	r3, r3, #8
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0201 	orr.w	r2, r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2220      	movs	r2, #32
 8001e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	e000      	b.n	8001e42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e40:	2302      	movs	r3, #2
  }
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
	...

08001e50 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e5a:	4b23      	ldr	r3, [pc, #140]	@ (8001ee8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5e:	4a22      	ldr	r2, [pc, #136]	@ (8001ee8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e64:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e66:	4b20      	ldr	r3, [pc, #128]	@ (8001ee8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e72:	4b1e      	ldr	r3, [pc, #120]	@ (8001eec <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a1d      	ldr	r2, [pc, #116]	@ (8001eec <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e7c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e7e:	f7ff f879 	bl	8000f74 <HAL_GetTick>
 8001e82:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e84:	e009      	b.n	8001e9a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e86:	f7ff f875 	bl	8000f74 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e94:	d901      	bls.n	8001e9a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e022      	b.n	8001ee0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e9a:	4b14      	ldr	r3, [pc, #80]	@ (8001eec <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ea2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ea6:	d1ee      	bne.n	8001e86 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001ea8:	4b10      	ldr	r3, [pc, #64]	@ (8001eec <HAL_PWREx_EnableOverDrive+0x9c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a0f      	ldr	r2, [pc, #60]	@ (8001eec <HAL_PWREx_EnableOverDrive+0x9c>)
 8001eae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eb2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001eb4:	f7ff f85e 	bl	8000f74 <HAL_GetTick>
 8001eb8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001eba:	e009      	b.n	8001ed0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ebc:	f7ff f85a 	bl	8000f74 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001eca:	d901      	bls.n	8001ed0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e007      	b.n	8001ee0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ed0:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001edc:	d1ee      	bne.n	8001ebc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40007000 	.word	0x40007000

08001ef0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e29b      	b.n	800243e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 8087 	beq.w	8002022 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f14:	4b96      	ldr	r3, [pc, #600]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 030c 	and.w	r3, r3, #12
 8001f1c:	2b04      	cmp	r3, #4
 8001f1e:	d00c      	beq.n	8001f3a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f20:	4b93      	ldr	r3, [pc, #588]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 030c 	and.w	r3, r3, #12
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d112      	bne.n	8001f52 <HAL_RCC_OscConfig+0x62>
 8001f2c:	4b90      	ldr	r3, [pc, #576]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f38:	d10b      	bne.n	8001f52 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f3a:	4b8d      	ldr	r3, [pc, #564]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d06c      	beq.n	8002020 <HAL_RCC_OscConfig+0x130>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d168      	bne.n	8002020 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e275      	b.n	800243e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f5a:	d106      	bne.n	8001f6a <HAL_RCC_OscConfig+0x7a>
 8001f5c:	4b84      	ldr	r3, [pc, #528]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a83      	ldr	r2, [pc, #524]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 8001f62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	e02e      	b.n	8001fc8 <HAL_RCC_OscConfig+0xd8>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10c      	bne.n	8001f8c <HAL_RCC_OscConfig+0x9c>
 8001f72:	4b7f      	ldr	r3, [pc, #508]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a7e      	ldr	r2, [pc, #504]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 8001f78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	4b7c      	ldr	r3, [pc, #496]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a7b      	ldr	r2, [pc, #492]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 8001f84:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	e01d      	b.n	8001fc8 <HAL_RCC_OscConfig+0xd8>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f94:	d10c      	bne.n	8001fb0 <HAL_RCC_OscConfig+0xc0>
 8001f96:	4b76      	ldr	r3, [pc, #472]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a75      	ldr	r2, [pc, #468]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 8001f9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	4b73      	ldr	r3, [pc, #460]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a72      	ldr	r2, [pc, #456]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 8001fa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	e00b      	b.n	8001fc8 <HAL_RCC_OscConfig+0xd8>
 8001fb0:	4b6f      	ldr	r3, [pc, #444]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a6e      	ldr	r2, [pc, #440]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 8001fb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fba:	6013      	str	r3, [r2, #0]
 8001fbc:	4b6c      	ldr	r3, [pc, #432]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a6b      	ldr	r2, [pc, #428]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 8001fc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d013      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd0:	f7fe ffd0 	bl	8000f74 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd8:	f7fe ffcc 	bl	8000f74 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b64      	cmp	r3, #100	@ 0x64
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e229      	b.n	800243e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fea:	4b61      	ldr	r3, [pc, #388]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0f0      	beq.n	8001fd8 <HAL_RCC_OscConfig+0xe8>
 8001ff6:	e014      	b.n	8002022 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff8:	f7fe ffbc 	bl	8000f74 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002000:	f7fe ffb8 	bl	8000f74 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b64      	cmp	r3, #100	@ 0x64
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e215      	b.n	800243e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002012:	4b57      	ldr	r3, [pc, #348]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0x110>
 800201e:	e000      	b.n	8002022 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d069      	beq.n	8002102 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800202e:	4b50      	ldr	r3, [pc, #320]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 030c 	and.w	r3, r3, #12
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00b      	beq.n	8002052 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800203a:	4b4d      	ldr	r3, [pc, #308]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	2b08      	cmp	r3, #8
 8002044:	d11c      	bne.n	8002080 <HAL_RCC_OscConfig+0x190>
 8002046:	4b4a      	ldr	r3, [pc, #296]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d116      	bne.n	8002080 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002052:	4b47      	ldr	r3, [pc, #284]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d005      	beq.n	800206a <HAL_RCC_OscConfig+0x17a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d001      	beq.n	800206a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e1e9      	b.n	800243e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800206a:	4b41      	ldr	r3, [pc, #260]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	493d      	ldr	r1, [pc, #244]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 800207a:	4313      	orrs	r3, r2
 800207c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800207e:	e040      	b.n	8002102 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d023      	beq.n	80020d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002088:	4b39      	ldr	r3, [pc, #228]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a38      	ldr	r2, [pc, #224]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002094:	f7fe ff6e 	bl	8000f74 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800209c:	f7fe ff6a 	bl	8000f74 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e1c7      	b.n	800243e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ae:	4b30      	ldr	r3, [pc, #192]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	4929      	ldr	r1, [pc, #164]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	600b      	str	r3, [r1, #0]
 80020ce:	e018      	b.n	8002102 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020d0:	4b27      	ldr	r3, [pc, #156]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a26      	ldr	r2, [pc, #152]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 80020d6:	f023 0301 	bic.w	r3, r3, #1
 80020da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020dc:	f7fe ff4a 	bl	8000f74 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e4:	f7fe ff46 	bl	8000f74 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e1a3      	b.n	800243e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f0      	bne.n	80020e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b00      	cmp	r3, #0
 800210c:	d038      	beq.n	8002180 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d019      	beq.n	800214a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002116:	4b16      	ldr	r3, [pc, #88]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 8002118:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800211a:	4a15      	ldr	r2, [pc, #84]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002122:	f7fe ff27 	bl	8000f74 <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800212a:	f7fe ff23 	bl	8000f74 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e180      	b.n	800243e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800213c:	4b0c      	ldr	r3, [pc, #48]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 800213e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0f0      	beq.n	800212a <HAL_RCC_OscConfig+0x23a>
 8002148:	e01a      	b.n	8002180 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800214a:	4b09      	ldr	r3, [pc, #36]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 800214c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800214e:	4a08      	ldr	r2, [pc, #32]	@ (8002170 <HAL_RCC_OscConfig+0x280>)
 8002150:	f023 0301 	bic.w	r3, r3, #1
 8002154:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002156:	f7fe ff0d 	bl	8000f74 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800215c:	e00a      	b.n	8002174 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800215e:	f7fe ff09 	bl	8000f74 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d903      	bls.n	8002174 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e166      	b.n	800243e <HAL_RCC_OscConfig+0x54e>
 8002170:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002174:	4b92      	ldr	r3, [pc, #584]	@ (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 8002176:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1ee      	bne.n	800215e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 80a4 	beq.w	80022d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800218e:	4b8c      	ldr	r3, [pc, #560]	@ (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10d      	bne.n	80021b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800219a:	4b89      	ldr	r3, [pc, #548]	@ (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219e:	4a88      	ldr	r2, [pc, #544]	@ (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 80021a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80021a6:	4b86      	ldr	r3, [pc, #536]	@ (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ae:	60bb      	str	r3, [r7, #8]
 80021b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021b2:	2301      	movs	r3, #1
 80021b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021b6:	4b83      	ldr	r3, [pc, #524]	@ (80023c4 <HAL_RCC_OscConfig+0x4d4>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d118      	bne.n	80021f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80021c2:	4b80      	ldr	r3, [pc, #512]	@ (80023c4 <HAL_RCC_OscConfig+0x4d4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a7f      	ldr	r2, [pc, #508]	@ (80023c4 <HAL_RCC_OscConfig+0x4d4>)
 80021c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ce:	f7fe fed1 	bl	8000f74 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d6:	f7fe fecd 	bl	8000f74 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b64      	cmp	r3, #100	@ 0x64
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e12a      	b.n	800243e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021e8:	4b76      	ldr	r3, [pc, #472]	@ (80023c4 <HAL_RCC_OscConfig+0x4d4>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0f0      	beq.n	80021d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d106      	bne.n	800220a <HAL_RCC_OscConfig+0x31a>
 80021fc:	4b70      	ldr	r3, [pc, #448]	@ (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 80021fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002200:	4a6f      	ldr	r2, [pc, #444]	@ (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	6713      	str	r3, [r2, #112]	@ 0x70
 8002208:	e02d      	b.n	8002266 <HAL_RCC_OscConfig+0x376>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10c      	bne.n	800222c <HAL_RCC_OscConfig+0x33c>
 8002212:	4b6b      	ldr	r3, [pc, #428]	@ (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 8002214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002216:	4a6a      	ldr	r2, [pc, #424]	@ (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 8002218:	f023 0301 	bic.w	r3, r3, #1
 800221c:	6713      	str	r3, [r2, #112]	@ 0x70
 800221e:	4b68      	ldr	r3, [pc, #416]	@ (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 8002220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002222:	4a67      	ldr	r2, [pc, #412]	@ (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 8002224:	f023 0304 	bic.w	r3, r3, #4
 8002228:	6713      	str	r3, [r2, #112]	@ 0x70
 800222a:	e01c      	b.n	8002266 <HAL_RCC_OscConfig+0x376>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	2b05      	cmp	r3, #5
 8002232:	d10c      	bne.n	800224e <HAL_RCC_OscConfig+0x35e>
 8002234:	4b62      	ldr	r3, [pc, #392]	@ (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 8002236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002238:	4a61      	ldr	r2, [pc, #388]	@ (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 800223a:	f043 0304 	orr.w	r3, r3, #4
 800223e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002240:	4b5f      	ldr	r3, [pc, #380]	@ (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 8002242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002244:	4a5e      	ldr	r2, [pc, #376]	@ (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 8002246:	f043 0301 	orr.w	r3, r3, #1
 800224a:	6713      	str	r3, [r2, #112]	@ 0x70
 800224c:	e00b      	b.n	8002266 <HAL_RCC_OscConfig+0x376>
 800224e:	4b5c      	ldr	r3, [pc, #368]	@ (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 8002250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002252:	4a5b      	ldr	r2, [pc, #364]	@ (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 8002254:	f023 0301 	bic.w	r3, r3, #1
 8002258:	6713      	str	r3, [r2, #112]	@ 0x70
 800225a:	4b59      	ldr	r3, [pc, #356]	@ (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 800225c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800225e:	4a58      	ldr	r2, [pc, #352]	@ (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 8002260:	f023 0304 	bic.w	r3, r3, #4
 8002264:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d015      	beq.n	800229a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800226e:	f7fe fe81 	bl	8000f74 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002274:	e00a      	b.n	800228c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002276:	f7fe fe7d 	bl	8000f74 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002284:	4293      	cmp	r3, r2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e0d8      	b.n	800243e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800228c:	4b4c      	ldr	r3, [pc, #304]	@ (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 800228e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0ee      	beq.n	8002276 <HAL_RCC_OscConfig+0x386>
 8002298:	e014      	b.n	80022c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800229a:	f7fe fe6b 	bl	8000f74 <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a0:	e00a      	b.n	80022b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a2:	f7fe fe67 	bl	8000f74 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e0c2      	b.n	800243e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b8:	4b41      	ldr	r3, [pc, #260]	@ (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 80022ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1ee      	bne.n	80022a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022c4:	7dfb      	ldrb	r3, [r7, #23]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d105      	bne.n	80022d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ca:	4b3d      	ldr	r3, [pc, #244]	@ (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ce:	4a3c      	ldr	r2, [pc, #240]	@ (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 80022d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022d4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 80ae 	beq.w	800243c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022e0:	4b37      	ldr	r3, [pc, #220]	@ (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 030c 	and.w	r3, r3, #12
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d06d      	beq.n	80023c8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d14b      	bne.n	800238c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f4:	4b32      	ldr	r3, [pc, #200]	@ (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a31      	ldr	r2, [pc, #196]	@ (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 80022fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002300:	f7fe fe38 	bl	8000f74 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002308:	f7fe fe34 	bl	8000f74 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e091      	b.n	800243e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800231a:	4b29      	ldr	r3, [pc, #164]	@ (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f0      	bne.n	8002308 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69da      	ldr	r2, [r3, #28]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	431a      	orrs	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002334:	019b      	lsls	r3, r3, #6
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800233c:	085b      	lsrs	r3, r3, #1
 800233e:	3b01      	subs	r3, #1
 8002340:	041b      	lsls	r3, r3, #16
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002348:	061b      	lsls	r3, r3, #24
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002350:	071b      	lsls	r3, r3, #28
 8002352:	491b      	ldr	r1, [pc, #108]	@ (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 8002354:	4313      	orrs	r3, r2
 8002356:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002358:	4b19      	ldr	r3, [pc, #100]	@ (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a18      	ldr	r2, [pc, #96]	@ (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 800235e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002364:	f7fe fe06 	bl	8000f74 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800236c:	f7fe fe02 	bl	8000f74 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e05f      	b.n	800243e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237e:	4b10      	ldr	r3, [pc, #64]	@ (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f0      	beq.n	800236c <HAL_RCC_OscConfig+0x47c>
 800238a:	e057      	b.n	800243c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800238c:	4b0c      	ldr	r3, [pc, #48]	@ (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a0b      	ldr	r2, [pc, #44]	@ (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 8002392:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002398:	f7fe fdec 	bl	8000f74 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a0:	f7fe fde8 	bl	8000f74 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e045      	b.n	800243e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023b2:	4b03      	ldr	r3, [pc, #12]	@ (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f0      	bne.n	80023a0 <HAL_RCC_OscConfig+0x4b0>
 80023be:	e03d      	b.n	800243c <HAL_RCC_OscConfig+0x54c>
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80023c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002448 <HAL_RCC_OscConfig+0x558>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d030      	beq.n	8002438 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d129      	bne.n	8002438 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d122      	bne.n	8002438 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80023f8:	4013      	ands	r3, r2
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80023fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002400:	4293      	cmp	r3, r2
 8002402:	d119      	bne.n	8002438 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240e:	085b      	lsrs	r3, r3, #1
 8002410:	3b01      	subs	r3, #1
 8002412:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002414:	429a      	cmp	r2, r3
 8002416:	d10f      	bne.n	8002438 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002422:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002424:	429a      	cmp	r2, r3
 8002426:	d107      	bne.n	8002438 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002432:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002434:	429a      	cmp	r2, r3
 8002436:	d001      	beq.n	800243c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e000      	b.n	800243e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40023800 	.word	0x40023800

0800244c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e0d0      	b.n	8002606 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002464:	4b6a      	ldr	r3, [pc, #424]	@ (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 030f 	and.w	r3, r3, #15
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d910      	bls.n	8002494 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002472:	4b67      	ldr	r3, [pc, #412]	@ (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f023 020f 	bic.w	r2, r3, #15
 800247a:	4965      	ldr	r1, [pc, #404]	@ (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	4313      	orrs	r3, r2
 8002480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002482:	4b63      	ldr	r3, [pc, #396]	@ (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	429a      	cmp	r2, r3
 800248e:	d001      	beq.n	8002494 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e0b8      	b.n	8002606 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d020      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d005      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024ac:	4b59      	ldr	r3, [pc, #356]	@ (8002614 <HAL_RCC_ClockConfig+0x1c8>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	4a58      	ldr	r2, [pc, #352]	@ (8002614 <HAL_RCC_ClockConfig+0x1c8>)
 80024b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80024b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0308 	and.w	r3, r3, #8
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024c4:	4b53      	ldr	r3, [pc, #332]	@ (8002614 <HAL_RCC_ClockConfig+0x1c8>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	4a52      	ldr	r2, [pc, #328]	@ (8002614 <HAL_RCC_ClockConfig+0x1c8>)
 80024ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80024ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d0:	4b50      	ldr	r3, [pc, #320]	@ (8002614 <HAL_RCC_ClockConfig+0x1c8>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	494d      	ldr	r1, [pc, #308]	@ (8002614 <HAL_RCC_ClockConfig+0x1c8>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d040      	beq.n	8002570 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d107      	bne.n	8002506 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f6:	4b47      	ldr	r3, [pc, #284]	@ (8002614 <HAL_RCC_ClockConfig+0x1c8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d115      	bne.n	800252e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e07f      	b.n	8002606 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b02      	cmp	r3, #2
 800250c:	d107      	bne.n	800251e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800250e:	4b41      	ldr	r3, [pc, #260]	@ (8002614 <HAL_RCC_ClockConfig+0x1c8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d109      	bne.n	800252e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e073      	b.n	8002606 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251e:	4b3d      	ldr	r3, [pc, #244]	@ (8002614 <HAL_RCC_ClockConfig+0x1c8>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e06b      	b.n	8002606 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800252e:	4b39      	ldr	r3, [pc, #228]	@ (8002614 <HAL_RCC_ClockConfig+0x1c8>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f023 0203 	bic.w	r2, r3, #3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	4936      	ldr	r1, [pc, #216]	@ (8002614 <HAL_RCC_ClockConfig+0x1c8>)
 800253c:	4313      	orrs	r3, r2
 800253e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002540:	f7fe fd18 	bl	8000f74 <HAL_GetTick>
 8002544:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002546:	e00a      	b.n	800255e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002548:	f7fe fd14 	bl	8000f74 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002556:	4293      	cmp	r3, r2
 8002558:	d901      	bls.n	800255e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e053      	b.n	8002606 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255e:	4b2d      	ldr	r3, [pc, #180]	@ (8002614 <HAL_RCC_ClockConfig+0x1c8>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 020c 	and.w	r2, r3, #12
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	429a      	cmp	r2, r3
 800256e:	d1eb      	bne.n	8002548 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002570:	4b27      	ldr	r3, [pc, #156]	@ (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d210      	bcs.n	80025a0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257e:	4b24      	ldr	r3, [pc, #144]	@ (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f023 020f 	bic.w	r2, r3, #15
 8002586:	4922      	ldr	r1, [pc, #136]	@ (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	4313      	orrs	r3, r2
 800258c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800258e:	4b20      	ldr	r3, [pc, #128]	@ (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	429a      	cmp	r2, r3
 800259a:	d001      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e032      	b.n	8002606 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d008      	beq.n	80025be <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025ac:	4b19      	ldr	r3, [pc, #100]	@ (8002614 <HAL_RCC_ClockConfig+0x1c8>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	4916      	ldr	r1, [pc, #88]	@ (8002614 <HAL_RCC_ClockConfig+0x1c8>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d009      	beq.n	80025de <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025ca:	4b12      	ldr	r3, [pc, #72]	@ (8002614 <HAL_RCC_ClockConfig+0x1c8>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	490e      	ldr	r1, [pc, #56]	@ (8002614 <HAL_RCC_ClockConfig+0x1c8>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025de:	f000 f821 	bl	8002624 <HAL_RCC_GetSysClockFreq>
 80025e2:	4602      	mov	r2, r0
 80025e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002614 <HAL_RCC_ClockConfig+0x1c8>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	091b      	lsrs	r3, r3, #4
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	490a      	ldr	r1, [pc, #40]	@ (8002618 <HAL_RCC_ClockConfig+0x1cc>)
 80025f0:	5ccb      	ldrb	r3, [r1, r3]
 80025f2:	fa22 f303 	lsr.w	r3, r2, r3
 80025f6:	4a09      	ldr	r2, [pc, #36]	@ (800261c <HAL_RCC_ClockConfig+0x1d0>)
 80025f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025fa:	4b09      	ldr	r3, [pc, #36]	@ (8002620 <HAL_RCC_ClockConfig+0x1d4>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe fc74 	bl	8000eec <HAL_InitTick>

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40023c00 	.word	0x40023c00
 8002614:	40023800 	.word	0x40023800
 8002618:	08004144 	.word	0x08004144
 800261c:	20000000 	.word	0x20000000
 8002620:	20000004 	.word	0x20000004

08002624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002628:	b094      	sub	sp, #80	@ 0x50
 800262a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800262c:	2300      	movs	r3, #0
 800262e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002630:	2300      	movs	r3, #0
 8002632:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002634:	2300      	movs	r3, #0
 8002636:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002638:	2300      	movs	r3, #0
 800263a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800263c:	4b79      	ldr	r3, [pc, #484]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x200>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 030c 	and.w	r3, r3, #12
 8002644:	2b08      	cmp	r3, #8
 8002646:	d00d      	beq.n	8002664 <HAL_RCC_GetSysClockFreq+0x40>
 8002648:	2b08      	cmp	r3, #8
 800264a:	f200 80e1 	bhi.w	8002810 <HAL_RCC_GetSysClockFreq+0x1ec>
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <HAL_RCC_GetSysClockFreq+0x34>
 8002652:	2b04      	cmp	r3, #4
 8002654:	d003      	beq.n	800265e <HAL_RCC_GetSysClockFreq+0x3a>
 8002656:	e0db      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002658:	4b73      	ldr	r3, [pc, #460]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x204>)
 800265a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800265c:	e0db      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800265e:	4b73      	ldr	r3, [pc, #460]	@ (800282c <HAL_RCC_GetSysClockFreq+0x208>)
 8002660:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002662:	e0d8      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002664:	4b6f      	ldr	r3, [pc, #444]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x200>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800266c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800266e:	4b6d      	ldr	r3, [pc, #436]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x200>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d063      	beq.n	8002742 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800267a:	4b6a      	ldr	r3, [pc, #424]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x200>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	099b      	lsrs	r3, r3, #6
 8002680:	2200      	movs	r2, #0
 8002682:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002684:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800268c:	633b      	str	r3, [r7, #48]	@ 0x30
 800268e:	2300      	movs	r3, #0
 8002690:	637b      	str	r3, [r7, #52]	@ 0x34
 8002692:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002696:	4622      	mov	r2, r4
 8002698:	462b      	mov	r3, r5
 800269a:	f04f 0000 	mov.w	r0, #0
 800269e:	f04f 0100 	mov.w	r1, #0
 80026a2:	0159      	lsls	r1, r3, #5
 80026a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026a8:	0150      	lsls	r0, r2, #5
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4621      	mov	r1, r4
 80026b0:	1a51      	subs	r1, r2, r1
 80026b2:	6139      	str	r1, [r7, #16]
 80026b4:	4629      	mov	r1, r5
 80026b6:	eb63 0301 	sbc.w	r3, r3, r1
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	f04f 0300 	mov.w	r3, #0
 80026c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026c8:	4659      	mov	r1, fp
 80026ca:	018b      	lsls	r3, r1, #6
 80026cc:	4651      	mov	r1, sl
 80026ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026d2:	4651      	mov	r1, sl
 80026d4:	018a      	lsls	r2, r1, #6
 80026d6:	4651      	mov	r1, sl
 80026d8:	ebb2 0801 	subs.w	r8, r2, r1
 80026dc:	4659      	mov	r1, fp
 80026de:	eb63 0901 	sbc.w	r9, r3, r1
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	f04f 0300 	mov.w	r3, #0
 80026ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026f6:	4690      	mov	r8, r2
 80026f8:	4699      	mov	r9, r3
 80026fa:	4623      	mov	r3, r4
 80026fc:	eb18 0303 	adds.w	r3, r8, r3
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	462b      	mov	r3, r5
 8002704:	eb49 0303 	adc.w	r3, r9, r3
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	f04f 0300 	mov.w	r3, #0
 8002712:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002716:	4629      	mov	r1, r5
 8002718:	024b      	lsls	r3, r1, #9
 800271a:	4621      	mov	r1, r4
 800271c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002720:	4621      	mov	r1, r4
 8002722:	024a      	lsls	r2, r1, #9
 8002724:	4610      	mov	r0, r2
 8002726:	4619      	mov	r1, r3
 8002728:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800272a:	2200      	movs	r2, #0
 800272c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800272e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002730:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002734:	f7fd fd80 	bl	8000238 <__aeabi_uldivmod>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	4613      	mov	r3, r2
 800273e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002740:	e058      	b.n	80027f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002742:	4b38      	ldr	r3, [pc, #224]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x200>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	099b      	lsrs	r3, r3, #6
 8002748:	2200      	movs	r2, #0
 800274a:	4618      	mov	r0, r3
 800274c:	4611      	mov	r1, r2
 800274e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002752:	623b      	str	r3, [r7, #32]
 8002754:	2300      	movs	r3, #0
 8002756:	627b      	str	r3, [r7, #36]	@ 0x24
 8002758:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800275c:	4642      	mov	r2, r8
 800275e:	464b      	mov	r3, r9
 8002760:	f04f 0000 	mov.w	r0, #0
 8002764:	f04f 0100 	mov.w	r1, #0
 8002768:	0159      	lsls	r1, r3, #5
 800276a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800276e:	0150      	lsls	r0, r2, #5
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	4641      	mov	r1, r8
 8002776:	ebb2 0a01 	subs.w	sl, r2, r1
 800277a:	4649      	mov	r1, r9
 800277c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800278c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002790:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002794:	ebb2 040a 	subs.w	r4, r2, sl
 8002798:	eb63 050b 	sbc.w	r5, r3, fp
 800279c:	f04f 0200 	mov.w	r2, #0
 80027a0:	f04f 0300 	mov.w	r3, #0
 80027a4:	00eb      	lsls	r3, r5, #3
 80027a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027aa:	00e2      	lsls	r2, r4, #3
 80027ac:	4614      	mov	r4, r2
 80027ae:	461d      	mov	r5, r3
 80027b0:	4643      	mov	r3, r8
 80027b2:	18e3      	adds	r3, r4, r3
 80027b4:	603b      	str	r3, [r7, #0]
 80027b6:	464b      	mov	r3, r9
 80027b8:	eb45 0303 	adc.w	r3, r5, r3
 80027bc:	607b      	str	r3, [r7, #4]
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027ca:	4629      	mov	r1, r5
 80027cc:	028b      	lsls	r3, r1, #10
 80027ce:	4621      	mov	r1, r4
 80027d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027d4:	4621      	mov	r1, r4
 80027d6:	028a      	lsls	r2, r1, #10
 80027d8:	4610      	mov	r0, r2
 80027da:	4619      	mov	r1, r3
 80027dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027de:	2200      	movs	r2, #0
 80027e0:	61bb      	str	r3, [r7, #24]
 80027e2:	61fa      	str	r2, [r7, #28]
 80027e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027e8:	f7fd fd26 	bl	8000238 <__aeabi_uldivmod>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	4613      	mov	r3, r2
 80027f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80027f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x200>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	0c1b      	lsrs	r3, r3, #16
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	3301      	adds	r3, #1
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002804:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002806:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002808:	fbb2 f3f3 	udiv	r3, r2, r3
 800280c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800280e:	e002      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002810:	4b05      	ldr	r3, [pc, #20]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x204>)
 8002812:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002816:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002818:	4618      	mov	r0, r3
 800281a:	3750      	adds	r7, #80	@ 0x50
 800281c:	46bd      	mov	sp, r7
 800281e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002822:	bf00      	nop
 8002824:	40023800 	.word	0x40023800
 8002828:	00f42400 	.word	0x00f42400
 800282c:	007a1200 	.word	0x007a1200

08002830 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b088      	sub	sp, #32
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800283c:	2300      	movs	r3, #0
 800283e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002848:	2300      	movs	r3, #0
 800284a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b00      	cmp	r3, #0
 8002856:	d012      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002858:	4b69      	ldr	r3, [pc, #420]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	4a68      	ldr	r2, [pc, #416]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800285e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002862:	6093      	str	r3, [r2, #8]
 8002864:	4b66      	ldr	r3, [pc, #408]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800286c:	4964      	ldr	r1, [pc, #400]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800286e:	4313      	orrs	r3, r2
 8002870:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800287a:	2301      	movs	r3, #1
 800287c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d017      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800288a:	4b5d      	ldr	r3, [pc, #372]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800288c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002890:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002898:	4959      	ldr	r1, [pc, #356]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800289a:	4313      	orrs	r3, r2
 800289c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80028a8:	d101      	bne.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80028aa:	2301      	movs	r3, #1
 80028ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80028b6:	2301      	movs	r3, #1
 80028b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d017      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028c6:	4b4e      	ldr	r3, [pc, #312]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028cc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d4:	494a      	ldr	r1, [pc, #296]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028e4:	d101      	bne.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80028e6:	2301      	movs	r3, #1
 80028e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80028f2:	2301      	movs	r3, #1
 80028f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002902:	2301      	movs	r3, #1
 8002904:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0320 	and.w	r3, r3, #32
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 808b 	beq.w	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002914:	4b3a      	ldr	r3, [pc, #232]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002918:	4a39      	ldr	r2, [pc, #228]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800291a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800291e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002920:	4b37      	ldr	r3, [pc, #220]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002924:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800292c:	4b35      	ldr	r3, [pc, #212]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a34      	ldr	r2, [pc, #208]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002932:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002936:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002938:	f7fe fb1c 	bl	8000f74 <HAL_GetTick>
 800293c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002940:	f7fe fb18 	bl	8000f74 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b64      	cmp	r3, #100	@ 0x64
 800294c:	d901      	bls.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e38f      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002952:	4b2c      	ldr	r3, [pc, #176]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800295e:	4b28      	ldr	r3, [pc, #160]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002962:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002966:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d035      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002972:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	429a      	cmp	r2, r3
 800297a:	d02e      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800297c:	4b20      	ldr	r3, [pc, #128]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800297e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002980:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002984:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002986:	4b1e      	ldr	r3, [pc, #120]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800298a:	4a1d      	ldr	r2, [pc, #116]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800298c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002990:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002992:	4b1b      	ldr	r3, [pc, #108]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002996:	4a1a      	ldr	r2, [pc, #104]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002998:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800299c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800299e:	4a18      	ldr	r2, [pc, #96]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029a4:	4b16      	ldr	r3, [pc, #88]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d114      	bne.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b0:	f7fe fae0 	bl	8000f74 <HAL_GetTick>
 80029b4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b6:	e00a      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029b8:	f7fe fadc 	bl	8000f74 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e351      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0ee      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80029e6:	d111      	bne.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80029e8:	4b05      	ldr	r3, [pc, #20]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80029f4:	4b04      	ldr	r3, [pc, #16]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80029f6:	400b      	ands	r3, r1
 80029f8:	4901      	ldr	r1, [pc, #4]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	608b      	str	r3, [r1, #8]
 80029fe:	e00b      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002a00:	40023800 	.word	0x40023800
 8002a04:	40007000 	.word	0x40007000
 8002a08:	0ffffcff 	.word	0x0ffffcff
 8002a0c:	4bac      	ldr	r3, [pc, #688]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	4aab      	ldr	r2, [pc, #684]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a12:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002a16:	6093      	str	r3, [r2, #8]
 8002a18:	4ba9      	ldr	r3, [pc, #676]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a1a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a24:	49a6      	ldr	r1, [pc, #664]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0310 	and.w	r3, r3, #16
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d010      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a36:	4ba2      	ldr	r3, [pc, #648]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a3c:	4aa0      	ldr	r2, [pc, #640]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a42:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a46:	4b9e      	ldr	r3, [pc, #632]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a48:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a50:	499b      	ldr	r1, [pc, #620]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00a      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a64:	4b96      	ldr	r3, [pc, #600]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a6a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a72:	4993      	ldr	r1, [pc, #588]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00a      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a86:	4b8e      	ldr	r3, [pc, #568]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a8c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a94:	498a      	ldr	r1, [pc, #552]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00a      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002aa8:	4b85      	ldr	r3, [pc, #532]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ab6:	4982      	ldr	r1, [pc, #520]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00a      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002aca:	4b7d      	ldr	r3, [pc, #500]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ad0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad8:	4979      	ldr	r1, [pc, #484]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00a      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002aec:	4b74      	ldr	r3, [pc, #464]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002af2:	f023 0203 	bic.w	r2, r3, #3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afa:	4971      	ldr	r1, [pc, #452]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b0e:	4b6c      	ldr	r3, [pc, #432]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b14:	f023 020c 	bic.w	r2, r3, #12
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b1c:	4968      	ldr	r1, [pc, #416]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00a      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b30:	4b63      	ldr	r3, [pc, #396]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b36:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b3e:	4960      	ldr	r1, [pc, #384]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00a      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b52:	4b5b      	ldr	r3, [pc, #364]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b58:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b60:	4957      	ldr	r1, [pc, #348]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00a      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b74:	4b52      	ldr	r3, [pc, #328]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b7a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b82:	494f      	ldr	r1, [pc, #316]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00a      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002b96:	4b4a      	ldr	r3, [pc, #296]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b9c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba4:	4946      	ldr	r1, [pc, #280]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00a      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002bb8:	4b41      	ldr	r3, [pc, #260]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bbe:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc6:	493e      	ldr	r1, [pc, #248]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00a      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002bda:	4b39      	ldr	r3, [pc, #228]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002be0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002be8:	4935      	ldr	r1, [pc, #212]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00a      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002bfc:	4b30      	ldr	r3, [pc, #192]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c02:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c0a:	492d      	ldr	r1, [pc, #180]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d011      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c1e:	4b28      	ldr	r3, [pc, #160]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c24:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c2c:	4924      	ldr	r1, [pc, #144]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c3c:	d101      	bne.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00a      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c5e:	4b18      	ldr	r3, [pc, #96]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c64:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c6c:	4914      	ldr	r1, [pc, #80]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00b      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c80:	4b0f      	ldr	r3, [pc, #60]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c86:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c90:	490b      	ldr	r1, [pc, #44]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00f      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002ca4:	4b06      	ldr	r3, [pc, #24]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002caa:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cb4:	4902      	ldr	r1, [pc, #8]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002cbc:	e002      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002cbe:	bf00      	nop
 8002cc0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00b      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002cd0:	4b8a      	ldr	r3, [pc, #552]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cd6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ce0:	4986      	ldr	r1, [pc, #536]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00b      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002cf4:	4b81      	ldr	r3, [pc, #516]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cfa:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d04:	497d      	ldr	r1, [pc, #500]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d006      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 80d6 	beq.w	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d20:	4b76      	ldr	r3, [pc, #472]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a75      	ldr	r2, [pc, #468]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d26:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002d2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d2c:	f7fe f922 	bl	8000f74 <HAL_GetTick>
 8002d30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d32:	e008      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d34:	f7fe f91e 	bl	8000f74 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b64      	cmp	r3, #100	@ 0x64
 8002d40:	d901      	bls.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e195      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d46:	4b6d      	ldr	r3, [pc, #436]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f0      	bne.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d021      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d11d      	bne.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d66:	4b65      	ldr	r3, [pc, #404]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d6c:	0c1b      	lsrs	r3, r3, #16
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d74:	4b61      	ldr	r3, [pc, #388]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d7a:	0e1b      	lsrs	r3, r3, #24
 8002d7c:	f003 030f 	and.w	r3, r3, #15
 8002d80:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	019a      	lsls	r2, r3, #6
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	041b      	lsls	r3, r3, #16
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	061b      	lsls	r3, r3, #24
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	071b      	lsls	r3, r3, #28
 8002d9a:	4958      	ldr	r1, [pc, #352]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d004      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002db2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002db6:	d00a      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d02e      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dcc:	d129      	bne.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002dce:	4b4b      	ldr	r3, [pc, #300]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dd4:	0c1b      	lsrs	r3, r3, #16
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ddc:	4b47      	ldr	r3, [pc, #284]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002de2:	0f1b      	lsrs	r3, r3, #28
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	019a      	lsls	r2, r3, #6
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	041b      	lsls	r3, r3, #16
 8002df4:	431a      	orrs	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	061b      	lsls	r3, r3, #24
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	071b      	lsls	r3, r3, #28
 8002e02:	493e      	ldr	r1, [pc, #248]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002e0a:	4b3c      	ldr	r3, [pc, #240]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e10:	f023 021f 	bic.w	r2, r3, #31
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	4938      	ldr	r1, [pc, #224]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d01d      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e2e:	4b33      	ldr	r3, [pc, #204]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e34:	0e1b      	lsrs	r3, r3, #24
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e3c:	4b2f      	ldr	r3, [pc, #188]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e42:	0f1b      	lsrs	r3, r3, #28
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	019a      	lsls	r2, r3, #6
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	041b      	lsls	r3, r3, #16
 8002e56:	431a      	orrs	r2, r3
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	061b      	lsls	r3, r3, #24
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	071b      	lsls	r3, r3, #28
 8002e62:	4926      	ldr	r1, [pc, #152]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d011      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	019a      	lsls	r2, r3, #6
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	041b      	lsls	r3, r3, #16
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	061b      	lsls	r3, r3, #24
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	071b      	lsls	r3, r3, #28
 8002e92:	491a      	ldr	r1, [pc, #104]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e9a:	4b18      	ldr	r3, [pc, #96]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a17      	ldr	r2, [pc, #92]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ea0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ea4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ea6:	f7fe f865 	bl	8000f74 <HAL_GetTick>
 8002eaa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002eae:	f7fe f861 	bl	8000f74 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b64      	cmp	r3, #100	@ 0x64
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e0d8      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0f0      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	f040 80ce 	bne.w	8003070 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002ed4:	4b09      	ldr	r3, [pc, #36]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a08      	ldr	r2, [pc, #32]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ede:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ee0:	f7fe f848 	bl	8000f74 <HAL_GetTick>
 8002ee4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ee6:	e00b      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ee8:	f7fe f844 	bl	8000f74 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b64      	cmp	r3, #100	@ 0x64
 8002ef4:	d904      	bls.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e0bb      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002efa:	bf00      	nop
 8002efc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f00:	4b5e      	ldr	r3, [pc, #376]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f0c:	d0ec      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d009      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d02e      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d12a      	bne.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f36:	4b51      	ldr	r3, [pc, #324]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f3c:	0c1b      	lsrs	r3, r3, #16
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f44:	4b4d      	ldr	r3, [pc, #308]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f4a:	0f1b      	lsrs	r3, r3, #28
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	019a      	lsls	r2, r3, #6
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	041b      	lsls	r3, r3, #16
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	061b      	lsls	r3, r3, #24
 8002f64:	431a      	orrs	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	071b      	lsls	r3, r3, #28
 8002f6a:	4944      	ldr	r1, [pc, #272]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f72:	4b42      	ldr	r3, [pc, #264]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f78:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f80:	3b01      	subs	r3, #1
 8002f82:	021b      	lsls	r3, r3, #8
 8002f84:	493d      	ldr	r1, [pc, #244]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d022      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fa0:	d11d      	bne.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002fa2:	4b36      	ldr	r3, [pc, #216]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa8:	0e1b      	lsrs	r3, r3, #24
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002fb0:	4b32      	ldr	r3, [pc, #200]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb6:	0f1b      	lsrs	r3, r3, #28
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	019a      	lsls	r2, r3, #6
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	041b      	lsls	r3, r3, #16
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	061b      	lsls	r3, r3, #24
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	071b      	lsls	r3, r3, #28
 8002fd6:	4929      	ldr	r1, [pc, #164]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0308 	and.w	r3, r3, #8
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d028      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002fea:	4b24      	ldr	r3, [pc, #144]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff0:	0e1b      	lsrs	r3, r3, #24
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ff8:	4b20      	ldr	r3, [pc, #128]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ffe:	0c1b      	lsrs	r3, r3, #16
 8003000:	f003 0303 	and.w	r3, r3, #3
 8003004:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	019a      	lsls	r2, r3, #6
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	041b      	lsls	r3, r3, #16
 8003010:	431a      	orrs	r2, r3
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	061b      	lsls	r3, r3, #24
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	071b      	lsls	r3, r3, #28
 800301e:	4917      	ldr	r1, [pc, #92]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003020:	4313      	orrs	r3, r2
 8003022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003026:	4b15      	ldr	r3, [pc, #84]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003028:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800302c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003034:	4911      	ldr	r1, [pc, #68]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003036:	4313      	orrs	r3, r2
 8003038:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800303c:	4b0f      	ldr	r3, [pc, #60]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a0e      	ldr	r2, [pc, #56]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003042:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003046:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003048:	f7fd ff94 	bl	8000f74 <HAL_GetTick>
 800304c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800304e:	e008      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003050:	f7fd ff90 	bl	8000f74 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b64      	cmp	r3, #100	@ 0x64
 800305c:	d901      	bls.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e007      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003062:	4b06      	ldr	r3, [pc, #24]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800306a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800306e:	d1ef      	bne.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3720      	adds	r7, #32
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	40023800 	.word	0x40023800

08003080 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e049      	b.n	8003126 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d106      	bne.n	80030ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7fd fe52 	bl	8000d50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3304      	adds	r3, #4
 80030bc:	4619      	mov	r1, r3
 80030be:	4610      	mov	r0, r2
 80030c0:	f000 fcc0 	bl	8003a44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b082      	sub	sp, #8
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e049      	b.n	80031d4 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d106      	bne.n	800315a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f841 	bl	80031dc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2202      	movs	r2, #2
 800315e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	3304      	adds	r3, #4
 800316a:	4619      	mov	r1, r3
 800316c:	4610      	mov	r0, r2
 800316e:	f000 fc69 	bl	8003a44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031fa:	2300      	movs	r3, #0
 80031fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d104      	bne.n	800320e <HAL_TIM_IC_Start_IT+0x1e>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800320a:	b2db      	uxtb	r3, r3
 800320c:	e023      	b.n	8003256 <HAL_TIM_IC_Start_IT+0x66>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b04      	cmp	r3, #4
 8003212:	d104      	bne.n	800321e <HAL_TIM_IC_Start_IT+0x2e>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800321a:	b2db      	uxtb	r3, r3
 800321c:	e01b      	b.n	8003256 <HAL_TIM_IC_Start_IT+0x66>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2b08      	cmp	r3, #8
 8003222:	d104      	bne.n	800322e <HAL_TIM_IC_Start_IT+0x3e>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800322a:	b2db      	uxtb	r3, r3
 800322c:	e013      	b.n	8003256 <HAL_TIM_IC_Start_IT+0x66>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b0c      	cmp	r3, #12
 8003232:	d104      	bne.n	800323e <HAL_TIM_IC_Start_IT+0x4e>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800323a:	b2db      	uxtb	r3, r3
 800323c:	e00b      	b.n	8003256 <HAL_TIM_IC_Start_IT+0x66>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b10      	cmp	r3, #16
 8003242:	d104      	bne.n	800324e <HAL_TIM_IC_Start_IT+0x5e>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800324a:	b2db      	uxtb	r3, r3
 800324c:	e003      	b.n	8003256 <HAL_TIM_IC_Start_IT+0x66>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003254:	b2db      	uxtb	r3, r3
 8003256:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d104      	bne.n	8003268 <HAL_TIM_IC_Start_IT+0x78>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003264:	b2db      	uxtb	r3, r3
 8003266:	e013      	b.n	8003290 <HAL_TIM_IC_Start_IT+0xa0>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	2b04      	cmp	r3, #4
 800326c:	d104      	bne.n	8003278 <HAL_TIM_IC_Start_IT+0x88>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003274:	b2db      	uxtb	r3, r3
 8003276:	e00b      	b.n	8003290 <HAL_TIM_IC_Start_IT+0xa0>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	2b08      	cmp	r3, #8
 800327c:	d104      	bne.n	8003288 <HAL_TIM_IC_Start_IT+0x98>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003284:	b2db      	uxtb	r3, r3
 8003286:	e003      	b.n	8003290 <HAL_TIM_IC_Start_IT+0xa0>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800328e:	b2db      	uxtb	r3, r3
 8003290:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003292:	7bbb      	ldrb	r3, [r7, #14]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d102      	bne.n	800329e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003298:	7b7b      	ldrb	r3, [r7, #13]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d001      	beq.n	80032a2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e0e2      	b.n	8003468 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d104      	bne.n	80032b2 <HAL_TIM_IC_Start_IT+0xc2>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2202      	movs	r2, #2
 80032ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032b0:	e023      	b.n	80032fa <HAL_TIM_IC_Start_IT+0x10a>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	d104      	bne.n	80032c2 <HAL_TIM_IC_Start_IT+0xd2>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032c0:	e01b      	b.n	80032fa <HAL_TIM_IC_Start_IT+0x10a>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d104      	bne.n	80032d2 <HAL_TIM_IC_Start_IT+0xe2>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032d0:	e013      	b.n	80032fa <HAL_TIM_IC_Start_IT+0x10a>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	2b0c      	cmp	r3, #12
 80032d6:	d104      	bne.n	80032e2 <HAL_TIM_IC_Start_IT+0xf2>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2202      	movs	r2, #2
 80032dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80032e0:	e00b      	b.n	80032fa <HAL_TIM_IC_Start_IT+0x10a>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	2b10      	cmp	r3, #16
 80032e6:	d104      	bne.n	80032f2 <HAL_TIM_IC_Start_IT+0x102>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032f0:	e003      	b.n	80032fa <HAL_TIM_IC_Start_IT+0x10a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2202      	movs	r2, #2
 80032f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d104      	bne.n	800330a <HAL_TIM_IC_Start_IT+0x11a>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003308:	e013      	b.n	8003332 <HAL_TIM_IC_Start_IT+0x142>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b04      	cmp	r3, #4
 800330e:	d104      	bne.n	800331a <HAL_TIM_IC_Start_IT+0x12a>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003318:	e00b      	b.n	8003332 <HAL_TIM_IC_Start_IT+0x142>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2b08      	cmp	r3, #8
 800331e:	d104      	bne.n	800332a <HAL_TIM_IC_Start_IT+0x13a>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2202      	movs	r2, #2
 8003324:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003328:	e003      	b.n	8003332 <HAL_TIM_IC_Start_IT+0x142>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2202      	movs	r2, #2
 800332e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	2b0c      	cmp	r3, #12
 8003336:	d841      	bhi.n	80033bc <HAL_TIM_IC_Start_IT+0x1cc>
 8003338:	a201      	add	r2, pc, #4	@ (adr r2, 8003340 <HAL_TIM_IC_Start_IT+0x150>)
 800333a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333e:	bf00      	nop
 8003340:	08003375 	.word	0x08003375
 8003344:	080033bd 	.word	0x080033bd
 8003348:	080033bd 	.word	0x080033bd
 800334c:	080033bd 	.word	0x080033bd
 8003350:	08003387 	.word	0x08003387
 8003354:	080033bd 	.word	0x080033bd
 8003358:	080033bd 	.word	0x080033bd
 800335c:	080033bd 	.word	0x080033bd
 8003360:	08003399 	.word	0x08003399
 8003364:	080033bd 	.word	0x080033bd
 8003368:	080033bd 	.word	0x080033bd
 800336c:	080033bd 	.word	0x080033bd
 8003370:	080033ab 	.word	0x080033ab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0202 	orr.w	r2, r2, #2
 8003382:	60da      	str	r2, [r3, #12]
      break;
 8003384:	e01d      	b.n	80033c2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f042 0204 	orr.w	r2, r2, #4
 8003394:	60da      	str	r2, [r3, #12]
      break;
 8003396:	e014      	b.n	80033c2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0208 	orr.w	r2, r2, #8
 80033a6:	60da      	str	r2, [r3, #12]
      break;
 80033a8:	e00b      	b.n	80033c2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f042 0210 	orr.w	r2, r2, #16
 80033b8:	60da      	str	r2, [r3, #12]
      break;
 80033ba:	e002      	b.n	80033c2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	73fb      	strb	r3, [r7, #15]
      break;
 80033c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d14e      	bne.n	8003466 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2201      	movs	r2, #1
 80033ce:	6839      	ldr	r1, [r7, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 fda7 	bl	8003f24 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a25      	ldr	r2, [pc, #148]	@ (8003470 <HAL_TIM_IC_Start_IT+0x280>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d022      	beq.n	8003426 <HAL_TIM_IC_Start_IT+0x236>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033e8:	d01d      	beq.n	8003426 <HAL_TIM_IC_Start_IT+0x236>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a21      	ldr	r2, [pc, #132]	@ (8003474 <HAL_TIM_IC_Start_IT+0x284>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d018      	beq.n	8003426 <HAL_TIM_IC_Start_IT+0x236>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a1f      	ldr	r2, [pc, #124]	@ (8003478 <HAL_TIM_IC_Start_IT+0x288>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d013      	beq.n	8003426 <HAL_TIM_IC_Start_IT+0x236>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a1e      	ldr	r2, [pc, #120]	@ (800347c <HAL_TIM_IC_Start_IT+0x28c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d00e      	beq.n	8003426 <HAL_TIM_IC_Start_IT+0x236>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a1c      	ldr	r2, [pc, #112]	@ (8003480 <HAL_TIM_IC_Start_IT+0x290>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d009      	beq.n	8003426 <HAL_TIM_IC_Start_IT+0x236>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a1b      	ldr	r2, [pc, #108]	@ (8003484 <HAL_TIM_IC_Start_IT+0x294>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d004      	beq.n	8003426 <HAL_TIM_IC_Start_IT+0x236>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a19      	ldr	r2, [pc, #100]	@ (8003488 <HAL_TIM_IC_Start_IT+0x298>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d115      	bne.n	8003452 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	4b17      	ldr	r3, [pc, #92]	@ (800348c <HAL_TIM_IC_Start_IT+0x29c>)
 800342e:	4013      	ands	r3, r2
 8003430:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2b06      	cmp	r3, #6
 8003436:	d015      	beq.n	8003464 <HAL_TIM_IC_Start_IT+0x274>
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800343e:	d011      	beq.n	8003464 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0201 	orr.w	r2, r2, #1
 800344e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003450:	e008      	b.n	8003464 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f042 0201 	orr.w	r2, r2, #1
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	e000      	b.n	8003466 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003464:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003466:	7bfb      	ldrb	r3, [r7, #15]
}
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40010000 	.word	0x40010000
 8003474:	40000400 	.word	0x40000400
 8003478:	40000800 	.word	0x40000800
 800347c:	40000c00 	.word	0x40000c00
 8003480:	40010400 	.word	0x40010400
 8003484:	40014000 	.word	0x40014000
 8003488:	40001800 	.word	0x40001800
 800348c:	00010007 	.word	0x00010007

08003490 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d020      	beq.n	80034f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d01b      	beq.n	80034f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f06f 0202 	mvn.w	r2, #2
 80034c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7fd f930 	bl	8000740 <HAL_TIM_IC_CaptureCallback>
 80034e0:	e005      	b.n	80034ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 fa90 	bl	8003a08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 fa97 	bl	8003a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	f003 0304 	and.w	r3, r3, #4
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d020      	beq.n	8003540 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b00      	cmp	r3, #0
 8003506:	d01b      	beq.n	8003540 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f06f 0204 	mvn.w	r2, #4
 8003510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2202      	movs	r2, #2
 8003516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7fd f90a 	bl	8000740 <HAL_TIM_IC_CaptureCallback>
 800352c:	e005      	b.n	800353a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 fa6a 	bl	8003a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 fa71 	bl	8003a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f003 0308 	and.w	r3, r3, #8
 8003546:	2b00      	cmp	r3, #0
 8003548:	d020      	beq.n	800358c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f003 0308 	and.w	r3, r3, #8
 8003550:	2b00      	cmp	r3, #0
 8003552:	d01b      	beq.n	800358c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f06f 0208 	mvn.w	r2, #8
 800355c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2204      	movs	r2, #4
 8003562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7fd f8e4 	bl	8000740 <HAL_TIM_IC_CaptureCallback>
 8003578:	e005      	b.n	8003586 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 fa44 	bl	8003a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 fa4b 	bl	8003a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f003 0310 	and.w	r3, r3, #16
 8003592:	2b00      	cmp	r3, #0
 8003594:	d020      	beq.n	80035d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f003 0310 	and.w	r3, r3, #16
 800359c:	2b00      	cmp	r3, #0
 800359e:	d01b      	beq.n	80035d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f06f 0210 	mvn.w	r2, #16
 80035a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2208      	movs	r2, #8
 80035ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7fd f8be 	bl	8000740 <HAL_TIM_IC_CaptureCallback>
 80035c4:	e005      	b.n	80035d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 fa1e 	bl	8003a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 fa25 	bl	8003a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00c      	beq.n	80035fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d007      	beq.n	80035fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f06f 0201 	mvn.w	r2, #1
 80035f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f9fc 	bl	80039f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003602:	2b00      	cmp	r3, #0
 8003604:	d104      	bne.n	8003610 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00c      	beq.n	800362a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003616:	2b00      	cmp	r3, #0
 8003618:	d007      	beq.n	800362a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 fd3b 	bl	80040a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00c      	beq.n	800364e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800363a:	2b00      	cmp	r3, #0
 800363c:	d007      	beq.n	800364e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 fd33 	bl	80040b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00c      	beq.n	8003672 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800365e:	2b00      	cmp	r3, #0
 8003660:	d007      	beq.n	8003672 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800366a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f9df 	bl	8003a30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	f003 0320 	and.w	r3, r3, #32
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00c      	beq.n	8003696 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f003 0320 	and.w	r3, r3, #32
 8003682:	2b00      	cmp	r3, #0
 8003684:	d007      	beq.n	8003696 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f06f 0220 	mvn.w	r2, #32
 800368e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 fcfb 	bl	800408c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003696:	bf00      	nop
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b086      	sub	sp, #24
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	60f8      	str	r0, [r7, #12]
 80036a6:	60b9      	str	r1, [r7, #8]
 80036a8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d101      	bne.n	80036bc <HAL_TIM_IC_ConfigChannel+0x1e>
 80036b8:	2302      	movs	r3, #2
 80036ba:	e088      	b.n	80037ce <HAL_TIM_IC_ConfigChannel+0x130>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d11b      	bne.n	8003702 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80036da:	f000 fa5f 	bl	8003b9c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	699a      	ldr	r2, [r3, #24]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 020c 	bic.w	r2, r2, #12
 80036ec:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6999      	ldr	r1, [r3, #24]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	619a      	str	r2, [r3, #24]
 8003700:	e060      	b.n	80037c4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b04      	cmp	r3, #4
 8003706:	d11c      	bne.n	8003742 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003718:	f000 fae3 	bl	8003ce2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699a      	ldr	r2, [r3, #24]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800372a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6999      	ldr	r1, [r3, #24]
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	021a      	lsls	r2, r3, #8
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	619a      	str	r2, [r3, #24]
 8003740:	e040      	b.n	80037c4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b08      	cmp	r3, #8
 8003746:	d11b      	bne.n	8003780 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003758:	f000 fb30 	bl	8003dbc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	69da      	ldr	r2, [r3, #28]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 020c 	bic.w	r2, r2, #12
 800376a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	69d9      	ldr	r1, [r3, #28]
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	689a      	ldr	r2, [r3, #8]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	61da      	str	r2, [r3, #28]
 800377e:	e021      	b.n	80037c4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b0c      	cmp	r3, #12
 8003784:	d11c      	bne.n	80037c0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003796:	f000 fb4d 	bl	8003e34 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	69da      	ldr	r2, [r3, #28]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80037a8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	69d9      	ldr	r1, [r3, #28]
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	021a      	lsls	r2, r3, #8
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	61da      	str	r2, [r3, #28]
 80037be:	e001      	b.n	80037c4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3718      	adds	r7, #24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
	...

080037d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037e2:	2300      	movs	r3, #0
 80037e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d101      	bne.n	80037f4 <HAL_TIM_ConfigClockSource+0x1c>
 80037f0:	2302      	movs	r3, #2
 80037f2:	e0b4      	b.n	800395e <HAL_TIM_ConfigClockSource+0x186>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	4b56      	ldr	r3, [pc, #344]	@ (8003968 <HAL_TIM_ConfigClockSource+0x190>)
 8003810:	4013      	ands	r3, r2
 8003812:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800381a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800382c:	d03e      	beq.n	80038ac <HAL_TIM_ConfigClockSource+0xd4>
 800382e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003832:	f200 8087 	bhi.w	8003944 <HAL_TIM_ConfigClockSource+0x16c>
 8003836:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800383a:	f000 8086 	beq.w	800394a <HAL_TIM_ConfigClockSource+0x172>
 800383e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003842:	d87f      	bhi.n	8003944 <HAL_TIM_ConfigClockSource+0x16c>
 8003844:	2b70      	cmp	r3, #112	@ 0x70
 8003846:	d01a      	beq.n	800387e <HAL_TIM_ConfigClockSource+0xa6>
 8003848:	2b70      	cmp	r3, #112	@ 0x70
 800384a:	d87b      	bhi.n	8003944 <HAL_TIM_ConfigClockSource+0x16c>
 800384c:	2b60      	cmp	r3, #96	@ 0x60
 800384e:	d050      	beq.n	80038f2 <HAL_TIM_ConfigClockSource+0x11a>
 8003850:	2b60      	cmp	r3, #96	@ 0x60
 8003852:	d877      	bhi.n	8003944 <HAL_TIM_ConfigClockSource+0x16c>
 8003854:	2b50      	cmp	r3, #80	@ 0x50
 8003856:	d03c      	beq.n	80038d2 <HAL_TIM_ConfigClockSource+0xfa>
 8003858:	2b50      	cmp	r3, #80	@ 0x50
 800385a:	d873      	bhi.n	8003944 <HAL_TIM_ConfigClockSource+0x16c>
 800385c:	2b40      	cmp	r3, #64	@ 0x40
 800385e:	d058      	beq.n	8003912 <HAL_TIM_ConfigClockSource+0x13a>
 8003860:	2b40      	cmp	r3, #64	@ 0x40
 8003862:	d86f      	bhi.n	8003944 <HAL_TIM_ConfigClockSource+0x16c>
 8003864:	2b30      	cmp	r3, #48	@ 0x30
 8003866:	d064      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0x15a>
 8003868:	2b30      	cmp	r3, #48	@ 0x30
 800386a:	d86b      	bhi.n	8003944 <HAL_TIM_ConfigClockSource+0x16c>
 800386c:	2b20      	cmp	r3, #32
 800386e:	d060      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0x15a>
 8003870:	2b20      	cmp	r3, #32
 8003872:	d867      	bhi.n	8003944 <HAL_TIM_ConfigClockSource+0x16c>
 8003874:	2b00      	cmp	r3, #0
 8003876:	d05c      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0x15a>
 8003878:	2b10      	cmp	r3, #16
 800387a:	d05a      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0x15a>
 800387c:	e062      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800388e:	f000 fb29 	bl	8003ee4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80038a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	609a      	str	r2, [r3, #8]
      break;
 80038aa:	e04f      	b.n	800394c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038bc:	f000 fb12 	bl	8003ee4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689a      	ldr	r2, [r3, #8]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038ce:	609a      	str	r2, [r3, #8]
      break;
 80038d0:	e03c      	b.n	800394c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038de:	461a      	mov	r2, r3
 80038e0:	f000 f9d0 	bl	8003c84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2150      	movs	r1, #80	@ 0x50
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 fadf 	bl	8003eae <TIM_ITRx_SetConfig>
      break;
 80038f0:	e02c      	b.n	800394c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038fe:	461a      	mov	r2, r3
 8003900:	f000 fa2c 	bl	8003d5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2160      	movs	r1, #96	@ 0x60
 800390a:	4618      	mov	r0, r3
 800390c:	f000 facf 	bl	8003eae <TIM_ITRx_SetConfig>
      break;
 8003910:	e01c      	b.n	800394c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800391e:	461a      	mov	r2, r3
 8003920:	f000 f9b0 	bl	8003c84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2140      	movs	r1, #64	@ 0x40
 800392a:	4618      	mov	r0, r3
 800392c:	f000 fabf 	bl	8003eae <TIM_ITRx_SetConfig>
      break;
 8003930:	e00c      	b.n	800394c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4619      	mov	r1, r3
 800393c:	4610      	mov	r0, r2
 800393e:	f000 fab6 	bl	8003eae <TIM_ITRx_SetConfig>
      break;
 8003942:	e003      	b.n	800394c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	73fb      	strb	r3, [r7, #15]
      break;
 8003948:	e000      	b.n	800394c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800394a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800395c:	7bfb      	ldrb	r3, [r7, #15]
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	fffeff88 	.word	0xfffeff88

0800396c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003976:	2300      	movs	r3, #0
 8003978:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2b0c      	cmp	r3, #12
 800397e:	d831      	bhi.n	80039e4 <HAL_TIM_ReadCapturedValue+0x78>
 8003980:	a201      	add	r2, pc, #4	@ (adr r2, 8003988 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003986:	bf00      	nop
 8003988:	080039bd 	.word	0x080039bd
 800398c:	080039e5 	.word	0x080039e5
 8003990:	080039e5 	.word	0x080039e5
 8003994:	080039e5 	.word	0x080039e5
 8003998:	080039c7 	.word	0x080039c7
 800399c:	080039e5 	.word	0x080039e5
 80039a0:	080039e5 	.word	0x080039e5
 80039a4:	080039e5 	.word	0x080039e5
 80039a8:	080039d1 	.word	0x080039d1
 80039ac:	080039e5 	.word	0x080039e5
 80039b0:	080039e5 	.word	0x080039e5
 80039b4:	080039e5 	.word	0x080039e5
 80039b8:	080039db 	.word	0x080039db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039c2:	60fb      	str	r3, [r7, #12]

      break;
 80039c4:	e00f      	b.n	80039e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039cc:	60fb      	str	r3, [r7, #12]

      break;
 80039ce:	e00a      	b.n	80039e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d6:	60fb      	str	r3, [r7, #12]

      break;
 80039d8:	e005      	b.n	80039e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e0:	60fb      	str	r3, [r7, #12]

      break;
 80039e2:	e000      	b.n	80039e6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80039e4:	bf00      	nop
  }

  return tmpreg;
 80039e6:	68fb      	ldr	r3, [r7, #12]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3714      	adds	r7, #20
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a46      	ldr	r2, [pc, #280]	@ (8003b70 <TIM_Base_SetConfig+0x12c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d013      	beq.n	8003a84 <TIM_Base_SetConfig+0x40>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a62:	d00f      	beq.n	8003a84 <TIM_Base_SetConfig+0x40>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a43      	ldr	r2, [pc, #268]	@ (8003b74 <TIM_Base_SetConfig+0x130>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d00b      	beq.n	8003a84 <TIM_Base_SetConfig+0x40>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a42      	ldr	r2, [pc, #264]	@ (8003b78 <TIM_Base_SetConfig+0x134>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d007      	beq.n	8003a84 <TIM_Base_SetConfig+0x40>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a41      	ldr	r2, [pc, #260]	@ (8003b7c <TIM_Base_SetConfig+0x138>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d003      	beq.n	8003a84 <TIM_Base_SetConfig+0x40>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a40      	ldr	r2, [pc, #256]	@ (8003b80 <TIM_Base_SetConfig+0x13c>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d108      	bne.n	8003a96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a35      	ldr	r2, [pc, #212]	@ (8003b70 <TIM_Base_SetConfig+0x12c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d02b      	beq.n	8003af6 <TIM_Base_SetConfig+0xb2>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aa4:	d027      	beq.n	8003af6 <TIM_Base_SetConfig+0xb2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a32      	ldr	r2, [pc, #200]	@ (8003b74 <TIM_Base_SetConfig+0x130>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d023      	beq.n	8003af6 <TIM_Base_SetConfig+0xb2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a31      	ldr	r2, [pc, #196]	@ (8003b78 <TIM_Base_SetConfig+0x134>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d01f      	beq.n	8003af6 <TIM_Base_SetConfig+0xb2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a30      	ldr	r2, [pc, #192]	@ (8003b7c <TIM_Base_SetConfig+0x138>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d01b      	beq.n	8003af6 <TIM_Base_SetConfig+0xb2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a2f      	ldr	r2, [pc, #188]	@ (8003b80 <TIM_Base_SetConfig+0x13c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d017      	beq.n	8003af6 <TIM_Base_SetConfig+0xb2>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a2e      	ldr	r2, [pc, #184]	@ (8003b84 <TIM_Base_SetConfig+0x140>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d013      	beq.n	8003af6 <TIM_Base_SetConfig+0xb2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8003b88 <TIM_Base_SetConfig+0x144>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d00f      	beq.n	8003af6 <TIM_Base_SetConfig+0xb2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a2c      	ldr	r2, [pc, #176]	@ (8003b8c <TIM_Base_SetConfig+0x148>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d00b      	beq.n	8003af6 <TIM_Base_SetConfig+0xb2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a2b      	ldr	r2, [pc, #172]	@ (8003b90 <TIM_Base_SetConfig+0x14c>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d007      	beq.n	8003af6 <TIM_Base_SetConfig+0xb2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a2a      	ldr	r2, [pc, #168]	@ (8003b94 <TIM_Base_SetConfig+0x150>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d003      	beq.n	8003af6 <TIM_Base_SetConfig+0xb2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a29      	ldr	r2, [pc, #164]	@ (8003b98 <TIM_Base_SetConfig+0x154>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d108      	bne.n	8003b08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003afc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a10      	ldr	r2, [pc, #64]	@ (8003b70 <TIM_Base_SetConfig+0x12c>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d003      	beq.n	8003b3c <TIM_Base_SetConfig+0xf8>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a12      	ldr	r2, [pc, #72]	@ (8003b80 <TIM_Base_SetConfig+0x13c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d103      	bne.n	8003b44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	691a      	ldr	r2, [r3, #16]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d105      	bne.n	8003b62 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	f023 0201 	bic.w	r2, r3, #1
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	611a      	str	r2, [r3, #16]
  }
}
 8003b62:	bf00      	nop
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	40010000 	.word	0x40010000
 8003b74:	40000400 	.word	0x40000400
 8003b78:	40000800 	.word	0x40000800
 8003b7c:	40000c00 	.word	0x40000c00
 8003b80:	40010400 	.word	0x40010400
 8003b84:	40014000 	.word	0x40014000
 8003b88:	40014400 	.word	0x40014400
 8003b8c:	40014800 	.word	0x40014800
 8003b90:	40001800 	.word	0x40001800
 8003b94:	40001c00 	.word	0x40001c00
 8003b98:	40002000 	.word	0x40002000

08003b9c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
 8003ba8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	f023 0201 	bic.w	r2, r3, #1
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4a28      	ldr	r2, [pc, #160]	@ (8003c68 <TIM_TI1_SetConfig+0xcc>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d01b      	beq.n	8003c02 <TIM_TI1_SetConfig+0x66>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bd0:	d017      	beq.n	8003c02 <TIM_TI1_SetConfig+0x66>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	4a25      	ldr	r2, [pc, #148]	@ (8003c6c <TIM_TI1_SetConfig+0xd0>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d013      	beq.n	8003c02 <TIM_TI1_SetConfig+0x66>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4a24      	ldr	r2, [pc, #144]	@ (8003c70 <TIM_TI1_SetConfig+0xd4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d00f      	beq.n	8003c02 <TIM_TI1_SetConfig+0x66>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	4a23      	ldr	r2, [pc, #140]	@ (8003c74 <TIM_TI1_SetConfig+0xd8>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d00b      	beq.n	8003c02 <TIM_TI1_SetConfig+0x66>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	4a22      	ldr	r2, [pc, #136]	@ (8003c78 <TIM_TI1_SetConfig+0xdc>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d007      	beq.n	8003c02 <TIM_TI1_SetConfig+0x66>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4a21      	ldr	r2, [pc, #132]	@ (8003c7c <TIM_TI1_SetConfig+0xe0>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d003      	beq.n	8003c02 <TIM_TI1_SetConfig+0x66>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	4a20      	ldr	r2, [pc, #128]	@ (8003c80 <TIM_TI1_SetConfig+0xe4>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d101      	bne.n	8003c06 <TIM_TI1_SetConfig+0x6a>
 8003c02:	2301      	movs	r3, #1
 8003c04:	e000      	b.n	8003c08 <TIM_TI1_SetConfig+0x6c>
 8003c06:	2300      	movs	r3, #0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d008      	beq.n	8003c1e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f023 0303 	bic.w	r3, r3, #3
 8003c12:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]
 8003c1c:	e003      	b.n	8003c26 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	011b      	lsls	r3, r3, #4
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	f023 030a 	bic.w	r3, r3, #10
 8003c40:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	f003 030a 	and.w	r3, r3, #10
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	621a      	str	r2, [r3, #32]
}
 8003c5a:	bf00      	nop
 8003c5c:	371c      	adds	r7, #28
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	40010000 	.word	0x40010000
 8003c6c:	40000400 	.word	0x40000400
 8003c70:	40000800 	.word	0x40000800
 8003c74:	40000c00 	.word	0x40000c00
 8003c78:	40010400 	.word	0x40010400
 8003c7c:	40014000 	.word	0x40014000
 8003c80:	40001800 	.word	0x40001800

08003c84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	f023 0201 	bic.w	r2, r3, #1
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003cae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f023 030a 	bic.w	r3, r3, #10
 8003cc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	621a      	str	r2, [r3, #32]
}
 8003cd6:	bf00      	nop
 8003cd8:	371c      	adds	r7, #28
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b087      	sub	sp, #28
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	60f8      	str	r0, [r7, #12]
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	607a      	str	r2, [r7, #4]
 8003cee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	f023 0210 	bic.w	r2, r3, #16
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	021b      	lsls	r3, r3, #8
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	031b      	lsls	r3, r3, #12
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d34:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	621a      	str	r2, [r3, #32]
}
 8003d50:	bf00      	nop
 8003d52:	371c      	adds	r7, #28
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b087      	sub	sp, #28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	f023 0210 	bic.w	r2, r3, #16
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	031b      	lsls	r3, r3, #12
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d98:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	011b      	lsls	r3, r3, #4
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	621a      	str	r2, [r3, #32]
}
 8003db0:	bf00      	nop
 8003db2:	371c      	adds	r7, #28
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b087      	sub	sp, #28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
 8003dc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	69db      	ldr	r3, [r3, #28]
 8003de0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	f023 0303 	bic.w	r3, r3, #3
 8003de8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003df8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003e0c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	021b      	lsls	r3, r3, #8
 8003e12:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	621a      	str	r2, [r3, #32]
}
 8003e28:	bf00      	nop
 8003e2a:	371c      	adds	r7, #28
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
 8003e40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e60:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	021b      	lsls	r3, r3, #8
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e72:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	031b      	lsls	r3, r3, #12
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003e86:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	031b      	lsls	r3, r3, #12
 8003e8c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	621a      	str	r2, [r3, #32]
}
 8003ea2:	bf00      	nop
 8003ea4:	371c      	adds	r7, #28
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b085      	sub	sp, #20
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ec4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f043 0307 	orr.w	r3, r3, #7
 8003ed0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	609a      	str	r2, [r3, #8]
}
 8003ed8:	bf00      	nop
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
 8003ef0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003efe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	021a      	lsls	r2, r3, #8
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	431a      	orrs	r2, r3
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	609a      	str	r2, [r3, #8]
}
 8003f18:	bf00      	nop
 8003f1a:	371c      	adds	r7, #28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	f003 031f 	and.w	r3, r3, #31
 8003f36:	2201      	movs	r2, #1
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6a1a      	ldr	r2, [r3, #32]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	43db      	mvns	r3, r3
 8003f46:	401a      	ands	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a1a      	ldr	r2, [r3, #32]
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f003 031f 	and.w	r3, r3, #31
 8003f56:	6879      	ldr	r1, [r7, #4]
 8003f58:	fa01 f303 	lsl.w	r3, r1, r3
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	621a      	str	r2, [r3, #32]
}
 8003f62:	bf00      	nop
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
	...

08003f70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d101      	bne.n	8003f88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f84:	2302      	movs	r3, #2
 8003f86:	e06d      	b.n	8004064 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a30      	ldr	r2, [pc, #192]	@ (8004070 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d004      	beq.n	8003fbc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a2f      	ldr	r2, [pc, #188]	@ (8004074 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d108      	bne.n	8003fce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003fc2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fd4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a20      	ldr	r2, [pc, #128]	@ (8004070 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d022      	beq.n	8004038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ffa:	d01d      	beq.n	8004038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a1d      	ldr	r2, [pc, #116]	@ (8004078 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d018      	beq.n	8004038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a1c      	ldr	r2, [pc, #112]	@ (800407c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d013      	beq.n	8004038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a1a      	ldr	r2, [pc, #104]	@ (8004080 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d00e      	beq.n	8004038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a15      	ldr	r2, [pc, #84]	@ (8004074 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d009      	beq.n	8004038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a16      	ldr	r2, [pc, #88]	@ (8004084 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d004      	beq.n	8004038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a15      	ldr	r2, [pc, #84]	@ (8004088 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d10c      	bne.n	8004052 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800403e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	4313      	orrs	r3, r2
 8004048:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	40010000 	.word	0x40010000
 8004074:	40010400 	.word	0x40010400
 8004078:	40000400 	.word	0x40000400
 800407c:	40000800 	.word	0x40000800
 8004080:	40000c00 	.word	0x40000c00
 8004084:	40014000 	.word	0x40014000
 8004088:	40001800 	.word	0x40001800

0800408c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <memset>:
 80040c8:	4402      	add	r2, r0
 80040ca:	4603      	mov	r3, r0
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d100      	bne.n	80040d2 <memset+0xa>
 80040d0:	4770      	bx	lr
 80040d2:	f803 1b01 	strb.w	r1, [r3], #1
 80040d6:	e7f9      	b.n	80040cc <memset+0x4>

080040d8 <__libc_init_array>:
 80040d8:	b570      	push	{r4, r5, r6, lr}
 80040da:	4d0d      	ldr	r5, [pc, #52]	@ (8004110 <__libc_init_array+0x38>)
 80040dc:	4c0d      	ldr	r4, [pc, #52]	@ (8004114 <__libc_init_array+0x3c>)
 80040de:	1b64      	subs	r4, r4, r5
 80040e0:	10a4      	asrs	r4, r4, #2
 80040e2:	2600      	movs	r6, #0
 80040e4:	42a6      	cmp	r6, r4
 80040e6:	d109      	bne.n	80040fc <__libc_init_array+0x24>
 80040e8:	4d0b      	ldr	r5, [pc, #44]	@ (8004118 <__libc_init_array+0x40>)
 80040ea:	4c0c      	ldr	r4, [pc, #48]	@ (800411c <__libc_init_array+0x44>)
 80040ec:	f000 f818 	bl	8004120 <_init>
 80040f0:	1b64      	subs	r4, r4, r5
 80040f2:	10a4      	asrs	r4, r4, #2
 80040f4:	2600      	movs	r6, #0
 80040f6:	42a6      	cmp	r6, r4
 80040f8:	d105      	bne.n	8004106 <__libc_init_array+0x2e>
 80040fa:	bd70      	pop	{r4, r5, r6, pc}
 80040fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004100:	4798      	blx	r3
 8004102:	3601      	adds	r6, #1
 8004104:	e7ee      	b.n	80040e4 <__libc_init_array+0xc>
 8004106:	f855 3b04 	ldr.w	r3, [r5], #4
 800410a:	4798      	blx	r3
 800410c:	3601      	adds	r6, #1
 800410e:	e7f2      	b.n	80040f6 <__libc_init_array+0x1e>
 8004110:	0800415c 	.word	0x0800415c
 8004114:	0800415c 	.word	0x0800415c
 8004118:	0800415c 	.word	0x0800415c
 800411c:	08004160 	.word	0x08004160

08004120 <_init>:
 8004120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004122:	bf00      	nop
 8004124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004126:	bc08      	pop	{r3}
 8004128:	469e      	mov	lr, r3
 800412a:	4770      	bx	lr

0800412c <_fini>:
 800412c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412e:	bf00      	nop
 8004130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004132:	bc08      	pop	{r3}
 8004134:	469e      	mov	lr, r3
 8004136:	4770      	bx	lr
