
sensor-input-capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004550  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08004748  08004748  00005748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004764  08004764  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004764  08004764  00005764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800476c  0800476c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800476c  0800476c  0000576c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004770  08004770  00005770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004774  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  2000000c  08004780  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08004780  000061c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e577  00000000  00000000  0000603a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002097  00000000  00000000  000145b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00016648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000add  00000000  00000000  00017438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c00  00000000  00000000  00017f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000110aa  00000000  00000000  0003eb15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f37d1  00000000  00000000  0004fbbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00143390  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a78  00000000  00000000  001433d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  00146e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08004730 	.word	0x08004730

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08004730 	.word	0x08004730

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b988 	b.w	8000560 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	468e      	mov	lr, r1
 8000270:	4604      	mov	r4, r0
 8000272:	4688      	mov	r8, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d962      	bls.n	8000344 <__udivmoddi4+0xdc>
 800027e:	fab2 f682 	clz	r6, r2
 8000282:	b14e      	cbz	r6, 8000298 <__udivmoddi4+0x30>
 8000284:	f1c6 0320 	rsb	r3, r6, #32
 8000288:	fa01 f806 	lsl.w	r8, r1, r6
 800028c:	fa20 f303 	lsr.w	r3, r0, r3
 8000290:	40b7      	lsls	r7, r6
 8000292:	ea43 0808 	orr.w	r8, r3, r8
 8000296:	40b4      	lsls	r4, r6
 8000298:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800029c:	fa1f fc87 	uxth.w	ip, r7
 80002a0:	fbb8 f1fe 	udiv	r1, r8, lr
 80002a4:	0c23      	lsrs	r3, r4, #16
 80002a6:	fb0e 8811 	mls	r8, lr, r1, r8
 80002aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ae:	fb01 f20c 	mul.w	r2, r1, ip
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002bc:	f080 80ea 	bcs.w	8000494 <__udivmoddi4+0x22c>
 80002c0:	429a      	cmp	r2, r3
 80002c2:	f240 80e7 	bls.w	8000494 <__udivmoddi4+0x22c>
 80002c6:	3902      	subs	r1, #2
 80002c8:	443b      	add	r3, r7
 80002ca:	1a9a      	subs	r2, r3, r2
 80002cc:	b2a3      	uxth	r3, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002da:	fb00 fc0c 	mul.w	ip, r0, ip
 80002de:	459c      	cmp	ip, r3
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0x8e>
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e8:	f080 80d6 	bcs.w	8000498 <__udivmoddi4+0x230>
 80002ec:	459c      	cmp	ip, r3
 80002ee:	f240 80d3 	bls.w	8000498 <__udivmoddi4+0x230>
 80002f2:	443b      	add	r3, r7
 80002f4:	3802      	subs	r0, #2
 80002f6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fa:	eba3 030c 	sub.w	r3, r3, ip
 80002fe:	2100      	movs	r1, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0xa2>
 8000302:	40f3      	lsrs	r3, r6
 8000304:	2200      	movs	r2, #0
 8000306:	e9c5 3200 	strd	r3, r2, [r5]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d905      	bls.n	800031e <__udivmoddi4+0xb6>
 8000312:	b10d      	cbz	r5, 8000318 <__udivmoddi4+0xb0>
 8000314:	e9c5 0100 	strd	r0, r1, [r5]
 8000318:	2100      	movs	r1, #0
 800031a:	4608      	mov	r0, r1
 800031c:	e7f5      	b.n	800030a <__udivmoddi4+0xa2>
 800031e:	fab3 f183 	clz	r1, r3
 8000322:	2900      	cmp	r1, #0
 8000324:	d146      	bne.n	80003b4 <__udivmoddi4+0x14c>
 8000326:	4573      	cmp	r3, lr
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xc8>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 8105 	bhi.w	800053a <__udivmoddi4+0x2d2>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb6e 0203 	sbc.w	r2, lr, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4690      	mov	r8, r2
 800033a:	2d00      	cmp	r5, #0
 800033c:	d0e5      	beq.n	800030a <__udivmoddi4+0xa2>
 800033e:	e9c5 4800 	strd	r4, r8, [r5]
 8000342:	e7e2      	b.n	800030a <__udivmoddi4+0xa2>
 8000344:	2a00      	cmp	r2, #0
 8000346:	f000 8090 	beq.w	800046a <__udivmoddi4+0x202>
 800034a:	fab2 f682 	clz	r6, r2
 800034e:	2e00      	cmp	r6, #0
 8000350:	f040 80a4 	bne.w	800049c <__udivmoddi4+0x234>
 8000354:	1a8a      	subs	r2, r1, r2
 8000356:	0c03      	lsrs	r3, r0, #16
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	b280      	uxth	r0, r0
 800035e:	b2bc      	uxth	r4, r7
 8000360:	2101      	movs	r1, #1
 8000362:	fbb2 fcfe 	udiv	ip, r2, lr
 8000366:	fb0e 221c 	mls	r2, lr, ip, r2
 800036a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800036e:	fb04 f20c 	mul.w	r2, r4, ip
 8000372:	429a      	cmp	r2, r3
 8000374:	d907      	bls.n	8000386 <__udivmoddi4+0x11e>
 8000376:	18fb      	adds	r3, r7, r3
 8000378:	f10c 38ff 	add.w	r8, ip, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x11c>
 800037e:	429a      	cmp	r2, r3
 8000380:	f200 80e0 	bhi.w	8000544 <__udivmoddi4+0x2dc>
 8000384:	46c4      	mov	ip, r8
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	fbb3 f2fe 	udiv	r2, r3, lr
 800038c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000390:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000394:	fb02 f404 	mul.w	r4, r2, r4
 8000398:	429c      	cmp	r4, r3
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x144>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f102 30ff 	add.w	r0, r2, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x142>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f200 80ca 	bhi.w	800053e <__udivmoddi4+0x2d6>
 80003aa:	4602      	mov	r2, r0
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0x98>
 80003b4:	f1c1 0620 	rsb	r6, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 f706 	lsr.w	r7, r2, r6
 80003be:	431f      	orrs	r7, r3
 80003c0:	fa0e f401 	lsl.w	r4, lr, r1
 80003c4:	fa20 f306 	lsr.w	r3, r0, r6
 80003c8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003cc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d0:	4323      	orrs	r3, r4
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	fa1f fc87 	uxth.w	ip, r7
 80003da:	fbbe f0f9 	udiv	r0, lr, r9
 80003de:	0c1c      	lsrs	r4, r3, #16
 80003e0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003e4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003ec:	45a6      	cmp	lr, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d909      	bls.n	8000408 <__udivmoddi4+0x1a0>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003fa:	f080 809c 	bcs.w	8000536 <__udivmoddi4+0x2ce>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f240 8099 	bls.w	8000536 <__udivmoddi4+0x2ce>
 8000404:	3802      	subs	r0, #2
 8000406:	443c      	add	r4, r7
 8000408:	eba4 040e 	sub.w	r4, r4, lr
 800040c:	fa1f fe83 	uxth.w	lr, r3
 8000410:	fbb4 f3f9 	udiv	r3, r4, r9
 8000414:	fb09 4413 	mls	r4, r9, r3, r4
 8000418:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800041c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000420:	45a4      	cmp	ip, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1ce>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f103 3eff 	add.w	lr, r3, #4294967295
 800042a:	f080 8082 	bcs.w	8000532 <__udivmoddi4+0x2ca>
 800042e:	45a4      	cmp	ip, r4
 8000430:	d97f      	bls.n	8000532 <__udivmoddi4+0x2ca>
 8000432:	3b02      	subs	r3, #2
 8000434:	443c      	add	r4, r7
 8000436:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000442:	4564      	cmp	r4, ip
 8000444:	4673      	mov	r3, lr
 8000446:	46e1      	mov	r9, ip
 8000448:	d362      	bcc.n	8000510 <__udivmoddi4+0x2a8>
 800044a:	d05f      	beq.n	800050c <__udivmoddi4+0x2a4>
 800044c:	b15d      	cbz	r5, 8000466 <__udivmoddi4+0x1fe>
 800044e:	ebb8 0203 	subs.w	r2, r8, r3
 8000452:	eb64 0409 	sbc.w	r4, r4, r9
 8000456:	fa04 f606 	lsl.w	r6, r4, r6
 800045a:	fa22 f301 	lsr.w	r3, r2, r1
 800045e:	431e      	orrs	r6, r3
 8000460:	40cc      	lsrs	r4, r1
 8000462:	e9c5 6400 	strd	r6, r4, [r5]
 8000466:	2100      	movs	r1, #0
 8000468:	e74f      	b.n	800030a <__udivmoddi4+0xa2>
 800046a:	fbb1 fcf2 	udiv	ip, r1, r2
 800046e:	0c01      	lsrs	r1, r0, #16
 8000470:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000474:	b280      	uxth	r0, r0
 8000476:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800047a:	463b      	mov	r3, r7
 800047c:	4638      	mov	r0, r7
 800047e:	463c      	mov	r4, r7
 8000480:	46b8      	mov	r8, r7
 8000482:	46be      	mov	lr, r7
 8000484:	2620      	movs	r6, #32
 8000486:	fbb1 f1f7 	udiv	r1, r1, r7
 800048a:	eba2 0208 	sub.w	r2, r2, r8
 800048e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000492:	e766      	b.n	8000362 <__udivmoddi4+0xfa>
 8000494:	4601      	mov	r1, r0
 8000496:	e718      	b.n	80002ca <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e72c      	b.n	80002f6 <__udivmoddi4+0x8e>
 800049c:	f1c6 0220 	rsb	r2, r6, #32
 80004a0:	fa2e f302 	lsr.w	r3, lr, r2
 80004a4:	40b7      	lsls	r7, r6
 80004a6:	40b1      	lsls	r1, r6
 80004a8:	fa20 f202 	lsr.w	r2, r0, r2
 80004ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b0:	430a      	orrs	r2, r1
 80004b2:	fbb3 f8fe 	udiv	r8, r3, lr
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	fb0e 3318 	mls	r3, lr, r8, r3
 80004bc:	0c11      	lsrs	r1, r2, #16
 80004be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c2:	fb08 f904 	mul.w	r9, r8, r4
 80004c6:	40b0      	lsls	r0, r6
 80004c8:	4589      	cmp	r9, r1
 80004ca:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ce:	b280      	uxth	r0, r0
 80004d0:	d93e      	bls.n	8000550 <__udivmoddi4+0x2e8>
 80004d2:	1879      	adds	r1, r7, r1
 80004d4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d8:	d201      	bcs.n	80004de <__udivmoddi4+0x276>
 80004da:	4589      	cmp	r9, r1
 80004dc:	d81f      	bhi.n	800051e <__udivmoddi4+0x2b6>
 80004de:	eba1 0109 	sub.w	r1, r1, r9
 80004e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e6:	fb09 f804 	mul.w	r8, r9, r4
 80004ea:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ee:	b292      	uxth	r2, r2
 80004f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f4:	4542      	cmp	r2, r8
 80004f6:	d229      	bcs.n	800054c <__udivmoddi4+0x2e4>
 80004f8:	18ba      	adds	r2, r7, r2
 80004fa:	f109 31ff 	add.w	r1, r9, #4294967295
 80004fe:	d2c4      	bcs.n	800048a <__udivmoddi4+0x222>
 8000500:	4542      	cmp	r2, r8
 8000502:	d2c2      	bcs.n	800048a <__udivmoddi4+0x222>
 8000504:	f1a9 0102 	sub.w	r1, r9, #2
 8000508:	443a      	add	r2, r7
 800050a:	e7be      	b.n	800048a <__udivmoddi4+0x222>
 800050c:	45f0      	cmp	r8, lr
 800050e:	d29d      	bcs.n	800044c <__udivmoddi4+0x1e4>
 8000510:	ebbe 0302 	subs.w	r3, lr, r2
 8000514:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000518:	3801      	subs	r0, #1
 800051a:	46e1      	mov	r9, ip
 800051c:	e796      	b.n	800044c <__udivmoddi4+0x1e4>
 800051e:	eba7 0909 	sub.w	r9, r7, r9
 8000522:	4449      	add	r1, r9
 8000524:	f1a8 0c02 	sub.w	ip, r8, #2
 8000528:	fbb1 f9fe 	udiv	r9, r1, lr
 800052c:	fb09 f804 	mul.w	r8, r9, r4
 8000530:	e7db      	b.n	80004ea <__udivmoddi4+0x282>
 8000532:	4673      	mov	r3, lr
 8000534:	e77f      	b.n	8000436 <__udivmoddi4+0x1ce>
 8000536:	4650      	mov	r0, sl
 8000538:	e766      	b.n	8000408 <__udivmoddi4+0x1a0>
 800053a:	4608      	mov	r0, r1
 800053c:	e6fd      	b.n	800033a <__udivmoddi4+0xd2>
 800053e:	443b      	add	r3, r7
 8000540:	3a02      	subs	r2, #2
 8000542:	e733      	b.n	80003ac <__udivmoddi4+0x144>
 8000544:	f1ac 0c02 	sub.w	ip, ip, #2
 8000548:	443b      	add	r3, r7
 800054a:	e71c      	b.n	8000386 <__udivmoddi4+0x11e>
 800054c:	4649      	mov	r1, r9
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x222>
 8000550:	eba1 0109 	sub.w	r1, r1, r9
 8000554:	46c4      	mov	ip, r8
 8000556:	fbb1 f9fe 	udiv	r9, r1, lr
 800055a:	fb09 f804 	mul.w	r8, r9, r4
 800055e:	e7c4      	b.n	80004ea <__udivmoddi4+0x282>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af02      	add	r7, sp, #8
 800056a:	4603      	mov	r3, r0
 800056c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	f023 030f 	bic.w	r3, r3, #15
 8000574:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	011b      	lsls	r3, r3, #4
 800057a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	f043 030c 	orr.w	r3, r3, #12
 8000582:	b2db      	uxtb	r3, r3
 8000584:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000586:	7bfb      	ldrb	r3, [r7, #15]
 8000588:	f043 0308 	orr.w	r3, r3, #8
 800058c:	b2db      	uxtb	r3, r3
 800058e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000590:	7bbb      	ldrb	r3, [r7, #14]
 8000592:	f043 030c 	orr.w	r3, r3, #12
 8000596:	b2db      	uxtb	r3, r3
 8000598:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800059a:	7bbb      	ldrb	r3, [r7, #14]
 800059c:	f043 0308 	orr.w	r3, r3, #8
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005a4:	f107 0208 	add.w	r2, r7, #8
 80005a8:	2364      	movs	r3, #100	@ 0x64
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	2304      	movs	r3, #4
 80005ae:	214e      	movs	r1, #78	@ 0x4e
 80005b0:	4803      	ldr	r0, [pc, #12]	@ (80005c0 <lcd_send_cmd+0x5c>)
 80005b2:	f001 fb8b 	bl	8001ccc <HAL_I2C_Master_Transmit>
}
 80005b6:	bf00      	nop
 80005b8:	3710      	adds	r7, #16
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000028 	.word	0x20000028

080005c4 <lcd_send_data>:

void lcd_send_data (char data)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af02      	add	r7, sp, #8
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	f023 030f 	bic.w	r3, r3, #15
 80005d4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	011b      	lsls	r3, r3, #4
 80005da:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	f043 030d 	orr.w	r3, r3, #13
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	f043 0309 	orr.w	r3, r3, #9
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80005f0:	7bbb      	ldrb	r3, [r7, #14]
 80005f2:	f043 030d 	orr.w	r3, r3, #13
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80005fa:	7bbb      	ldrb	r3, [r7, #14]
 80005fc:	f043 0309 	orr.w	r3, r3, #9
 8000600:	b2db      	uxtb	r3, r3
 8000602:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000604:	f107 0208 	add.w	r2, r7, #8
 8000608:	2364      	movs	r3, #100	@ 0x64
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	2304      	movs	r3, #4
 800060e:	214e      	movs	r1, #78	@ 0x4e
 8000610:	4803      	ldr	r0, [pc, #12]	@ (8000620 <lcd_send_data+0x5c>)
 8000612:	f001 fb5b 	bl	8001ccc <HAL_I2C_Master_Transmit>
}
 8000616:	bf00      	nop
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000028 	.word	0x20000028

08000624 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
    switch (row)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d003      	beq.n	800063c <lcd_put_cur+0x18>
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b01      	cmp	r3, #1
 8000638:	d005      	beq.n	8000646 <lcd_put_cur+0x22>
 800063a:	e009      	b.n	8000650 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000642:	603b      	str	r3, [r7, #0]
            break;
 8000644:	e004      	b.n	8000650 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800064c:	603b      	str	r3, [r7, #0]
            break;
 800064e:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	b2db      	uxtb	r3, r3
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff ff85 	bl	8000564 <lcd_send_cmd>
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <lcd_init>:


void lcd_init (void)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000666:	2032      	movs	r0, #50	@ 0x32
 8000668:	f000 ff98 	bl	800159c <HAL_Delay>
	lcd_send_cmd (0x30);
 800066c:	2030      	movs	r0, #48	@ 0x30
 800066e:	f7ff ff79 	bl	8000564 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000672:	2005      	movs	r0, #5
 8000674:	f000 ff92 	bl	800159c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000678:	2030      	movs	r0, #48	@ 0x30
 800067a:	f7ff ff73 	bl	8000564 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800067e:	2001      	movs	r0, #1
 8000680:	f000 ff8c 	bl	800159c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000684:	2030      	movs	r0, #48	@ 0x30
 8000686:	f7ff ff6d 	bl	8000564 <lcd_send_cmd>
	HAL_Delay(10);
 800068a:	200a      	movs	r0, #10
 800068c:	f000 ff86 	bl	800159c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000690:	2020      	movs	r0, #32
 8000692:	f7ff ff67 	bl	8000564 <lcd_send_cmd>
	HAL_Delay(10);
 8000696:	200a      	movs	r0, #10
 8000698:	f000 ff80 	bl	800159c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800069c:	2028      	movs	r0, #40	@ 0x28
 800069e:	f7ff ff61 	bl	8000564 <lcd_send_cmd>
	HAL_Delay(1);
 80006a2:	2001      	movs	r0, #1
 80006a4:	f000 ff7a 	bl	800159c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80006a8:	2008      	movs	r0, #8
 80006aa:	f7ff ff5b 	bl	8000564 <lcd_send_cmd>
	HAL_Delay(1);
 80006ae:	2001      	movs	r0, #1
 80006b0:	f000 ff74 	bl	800159c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80006b4:	2001      	movs	r0, #1
 80006b6:	f7ff ff55 	bl	8000564 <lcd_send_cmd>
	HAL_Delay(1);
 80006ba:	2001      	movs	r0, #1
 80006bc:	f000 ff6e 	bl	800159c <HAL_Delay>
	HAL_Delay(1);
 80006c0:	2001      	movs	r0, #1
 80006c2:	f000 ff6b 	bl	800159c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80006c6:	2006      	movs	r0, #6
 80006c8:	f7ff ff4c 	bl	8000564 <lcd_send_cmd>
	HAL_Delay(1);
 80006cc:	2001      	movs	r0, #1
 80006ce:	f000 ff65 	bl	800159c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80006d2:	200c      	movs	r0, #12
 80006d4:	f7ff ff46 	bl	8000564 <lcd_send_cmd>
}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}

080006dc <lcd_send_string>:

void lcd_send_string (char *str)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80006e4:	e006      	b.n	80006f4 <lcd_send_string+0x18>
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	1c5a      	adds	r2, r3, #1
 80006ea:	607a      	str	r2, [r7, #4]
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ff68 	bl	80005c4 <lcd_send_data>
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d1f4      	bne.n	80006e6 <lcd_send_string+0xa>
}
 80006fc:	bf00      	nop
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <delay_in_us>:
uint8_t distance  = 0;
uint8_t idx = 0;
uint8_t d_array[4] = {0,0,0,0};

// Function that delays in microseconds (usec)
void delay_in_us (uint16_t time, TIM_HandleTypeDef *htim) {
 8000706:	b480      	push	{r7}
 8000708:	b083      	sub	sp, #12
 800070a:	af00      	add	r7, sp, #0
 800070c:	4603      	mov	r3, r0
 800070e:	6039      	str	r1, [r7, #0]
 8000710:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(htim, 0);
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2200      	movs	r2, #0
 8000718:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(htim) <  time);
 800071a:	bf00      	nop
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000722:	88fb      	ldrh	r3, [r7, #6]
 8000724:	429a      	cmp	r2, r3
 8000726:	d3f9      	bcc.n	800071c <delay_in_us+0x16>
}
 8000728:	bf00      	nop
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
	...

08000738 <HAL_TIM_IC_CaptureCallback>:

// Input Capture Callback ISR
// No function prototype because it is ISR and a HAL function
void HAL_TIM_IC_CaptureCallback (TIM_HandleTypeDef *htim) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) { // If the interrupt source is channel 1
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	7f1b      	ldrb	r3, [r3, #28]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d17d      	bne.n	8000844 <HAL_TIM_IC_CaptureCallback+0x10c>
		if (is_first_captured == 0) { // If the first value is not captured
 8000748:	4b43      	ldr	r3, [pc, #268]	@ (8000858 <HAL_TIM_IC_CaptureCallback+0x120>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d11a      	bne.n	8000786 <HAL_TIM_IC_CaptureCallback+0x4e>
			val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // Read the first value
 8000750:	2100      	movs	r1, #0
 8000752:	6878      	ldr	r0, [r7, #4]
 8000754:	f003 fc12 	bl	8003f7c <HAL_TIM_ReadCapturedValue>
 8000758:	4603      	mov	r3, r0
 800075a:	4a40      	ldr	r2, [pc, #256]	@ (800085c <HAL_TIM_IC_CaptureCallback+0x124>)
 800075c:	6013      	str	r3, [r2, #0]
			is_first_captured = 1;
 800075e:	4b3e      	ldr	r3, [pc, #248]	@ (8000858 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000760:	2201      	movs	r2, #1
 8000762:	701a      	strb	r2, [r3, #0]
			// Change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	6a1a      	ldr	r2, [r3, #32]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f022 020a 	bic.w	r2, r2, #10
 8000772:	621a      	str	r2, [r3, #32]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	6a1a      	ldr	r2, [r3, #32]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f042 0202 	orr.w	r2, r2, #2
 8000782:	621a      	str	r2, [r3, #32]
			// Set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
		}
	}
}
 8000784:	e05e      	b.n	8000844 <HAL_TIM_IC_CaptureCallback+0x10c>
		else if (is_first_captured == 1) { // If the first is already captured
 8000786:	4b34      	ldr	r3, [pc, #208]	@ (8000858 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b01      	cmp	r3, #1
 800078c:	d15a      	bne.n	8000844 <HAL_TIM_IC_CaptureCallback+0x10c>
			val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // Read second value
 800078e:	2100      	movs	r1, #0
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f003 fbf3 	bl	8003f7c <HAL_TIM_ReadCapturedValue>
 8000796:	4603      	mov	r3, r0
 8000798:	4a31      	ldr	r2, [pc, #196]	@ (8000860 <HAL_TIM_IC_CaptureCallback+0x128>)
 800079a:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // Reset the counter
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2200      	movs	r2, #0
 80007a2:	625a      	str	r2, [r3, #36]	@ 0x24
			if (val2 > val1) {
 80007a4:	4b2e      	ldr	r3, [pc, #184]	@ (8000860 <HAL_TIM_IC_CaptureCallback+0x128>)
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	4b2c      	ldr	r3, [pc, #176]	@ (800085c <HAL_TIM_IC_CaptureCallback+0x124>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d907      	bls.n	80007c0 <HAL_TIM_IC_CaptureCallback+0x88>
				diff = val2 - val1; // diff is in microseconds
 80007b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000860 <HAL_TIM_IC_CaptureCallback+0x128>)
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	4b29      	ldr	r3, [pc, #164]	@ (800085c <HAL_TIM_IC_CaptureCallback+0x124>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	4a2a      	ldr	r2, [pc, #168]	@ (8000864 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80007bc:	6013      	str	r3, [r2, #0]
 80007be:	e00f      	b.n	80007e0 <HAL_TIM_IC_CaptureCallback+0xa8>
			else if (val1 > val2) {
 80007c0:	4b26      	ldr	r3, [pc, #152]	@ (800085c <HAL_TIM_IC_CaptureCallback+0x124>)
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	4b26      	ldr	r3, [pc, #152]	@ (8000860 <HAL_TIM_IC_CaptureCallback+0x128>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d909      	bls.n	80007e0 <HAL_TIM_IC_CaptureCallback+0xa8>
				diff = (0xffff - val1) + val2;  // diff is in microseconds
 80007cc:	4b24      	ldr	r3, [pc, #144]	@ (8000860 <HAL_TIM_IC_CaptureCallback+0x128>)
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	4b22      	ldr	r3, [pc, #136]	@ (800085c <HAL_TIM_IC_CaptureCallback+0x124>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	1ad2      	subs	r2, r2, r3
 80007d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007da:	4413      	add	r3, r2
 80007dc:	4a21      	ldr	r2, [pc, #132]	@ (8000864 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80007de:	6013      	str	r3, [r2, #0]
			d_array[idx] = diff * .034/2;  // UNITS BREAKDOWN: (10^(-6) s) * (10^4 m/s) = 10^(-2) m = cm -> distance is in cm
 80007e0:	4b20      	ldr	r3, [pc, #128]	@ (8000864 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	ee07 3a90 	vmov	s15, r3
 80007e8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80007ec:	ed9f 6b18 	vldr	d6, [pc, #96]	@ 8000850 <HAL_TIM_IC_CaptureCallback+0x118>
 80007f0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007f4:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 80007f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80007fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000868 <HAL_TIM_IC_CaptureCallback+0x130>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	461a      	mov	r2, r3
 8000802:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000806:	edc7 7a00 	vstr	s15, [r7]
 800080a:	783b      	ldrb	r3, [r7, #0]
 800080c:	b2d9      	uxtb	r1, r3
 800080e:	4b17      	ldr	r3, [pc, #92]	@ (800086c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000810:	5499      	strb	r1, [r3, r2]
			is_first_captured = 0; // Set back to false
 8000812:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000814:	2200      	movs	r2, #0
 8000816:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	6a1a      	ldr	r2, [r3, #32]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f022 020a 	bic.w	r2, r2, #10
 8000826:	621a      	str	r2, [r3, #32]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	6a12      	ldr	r2, [r2, #32]
 8000832:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	68da      	ldr	r2, [r3, #12]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f022 0202 	bic.w	r2, r2, #2
 8000842:	60da      	str	r2, [r3, #12]
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	f3af 8000 	nop.w
 8000850:	b020c49c 	.word	0xb020c49c
 8000854:	3fa16872 	.word	0x3fa16872
 8000858:	200001b8 	.word	0x200001b8
 800085c:	200001ac 	.word	0x200001ac
 8000860:	200001b0 	.word	0x200001b0
 8000864:	200001b4 	.word	0x200001b4
 8000868:	200001b9 	.word	0x200001b9
 800086c:	200001bc 	.word	0x200001bc

08000870 <HCSR04_Read>:

// Drive TRIG Pin
static void HCSR04_Read (void) {
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	idx = 0;
 8000874:	4b3a      	ldr	r3, [pc, #232]	@ (8000960 <HCSR04_Read+0xf0>)
 8000876:	2200      	movs	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(TRIG_PORT_T1, TRIG_PIN_T1, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800087a:	2201      	movs	r2, #1
 800087c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000880:	4838      	ldr	r0, [pc, #224]	@ (8000964 <HCSR04_Read+0xf4>)
 8000882:	f001 f96d 	bl	8001b60 <HAL_GPIO_WritePin>
	delay_in_us(10, &htim1);  // wait for 10 us
 8000886:	4938      	ldr	r1, [pc, #224]	@ (8000968 <HCSR04_Read+0xf8>)
 8000888:	200a      	movs	r0, #10
 800088a:	f7ff ff3c 	bl	8000706 <delay_in_us>
	HAL_GPIO_WritePin(TRIG_PORT_T1, TRIG_PIN_T1, GPIO_PIN_RESET);  // pull the TRIG pin low
 800088e:	2200      	movs	r2, #0
 8000890:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000894:	4833      	ldr	r0, [pc, #204]	@ (8000964 <HCSR04_Read+0xf4>)
 8000896:	f001 f963 	bl	8001b60 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 800089a:	4b33      	ldr	r3, [pc, #204]	@ (8000968 <HCSR04_Read+0xf8>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	68da      	ldr	r2, [r3, #12]
 80008a0:	4b31      	ldr	r3, [pc, #196]	@ (8000968 <HCSR04_Read+0xf8>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f042 0202 	orr.w	r2, r2, #2
 80008a8:	60da      	str	r2, [r3, #12]
	HAL_Delay(10);
 80008aa:	200a      	movs	r0, #10
 80008ac:	f000 fe76 	bl	800159c <HAL_Delay>

	idx = 1;
 80008b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000960 <HCSR04_Read+0xf0>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(TRIG_PORT_T2, TRIG_PIN_T2, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80008b6:	2201      	movs	r2, #1
 80008b8:	2140      	movs	r1, #64	@ 0x40
 80008ba:	482c      	ldr	r0, [pc, #176]	@ (800096c <HCSR04_Read+0xfc>)
 80008bc:	f001 f950 	bl	8001b60 <HAL_GPIO_WritePin>
	delay_in_us(10, &htim2);  // wait for 10 us
 80008c0:	492b      	ldr	r1, [pc, #172]	@ (8000970 <HCSR04_Read+0x100>)
 80008c2:	200a      	movs	r0, #10
 80008c4:	f7ff ff1f 	bl	8000706 <delay_in_us>
	HAL_GPIO_WritePin(TRIG_PORT_T2, TRIG_PIN_T2, GPIO_PIN_RESET);  // pull the TRIG pin low
 80008c8:	2200      	movs	r2, #0
 80008ca:	2140      	movs	r1, #64	@ 0x40
 80008cc:	4827      	ldr	r0, [pc, #156]	@ (800096c <HCSR04_Read+0xfc>)
 80008ce:	f001 f947 	bl	8001b60 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 80008d2:	4b27      	ldr	r3, [pc, #156]	@ (8000970 <HCSR04_Read+0x100>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	68da      	ldr	r2, [r3, #12]
 80008d8:	4b25      	ldr	r3, [pc, #148]	@ (8000970 <HCSR04_Read+0x100>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f042 0202 	orr.w	r2, r2, #2
 80008e0:	60da      	str	r2, [r3, #12]
	HAL_Delay(10);
 80008e2:	200a      	movs	r0, #10
 80008e4:	f000 fe5a 	bl	800159c <HAL_Delay>

	idx = 2;
 80008e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000960 <HCSR04_Read+0xf0>)
 80008ea:	2202      	movs	r2, #2
 80008ec:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(TRIG_PORT_T3, TRIG_PIN_T3, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80008ee:	2201      	movs	r2, #1
 80008f0:	2180      	movs	r1, #128	@ 0x80
 80008f2:	4820      	ldr	r0, [pc, #128]	@ (8000974 <HCSR04_Read+0x104>)
 80008f4:	f001 f934 	bl	8001b60 <HAL_GPIO_WritePin>
	delay_in_us(10, &htim3);  // wait for 10 us
 80008f8:	491f      	ldr	r1, [pc, #124]	@ (8000978 <HCSR04_Read+0x108>)
 80008fa:	200a      	movs	r0, #10
 80008fc:	f7ff ff03 	bl	8000706 <delay_in_us>
	HAL_GPIO_WritePin(TRIG_PORT_T3, TRIG_PIN_T3, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000900:	2200      	movs	r2, #0
 8000902:	2180      	movs	r1, #128	@ 0x80
 8000904:	481b      	ldr	r0, [pc, #108]	@ (8000974 <HCSR04_Read+0x104>)
 8000906:	f001 f92b 	bl	8001b60 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 800090a:	4b1b      	ldr	r3, [pc, #108]	@ (8000978 <HCSR04_Read+0x108>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	68da      	ldr	r2, [r3, #12]
 8000910:	4b19      	ldr	r3, [pc, #100]	@ (8000978 <HCSR04_Read+0x108>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f042 0202 	orr.w	r2, r2, #2
 8000918:	60da      	str	r2, [r3, #12]
	HAL_Delay(10);
 800091a:	200a      	movs	r0, #10
 800091c:	f000 fe3e 	bl	800159c <HAL_Delay>

	idx = 3;
 8000920:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <HCSR04_Read+0xf0>)
 8000922:	2203      	movs	r2, #3
 8000924:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(TRIG_PORT_T4, TRIG_PIN_T4, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000926:	2201      	movs	r2, #1
 8000928:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800092c:	4813      	ldr	r0, [pc, #76]	@ (800097c <HCSR04_Read+0x10c>)
 800092e:	f001 f917 	bl	8001b60 <HAL_GPIO_WritePin>
	delay_in_us(10, &htim4);  // wait for 10 us
 8000932:	4913      	ldr	r1, [pc, #76]	@ (8000980 <HCSR04_Read+0x110>)
 8000934:	200a      	movs	r0, #10
 8000936:	f7ff fee6 	bl	8000706 <delay_in_us>
	HAL_GPIO_WritePin(TRIG_PORT_T4, TRIG_PIN_T4, GPIO_PIN_RESET);  // pull the TRIG pin low
 800093a:	2200      	movs	r2, #0
 800093c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000940:	480e      	ldr	r0, [pc, #56]	@ (800097c <HCSR04_Read+0x10c>)
 8000942:	f001 f90d 	bl	8001b60 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 8000946:	4b0e      	ldr	r3, [pc, #56]	@ (8000980 <HCSR04_Read+0x110>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	68da      	ldr	r2, [r3, #12]
 800094c:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <HCSR04_Read+0x110>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f042 0202 	orr.w	r2, r2, #2
 8000954:	60da      	str	r2, [r3, #12]
	HAL_Delay(10);
 8000956:	200a      	movs	r0, #10
 8000958:	f000 fe20 	bl	800159c <HAL_Delay>

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	200001b9 	.word	0x200001b9
 8000964:	40021000 	.word	0x40021000
 8000968:	2000007c 	.word	0x2000007c
 800096c:	40020000 	.word	0x40020000
 8000970:	200000c8 	.word	0x200000c8
 8000974:	40020800 	.word	0x40020800
 8000978:	20000114 	.word	0x20000114
 800097c:	40020c00 	.word	0x40020c00
 8000980:	20000160 	.word	0x20000160

08000984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000988:	f000 fdab 	bl	80014e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098c:	f000 f874 	bl	8000a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000990:	f000 faec 	bl	8000f6c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000994:	f000 f920 	bl	8000bd8 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000998:	f000 f8de 	bl	8000b58 <MX_I2C1_Init>
  MX_TIM2_Init();
 800099c:	f000 f992 	bl	8000cc4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80009a0:	f000 fa00 	bl	8000da4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80009a4:	f000 fa70 	bl	8000e88 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80009a8:	f7ff fe5b 	bl	8000662 <lcd_init>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80009ac:	2100      	movs	r1, #0
 80009ae:	4829      	ldr	r0, [pc, #164]	@ (8000a54 <main+0xd0>)
 80009b0:	f002 ff26 	bl	8003800 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80009b4:	2100      	movs	r1, #0
 80009b6:	4828      	ldr	r0, [pc, #160]	@ (8000a58 <main+0xd4>)
 80009b8:	f002 ff22 	bl	8003800 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80009bc:	2100      	movs	r1, #0
 80009be:	4827      	ldr	r0, [pc, #156]	@ (8000a5c <main+0xd8>)
 80009c0:	f002 ff1e 	bl	8003800 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80009c4:	2100      	movs	r1, #0
 80009c6:	4826      	ldr	r0, [pc, #152]	@ (8000a60 <main+0xdc>)
 80009c8:	f002 ff1a 	bl	8003800 <HAL_TIM_IC_Start_IT>
  lcd_send_string ("Dist= ");
 80009cc:	4825      	ldr	r0, [pc, #148]	@ (8000a64 <main+0xe0>)
 80009ce:	f7ff fe85 	bl	80006dc <lcd_send_string>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HCSR04_Read();
 80009d2:	f7ff ff4d 	bl	8000870 <HCSR04_Read>
	lcd_put_cur(0, 6);
 80009d6:	2106      	movs	r1, #6
 80009d8:	2000      	movs	r0, #0
 80009da:	f7ff fe23 	bl	8000624 <lcd_put_cur>
	lcd_send_data((d_array[0]/100) + 48);   // 100th pos
 80009de:	4b22      	ldr	r3, [pc, #136]	@ (8000a68 <main+0xe4>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	4a22      	ldr	r2, [pc, #136]	@ (8000a6c <main+0xe8>)
 80009e4:	fba2 2303 	umull	r2, r3, r2, r3
 80009e8:	095b      	lsrs	r3, r3, #5
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	3330      	adds	r3, #48	@ 0x30
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fde7 	bl	80005c4 <lcd_send_data>
	lcd_send_data(((d_array[0]/10)%10) +48);  // 10th pos
 80009f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a68 <main+0xe4>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	4a1d      	ldr	r2, [pc, #116]	@ (8000a70 <main+0xec>)
 80009fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000a00:	08db      	lsrs	r3, r3, #3
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	4b1a      	ldr	r3, [pc, #104]	@ (8000a70 <main+0xec>)
 8000a06:	fba3 1302 	umull	r1, r3, r3, r2
 8000a0a:	08d9      	lsrs	r1, r3, #3
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	440b      	add	r3, r1
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	3330      	adds	r3, #48	@ 0x30
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff fdd1 	bl	80005c4 <lcd_send_data>
	lcd_send_data((d_array[0]%10)+48);  // 1st pos
 8000a22:	4b11      	ldr	r3, [pc, #68]	@ (8000a68 <main+0xe4>)
 8000a24:	781a      	ldrb	r2, [r3, #0]
 8000a26:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <main+0xec>)
 8000a28:	fba3 1302 	umull	r1, r3, r3, r2
 8000a2c:	08d9      	lsrs	r1, r3, #3
 8000a2e:	460b      	mov	r3, r1
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	440b      	add	r3, r1
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	3330      	adds	r3, #48	@ 0x30
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff fdc0 	bl	80005c4 <lcd_send_data>
	lcd_send_string(" cm");
 8000a44:	480b      	ldr	r0, [pc, #44]	@ (8000a74 <main+0xf0>)
 8000a46:	f7ff fe49 	bl	80006dc <lcd_send_string>
	HAL_Delay(100);
 8000a4a:	2064      	movs	r0, #100	@ 0x64
 8000a4c:	f000 fda6 	bl	800159c <HAL_Delay>
	HCSR04_Read();
 8000a50:	bf00      	nop
 8000a52:	e7be      	b.n	80009d2 <main+0x4e>
 8000a54:	2000007c 	.word	0x2000007c
 8000a58:	200000c8 	.word	0x200000c8
 8000a5c:	20000114 	.word	0x20000114
 8000a60:	20000160 	.word	0x20000160
 8000a64:	08004748 	.word	0x08004748
 8000a68:	200001bc 	.word	0x200001bc
 8000a6c:	51eb851f 	.word	0x51eb851f
 8000a70:	cccccccd 	.word	0xcccccccd
 8000a74:	08004750 	.word	0x08004750

08000a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b094      	sub	sp, #80	@ 0x50
 8000a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	2234      	movs	r2, #52	@ 0x34
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f003 fe26 	bl	80046d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a8c:	f107 0308 	add.w	r3, r7, #8
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9c:	4b2c      	ldr	r3, [pc, #176]	@ (8000b50 <SystemClock_Config+0xd8>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa0:	4a2b      	ldr	r2, [pc, #172]	@ (8000b50 <SystemClock_Config+0xd8>)
 8000aa2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa8:	4b29      	ldr	r3, [pc, #164]	@ (8000b50 <SystemClock_Config+0xd8>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ab4:	4b27      	ldr	r3, [pc, #156]	@ (8000b54 <SystemClock_Config+0xdc>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000abc:	4a25      	ldr	r2, [pc, #148]	@ (8000b54 <SystemClock_Config+0xdc>)
 8000abe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ac2:	6013      	str	r3, [r2, #0]
 8000ac4:	4b23      	ldr	r3, [pc, #140]	@ (8000b54 <SystemClock_Config+0xdc>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000acc:	603b      	str	r3, [r7, #0]
 8000ace:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad8:	2310      	movs	r3, #16
 8000ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000adc:	2302      	movs	r3, #2
 8000ade:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ae4:	2308      	movs	r3, #8
 8000ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000ae8:	2360      	movs	r3, #96	@ 0x60
 8000aea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aec:	2302      	movs	r3, #2
 8000aee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000af0:	2304      	movs	r3, #4
 8000af2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000af4:	2302      	movs	r3, #2
 8000af6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	4618      	mov	r0, r3
 8000afe:	f001 fcff 	bl	8002500 <HAL_RCC_OscConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b08:	f000 fad6 	bl	80010b8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b0c:	f001 fca8 	bl	8002460 <HAL_PWREx_EnableOverDrive>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000b16:	f000 facf 	bl	80010b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1a:	230f      	movs	r3, #15
 8000b1c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b30:	f107 0308 	add.w	r3, r7, #8
 8000b34:	2103      	movs	r1, #3
 8000b36:	4618      	mov	r0, r3
 8000b38:	f001 ff90 	bl	8002a5c <HAL_RCC_ClockConfig>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000b42:	f000 fab9 	bl	80010b8 <Error_Handler>
  }
}
 8000b46:	bf00      	nop
 8000b48:	3750      	adds	r7, #80	@ 0x50
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40007000 	.word	0x40007000

08000b58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bcc <MX_I2C1_Init+0x74>)
 8000b5e:	4a1c      	ldr	r2, [pc, #112]	@ (8000bd0 <MX_I2C1_Init+0x78>)
 8000b60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000b62:	4b1a      	ldr	r3, [pc, #104]	@ (8000bcc <MX_I2C1_Init+0x74>)
 8000b64:	4a1b      	ldr	r2, [pc, #108]	@ (8000bd4 <MX_I2C1_Init+0x7c>)
 8000b66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b68:	4b18      	ldr	r3, [pc, #96]	@ (8000bcc <MX_I2C1_Init+0x74>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b6e:	4b17      	ldr	r3, [pc, #92]	@ (8000bcc <MX_I2C1_Init+0x74>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b74:	4b15      	ldr	r3, [pc, #84]	@ (8000bcc <MX_I2C1_Init+0x74>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b7a:	4b14      	ldr	r3, [pc, #80]	@ (8000bcc <MX_I2C1_Init+0x74>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b80:	4b12      	ldr	r3, [pc, #72]	@ (8000bcc <MX_I2C1_Init+0x74>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b86:	4b11      	ldr	r3, [pc, #68]	@ (8000bcc <MX_I2C1_Init+0x74>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <MX_I2C1_Init+0x74>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b92:	480e      	ldr	r0, [pc, #56]	@ (8000bcc <MX_I2C1_Init+0x74>)
 8000b94:	f000 fffe 	bl	8001b94 <HAL_I2C_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b9e:	f000 fa8b 	bl	80010b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4809      	ldr	r0, [pc, #36]	@ (8000bcc <MX_I2C1_Init+0x74>)
 8000ba6:	f001 fbc3 	bl	8002330 <HAL_I2CEx_ConfigAnalogFilter>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bb0:	f000 fa82 	bl	80010b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4805      	ldr	r0, [pc, #20]	@ (8000bcc <MX_I2C1_Init+0x74>)
 8000bb8:	f001 fc05 	bl	80023c6 <HAL_I2CEx_ConfigDigitalFilter>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bc2:	f000 fa79 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000028 	.word	0x20000028
 8000bd0:	40005400 	.word	0x40005400
 8000bd4:	20303e5d 	.word	0x20303e5d

08000bd8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08c      	sub	sp, #48	@ 0x30
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bde:	f107 0320 	add.w	r3, r7, #32
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c04:	4b2d      	ldr	r3, [pc, #180]	@ (8000cbc <MX_TIM1_Init+0xe4>)
 8000c06:	4a2e      	ldr	r2, [pc, #184]	@ (8000cc0 <MX_TIM1_Init+0xe8>)
 8000c08:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 8000c0a:	4b2c      	ldr	r3, [pc, #176]	@ (8000cbc <MX_TIM1_Init+0xe4>)
 8000c0c:	225f      	movs	r2, #95	@ 0x5f
 8000c0e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c10:	4b2a      	ldr	r3, [pc, #168]	@ (8000cbc <MX_TIM1_Init+0xe4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000c16:	4b29      	ldr	r3, [pc, #164]	@ (8000cbc <MX_TIM1_Init+0xe4>)
 8000c18:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000c1c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c1e:	4b27      	ldr	r3, [pc, #156]	@ (8000cbc <MX_TIM1_Init+0xe4>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c24:	4b25      	ldr	r3, [pc, #148]	@ (8000cbc <MX_TIM1_Init+0xe4>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c2a:	4b24      	ldr	r3, [pc, #144]	@ (8000cbc <MX_TIM1_Init+0xe4>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c30:	4822      	ldr	r0, [pc, #136]	@ (8000cbc <MX_TIM1_Init+0xe4>)
 8000c32:	f002 fd2d 	bl	8003690 <HAL_TIM_Base_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000c3c:	f000 fa3c 	bl	80010b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c44:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c46:	f107 0320 	add.w	r3, r7, #32
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	481b      	ldr	r0, [pc, #108]	@ (8000cbc <MX_TIM1_Init+0xe4>)
 8000c4e:	f003 f8cb 	bl	8003de8 <HAL_TIM_ConfigClockSource>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000c58:	f000 fa2e 	bl	80010b8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000c5c:	4817      	ldr	r0, [pc, #92]	@ (8000cbc <MX_TIM1_Init+0xe4>)
 8000c5e:	f002 fd6e 	bl	800373e <HAL_TIM_IC_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000c68:	f000 fa26 	bl	80010b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480f      	ldr	r0, [pc, #60]	@ (8000cbc <MX_TIM1_Init+0xe4>)
 8000c80:	f003 fc7e 	bl	8004580 <HAL_TIMEx_MasterConfigSynchronization>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000c8a:	f000 fa15 	bl	80010b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c92:	2301      	movs	r3, #1
 8000c94:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4805      	ldr	r0, [pc, #20]	@ (8000cbc <MX_TIM1_Init+0xe4>)
 8000ca6:	f003 f802 	bl	8003cae <HAL_TIM_IC_ConfigChannel>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000cb0:	f000 fa02 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cb4:	bf00      	nop
 8000cb6:	3730      	adds	r7, #48	@ 0x30
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	2000007c 	.word	0x2000007c
 8000cc0:	40010000 	.word	0x40010000

08000cc4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08c      	sub	sp, #48	@ 0x30
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cca:	f107 0320 	add.w	r3, r7, #32
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cf0:	4b2b      	ldr	r3, [pc, #172]	@ (8000da0 <MX_TIM2_Init+0xdc>)
 8000cf2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cf6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 8000cf8:	4b29      	ldr	r3, [pc, #164]	@ (8000da0 <MX_TIM2_Init+0xdc>)
 8000cfa:	225f      	movs	r2, #95	@ 0x5f
 8000cfc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfe:	4b28      	ldr	r3, [pc, #160]	@ (8000da0 <MX_TIM2_Init+0xdc>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF - 1;
 8000d04:	4b26      	ldr	r3, [pc, #152]	@ (8000da0 <MX_TIM2_Init+0xdc>)
 8000d06:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000d0a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0c:	4b24      	ldr	r3, [pc, #144]	@ (8000da0 <MX_TIM2_Init+0xdc>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d12:	4b23      	ldr	r3, [pc, #140]	@ (8000da0 <MX_TIM2_Init+0xdc>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d18:	4821      	ldr	r0, [pc, #132]	@ (8000da0 <MX_TIM2_Init+0xdc>)
 8000d1a:	f002 fcb9 	bl	8003690 <HAL_TIM_Base_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000d24:	f000 f9c8 	bl	80010b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d2c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d2e:	f107 0320 	add.w	r3, r7, #32
 8000d32:	4619      	mov	r1, r3
 8000d34:	481a      	ldr	r0, [pc, #104]	@ (8000da0 <MX_TIM2_Init+0xdc>)
 8000d36:	f003 f857 	bl	8003de8 <HAL_TIM_ConfigClockSource>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000d40:	f000 f9ba 	bl	80010b8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000d44:	4816      	ldr	r0, [pc, #88]	@ (8000da0 <MX_TIM2_Init+0xdc>)
 8000d46:	f002 fcfa 	bl	800373e <HAL_TIM_IC_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000d50:	f000 f9b2 	bl	80010b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4619      	mov	r1, r3
 8000d62:	480f      	ldr	r0, [pc, #60]	@ (8000da0 <MX_TIM2_Init+0xdc>)
 8000d64:	f003 fc0c 	bl	8004580 <HAL_TIMEx_MasterConfigSynchronization>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000d6e:	f000 f9a3 	bl	80010b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d72:	2300      	movs	r3, #0
 8000d74:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d76:	2301      	movs	r3, #1
 8000d78:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	2200      	movs	r2, #0
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	@ (8000da0 <MX_TIM2_Init+0xdc>)
 8000d8a:	f002 ff90 	bl	8003cae <HAL_TIM_IC_ConfigChannel>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000d94:	f000 f990 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	3730      	adds	r7, #48	@ 0x30
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	200000c8 	.word	0x200000c8

08000da4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08c      	sub	sp, #48	@ 0x30
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000daa:	f107 0320 	add.w	r3, r7, #32
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dd0:	4b2b      	ldr	r3, [pc, #172]	@ (8000e80 <MX_TIM3_Init+0xdc>)
 8000dd2:	4a2c      	ldr	r2, [pc, #176]	@ (8000e84 <MX_TIM3_Init+0xe0>)
 8000dd4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96-1;
 8000dd6:	4b2a      	ldr	r3, [pc, #168]	@ (8000e80 <MX_TIM3_Init+0xdc>)
 8000dd8:	225f      	movs	r2, #95	@ 0x5f
 8000dda:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ddc:	4b28      	ldr	r3, [pc, #160]	@ (8000e80 <MX_TIM3_Init+0xdc>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 8000de2:	4b27      	ldr	r3, [pc, #156]	@ (8000e80 <MX_TIM3_Init+0xdc>)
 8000de4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000de8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dea:	4b25      	ldr	r3, [pc, #148]	@ (8000e80 <MX_TIM3_Init+0xdc>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df0:	4b23      	ldr	r3, [pc, #140]	@ (8000e80 <MX_TIM3_Init+0xdc>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000df6:	4822      	ldr	r0, [pc, #136]	@ (8000e80 <MX_TIM3_Init+0xdc>)
 8000df8:	f002 fc4a 	bl	8003690 <HAL_TIM_Base_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8000e02:	f000 f959 	bl	80010b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e0a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e0c:	f107 0320 	add.w	r3, r7, #32
 8000e10:	4619      	mov	r1, r3
 8000e12:	481b      	ldr	r0, [pc, #108]	@ (8000e80 <MX_TIM3_Init+0xdc>)
 8000e14:	f002 ffe8 	bl	8003de8 <HAL_TIM_ConfigClockSource>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000e1e:	f000 f94b 	bl	80010b8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000e22:	4817      	ldr	r0, [pc, #92]	@ (8000e80 <MX_TIM3_Init+0xdc>)
 8000e24:	f002 fc8b 	bl	800373e <HAL_TIM_IC_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000e2e:	f000 f943 	bl	80010b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	480f      	ldr	r0, [pc, #60]	@ (8000e80 <MX_TIM3_Init+0xdc>)
 8000e42:	f003 fb9d 	bl	8004580 <HAL_TIMEx_MasterConfigSynchronization>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8000e4c:	f000 f934 	bl	80010b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e50:	2300      	movs	r3, #0
 8000e52:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e54:	2301      	movs	r3, #1
 8000e56:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	2200      	movs	r2, #0
 8000e64:	4619      	mov	r1, r3
 8000e66:	4806      	ldr	r0, [pc, #24]	@ (8000e80 <MX_TIM3_Init+0xdc>)
 8000e68:	f002 ff21 	bl	8003cae <HAL_TIM_IC_ConfigChannel>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8000e72:	f000 f921 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	3730      	adds	r7, #48	@ 0x30
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000114 	.word	0x20000114
 8000e84:	40000400 	.word	0x40000400

08000e88 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08c      	sub	sp, #48	@ 0x30
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e8e:	f107 0320 	add.w	r3, r7, #32
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8000f64 <MX_TIM4_Init+0xdc>)
 8000eb6:	4a2c      	ldr	r2, [pc, #176]	@ (8000f68 <MX_TIM4_Init+0xe0>)
 8000eb8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 96-1;
 8000eba:	4b2a      	ldr	r3, [pc, #168]	@ (8000f64 <MX_TIM4_Init+0xdc>)
 8000ebc:	225f      	movs	r2, #95	@ 0x5f
 8000ebe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec0:	4b28      	ldr	r3, [pc, #160]	@ (8000f64 <MX_TIM4_Init+0xdc>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff - 1;
 8000ec6:	4b27      	ldr	r3, [pc, #156]	@ (8000f64 <MX_TIM4_Init+0xdc>)
 8000ec8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000ecc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ece:	4b25      	ldr	r3, [pc, #148]	@ (8000f64 <MX_TIM4_Init+0xdc>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed4:	4b23      	ldr	r3, [pc, #140]	@ (8000f64 <MX_TIM4_Init+0xdc>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000eda:	4822      	ldr	r0, [pc, #136]	@ (8000f64 <MX_TIM4_Init+0xdc>)
 8000edc:	f002 fbd8 	bl	8003690 <HAL_TIM_Base_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8000ee6:	f000 f8e7 	bl	80010b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eee:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ef0:	f107 0320 	add.w	r3, r7, #32
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	481b      	ldr	r0, [pc, #108]	@ (8000f64 <MX_TIM4_Init+0xdc>)
 8000ef8:	f002 ff76 	bl	8003de8 <HAL_TIM_ConfigClockSource>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000f02:	f000 f8d9 	bl	80010b8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000f06:	4817      	ldr	r0, [pc, #92]	@ (8000f64 <MX_TIM4_Init+0xdc>)
 8000f08:	f002 fc19 	bl	800373e <HAL_TIM_IC_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000f12:	f000 f8d1 	bl	80010b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	4619      	mov	r1, r3
 8000f24:	480f      	ldr	r0, [pc, #60]	@ (8000f64 <MX_TIM4_Init+0xdc>)
 8000f26:	f003 fb2b 	bl	8004580 <HAL_TIMEx_MasterConfigSynchronization>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8000f30:	f000 f8c2 	bl	80010b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f34:	2300      	movs	r3, #0
 8000f36:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	2200      	movs	r2, #0
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4806      	ldr	r0, [pc, #24]	@ (8000f64 <MX_TIM4_Init+0xdc>)
 8000f4c:	f002 feaf 	bl	8003cae <HAL_TIM_IC_ConfigChannel>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8000f56:	f000 f8af 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	3730      	adds	r7, #48	@ 0x30
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000160 	.word	0x20000160
 8000f68:	40000800 	.word	0x40000800

08000f6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	@ 0x28
 8000f70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	4b48      	ldr	r3, [pc, #288]	@ (80010a4 <MX_GPIO_Init+0x138>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	4a47      	ldr	r2, [pc, #284]	@ (80010a4 <MX_GPIO_Init+0x138>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8e:	4b45      	ldr	r3, [pc, #276]	@ (80010a4 <MX_GPIO_Init+0x138>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f9a:	4b42      	ldr	r3, [pc, #264]	@ (80010a4 <MX_GPIO_Init+0x138>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	4a41      	ldr	r2, [pc, #260]	@ (80010a4 <MX_GPIO_Init+0x138>)
 8000fa0:	f043 0310 	orr.w	r3, r3, #16
 8000fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa6:	4b3f      	ldr	r3, [pc, #252]	@ (80010a4 <MX_GPIO_Init+0x138>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	f003 0310 	and.w	r3, r3, #16
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb2:	4b3c      	ldr	r3, [pc, #240]	@ (80010a4 <MX_GPIO_Init+0x138>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	4a3b      	ldr	r2, [pc, #236]	@ (80010a4 <MX_GPIO_Init+0x138>)
 8000fb8:	f043 0308 	orr.w	r3, r3, #8
 8000fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fbe:	4b39      	ldr	r3, [pc, #228]	@ (80010a4 <MX_GPIO_Init+0x138>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	f003 0308 	and.w	r3, r3, #8
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fca:	4b36      	ldr	r3, [pc, #216]	@ (80010a4 <MX_GPIO_Init+0x138>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	4a35      	ldr	r2, [pc, #212]	@ (80010a4 <MX_GPIO_Init+0x138>)
 8000fd0:	f043 0304 	orr.w	r3, r3, #4
 8000fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd6:	4b33      	ldr	r3, [pc, #204]	@ (80010a4 <MX_GPIO_Init+0x138>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	f003 0304 	and.w	r3, r3, #4
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	4b30      	ldr	r3, [pc, #192]	@ (80010a4 <MX_GPIO_Init+0x138>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	4a2f      	ldr	r2, [pc, #188]	@ (80010a4 <MX_GPIO_Init+0x138>)
 8000fe8:	f043 0302 	orr.w	r3, r3, #2
 8000fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fee:	4b2d      	ldr	r3, [pc, #180]	@ (80010a4 <MX_GPIO_Init+0x138>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	603b      	str	r3, [r7, #0]
 8000ff8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2140      	movs	r1, #64	@ 0x40
 8000ffe:	482a      	ldr	r0, [pc, #168]	@ (80010a8 <MX_GPIO_Init+0x13c>)
 8001000:	f000 fdae 	bl	8001b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800100a:	4828      	ldr	r0, [pc, #160]	@ (80010ac <MX_GPIO_Init+0x140>)
 800100c:	f000 fda8 	bl	8001b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001016:	4826      	ldr	r0, [pc, #152]	@ (80010b0 <MX_GPIO_Init+0x144>)
 8001018:	f000 fda2 	bl	8001b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	2180      	movs	r1, #128	@ 0x80
 8001020:	4824      	ldr	r0, [pc, #144]	@ (80010b4 <MX_GPIO_Init+0x148>)
 8001022:	f000 fd9d 	bl	8001b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001026:	2340      	movs	r3, #64	@ 0x40
 8001028:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102a:	2301      	movs	r3, #1
 800102c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2300      	movs	r3, #0
 8001034:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	4619      	mov	r1, r3
 800103c:	481a      	ldr	r0, [pc, #104]	@ (80010a8 <MX_GPIO_Init+0x13c>)
 800103e:	f000 fbe3 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001042:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001048:	2301      	movs	r3, #1
 800104a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	4814      	ldr	r0, [pc, #80]	@ (80010ac <MX_GPIO_Init+0x140>)
 800105c:	f000 fbd4 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001060:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001066:	2301      	movs	r3, #1
 8001068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4619      	mov	r1, r3
 8001078:	480d      	ldr	r0, [pc, #52]	@ (80010b0 <MX_GPIO_Init+0x144>)
 800107a:	f000 fbc5 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800107e:	2380      	movs	r3, #128	@ 0x80
 8001080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001082:	2301      	movs	r3, #1
 8001084:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108a:	2300      	movs	r3, #0
 800108c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	4807      	ldr	r0, [pc, #28]	@ (80010b4 <MX_GPIO_Init+0x148>)
 8001096:	f000 fbb7 	bl	8001808 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800109a:	bf00      	nop
 800109c:	3728      	adds	r7, #40	@ 0x28
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40020000 	.word	0x40020000
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40020c00 	.word	0x40020c00
 80010b4:	40020800 	.word	0x40020800

080010b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010bc:	b672      	cpsid	i
}
 80010be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <Error_Handler+0x8>

080010c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001108 <HAL_MspInit+0x44>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001108 <HAL_MspInit+0x44>)
 80010d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <HAL_MspInit+0x44>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e2:	4b09      	ldr	r3, [pc, #36]	@ (8001108 <HAL_MspInit+0x44>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e6:	4a08      	ldr	r2, [pc, #32]	@ (8001108 <HAL_MspInit+0x44>)
 80010e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ee:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <HAL_MspInit+0x44>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010f6:	603b      	str	r3, [r7, #0]
 80010f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800

0800110c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b0ae      	sub	sp, #184	@ 0xb8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2290      	movs	r2, #144	@ 0x90
 800112a:	2100      	movs	r1, #0
 800112c:	4618      	mov	r0, r3
 800112e:	f003 fad3 	bl	80046d8 <memset>
  if(hi2c->Instance==I2C1)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a21      	ldr	r2, [pc, #132]	@ (80011bc <HAL_I2C_MspInit+0xb0>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d13b      	bne.n	80011b4 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800113c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001140:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001142:	2300      	movs	r3, #0
 8001144:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4618      	mov	r0, r3
 800114c:	f001 fe78 	bl	8002e40 <HAL_RCCEx_PeriphCLKConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001156:	f7ff ffaf 	bl	80010b8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115a:	4b19      	ldr	r3, [pc, #100]	@ (80011c0 <HAL_I2C_MspInit+0xb4>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	4a18      	ldr	r2, [pc, #96]	@ (80011c0 <HAL_I2C_MspInit+0xb4>)
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	6313      	str	r3, [r2, #48]	@ 0x30
 8001166:	4b16      	ldr	r3, [pc, #88]	@ (80011c0 <HAL_I2C_MspInit+0xb4>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001172:	23c0      	movs	r3, #192	@ 0xc0
 8001174:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001178:	2312      	movs	r3, #18
 800117a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800117e:	2301      	movs	r3, #1
 8001180:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001184:	2303      	movs	r3, #3
 8001186:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800118a:	2304      	movs	r3, #4
 800118c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001190:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001194:	4619      	mov	r1, r3
 8001196:	480b      	ldr	r0, [pc, #44]	@ (80011c4 <HAL_I2C_MspInit+0xb8>)
 8001198:	f000 fb36 	bl	8001808 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800119c:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <HAL_I2C_MspInit+0xb4>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a0:	4a07      	ldr	r2, [pc, #28]	@ (80011c0 <HAL_I2C_MspInit+0xb4>)
 80011a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80011a8:	4b05      	ldr	r3, [pc, #20]	@ (80011c0 <HAL_I2C_MspInit+0xb4>)
 80011aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80011b4:	bf00      	nop
 80011b6:	37b8      	adds	r7, #184	@ 0xb8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40005400 	.word	0x40005400
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40020400 	.word	0x40020400

080011c8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b090      	sub	sp, #64	@ 0x40
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a6d      	ldr	r2, [pc, #436]	@ (800139c <HAL_TIM_Base_MspInit+0x1d4>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d131      	bne.n	800124e <HAL_TIM_Base_MspInit+0x86>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011ea:	4b6d      	ldr	r3, [pc, #436]	@ (80013a0 <HAL_TIM_Base_MspInit+0x1d8>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ee:	4a6c      	ldr	r2, [pc, #432]	@ (80013a0 <HAL_TIM_Base_MspInit+0x1d8>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011f6:	4b6a      	ldr	r3, [pc, #424]	@ (80013a0 <HAL_TIM_Base_MspInit+0x1d8>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001200:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001202:	4b67      	ldr	r3, [pc, #412]	@ (80013a0 <HAL_TIM_Base_MspInit+0x1d8>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	4a66      	ldr	r2, [pc, #408]	@ (80013a0 <HAL_TIM_Base_MspInit+0x1d8>)
 8001208:	f043 0310 	orr.w	r3, r3, #16
 800120c:	6313      	str	r3, [r2, #48]	@ 0x30
 800120e:	4b64      	ldr	r3, [pc, #400]	@ (80013a0 <HAL_TIM_Base_MspInit+0x1d8>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	f003 0310 	and.w	r3, r3, #16
 8001216:	627b      	str	r3, [r7, #36]	@ 0x24
 8001218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800121a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800121e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800122c:	2301      	movs	r3, #1
 800122e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001230:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001234:	4619      	mov	r1, r3
 8001236:	485b      	ldr	r0, [pc, #364]	@ (80013a4 <HAL_TIM_Base_MspInit+0x1dc>)
 8001238:	f000 fae6 	bl	8001808 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800123c:	2200      	movs	r2, #0
 800123e:	2100      	movs	r1, #0
 8001240:	201b      	movs	r0, #27
 8001242:	f000 faaa 	bl	800179a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001246:	201b      	movs	r0, #27
 8001248:	f000 fac3 	bl	80017d2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 800124c:	e0a1      	b.n	8001392 <HAL_TIM_Base_MspInit+0x1ca>
  else if(htim_base->Instance==TIM2)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001256:	d130      	bne.n	80012ba <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001258:	4b51      	ldr	r3, [pc, #324]	@ (80013a0 <HAL_TIM_Base_MspInit+0x1d8>)
 800125a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125c:	4a50      	ldr	r2, [pc, #320]	@ (80013a0 <HAL_TIM_Base_MspInit+0x1d8>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6413      	str	r3, [r2, #64]	@ 0x40
 8001264:	4b4e      	ldr	r3, [pc, #312]	@ (80013a0 <HAL_TIM_Base_MspInit+0x1d8>)
 8001266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	623b      	str	r3, [r7, #32]
 800126e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001270:	4b4b      	ldr	r3, [pc, #300]	@ (80013a0 <HAL_TIM_Base_MspInit+0x1d8>)
 8001272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001274:	4a4a      	ldr	r2, [pc, #296]	@ (80013a0 <HAL_TIM_Base_MspInit+0x1d8>)
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	6313      	str	r3, [r2, #48]	@ 0x30
 800127c:	4b48      	ldr	r3, [pc, #288]	@ (80013a0 <HAL_TIM_Base_MspInit+0x1d8>)
 800127e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	61fb      	str	r3, [r7, #28]
 8001286:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001288:	2320      	movs	r3, #32
 800128a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128c:	2302      	movs	r3, #2
 800128e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	2300      	movs	r3, #0
 8001296:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001298:	2301      	movs	r3, #1
 800129a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012a0:	4619      	mov	r1, r3
 80012a2:	4841      	ldr	r0, [pc, #260]	@ (80013a8 <HAL_TIM_Base_MspInit+0x1e0>)
 80012a4:	f000 fab0 	bl	8001808 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2100      	movs	r1, #0
 80012ac:	201c      	movs	r0, #28
 80012ae:	f000 fa74 	bl	800179a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012b2:	201c      	movs	r0, #28
 80012b4:	f000 fa8d 	bl	80017d2 <HAL_NVIC_EnableIRQ>
}
 80012b8:	e06b      	b.n	8001392 <HAL_TIM_Base_MspInit+0x1ca>
  else if(htim_base->Instance==TIM3)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a3b      	ldr	r2, [pc, #236]	@ (80013ac <HAL_TIM_Base_MspInit+0x1e4>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d130      	bne.n	8001326 <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012c4:	4b36      	ldr	r3, [pc, #216]	@ (80013a0 <HAL_TIM_Base_MspInit+0x1d8>)
 80012c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c8:	4a35      	ldr	r2, [pc, #212]	@ (80013a0 <HAL_TIM_Base_MspInit+0x1d8>)
 80012ca:	f043 0302 	orr.w	r3, r3, #2
 80012ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80012d0:	4b33      	ldr	r3, [pc, #204]	@ (80013a0 <HAL_TIM_Base_MspInit+0x1d8>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	61bb      	str	r3, [r7, #24]
 80012da:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012dc:	4b30      	ldr	r3, [pc, #192]	@ (80013a0 <HAL_TIM_Base_MspInit+0x1d8>)
 80012de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e0:	4a2f      	ldr	r2, [pc, #188]	@ (80013a0 <HAL_TIM_Base_MspInit+0x1d8>)
 80012e2:	f043 0304 	orr.w	r3, r3, #4
 80012e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e8:	4b2d      	ldr	r3, [pc, #180]	@ (80013a0 <HAL_TIM_Base_MspInit+0x1d8>)
 80012ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012f4:	2340      	movs	r3, #64	@ 0x40
 80012f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001304:	2302      	movs	r3, #2
 8001306:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001308:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800130c:	4619      	mov	r1, r3
 800130e:	4828      	ldr	r0, [pc, #160]	@ (80013b0 <HAL_TIM_Base_MspInit+0x1e8>)
 8001310:	f000 fa7a 	bl	8001808 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001314:	2200      	movs	r2, #0
 8001316:	2100      	movs	r1, #0
 8001318:	201d      	movs	r0, #29
 800131a:	f000 fa3e 	bl	800179a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800131e:	201d      	movs	r0, #29
 8001320:	f000 fa57 	bl	80017d2 <HAL_NVIC_EnableIRQ>
}
 8001324:	e035      	b.n	8001392 <HAL_TIM_Base_MspInit+0x1ca>
  else if(htim_base->Instance==TIM4)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a22      	ldr	r2, [pc, #136]	@ (80013b4 <HAL_TIM_Base_MspInit+0x1ec>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d130      	bne.n	8001392 <HAL_TIM_Base_MspInit+0x1ca>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001330:	4b1b      	ldr	r3, [pc, #108]	@ (80013a0 <HAL_TIM_Base_MspInit+0x1d8>)
 8001332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001334:	4a1a      	ldr	r2, [pc, #104]	@ (80013a0 <HAL_TIM_Base_MspInit+0x1d8>)
 8001336:	f043 0304 	orr.w	r3, r3, #4
 800133a:	6413      	str	r3, [r2, #64]	@ 0x40
 800133c:	4b18      	ldr	r3, [pc, #96]	@ (80013a0 <HAL_TIM_Base_MspInit+0x1d8>)
 800133e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001348:	4b15      	ldr	r3, [pc, #84]	@ (80013a0 <HAL_TIM_Base_MspInit+0x1d8>)
 800134a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134c:	4a14      	ldr	r2, [pc, #80]	@ (80013a0 <HAL_TIM_Base_MspInit+0x1d8>)
 800134e:	f043 0308 	orr.w	r3, r3, #8
 8001352:	6313      	str	r3, [r2, #48]	@ 0x30
 8001354:	4b12      	ldr	r3, [pc, #72]	@ (80013a0 <HAL_TIM_Base_MspInit+0x1d8>)
 8001356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001358:	f003 0308 	and.w	r3, r3, #8
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001360:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001364:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001372:	2302      	movs	r3, #2
 8001374:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001376:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800137a:	4619      	mov	r1, r3
 800137c:	480e      	ldr	r0, [pc, #56]	@ (80013b8 <HAL_TIM_Base_MspInit+0x1f0>)
 800137e:	f000 fa43 	bl	8001808 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	201e      	movs	r0, #30
 8001388:	f000 fa07 	bl	800179a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800138c:	201e      	movs	r0, #30
 800138e:	f000 fa20 	bl	80017d2 <HAL_NVIC_EnableIRQ>
}
 8001392:	bf00      	nop
 8001394:	3740      	adds	r7, #64	@ 0x40
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40010000 	.word	0x40010000
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40020000 	.word	0x40020000
 80013ac:	40000400 	.word	0x40000400
 80013b0:	40020800 	.word	0x40020800
 80013b4:	40000800 	.word	0x40000800
 80013b8:	40020c00 	.word	0x40020c00

080013bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013c0:	bf00      	nop
 80013c2:	e7fd      	b.n	80013c0 <NMI_Handler+0x4>

080013c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <HardFault_Handler+0x4>

080013cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <MemManage_Handler+0x4>

080013d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <BusFault_Handler+0x4>

080013dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <UsageFault_Handler+0x4>

080013e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001412:	f000 f8a3 	bl	800155c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001420:	4802      	ldr	r0, [pc, #8]	@ (800142c <TIM1_CC_IRQHandler+0x10>)
 8001422:	f002 fb3d 	bl	8003aa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	2000007c 	.word	0x2000007c

08001430 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001434:	4802      	ldr	r0, [pc, #8]	@ (8001440 <TIM2_IRQHandler+0x10>)
 8001436:	f002 fb33 	bl	8003aa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200000c8 	.word	0x200000c8

08001444 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001448:	4802      	ldr	r0, [pc, #8]	@ (8001454 <TIM3_IRQHandler+0x10>)
 800144a:	f002 fb29 	bl	8003aa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000114 	.word	0x20000114

08001458 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800145c:	4802      	ldr	r0, [pc, #8]	@ (8001468 <TIM4_IRQHandler+0x10>)
 800145e:	f002 fb1f 	bl	8003aa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000160 	.word	0x20000160

0800146c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001470:	4b06      	ldr	r3, [pc, #24]	@ (800148c <SystemInit+0x20>)
 8001472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001476:	4a05      	ldr	r2, [pc, #20]	@ (800148c <SystemInit+0x20>)
 8001478:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800147c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001490:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001494:	f7ff ffea 	bl	800146c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001498:	480c      	ldr	r0, [pc, #48]	@ (80014cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800149a:	490d      	ldr	r1, [pc, #52]	@ (80014d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800149c:	4a0d      	ldr	r2, [pc, #52]	@ (80014d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a0:	e002      	b.n	80014a8 <LoopCopyDataInit>

080014a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014a6:	3304      	adds	r3, #4

080014a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ac:	d3f9      	bcc.n	80014a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ae:	4a0a      	ldr	r2, [pc, #40]	@ (80014d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014b0:	4c0a      	ldr	r4, [pc, #40]	@ (80014dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80014b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b4:	e001      	b.n	80014ba <LoopFillZerobss>

080014b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b8:	3204      	adds	r2, #4

080014ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014bc:	d3fb      	bcc.n	80014b6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80014be:	f003 f913 	bl	80046e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014c2:	f7ff fa5f 	bl	8000984 <main>
  bx  lr    
 80014c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014c8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80014cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014d4:	08004774 	.word	0x08004774
  ldr r2, =_sbss
 80014d8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014dc:	200001c4 	.word	0x200001c4

080014e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014e0:	e7fe      	b.n	80014e0 <ADC_IRQHandler>

080014e2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e6:	2003      	movs	r0, #3
 80014e8:	f000 f94c 	bl	8001784 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ec:	2000      	movs	r0, #0
 80014ee:	f000 f805 	bl	80014fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014f2:	f7ff fde7 	bl	80010c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001504:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <HAL_InitTick+0x54>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b12      	ldr	r3, [pc, #72]	@ (8001554 <HAL_InitTick+0x58>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4619      	mov	r1, r3
 800150e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001512:	fbb3 f3f1 	udiv	r3, r3, r1
 8001516:	fbb2 f3f3 	udiv	r3, r2, r3
 800151a:	4618      	mov	r0, r3
 800151c:	f000 f967 	bl	80017ee <HAL_SYSTICK_Config>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e00e      	b.n	8001548 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b0f      	cmp	r3, #15
 800152e:	d80a      	bhi.n	8001546 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001530:	2200      	movs	r2, #0
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	f04f 30ff 	mov.w	r0, #4294967295
 8001538:	f000 f92f 	bl	800179a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800153c:	4a06      	ldr	r2, [pc, #24]	@ (8001558 <HAL_InitTick+0x5c>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	e000      	b.n	8001548 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
}
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000000 	.word	0x20000000
 8001554:	20000008 	.word	0x20000008
 8001558:	20000004 	.word	0x20000004

0800155c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001560:	4b06      	ldr	r3, [pc, #24]	@ (800157c <HAL_IncTick+0x20>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <HAL_IncTick+0x24>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4413      	add	r3, r2
 800156c:	4a04      	ldr	r2, [pc, #16]	@ (8001580 <HAL_IncTick+0x24>)
 800156e:	6013      	str	r3, [r2, #0]
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	20000008 	.word	0x20000008
 8001580:	200001c0 	.word	0x200001c0

08001584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return uwTick;
 8001588:	4b03      	ldr	r3, [pc, #12]	@ (8001598 <HAL_GetTick+0x14>)
 800158a:	681b      	ldr	r3, [r3, #0]
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	200001c0 	.word	0x200001c0

0800159c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a4:	f7ff ffee 	bl	8001584 <HAL_GetTick>
 80015a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b4:	d005      	beq.n	80015c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015b6:	4b0a      	ldr	r3, [pc, #40]	@ (80015e0 <HAL_Delay+0x44>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4413      	add	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015c2:	bf00      	nop
 80015c4:	f7ff ffde 	bl	8001584 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d8f7      	bhi.n	80015c4 <HAL_Delay+0x28>
  {
  }
}
 80015d4:	bf00      	nop
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000008 	.word	0x20000008

080015e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001624 <__NVIC_SetPriorityGrouping+0x40>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001600:	4013      	ands	r3, r2
 8001602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800160c:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 800160e:	4313      	orrs	r3, r2
 8001610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001612:	4a04      	ldr	r2, [pc, #16]	@ (8001624 <__NVIC_SetPriorityGrouping+0x40>)
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	60d3      	str	r3, [r2, #12]
}
 8001618:	bf00      	nop
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000ed00 	.word	0xe000ed00
 8001628:	05fa0000 	.word	0x05fa0000

0800162c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001630:	4b04      	ldr	r3, [pc, #16]	@ (8001644 <__NVIC_GetPriorityGrouping+0x18>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	0a1b      	lsrs	r3, r3, #8
 8001636:	f003 0307 	and.w	r3, r3, #7
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	2b00      	cmp	r3, #0
 8001658:	db0b      	blt.n	8001672 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	f003 021f 	and.w	r2, r3, #31
 8001660:	4907      	ldr	r1, [pc, #28]	@ (8001680 <__NVIC_EnableIRQ+0x38>)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	095b      	lsrs	r3, r3, #5
 8001668:	2001      	movs	r0, #1
 800166a:	fa00 f202 	lsl.w	r2, r0, r2
 800166e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000e100 	.word	0xe000e100

08001684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	6039      	str	r1, [r7, #0]
 800168e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001694:	2b00      	cmp	r3, #0
 8001696:	db0a      	blt.n	80016ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	b2da      	uxtb	r2, r3
 800169c:	490c      	ldr	r1, [pc, #48]	@ (80016d0 <__NVIC_SetPriority+0x4c>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	0112      	lsls	r2, r2, #4
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	440b      	add	r3, r1
 80016a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016ac:	e00a      	b.n	80016c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4908      	ldr	r1, [pc, #32]	@ (80016d4 <__NVIC_SetPriority+0x50>)
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	3b04      	subs	r3, #4
 80016bc:	0112      	lsls	r2, r2, #4
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	440b      	add	r3, r1
 80016c2:	761a      	strb	r2, [r3, #24]
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000e100 	.word	0xe000e100
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d8:	b480      	push	{r7}
 80016da:	b089      	sub	sp, #36	@ 0x24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f1c3 0307 	rsb	r3, r3, #7
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	bf28      	it	cs
 80016f6:	2304      	movcs	r3, #4
 80016f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3304      	adds	r3, #4
 80016fe:	2b06      	cmp	r3, #6
 8001700:	d902      	bls.n	8001708 <NVIC_EncodePriority+0x30>
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	3b03      	subs	r3, #3
 8001706:	e000      	b.n	800170a <NVIC_EncodePriority+0x32>
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	f04f 32ff 	mov.w	r2, #4294967295
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43da      	mvns	r2, r3
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	401a      	ands	r2, r3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001720:	f04f 31ff 	mov.w	r1, #4294967295
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	fa01 f303 	lsl.w	r3, r1, r3
 800172a:	43d9      	mvns	r1, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	4313      	orrs	r3, r2
         );
}
 8001732:	4618      	mov	r0, r3
 8001734:	3724      	adds	r7, #36	@ 0x24
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3b01      	subs	r3, #1
 800174c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001750:	d301      	bcc.n	8001756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001752:	2301      	movs	r3, #1
 8001754:	e00f      	b.n	8001776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001756:	4a0a      	ldr	r2, [pc, #40]	@ (8001780 <SysTick_Config+0x40>)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3b01      	subs	r3, #1
 800175c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800175e:	210f      	movs	r1, #15
 8001760:	f04f 30ff 	mov.w	r0, #4294967295
 8001764:	f7ff ff8e 	bl	8001684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001768:	4b05      	ldr	r3, [pc, #20]	@ (8001780 <SysTick_Config+0x40>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800176e:	4b04      	ldr	r3, [pc, #16]	@ (8001780 <SysTick_Config+0x40>)
 8001770:	2207      	movs	r2, #7
 8001772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	e000e010 	.word	0xe000e010

08001784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff ff29 	bl	80015e4 <__NVIC_SetPriorityGrouping>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800179a:	b580      	push	{r7, lr}
 800179c:	b086      	sub	sp, #24
 800179e:	af00      	add	r7, sp, #0
 80017a0:	4603      	mov	r3, r0
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	607a      	str	r2, [r7, #4]
 80017a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017ac:	f7ff ff3e 	bl	800162c <__NVIC_GetPriorityGrouping>
 80017b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	68b9      	ldr	r1, [r7, #8]
 80017b6:	6978      	ldr	r0, [r7, #20]
 80017b8:	f7ff ff8e 	bl	80016d8 <NVIC_EncodePriority>
 80017bc:	4602      	mov	r2, r0
 80017be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c2:	4611      	mov	r1, r2
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ff5d 	bl	8001684 <__NVIC_SetPriority>
}
 80017ca:	bf00      	nop
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	4603      	mov	r3, r0
 80017da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff31 	bl	8001648 <__NVIC_EnableIRQ>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff ffa2 	bl	8001740 <SysTick_Config>
 80017fc:	4603      	mov	r3, r0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001808:	b480      	push	{r7}
 800180a:	b089      	sub	sp, #36	@ 0x24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800181e:	2300      	movs	r3, #0
 8001820:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
 8001826:	e175      	b.n	8001b14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001828:	2201      	movs	r2, #1
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	4013      	ands	r3, r2
 800183a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	429a      	cmp	r2, r3
 8001842:	f040 8164 	bne.w	8001b0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	2b01      	cmp	r3, #1
 8001850:	d005      	beq.n	800185e <HAL_GPIO_Init+0x56>
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f003 0303 	and.w	r3, r3, #3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d130      	bne.n	80018c0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	2203      	movs	r2, #3
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4013      	ands	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	68da      	ldr	r2, [r3, #12]
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4313      	orrs	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001894:	2201      	movs	r2, #1
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	091b      	lsrs	r3, r3, #4
 80018aa:	f003 0201 	and.w	r2, r3, #1
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 0303 	and.w	r3, r3, #3
 80018c8:	2b03      	cmp	r3, #3
 80018ca:	d017      	beq.n	80018fc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	2203      	movs	r2, #3
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 0303 	and.w	r3, r3, #3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d123      	bne.n	8001950 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	08da      	lsrs	r2, r3, #3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3208      	adds	r2, #8
 8001910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001914:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	220f      	movs	r2, #15
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	691a      	ldr	r2, [r3, #16]
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	08da      	lsrs	r2, r3, #3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	3208      	adds	r2, #8
 800194a:	69b9      	ldr	r1, [r7, #24]
 800194c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	2203      	movs	r2, #3
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4013      	ands	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0203 	and.w	r2, r3, #3
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 80be 	beq.w	8001b0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001992:	4b66      	ldr	r3, [pc, #408]	@ (8001b2c <HAL_GPIO_Init+0x324>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001996:	4a65      	ldr	r2, [pc, #404]	@ (8001b2c <HAL_GPIO_Init+0x324>)
 8001998:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800199c:	6453      	str	r3, [r2, #68]	@ 0x44
 800199e:	4b63      	ldr	r3, [pc, #396]	@ (8001b2c <HAL_GPIO_Init+0x324>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80019aa:	4a61      	ldr	r2, [pc, #388]	@ (8001b30 <HAL_GPIO_Init+0x328>)
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	089b      	lsrs	r3, r3, #2
 80019b0:	3302      	adds	r3, #2
 80019b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	220f      	movs	r2, #15
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a58      	ldr	r2, [pc, #352]	@ (8001b34 <HAL_GPIO_Init+0x32c>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d037      	beq.n	8001a46 <HAL_GPIO_Init+0x23e>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a57      	ldr	r2, [pc, #348]	@ (8001b38 <HAL_GPIO_Init+0x330>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d031      	beq.n	8001a42 <HAL_GPIO_Init+0x23a>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a56      	ldr	r2, [pc, #344]	@ (8001b3c <HAL_GPIO_Init+0x334>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d02b      	beq.n	8001a3e <HAL_GPIO_Init+0x236>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a55      	ldr	r2, [pc, #340]	@ (8001b40 <HAL_GPIO_Init+0x338>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d025      	beq.n	8001a3a <HAL_GPIO_Init+0x232>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a54      	ldr	r2, [pc, #336]	@ (8001b44 <HAL_GPIO_Init+0x33c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d01f      	beq.n	8001a36 <HAL_GPIO_Init+0x22e>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a53      	ldr	r2, [pc, #332]	@ (8001b48 <HAL_GPIO_Init+0x340>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d019      	beq.n	8001a32 <HAL_GPIO_Init+0x22a>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a52      	ldr	r2, [pc, #328]	@ (8001b4c <HAL_GPIO_Init+0x344>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d013      	beq.n	8001a2e <HAL_GPIO_Init+0x226>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a51      	ldr	r2, [pc, #324]	@ (8001b50 <HAL_GPIO_Init+0x348>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d00d      	beq.n	8001a2a <HAL_GPIO_Init+0x222>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a50      	ldr	r2, [pc, #320]	@ (8001b54 <HAL_GPIO_Init+0x34c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d007      	beq.n	8001a26 <HAL_GPIO_Init+0x21e>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a4f      	ldr	r2, [pc, #316]	@ (8001b58 <HAL_GPIO_Init+0x350>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d101      	bne.n	8001a22 <HAL_GPIO_Init+0x21a>
 8001a1e:	2309      	movs	r3, #9
 8001a20:	e012      	b.n	8001a48 <HAL_GPIO_Init+0x240>
 8001a22:	230a      	movs	r3, #10
 8001a24:	e010      	b.n	8001a48 <HAL_GPIO_Init+0x240>
 8001a26:	2308      	movs	r3, #8
 8001a28:	e00e      	b.n	8001a48 <HAL_GPIO_Init+0x240>
 8001a2a:	2307      	movs	r3, #7
 8001a2c:	e00c      	b.n	8001a48 <HAL_GPIO_Init+0x240>
 8001a2e:	2306      	movs	r3, #6
 8001a30:	e00a      	b.n	8001a48 <HAL_GPIO_Init+0x240>
 8001a32:	2305      	movs	r3, #5
 8001a34:	e008      	b.n	8001a48 <HAL_GPIO_Init+0x240>
 8001a36:	2304      	movs	r3, #4
 8001a38:	e006      	b.n	8001a48 <HAL_GPIO_Init+0x240>
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e004      	b.n	8001a48 <HAL_GPIO_Init+0x240>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e002      	b.n	8001a48 <HAL_GPIO_Init+0x240>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <HAL_GPIO_Init+0x240>
 8001a46:	2300      	movs	r3, #0
 8001a48:	69fa      	ldr	r2, [r7, #28]
 8001a4a:	f002 0203 	and.w	r2, r2, #3
 8001a4e:	0092      	lsls	r2, r2, #2
 8001a50:	4093      	lsls	r3, r2
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a58:	4935      	ldr	r1, [pc, #212]	@ (8001b30 <HAL_GPIO_Init+0x328>)
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	089b      	lsrs	r3, r3, #2
 8001a5e:	3302      	adds	r3, #2
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a66:	4b3d      	ldr	r3, [pc, #244]	@ (8001b5c <HAL_GPIO_Init+0x354>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4013      	ands	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a8a:	4a34      	ldr	r2, [pc, #208]	@ (8001b5c <HAL_GPIO_Init+0x354>)
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a90:	4b32      	ldr	r3, [pc, #200]	@ (8001b5c <HAL_GPIO_Init+0x354>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d003      	beq.n	8001ab4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ab4:	4a29      	ldr	r2, [pc, #164]	@ (8001b5c <HAL_GPIO_Init+0x354>)
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001aba:	4b28      	ldr	r3, [pc, #160]	@ (8001b5c <HAL_GPIO_Init+0x354>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ade:	4a1f      	ldr	r2, [pc, #124]	@ (8001b5c <HAL_GPIO_Init+0x354>)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b5c <HAL_GPIO_Init+0x354>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b08:	4a14      	ldr	r2, [pc, #80]	@ (8001b5c <HAL_GPIO_Init+0x354>)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3301      	adds	r3, #1
 8001b12:	61fb      	str	r3, [r7, #28]
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	2b0f      	cmp	r3, #15
 8001b18:	f67f ae86 	bls.w	8001828 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	bf00      	nop
 8001b20:	3724      	adds	r7, #36	@ 0x24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40013800 	.word	0x40013800
 8001b34:	40020000 	.word	0x40020000
 8001b38:	40020400 	.word	0x40020400
 8001b3c:	40020800 	.word	0x40020800
 8001b40:	40020c00 	.word	0x40020c00
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40021400 	.word	0x40021400
 8001b4c:	40021800 	.word	0x40021800
 8001b50:	40021c00 	.word	0x40021c00
 8001b54:	40022000 	.word	0x40022000
 8001b58:	40022400 	.word	0x40022400
 8001b5c:	40013c00 	.word	0x40013c00

08001b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	807b      	strh	r3, [r7, #2]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b70:	787b      	ldrb	r3, [r7, #1]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b76:	887a      	ldrh	r2, [r7, #2]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001b7c:	e003      	b.n	8001b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001b7e:	887b      	ldrh	r3, [r7, #2]
 8001b80:	041a      	lsls	r2, r3, #16
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	619a      	str	r2, [r3, #24]
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
	...

08001b94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e08b      	b.n	8001cbe <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d106      	bne.n	8001bc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff faa6 	bl	800110c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2224      	movs	r2, #36	@ 0x24
 8001bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f022 0201 	bic.w	r2, r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001be4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001bf4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d107      	bne.n	8001c0e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	e006      	b.n	8001c1c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001c1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d108      	bne.n	8001c36 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	e007      	b.n	8001c46 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6859      	ldr	r1, [r3, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc8 <HAL_I2C_Init+0x134>)
 8001c52:	430b      	orrs	r3, r1
 8001c54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68da      	ldr	r2, [r3, #12]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	691a      	ldr	r2, [r3, #16]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	69d9      	ldr	r1, [r3, #28]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a1a      	ldr	r2, [r3, #32]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0201 	orr.w	r2, r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2220      	movs	r2, #32
 8001caa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	02008000 	.word	0x02008000

08001ccc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af02      	add	r7, sp, #8
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	607a      	str	r2, [r7, #4]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	460b      	mov	r3, r1
 8001cda:	817b      	strh	r3, [r7, #10]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b20      	cmp	r3, #32
 8001cea:	f040 80fd 	bne.w	8001ee8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d101      	bne.n	8001cfc <HAL_I2C_Master_Transmit+0x30>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	e0f6      	b.n	8001eea <HAL_I2C_Master_Transmit+0x21e>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d04:	f7ff fc3e 	bl	8001584 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	2319      	movs	r3, #25
 8001d10:	2201      	movs	r2, #1
 8001d12:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f000 f914 	bl	8001f44 <I2C_WaitOnFlagUntilTimeout>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e0e1      	b.n	8001eea <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2221      	movs	r2, #33	@ 0x21
 8001d2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2210      	movs	r2, #16
 8001d32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	893a      	ldrh	r2, [r7, #8]
 8001d46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	2bff      	cmp	r3, #255	@ 0xff
 8001d56:	d906      	bls.n	8001d66 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	22ff      	movs	r2, #255	@ 0xff
 8001d5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001d5e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	e007      	b.n	8001d76 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001d70:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d74:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d024      	beq.n	8001dc8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d82:	781a      	ldrb	r2, [r3, #0]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8e:	1c5a      	adds	r2, r3, #1
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001da6:	3b01      	subs	r3, #1
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	3301      	adds	r3, #1
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	8979      	ldrh	r1, [r7, #10]
 8001dba:	4b4e      	ldr	r3, [pc, #312]	@ (8001ef4 <HAL_I2C_Master_Transmit+0x228>)
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f000 fa83 	bl	80022cc <I2C_TransferConfig>
 8001dc6:	e066      	b.n	8001e96 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	8979      	ldrh	r1, [r7, #10]
 8001dd0:	4b48      	ldr	r3, [pc, #288]	@ (8001ef4 <HAL_I2C_Master_Transmit+0x228>)
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f000 fa78 	bl	80022cc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001ddc:	e05b      	b.n	8001e96 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	6a39      	ldr	r1, [r7, #32]
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f000 f907 	bl	8001ff6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e07b      	b.n	8001eea <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df6:	781a      	ldrb	r2, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e02:	1c5a      	adds	r2, r3, #1
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d034      	beq.n	8001e96 <HAL_I2C_Master_Transmit+0x1ca>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d130      	bne.n	8001e96 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	6a3b      	ldr	r3, [r7, #32]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2180      	movs	r1, #128	@ 0x80
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 f880 	bl	8001f44 <I2C_WaitOnFlagUntilTimeout>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e04d      	b.n	8001eea <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	2bff      	cmp	r3, #255	@ 0xff
 8001e56:	d90e      	bls.n	8001e76 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	22ff      	movs	r2, #255	@ 0xff
 8001e5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	8979      	ldrh	r1, [r7, #10]
 8001e66:	2300      	movs	r3, #0
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f000 fa2c 	bl	80022cc <I2C_TransferConfig>
 8001e74:	e00f      	b.n	8001e96 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	8979      	ldrh	r1, [r7, #10]
 8001e88:	2300      	movs	r3, #0
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	f000 fa1b 	bl	80022cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d19e      	bne.n	8001dde <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	6a39      	ldr	r1, [r7, #32]
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f000 f8ed 	bl	8002084 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e01a      	b.n	8001eea <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2220      	movs	r2, #32
 8001eba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6859      	ldr	r1, [r3, #4]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef8 <HAL_I2C_Master_Transmit+0x22c>)
 8001ec8:	400b      	ands	r3, r1
 8001eca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2220      	movs	r2, #32
 8001ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	e000      	b.n	8001eea <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001ee8:	2302      	movs	r3, #2
  }
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	80002000 	.word	0x80002000
 8001ef8:	fe00e800 	.word	0xfe00e800

08001efc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d103      	bne.n	8001f1a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2200      	movs	r2, #0
 8001f18:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d007      	beq.n	8001f38 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	699a      	ldr	r2, [r3, #24]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0201 	orr.w	r2, r2, #1
 8001f36:	619a      	str	r2, [r3, #24]
  }
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	603b      	str	r3, [r7, #0]
 8001f50:	4613      	mov	r3, r2
 8001f52:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f54:	e03b      	b.n	8001fce <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	6839      	ldr	r1, [r7, #0]
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f000 f8d6 	bl	800210c <I2C_IsErrorOccurred>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e041      	b.n	8001fee <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f70:	d02d      	beq.n	8001fce <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f72:	f7ff fb07 	bl	8001584 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d302      	bcc.n	8001f88 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d122      	bne.n	8001fce <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	699a      	ldr	r2, [r3, #24]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	4013      	ands	r3, r2
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	bf0c      	ite	eq
 8001f98:	2301      	moveq	r3, #1
 8001f9a:	2300      	movne	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d113      	bne.n	8001fce <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001faa:	f043 0220 	orr.w	r2, r3, #32
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e00f      	b.n	8001fee <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	699a      	ldr	r2, [r3, #24]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	68ba      	ldr	r2, [r7, #8]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	bf0c      	ite	eq
 8001fde:	2301      	moveq	r3, #1
 8001fe0:	2300      	movne	r3, #0
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d0b4      	beq.n	8001f56 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b084      	sub	sp, #16
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	60f8      	str	r0, [r7, #12]
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002002:	e033      	b.n	800206c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	68b9      	ldr	r1, [r7, #8]
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f000 f87f 	bl	800210c <I2C_IsErrorOccurred>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e031      	b.n	800207c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800201e:	d025      	beq.n	800206c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002020:	f7ff fab0 	bl	8001584 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	429a      	cmp	r2, r3
 800202e:	d302      	bcc.n	8002036 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d11a      	bne.n	800206c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b02      	cmp	r3, #2
 8002042:	d013      	beq.n	800206c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002048:	f043 0220 	orr.w	r2, r3, #32
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2220      	movs	r2, #32
 8002054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e007      	b.n	800207c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b02      	cmp	r3, #2
 8002078:	d1c4      	bne.n	8002004 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002090:	e02f      	b.n	80020f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	68b9      	ldr	r1, [r7, #8]
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 f838 	bl	800210c <I2C_IsErrorOccurred>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e02d      	b.n	8002102 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020a6:	f7ff fa6d 	bl	8001584 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d302      	bcc.n	80020bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d11a      	bne.n	80020f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	f003 0320 	and.w	r3, r3, #32
 80020c6:	2b20      	cmp	r3, #32
 80020c8:	d013      	beq.n	80020f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ce:	f043 0220 	orr.w	r2, r3, #32
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2220      	movs	r2, #32
 80020da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e007      	b.n	8002102 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f003 0320 	and.w	r3, r3, #32
 80020fc:	2b20      	cmp	r3, #32
 80020fe:	d1c8      	bne.n	8002092 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08a      	sub	sp, #40	@ 0x28
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002126:	2300      	movs	r3, #0
 8002128:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	f003 0310 	and.w	r3, r3, #16
 8002134:	2b00      	cmp	r3, #0
 8002136:	d068      	beq.n	800220a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2210      	movs	r2, #16
 800213e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002140:	e049      	b.n	80021d6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002148:	d045      	beq.n	80021d6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800214a:	f7ff fa1b 	bl	8001584 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	429a      	cmp	r2, r3
 8002158:	d302      	bcc.n	8002160 <I2C_IsErrorOccurred+0x54>
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d13a      	bne.n	80021d6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800216a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002172:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800217e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002182:	d121      	bne.n	80021c8 <I2C_IsErrorOccurred+0xbc>
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800218a:	d01d      	beq.n	80021c8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800218c:	7cfb      	ldrb	r3, [r7, #19]
 800218e:	2b20      	cmp	r3, #32
 8002190:	d01a      	beq.n	80021c8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80021a0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80021a2:	f7ff f9ef 	bl	8001584 <HAL_GetTick>
 80021a6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021a8:	e00e      	b.n	80021c8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80021aa:	f7ff f9eb 	bl	8001584 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b19      	cmp	r3, #25
 80021b6:	d907      	bls.n	80021c8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80021b8:	6a3b      	ldr	r3, [r7, #32]
 80021ba:	f043 0320 	orr.w	r3, r3, #32
 80021be:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80021c6:	e006      	b.n	80021d6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	f003 0320 	and.w	r3, r3, #32
 80021d2:	2b20      	cmp	r3, #32
 80021d4:	d1e9      	bne.n	80021aa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	f003 0320 	and.w	r3, r3, #32
 80021e0:	2b20      	cmp	r3, #32
 80021e2:	d003      	beq.n	80021ec <I2C_IsErrorOccurred+0xe0>
 80021e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0aa      	beq.n	8002142 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80021ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d103      	bne.n	80021fc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2220      	movs	r2, #32
 80021fa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80021fc:	6a3b      	ldr	r3, [r7, #32]
 80021fe:	f043 0304 	orr.w	r3, r3, #4
 8002202:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00b      	beq.n	8002234 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800221c:	6a3b      	ldr	r3, [r7, #32]
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800222c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00b      	beq.n	8002256 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	f043 0308 	orr.w	r3, r3, #8
 8002244:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800224e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00b      	beq.n	8002278 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002260:	6a3b      	ldr	r3, [r7, #32]
 8002262:	f043 0302 	orr.w	r3, r3, #2
 8002266:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002270:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002278:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800227c:	2b00      	cmp	r3, #0
 800227e:	d01c      	beq.n	80022ba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f7ff fe3b 	bl	8001efc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6859      	ldr	r1, [r3, #4]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4b0d      	ldr	r3, [pc, #52]	@ (80022c8 <I2C_IsErrorOccurred+0x1bc>)
 8002292:	400b      	ands	r3, r1
 8002294:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	431a      	orrs	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2220      	movs	r2, #32
 80022a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80022ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3728      	adds	r7, #40	@ 0x28
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	fe00e800 	.word	0xfe00e800

080022cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b087      	sub	sp, #28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	607b      	str	r3, [r7, #4]
 80022d6:	460b      	mov	r3, r1
 80022d8:	817b      	strh	r3, [r7, #10]
 80022da:	4613      	mov	r3, r2
 80022dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022de:	897b      	ldrh	r3, [r7, #10]
 80022e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80022e4:	7a7b      	ldrb	r3, [r7, #9]
 80022e6:	041b      	lsls	r3, r3, #16
 80022e8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022ec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022fa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	0d5b      	lsrs	r3, r3, #21
 8002306:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800230a:	4b08      	ldr	r3, [pc, #32]	@ (800232c <I2C_TransferConfig+0x60>)
 800230c:	430b      	orrs	r3, r1
 800230e:	43db      	mvns	r3, r3
 8002310:	ea02 0103 	and.w	r1, r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	430a      	orrs	r2, r1
 800231c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800231e:	bf00      	nop
 8002320:	371c      	adds	r7, #28
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	03ff63ff 	.word	0x03ff63ff

08002330 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b20      	cmp	r3, #32
 8002344:	d138      	bne.n	80023b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800234c:	2b01      	cmp	r3, #1
 800234e:	d101      	bne.n	8002354 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002350:	2302      	movs	r3, #2
 8002352:	e032      	b.n	80023ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2224      	movs	r2, #36	@ 0x24
 8002360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 0201 	bic.w	r2, r2, #1
 8002372:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002382:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6819      	ldr	r1, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0201 	orr.w	r2, r2, #1
 80023a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	e000      	b.n	80023ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80023b8:	2302      	movs	r3, #2
  }
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b085      	sub	sp, #20
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
 80023ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b20      	cmp	r3, #32
 80023da:	d139      	bne.n	8002450 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d101      	bne.n	80023ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023e6:	2302      	movs	r3, #2
 80023e8:	e033      	b.n	8002452 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2224      	movs	r2, #36	@ 0x24
 80023f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0201 	bic.w	r2, r2, #1
 8002408:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002418:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	021b      	lsls	r3, r3, #8
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	4313      	orrs	r3, r2
 8002422:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0201 	orr.w	r2, r2, #1
 800243a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2220      	movs	r2, #32
 8002440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	e000      	b.n	8002452 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002450:	2302      	movs	r3, #2
  }
}
 8002452:	4618      	mov	r0, r3
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
	...

08002460 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002466:	2300      	movs	r3, #0
 8002468:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800246a:	4b23      	ldr	r3, [pc, #140]	@ (80024f8 <HAL_PWREx_EnableOverDrive+0x98>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246e:	4a22      	ldr	r2, [pc, #136]	@ (80024f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002470:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002474:	6413      	str	r3, [r2, #64]	@ 0x40
 8002476:	4b20      	ldr	r3, [pc, #128]	@ (80024f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800247e:	603b      	str	r3, [r7, #0]
 8002480:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002482:	4b1e      	ldr	r3, [pc, #120]	@ (80024fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a1d      	ldr	r2, [pc, #116]	@ (80024fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002488:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800248c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800248e:	f7ff f879 	bl	8001584 <HAL_GetTick>
 8002492:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002494:	e009      	b.n	80024aa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002496:	f7ff f875 	bl	8001584 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024a4:	d901      	bls.n	80024aa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e022      	b.n	80024f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80024aa:	4b14      	ldr	r3, [pc, #80]	@ (80024fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024b6:	d1ee      	bne.n	8002496 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80024b8:	4b10      	ldr	r3, [pc, #64]	@ (80024fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a0f      	ldr	r2, [pc, #60]	@ (80024fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80024be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024c4:	f7ff f85e 	bl	8001584 <HAL_GetTick>
 80024c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024ca:	e009      	b.n	80024e0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024cc:	f7ff f85a 	bl	8001584 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024da:	d901      	bls.n	80024e0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e007      	b.n	80024f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024e0:	4b06      	ldr	r3, [pc, #24]	@ (80024fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80024ec:	d1ee      	bne.n	80024cc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40007000 	.word	0x40007000

08002500 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002508:	2300      	movs	r3, #0
 800250a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e29b      	b.n	8002a4e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 8087 	beq.w	8002632 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002524:	4b96      	ldr	r3, [pc, #600]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 030c 	and.w	r3, r3, #12
 800252c:	2b04      	cmp	r3, #4
 800252e:	d00c      	beq.n	800254a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002530:	4b93      	ldr	r3, [pc, #588]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 030c 	and.w	r3, r3, #12
 8002538:	2b08      	cmp	r3, #8
 800253a:	d112      	bne.n	8002562 <HAL_RCC_OscConfig+0x62>
 800253c:	4b90      	ldr	r3, [pc, #576]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002544:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002548:	d10b      	bne.n	8002562 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800254a:	4b8d      	ldr	r3, [pc, #564]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d06c      	beq.n	8002630 <HAL_RCC_OscConfig+0x130>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d168      	bne.n	8002630 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e275      	b.n	8002a4e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800256a:	d106      	bne.n	800257a <HAL_RCC_OscConfig+0x7a>
 800256c:	4b84      	ldr	r3, [pc, #528]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a83      	ldr	r2, [pc, #524]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 8002572:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	e02e      	b.n	80025d8 <HAL_RCC_OscConfig+0xd8>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10c      	bne.n	800259c <HAL_RCC_OscConfig+0x9c>
 8002582:	4b7f      	ldr	r3, [pc, #508]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a7e      	ldr	r2, [pc, #504]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 8002588:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	4b7c      	ldr	r3, [pc, #496]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a7b      	ldr	r2, [pc, #492]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 8002594:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	e01d      	b.n	80025d8 <HAL_RCC_OscConfig+0xd8>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025a4:	d10c      	bne.n	80025c0 <HAL_RCC_OscConfig+0xc0>
 80025a6:	4b76      	ldr	r3, [pc, #472]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a75      	ldr	r2, [pc, #468]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 80025ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	4b73      	ldr	r3, [pc, #460]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a72      	ldr	r2, [pc, #456]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 80025b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	e00b      	b.n	80025d8 <HAL_RCC_OscConfig+0xd8>
 80025c0:	4b6f      	ldr	r3, [pc, #444]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a6e      	ldr	r2, [pc, #440]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 80025c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ca:	6013      	str	r3, [r2, #0]
 80025cc:	4b6c      	ldr	r3, [pc, #432]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a6b      	ldr	r2, [pc, #428]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 80025d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d013      	beq.n	8002608 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e0:	f7fe ffd0 	bl	8001584 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e8:	f7fe ffcc 	bl	8001584 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b64      	cmp	r3, #100	@ 0x64
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e229      	b.n	8002a4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fa:	4b61      	ldr	r3, [pc, #388]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0f0      	beq.n	80025e8 <HAL_RCC_OscConfig+0xe8>
 8002606:	e014      	b.n	8002632 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002608:	f7fe ffbc 	bl	8001584 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002610:	f7fe ffb8 	bl	8001584 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b64      	cmp	r3, #100	@ 0x64
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e215      	b.n	8002a4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002622:	4b57      	ldr	r3, [pc, #348]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f0      	bne.n	8002610 <HAL_RCC_OscConfig+0x110>
 800262e:	e000      	b.n	8002632 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d069      	beq.n	8002712 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800263e:	4b50      	ldr	r3, [pc, #320]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 030c 	and.w	r3, r3, #12
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00b      	beq.n	8002662 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800264a:	4b4d      	ldr	r3, [pc, #308]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 030c 	and.w	r3, r3, #12
 8002652:	2b08      	cmp	r3, #8
 8002654:	d11c      	bne.n	8002690 <HAL_RCC_OscConfig+0x190>
 8002656:	4b4a      	ldr	r3, [pc, #296]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d116      	bne.n	8002690 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002662:	4b47      	ldr	r3, [pc, #284]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d005      	beq.n	800267a <HAL_RCC_OscConfig+0x17a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d001      	beq.n	800267a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e1e9      	b.n	8002a4e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800267a:	4b41      	ldr	r3, [pc, #260]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	493d      	ldr	r1, [pc, #244]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 800268a:	4313      	orrs	r3, r2
 800268c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800268e:	e040      	b.n	8002712 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d023      	beq.n	80026e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002698:	4b39      	ldr	r3, [pc, #228]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a38      	ldr	r2, [pc, #224]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a4:	f7fe ff6e 	bl	8001584 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ac:	f7fe ff6a 	bl	8001584 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e1c7      	b.n	8002a4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026be:	4b30      	ldr	r3, [pc, #192]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4929      	ldr	r1, [pc, #164]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	600b      	str	r3, [r1, #0]
 80026de:	e018      	b.n	8002712 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026e0:	4b27      	ldr	r3, [pc, #156]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a26      	ldr	r2, [pc, #152]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 80026e6:	f023 0301 	bic.w	r3, r3, #1
 80026ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ec:	f7fe ff4a 	bl	8001584 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026f4:	f7fe ff46 	bl	8001584 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e1a3      	b.n	8002a4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002706:	4b1e      	ldr	r3, [pc, #120]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1f0      	bne.n	80026f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b00      	cmp	r3, #0
 800271c:	d038      	beq.n	8002790 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d019      	beq.n	800275a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002726:	4b16      	ldr	r3, [pc, #88]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 8002728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800272a:	4a15      	ldr	r2, [pc, #84]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002732:	f7fe ff27 	bl	8001584 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800273a:	f7fe ff23 	bl	8001584 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e180      	b.n	8002a4e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274c:	4b0c      	ldr	r3, [pc, #48]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 800274e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0f0      	beq.n	800273a <HAL_RCC_OscConfig+0x23a>
 8002758:	e01a      	b.n	8002790 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800275a:	4b09      	ldr	r3, [pc, #36]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 800275c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800275e:	4a08      	ldr	r2, [pc, #32]	@ (8002780 <HAL_RCC_OscConfig+0x280>)
 8002760:	f023 0301 	bic.w	r3, r3, #1
 8002764:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002766:	f7fe ff0d 	bl	8001584 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800276c:	e00a      	b.n	8002784 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800276e:	f7fe ff09 	bl	8001584 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d903      	bls.n	8002784 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e166      	b.n	8002a4e <HAL_RCC_OscConfig+0x54e>
 8002780:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002784:	4b92      	ldr	r3, [pc, #584]	@ (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 8002786:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1ee      	bne.n	800276e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 80a4 	beq.w	80028e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800279e:	4b8c      	ldr	r3, [pc, #560]	@ (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10d      	bne.n	80027c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80027aa:	4b89      	ldr	r3, [pc, #548]	@ (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ae:	4a88      	ldr	r2, [pc, #544]	@ (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 80027b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027b6:	4b86      	ldr	r3, [pc, #536]	@ (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027c2:	2301      	movs	r3, #1
 80027c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027c6:	4b83      	ldr	r3, [pc, #524]	@ (80029d4 <HAL_RCC_OscConfig+0x4d4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d118      	bne.n	8002804 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80027d2:	4b80      	ldr	r3, [pc, #512]	@ (80029d4 <HAL_RCC_OscConfig+0x4d4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a7f      	ldr	r2, [pc, #508]	@ (80029d4 <HAL_RCC_OscConfig+0x4d4>)
 80027d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027de:	f7fe fed1 	bl	8001584 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e6:	f7fe fecd 	bl	8001584 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b64      	cmp	r3, #100	@ 0x64
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e12a      	b.n	8002a4e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027f8:	4b76      	ldr	r3, [pc, #472]	@ (80029d4 <HAL_RCC_OscConfig+0x4d4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0f0      	beq.n	80027e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d106      	bne.n	800281a <HAL_RCC_OscConfig+0x31a>
 800280c:	4b70      	ldr	r3, [pc, #448]	@ (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 800280e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002810:	4a6f      	ldr	r2, [pc, #444]	@ (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	6713      	str	r3, [r2, #112]	@ 0x70
 8002818:	e02d      	b.n	8002876 <HAL_RCC_OscConfig+0x376>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10c      	bne.n	800283c <HAL_RCC_OscConfig+0x33c>
 8002822:	4b6b      	ldr	r3, [pc, #428]	@ (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 8002824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002826:	4a6a      	ldr	r2, [pc, #424]	@ (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 8002828:	f023 0301 	bic.w	r3, r3, #1
 800282c:	6713      	str	r3, [r2, #112]	@ 0x70
 800282e:	4b68      	ldr	r3, [pc, #416]	@ (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 8002830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002832:	4a67      	ldr	r2, [pc, #412]	@ (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 8002834:	f023 0304 	bic.w	r3, r3, #4
 8002838:	6713      	str	r3, [r2, #112]	@ 0x70
 800283a:	e01c      	b.n	8002876 <HAL_RCC_OscConfig+0x376>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	2b05      	cmp	r3, #5
 8002842:	d10c      	bne.n	800285e <HAL_RCC_OscConfig+0x35e>
 8002844:	4b62      	ldr	r3, [pc, #392]	@ (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 8002846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002848:	4a61      	ldr	r2, [pc, #388]	@ (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 800284a:	f043 0304 	orr.w	r3, r3, #4
 800284e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002850:	4b5f      	ldr	r3, [pc, #380]	@ (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 8002852:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002854:	4a5e      	ldr	r2, [pc, #376]	@ (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	6713      	str	r3, [r2, #112]	@ 0x70
 800285c:	e00b      	b.n	8002876 <HAL_RCC_OscConfig+0x376>
 800285e:	4b5c      	ldr	r3, [pc, #368]	@ (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 8002860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002862:	4a5b      	ldr	r2, [pc, #364]	@ (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 8002864:	f023 0301 	bic.w	r3, r3, #1
 8002868:	6713      	str	r3, [r2, #112]	@ 0x70
 800286a:	4b59      	ldr	r3, [pc, #356]	@ (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 800286c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800286e:	4a58      	ldr	r2, [pc, #352]	@ (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 8002870:	f023 0304 	bic.w	r3, r3, #4
 8002874:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d015      	beq.n	80028aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287e:	f7fe fe81 	bl	8001584 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002884:	e00a      	b.n	800289c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002886:	f7fe fe7d 	bl	8001584 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002894:	4293      	cmp	r3, r2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e0d8      	b.n	8002a4e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800289c:	4b4c      	ldr	r3, [pc, #304]	@ (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 800289e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0ee      	beq.n	8002886 <HAL_RCC_OscConfig+0x386>
 80028a8:	e014      	b.n	80028d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028aa:	f7fe fe6b 	bl	8001584 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b0:	e00a      	b.n	80028c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b2:	f7fe fe67 	bl	8001584 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e0c2      	b.n	8002a4e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c8:	4b41      	ldr	r3, [pc, #260]	@ (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 80028ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1ee      	bne.n	80028b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028d4:	7dfb      	ldrb	r3, [r7, #23]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d105      	bne.n	80028e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028da:	4b3d      	ldr	r3, [pc, #244]	@ (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028de:	4a3c      	ldr	r2, [pc, #240]	@ (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 80028e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028e4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 80ae 	beq.w	8002a4c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028f0:	4b37      	ldr	r3, [pc, #220]	@ (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 030c 	and.w	r3, r3, #12
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d06d      	beq.n	80029d8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	2b02      	cmp	r3, #2
 8002902:	d14b      	bne.n	800299c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002904:	4b32      	ldr	r3, [pc, #200]	@ (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a31      	ldr	r2, [pc, #196]	@ (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 800290a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800290e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002910:	f7fe fe38 	bl	8001584 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002918:	f7fe fe34 	bl	8001584 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e091      	b.n	8002a4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292a:	4b29      	ldr	r3, [pc, #164]	@ (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69da      	ldr	r2, [r3, #28]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002944:	019b      	lsls	r3, r3, #6
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294c:	085b      	lsrs	r3, r3, #1
 800294e:	3b01      	subs	r3, #1
 8002950:	041b      	lsls	r3, r3, #16
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002958:	061b      	lsls	r3, r3, #24
 800295a:	431a      	orrs	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002960:	071b      	lsls	r3, r3, #28
 8002962:	491b      	ldr	r1, [pc, #108]	@ (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 8002964:	4313      	orrs	r3, r2
 8002966:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002968:	4b19      	ldr	r3, [pc, #100]	@ (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a18      	ldr	r2, [pc, #96]	@ (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 800296e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002974:	f7fe fe06 	bl	8001584 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800297c:	f7fe fe02 	bl	8001584 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e05f      	b.n	8002a4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800298e:	4b10      	ldr	r3, [pc, #64]	@ (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0x47c>
 800299a:	e057      	b.n	8002a4c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299c:	4b0c      	ldr	r3, [pc, #48]	@ (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a0b      	ldr	r2, [pc, #44]	@ (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 80029a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a8:	f7fe fdec 	bl	8001584 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b0:	f7fe fde8 	bl	8001584 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e045      	b.n	8002a4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c2:	4b03      	ldr	r3, [pc, #12]	@ (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0x4b0>
 80029ce:	e03d      	b.n	8002a4c <HAL_RCC_OscConfig+0x54c>
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80029d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002a58 <HAL_RCC_OscConfig+0x558>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d030      	beq.n	8002a48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d129      	bne.n	8002a48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d122      	bne.n	8002a48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a08:	4013      	ands	r3, r2
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a0e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d119      	bne.n	8002a48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a1e:	085b      	lsrs	r3, r3, #1
 8002a20:	3b01      	subs	r3, #1
 8002a22:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d10f      	bne.n	8002a48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a32:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d107      	bne.n	8002a48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a42:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d001      	beq.n	8002a4c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e000      	b.n	8002a4e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40023800 	.word	0x40023800

08002a5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a66:	2300      	movs	r3, #0
 8002a68:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e0d0      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a74:	4b6a      	ldr	r3, [pc, #424]	@ (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 030f 	and.w	r3, r3, #15
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d910      	bls.n	8002aa4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a82:	4b67      	ldr	r3, [pc, #412]	@ (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f023 020f 	bic.w	r2, r3, #15
 8002a8a:	4965      	ldr	r1, [pc, #404]	@ (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a92:	4b63      	ldr	r3, [pc, #396]	@ (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e0b8      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d020      	beq.n	8002af2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002abc:	4b59      	ldr	r3, [pc, #356]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	4a58      	ldr	r2, [pc, #352]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ac6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ad4:	4b53      	ldr	r3, [pc, #332]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	4a52      	ldr	r2, [pc, #328]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002ada:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ade:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae0:	4b50      	ldr	r3, [pc, #320]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	494d      	ldr	r1, [pc, #308]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d040      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d107      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b06:	4b47      	ldr	r3, [pc, #284]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d115      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e07f      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d107      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b1e:	4b41      	ldr	r3, [pc, #260]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d109      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e073      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e06b      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b3e:	4b39      	ldr	r3, [pc, #228]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f023 0203 	bic.w	r2, r3, #3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	4936      	ldr	r1, [pc, #216]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b50:	f7fe fd18 	bl	8001584 <HAL_GetTick>
 8002b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b56:	e00a      	b.n	8002b6e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b58:	f7fe fd14 	bl	8001584 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e053      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6e:	4b2d      	ldr	r3, [pc, #180]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 020c 	and.w	r2, r3, #12
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d1eb      	bne.n	8002b58 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b80:	4b27      	ldr	r3, [pc, #156]	@ (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 030f 	and.w	r3, r3, #15
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d210      	bcs.n	8002bb0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8e:	4b24      	ldr	r3, [pc, #144]	@ (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f023 020f 	bic.w	r2, r3, #15
 8002b96:	4922      	ldr	r1, [pc, #136]	@ (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9e:	4b20      	ldr	r3, [pc, #128]	@ (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e032      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d008      	beq.n	8002bce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bbc:	4b19      	ldr	r3, [pc, #100]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	4916      	ldr	r1, [pc, #88]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d009      	beq.n	8002bee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bda:	4b12      	ldr	r3, [pc, #72]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	490e      	ldr	r1, [pc, #56]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bee:	f000 f821 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	091b      	lsrs	r3, r3, #4
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	490a      	ldr	r1, [pc, #40]	@ (8002c28 <HAL_RCC_ClockConfig+0x1cc>)
 8002c00:	5ccb      	ldrb	r3, [r1, r3]
 8002c02:	fa22 f303 	lsr.w	r3, r2, r3
 8002c06:	4a09      	ldr	r2, [pc, #36]	@ (8002c2c <HAL_RCC_ClockConfig+0x1d0>)
 8002c08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c0a:	4b09      	ldr	r3, [pc, #36]	@ (8002c30 <HAL_RCC_ClockConfig+0x1d4>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe fc74 	bl	80014fc <HAL_InitTick>

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40023c00 	.word	0x40023c00
 8002c24:	40023800 	.word	0x40023800
 8002c28:	08004754 	.word	0x08004754
 8002c2c:	20000000 	.word	0x20000000
 8002c30:	20000004 	.word	0x20000004

08002c34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c38:	b094      	sub	sp, #80	@ 0x50
 8002c3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c40:	2300      	movs	r3, #0
 8002c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c44:	2300      	movs	r3, #0
 8002c46:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c4c:	4b79      	ldr	r3, [pc, #484]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 030c 	and.w	r3, r3, #12
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d00d      	beq.n	8002c74 <HAL_RCC_GetSysClockFreq+0x40>
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	f200 80e1 	bhi.w	8002e20 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d002      	beq.n	8002c68 <HAL_RCC_GetSysClockFreq+0x34>
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d003      	beq.n	8002c6e <HAL_RCC_GetSysClockFreq+0x3a>
 8002c66:	e0db      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c68:	4b73      	ldr	r3, [pc, #460]	@ (8002e38 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c6a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c6c:	e0db      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c6e:	4b73      	ldr	r3, [pc, #460]	@ (8002e3c <HAL_RCC_GetSysClockFreq+0x208>)
 8002c70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c72:	e0d8      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c74:	4b6f      	ldr	r3, [pc, #444]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c7c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c7e:	4b6d      	ldr	r3, [pc, #436]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d063      	beq.n	8002d52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c8a:	4b6a      	ldr	r3, [pc, #424]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	099b      	lsrs	r3, r3, #6
 8002c90:	2200      	movs	r2, #0
 8002c92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c94:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ca2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ca6:	4622      	mov	r2, r4
 8002ca8:	462b      	mov	r3, r5
 8002caa:	f04f 0000 	mov.w	r0, #0
 8002cae:	f04f 0100 	mov.w	r1, #0
 8002cb2:	0159      	lsls	r1, r3, #5
 8002cb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cb8:	0150      	lsls	r0, r2, #5
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	1a51      	subs	r1, r2, r1
 8002cc2:	6139      	str	r1, [r7, #16]
 8002cc4:	4629      	mov	r1, r5
 8002cc6:	eb63 0301 	sbc.w	r3, r3, r1
 8002cca:	617b      	str	r3, [r7, #20]
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	f04f 0300 	mov.w	r3, #0
 8002cd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cd8:	4659      	mov	r1, fp
 8002cda:	018b      	lsls	r3, r1, #6
 8002cdc:	4651      	mov	r1, sl
 8002cde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ce2:	4651      	mov	r1, sl
 8002ce4:	018a      	lsls	r2, r1, #6
 8002ce6:	4651      	mov	r1, sl
 8002ce8:	ebb2 0801 	subs.w	r8, r2, r1
 8002cec:	4659      	mov	r1, fp
 8002cee:	eb63 0901 	sbc.w	r9, r3, r1
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d06:	4690      	mov	r8, r2
 8002d08:	4699      	mov	r9, r3
 8002d0a:	4623      	mov	r3, r4
 8002d0c:	eb18 0303 	adds.w	r3, r8, r3
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	462b      	mov	r3, r5
 8002d14:	eb49 0303 	adc.w	r3, r9, r3
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	f04f 0200 	mov.w	r2, #0
 8002d1e:	f04f 0300 	mov.w	r3, #0
 8002d22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d26:	4629      	mov	r1, r5
 8002d28:	024b      	lsls	r3, r1, #9
 8002d2a:	4621      	mov	r1, r4
 8002d2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d30:	4621      	mov	r1, r4
 8002d32:	024a      	lsls	r2, r1, #9
 8002d34:	4610      	mov	r0, r2
 8002d36:	4619      	mov	r1, r3
 8002d38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d44:	f7fd fa78 	bl	8000238 <__aeabi_uldivmod>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d50:	e058      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d52:	4b38      	ldr	r3, [pc, #224]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	099b      	lsrs	r3, r3, #6
 8002d58:	2200      	movs	r2, #0
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	4611      	mov	r1, r2
 8002d5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d62:	623b      	str	r3, [r7, #32]
 8002d64:	2300      	movs	r3, #0
 8002d66:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d6c:	4642      	mov	r2, r8
 8002d6e:	464b      	mov	r3, r9
 8002d70:	f04f 0000 	mov.w	r0, #0
 8002d74:	f04f 0100 	mov.w	r1, #0
 8002d78:	0159      	lsls	r1, r3, #5
 8002d7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d7e:	0150      	lsls	r0, r2, #5
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4641      	mov	r1, r8
 8002d86:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d8a:	4649      	mov	r1, r9
 8002d8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002da0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002da4:	ebb2 040a 	subs.w	r4, r2, sl
 8002da8:	eb63 050b 	sbc.w	r5, r3, fp
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	f04f 0300 	mov.w	r3, #0
 8002db4:	00eb      	lsls	r3, r5, #3
 8002db6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dba:	00e2      	lsls	r2, r4, #3
 8002dbc:	4614      	mov	r4, r2
 8002dbe:	461d      	mov	r5, r3
 8002dc0:	4643      	mov	r3, r8
 8002dc2:	18e3      	adds	r3, r4, r3
 8002dc4:	603b      	str	r3, [r7, #0]
 8002dc6:	464b      	mov	r3, r9
 8002dc8:	eb45 0303 	adc.w	r3, r5, r3
 8002dcc:	607b      	str	r3, [r7, #4]
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dda:	4629      	mov	r1, r5
 8002ddc:	028b      	lsls	r3, r1, #10
 8002dde:	4621      	mov	r1, r4
 8002de0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002de4:	4621      	mov	r1, r4
 8002de6:	028a      	lsls	r2, r1, #10
 8002de8:	4610      	mov	r0, r2
 8002dea:	4619      	mov	r1, r3
 8002dec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dee:	2200      	movs	r2, #0
 8002df0:	61bb      	str	r3, [r7, #24]
 8002df2:	61fa      	str	r2, [r7, #28]
 8002df4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002df8:	f7fd fa1e 	bl	8000238 <__aeabi_uldivmod>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4613      	mov	r3, r2
 8002e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002e04:	4b0b      	ldr	r3, [pc, #44]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	0c1b      	lsrs	r3, r3, #16
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	3301      	adds	r3, #1
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002e14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e1e:	e002      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e20:	4b05      	ldr	r3, [pc, #20]	@ (8002e38 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e22:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3750      	adds	r7, #80	@ 0x50
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e32:	bf00      	nop
 8002e34:	40023800 	.word	0x40023800
 8002e38:	00f42400 	.word	0x00f42400
 8002e3c:	007a1200 	.word	0x007a1200

08002e40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b088      	sub	sp, #32
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002e50:	2300      	movs	r3, #0
 8002e52:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d012      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e68:	4b69      	ldr	r3, [pc, #420]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	4a68      	ldr	r2, [pc, #416]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e6e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002e72:	6093      	str	r3, [r2, #8]
 8002e74:	4b66      	ldr	r3, [pc, #408]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e7c:	4964      	ldr	r1, [pc, #400]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d017      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e9a:	4b5d      	ldr	r3, [pc, #372]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ea0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea8:	4959      	ldr	r1, [pc, #356]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002eb8:	d101      	bne.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d017      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ed6:	4b4e      	ldr	r3, [pc, #312]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002edc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee4:	494a      	ldr	r1, [pc, #296]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ef4:	d101      	bne.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002f02:	2301      	movs	r3, #1
 8002f04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002f12:	2301      	movs	r3, #1
 8002f14:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0320 	and.w	r3, r3, #32
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 808b 	beq.w	800303a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f24:	4b3a      	ldr	r3, [pc, #232]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f28:	4a39      	ldr	r2, [pc, #228]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f30:	4b37      	ldr	r3, [pc, #220]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f38:	60bb      	str	r3, [r7, #8]
 8002f3a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f3c:	4b35      	ldr	r3, [pc, #212]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a34      	ldr	r2, [pc, #208]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f48:	f7fe fb1c 	bl	8001584 <HAL_GetTick>
 8002f4c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f50:	f7fe fb18 	bl	8001584 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b64      	cmp	r3, #100	@ 0x64
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e38f      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f62:	4b2c      	ldr	r3, [pc, #176]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f0      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f6e:	4b28      	ldr	r3, [pc, #160]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f76:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d035      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d02e      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f8c:	4b20      	ldr	r3, [pc, #128]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f94:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f96:	4b1e      	ldr	r3, [pc, #120]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9a:	4a1d      	ldr	r2, [pc, #116]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fa0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa6:	4a1a      	ldr	r2, [pc, #104]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fa8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fac:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002fae:	4a18      	ldr	r2, [pc, #96]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002fb4:	4b16      	ldr	r3, [pc, #88]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d114      	bne.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc0:	f7fe fae0 	bl	8001584 <HAL_GetTick>
 8002fc4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc6:	e00a      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fc8:	f7fe fadc 	bl	8001584 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e351      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fde:	4b0c      	ldr	r3, [pc, #48]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0ee      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ff2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ff6:	d111      	bne.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002ff8:	4b05      	ldr	r3, [pc, #20]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003004:	4b04      	ldr	r3, [pc, #16]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003006:	400b      	ands	r3, r1
 8003008:	4901      	ldr	r1, [pc, #4]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800300a:	4313      	orrs	r3, r2
 800300c:	608b      	str	r3, [r1, #8]
 800300e:	e00b      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003010:	40023800 	.word	0x40023800
 8003014:	40007000 	.word	0x40007000
 8003018:	0ffffcff 	.word	0x0ffffcff
 800301c:	4bac      	ldr	r3, [pc, #688]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	4aab      	ldr	r2, [pc, #684]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003022:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003026:	6093      	str	r3, [r2, #8]
 8003028:	4ba9      	ldr	r3, [pc, #676]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800302a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003034:	49a6      	ldr	r1, [pc, #664]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003036:	4313      	orrs	r3, r2
 8003038:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0310 	and.w	r3, r3, #16
 8003042:	2b00      	cmp	r3, #0
 8003044:	d010      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003046:	4ba2      	ldr	r3, [pc, #648]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003048:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800304c:	4aa0      	ldr	r2, [pc, #640]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800304e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003052:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003056:	4b9e      	ldr	r3, [pc, #632]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003058:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003060:	499b      	ldr	r1, [pc, #620]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003062:	4313      	orrs	r3, r2
 8003064:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00a      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003074:	4b96      	ldr	r3, [pc, #600]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800307a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003082:	4993      	ldr	r1, [pc, #588]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003096:	4b8e      	ldr	r3, [pc, #568]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800309c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030a4:	498a      	ldr	r1, [pc, #552]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00a      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030b8:	4b85      	ldr	r3, [pc, #532]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030c6:	4982      	ldr	r1, [pc, #520]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030da:	4b7d      	ldr	r3, [pc, #500]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e8:	4979      	ldr	r1, [pc, #484]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00a      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030fc:	4b74      	ldr	r3, [pc, #464]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003102:	f023 0203 	bic.w	r2, r3, #3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310a:	4971      	ldr	r1, [pc, #452]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800310c:	4313      	orrs	r3, r2
 800310e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00a      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800311e:	4b6c      	ldr	r3, [pc, #432]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003124:	f023 020c 	bic.w	r2, r3, #12
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800312c:	4968      	ldr	r1, [pc, #416]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800312e:	4313      	orrs	r3, r2
 8003130:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00a      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003140:	4b63      	ldr	r3, [pc, #396]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003146:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800314e:	4960      	ldr	r1, [pc, #384]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003150:	4313      	orrs	r3, r2
 8003152:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00a      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003162:	4b5b      	ldr	r3, [pc, #364]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003164:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003168:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003170:	4957      	ldr	r1, [pc, #348]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003172:	4313      	orrs	r3, r2
 8003174:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00a      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003184:	4b52      	ldr	r3, [pc, #328]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800318a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003192:	494f      	ldr	r1, [pc, #316]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003194:	4313      	orrs	r3, r2
 8003196:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80031a6:	4b4a      	ldr	r3, [pc, #296]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b4:	4946      	ldr	r1, [pc, #280]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00a      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80031c8:	4b41      	ldr	r3, [pc, #260]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d6:	493e      	ldr	r1, [pc, #248]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00a      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80031ea:	4b39      	ldr	r3, [pc, #228]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031f8:	4935      	ldr	r1, [pc, #212]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00a      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800320c:	4b30      	ldr	r3, [pc, #192]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800320e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003212:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800321a:	492d      	ldr	r1, [pc, #180]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800321c:	4313      	orrs	r3, r2
 800321e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d011      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800322e:	4b28      	ldr	r3, [pc, #160]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003234:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800323c:	4924      	ldr	r1, [pc, #144]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003248:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800324c:	d101      	bne.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800324e:	2301      	movs	r3, #1
 8003250:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800325e:	2301      	movs	r3, #1
 8003260:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00a      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800326e:	4b18      	ldr	r3, [pc, #96]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003270:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003274:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800327c:	4914      	ldr	r1, [pc, #80]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800327e:	4313      	orrs	r3, r2
 8003280:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00b      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003290:	4b0f      	ldr	r3, [pc, #60]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003296:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032a0:	490b      	ldr	r1, [pc, #44]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00f      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80032b4:	4b06      	ldr	r3, [pc, #24]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ba:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032c4:	4902      	ldr	r1, [pc, #8]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80032cc:	e002      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80032ce:	bf00      	nop
 80032d0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00b      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032e0:	4b8a      	ldr	r3, [pc, #552]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032e6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f0:	4986      	ldr	r1, [pc, #536]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00b      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003304:	4b81      	ldr	r3, [pc, #516]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003306:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800330a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003314:	497d      	ldr	r1, [pc, #500]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003316:	4313      	orrs	r3, r2
 8003318:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d006      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 80d6 	beq.w	80034dc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003330:	4b76      	ldr	r3, [pc, #472]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a75      	ldr	r2, [pc, #468]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003336:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800333a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800333c:	f7fe f922 	bl	8001584 <HAL_GetTick>
 8003340:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003344:	f7fe f91e 	bl	8001584 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b64      	cmp	r3, #100	@ 0x64
 8003350:	d901      	bls.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e195      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003356:	4b6d      	ldr	r3, [pc, #436]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f0      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d021      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003372:	2b00      	cmp	r3, #0
 8003374:	d11d      	bne.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003376:	4b65      	ldr	r3, [pc, #404]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003378:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800337c:	0c1b      	lsrs	r3, r3, #16
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003384:	4b61      	ldr	r3, [pc, #388]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003386:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800338a:	0e1b      	lsrs	r3, r3, #24
 800338c:	f003 030f 	and.w	r3, r3, #15
 8003390:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	019a      	lsls	r2, r3, #6
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	041b      	lsls	r3, r3, #16
 800339c:	431a      	orrs	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	061b      	lsls	r3, r3, #24
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	071b      	lsls	r3, r3, #28
 80033aa:	4958      	ldr	r1, [pc, #352]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d004      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033c6:	d00a      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d02e      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033dc:	d129      	bne.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80033de:	4b4b      	ldr	r3, [pc, #300]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033e4:	0c1b      	lsrs	r3, r3, #16
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033ec:	4b47      	ldr	r3, [pc, #284]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033f2:	0f1b      	lsrs	r3, r3, #28
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	019a      	lsls	r2, r3, #6
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	041b      	lsls	r3, r3, #16
 8003404:	431a      	orrs	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	061b      	lsls	r3, r3, #24
 800340c:	431a      	orrs	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	071b      	lsls	r3, r3, #28
 8003412:	493e      	ldr	r1, [pc, #248]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003414:	4313      	orrs	r3, r2
 8003416:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800341a:	4b3c      	ldr	r3, [pc, #240]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800341c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003420:	f023 021f 	bic.w	r2, r3, #31
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003428:	3b01      	subs	r3, #1
 800342a:	4938      	ldr	r1, [pc, #224]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800342c:	4313      	orrs	r3, r2
 800342e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d01d      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800343e:	4b33      	ldr	r3, [pc, #204]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003440:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003444:	0e1b      	lsrs	r3, r3, #24
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800344c:	4b2f      	ldr	r3, [pc, #188]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800344e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003452:	0f1b      	lsrs	r3, r3, #28
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	019a      	lsls	r2, r3, #6
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	041b      	lsls	r3, r3, #16
 8003466:	431a      	orrs	r2, r3
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	061b      	lsls	r3, r3, #24
 800346c:	431a      	orrs	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	071b      	lsls	r3, r3, #28
 8003472:	4926      	ldr	r1, [pc, #152]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003474:	4313      	orrs	r3, r2
 8003476:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d011      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	019a      	lsls	r2, r3, #6
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	041b      	lsls	r3, r3, #16
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	061b      	lsls	r3, r3, #24
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	071b      	lsls	r3, r3, #28
 80034a2:	491a      	ldr	r1, [pc, #104]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80034aa:	4b18      	ldr	r3, [pc, #96]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a17      	ldr	r2, [pc, #92]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80034b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034b6:	f7fe f865 	bl	8001584 <HAL_GetTick>
 80034ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034bc:	e008      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034be:	f7fe f861 	bl	8001584 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b64      	cmp	r3, #100	@ 0x64
 80034ca:	d901      	bls.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e0d8      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034d0:	4b0e      	ldr	r3, [pc, #56]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0f0      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	f040 80ce 	bne.w	8003680 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80034e4:	4b09      	ldr	r3, [pc, #36]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a08      	ldr	r2, [pc, #32]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034f0:	f7fe f848 	bl	8001584 <HAL_GetTick>
 80034f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034f6:	e00b      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80034f8:	f7fe f844 	bl	8001584 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b64      	cmp	r3, #100	@ 0x64
 8003504:	d904      	bls.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e0bb      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800350a:	bf00      	nop
 800350c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003510:	4b5e      	ldr	r3, [pc, #376]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003518:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800351c:	d0ec      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800352e:	2b00      	cmp	r3, #0
 8003530:	d009      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800353a:	2b00      	cmp	r3, #0
 800353c:	d02e      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003542:	2b00      	cmp	r3, #0
 8003544:	d12a      	bne.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003546:	4b51      	ldr	r3, [pc, #324]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800354c:	0c1b      	lsrs	r3, r3, #16
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003554:	4b4d      	ldr	r3, [pc, #308]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800355a:	0f1b      	lsrs	r3, r3, #28
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	019a      	lsls	r2, r3, #6
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	041b      	lsls	r3, r3, #16
 800356c:	431a      	orrs	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	061b      	lsls	r3, r3, #24
 8003574:	431a      	orrs	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	071b      	lsls	r3, r3, #28
 800357a:	4944      	ldr	r1, [pc, #272]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800357c:	4313      	orrs	r3, r2
 800357e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003582:	4b42      	ldr	r3, [pc, #264]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003584:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003588:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003590:	3b01      	subs	r3, #1
 8003592:	021b      	lsls	r3, r3, #8
 8003594:	493d      	ldr	r1, [pc, #244]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003596:	4313      	orrs	r3, r2
 8003598:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d022      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035b0:	d11d      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035b2:	4b36      	ldr	r3, [pc, #216]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b8:	0e1b      	lsrs	r3, r3, #24
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80035c0:	4b32      	ldr	r3, [pc, #200]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c6:	0f1b      	lsrs	r3, r3, #28
 80035c8:	f003 0307 	and.w	r3, r3, #7
 80035cc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	019a      	lsls	r2, r3, #6
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	041b      	lsls	r3, r3, #16
 80035da:	431a      	orrs	r2, r3
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	061b      	lsls	r3, r3, #24
 80035e0:	431a      	orrs	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	071b      	lsls	r3, r3, #28
 80035e6:	4929      	ldr	r1, [pc, #164]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0308 	and.w	r3, r3, #8
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d028      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035fa:	4b24      	ldr	r3, [pc, #144]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003600:	0e1b      	lsrs	r3, r3, #24
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003608:	4b20      	ldr	r3, [pc, #128]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800360a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800360e:	0c1b      	lsrs	r3, r3, #16
 8003610:	f003 0303 	and.w	r3, r3, #3
 8003614:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	019a      	lsls	r2, r3, #6
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	041b      	lsls	r3, r3, #16
 8003620:	431a      	orrs	r2, r3
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	061b      	lsls	r3, r3, #24
 8003626:	431a      	orrs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	071b      	lsls	r3, r3, #28
 800362e:	4917      	ldr	r1, [pc, #92]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003630:	4313      	orrs	r3, r2
 8003632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003636:	4b15      	ldr	r3, [pc, #84]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003638:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800363c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003644:	4911      	ldr	r1, [pc, #68]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003646:	4313      	orrs	r3, r2
 8003648:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800364c:	4b0f      	ldr	r3, [pc, #60]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a0e      	ldr	r2, [pc, #56]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003652:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003656:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003658:	f7fd ff94 	bl	8001584 <HAL_GetTick>
 800365c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800365e:	e008      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003660:	f7fd ff90 	bl	8001584 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b64      	cmp	r3, #100	@ 0x64
 800366c:	d901      	bls.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e007      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003672:	4b06      	ldr	r3, [pc, #24]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800367a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800367e:	d1ef      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3720      	adds	r7, #32
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40023800 	.word	0x40023800

08003690 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e049      	b.n	8003736 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d106      	bne.n	80036bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7fd fd86 	bl	80011c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3304      	adds	r3, #4
 80036cc:	4619      	mov	r1, r3
 80036ce:	4610      	mov	r0, r2
 80036d0:	f000 fcc0 	bl	8004054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b082      	sub	sp, #8
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e049      	b.n	80037e4 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	d106      	bne.n	800376a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f841 	bl	80037ec <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2202      	movs	r2, #2
 800376e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	3304      	adds	r3, #4
 800377a:	4619      	mov	r1, r3
 800377c:	4610      	mov	r0, r2
 800377e:	f000 fc69 	bl	8004054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3708      	adds	r7, #8
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800380a:	2300      	movs	r3, #0
 800380c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d104      	bne.n	800381e <HAL_TIM_IC_Start_IT+0x1e>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800381a:	b2db      	uxtb	r3, r3
 800381c:	e023      	b.n	8003866 <HAL_TIM_IC_Start_IT+0x66>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	2b04      	cmp	r3, #4
 8003822:	d104      	bne.n	800382e <HAL_TIM_IC_Start_IT+0x2e>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800382a:	b2db      	uxtb	r3, r3
 800382c:	e01b      	b.n	8003866 <HAL_TIM_IC_Start_IT+0x66>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2b08      	cmp	r3, #8
 8003832:	d104      	bne.n	800383e <HAL_TIM_IC_Start_IT+0x3e>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800383a:	b2db      	uxtb	r3, r3
 800383c:	e013      	b.n	8003866 <HAL_TIM_IC_Start_IT+0x66>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2b0c      	cmp	r3, #12
 8003842:	d104      	bne.n	800384e <HAL_TIM_IC_Start_IT+0x4e>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800384a:	b2db      	uxtb	r3, r3
 800384c:	e00b      	b.n	8003866 <HAL_TIM_IC_Start_IT+0x66>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b10      	cmp	r3, #16
 8003852:	d104      	bne.n	800385e <HAL_TIM_IC_Start_IT+0x5e>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800385a:	b2db      	uxtb	r3, r3
 800385c:	e003      	b.n	8003866 <HAL_TIM_IC_Start_IT+0x66>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003864:	b2db      	uxtb	r3, r3
 8003866:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d104      	bne.n	8003878 <HAL_TIM_IC_Start_IT+0x78>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003874:	b2db      	uxtb	r3, r3
 8003876:	e013      	b.n	80038a0 <HAL_TIM_IC_Start_IT+0xa0>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	2b04      	cmp	r3, #4
 800387c:	d104      	bne.n	8003888 <HAL_TIM_IC_Start_IT+0x88>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003884:	b2db      	uxtb	r3, r3
 8003886:	e00b      	b.n	80038a0 <HAL_TIM_IC_Start_IT+0xa0>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	2b08      	cmp	r3, #8
 800388c:	d104      	bne.n	8003898 <HAL_TIM_IC_Start_IT+0x98>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003894:	b2db      	uxtb	r3, r3
 8003896:	e003      	b.n	80038a0 <HAL_TIM_IC_Start_IT+0xa0>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80038a2:	7bbb      	ldrb	r3, [r7, #14]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d102      	bne.n	80038ae <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80038a8:	7b7b      	ldrb	r3, [r7, #13]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d001      	beq.n	80038b2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e0e2      	b.n	8003a78 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d104      	bne.n	80038c2 <HAL_TIM_IC_Start_IT+0xc2>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2202      	movs	r2, #2
 80038bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038c0:	e023      	b.n	800390a <HAL_TIM_IC_Start_IT+0x10a>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	2b04      	cmp	r3, #4
 80038c6:	d104      	bne.n	80038d2 <HAL_TIM_IC_Start_IT+0xd2>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038d0:	e01b      	b.n	800390a <HAL_TIM_IC_Start_IT+0x10a>
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d104      	bne.n	80038e2 <HAL_TIM_IC_Start_IT+0xe2>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038e0:	e013      	b.n	800390a <HAL_TIM_IC_Start_IT+0x10a>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b0c      	cmp	r3, #12
 80038e6:	d104      	bne.n	80038f2 <HAL_TIM_IC_Start_IT+0xf2>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80038f0:	e00b      	b.n	800390a <HAL_TIM_IC_Start_IT+0x10a>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b10      	cmp	r3, #16
 80038f6:	d104      	bne.n	8003902 <HAL_TIM_IC_Start_IT+0x102>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003900:	e003      	b.n	800390a <HAL_TIM_IC_Start_IT+0x10a>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2202      	movs	r2, #2
 8003906:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d104      	bne.n	800391a <HAL_TIM_IC_Start_IT+0x11a>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2202      	movs	r2, #2
 8003914:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003918:	e013      	b.n	8003942 <HAL_TIM_IC_Start_IT+0x142>
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	2b04      	cmp	r3, #4
 800391e:	d104      	bne.n	800392a <HAL_TIM_IC_Start_IT+0x12a>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2202      	movs	r2, #2
 8003924:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003928:	e00b      	b.n	8003942 <HAL_TIM_IC_Start_IT+0x142>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2b08      	cmp	r3, #8
 800392e:	d104      	bne.n	800393a <HAL_TIM_IC_Start_IT+0x13a>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003938:	e003      	b.n	8003942 <HAL_TIM_IC_Start_IT+0x142>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2202      	movs	r2, #2
 800393e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b0c      	cmp	r3, #12
 8003946:	d841      	bhi.n	80039cc <HAL_TIM_IC_Start_IT+0x1cc>
 8003948:	a201      	add	r2, pc, #4	@ (adr r2, 8003950 <HAL_TIM_IC_Start_IT+0x150>)
 800394a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394e:	bf00      	nop
 8003950:	08003985 	.word	0x08003985
 8003954:	080039cd 	.word	0x080039cd
 8003958:	080039cd 	.word	0x080039cd
 800395c:	080039cd 	.word	0x080039cd
 8003960:	08003997 	.word	0x08003997
 8003964:	080039cd 	.word	0x080039cd
 8003968:	080039cd 	.word	0x080039cd
 800396c:	080039cd 	.word	0x080039cd
 8003970:	080039a9 	.word	0x080039a9
 8003974:	080039cd 	.word	0x080039cd
 8003978:	080039cd 	.word	0x080039cd
 800397c:	080039cd 	.word	0x080039cd
 8003980:	080039bb 	.word	0x080039bb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0202 	orr.w	r2, r2, #2
 8003992:	60da      	str	r2, [r3, #12]
      break;
 8003994:	e01d      	b.n	80039d2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68da      	ldr	r2, [r3, #12]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f042 0204 	orr.w	r2, r2, #4
 80039a4:	60da      	str	r2, [r3, #12]
      break;
 80039a6:	e014      	b.n	80039d2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0208 	orr.w	r2, r2, #8
 80039b6:	60da      	str	r2, [r3, #12]
      break;
 80039b8:	e00b      	b.n	80039d2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68da      	ldr	r2, [r3, #12]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f042 0210 	orr.w	r2, r2, #16
 80039c8:	60da      	str	r2, [r3, #12]
      break;
 80039ca:	e002      	b.n	80039d2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	73fb      	strb	r3, [r7, #15]
      break;
 80039d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80039d2:	7bfb      	ldrb	r3, [r7, #15]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d14e      	bne.n	8003a76 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2201      	movs	r2, #1
 80039de:	6839      	ldr	r1, [r7, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 fda7 	bl	8004534 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a25      	ldr	r2, [pc, #148]	@ (8003a80 <HAL_TIM_IC_Start_IT+0x280>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d022      	beq.n	8003a36 <HAL_TIM_IC_Start_IT+0x236>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039f8:	d01d      	beq.n	8003a36 <HAL_TIM_IC_Start_IT+0x236>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a21      	ldr	r2, [pc, #132]	@ (8003a84 <HAL_TIM_IC_Start_IT+0x284>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d018      	beq.n	8003a36 <HAL_TIM_IC_Start_IT+0x236>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a1f      	ldr	r2, [pc, #124]	@ (8003a88 <HAL_TIM_IC_Start_IT+0x288>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d013      	beq.n	8003a36 <HAL_TIM_IC_Start_IT+0x236>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a1e      	ldr	r2, [pc, #120]	@ (8003a8c <HAL_TIM_IC_Start_IT+0x28c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d00e      	beq.n	8003a36 <HAL_TIM_IC_Start_IT+0x236>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a1c      	ldr	r2, [pc, #112]	@ (8003a90 <HAL_TIM_IC_Start_IT+0x290>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d009      	beq.n	8003a36 <HAL_TIM_IC_Start_IT+0x236>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a1b      	ldr	r2, [pc, #108]	@ (8003a94 <HAL_TIM_IC_Start_IT+0x294>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d004      	beq.n	8003a36 <HAL_TIM_IC_Start_IT+0x236>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a19      	ldr	r2, [pc, #100]	@ (8003a98 <HAL_TIM_IC_Start_IT+0x298>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d115      	bne.n	8003a62 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	4b17      	ldr	r3, [pc, #92]	@ (8003a9c <HAL_TIM_IC_Start_IT+0x29c>)
 8003a3e:	4013      	ands	r3, r2
 8003a40:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	2b06      	cmp	r3, #6
 8003a46:	d015      	beq.n	8003a74 <HAL_TIM_IC_Start_IT+0x274>
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a4e:	d011      	beq.n	8003a74 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0201 	orr.w	r2, r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a60:	e008      	b.n	8003a74 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f042 0201 	orr.w	r2, r2, #1
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	e000      	b.n	8003a76 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a74:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40010000 	.word	0x40010000
 8003a84:	40000400 	.word	0x40000400
 8003a88:	40000800 	.word	0x40000800
 8003a8c:	40000c00 	.word	0x40000c00
 8003a90:	40010400 	.word	0x40010400
 8003a94:	40014000 	.word	0x40014000
 8003a98:	40001800 	.word	0x40001800
 8003a9c:	00010007 	.word	0x00010007

08003aa0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d020      	beq.n	8003b04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d01b      	beq.n	8003b04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f06f 0202 	mvn.w	r2, #2
 8003ad4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7fc fe24 	bl	8000738 <HAL_TIM_IC_CaptureCallback>
 8003af0:	e005      	b.n	8003afe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 fa90 	bl	8004018 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 fa97 	bl	800402c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f003 0304 	and.w	r3, r3, #4
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d020      	beq.n	8003b50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d01b      	beq.n	8003b50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f06f 0204 	mvn.w	r2, #4
 8003b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2202      	movs	r2, #2
 8003b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7fc fdfe 	bl	8000738 <HAL_TIM_IC_CaptureCallback>
 8003b3c:	e005      	b.n	8003b4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 fa6a 	bl	8004018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 fa71 	bl	800402c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d020      	beq.n	8003b9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f003 0308 	and.w	r3, r3, #8
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d01b      	beq.n	8003b9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f06f 0208 	mvn.w	r2, #8
 8003b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2204      	movs	r2, #4
 8003b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7fc fdd8 	bl	8000738 <HAL_TIM_IC_CaptureCallback>
 8003b88:	e005      	b.n	8003b96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 fa44 	bl	8004018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 fa4b 	bl	800402c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	f003 0310 	and.w	r3, r3, #16
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d020      	beq.n	8003be8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f003 0310 	and.w	r3, r3, #16
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d01b      	beq.n	8003be8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f06f 0210 	mvn.w	r2, #16
 8003bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2208      	movs	r2, #8
 8003bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7fc fdb2 	bl	8000738 <HAL_TIM_IC_CaptureCallback>
 8003bd4:	e005      	b.n	8003be2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 fa1e 	bl	8004018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 fa25 	bl	800402c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00c      	beq.n	8003c0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d007      	beq.n	8003c0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f06f 0201 	mvn.w	r2, #1
 8003c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f9fc 	bl	8004004 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d104      	bne.n	8003c20 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00c      	beq.n	8003c3a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d007      	beq.n	8003c3a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 fd3b 	bl	80046b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00c      	beq.n	8003c5e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d007      	beq.n	8003c5e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 fd33 	bl	80046c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00c      	beq.n	8003c82 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d007      	beq.n	8003c82 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f9df 	bl	8004040 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	f003 0320 	and.w	r3, r3, #32
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00c      	beq.n	8003ca6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f003 0320 	and.w	r3, r3, #32
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d007      	beq.n	8003ca6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f06f 0220 	mvn.w	r2, #32
 8003c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 fcfb 	bl	800469c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ca6:	bf00      	nop
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b086      	sub	sp, #24
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	60f8      	str	r0, [r7, #12]
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_TIM_IC_ConfigChannel+0x1e>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e088      	b.n	8003dde <HAL_TIM_IC_ConfigChannel+0x130>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d11b      	bne.n	8003d12 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003cea:	f000 fa5f 	bl	80041ac <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	699a      	ldr	r2, [r3, #24]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 020c 	bic.w	r2, r2, #12
 8003cfc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6999      	ldr	r1, [r3, #24]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	619a      	str	r2, [r3, #24]
 8003d10:	e060      	b.n	8003dd4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b04      	cmp	r3, #4
 8003d16:	d11c      	bne.n	8003d52 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003d28:	f000 fae3 	bl	80042f2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699a      	ldr	r2, [r3, #24]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003d3a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6999      	ldr	r1, [r3, #24]
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	021a      	lsls	r2, r3, #8
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	619a      	str	r2, [r3, #24]
 8003d50:	e040      	b.n	8003dd4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	d11b      	bne.n	8003d90 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003d68:	f000 fb30 	bl	80043cc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	69da      	ldr	r2, [r3, #28]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 020c 	bic.w	r2, r2, #12
 8003d7a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	69d9      	ldr	r1, [r3, #28]
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	689a      	ldr	r2, [r3, #8]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	61da      	str	r2, [r3, #28]
 8003d8e:	e021      	b.n	8003dd4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b0c      	cmp	r3, #12
 8003d94:	d11c      	bne.n	8003dd0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003da6:	f000 fb4d 	bl	8004444 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	69da      	ldr	r2, [r3, #28]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003db8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69d9      	ldr	r1, [r3, #28]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	021a      	lsls	r2, r3, #8
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	61da      	str	r2, [r3, #28]
 8003dce:	e001      	b.n	8003dd4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3718      	adds	r7, #24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
	...

08003de8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003df2:	2300      	movs	r3, #0
 8003df4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d101      	bne.n	8003e04 <HAL_TIM_ConfigClockSource+0x1c>
 8003e00:	2302      	movs	r3, #2
 8003e02:	e0b4      	b.n	8003f6e <HAL_TIM_ConfigClockSource+0x186>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	4b56      	ldr	r3, [pc, #344]	@ (8003f78 <HAL_TIM_ConfigClockSource+0x190>)
 8003e20:	4013      	ands	r3, r2
 8003e22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e3c:	d03e      	beq.n	8003ebc <HAL_TIM_ConfigClockSource+0xd4>
 8003e3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e42:	f200 8087 	bhi.w	8003f54 <HAL_TIM_ConfigClockSource+0x16c>
 8003e46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e4a:	f000 8086 	beq.w	8003f5a <HAL_TIM_ConfigClockSource+0x172>
 8003e4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e52:	d87f      	bhi.n	8003f54 <HAL_TIM_ConfigClockSource+0x16c>
 8003e54:	2b70      	cmp	r3, #112	@ 0x70
 8003e56:	d01a      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0xa6>
 8003e58:	2b70      	cmp	r3, #112	@ 0x70
 8003e5a:	d87b      	bhi.n	8003f54 <HAL_TIM_ConfigClockSource+0x16c>
 8003e5c:	2b60      	cmp	r3, #96	@ 0x60
 8003e5e:	d050      	beq.n	8003f02 <HAL_TIM_ConfigClockSource+0x11a>
 8003e60:	2b60      	cmp	r3, #96	@ 0x60
 8003e62:	d877      	bhi.n	8003f54 <HAL_TIM_ConfigClockSource+0x16c>
 8003e64:	2b50      	cmp	r3, #80	@ 0x50
 8003e66:	d03c      	beq.n	8003ee2 <HAL_TIM_ConfigClockSource+0xfa>
 8003e68:	2b50      	cmp	r3, #80	@ 0x50
 8003e6a:	d873      	bhi.n	8003f54 <HAL_TIM_ConfigClockSource+0x16c>
 8003e6c:	2b40      	cmp	r3, #64	@ 0x40
 8003e6e:	d058      	beq.n	8003f22 <HAL_TIM_ConfigClockSource+0x13a>
 8003e70:	2b40      	cmp	r3, #64	@ 0x40
 8003e72:	d86f      	bhi.n	8003f54 <HAL_TIM_ConfigClockSource+0x16c>
 8003e74:	2b30      	cmp	r3, #48	@ 0x30
 8003e76:	d064      	beq.n	8003f42 <HAL_TIM_ConfigClockSource+0x15a>
 8003e78:	2b30      	cmp	r3, #48	@ 0x30
 8003e7a:	d86b      	bhi.n	8003f54 <HAL_TIM_ConfigClockSource+0x16c>
 8003e7c:	2b20      	cmp	r3, #32
 8003e7e:	d060      	beq.n	8003f42 <HAL_TIM_ConfigClockSource+0x15a>
 8003e80:	2b20      	cmp	r3, #32
 8003e82:	d867      	bhi.n	8003f54 <HAL_TIM_ConfigClockSource+0x16c>
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d05c      	beq.n	8003f42 <HAL_TIM_ConfigClockSource+0x15a>
 8003e88:	2b10      	cmp	r3, #16
 8003e8a:	d05a      	beq.n	8003f42 <HAL_TIM_ConfigClockSource+0x15a>
 8003e8c:	e062      	b.n	8003f54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e9e:	f000 fb29 	bl	80044f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003eb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	609a      	str	r2, [r3, #8]
      break;
 8003eba:	e04f      	b.n	8003f5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ecc:	f000 fb12 	bl	80044f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689a      	ldr	r2, [r3, #8]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ede:	609a      	str	r2, [r3, #8]
      break;
 8003ee0:	e03c      	b.n	8003f5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eee:	461a      	mov	r2, r3
 8003ef0:	f000 f9d0 	bl	8004294 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2150      	movs	r1, #80	@ 0x50
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 fadf 	bl	80044be <TIM_ITRx_SetConfig>
      break;
 8003f00:	e02c      	b.n	8003f5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f000 fa2c 	bl	800436c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2160      	movs	r1, #96	@ 0x60
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 facf 	bl	80044be <TIM_ITRx_SetConfig>
      break;
 8003f20:	e01c      	b.n	8003f5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f000 f9b0 	bl	8004294 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2140      	movs	r1, #64	@ 0x40
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 fabf 	bl	80044be <TIM_ITRx_SetConfig>
      break;
 8003f40:	e00c      	b.n	8003f5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	4610      	mov	r0, r2
 8003f4e:	f000 fab6 	bl	80044be <TIM_ITRx_SetConfig>
      break;
 8003f52:	e003      	b.n	8003f5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	73fb      	strb	r3, [r7, #15]
      break;
 8003f58:	e000      	b.n	8003f5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	fffeff88 	.word	0xfffeff88

08003f7c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003f86:	2300      	movs	r3, #0
 8003f88:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b0c      	cmp	r3, #12
 8003f8e:	d831      	bhi.n	8003ff4 <HAL_TIM_ReadCapturedValue+0x78>
 8003f90:	a201      	add	r2, pc, #4	@ (adr r2, 8003f98 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f96:	bf00      	nop
 8003f98:	08003fcd 	.word	0x08003fcd
 8003f9c:	08003ff5 	.word	0x08003ff5
 8003fa0:	08003ff5 	.word	0x08003ff5
 8003fa4:	08003ff5 	.word	0x08003ff5
 8003fa8:	08003fd7 	.word	0x08003fd7
 8003fac:	08003ff5 	.word	0x08003ff5
 8003fb0:	08003ff5 	.word	0x08003ff5
 8003fb4:	08003ff5 	.word	0x08003ff5
 8003fb8:	08003fe1 	.word	0x08003fe1
 8003fbc:	08003ff5 	.word	0x08003ff5
 8003fc0:	08003ff5 	.word	0x08003ff5
 8003fc4:	08003ff5 	.word	0x08003ff5
 8003fc8:	08003feb 	.word	0x08003feb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fd2:	60fb      	str	r3, [r7, #12]

      break;
 8003fd4:	e00f      	b.n	8003ff6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fdc:	60fb      	str	r3, [r7, #12]

      break;
 8003fde:	e00a      	b.n	8003ff6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe6:	60fb      	str	r3, [r7, #12]

      break;
 8003fe8:	e005      	b.n	8003ff6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff0:	60fb      	str	r3, [r7, #12]

      break;
 8003ff2:	e000      	b.n	8003ff6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003ff4:	bf00      	nop
  }

  return tmpreg;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3714      	adds	r7, #20
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a46      	ldr	r2, [pc, #280]	@ (8004180 <TIM_Base_SetConfig+0x12c>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d013      	beq.n	8004094 <TIM_Base_SetConfig+0x40>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004072:	d00f      	beq.n	8004094 <TIM_Base_SetConfig+0x40>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a43      	ldr	r2, [pc, #268]	@ (8004184 <TIM_Base_SetConfig+0x130>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d00b      	beq.n	8004094 <TIM_Base_SetConfig+0x40>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a42      	ldr	r2, [pc, #264]	@ (8004188 <TIM_Base_SetConfig+0x134>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d007      	beq.n	8004094 <TIM_Base_SetConfig+0x40>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a41      	ldr	r2, [pc, #260]	@ (800418c <TIM_Base_SetConfig+0x138>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d003      	beq.n	8004094 <TIM_Base_SetConfig+0x40>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a40      	ldr	r2, [pc, #256]	@ (8004190 <TIM_Base_SetConfig+0x13c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d108      	bne.n	80040a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800409a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a35      	ldr	r2, [pc, #212]	@ (8004180 <TIM_Base_SetConfig+0x12c>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d02b      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040b4:	d027      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a32      	ldr	r2, [pc, #200]	@ (8004184 <TIM_Base_SetConfig+0x130>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d023      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a31      	ldr	r2, [pc, #196]	@ (8004188 <TIM_Base_SetConfig+0x134>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d01f      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a30      	ldr	r2, [pc, #192]	@ (800418c <TIM_Base_SetConfig+0x138>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d01b      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a2f      	ldr	r2, [pc, #188]	@ (8004190 <TIM_Base_SetConfig+0x13c>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d017      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a2e      	ldr	r2, [pc, #184]	@ (8004194 <TIM_Base_SetConfig+0x140>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d013      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a2d      	ldr	r2, [pc, #180]	@ (8004198 <TIM_Base_SetConfig+0x144>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d00f      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a2c      	ldr	r2, [pc, #176]	@ (800419c <TIM_Base_SetConfig+0x148>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d00b      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a2b      	ldr	r2, [pc, #172]	@ (80041a0 <TIM_Base_SetConfig+0x14c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d007      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a2a      	ldr	r2, [pc, #168]	@ (80041a4 <TIM_Base_SetConfig+0x150>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d003      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a29      	ldr	r2, [pc, #164]	@ (80041a8 <TIM_Base_SetConfig+0x154>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d108      	bne.n	8004118 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800410c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	4313      	orrs	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	4313      	orrs	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a10      	ldr	r2, [pc, #64]	@ (8004180 <TIM_Base_SetConfig+0x12c>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d003      	beq.n	800414c <TIM_Base_SetConfig+0xf8>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a12      	ldr	r2, [pc, #72]	@ (8004190 <TIM_Base_SetConfig+0x13c>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d103      	bne.n	8004154 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	691a      	ldr	r2, [r3, #16]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b01      	cmp	r3, #1
 8004164:	d105      	bne.n	8004172 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	f023 0201 	bic.w	r2, r3, #1
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	611a      	str	r2, [r3, #16]
  }
}
 8004172:	bf00      	nop
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	40010000 	.word	0x40010000
 8004184:	40000400 	.word	0x40000400
 8004188:	40000800 	.word	0x40000800
 800418c:	40000c00 	.word	0x40000c00
 8004190:	40010400 	.word	0x40010400
 8004194:	40014000 	.word	0x40014000
 8004198:	40014400 	.word	0x40014400
 800419c:	40014800 	.word	0x40014800
 80041a0:	40001800 	.word	0x40001800
 80041a4:	40001c00 	.word	0x40001c00
 80041a8:	40002000 	.word	0x40002000

080041ac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b087      	sub	sp, #28
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
 80041b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	f023 0201 	bic.w	r2, r3, #1
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	4a28      	ldr	r2, [pc, #160]	@ (8004278 <TIM_TI1_SetConfig+0xcc>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d01b      	beq.n	8004212 <TIM_TI1_SetConfig+0x66>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041e0:	d017      	beq.n	8004212 <TIM_TI1_SetConfig+0x66>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	4a25      	ldr	r2, [pc, #148]	@ (800427c <TIM_TI1_SetConfig+0xd0>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d013      	beq.n	8004212 <TIM_TI1_SetConfig+0x66>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	4a24      	ldr	r2, [pc, #144]	@ (8004280 <TIM_TI1_SetConfig+0xd4>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d00f      	beq.n	8004212 <TIM_TI1_SetConfig+0x66>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	4a23      	ldr	r2, [pc, #140]	@ (8004284 <TIM_TI1_SetConfig+0xd8>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d00b      	beq.n	8004212 <TIM_TI1_SetConfig+0x66>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	4a22      	ldr	r2, [pc, #136]	@ (8004288 <TIM_TI1_SetConfig+0xdc>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d007      	beq.n	8004212 <TIM_TI1_SetConfig+0x66>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4a21      	ldr	r2, [pc, #132]	@ (800428c <TIM_TI1_SetConfig+0xe0>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d003      	beq.n	8004212 <TIM_TI1_SetConfig+0x66>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4a20      	ldr	r2, [pc, #128]	@ (8004290 <TIM_TI1_SetConfig+0xe4>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d101      	bne.n	8004216 <TIM_TI1_SetConfig+0x6a>
 8004212:	2301      	movs	r3, #1
 8004214:	e000      	b.n	8004218 <TIM_TI1_SetConfig+0x6c>
 8004216:	2300      	movs	r3, #0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d008      	beq.n	800422e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f023 0303 	bic.w	r3, r3, #3
 8004222:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]
 800422c:	e003      	b.n	8004236 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f043 0301 	orr.w	r3, r3, #1
 8004234:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800423c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	011b      	lsls	r3, r3, #4
 8004242:	b2db      	uxtb	r3, r3
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	4313      	orrs	r3, r2
 8004248:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	f023 030a 	bic.w	r3, r3, #10
 8004250:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	f003 030a 	and.w	r3, r3, #10
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	4313      	orrs	r3, r2
 800425c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	621a      	str	r2, [r3, #32]
}
 800426a:	bf00      	nop
 800426c:	371c      	adds	r7, #28
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	40010000 	.word	0x40010000
 800427c:	40000400 	.word	0x40000400
 8004280:	40000800 	.word	0x40000800
 8004284:	40000c00 	.word	0x40000c00
 8004288:	40010400 	.word	0x40010400
 800428c:	40014000 	.word	0x40014000
 8004290:	40001800 	.word	0x40001800

08004294 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004294:	b480      	push	{r7}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	f023 0201 	bic.w	r2, r3, #1
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	011b      	lsls	r3, r3, #4
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	f023 030a 	bic.w	r3, r3, #10
 80042d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	621a      	str	r2, [r3, #32]
}
 80042e6:	bf00      	nop
 80042e8:	371c      	adds	r7, #28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b087      	sub	sp, #28
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	607a      	str	r2, [r7, #4]
 80042fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	f023 0210 	bic.w	r2, r3, #16
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800431e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	021b      	lsls	r3, r3, #8
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	4313      	orrs	r3, r2
 8004328:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004330:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	031b      	lsls	r3, r3, #12
 8004336:	b29b      	uxth	r3, r3
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	4313      	orrs	r3, r2
 800433c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004344:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	011b      	lsls	r3, r3, #4
 800434a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	4313      	orrs	r3, r2
 8004352:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	621a      	str	r2, [r3, #32]
}
 8004360:	bf00      	nop
 8004362:	371c      	adds	r7, #28
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	f023 0210 	bic.w	r2, r3, #16
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004396:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	031b      	lsls	r3, r3, #12
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	4313      	orrs	r3, r2
 80043a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	621a      	str	r2, [r3, #32]
}
 80043c0:	bf00      	nop
 80043c2:	371c      	adds	r7, #28
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
 80043d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	f023 0303 	bic.w	r3, r3, #3
 80043f8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4313      	orrs	r3, r2
 8004400:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004408:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	011b      	lsls	r3, r3, #4
 800440e:	b2db      	uxtb	r3, r3
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	4313      	orrs	r3, r2
 8004414:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800441c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	021b      	lsls	r3, r3, #8
 8004422:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	4313      	orrs	r3, r2
 800442a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	621a      	str	r2, [r3, #32]
}
 8004438:	bf00      	nop
 800443a:	371c      	adds	r7, #28
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004444:	b480      	push	{r7}
 8004446:	b087      	sub	sp, #28
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
 8004450:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004470:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	021b      	lsls	r3, r3, #8
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	4313      	orrs	r3, r2
 800447a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004482:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	031b      	lsls	r3, r3, #12
 8004488:	b29b      	uxth	r3, r3
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	4313      	orrs	r3, r2
 800448e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004496:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	031b      	lsls	r3, r3, #12
 800449c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	621a      	str	r2, [r3, #32]
}
 80044b2:	bf00      	nop
 80044b4:	371c      	adds	r7, #28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044be:	b480      	push	{r7}
 80044c0:	b085      	sub	sp, #20
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
 80044c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4313      	orrs	r3, r2
 80044dc:	f043 0307 	orr.w	r3, r3, #7
 80044e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	609a      	str	r2, [r3, #8]
}
 80044e8:	bf00      	nop
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b087      	sub	sp, #28
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
 8004500:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800450e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	021a      	lsls	r2, r3, #8
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	431a      	orrs	r2, r3
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4313      	orrs	r3, r2
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	4313      	orrs	r3, r2
 8004520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	609a      	str	r2, [r3, #8]
}
 8004528:	bf00      	nop
 800452a:	371c      	adds	r7, #28
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004534:	b480      	push	{r7}
 8004536:	b087      	sub	sp, #28
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	f003 031f 	and.w	r3, r3, #31
 8004546:	2201      	movs	r2, #1
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6a1a      	ldr	r2, [r3, #32]
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	43db      	mvns	r3, r3
 8004556:	401a      	ands	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6a1a      	ldr	r2, [r3, #32]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f003 031f 	and.w	r3, r3, #31
 8004566:	6879      	ldr	r1, [r7, #4]
 8004568:	fa01 f303 	lsl.w	r3, r1, r3
 800456c:	431a      	orrs	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	621a      	str	r2, [r3, #32]
}
 8004572:	bf00      	nop
 8004574:	371c      	adds	r7, #28
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
	...

08004580 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004590:	2b01      	cmp	r3, #1
 8004592:	d101      	bne.n	8004598 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004594:	2302      	movs	r3, #2
 8004596:	e06d      	b.n	8004674 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a30      	ldr	r2, [pc, #192]	@ (8004680 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d004      	beq.n	80045cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a2f      	ldr	r2, [pc, #188]	@ (8004684 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d108      	bne.n	80045de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80045d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	4313      	orrs	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a20      	ldr	r2, [pc, #128]	@ (8004680 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d022      	beq.n	8004648 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800460a:	d01d      	beq.n	8004648 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a1d      	ldr	r2, [pc, #116]	@ (8004688 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d018      	beq.n	8004648 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a1c      	ldr	r2, [pc, #112]	@ (800468c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d013      	beq.n	8004648 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a1a      	ldr	r2, [pc, #104]	@ (8004690 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d00e      	beq.n	8004648 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a15      	ldr	r2, [pc, #84]	@ (8004684 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d009      	beq.n	8004648 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a16      	ldr	r2, [pc, #88]	@ (8004694 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d004      	beq.n	8004648 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a15      	ldr	r2, [pc, #84]	@ (8004698 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d10c      	bne.n	8004662 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800464e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	4313      	orrs	r3, r2
 8004658:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	40010000 	.word	0x40010000
 8004684:	40010400 	.word	0x40010400
 8004688:	40000400 	.word	0x40000400
 800468c:	40000800 	.word	0x40000800
 8004690:	40000c00 	.word	0x40000c00
 8004694:	40014000 	.word	0x40014000
 8004698:	40001800 	.word	0x40001800

0800469c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <memset>:
 80046d8:	4402      	add	r2, r0
 80046da:	4603      	mov	r3, r0
 80046dc:	4293      	cmp	r3, r2
 80046de:	d100      	bne.n	80046e2 <memset+0xa>
 80046e0:	4770      	bx	lr
 80046e2:	f803 1b01 	strb.w	r1, [r3], #1
 80046e6:	e7f9      	b.n	80046dc <memset+0x4>

080046e8 <__libc_init_array>:
 80046e8:	b570      	push	{r4, r5, r6, lr}
 80046ea:	4d0d      	ldr	r5, [pc, #52]	@ (8004720 <__libc_init_array+0x38>)
 80046ec:	4c0d      	ldr	r4, [pc, #52]	@ (8004724 <__libc_init_array+0x3c>)
 80046ee:	1b64      	subs	r4, r4, r5
 80046f0:	10a4      	asrs	r4, r4, #2
 80046f2:	2600      	movs	r6, #0
 80046f4:	42a6      	cmp	r6, r4
 80046f6:	d109      	bne.n	800470c <__libc_init_array+0x24>
 80046f8:	4d0b      	ldr	r5, [pc, #44]	@ (8004728 <__libc_init_array+0x40>)
 80046fa:	4c0c      	ldr	r4, [pc, #48]	@ (800472c <__libc_init_array+0x44>)
 80046fc:	f000 f818 	bl	8004730 <_init>
 8004700:	1b64      	subs	r4, r4, r5
 8004702:	10a4      	asrs	r4, r4, #2
 8004704:	2600      	movs	r6, #0
 8004706:	42a6      	cmp	r6, r4
 8004708:	d105      	bne.n	8004716 <__libc_init_array+0x2e>
 800470a:	bd70      	pop	{r4, r5, r6, pc}
 800470c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004710:	4798      	blx	r3
 8004712:	3601      	adds	r6, #1
 8004714:	e7ee      	b.n	80046f4 <__libc_init_array+0xc>
 8004716:	f855 3b04 	ldr.w	r3, [r5], #4
 800471a:	4798      	blx	r3
 800471c:	3601      	adds	r6, #1
 800471e:	e7f2      	b.n	8004706 <__libc_init_array+0x1e>
 8004720:	0800476c 	.word	0x0800476c
 8004724:	0800476c 	.word	0x0800476c
 8004728:	0800476c 	.word	0x0800476c
 800472c:	08004770 	.word	0x08004770

08004730 <_init>:
 8004730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004732:	bf00      	nop
 8004734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004736:	bc08      	pop	{r3}
 8004738:	469e      	mov	lr, r3
 800473a:	4770      	bx	lr

0800473c <_fini>:
 800473c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473e:	bf00      	nop
 8004740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004742:	bc08      	pop	{r3}
 8004744:	469e      	mov	lr, r3
 8004746:	4770      	bx	lr
