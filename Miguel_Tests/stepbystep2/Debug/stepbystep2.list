
stepbystep2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003468  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003660  08003660  00004660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003678  08003678  0000514c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003678  08003678  00004678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003680  08003680  0000514c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003680  08003680  00004680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003684  08003684  00004684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003688  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  08003694  0000500c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  08003734  000050ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000198  2000014c  080037d4  0000514c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200002e4  080037d4  000052e4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000514c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d570  00000000  00000000  0000517a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001c4e  00000000  00000000  000126ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000009d0  00000000  00000000  00014338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000078a  00000000  00000000  00014d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027972  00000000  00000000  00015492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000bff0  00000000  00000000  0003ce04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f6919  00000000  00000000  00048df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0013f70d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00002794  00000000  00000000  0013f750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000051  00000000  00000000  00141ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000014c 	.word	0x2000014c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003648 	.word	0x08003648

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000150 	.word	0x20000150
 8000234:	08003648 	.word	0x08003648

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b988 	b.w	8000560 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	468e      	mov	lr, r1
 8000270:	4604      	mov	r4, r0
 8000272:	4688      	mov	r8, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d962      	bls.n	8000344 <__udivmoddi4+0xdc>
 800027e:	fab2 f682 	clz	r6, r2
 8000282:	b14e      	cbz	r6, 8000298 <__udivmoddi4+0x30>
 8000284:	f1c6 0320 	rsb	r3, r6, #32
 8000288:	fa01 f806 	lsl.w	r8, r1, r6
 800028c:	fa20 f303 	lsr.w	r3, r0, r3
 8000290:	40b7      	lsls	r7, r6
 8000292:	ea43 0808 	orr.w	r8, r3, r8
 8000296:	40b4      	lsls	r4, r6
 8000298:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800029c:	fa1f fc87 	uxth.w	ip, r7
 80002a0:	fbb8 f1fe 	udiv	r1, r8, lr
 80002a4:	0c23      	lsrs	r3, r4, #16
 80002a6:	fb0e 8811 	mls	r8, lr, r1, r8
 80002aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ae:	fb01 f20c 	mul.w	r2, r1, ip
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002bc:	f080 80ea 	bcs.w	8000494 <__udivmoddi4+0x22c>
 80002c0:	429a      	cmp	r2, r3
 80002c2:	f240 80e7 	bls.w	8000494 <__udivmoddi4+0x22c>
 80002c6:	3902      	subs	r1, #2
 80002c8:	443b      	add	r3, r7
 80002ca:	1a9a      	subs	r2, r3, r2
 80002cc:	b2a3      	uxth	r3, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002da:	fb00 fc0c 	mul.w	ip, r0, ip
 80002de:	459c      	cmp	ip, r3
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0x8e>
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e8:	f080 80d6 	bcs.w	8000498 <__udivmoddi4+0x230>
 80002ec:	459c      	cmp	ip, r3
 80002ee:	f240 80d3 	bls.w	8000498 <__udivmoddi4+0x230>
 80002f2:	443b      	add	r3, r7
 80002f4:	3802      	subs	r0, #2
 80002f6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fa:	eba3 030c 	sub.w	r3, r3, ip
 80002fe:	2100      	movs	r1, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0xa2>
 8000302:	40f3      	lsrs	r3, r6
 8000304:	2200      	movs	r2, #0
 8000306:	e9c5 3200 	strd	r3, r2, [r5]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d905      	bls.n	800031e <__udivmoddi4+0xb6>
 8000312:	b10d      	cbz	r5, 8000318 <__udivmoddi4+0xb0>
 8000314:	e9c5 0100 	strd	r0, r1, [r5]
 8000318:	2100      	movs	r1, #0
 800031a:	4608      	mov	r0, r1
 800031c:	e7f5      	b.n	800030a <__udivmoddi4+0xa2>
 800031e:	fab3 f183 	clz	r1, r3
 8000322:	2900      	cmp	r1, #0
 8000324:	d146      	bne.n	80003b4 <__udivmoddi4+0x14c>
 8000326:	4573      	cmp	r3, lr
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xc8>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 8105 	bhi.w	800053a <__udivmoddi4+0x2d2>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb6e 0203 	sbc.w	r2, lr, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4690      	mov	r8, r2
 800033a:	2d00      	cmp	r5, #0
 800033c:	d0e5      	beq.n	800030a <__udivmoddi4+0xa2>
 800033e:	e9c5 4800 	strd	r4, r8, [r5]
 8000342:	e7e2      	b.n	800030a <__udivmoddi4+0xa2>
 8000344:	2a00      	cmp	r2, #0
 8000346:	f000 8090 	beq.w	800046a <__udivmoddi4+0x202>
 800034a:	fab2 f682 	clz	r6, r2
 800034e:	2e00      	cmp	r6, #0
 8000350:	f040 80a4 	bne.w	800049c <__udivmoddi4+0x234>
 8000354:	1a8a      	subs	r2, r1, r2
 8000356:	0c03      	lsrs	r3, r0, #16
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	b280      	uxth	r0, r0
 800035e:	b2bc      	uxth	r4, r7
 8000360:	2101      	movs	r1, #1
 8000362:	fbb2 fcfe 	udiv	ip, r2, lr
 8000366:	fb0e 221c 	mls	r2, lr, ip, r2
 800036a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800036e:	fb04 f20c 	mul.w	r2, r4, ip
 8000372:	429a      	cmp	r2, r3
 8000374:	d907      	bls.n	8000386 <__udivmoddi4+0x11e>
 8000376:	18fb      	adds	r3, r7, r3
 8000378:	f10c 38ff 	add.w	r8, ip, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x11c>
 800037e:	429a      	cmp	r2, r3
 8000380:	f200 80e0 	bhi.w	8000544 <__udivmoddi4+0x2dc>
 8000384:	46c4      	mov	ip, r8
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	fbb3 f2fe 	udiv	r2, r3, lr
 800038c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000390:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000394:	fb02 f404 	mul.w	r4, r2, r4
 8000398:	429c      	cmp	r4, r3
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x144>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f102 30ff 	add.w	r0, r2, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x142>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f200 80ca 	bhi.w	800053e <__udivmoddi4+0x2d6>
 80003aa:	4602      	mov	r2, r0
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0x98>
 80003b4:	f1c1 0620 	rsb	r6, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 f706 	lsr.w	r7, r2, r6
 80003be:	431f      	orrs	r7, r3
 80003c0:	fa0e f401 	lsl.w	r4, lr, r1
 80003c4:	fa20 f306 	lsr.w	r3, r0, r6
 80003c8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003cc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d0:	4323      	orrs	r3, r4
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	fa1f fc87 	uxth.w	ip, r7
 80003da:	fbbe f0f9 	udiv	r0, lr, r9
 80003de:	0c1c      	lsrs	r4, r3, #16
 80003e0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003e4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003ec:	45a6      	cmp	lr, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d909      	bls.n	8000408 <__udivmoddi4+0x1a0>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003fa:	f080 809c 	bcs.w	8000536 <__udivmoddi4+0x2ce>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f240 8099 	bls.w	8000536 <__udivmoddi4+0x2ce>
 8000404:	3802      	subs	r0, #2
 8000406:	443c      	add	r4, r7
 8000408:	eba4 040e 	sub.w	r4, r4, lr
 800040c:	fa1f fe83 	uxth.w	lr, r3
 8000410:	fbb4 f3f9 	udiv	r3, r4, r9
 8000414:	fb09 4413 	mls	r4, r9, r3, r4
 8000418:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800041c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000420:	45a4      	cmp	ip, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1ce>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f103 3eff 	add.w	lr, r3, #4294967295
 800042a:	f080 8082 	bcs.w	8000532 <__udivmoddi4+0x2ca>
 800042e:	45a4      	cmp	ip, r4
 8000430:	d97f      	bls.n	8000532 <__udivmoddi4+0x2ca>
 8000432:	3b02      	subs	r3, #2
 8000434:	443c      	add	r4, r7
 8000436:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000442:	4564      	cmp	r4, ip
 8000444:	4673      	mov	r3, lr
 8000446:	46e1      	mov	r9, ip
 8000448:	d362      	bcc.n	8000510 <__udivmoddi4+0x2a8>
 800044a:	d05f      	beq.n	800050c <__udivmoddi4+0x2a4>
 800044c:	b15d      	cbz	r5, 8000466 <__udivmoddi4+0x1fe>
 800044e:	ebb8 0203 	subs.w	r2, r8, r3
 8000452:	eb64 0409 	sbc.w	r4, r4, r9
 8000456:	fa04 f606 	lsl.w	r6, r4, r6
 800045a:	fa22 f301 	lsr.w	r3, r2, r1
 800045e:	431e      	orrs	r6, r3
 8000460:	40cc      	lsrs	r4, r1
 8000462:	e9c5 6400 	strd	r6, r4, [r5]
 8000466:	2100      	movs	r1, #0
 8000468:	e74f      	b.n	800030a <__udivmoddi4+0xa2>
 800046a:	fbb1 fcf2 	udiv	ip, r1, r2
 800046e:	0c01      	lsrs	r1, r0, #16
 8000470:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000474:	b280      	uxth	r0, r0
 8000476:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800047a:	463b      	mov	r3, r7
 800047c:	4638      	mov	r0, r7
 800047e:	463c      	mov	r4, r7
 8000480:	46b8      	mov	r8, r7
 8000482:	46be      	mov	lr, r7
 8000484:	2620      	movs	r6, #32
 8000486:	fbb1 f1f7 	udiv	r1, r1, r7
 800048a:	eba2 0208 	sub.w	r2, r2, r8
 800048e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000492:	e766      	b.n	8000362 <__udivmoddi4+0xfa>
 8000494:	4601      	mov	r1, r0
 8000496:	e718      	b.n	80002ca <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e72c      	b.n	80002f6 <__udivmoddi4+0x8e>
 800049c:	f1c6 0220 	rsb	r2, r6, #32
 80004a0:	fa2e f302 	lsr.w	r3, lr, r2
 80004a4:	40b7      	lsls	r7, r6
 80004a6:	40b1      	lsls	r1, r6
 80004a8:	fa20 f202 	lsr.w	r2, r0, r2
 80004ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b0:	430a      	orrs	r2, r1
 80004b2:	fbb3 f8fe 	udiv	r8, r3, lr
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	fb0e 3318 	mls	r3, lr, r8, r3
 80004bc:	0c11      	lsrs	r1, r2, #16
 80004be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c2:	fb08 f904 	mul.w	r9, r8, r4
 80004c6:	40b0      	lsls	r0, r6
 80004c8:	4589      	cmp	r9, r1
 80004ca:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ce:	b280      	uxth	r0, r0
 80004d0:	d93e      	bls.n	8000550 <__udivmoddi4+0x2e8>
 80004d2:	1879      	adds	r1, r7, r1
 80004d4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d8:	d201      	bcs.n	80004de <__udivmoddi4+0x276>
 80004da:	4589      	cmp	r9, r1
 80004dc:	d81f      	bhi.n	800051e <__udivmoddi4+0x2b6>
 80004de:	eba1 0109 	sub.w	r1, r1, r9
 80004e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e6:	fb09 f804 	mul.w	r8, r9, r4
 80004ea:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ee:	b292      	uxth	r2, r2
 80004f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f4:	4542      	cmp	r2, r8
 80004f6:	d229      	bcs.n	800054c <__udivmoddi4+0x2e4>
 80004f8:	18ba      	adds	r2, r7, r2
 80004fa:	f109 31ff 	add.w	r1, r9, #4294967295
 80004fe:	d2c4      	bcs.n	800048a <__udivmoddi4+0x222>
 8000500:	4542      	cmp	r2, r8
 8000502:	d2c2      	bcs.n	800048a <__udivmoddi4+0x222>
 8000504:	f1a9 0102 	sub.w	r1, r9, #2
 8000508:	443a      	add	r2, r7
 800050a:	e7be      	b.n	800048a <__udivmoddi4+0x222>
 800050c:	45f0      	cmp	r8, lr
 800050e:	d29d      	bcs.n	800044c <__udivmoddi4+0x1e4>
 8000510:	ebbe 0302 	subs.w	r3, lr, r2
 8000514:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000518:	3801      	subs	r0, #1
 800051a:	46e1      	mov	r9, ip
 800051c:	e796      	b.n	800044c <__udivmoddi4+0x1e4>
 800051e:	eba7 0909 	sub.w	r9, r7, r9
 8000522:	4449      	add	r1, r9
 8000524:	f1a8 0c02 	sub.w	ip, r8, #2
 8000528:	fbb1 f9fe 	udiv	r9, r1, lr
 800052c:	fb09 f804 	mul.w	r8, r9, r4
 8000530:	e7db      	b.n	80004ea <__udivmoddi4+0x282>
 8000532:	4673      	mov	r3, lr
 8000534:	e77f      	b.n	8000436 <__udivmoddi4+0x1ce>
 8000536:	4650      	mov	r0, sl
 8000538:	e766      	b.n	8000408 <__udivmoddi4+0x1a0>
 800053a:	4608      	mov	r0, r1
 800053c:	e6fd      	b.n	800033a <__udivmoddi4+0xd2>
 800053e:	443b      	add	r3, r7
 8000540:	3a02      	subs	r2, #2
 8000542:	e733      	b.n	80003ac <__udivmoddi4+0x144>
 8000544:	f1ac 0c02 	sub.w	ip, ip, #2
 8000548:	443b      	add	r3, r7
 800054a:	e71c      	b.n	8000386 <__udivmoddi4+0x11e>
 800054c:	4649      	mov	r1, r9
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x222>
 8000550:	eba1 0109 	sub.w	r1, r1, r9
 8000554:	46c4      	mov	ip, r8
 8000556:	fbb1 f9fe 	udiv	r9, r1, lr
 800055a:	fb09 f804 	mul.w	r8, r9, r4
 800055e:	e7c4      	b.n	80004ea <__udivmoddi4+0x282>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000568:	2003      	movs	r0, #3
 800056a:	f000 f92f 	bl	80007cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800056e:	2000      	movs	r0, #0
 8000570:	f000 f806 	bl	8000580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000574:	f002 fe94 	bl	80032a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000578:	2300      	movs	r3, #0
}
 800057a:	4618      	mov	r0, r3
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000588:	4b12      	ldr	r3, [pc, #72]	@ (80005d4 <HAL_InitTick+0x54>)
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	4b12      	ldr	r3, [pc, #72]	@ (80005d8 <HAL_InitTick+0x58>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	4619      	mov	r1, r3
 8000592:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000596:	fbb3 f3f1 	udiv	r3, r3, r1
 800059a:	fbb2 f3f3 	udiv	r3, r2, r3
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 f93b 	bl	800081a <HAL_SYSTICK_Config>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005aa:	2301      	movs	r3, #1
 80005ac:	e00e      	b.n	80005cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2b0f      	cmp	r3, #15
 80005b2:	d80a      	bhi.n	80005ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005b4:	2200      	movs	r2, #0
 80005b6:	6879      	ldr	r1, [r7, #4]
 80005b8:	f04f 30ff 	mov.w	r0, #4294967295
 80005bc:	f000 f911 	bl	80007e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <HAL_InitTick+0x5c>)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005c6:	2300      	movs	r3, #0
 80005c8:	e000      	b.n	80005cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005ca:	2301      	movs	r3, #1
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000008 	.word	0x20000008
 80005d8:	20000004 	.word	0x20000004
 80005dc:	20000000 	.word	0x20000000

080005e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005e4:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <HAL_IncTick+0x20>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <HAL_IncTick+0x24>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4413      	add	r3, r2
 80005f0:	4a04      	ldr	r2, [pc, #16]	@ (8000604 <HAL_IncTick+0x24>)
 80005f2:	6013      	str	r3, [r2, #0]
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	20000004 	.word	0x20000004
 8000604:	20000168 	.word	0x20000168

08000608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  return uwTick;
 800060c:	4b03      	ldr	r3, [pc, #12]	@ (800061c <HAL_GetTick+0x14>)
 800060e:	681b      	ldr	r3, [r3, #0]
}
 8000610:	4618      	mov	r0, r3
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	20000168 	.word	0x20000168

08000620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000628:	f7ff ffee 	bl	8000608 <HAL_GetTick>
 800062c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000638:	d005      	beq.n	8000646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800063a:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <HAL_Delay+0x44>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	461a      	mov	r2, r3
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	4413      	add	r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000646:	bf00      	nop
 8000648:	f7ff ffde 	bl	8000608 <HAL_GetTick>
 800064c:	4602      	mov	r2, r0
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	1ad3      	subs	r3, r2, r3
 8000652:	68fa      	ldr	r2, [r7, #12]
 8000654:	429a      	cmp	r2, r3
 8000656:	d8f7      	bhi.n	8000648 <HAL_Delay+0x28>
  {
  }
}
 8000658:	bf00      	nop
 800065a:	bf00      	nop
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000004 	.word	0x20000004

08000668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f003 0307 	and.w	r3, r3, #7
 8000676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000678:	4b0b      	ldr	r3, [pc, #44]	@ (80006a8 <__NVIC_SetPriorityGrouping+0x40>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067e:	68ba      	ldr	r2, [r7, #8]
 8000680:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000684:	4013      	ands	r3, r2
 8000686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000690:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <__NVIC_SetPriorityGrouping+0x44>)
 8000692:	4313      	orrs	r3, r2
 8000694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000696:	4a04      	ldr	r2, [pc, #16]	@ (80006a8 <__NVIC_SetPriorityGrouping+0x40>)
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	60d3      	str	r3, [r2, #12]
}
 800069c:	bf00      	nop
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	e000ed00 	.word	0xe000ed00
 80006ac:	05fa0000 	.word	0x05fa0000

080006b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b4:	4b04      	ldr	r3, [pc, #16]	@ (80006c8 <__NVIC_GetPriorityGrouping+0x18>)
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	0a1b      	lsrs	r3, r3, #8
 80006ba:	f003 0307 	and.w	r3, r3, #7
}
 80006be:	4618      	mov	r0, r3
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	6039      	str	r1, [r7, #0]
 80006d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	db0a      	blt.n	80006f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	490c      	ldr	r1, [pc, #48]	@ (8000718 <__NVIC_SetPriority+0x4c>)
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	0112      	lsls	r2, r2, #4
 80006ec:	b2d2      	uxtb	r2, r2
 80006ee:	440b      	add	r3, r1
 80006f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f4:	e00a      	b.n	800070c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4908      	ldr	r1, [pc, #32]	@ (800071c <__NVIC_SetPriority+0x50>)
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	f003 030f 	and.w	r3, r3, #15
 8000702:	3b04      	subs	r3, #4
 8000704:	0112      	lsls	r2, r2, #4
 8000706:	b2d2      	uxtb	r2, r2
 8000708:	440b      	add	r3, r1
 800070a:	761a      	strb	r2, [r3, #24]
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	e000e100 	.word	0xe000e100
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000720:	b480      	push	{r7}
 8000722:	b089      	sub	sp, #36	@ 0x24
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	f003 0307 	and.w	r3, r3, #7
 8000732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000734:	69fb      	ldr	r3, [r7, #28]
 8000736:	f1c3 0307 	rsb	r3, r3, #7
 800073a:	2b04      	cmp	r3, #4
 800073c:	bf28      	it	cs
 800073e:	2304      	movcs	r3, #4
 8000740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	3304      	adds	r3, #4
 8000746:	2b06      	cmp	r3, #6
 8000748:	d902      	bls.n	8000750 <NVIC_EncodePriority+0x30>
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	3b03      	subs	r3, #3
 800074e:	e000      	b.n	8000752 <NVIC_EncodePriority+0x32>
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000754:	f04f 32ff 	mov.w	r2, #4294967295
 8000758:	69bb      	ldr	r3, [r7, #24]
 800075a:	fa02 f303 	lsl.w	r3, r2, r3
 800075e:	43da      	mvns	r2, r3
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	401a      	ands	r2, r3
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000768:	f04f 31ff 	mov.w	r1, #4294967295
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	fa01 f303 	lsl.w	r3, r1, r3
 8000772:	43d9      	mvns	r1, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000778:	4313      	orrs	r3, r2
         );
}
 800077a:	4618      	mov	r0, r3
 800077c:	3724      	adds	r7, #36	@ 0x24
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
	...

08000788 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	3b01      	subs	r3, #1
 8000794:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000798:	d301      	bcc.n	800079e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800079a:	2301      	movs	r3, #1
 800079c:	e00f      	b.n	80007be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800079e:	4a0a      	ldr	r2, [pc, #40]	@ (80007c8 <SysTick_Config+0x40>)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007a6:	210f      	movs	r1, #15
 80007a8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ac:	f7ff ff8e 	bl	80006cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b0:	4b05      	ldr	r3, [pc, #20]	@ (80007c8 <SysTick_Config+0x40>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007b6:	4b04      	ldr	r3, [pc, #16]	@ (80007c8 <SysTick_Config+0x40>)
 80007b8:	2207      	movs	r2, #7
 80007ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	e000e010 	.word	0xe000e010

080007cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f7ff ff47 	bl	8000668 <__NVIC_SetPriorityGrouping>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b086      	sub	sp, #24
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	60b9      	str	r1, [r7, #8]
 80007ec:	607a      	str	r2, [r7, #4]
 80007ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007f4:	f7ff ff5c 	bl	80006b0 <__NVIC_GetPriorityGrouping>
 80007f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	68b9      	ldr	r1, [r7, #8]
 80007fe:	6978      	ldr	r0, [r7, #20]
 8000800:	f7ff ff8e 	bl	8000720 <NVIC_EncodePriority>
 8000804:	4602      	mov	r2, r0
 8000806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800080a:	4611      	mov	r1, r2
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ff5d 	bl	80006cc <__NVIC_SetPriority>
}
 8000812:	bf00      	nop
 8000814:	3718      	adds	r7, #24
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f7ff ffb0 	bl	8000788 <SysTick_Config>
 8000828:	4603      	mov	r3, r0
}
 800082a:	4618      	mov	r0, r3
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d101      	bne.n	8000846 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
 8000844:	e086      	b.n	8000954 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800084c:	2b00      	cmp	r3, #0
 800084e:	d106      	bne.n	800085e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2223      	movs	r2, #35	@ 0x23
 8000854:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f002 fd45 	bl	80032e8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	4b3f      	ldr	r3, [pc, #252]	@ (800095c <HAL_ETH_Init+0x128>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000862:	4a3e      	ldr	r2, [pc, #248]	@ (800095c <HAL_ETH_Init+0x128>)
 8000864:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000868:	6453      	str	r3, [r2, #68]	@ 0x44
 800086a:	4b3c      	ldr	r3, [pc, #240]	@ (800095c <HAL_ETH_Init+0x128>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800086e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000876:	4b3a      	ldr	r3, [pc, #232]	@ (8000960 <HAL_ETH_Init+0x12c>)
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	4a39      	ldr	r2, [pc, #228]	@ (8000960 <HAL_ETH_Init+0x12c>)
 800087c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000880:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000882:	4b37      	ldr	r3, [pc, #220]	@ (8000960 <HAL_ETH_Init+0x12c>)
 8000884:	685a      	ldr	r2, [r3, #4]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	689b      	ldr	r3, [r3, #8]
 800088a:	4935      	ldr	r1, [pc, #212]	@ (8000960 <HAL_ETH_Init+0x12c>)
 800088c:	4313      	orrs	r3, r2
 800088e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8000890:	4b33      	ldr	r3, [pc, #204]	@ (8000960 <HAL_ETH_Init+0x12c>)
 8000892:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	6812      	ldr	r2, [r2, #0]
 80008a2:	f043 0301 	orr.w	r3, r3, #1
 80008a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80008aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008ac:	f7ff feac 	bl	8000608 <HAL_GetTick>
 80008b0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80008b2:	e011      	b.n	80008d8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80008b4:	f7ff fea8 	bl	8000608 <HAL_GetTick>
 80008b8:	4602      	mov	r2, r0
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	1ad3      	subs	r3, r2, r3
 80008be:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80008c2:	d909      	bls.n	80008d8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2204      	movs	r2, #4
 80008c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	22e0      	movs	r2, #224	@ 0xe0
 80008d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80008d4:	2301      	movs	r3, #1
 80008d6:	e03d      	b.n	8000954 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d1e4      	bne.n	80008b4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f000 f97a 	bl	8000be4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f000 fa25 	bl	8000d40 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f000 fa7b 	bl	8000df2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	461a      	mov	r2, r3
 8000902:	2100      	movs	r1, #0
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f000 f9e3 	bl	8000cd0 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8000918:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <HAL_ETH_Init+0x130>)
 8000928:	430b      	orrs	r3, r1
 800092a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800093e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2200      	movs	r2, #0
 8000946:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2210      	movs	r2, #16
 800094e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8000952:	2300      	movs	r3, #0
}
 8000954:	4618      	mov	r0, r3
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40023800 	.word	0x40023800
 8000960:	40013800 	.word	0x40013800
 8000964:	00020060 	.word	0x00020060

08000968 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	4b53      	ldr	r3, [pc, #332]	@ (8000acc <ETH_SetMACConfig+0x164>)
 800097e:	4013      	ands	r3, r2
 8000980:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	7b9b      	ldrb	r3, [r3, #14]
 8000986:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8000988:	683a      	ldr	r2, [r7, #0]
 800098a:	7c12      	ldrb	r2, [r2, #16]
 800098c:	2a00      	cmp	r2, #0
 800098e:	d102      	bne.n	8000996 <ETH_SetMACConfig+0x2e>
 8000990:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000994:	e000      	b.n	8000998 <ETH_SetMACConfig+0x30>
 8000996:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8000998:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800099a:	683a      	ldr	r2, [r7, #0]
 800099c:	7c52      	ldrb	r2, [r2, #17]
 800099e:	2a00      	cmp	r2, #0
 80009a0:	d102      	bne.n	80009a8 <ETH_SetMACConfig+0x40>
 80009a2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80009a6:	e000      	b.n	80009aa <ETH_SetMACConfig+0x42>
 80009a8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80009aa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80009b0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	7fdb      	ldrb	r3, [r3, #31]
 80009b6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80009b8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80009be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80009c0:	683a      	ldr	r2, [r7, #0]
 80009c2:	7f92      	ldrb	r2, [r2, #30]
 80009c4:	2a00      	cmp	r2, #0
 80009c6:	d102      	bne.n	80009ce <ETH_SetMACConfig+0x66>
 80009c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009cc:	e000      	b.n	80009d0 <ETH_SetMACConfig+0x68>
 80009ce:	2200      	movs	r2, #0
                        macconf->Speed |
 80009d0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	7f1b      	ldrb	r3, [r3, #28]
 80009d6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80009d8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80009de:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	791b      	ldrb	r3, [r3, #4]
 80009e4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80009e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80009e8:	683a      	ldr	r2, [r7, #0]
 80009ea:	f892 2020 	ldrb.w	r2, [r2, #32]
 80009ee:	2a00      	cmp	r2, #0
 80009f0:	d102      	bne.n	80009f8 <ETH_SetMACConfig+0x90>
 80009f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009f6:	e000      	b.n	80009fa <ETH_SetMACConfig+0x92>
 80009f8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80009fa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	7bdb      	ldrb	r3, [r3, #15]
 8000a00:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8000a02:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8000a08:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8000a10:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8000a12:	4313      	orrs	r3, r2
 8000a14:	68fa      	ldr	r2, [r7, #12]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	68fa      	ldr	r2, [r7, #12]
 8000a20:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	f7ff fdf8 	bl	8000620 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	68fa      	ldr	r2, [r7, #12]
 8000a36:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	699b      	ldr	r3, [r3, #24]
 8000a3e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8000a40:	68fa      	ldr	r2, [r7, #12]
 8000a42:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8000a46:	4013      	ands	r3, r2
 8000a48:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a4e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8000a50:	683a      	ldr	r2, [r7, #0]
 8000a52:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8000a56:	2a00      	cmp	r2, #0
 8000a58:	d101      	bne.n	8000a5e <ETH_SetMACConfig+0xf6>
 8000a5a:	2280      	movs	r2, #128	@ 0x80
 8000a5c:	e000      	b.n	8000a60 <ETH_SetMACConfig+0xf8>
 8000a5e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8000a60:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8000a66:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8000a68:	683a      	ldr	r2, [r7, #0]
 8000a6a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8000a6e:	2a01      	cmp	r2, #1
 8000a70:	d101      	bne.n	8000a76 <ETH_SetMACConfig+0x10e>
 8000a72:	2208      	movs	r2, #8
 8000a74:	e000      	b.n	8000a78 <ETH_SetMACConfig+0x110>
 8000a76:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8000a78:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8000a7a:	683a      	ldr	r2, [r7, #0]
 8000a7c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8000a80:	2a01      	cmp	r2, #1
 8000a82:	d101      	bne.n	8000a88 <ETH_SetMACConfig+0x120>
 8000a84:	2204      	movs	r2, #4
 8000a86:	e000      	b.n	8000a8a <ETH_SetMACConfig+0x122>
 8000a88:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8000a8a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8000a8c:	683a      	ldr	r2, [r7, #0]
 8000a8e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8000a92:	2a01      	cmp	r2, #1
 8000a94:	d101      	bne.n	8000a9a <ETH_SetMACConfig+0x132>
 8000a96:	2202      	movs	r2, #2
 8000a98:	e000      	b.n	8000a9c <ETH_SetMACConfig+0x134>
 8000a9a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	68fa      	ldr	r2, [r7, #12]
 8000aaa:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f7ff fdb3 	bl	8000620 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	619a      	str	r2, [r3, #24]
}
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	fd20810f 	.word	0xfd20810f

08000ad0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	4b3d      	ldr	r3, [pc, #244]	@ (8000be0 <ETH_SetDMAConfig+0x110>)
 8000aea:	4013      	ands	r3, r2
 8000aec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	7b1b      	ldrb	r3, [r3, #12]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d102      	bne.n	8000afc <ETH_SetDMAConfig+0x2c>
 8000af6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000afa:	e000      	b.n	8000afe <ETH_SetDMAConfig+0x2e>
 8000afc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	7b5b      	ldrb	r3, [r3, #13]
 8000b02:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8000b04:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8000b06:	683a      	ldr	r2, [r7, #0]
 8000b08:	7f52      	ldrb	r2, [r2, #29]
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d102      	bne.n	8000b14 <ETH_SetDMAConfig+0x44>
 8000b0e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000b12:	e000      	b.n	8000b16 <ETH_SetDMAConfig+0x46>
 8000b14:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8000b16:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	7b9b      	ldrb	r3, [r3, #14]
 8000b1c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8000b1e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8000b24:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	7f1b      	ldrb	r3, [r3, #28]
 8000b2a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8000b2c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	7f9b      	ldrb	r3, [r3, #30]
 8000b32:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8000b34:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8000b3a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000b42:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8000b44:	4313      	orrs	r3, r2
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b54:	461a      	mov	r2, r3
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000b66:	2001      	movs	r0, #1
 8000b68:	f7ff fd5a 	bl	8000620 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b74:	461a      	mov	r2, r3
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	791b      	ldrb	r3, [r3, #4]
 8000b7e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8000b84:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8000b8a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8000b90:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000b98:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8000b9a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ba0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8000ba2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8000ba8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	6812      	ldr	r2, [r2, #0]
 8000bae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000bb2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000bb6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	f7ff fd2b 	bl	8000620 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	6013      	str	r3, [r2, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	f8de3f23 	.word	0xf8de3f23

08000be4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b0a6      	sub	sp, #152	@ 0x98
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8000bec:	2301      	movs	r3, #1
 8000bee:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8000c02:	2301      	movs	r3, #1
 8000c04:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8000c14:	2301      	movs	r3, #1
 8000c16:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8000c26:	2300      	movs	r3, #0
 8000c28:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8000c30:	2300      	movs	r3, #0
 8000c32:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8000c40:	2300      	movs	r3, #0
 8000c42:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8000c4c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c50:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8000c52:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8000c5e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000c62:	4619      	mov	r1, r3
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f7ff fe7f 	bl	8000968 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8000c72:	2301      	movs	r3, #1
 8000c74:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8000c90:	2301      	movs	r3, #1
 8000c92:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8000c96:	2301      	movs	r3, #1
 8000c98:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8000c9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c9e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8000ca0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ca4:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8000ca6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000caa:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8000cac:	2301      	movs	r3, #1
 8000cae:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8000cba:	f107 0308 	add.w	r3, r7, #8
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff ff05 	bl	8000ad0 <ETH_SetDMAConfig>
}
 8000cc6:	bf00      	nop
 8000cc8:	3798      	adds	r7, #152	@ 0x98
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b087      	sub	sp, #28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3305      	adds	r3, #5
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	021b      	lsls	r3, r3, #8
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	3204      	adds	r2, #4
 8000ce8:	7812      	ldrb	r2, [r2, #0]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <ETH_MACAddressConfig+0x68>)
 8000cf2:	4413      	add	r3, r2
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	3303      	adds	r3, #3
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	061a      	lsls	r2, r3, #24
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3302      	adds	r3, #2
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	041b      	lsls	r3, r3, #16
 8000d0a:	431a      	orrs	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	021b      	lsls	r3, r3, #8
 8000d14:	4313      	orrs	r3, r2
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	7812      	ldrb	r2, [r2, #0]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <ETH_MACAddressConfig+0x6c>)
 8000d22:	4413      	add	r3, r2
 8000d24:	461a      	mov	r2, r3
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	6013      	str	r3, [r2, #0]
}
 8000d2a:	bf00      	nop
 8000d2c:	371c      	adds	r7, #28
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	40028040 	.word	0x40028040
 8000d3c:	40028044 	.word	0x40028044

08000d40 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	e03e      	b.n	8000dcc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	68d9      	ldr	r1, [r3, #12]
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	4613      	mov	r3, r2
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	4413      	add	r3, r2
 8000d5a:	00db      	lsls	r3, r3, #3
 8000d5c:	440b      	add	r3, r1
 8000d5e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	2200      	movs	r2, #0
 8000d76:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8000d78:	68b9      	ldr	r1, [r7, #8]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	68fa      	ldr	r2, [r7, #12]
 8000d7e:	3206      	adds	r2, #6
 8000d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d80c      	bhi.n	8000db0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	68d9      	ldr	r1, [r3, #12]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	1c5a      	adds	r2, r3, #1
 8000d9e:	4613      	mov	r3, r2
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	4413      	add	r3, r2
 8000da4:	00db      	lsls	r3, r3, #3
 8000da6:	440b      	add	r3, r1
 8000da8:	461a      	mov	r2, r3
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	e004      	b.n	8000dba <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	461a      	mov	r2, r3
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	2b03      	cmp	r3, #3
 8000dd0:	d9bd      	bls.n	8000d4e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	68da      	ldr	r2, [r3, #12]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000de4:	611a      	str	r2, [r3, #16]
}
 8000de6:	bf00      	nop
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8000df2:	b480      	push	{r7}
 8000df4:	b085      	sub	sp, #20
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	e048      	b.n	8000e92 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6919      	ldr	r1, [r3, #16]
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	4613      	mov	r3, r2
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	4413      	add	r3, r2
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	440b      	add	r3, r1
 8000e10:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	2200      	movs	r2, #0
 8000e28:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	2200      	movs	r2, #0
 8000e34:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000e3c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8000e56:	68b9      	ldr	r1, [r7, #8]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	3212      	adds	r2, #18
 8000e5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d80c      	bhi.n	8000e82 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6919      	ldr	r1, [r3, #16]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	1c5a      	adds	r2, r3, #1
 8000e70:	4613      	mov	r3, r2
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	4413      	add	r3, r2
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	440b      	add	r3, r1
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
 8000e80:	e004      	b.n	8000e8c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	691b      	ldr	r3, [r3, #16]
 8000e86:	461a      	mov	r2, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	2b03      	cmp	r3, #3
 8000e96:	d9b3      	bls.n	8000e00 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	691a      	ldr	r2, [r3, #16]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000ec2:	60da      	str	r2, [r3, #12]
}
 8000ec4:	bf00      	nop
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b089      	sub	sp, #36	@ 0x24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
 8000eee:	e175      	b.n	80011dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	f040 8164 	bne.w	80011d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f003 0303 	and.w	r3, r3, #3
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d005      	beq.n	8000f26 <HAL_GPIO_Init+0x56>
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d130      	bne.n	8000f88 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	2203      	movs	r2, #3
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	68da      	ldr	r2, [r3, #12]
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	091b      	lsrs	r3, r3, #4
 8000f72:	f003 0201 	and.w	r2, r3, #1
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b03      	cmp	r3, #3
 8000f92:	d017      	beq.n	8000fc4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	689a      	ldr	r2, [r3, #8]
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d123      	bne.n	8001018 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	08da      	lsrs	r2, r3, #3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3208      	adds	r2, #8
 8000fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	f003 0307 	and.w	r3, r3, #7
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	220f      	movs	r2, #15
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	691a      	ldr	r2, [r3, #16]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	08da      	lsrs	r2, r3, #3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3208      	adds	r2, #8
 8001012:	69b9      	ldr	r1, [r7, #24]
 8001014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	2203      	movs	r2, #3
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 0203 	and.w	r2, r3, #3
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001054:	2b00      	cmp	r3, #0
 8001056:	f000 80be 	beq.w	80011d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	4b66      	ldr	r3, [pc, #408]	@ (80011f4 <HAL_GPIO_Init+0x324>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105e:	4a65      	ldr	r2, [pc, #404]	@ (80011f4 <HAL_GPIO_Init+0x324>)
 8001060:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001064:	6453      	str	r3, [r2, #68]	@ 0x44
 8001066:	4b63      	ldr	r3, [pc, #396]	@ (80011f4 <HAL_GPIO_Init+0x324>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001072:	4a61      	ldr	r2, [pc, #388]	@ (80011f8 <HAL_GPIO_Init+0x328>)
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	089b      	lsrs	r3, r3, #2
 8001078:	3302      	adds	r3, #2
 800107a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	220f      	movs	r2, #15
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43db      	mvns	r3, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4013      	ands	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a58      	ldr	r2, [pc, #352]	@ (80011fc <HAL_GPIO_Init+0x32c>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d037      	beq.n	800110e <HAL_GPIO_Init+0x23e>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a57      	ldr	r2, [pc, #348]	@ (8001200 <HAL_GPIO_Init+0x330>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d031      	beq.n	800110a <HAL_GPIO_Init+0x23a>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a56      	ldr	r2, [pc, #344]	@ (8001204 <HAL_GPIO_Init+0x334>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d02b      	beq.n	8001106 <HAL_GPIO_Init+0x236>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a55      	ldr	r2, [pc, #340]	@ (8001208 <HAL_GPIO_Init+0x338>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d025      	beq.n	8001102 <HAL_GPIO_Init+0x232>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a54      	ldr	r2, [pc, #336]	@ (800120c <HAL_GPIO_Init+0x33c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d01f      	beq.n	80010fe <HAL_GPIO_Init+0x22e>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a53      	ldr	r2, [pc, #332]	@ (8001210 <HAL_GPIO_Init+0x340>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d019      	beq.n	80010fa <HAL_GPIO_Init+0x22a>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a52      	ldr	r2, [pc, #328]	@ (8001214 <HAL_GPIO_Init+0x344>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d013      	beq.n	80010f6 <HAL_GPIO_Init+0x226>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a51      	ldr	r2, [pc, #324]	@ (8001218 <HAL_GPIO_Init+0x348>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d00d      	beq.n	80010f2 <HAL_GPIO_Init+0x222>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a50      	ldr	r2, [pc, #320]	@ (800121c <HAL_GPIO_Init+0x34c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d007      	beq.n	80010ee <HAL_GPIO_Init+0x21e>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4f      	ldr	r2, [pc, #316]	@ (8001220 <HAL_GPIO_Init+0x350>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d101      	bne.n	80010ea <HAL_GPIO_Init+0x21a>
 80010e6:	2309      	movs	r3, #9
 80010e8:	e012      	b.n	8001110 <HAL_GPIO_Init+0x240>
 80010ea:	230a      	movs	r3, #10
 80010ec:	e010      	b.n	8001110 <HAL_GPIO_Init+0x240>
 80010ee:	2308      	movs	r3, #8
 80010f0:	e00e      	b.n	8001110 <HAL_GPIO_Init+0x240>
 80010f2:	2307      	movs	r3, #7
 80010f4:	e00c      	b.n	8001110 <HAL_GPIO_Init+0x240>
 80010f6:	2306      	movs	r3, #6
 80010f8:	e00a      	b.n	8001110 <HAL_GPIO_Init+0x240>
 80010fa:	2305      	movs	r3, #5
 80010fc:	e008      	b.n	8001110 <HAL_GPIO_Init+0x240>
 80010fe:	2304      	movs	r3, #4
 8001100:	e006      	b.n	8001110 <HAL_GPIO_Init+0x240>
 8001102:	2303      	movs	r3, #3
 8001104:	e004      	b.n	8001110 <HAL_GPIO_Init+0x240>
 8001106:	2302      	movs	r3, #2
 8001108:	e002      	b.n	8001110 <HAL_GPIO_Init+0x240>
 800110a:	2301      	movs	r3, #1
 800110c:	e000      	b.n	8001110 <HAL_GPIO_Init+0x240>
 800110e:	2300      	movs	r3, #0
 8001110:	69fa      	ldr	r2, [r7, #28]
 8001112:	f002 0203 	and.w	r2, r2, #3
 8001116:	0092      	lsls	r2, r2, #2
 8001118:	4093      	lsls	r3, r2
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001120:	4935      	ldr	r1, [pc, #212]	@ (80011f8 <HAL_GPIO_Init+0x328>)
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	089b      	lsrs	r3, r3, #2
 8001126:	3302      	adds	r3, #2
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800112e:	4b3d      	ldr	r3, [pc, #244]	@ (8001224 <HAL_GPIO_Init+0x354>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	43db      	mvns	r3, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4013      	ands	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001152:	4a34      	ldr	r2, [pc, #208]	@ (8001224 <HAL_GPIO_Init+0x354>)
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001158:	4b32      	ldr	r3, [pc, #200]	@ (8001224 <HAL_GPIO_Init+0x354>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800117c:	4a29      	ldr	r2, [pc, #164]	@ (8001224 <HAL_GPIO_Init+0x354>)
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001182:	4b28      	ldr	r3, [pc, #160]	@ (8001224 <HAL_GPIO_Init+0x354>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001224 <HAL_GPIO_Init+0x354>)
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001224 <HAL_GPIO_Init+0x354>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011d0:	4a14      	ldr	r2, [pc, #80]	@ (8001224 <HAL_GPIO_Init+0x354>)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3301      	adds	r3, #1
 80011da:	61fb      	str	r3, [r7, #28]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	2b0f      	cmp	r3, #15
 80011e0:	f67f ae86 	bls.w	8000ef0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80011e4:	bf00      	nop
 80011e6:	bf00      	nop
 80011e8:	3724      	adds	r7, #36	@ 0x24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40013800 	.word	0x40013800
 80011fc:	40020000 	.word	0x40020000
 8001200:	40020400 	.word	0x40020400
 8001204:	40020800 	.word	0x40020800
 8001208:	40020c00 	.word	0x40020c00
 800120c:	40021000 	.word	0x40021000
 8001210:	40021400 	.word	0x40021400
 8001214:	40021800 	.word	0x40021800
 8001218:	40021c00 	.word	0x40021c00
 800121c:	40022000 	.word	0x40022000
 8001220:	40022400 	.word	0x40022400
 8001224:	40013c00 	.word	0x40013c00

08001228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	807b      	strh	r3, [r7, #2]
 8001234:	4613      	mov	r3, r2
 8001236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001238:	787b      	ldrb	r3, [r7, #1]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800123e:	887a      	ldrh	r2, [r7, #2]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001244:	e003      	b.n	800124e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001246:	887b      	ldrh	r3, [r7, #2]
 8001248:	041a      	lsls	r2, r3, #16
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	619a      	str	r2, [r3, #24]
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800125a:	b480      	push	{r7}
 800125c:	b085      	sub	sp, #20
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
 8001262:	460b      	mov	r3, r1
 8001264:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800126c:	887a      	ldrh	r2, [r7, #2]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	4013      	ands	r3, r2
 8001272:	041a      	lsls	r2, r3, #16
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	43d9      	mvns	r1, r3
 8001278:	887b      	ldrh	r3, [r7, #2]
 800127a:	400b      	ands	r3, r1
 800127c:	431a      	orrs	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	619a      	str	r2, [r3, #24]
}
 8001282:	bf00      	nop
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001294:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a04      	ldr	r2, [pc, #16]	@ (80012ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800129a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800129e:	6013      	str	r3, [r2, #0]
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40007000 	.word	0x40007000

080012b0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80012ba:	4b23      	ldr	r3, [pc, #140]	@ (8001348 <HAL_PWREx_EnableOverDrive+0x98>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012be:	4a22      	ldr	r2, [pc, #136]	@ (8001348 <HAL_PWREx_EnableOverDrive+0x98>)
 80012c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012c6:	4b20      	ldr	r3, [pc, #128]	@ (8001348 <HAL_PWREx_EnableOverDrive+0x98>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80012d2:	4b1e      	ldr	r3, [pc, #120]	@ (800134c <HAL_PWREx_EnableOverDrive+0x9c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a1d      	ldr	r2, [pc, #116]	@ (800134c <HAL_PWREx_EnableOverDrive+0x9c>)
 80012d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012dc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012de:	f7ff f993 	bl	8000608 <HAL_GetTick>
 80012e2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012e4:	e009      	b.n	80012fa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012e6:	f7ff f98f 	bl	8000608 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012f4:	d901      	bls.n	80012fa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e022      	b.n	8001340 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012fa:	4b14      	ldr	r3, [pc, #80]	@ (800134c <HAL_PWREx_EnableOverDrive+0x9c>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001302:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001306:	d1ee      	bne.n	80012e6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001308:	4b10      	ldr	r3, [pc, #64]	@ (800134c <HAL_PWREx_EnableOverDrive+0x9c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a0f      	ldr	r2, [pc, #60]	@ (800134c <HAL_PWREx_EnableOverDrive+0x9c>)
 800130e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001312:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001314:	f7ff f978 	bl	8000608 <HAL_GetTick>
 8001318:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800131a:	e009      	b.n	8001330 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800131c:	f7ff f974 	bl	8000608 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800132a:	d901      	bls.n	8001330 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e007      	b.n	8001340 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001330:	4b06      	ldr	r3, [pc, #24]	@ (800134c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001338:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800133c:	d1ee      	bne.n	800131c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40023800 	.word	0x40023800
 800134c:	40007000 	.word	0x40007000

08001350 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001358:	2300      	movs	r3, #0
 800135a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d101      	bne.n	8001366 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e29b      	b.n	800189e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	f000 8087 	beq.w	8001482 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001374:	4b96      	ldr	r3, [pc, #600]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f003 030c 	and.w	r3, r3, #12
 800137c:	2b04      	cmp	r3, #4
 800137e:	d00c      	beq.n	800139a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001380:	4b93      	ldr	r3, [pc, #588]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f003 030c 	and.w	r3, r3, #12
 8001388:	2b08      	cmp	r3, #8
 800138a:	d112      	bne.n	80013b2 <HAL_RCC_OscConfig+0x62>
 800138c:	4b90      	ldr	r3, [pc, #576]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001394:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001398:	d10b      	bne.n	80013b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800139a:	4b8d      	ldr	r3, [pc, #564]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d06c      	beq.n	8001480 <HAL_RCC_OscConfig+0x130>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d168      	bne.n	8001480 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e275      	b.n	800189e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013ba:	d106      	bne.n	80013ca <HAL_RCC_OscConfig+0x7a>
 80013bc:	4b84      	ldr	r3, [pc, #528]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a83      	ldr	r2, [pc, #524]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 80013c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	e02e      	b.n	8001428 <HAL_RCC_OscConfig+0xd8>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d10c      	bne.n	80013ec <HAL_RCC_OscConfig+0x9c>
 80013d2:	4b7f      	ldr	r3, [pc, #508]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a7e      	ldr	r2, [pc, #504]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 80013d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	4b7c      	ldr	r3, [pc, #496]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a7b      	ldr	r2, [pc, #492]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 80013e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	e01d      	b.n	8001428 <HAL_RCC_OscConfig+0xd8>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013f4:	d10c      	bne.n	8001410 <HAL_RCC_OscConfig+0xc0>
 80013f6:	4b76      	ldr	r3, [pc, #472]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a75      	ldr	r2, [pc, #468]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 80013fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	4b73      	ldr	r3, [pc, #460]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a72      	ldr	r2, [pc, #456]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 8001408:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	e00b      	b.n	8001428 <HAL_RCC_OscConfig+0xd8>
 8001410:	4b6f      	ldr	r3, [pc, #444]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a6e      	ldr	r2, [pc, #440]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 8001416:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	4b6c      	ldr	r3, [pc, #432]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a6b      	ldr	r2, [pc, #428]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 8001422:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001426:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d013      	beq.n	8001458 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001430:	f7ff f8ea 	bl	8000608 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001438:	f7ff f8e6 	bl	8000608 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b64      	cmp	r3, #100	@ 0x64
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e229      	b.n	800189e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144a:	4b61      	ldr	r3, [pc, #388]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f0      	beq.n	8001438 <HAL_RCC_OscConfig+0xe8>
 8001456:	e014      	b.n	8001482 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001458:	f7ff f8d6 	bl	8000608 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001460:	f7ff f8d2 	bl	8000608 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b64      	cmp	r3, #100	@ 0x64
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e215      	b.n	800189e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001472:	4b57      	ldr	r3, [pc, #348]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f0      	bne.n	8001460 <HAL_RCC_OscConfig+0x110>
 800147e:	e000      	b.n	8001482 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d069      	beq.n	8001562 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800148e:	4b50      	ldr	r3, [pc, #320]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00b      	beq.n	80014b2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800149a:	4b4d      	ldr	r3, [pc, #308]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 030c 	and.w	r3, r3, #12
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	d11c      	bne.n	80014e0 <HAL_RCC_OscConfig+0x190>
 80014a6:	4b4a      	ldr	r3, [pc, #296]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d116      	bne.n	80014e0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b2:	4b47      	ldr	r3, [pc, #284]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d005      	beq.n	80014ca <HAL_RCC_OscConfig+0x17a>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d001      	beq.n	80014ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e1e9      	b.n	800189e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ca:	4b41      	ldr	r3, [pc, #260]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	493d      	ldr	r1, [pc, #244]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014de:	e040      	b.n	8001562 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d023      	beq.n	8001530 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014e8:	4b39      	ldr	r3, [pc, #228]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a38      	ldr	r2, [pc, #224]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f4:	f7ff f888 	bl	8000608 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014fc:	f7ff f884 	bl	8000608 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e1c7      	b.n	800189e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800150e:	4b30      	ldr	r3, [pc, #192]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0f0      	beq.n	80014fc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151a:	4b2d      	ldr	r3, [pc, #180]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	4929      	ldr	r1, [pc, #164]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 800152a:	4313      	orrs	r3, r2
 800152c:	600b      	str	r3, [r1, #0]
 800152e:	e018      	b.n	8001562 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001530:	4b27      	ldr	r3, [pc, #156]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a26      	ldr	r2, [pc, #152]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 8001536:	f023 0301 	bic.w	r3, r3, #1
 800153a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153c:	f7ff f864 	bl	8000608 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001544:	f7ff f860 	bl	8000608 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e1a3      	b.n	800189e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001556:	4b1e      	ldr	r3, [pc, #120]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	2b00      	cmp	r3, #0
 800156c:	d038      	beq.n	80015e0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d019      	beq.n	80015aa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001576:	4b16      	ldr	r3, [pc, #88]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 8001578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800157a:	4a15      	ldr	r2, [pc, #84]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001582:	f7ff f841 	bl	8000608 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800158a:	f7ff f83d 	bl	8000608 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e180      	b.n	800189e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159c:	4b0c      	ldr	r3, [pc, #48]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 800159e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0f0      	beq.n	800158a <HAL_RCC_OscConfig+0x23a>
 80015a8:	e01a      	b.n	80015e0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015aa:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 80015ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015ae:	4a08      	ldr	r2, [pc, #32]	@ (80015d0 <HAL_RCC_OscConfig+0x280>)
 80015b0:	f023 0301 	bic.w	r3, r3, #1
 80015b4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b6:	f7ff f827 	bl	8000608 <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015bc:	e00a      	b.n	80015d4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015be:	f7ff f823 	bl	8000608 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d903      	bls.n	80015d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e166      	b.n	800189e <HAL_RCC_OscConfig+0x54e>
 80015d0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d4:	4b92      	ldr	r3, [pc, #584]	@ (8001820 <HAL_RCC_OscConfig+0x4d0>)
 80015d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1ee      	bne.n	80015be <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 80a4 	beq.w	8001736 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ee:	4b8c      	ldr	r3, [pc, #560]	@ (8001820 <HAL_RCC_OscConfig+0x4d0>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10d      	bne.n	8001616 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80015fa:	4b89      	ldr	r3, [pc, #548]	@ (8001820 <HAL_RCC_OscConfig+0x4d0>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fe:	4a88      	ldr	r2, [pc, #544]	@ (8001820 <HAL_RCC_OscConfig+0x4d0>)
 8001600:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001604:	6413      	str	r3, [r2, #64]	@ 0x40
 8001606:	4b86      	ldr	r3, [pc, #536]	@ (8001820 <HAL_RCC_OscConfig+0x4d0>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001612:	2301      	movs	r3, #1
 8001614:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001616:	4b83      	ldr	r3, [pc, #524]	@ (8001824 <HAL_RCC_OscConfig+0x4d4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800161e:	2b00      	cmp	r3, #0
 8001620:	d118      	bne.n	8001654 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001622:	4b80      	ldr	r3, [pc, #512]	@ (8001824 <HAL_RCC_OscConfig+0x4d4>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a7f      	ldr	r2, [pc, #508]	@ (8001824 <HAL_RCC_OscConfig+0x4d4>)
 8001628:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800162c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800162e:	f7fe ffeb 	bl	8000608 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001636:	f7fe ffe7 	bl	8000608 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b64      	cmp	r3, #100	@ 0x64
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e12a      	b.n	800189e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001648:	4b76      	ldr	r3, [pc, #472]	@ (8001824 <HAL_RCC_OscConfig+0x4d4>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0f0      	beq.n	8001636 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d106      	bne.n	800166a <HAL_RCC_OscConfig+0x31a>
 800165c:	4b70      	ldr	r3, [pc, #448]	@ (8001820 <HAL_RCC_OscConfig+0x4d0>)
 800165e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001660:	4a6f      	ldr	r2, [pc, #444]	@ (8001820 <HAL_RCC_OscConfig+0x4d0>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	6713      	str	r3, [r2, #112]	@ 0x70
 8001668:	e02d      	b.n	80016c6 <HAL_RCC_OscConfig+0x376>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d10c      	bne.n	800168c <HAL_RCC_OscConfig+0x33c>
 8001672:	4b6b      	ldr	r3, [pc, #428]	@ (8001820 <HAL_RCC_OscConfig+0x4d0>)
 8001674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001676:	4a6a      	ldr	r2, [pc, #424]	@ (8001820 <HAL_RCC_OscConfig+0x4d0>)
 8001678:	f023 0301 	bic.w	r3, r3, #1
 800167c:	6713      	str	r3, [r2, #112]	@ 0x70
 800167e:	4b68      	ldr	r3, [pc, #416]	@ (8001820 <HAL_RCC_OscConfig+0x4d0>)
 8001680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001682:	4a67      	ldr	r2, [pc, #412]	@ (8001820 <HAL_RCC_OscConfig+0x4d0>)
 8001684:	f023 0304 	bic.w	r3, r3, #4
 8001688:	6713      	str	r3, [r2, #112]	@ 0x70
 800168a:	e01c      	b.n	80016c6 <HAL_RCC_OscConfig+0x376>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	2b05      	cmp	r3, #5
 8001692:	d10c      	bne.n	80016ae <HAL_RCC_OscConfig+0x35e>
 8001694:	4b62      	ldr	r3, [pc, #392]	@ (8001820 <HAL_RCC_OscConfig+0x4d0>)
 8001696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001698:	4a61      	ldr	r2, [pc, #388]	@ (8001820 <HAL_RCC_OscConfig+0x4d0>)
 800169a:	f043 0304 	orr.w	r3, r3, #4
 800169e:	6713      	str	r3, [r2, #112]	@ 0x70
 80016a0:	4b5f      	ldr	r3, [pc, #380]	@ (8001820 <HAL_RCC_OscConfig+0x4d0>)
 80016a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016a4:	4a5e      	ldr	r2, [pc, #376]	@ (8001820 <HAL_RCC_OscConfig+0x4d0>)
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80016ac:	e00b      	b.n	80016c6 <HAL_RCC_OscConfig+0x376>
 80016ae:	4b5c      	ldr	r3, [pc, #368]	@ (8001820 <HAL_RCC_OscConfig+0x4d0>)
 80016b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016b2:	4a5b      	ldr	r2, [pc, #364]	@ (8001820 <HAL_RCC_OscConfig+0x4d0>)
 80016b4:	f023 0301 	bic.w	r3, r3, #1
 80016b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80016ba:	4b59      	ldr	r3, [pc, #356]	@ (8001820 <HAL_RCC_OscConfig+0x4d0>)
 80016bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016be:	4a58      	ldr	r2, [pc, #352]	@ (8001820 <HAL_RCC_OscConfig+0x4d0>)
 80016c0:	f023 0304 	bic.w	r3, r3, #4
 80016c4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d015      	beq.n	80016fa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ce:	f7fe ff9b 	bl	8000608 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d4:	e00a      	b.n	80016ec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d6:	f7fe ff97 	bl	8000608 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e0d8      	b.n	800189e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ec:	4b4c      	ldr	r3, [pc, #304]	@ (8001820 <HAL_RCC_OscConfig+0x4d0>)
 80016ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0ee      	beq.n	80016d6 <HAL_RCC_OscConfig+0x386>
 80016f8:	e014      	b.n	8001724 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016fa:	f7fe ff85 	bl	8000608 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001700:	e00a      	b.n	8001718 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001702:	f7fe ff81 	bl	8000608 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001710:	4293      	cmp	r3, r2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e0c2      	b.n	800189e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001718:	4b41      	ldr	r3, [pc, #260]	@ (8001820 <HAL_RCC_OscConfig+0x4d0>)
 800171a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1ee      	bne.n	8001702 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001724:	7dfb      	ldrb	r3, [r7, #23]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d105      	bne.n	8001736 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800172a:	4b3d      	ldr	r3, [pc, #244]	@ (8001820 <HAL_RCC_OscConfig+0x4d0>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172e:	4a3c      	ldr	r2, [pc, #240]	@ (8001820 <HAL_RCC_OscConfig+0x4d0>)
 8001730:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001734:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 80ae 	beq.w	800189c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001740:	4b37      	ldr	r3, [pc, #220]	@ (8001820 <HAL_RCC_OscConfig+0x4d0>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 030c 	and.w	r3, r3, #12
 8001748:	2b08      	cmp	r3, #8
 800174a:	d06d      	beq.n	8001828 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	2b02      	cmp	r3, #2
 8001752:	d14b      	bne.n	80017ec <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001754:	4b32      	ldr	r3, [pc, #200]	@ (8001820 <HAL_RCC_OscConfig+0x4d0>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a31      	ldr	r2, [pc, #196]	@ (8001820 <HAL_RCC_OscConfig+0x4d0>)
 800175a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800175e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001760:	f7fe ff52 	bl	8000608 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001768:	f7fe ff4e 	bl	8000608 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e091      	b.n	800189e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800177a:	4b29      	ldr	r3, [pc, #164]	@ (8001820 <HAL_RCC_OscConfig+0x4d0>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f0      	bne.n	8001768 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69da      	ldr	r2, [r3, #28]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	431a      	orrs	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001794:	019b      	lsls	r3, r3, #6
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800179c:	085b      	lsrs	r3, r3, #1
 800179e:	3b01      	subs	r3, #1
 80017a0:	041b      	lsls	r3, r3, #16
 80017a2:	431a      	orrs	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a8:	061b      	lsls	r3, r3, #24
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b0:	071b      	lsls	r3, r3, #28
 80017b2:	491b      	ldr	r1, [pc, #108]	@ (8001820 <HAL_RCC_OscConfig+0x4d0>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017b8:	4b19      	ldr	r3, [pc, #100]	@ (8001820 <HAL_RCC_OscConfig+0x4d0>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a18      	ldr	r2, [pc, #96]	@ (8001820 <HAL_RCC_OscConfig+0x4d0>)
 80017be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c4:	f7fe ff20 	bl	8000608 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017cc:	f7fe ff1c 	bl	8000608 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e05f      	b.n	800189e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017de:	4b10      	ldr	r3, [pc, #64]	@ (8001820 <HAL_RCC_OscConfig+0x4d0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0x47c>
 80017ea:	e057      	b.n	800189c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001820 <HAL_RCC_OscConfig+0x4d0>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001820 <HAL_RCC_OscConfig+0x4d0>)
 80017f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f8:	f7fe ff06 	bl	8000608 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001800:	f7fe ff02 	bl	8000608 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e045      	b.n	800189e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001812:	4b03      	ldr	r3, [pc, #12]	@ (8001820 <HAL_RCC_OscConfig+0x4d0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x4b0>
 800181e:	e03d      	b.n	800189c <HAL_RCC_OscConfig+0x54c>
 8001820:	40023800 	.word	0x40023800
 8001824:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001828:	4b1f      	ldr	r3, [pc, #124]	@ (80018a8 <HAL_RCC_OscConfig+0x558>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d030      	beq.n	8001898 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001840:	429a      	cmp	r2, r3
 8001842:	d129      	bne.n	8001898 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184e:	429a      	cmp	r2, r3
 8001850:	d122      	bne.n	8001898 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001858:	4013      	ands	r3, r2
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800185e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001860:	4293      	cmp	r3, r2
 8001862:	d119      	bne.n	8001898 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800186e:	085b      	lsrs	r3, r3, #1
 8001870:	3b01      	subs	r3, #1
 8001872:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001874:	429a      	cmp	r2, r3
 8001876:	d10f      	bne.n	8001898 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001882:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001884:	429a      	cmp	r2, r3
 8001886:	d107      	bne.n	8001898 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001894:	429a      	cmp	r2, r3
 8001896:	d001      	beq.n	800189c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e000      	b.n	800189e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40023800 	.word	0x40023800

080018ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e0d0      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018c4:	4b6a      	ldr	r3, [pc, #424]	@ (8001a70 <HAL_RCC_ClockConfig+0x1c4>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 030f 	and.w	r3, r3, #15
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d910      	bls.n	80018f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d2:	4b67      	ldr	r3, [pc, #412]	@ (8001a70 <HAL_RCC_ClockConfig+0x1c4>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f023 020f 	bic.w	r2, r3, #15
 80018da:	4965      	ldr	r1, [pc, #404]	@ (8001a70 <HAL_RCC_ClockConfig+0x1c4>)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	4313      	orrs	r3, r2
 80018e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e2:	4b63      	ldr	r3, [pc, #396]	@ (8001a70 <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d001      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e0b8      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d020      	beq.n	8001942 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	2b00      	cmp	r3, #0
 800190a:	d005      	beq.n	8001918 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800190c:	4b59      	ldr	r3, [pc, #356]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c8>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	4a58      	ldr	r2, [pc, #352]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c8>)
 8001912:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001916:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	2b00      	cmp	r3, #0
 8001922:	d005      	beq.n	8001930 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001924:	4b53      	ldr	r3, [pc, #332]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c8>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	4a52      	ldr	r2, [pc, #328]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c8>)
 800192a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800192e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001930:	4b50      	ldr	r3, [pc, #320]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c8>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	494d      	ldr	r1, [pc, #308]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c8>)
 800193e:	4313      	orrs	r3, r2
 8001940:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b00      	cmp	r3, #0
 800194c:	d040      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d107      	bne.n	8001966 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001956:	4b47      	ldr	r3, [pc, #284]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d115      	bne.n	800198e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e07f      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b02      	cmp	r3, #2
 800196c:	d107      	bne.n	800197e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800196e:	4b41      	ldr	r3, [pc, #260]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c8>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d109      	bne.n	800198e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e073      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e06b      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800198e:	4b39      	ldr	r3, [pc, #228]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c8>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f023 0203 	bic.w	r2, r3, #3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c8>)
 800199c:	4313      	orrs	r3, r2
 800199e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019a0:	f7fe fe32 	bl	8000608 <HAL_GetTick>
 80019a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a6:	e00a      	b.n	80019be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a8:	f7fe fe2e 	bl	8000608 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e053      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019be:	4b2d      	ldr	r3, [pc, #180]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c8>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 020c 	and.w	r2, r3, #12
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d1eb      	bne.n	80019a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019d0:	4b27      	ldr	r3, [pc, #156]	@ (8001a70 <HAL_RCC_ClockConfig+0x1c4>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 030f 	and.w	r3, r3, #15
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d210      	bcs.n	8001a00 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019de:	4b24      	ldr	r3, [pc, #144]	@ (8001a70 <HAL_RCC_ClockConfig+0x1c4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f023 020f 	bic.w	r2, r3, #15
 80019e6:	4922      	ldr	r1, [pc, #136]	@ (8001a70 <HAL_RCC_ClockConfig+0x1c4>)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ee:	4b20      	ldr	r3, [pc, #128]	@ (8001a70 <HAL_RCC_ClockConfig+0x1c4>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d001      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e032      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d008      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a0c:	4b19      	ldr	r3, [pc, #100]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c8>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	4916      	ldr	r1, [pc, #88]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c8>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d009      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a2a:	4b12      	ldr	r3, [pc, #72]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c8>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	490e      	ldr	r1, [pc, #56]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c8>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a3e:	f000 f821 	bl	8001a84 <HAL_RCC_GetSysClockFreq>
 8001a42:	4602      	mov	r2, r0
 8001a44:	4b0b      	ldr	r3, [pc, #44]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c8>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	091b      	lsrs	r3, r3, #4
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	490a      	ldr	r1, [pc, #40]	@ (8001a78 <HAL_RCC_ClockConfig+0x1cc>)
 8001a50:	5ccb      	ldrb	r3, [r1, r3]
 8001a52:	fa22 f303 	lsr.w	r3, r2, r3
 8001a56:	4a09      	ldr	r2, [pc, #36]	@ (8001a7c <HAL_RCC_ClockConfig+0x1d0>)
 8001a58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a5a:	4b09      	ldr	r3, [pc, #36]	@ (8001a80 <HAL_RCC_ClockConfig+0x1d4>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fd8e 	bl	8000580 <HAL_InitTick>

  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023c00 	.word	0x40023c00
 8001a74:	40023800 	.word	0x40023800
 8001a78:	08003660 	.word	0x08003660
 8001a7c:	20000008 	.word	0x20000008
 8001a80:	20000000 	.word	0x20000000

08001a84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a88:	b094      	sub	sp, #80	@ 0x50
 8001a8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a90:	2300      	movs	r3, #0
 8001a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a94:	2300      	movs	r3, #0
 8001a96:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a9c:	4b79      	ldr	r3, [pc, #484]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 030c 	and.w	r3, r3, #12
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d00d      	beq.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x40>
 8001aa8:	2b08      	cmp	r3, #8
 8001aaa:	f200 80e1 	bhi.w	8001c70 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d002      	beq.n	8001ab8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	d003      	beq.n	8001abe <HAL_RCC_GetSysClockFreq+0x3a>
 8001ab6:	e0db      	b.n	8001c70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ab8:	4b73      	ldr	r3, [pc, #460]	@ (8001c88 <HAL_RCC_GetSysClockFreq+0x204>)
 8001aba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001abc:	e0db      	b.n	8001c76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001abe:	4b73      	ldr	r3, [pc, #460]	@ (8001c8c <HAL_RCC_GetSysClockFreq+0x208>)
 8001ac0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ac2:	e0d8      	b.n	8001c76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ac4:	4b6f      	ldr	r3, [pc, #444]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001acc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001ace:	4b6d      	ldr	r3, [pc, #436]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d063      	beq.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ada:	4b6a      	ldr	r3, [pc, #424]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	099b      	lsrs	r3, r3, #6
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ae4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001aec:	633b      	str	r3, [r7, #48]	@ 0x30
 8001aee:	2300      	movs	r3, #0
 8001af0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001af2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001af6:	4622      	mov	r2, r4
 8001af8:	462b      	mov	r3, r5
 8001afa:	f04f 0000 	mov.w	r0, #0
 8001afe:	f04f 0100 	mov.w	r1, #0
 8001b02:	0159      	lsls	r1, r3, #5
 8001b04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b08:	0150      	lsls	r0, r2, #5
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4621      	mov	r1, r4
 8001b10:	1a51      	subs	r1, r2, r1
 8001b12:	6139      	str	r1, [r7, #16]
 8001b14:	4629      	mov	r1, r5
 8001b16:	eb63 0301 	sbc.w	r3, r3, r1
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	f04f 0200 	mov.w	r2, #0
 8001b20:	f04f 0300 	mov.w	r3, #0
 8001b24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b28:	4659      	mov	r1, fp
 8001b2a:	018b      	lsls	r3, r1, #6
 8001b2c:	4651      	mov	r1, sl
 8001b2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b32:	4651      	mov	r1, sl
 8001b34:	018a      	lsls	r2, r1, #6
 8001b36:	4651      	mov	r1, sl
 8001b38:	ebb2 0801 	subs.w	r8, r2, r1
 8001b3c:	4659      	mov	r1, fp
 8001b3e:	eb63 0901 	sbc.w	r9, r3, r1
 8001b42:	f04f 0200 	mov.w	r2, #0
 8001b46:	f04f 0300 	mov.w	r3, #0
 8001b4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b56:	4690      	mov	r8, r2
 8001b58:	4699      	mov	r9, r3
 8001b5a:	4623      	mov	r3, r4
 8001b5c:	eb18 0303 	adds.w	r3, r8, r3
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	462b      	mov	r3, r5
 8001b64:	eb49 0303 	adc.w	r3, r9, r3
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	f04f 0300 	mov.w	r3, #0
 8001b72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b76:	4629      	mov	r1, r5
 8001b78:	024b      	lsls	r3, r1, #9
 8001b7a:	4621      	mov	r1, r4
 8001b7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b80:	4621      	mov	r1, r4
 8001b82:	024a      	lsls	r2, r1, #9
 8001b84:	4610      	mov	r0, r2
 8001b86:	4619      	mov	r1, r3
 8001b88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b94:	f7fe fb50 	bl	8000238 <__aeabi_uldivmod>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ba0:	e058      	b.n	8001c54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ba2:	4b38      	ldr	r3, [pc, #224]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	099b      	lsrs	r3, r3, #6
 8001ba8:	2200      	movs	r2, #0
 8001baa:	4618      	mov	r0, r3
 8001bac:	4611      	mov	r1, r2
 8001bae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bb2:	623b      	str	r3, [r7, #32]
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bbc:	4642      	mov	r2, r8
 8001bbe:	464b      	mov	r3, r9
 8001bc0:	f04f 0000 	mov.w	r0, #0
 8001bc4:	f04f 0100 	mov.w	r1, #0
 8001bc8:	0159      	lsls	r1, r3, #5
 8001bca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bce:	0150      	lsls	r0, r2, #5
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4641      	mov	r1, r8
 8001bd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bda:	4649      	mov	r1, r9
 8001bdc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	f04f 0300 	mov.w	r3, #0
 8001be8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bf0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bf4:	ebb2 040a 	subs.w	r4, r2, sl
 8001bf8:	eb63 050b 	sbc.w	r5, r3, fp
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	f04f 0300 	mov.w	r3, #0
 8001c04:	00eb      	lsls	r3, r5, #3
 8001c06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c0a:	00e2      	lsls	r2, r4, #3
 8001c0c:	4614      	mov	r4, r2
 8001c0e:	461d      	mov	r5, r3
 8001c10:	4643      	mov	r3, r8
 8001c12:	18e3      	adds	r3, r4, r3
 8001c14:	603b      	str	r3, [r7, #0]
 8001c16:	464b      	mov	r3, r9
 8001c18:	eb45 0303 	adc.w	r3, r5, r3
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	f04f 0300 	mov.w	r3, #0
 8001c26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c2a:	4629      	mov	r1, r5
 8001c2c:	028b      	lsls	r3, r1, #10
 8001c2e:	4621      	mov	r1, r4
 8001c30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c34:	4621      	mov	r1, r4
 8001c36:	028a      	lsls	r2, r1, #10
 8001c38:	4610      	mov	r0, r2
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c3e:	2200      	movs	r2, #0
 8001c40:	61bb      	str	r3, [r7, #24]
 8001c42:	61fa      	str	r2, [r7, #28]
 8001c44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c48:	f7fe faf6 	bl	8000238 <__aeabi_uldivmod>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4613      	mov	r3, r2
 8001c52:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001c54:	4b0b      	ldr	r3, [pc, #44]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	0c1b      	lsrs	r3, r3, #16
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	3301      	adds	r3, #1
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001c64:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c6e:	e002      	b.n	8001c76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c70:	4b05      	ldr	r3, [pc, #20]	@ (8001c88 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c72:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3750      	adds	r7, #80	@ 0x50
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c82:	bf00      	nop
 8001c84:	40023800 	.word	0x40023800
 8001c88:	00f42400 	.word	0x00f42400
 8001c8c:	007a1200 	.word	0x007a1200

08001c90 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c94:	4b03      	ldr	r3, [pc, #12]	@ (8001ca4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c96:	681b      	ldr	r3, [r3, #0]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20000008 	.word	0x20000008

08001ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cac:	f7ff fff0 	bl	8001c90 <HAL_RCC_GetHCLKFreq>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	4b05      	ldr	r3, [pc, #20]	@ (8001cc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	0a9b      	lsrs	r3, r3, #10
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	4903      	ldr	r1, [pc, #12]	@ (8001ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cbe:	5ccb      	ldrb	r3, [r1, r3]
 8001cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	08003670 	.word	0x08003670

08001cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cd4:	f7ff ffdc 	bl	8001c90 <HAL_RCC_GetHCLKFreq>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	4b05      	ldr	r3, [pc, #20]	@ (8001cf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	0b5b      	lsrs	r3, r3, #13
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	4903      	ldr	r1, [pc, #12]	@ (8001cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ce6:	5ccb      	ldrb	r3, [r1, r3]
 8001ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	08003670 	.word	0x08003670

08001cf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d012      	beq.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001d20:	4b69      	ldr	r3, [pc, #420]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	4a68      	ldr	r2, [pc, #416]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d26:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001d2a:	6093      	str	r3, [r2, #8]
 8001d2c:	4b66      	ldr	r3, [pc, #408]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d34:	4964      	ldr	r1, [pc, #400]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001d42:	2301      	movs	r3, #1
 8001d44:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d017      	beq.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d52:	4b5d      	ldr	r3, [pc, #372]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d58:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d60:	4959      	ldr	r1, [pc, #356]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001d70:	d101      	bne.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001d72:	2301      	movs	r3, #1
 8001d74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d017      	beq.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d8e:	4b4e      	ldr	r3, [pc, #312]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d94:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9c:	494a      	ldr	r1, [pc, #296]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001dac:	d101      	bne.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001dae:	2301      	movs	r3, #1
 8001db0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0320 	and.w	r3, r3, #32
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 808b 	beq.w	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ddc:	4b3a      	ldr	r3, [pc, #232]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de0:	4a39      	ldr	r2, [pc, #228]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001de2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001de6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001de8:	4b37      	ldr	r3, [pc, #220]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001df4:	4b35      	ldr	r3, [pc, #212]	@ (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a34      	ldr	r2, [pc, #208]	@ (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001dfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e00:	f7fe fc02 	bl	8000608 <HAL_GetTick>
 8001e04:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e08:	f7fe fbfe 	bl	8000608 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b64      	cmp	r3, #100	@ 0x64
 8001e14:	d901      	bls.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e38f      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e1a:	4b2c      	ldr	r3, [pc, #176]	@ (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e26:	4b28      	ldr	r3, [pc, #160]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e2e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d035      	beq.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d02e      	beq.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e44:	4b20      	ldr	r3, [pc, #128]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e4c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e52:	4a1d      	ldr	r2, [pc, #116]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e58:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e5e:	4a1a      	ldr	r2, [pc, #104]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e64:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001e66:	4a18      	ldr	r2, [pc, #96]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e6c:	4b16      	ldr	r3, [pc, #88]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d114      	bne.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e78:	f7fe fbc6 	bl	8000608 <HAL_GetTick>
 8001e7c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e7e:	e00a      	b.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e80:	f7fe fbc2 	bl	8000608 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e351      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e96:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0ee      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001eaa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001eae:	d111      	bne.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001eb0:	4b05      	ldr	r3, [pc, #20]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ebc:	4b04      	ldr	r3, [pc, #16]	@ (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001ebe:	400b      	ands	r3, r1
 8001ec0:	4901      	ldr	r1, [pc, #4]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	608b      	str	r3, [r1, #8]
 8001ec6:	e00b      	b.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40007000 	.word	0x40007000
 8001ed0:	0ffffcff 	.word	0x0ffffcff
 8001ed4:	4bac      	ldr	r3, [pc, #688]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	4aab      	ldr	r2, [pc, #684]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eda:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001ede:	6093      	str	r3, [r2, #8]
 8001ee0:	4ba9      	ldr	r3, [pc, #676]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ee2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eec:	49a6      	ldr	r1, [pc, #664]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0310 	and.w	r3, r3, #16
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d010      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001efe:	4ba2      	ldr	r3, [pc, #648]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f04:	4aa0      	ldr	r2, [pc, #640]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f0a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f0e:	4b9e      	ldr	r3, [pc, #632]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f10:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f18:	499b      	ldr	r1, [pc, #620]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00a      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f2c:	4b96      	ldr	r3, [pc, #600]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f32:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f3a:	4993      	ldr	r1, [pc, #588]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00a      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f4e:	4b8e      	ldr	r3, [pc, #568]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f54:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f5c:	498a      	ldr	r1, [pc, #552]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00a      	beq.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f70:	4b85      	ldr	r3, [pc, #532]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f7e:	4982      	ldr	r1, [pc, #520]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00a      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001f92:	4b7d      	ldr	r3, [pc, #500]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f98:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fa0:	4979      	ldr	r1, [pc, #484]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00a      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fb4:	4b74      	ldr	r3, [pc, #464]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fba:	f023 0203 	bic.w	r2, r3, #3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc2:	4971      	ldr	r1, [pc, #452]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00a      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fd6:	4b6c      	ldr	r3, [pc, #432]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fdc:	f023 020c 	bic.w	r2, r3, #12
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fe4:	4968      	ldr	r1, [pc, #416]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00a      	beq.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ff8:	4b63      	ldr	r3, [pc, #396]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ffe:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002006:	4960      	ldr	r1, [pc, #384]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002008:	4313      	orrs	r3, r2
 800200a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00a      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800201a:	4b5b      	ldr	r3, [pc, #364]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800201c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002020:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002028:	4957      	ldr	r1, [pc, #348]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800202a:	4313      	orrs	r3, r2
 800202c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00a      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800203c:	4b52      	ldr	r3, [pc, #328]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800203e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002042:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800204a:	494f      	ldr	r1, [pc, #316]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800204c:	4313      	orrs	r3, r2
 800204e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00a      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800205e:	4b4a      	ldr	r3, [pc, #296]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002064:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206c:	4946      	ldr	r1, [pc, #280]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800206e:	4313      	orrs	r3, r2
 8002070:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00a      	beq.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002080:	4b41      	ldr	r3, [pc, #260]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002086:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800208e:	493e      	ldr	r1, [pc, #248]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002090:	4313      	orrs	r3, r2
 8002092:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00a      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80020a2:	4b39      	ldr	r3, [pc, #228]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020a8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020b0:	4935      	ldr	r1, [pc, #212]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00a      	beq.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80020c4:	4b30      	ldr	r3, [pc, #192]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ca:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80020d2:	492d      	ldr	r1, [pc, #180]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d011      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80020e6:	4b28      	ldr	r3, [pc, #160]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ec:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80020f4:	4924      	ldr	r1, [pc, #144]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002100:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002104:	d101      	bne.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002106:	2301      	movs	r3, #1
 8002108:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0308 	and.w	r3, r3, #8
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002116:	2301      	movs	r3, #1
 8002118:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00a      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002126:	4b18      	ldr	r3, [pc, #96]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002128:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800212c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002134:	4914      	ldr	r1, [pc, #80]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002136:	4313      	orrs	r3, r2
 8002138:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00b      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002148:	4b0f      	ldr	r3, [pc, #60]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800214a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800214e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002158:	490b      	ldr	r1, [pc, #44]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800215a:	4313      	orrs	r3, r2
 800215c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00f      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800216c:	4b06      	ldr	r3, [pc, #24]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800216e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002172:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800217c:	4902      	ldr	r1, [pc, #8]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800217e:	4313      	orrs	r3, r2
 8002180:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002184:	e002      	b.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002186:	bf00      	nop
 8002188:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00b      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002198:	4b8a      	ldr	r3, [pc, #552]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800219a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800219e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a8:	4986      	ldr	r1, [pc, #536]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00b      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80021bc:	4b81      	ldr	r3, [pc, #516]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021c2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021cc:	497d      	ldr	r1, [pc, #500]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d006      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 80d6 	beq.w	8002394 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80021e8:	4b76      	ldr	r3, [pc, #472]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a75      	ldr	r2, [pc, #468]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80021f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021f4:	f7fe fa08 	bl	8000608 <HAL_GetTick>
 80021f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80021fc:	f7fe fa04 	bl	8000608 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b64      	cmp	r3, #100	@ 0x64
 8002208:	d901      	bls.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e195      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800220e:	4b6d      	ldr	r3, [pc, #436]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f0      	bne.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d021      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800222a:	2b00      	cmp	r3, #0
 800222c:	d11d      	bne.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800222e:	4b65      	ldr	r3, [pc, #404]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002230:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002234:	0c1b      	lsrs	r3, r3, #16
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800223c:	4b61      	ldr	r3, [pc, #388]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800223e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002242:	0e1b      	lsrs	r3, r3, #24
 8002244:	f003 030f 	and.w	r3, r3, #15
 8002248:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	019a      	lsls	r2, r3, #6
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	041b      	lsls	r3, r3, #16
 8002254:	431a      	orrs	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	061b      	lsls	r3, r3, #24
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	071b      	lsls	r3, r3, #28
 8002262:	4958      	ldr	r1, [pc, #352]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d004      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800227a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800227e:	d00a      	beq.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002288:	2b00      	cmp	r3, #0
 800228a:	d02e      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002290:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002294:	d129      	bne.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002296:	4b4b      	ldr	r3, [pc, #300]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002298:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800229c:	0c1b      	lsrs	r3, r3, #16
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80022a4:	4b47      	ldr	r3, [pc, #284]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022aa:	0f1b      	lsrs	r3, r3, #28
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	019a      	lsls	r2, r3, #6
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	041b      	lsls	r3, r3, #16
 80022bc:	431a      	orrs	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	061b      	lsls	r3, r3, #24
 80022c4:	431a      	orrs	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	071b      	lsls	r3, r3, #28
 80022ca:	493e      	ldr	r1, [pc, #248]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80022d2:	4b3c      	ldr	r3, [pc, #240]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022d8:	f023 021f 	bic.w	r2, r3, #31
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e0:	3b01      	subs	r3, #1
 80022e2:	4938      	ldr	r1, [pc, #224]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d01d      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80022f6:	4b33      	ldr	r3, [pc, #204]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022fc:	0e1b      	lsrs	r3, r3, #24
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002304:	4b2f      	ldr	r3, [pc, #188]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002306:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800230a:	0f1b      	lsrs	r3, r3, #28
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	019a      	lsls	r2, r3, #6
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	041b      	lsls	r3, r3, #16
 800231e:	431a      	orrs	r2, r3
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	061b      	lsls	r3, r3, #24
 8002324:	431a      	orrs	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	071b      	lsls	r3, r3, #28
 800232a:	4926      	ldr	r1, [pc, #152]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d011      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	019a      	lsls	r2, r3, #6
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	041b      	lsls	r3, r3, #16
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	061b      	lsls	r3, r3, #24
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	071b      	lsls	r3, r3, #28
 800235a:	491a      	ldr	r1, [pc, #104]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800235c:	4313      	orrs	r3, r2
 800235e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002362:	4b18      	ldr	r3, [pc, #96]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a17      	ldr	r2, [pc, #92]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002368:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800236c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800236e:	f7fe f94b 	bl	8000608 <HAL_GetTick>
 8002372:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002374:	e008      	b.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002376:	f7fe f947 	bl	8000608 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b64      	cmp	r3, #100	@ 0x64
 8002382:	d901      	bls.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e0d8      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002388:	4b0e      	ldr	r3, [pc, #56]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0f0      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	2b01      	cmp	r3, #1
 8002398:	f040 80ce 	bne.w	8002538 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800239c:	4b09      	ldr	r3, [pc, #36]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a08      	ldr	r2, [pc, #32]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023a8:	f7fe f92e 	bl	8000608 <HAL_GetTick>
 80023ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80023ae:	e00b      	b.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80023b0:	f7fe f92a 	bl	8000608 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b64      	cmp	r3, #100	@ 0x64
 80023bc:	d904      	bls.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e0bb      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80023c2:	bf00      	nop
 80023c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80023c8:	4b5e      	ldr	r3, [pc, #376]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80023d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023d4:	d0ec      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d009      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d02e      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d12a      	bne.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80023fe:	4b51      	ldr	r3, [pc, #324]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002404:	0c1b      	lsrs	r3, r3, #16
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800240c:	4b4d      	ldr	r3, [pc, #308]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002412:	0f1b      	lsrs	r3, r3, #28
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	019a      	lsls	r2, r3, #6
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	041b      	lsls	r3, r3, #16
 8002424:	431a      	orrs	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	061b      	lsls	r3, r3, #24
 800242c:	431a      	orrs	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	071b      	lsls	r3, r3, #28
 8002432:	4944      	ldr	r1, [pc, #272]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002434:	4313      	orrs	r3, r2
 8002436:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800243a:	4b42      	ldr	r3, [pc, #264]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800243c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002440:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002448:	3b01      	subs	r3, #1
 800244a:	021b      	lsls	r3, r3, #8
 800244c:	493d      	ldr	r1, [pc, #244]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800244e:	4313      	orrs	r3, r2
 8002450:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d022      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002464:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002468:	d11d      	bne.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800246a:	4b36      	ldr	r3, [pc, #216]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800246c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002470:	0e1b      	lsrs	r3, r3, #24
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002478:	4b32      	ldr	r3, [pc, #200]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800247a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800247e:	0f1b      	lsrs	r3, r3, #28
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	019a      	lsls	r2, r3, #6
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	041b      	lsls	r3, r3, #16
 8002492:	431a      	orrs	r2, r3
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	061b      	lsls	r3, r3, #24
 8002498:	431a      	orrs	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	071b      	lsls	r3, r3, #28
 800249e:	4929      	ldr	r1, [pc, #164]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d028      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80024b2:	4b24      	ldr	r3, [pc, #144]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024b8:	0e1b      	lsrs	r3, r3, #24
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80024c0:	4b20      	ldr	r3, [pc, #128]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024c6:	0c1b      	lsrs	r3, r3, #16
 80024c8:	f003 0303 	and.w	r3, r3, #3
 80024cc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	019a      	lsls	r2, r3, #6
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	041b      	lsls	r3, r3, #16
 80024d8:	431a      	orrs	r2, r3
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	061b      	lsls	r3, r3, #24
 80024de:	431a      	orrs	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	071b      	lsls	r3, r3, #28
 80024e6:	4917      	ldr	r1, [pc, #92]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80024ee:	4b15      	ldr	r3, [pc, #84]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024fc:	4911      	ldr	r1, [pc, #68]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002504:	4b0f      	ldr	r3, [pc, #60]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a0e      	ldr	r2, [pc, #56]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800250a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800250e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002510:	f7fe f87a 	bl	8000608 <HAL_GetTick>
 8002514:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002516:	e008      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002518:	f7fe f876 	bl	8000608 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b64      	cmp	r3, #100	@ 0x64
 8002524:	d901      	bls.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e007      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800252a:	4b06      	ldr	r3, [pc, #24]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002532:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002536:	d1ef      	bne.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3720      	adds	r7, #32
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40023800 	.word	0x40023800

08002548 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e040      	b.n	80025dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800255e:	2b00      	cmp	r3, #0
 8002560:	d106      	bne.n	8002570 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 ff74 	bl	8003458 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2224      	movs	r2, #36	@ 0x24
 8002574:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 0201 	bic.w	r2, r2, #1
 8002584:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 fa8c 	bl	8002aac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 f825 	bl	80025e4 <UART_SetConfig>
 800259a:	4603      	mov	r3, r0
 800259c:	2b01      	cmp	r3, #1
 800259e:	d101      	bne.n	80025a4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e01b      	b.n	80025dc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80025b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80025c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0201 	orr.w	r2, r2, #1
 80025d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 fb0b 	bl	8002bf0 <UART_CheckIdleState>
 80025da:	4603      	mov	r3, r0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80025ec:	2300      	movs	r3, #0
 80025ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	431a      	orrs	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	4313      	orrs	r3, r2
 8002606:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	4ba6      	ldr	r3, [pc, #664]	@ (80028a8 <UART_SetConfig+0x2c4>)
 8002610:	4013      	ands	r3, r2
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6812      	ldr	r2, [r2, #0]
 8002616:	6979      	ldr	r1, [r7, #20]
 8002618:	430b      	orrs	r3, r1
 800261a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	4313      	orrs	r3, r2
 8002640:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	430a      	orrs	r2, r1
 8002654:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a94      	ldr	r2, [pc, #592]	@ (80028ac <UART_SetConfig+0x2c8>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d120      	bne.n	80026a2 <UART_SetConfig+0xbe>
 8002660:	4b93      	ldr	r3, [pc, #588]	@ (80028b0 <UART_SetConfig+0x2cc>)
 8002662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	2b03      	cmp	r3, #3
 800266c:	d816      	bhi.n	800269c <UART_SetConfig+0xb8>
 800266e:	a201      	add	r2, pc, #4	@ (adr r2, 8002674 <UART_SetConfig+0x90>)
 8002670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002674:	08002685 	.word	0x08002685
 8002678:	08002691 	.word	0x08002691
 800267c:	0800268b 	.word	0x0800268b
 8002680:	08002697 	.word	0x08002697
 8002684:	2301      	movs	r3, #1
 8002686:	77fb      	strb	r3, [r7, #31]
 8002688:	e150      	b.n	800292c <UART_SetConfig+0x348>
 800268a:	2302      	movs	r3, #2
 800268c:	77fb      	strb	r3, [r7, #31]
 800268e:	e14d      	b.n	800292c <UART_SetConfig+0x348>
 8002690:	2304      	movs	r3, #4
 8002692:	77fb      	strb	r3, [r7, #31]
 8002694:	e14a      	b.n	800292c <UART_SetConfig+0x348>
 8002696:	2308      	movs	r3, #8
 8002698:	77fb      	strb	r3, [r7, #31]
 800269a:	e147      	b.n	800292c <UART_SetConfig+0x348>
 800269c:	2310      	movs	r3, #16
 800269e:	77fb      	strb	r3, [r7, #31]
 80026a0:	e144      	b.n	800292c <UART_SetConfig+0x348>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a83      	ldr	r2, [pc, #524]	@ (80028b4 <UART_SetConfig+0x2d0>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d132      	bne.n	8002712 <UART_SetConfig+0x12e>
 80026ac:	4b80      	ldr	r3, [pc, #512]	@ (80028b0 <UART_SetConfig+0x2cc>)
 80026ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b2:	f003 030c 	and.w	r3, r3, #12
 80026b6:	2b0c      	cmp	r3, #12
 80026b8:	d828      	bhi.n	800270c <UART_SetConfig+0x128>
 80026ba:	a201      	add	r2, pc, #4	@ (adr r2, 80026c0 <UART_SetConfig+0xdc>)
 80026bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c0:	080026f5 	.word	0x080026f5
 80026c4:	0800270d 	.word	0x0800270d
 80026c8:	0800270d 	.word	0x0800270d
 80026cc:	0800270d 	.word	0x0800270d
 80026d0:	08002701 	.word	0x08002701
 80026d4:	0800270d 	.word	0x0800270d
 80026d8:	0800270d 	.word	0x0800270d
 80026dc:	0800270d 	.word	0x0800270d
 80026e0:	080026fb 	.word	0x080026fb
 80026e4:	0800270d 	.word	0x0800270d
 80026e8:	0800270d 	.word	0x0800270d
 80026ec:	0800270d 	.word	0x0800270d
 80026f0:	08002707 	.word	0x08002707
 80026f4:	2300      	movs	r3, #0
 80026f6:	77fb      	strb	r3, [r7, #31]
 80026f8:	e118      	b.n	800292c <UART_SetConfig+0x348>
 80026fa:	2302      	movs	r3, #2
 80026fc:	77fb      	strb	r3, [r7, #31]
 80026fe:	e115      	b.n	800292c <UART_SetConfig+0x348>
 8002700:	2304      	movs	r3, #4
 8002702:	77fb      	strb	r3, [r7, #31]
 8002704:	e112      	b.n	800292c <UART_SetConfig+0x348>
 8002706:	2308      	movs	r3, #8
 8002708:	77fb      	strb	r3, [r7, #31]
 800270a:	e10f      	b.n	800292c <UART_SetConfig+0x348>
 800270c:	2310      	movs	r3, #16
 800270e:	77fb      	strb	r3, [r7, #31]
 8002710:	e10c      	b.n	800292c <UART_SetConfig+0x348>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a68      	ldr	r2, [pc, #416]	@ (80028b8 <UART_SetConfig+0x2d4>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d120      	bne.n	800275e <UART_SetConfig+0x17a>
 800271c:	4b64      	ldr	r3, [pc, #400]	@ (80028b0 <UART_SetConfig+0x2cc>)
 800271e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002722:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002726:	2b30      	cmp	r3, #48	@ 0x30
 8002728:	d013      	beq.n	8002752 <UART_SetConfig+0x16e>
 800272a:	2b30      	cmp	r3, #48	@ 0x30
 800272c:	d814      	bhi.n	8002758 <UART_SetConfig+0x174>
 800272e:	2b20      	cmp	r3, #32
 8002730:	d009      	beq.n	8002746 <UART_SetConfig+0x162>
 8002732:	2b20      	cmp	r3, #32
 8002734:	d810      	bhi.n	8002758 <UART_SetConfig+0x174>
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <UART_SetConfig+0x15c>
 800273a:	2b10      	cmp	r3, #16
 800273c:	d006      	beq.n	800274c <UART_SetConfig+0x168>
 800273e:	e00b      	b.n	8002758 <UART_SetConfig+0x174>
 8002740:	2300      	movs	r3, #0
 8002742:	77fb      	strb	r3, [r7, #31]
 8002744:	e0f2      	b.n	800292c <UART_SetConfig+0x348>
 8002746:	2302      	movs	r3, #2
 8002748:	77fb      	strb	r3, [r7, #31]
 800274a:	e0ef      	b.n	800292c <UART_SetConfig+0x348>
 800274c:	2304      	movs	r3, #4
 800274e:	77fb      	strb	r3, [r7, #31]
 8002750:	e0ec      	b.n	800292c <UART_SetConfig+0x348>
 8002752:	2308      	movs	r3, #8
 8002754:	77fb      	strb	r3, [r7, #31]
 8002756:	e0e9      	b.n	800292c <UART_SetConfig+0x348>
 8002758:	2310      	movs	r3, #16
 800275a:	77fb      	strb	r3, [r7, #31]
 800275c:	e0e6      	b.n	800292c <UART_SetConfig+0x348>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a56      	ldr	r2, [pc, #344]	@ (80028bc <UART_SetConfig+0x2d8>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d120      	bne.n	80027aa <UART_SetConfig+0x1c6>
 8002768:	4b51      	ldr	r3, [pc, #324]	@ (80028b0 <UART_SetConfig+0x2cc>)
 800276a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800276e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002772:	2bc0      	cmp	r3, #192	@ 0xc0
 8002774:	d013      	beq.n	800279e <UART_SetConfig+0x1ba>
 8002776:	2bc0      	cmp	r3, #192	@ 0xc0
 8002778:	d814      	bhi.n	80027a4 <UART_SetConfig+0x1c0>
 800277a:	2b80      	cmp	r3, #128	@ 0x80
 800277c:	d009      	beq.n	8002792 <UART_SetConfig+0x1ae>
 800277e:	2b80      	cmp	r3, #128	@ 0x80
 8002780:	d810      	bhi.n	80027a4 <UART_SetConfig+0x1c0>
 8002782:	2b00      	cmp	r3, #0
 8002784:	d002      	beq.n	800278c <UART_SetConfig+0x1a8>
 8002786:	2b40      	cmp	r3, #64	@ 0x40
 8002788:	d006      	beq.n	8002798 <UART_SetConfig+0x1b4>
 800278a:	e00b      	b.n	80027a4 <UART_SetConfig+0x1c0>
 800278c:	2300      	movs	r3, #0
 800278e:	77fb      	strb	r3, [r7, #31]
 8002790:	e0cc      	b.n	800292c <UART_SetConfig+0x348>
 8002792:	2302      	movs	r3, #2
 8002794:	77fb      	strb	r3, [r7, #31]
 8002796:	e0c9      	b.n	800292c <UART_SetConfig+0x348>
 8002798:	2304      	movs	r3, #4
 800279a:	77fb      	strb	r3, [r7, #31]
 800279c:	e0c6      	b.n	800292c <UART_SetConfig+0x348>
 800279e:	2308      	movs	r3, #8
 80027a0:	77fb      	strb	r3, [r7, #31]
 80027a2:	e0c3      	b.n	800292c <UART_SetConfig+0x348>
 80027a4:	2310      	movs	r3, #16
 80027a6:	77fb      	strb	r3, [r7, #31]
 80027a8:	e0c0      	b.n	800292c <UART_SetConfig+0x348>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a44      	ldr	r2, [pc, #272]	@ (80028c0 <UART_SetConfig+0x2dc>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d125      	bne.n	8002800 <UART_SetConfig+0x21c>
 80027b4:	4b3e      	ldr	r3, [pc, #248]	@ (80028b0 <UART_SetConfig+0x2cc>)
 80027b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80027c2:	d017      	beq.n	80027f4 <UART_SetConfig+0x210>
 80027c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80027c8:	d817      	bhi.n	80027fa <UART_SetConfig+0x216>
 80027ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027ce:	d00b      	beq.n	80027e8 <UART_SetConfig+0x204>
 80027d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027d4:	d811      	bhi.n	80027fa <UART_SetConfig+0x216>
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <UART_SetConfig+0x1fe>
 80027da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027de:	d006      	beq.n	80027ee <UART_SetConfig+0x20a>
 80027e0:	e00b      	b.n	80027fa <UART_SetConfig+0x216>
 80027e2:	2300      	movs	r3, #0
 80027e4:	77fb      	strb	r3, [r7, #31]
 80027e6:	e0a1      	b.n	800292c <UART_SetConfig+0x348>
 80027e8:	2302      	movs	r3, #2
 80027ea:	77fb      	strb	r3, [r7, #31]
 80027ec:	e09e      	b.n	800292c <UART_SetConfig+0x348>
 80027ee:	2304      	movs	r3, #4
 80027f0:	77fb      	strb	r3, [r7, #31]
 80027f2:	e09b      	b.n	800292c <UART_SetConfig+0x348>
 80027f4:	2308      	movs	r3, #8
 80027f6:	77fb      	strb	r3, [r7, #31]
 80027f8:	e098      	b.n	800292c <UART_SetConfig+0x348>
 80027fa:	2310      	movs	r3, #16
 80027fc:	77fb      	strb	r3, [r7, #31]
 80027fe:	e095      	b.n	800292c <UART_SetConfig+0x348>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a2f      	ldr	r2, [pc, #188]	@ (80028c4 <UART_SetConfig+0x2e0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d125      	bne.n	8002856 <UART_SetConfig+0x272>
 800280a:	4b29      	ldr	r3, [pc, #164]	@ (80028b0 <UART_SetConfig+0x2cc>)
 800280c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002810:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002814:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002818:	d017      	beq.n	800284a <UART_SetConfig+0x266>
 800281a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800281e:	d817      	bhi.n	8002850 <UART_SetConfig+0x26c>
 8002820:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002824:	d00b      	beq.n	800283e <UART_SetConfig+0x25a>
 8002826:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800282a:	d811      	bhi.n	8002850 <UART_SetConfig+0x26c>
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <UART_SetConfig+0x254>
 8002830:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002834:	d006      	beq.n	8002844 <UART_SetConfig+0x260>
 8002836:	e00b      	b.n	8002850 <UART_SetConfig+0x26c>
 8002838:	2301      	movs	r3, #1
 800283a:	77fb      	strb	r3, [r7, #31]
 800283c:	e076      	b.n	800292c <UART_SetConfig+0x348>
 800283e:	2302      	movs	r3, #2
 8002840:	77fb      	strb	r3, [r7, #31]
 8002842:	e073      	b.n	800292c <UART_SetConfig+0x348>
 8002844:	2304      	movs	r3, #4
 8002846:	77fb      	strb	r3, [r7, #31]
 8002848:	e070      	b.n	800292c <UART_SetConfig+0x348>
 800284a:	2308      	movs	r3, #8
 800284c:	77fb      	strb	r3, [r7, #31]
 800284e:	e06d      	b.n	800292c <UART_SetConfig+0x348>
 8002850:	2310      	movs	r3, #16
 8002852:	77fb      	strb	r3, [r7, #31]
 8002854:	e06a      	b.n	800292c <UART_SetConfig+0x348>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a1b      	ldr	r2, [pc, #108]	@ (80028c8 <UART_SetConfig+0x2e4>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d138      	bne.n	80028d2 <UART_SetConfig+0x2ee>
 8002860:	4b13      	ldr	r3, [pc, #76]	@ (80028b0 <UART_SetConfig+0x2cc>)
 8002862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002866:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800286a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800286e:	d017      	beq.n	80028a0 <UART_SetConfig+0x2bc>
 8002870:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002874:	d82a      	bhi.n	80028cc <UART_SetConfig+0x2e8>
 8002876:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800287a:	d00b      	beq.n	8002894 <UART_SetConfig+0x2b0>
 800287c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002880:	d824      	bhi.n	80028cc <UART_SetConfig+0x2e8>
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <UART_SetConfig+0x2aa>
 8002886:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800288a:	d006      	beq.n	800289a <UART_SetConfig+0x2b6>
 800288c:	e01e      	b.n	80028cc <UART_SetConfig+0x2e8>
 800288e:	2300      	movs	r3, #0
 8002890:	77fb      	strb	r3, [r7, #31]
 8002892:	e04b      	b.n	800292c <UART_SetConfig+0x348>
 8002894:	2302      	movs	r3, #2
 8002896:	77fb      	strb	r3, [r7, #31]
 8002898:	e048      	b.n	800292c <UART_SetConfig+0x348>
 800289a:	2304      	movs	r3, #4
 800289c:	77fb      	strb	r3, [r7, #31]
 800289e:	e045      	b.n	800292c <UART_SetConfig+0x348>
 80028a0:	2308      	movs	r3, #8
 80028a2:	77fb      	strb	r3, [r7, #31]
 80028a4:	e042      	b.n	800292c <UART_SetConfig+0x348>
 80028a6:	bf00      	nop
 80028a8:	efff69f3 	.word	0xefff69f3
 80028ac:	40011000 	.word	0x40011000
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40004400 	.word	0x40004400
 80028b8:	40004800 	.word	0x40004800
 80028bc:	40004c00 	.word	0x40004c00
 80028c0:	40005000 	.word	0x40005000
 80028c4:	40011400 	.word	0x40011400
 80028c8:	40007800 	.word	0x40007800
 80028cc:	2310      	movs	r3, #16
 80028ce:	77fb      	strb	r3, [r7, #31]
 80028d0:	e02c      	b.n	800292c <UART_SetConfig+0x348>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a72      	ldr	r2, [pc, #456]	@ (8002aa0 <UART_SetConfig+0x4bc>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d125      	bne.n	8002928 <UART_SetConfig+0x344>
 80028dc:	4b71      	ldr	r3, [pc, #452]	@ (8002aa4 <UART_SetConfig+0x4c0>)
 80028de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80028e6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80028ea:	d017      	beq.n	800291c <UART_SetConfig+0x338>
 80028ec:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80028f0:	d817      	bhi.n	8002922 <UART_SetConfig+0x33e>
 80028f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028f6:	d00b      	beq.n	8002910 <UART_SetConfig+0x32c>
 80028f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028fc:	d811      	bhi.n	8002922 <UART_SetConfig+0x33e>
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <UART_SetConfig+0x326>
 8002902:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002906:	d006      	beq.n	8002916 <UART_SetConfig+0x332>
 8002908:	e00b      	b.n	8002922 <UART_SetConfig+0x33e>
 800290a:	2300      	movs	r3, #0
 800290c:	77fb      	strb	r3, [r7, #31]
 800290e:	e00d      	b.n	800292c <UART_SetConfig+0x348>
 8002910:	2302      	movs	r3, #2
 8002912:	77fb      	strb	r3, [r7, #31]
 8002914:	e00a      	b.n	800292c <UART_SetConfig+0x348>
 8002916:	2304      	movs	r3, #4
 8002918:	77fb      	strb	r3, [r7, #31]
 800291a:	e007      	b.n	800292c <UART_SetConfig+0x348>
 800291c:	2308      	movs	r3, #8
 800291e:	77fb      	strb	r3, [r7, #31]
 8002920:	e004      	b.n	800292c <UART_SetConfig+0x348>
 8002922:	2310      	movs	r3, #16
 8002924:	77fb      	strb	r3, [r7, #31]
 8002926:	e001      	b.n	800292c <UART_SetConfig+0x348>
 8002928:	2310      	movs	r3, #16
 800292a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	69db      	ldr	r3, [r3, #28]
 8002930:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002934:	d15b      	bne.n	80029ee <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002936:	7ffb      	ldrb	r3, [r7, #31]
 8002938:	2b08      	cmp	r3, #8
 800293a:	d828      	bhi.n	800298e <UART_SetConfig+0x3aa>
 800293c:	a201      	add	r2, pc, #4	@ (adr r2, 8002944 <UART_SetConfig+0x360>)
 800293e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002942:	bf00      	nop
 8002944:	08002969 	.word	0x08002969
 8002948:	08002971 	.word	0x08002971
 800294c:	08002979 	.word	0x08002979
 8002950:	0800298f 	.word	0x0800298f
 8002954:	0800297f 	.word	0x0800297f
 8002958:	0800298f 	.word	0x0800298f
 800295c:	0800298f 	.word	0x0800298f
 8002960:	0800298f 	.word	0x0800298f
 8002964:	08002987 	.word	0x08002987
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002968:	f7ff f99e 	bl	8001ca8 <HAL_RCC_GetPCLK1Freq>
 800296c:	61b8      	str	r0, [r7, #24]
        break;
 800296e:	e013      	b.n	8002998 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002970:	f7ff f9ae 	bl	8001cd0 <HAL_RCC_GetPCLK2Freq>
 8002974:	61b8      	str	r0, [r7, #24]
        break;
 8002976:	e00f      	b.n	8002998 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002978:	4b4b      	ldr	r3, [pc, #300]	@ (8002aa8 <UART_SetConfig+0x4c4>)
 800297a:	61bb      	str	r3, [r7, #24]
        break;
 800297c:	e00c      	b.n	8002998 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800297e:	f7ff f881 	bl	8001a84 <HAL_RCC_GetSysClockFreq>
 8002982:	61b8      	str	r0, [r7, #24]
        break;
 8002984:	e008      	b.n	8002998 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002986:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800298a:	61bb      	str	r3, [r7, #24]
        break;
 800298c:	e004      	b.n	8002998 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800298e:	2300      	movs	r3, #0
 8002990:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	77bb      	strb	r3, [r7, #30]
        break;
 8002996:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d074      	beq.n	8002a88 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	005a      	lsls	r2, r3, #1
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	085b      	lsrs	r3, r3, #1
 80029a8:	441a      	add	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	2b0f      	cmp	r3, #15
 80029b8:	d916      	bls.n	80029e8 <UART_SetConfig+0x404>
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029c0:	d212      	bcs.n	80029e8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	f023 030f 	bic.w	r3, r3, #15
 80029ca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	085b      	lsrs	r3, r3, #1
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	89fb      	ldrh	r3, [r7, #14]
 80029da:	4313      	orrs	r3, r2
 80029dc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	89fa      	ldrh	r2, [r7, #14]
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	e04f      	b.n	8002a88 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	77bb      	strb	r3, [r7, #30]
 80029ec:	e04c      	b.n	8002a88 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80029ee:	7ffb      	ldrb	r3, [r7, #31]
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d828      	bhi.n	8002a46 <UART_SetConfig+0x462>
 80029f4:	a201      	add	r2, pc, #4	@ (adr r2, 80029fc <UART_SetConfig+0x418>)
 80029f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029fa:	bf00      	nop
 80029fc:	08002a21 	.word	0x08002a21
 8002a00:	08002a29 	.word	0x08002a29
 8002a04:	08002a31 	.word	0x08002a31
 8002a08:	08002a47 	.word	0x08002a47
 8002a0c:	08002a37 	.word	0x08002a37
 8002a10:	08002a47 	.word	0x08002a47
 8002a14:	08002a47 	.word	0x08002a47
 8002a18:	08002a47 	.word	0x08002a47
 8002a1c:	08002a3f 	.word	0x08002a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a20:	f7ff f942 	bl	8001ca8 <HAL_RCC_GetPCLK1Freq>
 8002a24:	61b8      	str	r0, [r7, #24]
        break;
 8002a26:	e013      	b.n	8002a50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a28:	f7ff f952 	bl	8001cd0 <HAL_RCC_GetPCLK2Freq>
 8002a2c:	61b8      	str	r0, [r7, #24]
        break;
 8002a2e:	e00f      	b.n	8002a50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a30:	4b1d      	ldr	r3, [pc, #116]	@ (8002aa8 <UART_SetConfig+0x4c4>)
 8002a32:	61bb      	str	r3, [r7, #24]
        break;
 8002a34:	e00c      	b.n	8002a50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a36:	f7ff f825 	bl	8001a84 <HAL_RCC_GetSysClockFreq>
 8002a3a:	61b8      	str	r0, [r7, #24]
        break;
 8002a3c:	e008      	b.n	8002a50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a42:	61bb      	str	r3, [r7, #24]
        break;
 8002a44:	e004      	b.n	8002a50 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	77bb      	strb	r3, [r7, #30]
        break;
 8002a4e:	bf00      	nop
    }

    if (pclk != 0U)
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d018      	beq.n	8002a88 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	085a      	lsrs	r2, r3, #1
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	441a      	add	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	2b0f      	cmp	r3, #15
 8002a6e:	d909      	bls.n	8002a84 <UART_SetConfig+0x4a0>
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a76:	d205      	bcs.n	8002a84 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	60da      	str	r2, [r3, #12]
 8002a82:	e001      	b.n	8002a88 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002a94:	7fbb      	ldrb	r3, [r7, #30]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3720      	adds	r7, #32
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40007c00 	.word	0x40007c00
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	00f42400 	.word	0x00f42400

08002aac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab8:	f003 0308 	and.w	r3, r3, #8
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00a      	beq.n	8002ad6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00a      	beq.n	8002af8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00a      	beq.n	8002b1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00a      	beq.n	8002b3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00a      	beq.n	8002b5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b62:	f003 0320 	and.w	r3, r3, #32
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00a      	beq.n	8002b80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d01a      	beq.n	8002bc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002baa:	d10a      	bne.n	8002bc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00a      	beq.n	8002be4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	605a      	str	r2, [r3, #4]
  }
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b098      	sub	sp, #96	@ 0x60
 8002bf4:	af02      	add	r7, sp, #8
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c00:	f7fd fd02 	bl	8000608 <HAL_GetTick>
 8002c04:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0308 	and.w	r3, r3, #8
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d12e      	bne.n	8002c72 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f88c 	bl	8002d40 <UART_WaitOnFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d021      	beq.n	8002c72 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c36:	e853 3f00 	ldrex	r3, [r3]
 8002c3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c42:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c4e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c54:	e841 2300 	strex	r3, r2, [r1]
 8002c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002c5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1e6      	bne.n	8002c2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2220      	movs	r2, #32
 8002c64:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e062      	b.n	8002d38 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d149      	bne.n	8002d14 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f856 	bl	8002d40 <UART_WaitOnFlagUntilTimeout>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d03c      	beq.n	8002d14 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca2:	e853 3f00 	ldrex	r3, [r3]
 8002ca6:	623b      	str	r3, [r7, #32]
   return(result);
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cbc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002cbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cc0:	e841 2300 	strex	r3, r2, [r1]
 8002cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1e6      	bne.n	8002c9a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	3308      	adds	r3, #8
 8002cd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	e853 3f00 	ldrex	r3, [r3]
 8002cda:	60fb      	str	r3, [r7, #12]
   return(result);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f023 0301 	bic.w	r3, r3, #1
 8002ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	3308      	adds	r3, #8
 8002cea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002cec:	61fa      	str	r2, [r7, #28]
 8002cee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf0:	69b9      	ldr	r1, [r7, #24]
 8002cf2:	69fa      	ldr	r2, [r7, #28]
 8002cf4:	e841 2300 	strex	r3, r2, [r1]
 8002cf8:	617b      	str	r3, [r7, #20]
   return(result);
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1e5      	bne.n	8002ccc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2220      	movs	r2, #32
 8002d04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e011      	b.n	8002d38 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2220      	movs	r2, #32
 8002d18:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3758      	adds	r7, #88	@ 0x58
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	603b      	str	r3, [r7, #0]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d50:	e04f      	b.n	8002df2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d58:	d04b      	beq.n	8002df2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d5a:	f7fd fc55 	bl	8000608 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d302      	bcc.n	8002d70 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e04e      	b.n	8002e12 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0304 	and.w	r3, r3, #4
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d037      	beq.n	8002df2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	2b80      	cmp	r3, #128	@ 0x80
 8002d86:	d034      	beq.n	8002df2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	2b40      	cmp	r3, #64	@ 0x40
 8002d8c:	d031      	beq.n	8002df2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d110      	bne.n	8002dbe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2208      	movs	r2, #8
 8002da2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 f838 	bl	8002e1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2208      	movs	r2, #8
 8002dae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e029      	b.n	8002e12 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dcc:	d111      	bne.n	8002df2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002dd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 f81e 	bl	8002e1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2220      	movs	r2, #32
 8002de2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e00f      	b.n	8002e12 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	69da      	ldr	r2, [r3, #28]
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	bf0c      	ite	eq
 8002e02:	2301      	moveq	r3, #1
 8002e04:	2300      	movne	r3, #0
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	461a      	mov	r2, r3
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d0a0      	beq.n	8002d52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b095      	sub	sp, #84	@ 0x54
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e2a:	e853 3f00 	ldrex	r3, [r3]
 8002e2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e40:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e42:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e48:	e841 2300 	strex	r3, r2, [r1]
 8002e4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1e6      	bne.n	8002e22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	3308      	adds	r3, #8
 8002e5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	e853 3f00 	ldrex	r3, [r3]
 8002e62:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f023 0301 	bic.w	r3, r3, #1
 8002e6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	3308      	adds	r3, #8
 8002e72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e7c:	e841 2300 	strex	r3, r2, [r1]
 8002e80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1e5      	bne.n	8002e54 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d118      	bne.n	8002ec2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	e853 3f00 	ldrex	r3, [r3]
 8002e9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	f023 0310 	bic.w	r3, r3, #16
 8002ea4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002eae:	61bb      	str	r3, [r7, #24]
 8002eb0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb2:	6979      	ldr	r1, [r7, #20]
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	e841 2300 	strex	r3, r2, [r1]
 8002eba:	613b      	str	r3, [r7, #16]
   return(result);
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1e6      	bne.n	8002e90 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002ed6:	bf00      	nop
 8002ed8:	3754      	adds	r7, #84	@ 0x54
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
	...

08002ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ee8:	f7fd fb3c 	bl	8000564 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002eec:	f000 f820 	bl	8002f30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ef0:	f000 f90e 	bl	8003110 <MX_GPIO_Init>
  MX_ETH_Init();
 8002ef4:	f000 f88e 	bl	8003014 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8002ef8:	f000 f8da 	bl	80030b0 <MX_USART3_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8002efc:	2101      	movs	r1, #1
 8002efe:	480b      	ldr	r0, [pc, #44]	@ (8002f2c <main+0x48>)
 8002f00:	f7fe f9ab 	bl	800125a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8002f04:	2064      	movs	r0, #100	@ 0x64
 8002f06:	f7fd fb8b 	bl	8000620 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8002f0a:	2180      	movs	r1, #128	@ 0x80
 8002f0c:	4807      	ldr	r0, [pc, #28]	@ (8002f2c <main+0x48>)
 8002f0e:	f7fe f9a4 	bl	800125a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8002f12:	2064      	movs	r0, #100	@ 0x64
 8002f14:	f7fd fb84 	bl	8000620 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8002f18:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002f1c:	4803      	ldr	r0, [pc, #12]	@ (8002f2c <main+0x48>)
 8002f1e:	f7fe f99c 	bl	800125a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8002f22:	2064      	movs	r0, #100	@ 0x64
 8002f24:	f7fd fb7c 	bl	8000620 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8002f28:	bf00      	nop
 8002f2a:	e7e7      	b.n	8002efc <main+0x18>
 8002f2c:	40020400 	.word	0x40020400

08002f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b094      	sub	sp, #80	@ 0x50
 8002f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f36:	f107 031c 	add.w	r3, r7, #28
 8002f3a:	2234      	movs	r2, #52	@ 0x34
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 fb55 	bl	80035ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f44:	f107 0308 	add.w	r3, r7, #8
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	60da      	str	r2, [r3, #12]
 8002f52:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002f54:	f7fe f99c 	bl	8001290 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f58:	4b2c      	ldr	r3, [pc, #176]	@ (800300c <SystemClock_Config+0xdc>)
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5c:	4a2b      	ldr	r2, [pc, #172]	@ (800300c <SystemClock_Config+0xdc>)
 8002f5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f62:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f64:	4b29      	ldr	r3, [pc, #164]	@ (800300c <SystemClock_Config+0xdc>)
 8002f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f6c:	607b      	str	r3, [r7, #4]
 8002f6e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002f70:	4b27      	ldr	r3, [pc, #156]	@ (8003010 <SystemClock_Config+0xe0>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002f78:	4a25      	ldr	r2, [pc, #148]	@ (8003010 <SystemClock_Config+0xe0>)
 8002f7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f7e:	6013      	str	r3, [r2, #0]
 8002f80:	4b23      	ldr	r3, [pc, #140]	@ (8003010 <SystemClock_Config+0xe0>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002f88:	603b      	str	r3, [r7, #0]
 8002f8a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f90:	2301      	movs	r3, #1
 8002f92:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f94:	2310      	movs	r3, #16
 8002f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f98:	2302      	movs	r3, #2
 8002f9a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002fa0:	2308      	movs	r3, #8
 8002fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002fa4:	2360      	movs	r3, #96	@ 0x60
 8002fa6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002fa8:	2302      	movs	r3, #2
 8002faa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002fac:	2304      	movs	r3, #4
 8002fae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fb4:	f107 031c 	add.w	r3, r7, #28
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7fe f9c9 	bl	8001350 <HAL_RCC_OscConfig>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002fc4:	f000 f966 	bl	8003294 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002fc8:	f7fe f972 	bl	80012b0 <HAL_PWREx_EnableOverDrive>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002fd2:	f000 f95f 	bl	8003294 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fd6:	230f      	movs	r3, #15
 8002fd8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fda:	2302      	movs	r3, #2
 8002fdc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002fe2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fe6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002fec:	f107 0308 	add.w	r3, r7, #8
 8002ff0:	2103      	movs	r1, #3
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fe fc5a 	bl	80018ac <HAL_RCC_ClockConfig>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8002ffe:	f000 f949 	bl	8003294 <Error_Handler>
  }
}
 8003002:	bf00      	nop
 8003004:	3750      	adds	r7, #80	@ 0x50
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40023800 	.word	0x40023800
 8003010:	40007000 	.word	0x40007000

08003014 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8003018:	4b1f      	ldr	r3, [pc, #124]	@ (8003098 <MX_ETH_Init+0x84>)
 800301a:	4a20      	ldr	r2, [pc, #128]	@ (800309c <MX_ETH_Init+0x88>)
 800301c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800301e:	4b20      	ldr	r3, [pc, #128]	@ (80030a0 <MX_ETH_Init+0x8c>)
 8003020:	2200      	movs	r2, #0
 8003022:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8003024:	4b1e      	ldr	r3, [pc, #120]	@ (80030a0 <MX_ETH_Init+0x8c>)
 8003026:	2280      	movs	r2, #128	@ 0x80
 8003028:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800302a:	4b1d      	ldr	r3, [pc, #116]	@ (80030a0 <MX_ETH_Init+0x8c>)
 800302c:	22e1      	movs	r2, #225	@ 0xe1
 800302e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8003030:	4b1b      	ldr	r3, [pc, #108]	@ (80030a0 <MX_ETH_Init+0x8c>)
 8003032:	2200      	movs	r2, #0
 8003034:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8003036:	4b1a      	ldr	r3, [pc, #104]	@ (80030a0 <MX_ETH_Init+0x8c>)
 8003038:	2200      	movs	r2, #0
 800303a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800303c:	4b18      	ldr	r3, [pc, #96]	@ (80030a0 <MX_ETH_Init+0x8c>)
 800303e:	2200      	movs	r2, #0
 8003040:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8003042:	4b15      	ldr	r3, [pc, #84]	@ (8003098 <MX_ETH_Init+0x84>)
 8003044:	4a16      	ldr	r2, [pc, #88]	@ (80030a0 <MX_ETH_Init+0x8c>)
 8003046:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003048:	4b13      	ldr	r3, [pc, #76]	@ (8003098 <MX_ETH_Init+0x84>)
 800304a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800304e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003050:	4b11      	ldr	r3, [pc, #68]	@ (8003098 <MX_ETH_Init+0x84>)
 8003052:	4a14      	ldr	r2, [pc, #80]	@ (80030a4 <MX_ETH_Init+0x90>)
 8003054:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003056:	4b10      	ldr	r3, [pc, #64]	@ (8003098 <MX_ETH_Init+0x84>)
 8003058:	4a13      	ldr	r2, [pc, #76]	@ (80030a8 <MX_ETH_Init+0x94>)
 800305a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800305c:	4b0e      	ldr	r3, [pc, #56]	@ (8003098 <MX_ETH_Init+0x84>)
 800305e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8003062:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8003064:	480c      	ldr	r0, [pc, #48]	@ (8003098 <MX_ETH_Init+0x84>)
 8003066:	f7fd fbe5 	bl	8000834 <HAL_ETH_Init>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8003070:	f000 f910 	bl	8003294 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003074:	2238      	movs	r2, #56	@ 0x38
 8003076:	2100      	movs	r1, #0
 8003078:	480c      	ldr	r0, [pc, #48]	@ (80030ac <MX_ETH_Init+0x98>)
 800307a:	f000 fab8 	bl	80035ee <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800307e:	4b0b      	ldr	r3, [pc, #44]	@ (80030ac <MX_ETH_Init+0x98>)
 8003080:	2221      	movs	r2, #33	@ 0x21
 8003082:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003084:	4b09      	ldr	r3, [pc, #36]	@ (80030ac <MX_ETH_Init+0x98>)
 8003086:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800308a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800308c:	4b07      	ldr	r3, [pc, #28]	@ (80030ac <MX_ETH_Init+0x98>)
 800308e:	2200      	movs	r2, #0
 8003090:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8003092:	bf00      	nop
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	200001a4 	.word	0x200001a4
 800309c:	40028000 	.word	0x40028000
 80030a0:	200002dc 	.word	0x200002dc
 80030a4:	200000ac 	.word	0x200000ac
 80030a8:	2000000c 	.word	0x2000000c
 80030ac:	2000016c 	.word	0x2000016c

080030b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80030b4:	4b14      	ldr	r3, [pc, #80]	@ (8003108 <MX_USART3_UART_Init+0x58>)
 80030b6:	4a15      	ldr	r2, [pc, #84]	@ (800310c <MX_USART3_UART_Init+0x5c>)
 80030b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80030ba:	4b13      	ldr	r3, [pc, #76]	@ (8003108 <MX_USART3_UART_Init+0x58>)
 80030bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80030c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80030c2:	4b11      	ldr	r3, [pc, #68]	@ (8003108 <MX_USART3_UART_Init+0x58>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80030c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003108 <MX_USART3_UART_Init+0x58>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80030ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003108 <MX_USART3_UART_Init+0x58>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80030d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003108 <MX_USART3_UART_Init+0x58>)
 80030d6:	220c      	movs	r2, #12
 80030d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030da:	4b0b      	ldr	r3, [pc, #44]	@ (8003108 <MX_USART3_UART_Init+0x58>)
 80030dc:	2200      	movs	r2, #0
 80030de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80030e0:	4b09      	ldr	r3, [pc, #36]	@ (8003108 <MX_USART3_UART_Init+0x58>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030e6:	4b08      	ldr	r3, [pc, #32]	@ (8003108 <MX_USART3_UART_Init+0x58>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030ec:	4b06      	ldr	r3, [pc, #24]	@ (8003108 <MX_USART3_UART_Init+0x58>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80030f2:	4805      	ldr	r0, [pc, #20]	@ (8003108 <MX_USART3_UART_Init+0x58>)
 80030f4:	f7ff fa28 	bl	8002548 <HAL_UART_Init>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80030fe:	f000 f8c9 	bl	8003294 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003102:	bf00      	nop
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20000254 	.word	0x20000254
 800310c:	40004800 	.word	0x40004800

08003110 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b08c      	sub	sp, #48	@ 0x30
 8003114:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003116:	f107 031c 	add.w	r3, r7, #28
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	605a      	str	r2, [r3, #4]
 8003120:	609a      	str	r2, [r3, #8]
 8003122:	60da      	str	r2, [r3, #12]
 8003124:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003126:	4b56      	ldr	r3, [pc, #344]	@ (8003280 <MX_GPIO_Init+0x170>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312a:	4a55      	ldr	r2, [pc, #340]	@ (8003280 <MX_GPIO_Init+0x170>)
 800312c:	f043 0304 	orr.w	r3, r3, #4
 8003130:	6313      	str	r3, [r2, #48]	@ 0x30
 8003132:	4b53      	ldr	r3, [pc, #332]	@ (8003280 <MX_GPIO_Init+0x170>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003136:	f003 0304 	and.w	r3, r3, #4
 800313a:	61bb      	str	r3, [r7, #24]
 800313c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800313e:	4b50      	ldr	r3, [pc, #320]	@ (8003280 <MX_GPIO_Init+0x170>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003142:	4a4f      	ldr	r2, [pc, #316]	@ (8003280 <MX_GPIO_Init+0x170>)
 8003144:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003148:	6313      	str	r3, [r2, #48]	@ 0x30
 800314a:	4b4d      	ldr	r3, [pc, #308]	@ (8003280 <MX_GPIO_Init+0x170>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003152:	617b      	str	r3, [r7, #20]
 8003154:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003156:	4b4a      	ldr	r3, [pc, #296]	@ (8003280 <MX_GPIO_Init+0x170>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315a:	4a49      	ldr	r2, [pc, #292]	@ (8003280 <MX_GPIO_Init+0x170>)
 800315c:	f043 0301 	orr.w	r3, r3, #1
 8003160:	6313      	str	r3, [r2, #48]	@ 0x30
 8003162:	4b47      	ldr	r3, [pc, #284]	@ (8003280 <MX_GPIO_Init+0x170>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	613b      	str	r3, [r7, #16]
 800316c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800316e:	4b44      	ldr	r3, [pc, #272]	@ (8003280 <MX_GPIO_Init+0x170>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003172:	4a43      	ldr	r2, [pc, #268]	@ (8003280 <MX_GPIO_Init+0x170>)
 8003174:	f043 0302 	orr.w	r3, r3, #2
 8003178:	6313      	str	r3, [r2, #48]	@ 0x30
 800317a:	4b41      	ldr	r3, [pc, #260]	@ (8003280 <MX_GPIO_Init+0x170>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003186:	4b3e      	ldr	r3, [pc, #248]	@ (8003280 <MX_GPIO_Init+0x170>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318a:	4a3d      	ldr	r2, [pc, #244]	@ (8003280 <MX_GPIO_Init+0x170>)
 800318c:	f043 0308 	orr.w	r3, r3, #8
 8003190:	6313      	str	r3, [r2, #48]	@ 0x30
 8003192:	4b3b      	ldr	r3, [pc, #236]	@ (8003280 <MX_GPIO_Init+0x170>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	60bb      	str	r3, [r7, #8]
 800319c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800319e:	4b38      	ldr	r3, [pc, #224]	@ (8003280 <MX_GPIO_Init+0x170>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a2:	4a37      	ldr	r2, [pc, #220]	@ (8003280 <MX_GPIO_Init+0x170>)
 80031a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80031aa:	4b35      	ldr	r3, [pc, #212]	@ (8003280 <MX_GPIO_Init+0x170>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031b2:	607b      	str	r3, [r7, #4]
 80031b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80031b6:	2200      	movs	r2, #0
 80031b8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80031bc:	4831      	ldr	r0, [pc, #196]	@ (8003284 <MX_GPIO_Init+0x174>)
 80031be:	f7fe f833 	bl	8001228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80031c2:	2200      	movs	r2, #0
 80031c4:	2140      	movs	r1, #64	@ 0x40
 80031c6:	4830      	ldr	r0, [pc, #192]	@ (8003288 <MX_GPIO_Init+0x178>)
 80031c8:	f7fe f82e 	bl	8001228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80031cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80031d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80031d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d8:	2300      	movs	r3, #0
 80031da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80031dc:	f107 031c 	add.w	r3, r7, #28
 80031e0:	4619      	mov	r1, r3
 80031e2:	482a      	ldr	r0, [pc, #168]	@ (800328c <MX_GPIO_Init+0x17c>)
 80031e4:	f7fd fe74 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80031e8:	f244 0381 	movw	r3, #16513	@ 0x4081
 80031ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ee:	2301      	movs	r3, #1
 80031f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f2:	2300      	movs	r3, #0
 80031f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f6:	2300      	movs	r3, #0
 80031f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031fa:	f107 031c 	add.w	r3, r7, #28
 80031fe:	4619      	mov	r1, r3
 8003200:	4820      	ldr	r0, [pc, #128]	@ (8003284 <MX_GPIO_Init+0x174>)
 8003202:	f7fd fe65 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003206:	2340      	movs	r3, #64	@ 0x40
 8003208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800320a:	2301      	movs	r3, #1
 800320c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320e:	2300      	movs	r3, #0
 8003210:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003212:	2300      	movs	r3, #0
 8003214:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003216:	f107 031c 	add.w	r3, r7, #28
 800321a:	4619      	mov	r1, r3
 800321c:	481a      	ldr	r0, [pc, #104]	@ (8003288 <MX_GPIO_Init+0x178>)
 800321e:	f7fd fe57 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003222:	2380      	movs	r3, #128	@ 0x80
 8003224:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003226:	2300      	movs	r3, #0
 8003228:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322a:	2300      	movs	r3, #0
 800322c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800322e:	f107 031c 	add.w	r3, r7, #28
 8003232:	4619      	mov	r1, r3
 8003234:	4814      	ldr	r0, [pc, #80]	@ (8003288 <MX_GPIO_Init+0x178>)
 8003236:	f7fd fe4b 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800323a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800323e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003240:	2302      	movs	r3, #2
 8003242:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003244:	2300      	movs	r3, #0
 8003246:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003248:	2303      	movs	r3, #3
 800324a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800324c:	230a      	movs	r3, #10
 800324e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003250:	f107 031c 	add.w	r3, r7, #28
 8003254:	4619      	mov	r1, r3
 8003256:	480e      	ldr	r0, [pc, #56]	@ (8003290 <MX_GPIO_Init+0x180>)
 8003258:	f7fd fe3a 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800325c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003260:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003262:	2300      	movs	r3, #0
 8003264:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003266:	2300      	movs	r3, #0
 8003268:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800326a:	f107 031c 	add.w	r3, r7, #28
 800326e:	4619      	mov	r1, r3
 8003270:	4807      	ldr	r0, [pc, #28]	@ (8003290 <MX_GPIO_Init+0x180>)
 8003272:	f7fd fe2d 	bl	8000ed0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003276:	bf00      	nop
 8003278:	3730      	adds	r7, #48	@ 0x30
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40023800 	.word	0x40023800
 8003284:	40020400 	.word	0x40020400
 8003288:	40021800 	.word	0x40021800
 800328c:	40020800 	.word	0x40020800
 8003290:	40020000 	.word	0x40020000

08003294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003298:	b672      	cpsid	i
}
 800329a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800329c:	bf00      	nop
 800329e:	e7fd      	b.n	800329c <Error_Handler+0x8>

080032a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80032a6:	4b0f      	ldr	r3, [pc, #60]	@ (80032e4 <HAL_MspInit+0x44>)
 80032a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032aa:	4a0e      	ldr	r2, [pc, #56]	@ (80032e4 <HAL_MspInit+0x44>)
 80032ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80032b2:	4b0c      	ldr	r3, [pc, #48]	@ (80032e4 <HAL_MspInit+0x44>)
 80032b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ba:	607b      	str	r3, [r7, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032be:	4b09      	ldr	r3, [pc, #36]	@ (80032e4 <HAL_MspInit+0x44>)
 80032c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c2:	4a08      	ldr	r2, [pc, #32]	@ (80032e4 <HAL_MspInit+0x44>)
 80032c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80032ca:	4b06      	ldr	r3, [pc, #24]	@ (80032e4 <HAL_MspInit+0x44>)
 80032cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032d2:	603b      	str	r3, [r7, #0]
 80032d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	40023800 	.word	0x40023800

080032e8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b08e      	sub	sp, #56	@ 0x38
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	605a      	str	r2, [r3, #4]
 80032fa:	609a      	str	r2, [r3, #8]
 80032fc:	60da      	str	r2, [r3, #12]
 80032fe:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a4e      	ldr	r2, [pc, #312]	@ (8003440 <HAL_ETH_MspInit+0x158>)
 8003306:	4293      	cmp	r3, r2
 8003308:	f040 8096 	bne.w	8003438 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800330c:	4b4d      	ldr	r3, [pc, #308]	@ (8003444 <HAL_ETH_MspInit+0x15c>)
 800330e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003310:	4a4c      	ldr	r2, [pc, #304]	@ (8003444 <HAL_ETH_MspInit+0x15c>)
 8003312:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003316:	6313      	str	r3, [r2, #48]	@ 0x30
 8003318:	4b4a      	ldr	r3, [pc, #296]	@ (8003444 <HAL_ETH_MspInit+0x15c>)
 800331a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003320:	623b      	str	r3, [r7, #32]
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	4b47      	ldr	r3, [pc, #284]	@ (8003444 <HAL_ETH_MspInit+0x15c>)
 8003326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003328:	4a46      	ldr	r2, [pc, #280]	@ (8003444 <HAL_ETH_MspInit+0x15c>)
 800332a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800332e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003330:	4b44      	ldr	r3, [pc, #272]	@ (8003444 <HAL_ETH_MspInit+0x15c>)
 8003332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003334:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003338:	61fb      	str	r3, [r7, #28]
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	4b41      	ldr	r3, [pc, #260]	@ (8003444 <HAL_ETH_MspInit+0x15c>)
 800333e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003340:	4a40      	ldr	r2, [pc, #256]	@ (8003444 <HAL_ETH_MspInit+0x15c>)
 8003342:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003346:	6313      	str	r3, [r2, #48]	@ 0x30
 8003348:	4b3e      	ldr	r3, [pc, #248]	@ (8003444 <HAL_ETH_MspInit+0x15c>)
 800334a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003350:	61bb      	str	r3, [r7, #24]
 8003352:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003354:	4b3b      	ldr	r3, [pc, #236]	@ (8003444 <HAL_ETH_MspInit+0x15c>)
 8003356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003358:	4a3a      	ldr	r2, [pc, #232]	@ (8003444 <HAL_ETH_MspInit+0x15c>)
 800335a:	f043 0304 	orr.w	r3, r3, #4
 800335e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003360:	4b38      	ldr	r3, [pc, #224]	@ (8003444 <HAL_ETH_MspInit+0x15c>)
 8003362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	617b      	str	r3, [r7, #20]
 800336a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800336c:	4b35      	ldr	r3, [pc, #212]	@ (8003444 <HAL_ETH_MspInit+0x15c>)
 800336e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003370:	4a34      	ldr	r2, [pc, #208]	@ (8003444 <HAL_ETH_MspInit+0x15c>)
 8003372:	f043 0301 	orr.w	r3, r3, #1
 8003376:	6313      	str	r3, [r2, #48]	@ 0x30
 8003378:	4b32      	ldr	r3, [pc, #200]	@ (8003444 <HAL_ETH_MspInit+0x15c>)
 800337a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	613b      	str	r3, [r7, #16]
 8003382:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003384:	4b2f      	ldr	r3, [pc, #188]	@ (8003444 <HAL_ETH_MspInit+0x15c>)
 8003386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003388:	4a2e      	ldr	r2, [pc, #184]	@ (8003444 <HAL_ETH_MspInit+0x15c>)
 800338a:	f043 0302 	orr.w	r3, r3, #2
 800338e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003390:	4b2c      	ldr	r3, [pc, #176]	@ (8003444 <HAL_ETH_MspInit+0x15c>)
 8003392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800339c:	4b29      	ldr	r3, [pc, #164]	@ (8003444 <HAL_ETH_MspInit+0x15c>)
 800339e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a0:	4a28      	ldr	r2, [pc, #160]	@ (8003444 <HAL_ETH_MspInit+0x15c>)
 80033a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80033a8:	4b26      	ldr	r3, [pc, #152]	@ (8003444 <HAL_ETH_MspInit+0x15c>)
 80033aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b0:	60bb      	str	r3, [r7, #8]
 80033b2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80033b4:	2332      	movs	r3, #50	@ 0x32
 80033b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b8:	2302      	movs	r3, #2
 80033ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033bc:	2300      	movs	r3, #0
 80033be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c0:	2303      	movs	r3, #3
 80033c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80033c4:	230b      	movs	r3, #11
 80033c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033cc:	4619      	mov	r1, r3
 80033ce:	481e      	ldr	r0, [pc, #120]	@ (8003448 <HAL_ETH_MspInit+0x160>)
 80033d0:	f7fd fd7e 	bl	8000ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80033d4:	2386      	movs	r3, #134	@ 0x86
 80033d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d8:	2302      	movs	r3, #2
 80033da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033dc:	2300      	movs	r3, #0
 80033de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033e0:	2303      	movs	r3, #3
 80033e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80033e4:	230b      	movs	r3, #11
 80033e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033ec:	4619      	mov	r1, r3
 80033ee:	4817      	ldr	r0, [pc, #92]	@ (800344c <HAL_ETH_MspInit+0x164>)
 80033f0:	f7fd fd6e 	bl	8000ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80033f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80033f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fa:	2302      	movs	r3, #2
 80033fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003402:	2303      	movs	r3, #3
 8003404:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003406:	230b      	movs	r3, #11
 8003408:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800340a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800340e:	4619      	mov	r1, r3
 8003410:	480f      	ldr	r0, [pc, #60]	@ (8003450 <HAL_ETH_MspInit+0x168>)
 8003412:	f7fd fd5d 	bl	8000ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003416:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800341a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341c:	2302      	movs	r3, #2
 800341e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003420:	2300      	movs	r3, #0
 8003422:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003424:	2303      	movs	r3, #3
 8003426:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003428:	230b      	movs	r3, #11
 800342a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800342c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003430:	4619      	mov	r1, r3
 8003432:	4808      	ldr	r0, [pc, #32]	@ (8003454 <HAL_ETH_MspInit+0x16c>)
 8003434:	f7fd fd4c 	bl	8000ed0 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8003438:	bf00      	nop
 800343a:	3738      	adds	r7, #56	@ 0x38
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40028000 	.word	0x40028000
 8003444:	40023800 	.word	0x40023800
 8003448:	40020800 	.word	0x40020800
 800344c:	40020000 	.word	0x40020000
 8003450:	40020400 	.word	0x40020400
 8003454:	40021800 	.word	0x40021800

08003458 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b0ae      	sub	sp, #184	@ 0xb8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003460:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	605a      	str	r2, [r3, #4]
 800346a:	609a      	str	r2, [r3, #8]
 800346c:	60da      	str	r2, [r3, #12]
 800346e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003470:	f107 0314 	add.w	r3, r7, #20
 8003474:	2290      	movs	r2, #144	@ 0x90
 8003476:	2100      	movs	r1, #0
 8003478:	4618      	mov	r0, r3
 800347a:	f000 f8b8 	bl	80035ee <memset>
  if(huart->Instance==USART3)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a22      	ldr	r2, [pc, #136]	@ (800350c <HAL_UART_MspInit+0xb4>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d13c      	bne.n	8003502 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003488:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800348c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800348e:	2300      	movs	r3, #0
 8003490:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003492:	f107 0314 	add.w	r3, r7, #20
 8003496:	4618      	mov	r0, r3
 8003498:	f7fe fc2e 	bl	8001cf8 <HAL_RCCEx_PeriphCLKConfig>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80034a2:	f7ff fef7 	bl	8003294 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80034a6:	4b1a      	ldr	r3, [pc, #104]	@ (8003510 <HAL_UART_MspInit+0xb8>)
 80034a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034aa:	4a19      	ldr	r2, [pc, #100]	@ (8003510 <HAL_UART_MspInit+0xb8>)
 80034ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80034b2:	4b17      	ldr	r3, [pc, #92]	@ (8003510 <HAL_UART_MspInit+0xb8>)
 80034b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034be:	4b14      	ldr	r3, [pc, #80]	@ (8003510 <HAL_UART_MspInit+0xb8>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c2:	4a13      	ldr	r2, [pc, #76]	@ (8003510 <HAL_UART_MspInit+0xb8>)
 80034c4:	f043 0308 	orr.w	r3, r3, #8
 80034c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ca:	4b11      	ldr	r3, [pc, #68]	@ (8003510 <HAL_UART_MspInit+0xb8>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ce:	f003 0308 	and.w	r3, r3, #8
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80034d6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80034da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034de:	2302      	movs	r3, #2
 80034e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e4:	2300      	movs	r3, #0
 80034e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ea:	2303      	movs	r3, #3
 80034ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80034f0:	2307      	movs	r3, #7
 80034f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034f6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80034fa:	4619      	mov	r1, r3
 80034fc:	4805      	ldr	r0, [pc, #20]	@ (8003514 <HAL_UART_MspInit+0xbc>)
 80034fe:	f7fd fce7 	bl	8000ed0 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8003502:	bf00      	nop
 8003504:	37b8      	adds	r7, #184	@ 0xb8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40004800 	.word	0x40004800
 8003510:	40023800 	.word	0x40023800
 8003514:	40020c00 	.word	0x40020c00

08003518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800351c:	bf00      	nop
 800351e:	e7fd      	b.n	800351c <NMI_Handler+0x4>

08003520 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003524:	bf00      	nop
 8003526:	e7fd      	b.n	8003524 <HardFault_Handler+0x4>

08003528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800352c:	bf00      	nop
 800352e:	e7fd      	b.n	800352c <MemManage_Handler+0x4>

08003530 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003534:	bf00      	nop
 8003536:	e7fd      	b.n	8003534 <BusFault_Handler+0x4>

08003538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800353c:	bf00      	nop
 800353e:	e7fd      	b.n	800353c <UsageFault_Handler+0x4>

08003540 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003544:	bf00      	nop
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800354e:	b480      	push	{r7}
 8003550:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003552:	bf00      	nop
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003560:	bf00      	nop
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800356e:	f7fd f837 	bl	80005e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003572:	bf00      	nop
 8003574:	bd80      	pop	{r7, pc}
	...

08003578 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800357c:	4b06      	ldr	r3, [pc, #24]	@ (8003598 <SystemInit+0x20>)
 800357e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003582:	4a05      	ldr	r2, [pc, #20]	@ (8003598 <SystemInit+0x20>)
 8003584:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003588:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800358c:	bf00      	nop
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	e000ed00 	.word	0xe000ed00

0800359c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800359c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80035d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80035a0:	f7ff ffea 	bl	8003578 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80035a4:	480c      	ldr	r0, [pc, #48]	@ (80035d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80035a6:	490d      	ldr	r1, [pc, #52]	@ (80035dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80035a8:	4a0d      	ldr	r2, [pc, #52]	@ (80035e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80035aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035ac:	e002      	b.n	80035b4 <LoopCopyDataInit>

080035ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035b2:	3304      	adds	r3, #4

080035b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035b8:	d3f9      	bcc.n	80035ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035ba:	4a0a      	ldr	r2, [pc, #40]	@ (80035e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80035bc:	4c0a      	ldr	r4, [pc, #40]	@ (80035e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80035be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035c0:	e001      	b.n	80035c6 <LoopFillZerobss>

080035c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035c4:	3204      	adds	r2, #4

080035c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035c8:	d3fb      	bcc.n	80035c2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80035ca:	f000 f819 	bl	8003600 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035ce:	f7ff fc89 	bl	8002ee4 <main>
  bx  lr    
 80035d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80035d4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80035d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80035e0:	08003688 	.word	0x08003688
  ldr r2, =_sbss
 80035e4:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 80035e8:	200002e4 	.word	0x200002e4

080035ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035ec:	e7fe      	b.n	80035ec <ADC_IRQHandler>

080035ee <memset>:
 80035ee:	4402      	add	r2, r0
 80035f0:	4603      	mov	r3, r0
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d100      	bne.n	80035f8 <memset+0xa>
 80035f6:	4770      	bx	lr
 80035f8:	f803 1b01 	strb.w	r1, [r3], #1
 80035fc:	e7f9      	b.n	80035f2 <memset+0x4>
	...

08003600 <__libc_init_array>:
 8003600:	b570      	push	{r4, r5, r6, lr}
 8003602:	4d0d      	ldr	r5, [pc, #52]	@ (8003638 <__libc_init_array+0x38>)
 8003604:	4c0d      	ldr	r4, [pc, #52]	@ (800363c <__libc_init_array+0x3c>)
 8003606:	1b64      	subs	r4, r4, r5
 8003608:	10a4      	asrs	r4, r4, #2
 800360a:	2600      	movs	r6, #0
 800360c:	42a6      	cmp	r6, r4
 800360e:	d109      	bne.n	8003624 <__libc_init_array+0x24>
 8003610:	4d0b      	ldr	r5, [pc, #44]	@ (8003640 <__libc_init_array+0x40>)
 8003612:	4c0c      	ldr	r4, [pc, #48]	@ (8003644 <__libc_init_array+0x44>)
 8003614:	f000 f818 	bl	8003648 <_init>
 8003618:	1b64      	subs	r4, r4, r5
 800361a:	10a4      	asrs	r4, r4, #2
 800361c:	2600      	movs	r6, #0
 800361e:	42a6      	cmp	r6, r4
 8003620:	d105      	bne.n	800362e <__libc_init_array+0x2e>
 8003622:	bd70      	pop	{r4, r5, r6, pc}
 8003624:	f855 3b04 	ldr.w	r3, [r5], #4
 8003628:	4798      	blx	r3
 800362a:	3601      	adds	r6, #1
 800362c:	e7ee      	b.n	800360c <__libc_init_array+0xc>
 800362e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003632:	4798      	blx	r3
 8003634:	3601      	adds	r6, #1
 8003636:	e7f2      	b.n	800361e <__libc_init_array+0x1e>
 8003638:	08003680 	.word	0x08003680
 800363c:	08003680 	.word	0x08003680
 8003640:	08003680 	.word	0x08003680
 8003644:	08003684 	.word	0x08003684

08003648 <_init>:
 8003648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364a:	bf00      	nop
 800364c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800364e:	bc08      	pop	{r3}
 8003650:	469e      	mov	lr, r3
 8003652:	4770      	bx	lr

08003654 <_fini>:
 8003654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003656:	bf00      	nop
 8003658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800365a:	bc08      	pop	{r3}
 800365c:	469e      	mov	lr, r3
 800365e:	4770      	bx	lr
