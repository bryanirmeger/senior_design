
robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a88  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08007c80  08007c80  00008c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ccc  08007ccc  00009028  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007ccc  08007ccc  00008ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cd4  08007cd4  00009028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cd4  08007cd4  00008cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007cd8  08007cd8  00008cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08007cdc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  20000028  08007d04  00009028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08007d04  0000939c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00009028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d07  00000000  00000000  00009056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002947  00000000  00000000  0001dd5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  000206a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e04  00000000  00000000  00021860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000288f1  00000000  00000000  00022664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001622b  00000000  00000000  0004af55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe08f  00000000  00000000  00061180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015f20f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b30  00000000  00000000  0015f254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  00163d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000028 	.word	0x20000028
 8000214:	00000000 	.word	0x00000000
 8000218:	08007c68 	.word	0x08007c68

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000002c 	.word	0x2000002c
 8000234:	08007c68 	.word	0x08007c68

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b988 	b.w	8000560 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	468e      	mov	lr, r1
 8000270:	4604      	mov	r4, r0
 8000272:	4688      	mov	r8, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d962      	bls.n	8000344 <__udivmoddi4+0xdc>
 800027e:	fab2 f682 	clz	r6, r2
 8000282:	b14e      	cbz	r6, 8000298 <__udivmoddi4+0x30>
 8000284:	f1c6 0320 	rsb	r3, r6, #32
 8000288:	fa01 f806 	lsl.w	r8, r1, r6
 800028c:	fa20 f303 	lsr.w	r3, r0, r3
 8000290:	40b7      	lsls	r7, r6
 8000292:	ea43 0808 	orr.w	r8, r3, r8
 8000296:	40b4      	lsls	r4, r6
 8000298:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800029c:	fa1f fc87 	uxth.w	ip, r7
 80002a0:	fbb8 f1fe 	udiv	r1, r8, lr
 80002a4:	0c23      	lsrs	r3, r4, #16
 80002a6:	fb0e 8811 	mls	r8, lr, r1, r8
 80002aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ae:	fb01 f20c 	mul.w	r2, r1, ip
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002bc:	f080 80ea 	bcs.w	8000494 <__udivmoddi4+0x22c>
 80002c0:	429a      	cmp	r2, r3
 80002c2:	f240 80e7 	bls.w	8000494 <__udivmoddi4+0x22c>
 80002c6:	3902      	subs	r1, #2
 80002c8:	443b      	add	r3, r7
 80002ca:	1a9a      	subs	r2, r3, r2
 80002cc:	b2a3      	uxth	r3, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002da:	fb00 fc0c 	mul.w	ip, r0, ip
 80002de:	459c      	cmp	ip, r3
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0x8e>
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e8:	f080 80d6 	bcs.w	8000498 <__udivmoddi4+0x230>
 80002ec:	459c      	cmp	ip, r3
 80002ee:	f240 80d3 	bls.w	8000498 <__udivmoddi4+0x230>
 80002f2:	443b      	add	r3, r7
 80002f4:	3802      	subs	r0, #2
 80002f6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fa:	eba3 030c 	sub.w	r3, r3, ip
 80002fe:	2100      	movs	r1, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0xa2>
 8000302:	40f3      	lsrs	r3, r6
 8000304:	2200      	movs	r2, #0
 8000306:	e9c5 3200 	strd	r3, r2, [r5]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d905      	bls.n	800031e <__udivmoddi4+0xb6>
 8000312:	b10d      	cbz	r5, 8000318 <__udivmoddi4+0xb0>
 8000314:	e9c5 0100 	strd	r0, r1, [r5]
 8000318:	2100      	movs	r1, #0
 800031a:	4608      	mov	r0, r1
 800031c:	e7f5      	b.n	800030a <__udivmoddi4+0xa2>
 800031e:	fab3 f183 	clz	r1, r3
 8000322:	2900      	cmp	r1, #0
 8000324:	d146      	bne.n	80003b4 <__udivmoddi4+0x14c>
 8000326:	4573      	cmp	r3, lr
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xc8>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 8105 	bhi.w	800053a <__udivmoddi4+0x2d2>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb6e 0203 	sbc.w	r2, lr, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4690      	mov	r8, r2
 800033a:	2d00      	cmp	r5, #0
 800033c:	d0e5      	beq.n	800030a <__udivmoddi4+0xa2>
 800033e:	e9c5 4800 	strd	r4, r8, [r5]
 8000342:	e7e2      	b.n	800030a <__udivmoddi4+0xa2>
 8000344:	2a00      	cmp	r2, #0
 8000346:	f000 8090 	beq.w	800046a <__udivmoddi4+0x202>
 800034a:	fab2 f682 	clz	r6, r2
 800034e:	2e00      	cmp	r6, #0
 8000350:	f040 80a4 	bne.w	800049c <__udivmoddi4+0x234>
 8000354:	1a8a      	subs	r2, r1, r2
 8000356:	0c03      	lsrs	r3, r0, #16
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	b280      	uxth	r0, r0
 800035e:	b2bc      	uxth	r4, r7
 8000360:	2101      	movs	r1, #1
 8000362:	fbb2 fcfe 	udiv	ip, r2, lr
 8000366:	fb0e 221c 	mls	r2, lr, ip, r2
 800036a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800036e:	fb04 f20c 	mul.w	r2, r4, ip
 8000372:	429a      	cmp	r2, r3
 8000374:	d907      	bls.n	8000386 <__udivmoddi4+0x11e>
 8000376:	18fb      	adds	r3, r7, r3
 8000378:	f10c 38ff 	add.w	r8, ip, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x11c>
 800037e:	429a      	cmp	r2, r3
 8000380:	f200 80e0 	bhi.w	8000544 <__udivmoddi4+0x2dc>
 8000384:	46c4      	mov	ip, r8
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	fbb3 f2fe 	udiv	r2, r3, lr
 800038c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000390:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000394:	fb02 f404 	mul.w	r4, r2, r4
 8000398:	429c      	cmp	r4, r3
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x144>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f102 30ff 	add.w	r0, r2, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x142>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f200 80ca 	bhi.w	800053e <__udivmoddi4+0x2d6>
 80003aa:	4602      	mov	r2, r0
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0x98>
 80003b4:	f1c1 0620 	rsb	r6, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 f706 	lsr.w	r7, r2, r6
 80003be:	431f      	orrs	r7, r3
 80003c0:	fa0e f401 	lsl.w	r4, lr, r1
 80003c4:	fa20 f306 	lsr.w	r3, r0, r6
 80003c8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003cc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d0:	4323      	orrs	r3, r4
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	fa1f fc87 	uxth.w	ip, r7
 80003da:	fbbe f0f9 	udiv	r0, lr, r9
 80003de:	0c1c      	lsrs	r4, r3, #16
 80003e0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003e4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003ec:	45a6      	cmp	lr, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d909      	bls.n	8000408 <__udivmoddi4+0x1a0>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003fa:	f080 809c 	bcs.w	8000536 <__udivmoddi4+0x2ce>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f240 8099 	bls.w	8000536 <__udivmoddi4+0x2ce>
 8000404:	3802      	subs	r0, #2
 8000406:	443c      	add	r4, r7
 8000408:	eba4 040e 	sub.w	r4, r4, lr
 800040c:	fa1f fe83 	uxth.w	lr, r3
 8000410:	fbb4 f3f9 	udiv	r3, r4, r9
 8000414:	fb09 4413 	mls	r4, r9, r3, r4
 8000418:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800041c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000420:	45a4      	cmp	ip, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1ce>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f103 3eff 	add.w	lr, r3, #4294967295
 800042a:	f080 8082 	bcs.w	8000532 <__udivmoddi4+0x2ca>
 800042e:	45a4      	cmp	ip, r4
 8000430:	d97f      	bls.n	8000532 <__udivmoddi4+0x2ca>
 8000432:	3b02      	subs	r3, #2
 8000434:	443c      	add	r4, r7
 8000436:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000442:	4564      	cmp	r4, ip
 8000444:	4673      	mov	r3, lr
 8000446:	46e1      	mov	r9, ip
 8000448:	d362      	bcc.n	8000510 <__udivmoddi4+0x2a8>
 800044a:	d05f      	beq.n	800050c <__udivmoddi4+0x2a4>
 800044c:	b15d      	cbz	r5, 8000466 <__udivmoddi4+0x1fe>
 800044e:	ebb8 0203 	subs.w	r2, r8, r3
 8000452:	eb64 0409 	sbc.w	r4, r4, r9
 8000456:	fa04 f606 	lsl.w	r6, r4, r6
 800045a:	fa22 f301 	lsr.w	r3, r2, r1
 800045e:	431e      	orrs	r6, r3
 8000460:	40cc      	lsrs	r4, r1
 8000462:	e9c5 6400 	strd	r6, r4, [r5]
 8000466:	2100      	movs	r1, #0
 8000468:	e74f      	b.n	800030a <__udivmoddi4+0xa2>
 800046a:	fbb1 fcf2 	udiv	ip, r1, r2
 800046e:	0c01      	lsrs	r1, r0, #16
 8000470:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000474:	b280      	uxth	r0, r0
 8000476:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800047a:	463b      	mov	r3, r7
 800047c:	4638      	mov	r0, r7
 800047e:	463c      	mov	r4, r7
 8000480:	46b8      	mov	r8, r7
 8000482:	46be      	mov	lr, r7
 8000484:	2620      	movs	r6, #32
 8000486:	fbb1 f1f7 	udiv	r1, r1, r7
 800048a:	eba2 0208 	sub.w	r2, r2, r8
 800048e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000492:	e766      	b.n	8000362 <__udivmoddi4+0xfa>
 8000494:	4601      	mov	r1, r0
 8000496:	e718      	b.n	80002ca <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e72c      	b.n	80002f6 <__udivmoddi4+0x8e>
 800049c:	f1c6 0220 	rsb	r2, r6, #32
 80004a0:	fa2e f302 	lsr.w	r3, lr, r2
 80004a4:	40b7      	lsls	r7, r6
 80004a6:	40b1      	lsls	r1, r6
 80004a8:	fa20 f202 	lsr.w	r2, r0, r2
 80004ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b0:	430a      	orrs	r2, r1
 80004b2:	fbb3 f8fe 	udiv	r8, r3, lr
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	fb0e 3318 	mls	r3, lr, r8, r3
 80004bc:	0c11      	lsrs	r1, r2, #16
 80004be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c2:	fb08 f904 	mul.w	r9, r8, r4
 80004c6:	40b0      	lsls	r0, r6
 80004c8:	4589      	cmp	r9, r1
 80004ca:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ce:	b280      	uxth	r0, r0
 80004d0:	d93e      	bls.n	8000550 <__udivmoddi4+0x2e8>
 80004d2:	1879      	adds	r1, r7, r1
 80004d4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d8:	d201      	bcs.n	80004de <__udivmoddi4+0x276>
 80004da:	4589      	cmp	r9, r1
 80004dc:	d81f      	bhi.n	800051e <__udivmoddi4+0x2b6>
 80004de:	eba1 0109 	sub.w	r1, r1, r9
 80004e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e6:	fb09 f804 	mul.w	r8, r9, r4
 80004ea:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ee:	b292      	uxth	r2, r2
 80004f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f4:	4542      	cmp	r2, r8
 80004f6:	d229      	bcs.n	800054c <__udivmoddi4+0x2e4>
 80004f8:	18ba      	adds	r2, r7, r2
 80004fa:	f109 31ff 	add.w	r1, r9, #4294967295
 80004fe:	d2c4      	bcs.n	800048a <__udivmoddi4+0x222>
 8000500:	4542      	cmp	r2, r8
 8000502:	d2c2      	bcs.n	800048a <__udivmoddi4+0x222>
 8000504:	f1a9 0102 	sub.w	r1, r9, #2
 8000508:	443a      	add	r2, r7
 800050a:	e7be      	b.n	800048a <__udivmoddi4+0x222>
 800050c:	45f0      	cmp	r8, lr
 800050e:	d29d      	bcs.n	800044c <__udivmoddi4+0x1e4>
 8000510:	ebbe 0302 	subs.w	r3, lr, r2
 8000514:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000518:	3801      	subs	r0, #1
 800051a:	46e1      	mov	r9, ip
 800051c:	e796      	b.n	800044c <__udivmoddi4+0x1e4>
 800051e:	eba7 0909 	sub.w	r9, r7, r9
 8000522:	4449      	add	r1, r9
 8000524:	f1a8 0c02 	sub.w	ip, r8, #2
 8000528:	fbb1 f9fe 	udiv	r9, r1, lr
 800052c:	fb09 f804 	mul.w	r8, r9, r4
 8000530:	e7db      	b.n	80004ea <__udivmoddi4+0x282>
 8000532:	4673      	mov	r3, lr
 8000534:	e77f      	b.n	8000436 <__udivmoddi4+0x1ce>
 8000536:	4650      	mov	r0, sl
 8000538:	e766      	b.n	8000408 <__udivmoddi4+0x1a0>
 800053a:	4608      	mov	r0, r1
 800053c:	e6fd      	b.n	800033a <__udivmoddi4+0xd2>
 800053e:	443b      	add	r3, r7
 8000540:	3a02      	subs	r2, #2
 8000542:	e733      	b.n	80003ac <__udivmoddi4+0x144>
 8000544:	f1ac 0c02 	sub.w	ip, ip, #2
 8000548:	443b      	add	r3, r7
 800054a:	e71c      	b.n	8000386 <__udivmoddi4+0x11e>
 800054c:	4649      	mov	r1, r9
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x222>
 8000550:	eba1 0109 	sub.w	r1, r1, r9
 8000554:	46c4      	mov	ip, r8
 8000556:	fbb1 f9fe 	udiv	r9, r1, lr
 800055a:	fb09 f804 	mul.w	r8, r9, r4
 800055e:	e7c4      	b.n	80004ea <__udivmoddi4+0x282>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <BNO055_Init_I2C>:
const char reset_sensor[3]	= {REG_WRITE, BNO055_SYS_TRIGGER, 0x01 << 5};
uint8_t get_readings[1] 	= {BNO055_ACC_DATA_X_LSB};


// Configure BNO055 with the desired settings
void BNO055_Init_I2C(I2C_HandleTypeDef* hi2c_device) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b08e      	sub	sp, #56	@ 0x38
 8000568:	af02      	add	r7, sp, #8
 800056a:	6078      	str	r0, [r7, #4]
	// Select BNO055 config mode
	uint8_t opr_config_mode[2] = {BNO055_OPR_MODE, CONFIGMODE};
 800056c:	233d      	movs	r3, #61	@ 0x3d
 800056e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, opr_config_mode, sizeof(opr_config_mode), 10);
 8000570:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8000574:	230a      	movs	r3, #10
 8000576:	9300      	str	r3, [sp, #0]
 8000578:	2302      	movs	r3, #2
 800057a:	2150      	movs	r1, #80	@ 0x50
 800057c:	6878      	ldr	r0, [r7, #4]
 800057e:	f002 fb35 	bl	8002bec <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8000582:	200a      	movs	r0, #10
 8000584:	f001 fe6c 	bl	8002260 <HAL_Delay>

	// Select page 1 to configure sensors
	uint8_t conf_page1[2] = {BNO055_PAGE_ID, 0x01};
 8000588:	f240 1307 	movw	r3, #263	@ 0x107
 800058c:	853b      	strh	r3, [r7, #40]	@ 0x28
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_page1, sizeof(conf_page1), 10);
 800058e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000592:	230a      	movs	r3, #10
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	2302      	movs	r3, #2
 8000598:	2150      	movs	r1, #80	@ 0x50
 800059a:	6878      	ldr	r0, [r7, #4]
 800059c:	f002 fb26 	bl	8002bec <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80005a0:	200a      	movs	r0, #10
 80005a2:	f001 fe5d 	bl	8002260 <HAL_Delay>

	// Configure ACC (Page 1; 0x08)
	uint8_t conf_acc[2] = {BNO055_ACC_CONFIG, APwrMode << 5 | Abw << 2 | Ascale};
 80005a6:	2308      	movs	r3, #8
 80005a8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80005ac:	4b52      	ldr	r3, [pc, #328]	@ (80006f8 <BNO055_Init_I2C+0x194>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	b25b      	sxtb	r3, r3
 80005b2:	015b      	lsls	r3, r3, #5
 80005b4:	b25a      	sxtb	r2, r3
 80005b6:	4b51      	ldr	r3, [pc, #324]	@ (80006fc <BNO055_Init_I2C+0x198>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	b25b      	sxtb	r3, r3
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	b25b      	sxtb	r3, r3
 80005c0:	4313      	orrs	r3, r2
 80005c2:	b25a      	sxtb	r2, r3
 80005c4:	4b4e      	ldr	r3, [pc, #312]	@ (8000700 <BNO055_Init_I2C+0x19c>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	b25b      	sxtb	r3, r3
 80005ca:	4313      	orrs	r3, r2
 80005cc:	b25b      	sxtb	r3, r3
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_acc, sizeof(conf_acc), 10);
 80005d4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80005d8:	230a      	movs	r3, #10
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2302      	movs	r3, #2
 80005de:	2150      	movs	r1, #80	@ 0x50
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f002 fb03 	bl	8002bec <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80005e6:	200a      	movs	r0, #10
 80005e8:	f001 fe3a 	bl	8002260 <HAL_Delay>

	// Configure GYR
	uint8_t conf_gyro[2] = {BNO055_GYRO_CONFIG_0, Gbw << 3 | Gscale};
 80005ec:	230a      	movs	r3, #10
 80005ee:	f887 3020 	strb.w	r3, [r7, #32]
 80005f2:	4b44      	ldr	r3, [pc, #272]	@ (8000704 <BNO055_Init_I2C+0x1a0>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	b25b      	sxtb	r3, r3
 80005f8:	00db      	lsls	r3, r3, #3
 80005fa:	b25a      	sxtb	r2, r3
 80005fc:	4b42      	ldr	r3, [pc, #264]	@ (8000708 <BNO055_Init_I2C+0x1a4>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	b25b      	sxtb	r3, r3
 8000602:	4313      	orrs	r3, r2
 8000604:	b25b      	sxtb	r3, r3
 8000606:	b2db      	uxtb	r3, r3
 8000608:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_gyro, sizeof(conf_gyro), 10);
 800060c:	f107 0220 	add.w	r2, r7, #32
 8000610:	230a      	movs	r3, #10
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	2302      	movs	r3, #2
 8000616:	2150      	movs	r1, #80	@ 0x50
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f002 fae7 	bl	8002bec <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 800061e:	200a      	movs	r0, #10
 8000620:	f001 fe1e 	bl	8002260 <HAL_Delay>

	uint8_t conf_gyro_pwr[2] = {BNO055_GYRO_CONFIG_1, GPwrMode};
 8000624:	230b      	movs	r3, #11
 8000626:	773b      	strb	r3, [r7, #28]
 8000628:	4b38      	ldr	r3, [pc, #224]	@ (800070c <BNO055_Init_I2C+0x1a8>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	777b      	strb	r3, [r7, #29]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_gyro_pwr, sizeof(conf_gyro_pwr), 10);
 800062e:	f107 021c 	add.w	r2, r7, #28
 8000632:	230a      	movs	r3, #10
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2302      	movs	r3, #2
 8000638:	2150      	movs	r1, #80	@ 0x50
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f002 fad6 	bl	8002bec <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8000640:	200a      	movs	r0, #10
 8000642:	f001 fe0d 	bl	8002260 <HAL_Delay>

	// Configure MAG
	uint8_t conf_mag_pwr[4] = {REG_WRITE, BNO055_MAG_CONFIG, 0x01, MPwrMode << 5 | MOpMode << 3 | Modr};
 8000646:	2300      	movs	r3, #0
 8000648:	763b      	strb	r3, [r7, #24]
 800064a:	2309      	movs	r3, #9
 800064c:	767b      	strb	r3, [r7, #25]
 800064e:	2301      	movs	r3, #1
 8000650:	76bb      	strb	r3, [r7, #26]
 8000652:	4b2f      	ldr	r3, [pc, #188]	@ (8000710 <BNO055_Init_I2C+0x1ac>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	b25b      	sxtb	r3, r3
 8000658:	015b      	lsls	r3, r3, #5
 800065a:	b25a      	sxtb	r2, r3
 800065c:	4b2d      	ldr	r3, [pc, #180]	@ (8000714 <BNO055_Init_I2C+0x1b0>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	b25b      	sxtb	r3, r3
 8000662:	00db      	lsls	r3, r3, #3
 8000664:	b25b      	sxtb	r3, r3
 8000666:	4313      	orrs	r3, r2
 8000668:	b25a      	sxtb	r2, r3
 800066a:	4b2b      	ldr	r3, [pc, #172]	@ (8000718 <BNO055_Init_I2C+0x1b4>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	b25b      	sxtb	r3, r3
 8000670:	4313      	orrs	r3, r2
 8000672:	b25b      	sxtb	r3, r3
 8000674:	b2db      	uxtb	r3, r3
 8000676:	76fb      	strb	r3, [r7, #27]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_mag_pwr, sizeof(conf_mag_pwr), 10);
 8000678:	f107 0218 	add.w	r2, r7, #24
 800067c:	230a      	movs	r3, #10
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	2304      	movs	r3, #4
 8000682:	2150      	movs	r1, #80	@ 0x50
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f002 fab1 	bl	8002bec <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 800068a:	200a      	movs	r0, #10
 800068c:	f001 fde8 	bl	8002260 <HAL_Delay>

	// Select BNO055 gyro temperature source 
	//PutHexString(START_BYTE, BNO055_TEMP_SOURCE, 0x01 );
	
	// Select page 0
	uint8_t conf_page0[2] = {BNO055_PAGE_ID, 0x00};
 8000690:	2307      	movs	r3, #7
 8000692:	82bb      	strh	r3, [r7, #20]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_page0, sizeof(conf_page0), 10);
 8000694:	f107 0214 	add.w	r2, r7, #20
 8000698:	230a      	movs	r3, #10
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	2302      	movs	r3, #2
 800069e:	2150      	movs	r1, #80	@ 0x50
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f002 faa3 	bl	8002bec <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80006a6:	200a      	movs	r0, #10
 80006a8:	f001 fdda 	bl	8002260 <HAL_Delay>
	//const char conf_units[4] = {REG_WRITE, BNO055_UNIT_SEL, 0x01, 0x82};
	//SendAccelData(USART1, (uint8_t*)conf_units);
	//HAL_Delay(50);

	// Select BNO055 system power mode (Page 0; 0x3E)
	uint8_t pwr_pwrmode[2] = {BNO055_PWR_MODE, PWRMode};
 80006ac:	233e      	movs	r3, #62	@ 0x3e
 80006ae:	743b      	strb	r3, [r7, #16]
 80006b0:	4b1a      	ldr	r3, [pc, #104]	@ (800071c <BNO055_Init_I2C+0x1b8>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, pwr_pwrmode, sizeof(pwr_pwrmode), 10);
 80006b6:	f107 0210 	add.w	r2, r7, #16
 80006ba:	230a      	movs	r3, #10
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	2302      	movs	r3, #2
 80006c0:	2150      	movs	r1, #80	@ 0x50
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f002 fa92 	bl	8002bec <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80006c8:	200a      	movs	r0, #10
 80006ca:	f001 fdc9 	bl	8002260 <HAL_Delay>

	// Select BNO055 system operation mode (Page 0; 0x3D)
	uint8_t opr_oprmode[2] = {BNO055_OPR_MODE, OPRMode};
 80006ce:	233d      	movs	r3, #61	@ 0x3d
 80006d0:	733b      	strb	r3, [r7, #12]
 80006d2:	4b13      	ldr	r3, [pc, #76]	@ (8000720 <BNO055_Init_I2C+0x1bc>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, opr_oprmode, sizeof(opr_oprmode), 10);
 80006d8:	f107 020c 	add.w	r2, r7, #12
 80006dc:	230a      	movs	r3, #10
 80006de:	9300      	str	r3, [sp, #0]
 80006e0:	2302      	movs	r3, #2
 80006e2:	2150      	movs	r1, #80	@ 0x50
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f002 fa81 	bl	8002bec <HAL_I2C_Master_Transmit>
	HAL_Delay(50);
 80006ea:	2032      	movs	r0, #50	@ 0x32
 80006ec:	f001 fdb8 	bl	8002260 <HAL_Delay>
}
 80006f0:	bf00      	nop
 80006f2:	3730      	adds	r7, #48	@ 0x30
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000046 	.word	0x20000046
 80006fc:	20000002 	.word	0x20000002
 8000700:	20000001 	.word	0x20000001
 8000704:	20000000 	.word	0x20000000
 8000708:	20000045 	.word	0x20000045
 800070c:	20000044 	.word	0x20000044
 8000710:	20000047 	.word	0x20000047
 8000714:	20000003 	.word	0x20000003
 8000718:	20000004 	.word	0x20000004
 800071c:	20000048 	.word	0x20000048
 8000720:	20000005 	.word	0x20000005

08000724 <poll_IMU>:
	return status;
}

// Poll the IMU (linear acceleration and Euler angles)
// Use this when configures in IMU mode
uint8_t poll_IMU(I2C_HandleTypeDef* hi2c_device, uint8_t* imu_raw_data) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b088      	sub	sp, #32
 8000728:	af04      	add	r7, sp, #16
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	6039      	str	r1, [r7, #0]
	uint8_t status;
	// Get the raw linear acceleration data
	status = HAL_I2C_Mem_Read(hi2c_device, BNO055_I2C_ADDR_LO<<1, BNO055_LIA_DATA_X_LSB, I2C_MEMADD_SIZE_8BIT, imu_raw_data, LIN_ACC_NUMBER_OF_BYTES, 100);
 800072e:	2364      	movs	r3, #100	@ 0x64
 8000730:	9302      	str	r3, [sp, #8]
 8000732:	2304      	movs	r3, #4
 8000734:	9301      	str	r3, [sp, #4]
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2301      	movs	r3, #1
 800073c:	2228      	movs	r2, #40	@ 0x28
 800073e:	2150      	movs	r1, #80	@ 0x50
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f002 fb6b 	bl	8002e1c <HAL_I2C_Mem_Read>
 8000746:	4603      	mov	r3, r0
 8000748:	73fb      	strb	r3, [r7, #15]
	// Get the raw Euler angles data
	status = HAL_I2C_Mem_Read(hi2c_device, BNO055_I2C_ADDR_LO<<1, BNO055_EUL_HEADING_LSB, I2C_MEMADD_SIZE_8BIT, imu_raw_data + LIN_ACC_NUMBER_OF_BYTES, EULER_NUMBER_OF_BYTES, 100);
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	3304      	adds	r3, #4
 800074e:	2264      	movs	r2, #100	@ 0x64
 8000750:	9202      	str	r2, [sp, #8]
 8000752:	2206      	movs	r2, #6
 8000754:	9201      	str	r2, [sp, #4]
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2301      	movs	r3, #1
 800075a:	221a      	movs	r2, #26
 800075c:	2150      	movs	r1, #80	@ 0x50
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f002 fb5c 	bl	8002e1c <HAL_I2C_Mem_Read>
 8000764:	4603      	mov	r3, r0
 8000766:	73fb      	strb	r3, [r7, #15]
	return status;
 8000768:	7bfb      	ldrb	r3, [r7, #15]
}
 800076a:	4618      	mov	r0, r3
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af02      	add	r7, sp, #8
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	f023 030f 	bic.w	r3, r3, #15
 8000784:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	011b      	lsls	r3, r3, #4
 800078a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800078c:	7bfb      	ldrb	r3, [r7, #15]
 800078e:	f043 030c 	orr.w	r3, r3, #12
 8000792:	b2db      	uxtb	r3, r3
 8000794:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000796:	7bfb      	ldrb	r3, [r7, #15]
 8000798:	f043 0308 	orr.w	r3, r3, #8
 800079c:	b2db      	uxtb	r3, r3
 800079e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80007a0:	7bbb      	ldrb	r3, [r7, #14]
 80007a2:	f043 030c 	orr.w	r3, r3, #12
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80007aa:	7bbb      	ldrb	r3, [r7, #14]
 80007ac:	f043 0308 	orr.w	r3, r3, #8
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80007b4:	f107 0208 	add.w	r2, r7, #8
 80007b8:	2364      	movs	r3, #100	@ 0x64
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	2304      	movs	r3, #4
 80007be:	214e      	movs	r1, #78	@ 0x4e
 80007c0:	4803      	ldr	r0, [pc, #12]	@ (80007d0 <lcd_send_cmd+0x5c>)
 80007c2:	f002 fa13 	bl	8002bec <HAL_I2C_Master_Transmit>
}
 80007c6:	bf00      	nop
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	2000004c 	.word	0x2000004c

080007d4 <lcd_send_data>:

void lcd_send_data (char data)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af02      	add	r7, sp, #8
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	f023 030f 	bic.w	r3, r3, #15
 80007e4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	011b      	lsls	r3, r3, #4
 80007ea:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	f043 030d 	orr.w	r3, r3, #13
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	f043 0309 	orr.w	r3, r3, #9
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000800:	7bbb      	ldrb	r3, [r7, #14]
 8000802:	f043 030d 	orr.w	r3, r3, #13
 8000806:	b2db      	uxtb	r3, r3
 8000808:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800080a:	7bbb      	ldrb	r3, [r7, #14]
 800080c:	f043 0309 	orr.w	r3, r3, #9
 8000810:	b2db      	uxtb	r3, r3
 8000812:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000814:	f107 0208 	add.w	r2, r7, #8
 8000818:	2364      	movs	r3, #100	@ 0x64
 800081a:	9300      	str	r3, [sp, #0]
 800081c:	2304      	movs	r3, #4
 800081e:	214e      	movs	r1, #78	@ 0x4e
 8000820:	4803      	ldr	r0, [pc, #12]	@ (8000830 <lcd_send_data+0x5c>)
 8000822:	f002 f9e3 	bl	8002bec <HAL_I2C_Master_Transmit>
}
 8000826:	bf00      	nop
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	2000004c 	.word	0x2000004c

08000834 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	6039      	str	r1, [r7, #0]
    switch (row)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d003      	beq.n	800084c <lcd_put_cur+0x18>
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d005      	beq.n	8000856 <lcd_put_cur+0x22>
 800084a:	e009      	b.n	8000860 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000852:	603b      	str	r3, [r7, #0]
            break;
 8000854:	e004      	b.n	8000860 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800085c:	603b      	str	r3, [r7, #0]
            break;
 800085e:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	b2db      	uxtb	r3, r3
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff85 	bl	8000774 <lcd_send_cmd>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <lcd_init>:


void lcd_init (void)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000876:	2032      	movs	r0, #50	@ 0x32
 8000878:	f001 fcf2 	bl	8002260 <HAL_Delay>
	lcd_send_cmd (0x30);
 800087c:	2030      	movs	r0, #48	@ 0x30
 800087e:	f7ff ff79 	bl	8000774 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000882:	2005      	movs	r0, #5
 8000884:	f001 fcec 	bl	8002260 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000888:	2030      	movs	r0, #48	@ 0x30
 800088a:	f7ff ff73 	bl	8000774 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800088e:	2001      	movs	r0, #1
 8000890:	f001 fce6 	bl	8002260 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000894:	2030      	movs	r0, #48	@ 0x30
 8000896:	f7ff ff6d 	bl	8000774 <lcd_send_cmd>
	HAL_Delay(10);
 800089a:	200a      	movs	r0, #10
 800089c:	f001 fce0 	bl	8002260 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80008a0:	2020      	movs	r0, #32
 80008a2:	f7ff ff67 	bl	8000774 <lcd_send_cmd>
	HAL_Delay(10);
 80008a6:	200a      	movs	r0, #10
 80008a8:	f001 fcda 	bl	8002260 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80008ac:	2028      	movs	r0, #40	@ 0x28
 80008ae:	f7ff ff61 	bl	8000774 <lcd_send_cmd>
	HAL_Delay(1);
 80008b2:	2001      	movs	r0, #1
 80008b4:	f001 fcd4 	bl	8002260 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80008b8:	2008      	movs	r0, #8
 80008ba:	f7ff ff5b 	bl	8000774 <lcd_send_cmd>
	HAL_Delay(1);
 80008be:	2001      	movs	r0, #1
 80008c0:	f001 fcce 	bl	8002260 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80008c4:	2001      	movs	r0, #1
 80008c6:	f7ff ff55 	bl	8000774 <lcd_send_cmd>
	HAL_Delay(1);
 80008ca:	2001      	movs	r0, #1
 80008cc:	f001 fcc8 	bl	8002260 <HAL_Delay>
	HAL_Delay(1);
 80008d0:	2001      	movs	r0, #1
 80008d2:	f001 fcc5 	bl	8002260 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80008d6:	2006      	movs	r0, #6
 80008d8:	f7ff ff4c 	bl	8000774 <lcd_send_cmd>
	HAL_Delay(1);
 80008dc:	2001      	movs	r0, #1
 80008de:	f001 fcbf 	bl	8002260 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80008e2:	200c      	movs	r0, #12
 80008e4:	f7ff ff46 	bl	8000774 <lcd_send_cmd>
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}

080008ec <lcd_send_string>:

void lcd_send_string (char *str)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80008f4:	e006      	b.n	8000904 <lcd_send_string+0x18>
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	1c5a      	adds	r2, r3, #1
 80008fa:	607a      	str	r2, [r7, #4]
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff ff68 	bl	80007d4 <lcd_send_data>
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d1f4      	bne.n	80008f6 <lcd_send_string+0xa>
}
 800090c:	bf00      	nop
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <Interpret_Commands>:
/* USER CODE BEGIN 0 */

/************************ DEVICE COMMUNICATION (BLUETOOTH) ********************/

// Interpret commands
void Interpret_Commands(uint8_t *rx_buffer) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	// Respond after establishing connection with Jetson
	if (strstr((const char * ) rx_buffer, "jrdy")) {
 8000920:	4937      	ldr	r1, [pc, #220]	@ (8000a00 <Interpret_Commands+0xe8>)
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f007 f965 	bl	8007bf2 <strstr>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d005      	beq.n	800093a <Interpret_Commands+0x22>
		Send_to_Base('0', ready_confirm_string, 1);
 800092e:	2201      	movs	r2, #1
 8000930:	4934      	ldr	r1, [pc, #208]	@ (8000a04 <Interpret_Commands+0xec>)
 8000932:	2030      	movs	r0, #48	@ 0x30
 8000934:	f000 f87a 	bl	8000a2c <Send_to_Base>
		}
		else {
			Send_to_Base('0', move_fail_string, 1);
		}*/
	}
}
 8000938:	e05e      	b.n	80009f8 <Interpret_Commands+0xe0>
	else if (strstr((const char * ) rx_buffer, "poll")) {
 800093a:	4933      	ldr	r1, [pc, #204]	@ (8000a08 <Interpret_Commands+0xf0>)
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f007 f958 	bl	8007bf2 <strstr>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d002      	beq.n	800094e <Interpret_Commands+0x36>
		poll_ultrasonic();
 8000948:	f000 f90e 	bl	8000b68 <poll_ultrasonic>
}
 800094c:	e054      	b.n	80009f8 <Interpret_Commands+0xe0>
	else if (strstr((const char * ) rx_buffer, "mve")) {
 800094e:	492f      	ldr	r1, [pc, #188]	@ (8000a0c <Interpret_Commands+0xf4>)
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f007 f94e 	bl	8007bf2 <strstr>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d04d      	beq.n	80009f8 <Interpret_Commands+0xe0>
		float do_move = 0;
 800095c:	f04f 0300 	mov.w	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
		if (rx_buffer[5] == '1') {
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	3305      	adds	r3, #5
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b31      	cmp	r3, #49	@ 0x31
 800096a:	d103      	bne.n	8000974 <Interpret_Commands+0x5c>
			do_move = 1;
 800096c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	e007      	b.n	8000984 <Interpret_Commands+0x6c>
		else if (rx_buffer[5] == '0') {
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3305      	adds	r3, #5
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b30      	cmp	r3, #48	@ 0x30
 800097c:	d102      	bne.n	8000984 <Interpret_Commands+0x6c>
			do_move = 0;
 800097e:	f04f 0300 	mov.w	r3, #0
 8000982:	60fb      	str	r3, [r7, #12]
		requested_heading = (float)(rx_buffer[6]) * 360 / 255;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3306      	adds	r3, #6
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	ee07 3a90 	vmov	s15, r3
 800098e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000992:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000a10 <Interpret_Commands+0xf8>
 8000996:	ee27 7a87 	vmul.f32	s14, s15, s14
 800099a:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8000a14 <Interpret_Commands+0xfc>
 800099e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009a2:	edc7 7a02 	vstr	s15, [r7, #8]
		poll_IMU(&hi2c2, imu_readings);
 80009a6:	491c      	ldr	r1, [pc, #112]	@ (8000a18 <Interpret_Commands+0x100>)
 80009a8:	481c      	ldr	r0, [pc, #112]	@ (8000a1c <Interpret_Commands+0x104>)
 80009aa:	f7ff febb 	bl	8000724 <poll_IMU>
		euler_heading_raw = (((int16_t)((uint8_t *)(imu_readings))[5] << 8) | ((uint8_t *)(imu_readings))[4]);
 80009ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000a18 <Interpret_Commands+0x100>)
 80009b0:	795b      	ldrb	r3, [r3, #5]
 80009b2:	b21b      	sxth	r3, r3
 80009b4:	021b      	lsls	r3, r3, #8
 80009b6:	b21a      	sxth	r2, r3
 80009b8:	4b17      	ldr	r3, [pc, #92]	@ (8000a18 <Interpret_Commands+0x100>)
 80009ba:	791b      	ldrb	r3, [r3, #4]
 80009bc:	b21b      	sxth	r3, r3
 80009be:	4313      	orrs	r3, r2
 80009c0:	b21a      	sxth	r2, r3
 80009c2:	4b17      	ldr	r3, [pc, #92]	@ (8000a20 <Interpret_Commands+0x108>)
 80009c4:	801a      	strh	r2, [r3, #0]
		tide_angle = ((float)(euler_heading_raw))/16.0f;
 80009c6:	4b16      	ldr	r3, [pc, #88]	@ (8000a20 <Interpret_Commands+0x108>)
 80009c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009cc:	ee07 3a90 	vmov	s15, r3
 80009d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009d4:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80009d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009dc:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <Interpret_Commands+0x10c>)
 80009de:	edc3 7a00 	vstr	s15, [r3]
		move(do_move, requested_heading);
 80009e2:	edd7 0a02 	vldr	s1, [r7, #8]
 80009e6:	ed97 0a03 	vldr	s0, [r7, #12]
 80009ea:	f000 fa55 	bl	8000e98 <move>
		Send_to_Base('0', move_success_string,1);
 80009ee:	2201      	movs	r2, #1
 80009f0:	490d      	ldr	r1, [pc, #52]	@ (8000a28 <Interpret_Commands+0x110>)
 80009f2:	2030      	movs	r0, #48	@ 0x30
 80009f4:	f000 f81a 	bl	8000a2c <Send_to_Base>
}
 80009f8:	bf00      	nop
 80009fa:	3710      	adds	r7, #16
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	08007c80 	.word	0x08007c80
 8000a04:	20000008 	.word	0x20000008
 8000a08:	08007c88 	.word	0x08007c88
 8000a0c:	08007c90 	.word	0x08007c90
 8000a10:	43b40000 	.word	0x43b40000
 8000a14:	437f0000 	.word	0x437f0000
 8000a18:	20000380 	.word	0x20000380
 8000a1c:	200000a0 	.word	0x200000a0
 8000a20:	2000038a 	.word	0x2000038a
 8000a24:	2000038c 	.word	0x2000038c
 8000a28:	20000010 	.word	0x20000010

08000a2c <Send_to_Base>:

// Function to send bytes to Base
void Send_to_Base (uint8_t addr, uint8_t *data, uint8_t is_ready) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	6039      	str	r1, [r7, #0]
 8000a36:	71fb      	strb	r3, [r7, #7]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	71bb      	strb	r3, [r7, #6]
	while (base_state != BASE_STATE_READY) {}
 8000a3c:	bf00      	nop
 8000a3e:	4b17      	ldr	r3, [pc, #92]	@ (8000a9c <Send_to_Base+0x70>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d1fa      	bne.n	8000a3e <Send_to_Base+0x12>
	// Assign address
	base_tx_buffer[0] = addr;
 8000a48:	4a15      	ldr	r2, [pc, #84]	@ (8000aa0 <Send_to_Base+0x74>)
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	7013      	strb	r3, [r2, #0]
	// Assign data (until before the last byte)
	for (int i = 1; i < BUFFER_SIZE - 1; i++) {
 8000a4e:	2301      	movs	r3, #1
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	e00c      	b.n	8000a6e <Send_to_Base+0x42>
		base_tx_buffer[i] = data[i - 1];
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	683a      	ldr	r2, [r7, #0]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	7819      	ldrb	r1, [r3, #0]
 8000a5e:	4a10      	ldr	r2, [pc, #64]	@ (8000aa0 <Send_to_Base+0x74>)
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	4413      	add	r3, r2
 8000a64:	460a      	mov	r2, r1
 8000a66:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < BUFFER_SIZE - 1; i++) {
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	2b06      	cmp	r3, #6
 8000a72:	ddef      	ble.n	8000a54 <Send_to_Base+0x28>
	}
	// Assign status byte
	if (is_ready) {
 8000a74:	79bb      	ldrb	r3, [r7, #6]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d003      	beq.n	8000a82 <Send_to_Base+0x56>
		base_tx_buffer[BUFFER_SIZE - 1] = 'r';
 8000a7a:	4b09      	ldr	r3, [pc, #36]	@ (8000aa0 <Send_to_Base+0x74>)
 8000a7c:	2272      	movs	r2, #114	@ 0x72
 8000a7e:	71da      	strb	r2, [r3, #7]
 8000a80:	e002      	b.n	8000a88 <Send_to_Base+0x5c>
	}
	else {
		base_tx_buffer[BUFFER_SIZE - 1] = 'n';
 8000a82:	4b07      	ldr	r3, [pc, #28]	@ (8000aa0 <Send_to_Base+0x74>)
 8000a84:	226e      	movs	r2, #110	@ 0x6e
 8000a86:	71da      	strb	r2, [r3, #7]
	}
	// Transmit data packet
	HAL_UART_Transmit_IT(&huart2, base_tx_buffer, BUFFER_SIZE);
 8000a88:	2208      	movs	r2, #8
 8000a8a:	4905      	ldr	r1, [pc, #20]	@ (8000aa0 <Send_to_Base+0x74>)
 8000a8c:	4805      	ldr	r0, [pc, #20]	@ (8000aa4 <Send_to_Base+0x78>)
 8000a8e:	f005 fd15 	bl	80064bc <HAL_UART_Transmit_IT>
}
 8000a92:	bf00      	nop
 8000a94:	3710      	adds	r7, #16
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000354 	.word	0x20000354
 8000aa0:	2000034c 	.word	0x2000034c
 8000aa4:	200002bc 	.word	0x200002bc

08000aa8 <Receive_from_Base>:

// Function to Receive bytes from Base
void Receive_from_Base(void) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, base_rx_buffer, BUFFER_SIZE);
 8000aac:	2208      	movs	r2, #8
 8000aae:	4903      	ldr	r1, [pc, #12]	@ (8000abc <Receive_from_Base+0x14>)
 8000ab0:	4803      	ldr	r0, [pc, #12]	@ (8000ac0 <Receive_from_Base+0x18>)
 8000ab2:	f005 fd61 	bl	8006578 <HAL_UART_Receive_IT>
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000344 	.word	0x20000344
 8000ac0:	200002bc 	.word	0x200002bc

08000ac4 <HAL_UART_TxCpltCallback>:

// Callback function after transmitting data
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart2.Instance) {
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <HAL_UART_TxCpltCallback+0x28>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d104      	bne.n	8000ae2 <HAL_UART_TxCpltCallback+0x1e>
		// Transmission fully complete, now listen for any messages from base
		base_state = BASE_STATE_BUSY;
 8000ad8:	4b05      	ldr	r3, [pc, #20]	@ (8000af0 <HAL_UART_TxCpltCallback+0x2c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	701a      	strb	r2, [r3, #0]
		Receive_from_Base();
 8000ade:	f7ff ffe3 	bl	8000aa8 <Receive_from_Base>
	}
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200002bc 	.word	0x200002bc
 8000af0:	20000354 	.word	0x20000354

08000af4 <HAL_UART_RxCpltCallback>:

// Callback function after receiving data
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart2.Instance) {
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	4b0a      	ldr	r3, [pc, #40]	@ (8000b2c <HAL_UART_RxCpltCallback+0x38>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d10d      	bne.n	8000b24 <HAL_UART_RxCpltCallback+0x30>
		// Ready?
		if (base_rx_buffer[BUFFER_SIZE - 1] == 'r') {
 8000b08:	4b09      	ldr	r3, [pc, #36]	@ (8000b30 <HAL_UART_RxCpltCallback+0x3c>)
 8000b0a:	79db      	ldrb	r3, [r3, #7]
 8000b0c:	2b72      	cmp	r3, #114	@ 0x72
 8000b0e:	d102      	bne.n	8000b16 <HAL_UART_RxCpltCallback+0x22>
			base_state = BASE_STATE_READY;
 8000b10:	4b08      	ldr	r3, [pc, #32]	@ (8000b34 <HAL_UART_RxCpltCallback+0x40>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	701a      	strb	r2, [r3, #0]
		}
		// Is this for Robot?
		if (base_rx_buffer[0] == '2') {
 8000b16:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <HAL_UART_RxCpltCallback+0x3c>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2b32      	cmp	r3, #50	@ 0x32
 8000b1c:	d102      	bne.n	8000b24 <HAL_UART_RxCpltCallback+0x30>
			// Interpret commands
			Interpret_Commands(base_rx_buffer);
 8000b1e:	4804      	ldr	r0, [pc, #16]	@ (8000b30 <HAL_UART_RxCpltCallback+0x3c>)
 8000b20:	f7ff fefa 	bl	8000918 <Interpret_Commands>
		}
	}
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	200002bc 	.word	0x200002bc
 8000b30:	20000344 	.word	0x20000344
 8000b34:	20000354 	.word	0x20000354

08000b38 <delay_in_us>:

/*************************** ULTRASONIC SENSOR READING ************************/

// Function that delays in microseconds (usec)
void delay_in_us (uint16_t time, TIM_HandleTypeDef *htim) {
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	6039      	str	r1, [r7, #0]
 8000b42:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(htim, 0);
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(htim) <  time);
 8000b4c:	bf00      	nop
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b54:	88fb      	ldrh	r3, [r7, #6]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d3f9      	bcc.n	8000b4e <delay_in_us+0x16>
}
 8000b5a:	bf00      	nop
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <poll_ultrasonic>:


// Poll ultrasonic sensors
void poll_ultrasonic (void) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
	// Front Sensor
	idx = 0;
 8000b6c:	4b5c      	ldr	r3, [pc, #368]	@ (8000ce0 <poll_ultrasonic+0x178>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(TRIG_PORT_FRONT, TRIG_PIN_FRONT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000b72:	2201      	movs	r2, #1
 8000b74:	2180      	movs	r1, #128	@ 0x80
 8000b76:	485b      	ldr	r0, [pc, #364]	@ (8000ce4 <poll_ultrasonic+0x17c>)
 8000b78:	f001 ff5e 	bl	8002a38 <HAL_GPIO_WritePin>
	delay_in_us(10, &htim3);  // wait for 10 us
 8000b7c:	495a      	ldr	r1, [pc, #360]	@ (8000ce8 <poll_ultrasonic+0x180>)
 8000b7e:	200a      	movs	r0, #10
 8000b80:	f7ff ffda 	bl	8000b38 <delay_in_us>
	HAL_GPIO_WritePin(TRIG_PORT_FRONT, TRIG_PIN_FRONT, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000b84:	2200      	movs	r2, #0
 8000b86:	2180      	movs	r1, #128	@ 0x80
 8000b88:	4856      	ldr	r0, [pc, #344]	@ (8000ce4 <poll_ultrasonic+0x17c>)
 8000b8a:	f001 ff55 	bl	8002a38 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 8000b8e:	4b56      	ldr	r3, [pc, #344]	@ (8000ce8 <poll_ultrasonic+0x180>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	68da      	ldr	r2, [r3, #12]
 8000b94:	4b54      	ldr	r3, [pc, #336]	@ (8000ce8 <poll_ultrasonic+0x180>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f042 0202 	orr.w	r2, r2, #2
 8000b9c:	60da      	str	r2, [r3, #12]
	HAL_Delay(10);
 8000b9e:	200a      	movs	r0, #10
 8000ba0:	f001 fb5e 	bl	8002260 <HAL_Delay>
	while(is_first_captured != 0);
 8000ba4:	bf00      	nop
 8000ba6:	4b51      	ldr	r3, [pc, #324]	@ (8000cec <poll_ultrasonic+0x184>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d1fb      	bne.n	8000ba6 <poll_ultrasonic+0x3e>

	// Back Sensor
	idx = 1;
 8000bae:	4b4c      	ldr	r3, [pc, #304]	@ (8000ce0 <poll_ultrasonic+0x178>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(TRIG_PORT_BACK, TRIG_PIN_BACK, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bba:	484d      	ldr	r0, [pc, #308]	@ (8000cf0 <poll_ultrasonic+0x188>)
 8000bbc:	f001 ff3c 	bl	8002a38 <HAL_GPIO_WritePin>
	delay_in_us(10, &htim1);  // wait for 10 us
 8000bc0:	494c      	ldr	r1, [pc, #304]	@ (8000cf4 <poll_ultrasonic+0x18c>)
 8000bc2:	200a      	movs	r0, #10
 8000bc4:	f7ff ffb8 	bl	8000b38 <delay_in_us>
	HAL_GPIO_WritePin(TRIG_PORT_BACK, TRIG_PIN_BACK, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bce:	4848      	ldr	r0, [pc, #288]	@ (8000cf0 <poll_ultrasonic+0x188>)
 8000bd0:	f001 ff32 	bl	8002a38 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000bd4:	4b47      	ldr	r3, [pc, #284]	@ (8000cf4 <poll_ultrasonic+0x18c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	68da      	ldr	r2, [r3, #12]
 8000bda:	4b46      	ldr	r3, [pc, #280]	@ (8000cf4 <poll_ultrasonic+0x18c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f042 0202 	orr.w	r2, r2, #2
 8000be2:	60da      	str	r2, [r3, #12]
	HAL_Delay(10);
 8000be4:	200a      	movs	r0, #10
 8000be6:	f001 fb3b 	bl	8002260 <HAL_Delay>
	while(is_first_captured != 0);
 8000bea:	bf00      	nop
 8000bec:	4b3f      	ldr	r3, [pc, #252]	@ (8000cec <poll_ultrasonic+0x184>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d1fb      	bne.n	8000bec <poll_ultrasonic+0x84>

	// Left Sensor
	idx = 2;
 8000bf4:	4b3a      	ldr	r3, [pc, #232]	@ (8000ce0 <poll_ultrasonic+0x178>)
 8000bf6:	2202      	movs	r2, #2
 8000bf8:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(TRIG_PORT_LEFT, TRIG_PIN_LEFT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	2140      	movs	r1, #64	@ 0x40
 8000bfe:	483e      	ldr	r0, [pc, #248]	@ (8000cf8 <poll_ultrasonic+0x190>)
 8000c00:	f001 ff1a 	bl	8002a38 <HAL_GPIO_WritePin>
	delay_in_us(10, &htim2);  // wait for 10 us
 8000c04:	493d      	ldr	r1, [pc, #244]	@ (8000cfc <poll_ultrasonic+0x194>)
 8000c06:	200a      	movs	r0, #10
 8000c08:	f7ff ff96 	bl	8000b38 <delay_in_us>
	HAL_GPIO_WritePin(TRIG_PORT_LEFT, TRIG_PIN_LEFT, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2140      	movs	r1, #64	@ 0x40
 8000c10:	4839      	ldr	r0, [pc, #228]	@ (8000cf8 <poll_ultrasonic+0x190>)
 8000c12:	f001 ff11 	bl	8002a38 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 8000c16:	4b39      	ldr	r3, [pc, #228]	@ (8000cfc <poll_ultrasonic+0x194>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	68da      	ldr	r2, [r3, #12]
 8000c1c:	4b37      	ldr	r3, [pc, #220]	@ (8000cfc <poll_ultrasonic+0x194>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f042 0202 	orr.w	r2, r2, #2
 8000c24:	60da      	str	r2, [r3, #12]
	HAL_Delay(10);
 8000c26:	200a      	movs	r0, #10
 8000c28:	f001 fb1a 	bl	8002260 <HAL_Delay>
	while(is_first_captured != 0);
 8000c2c:	bf00      	nop
 8000c2e:	4b2f      	ldr	r3, [pc, #188]	@ (8000cec <poll_ultrasonic+0x184>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d1fb      	bne.n	8000c2e <poll_ultrasonic+0xc6>

	// Right Sensor
	idx = 3;
 8000c36:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce0 <poll_ultrasonic+0x178>)
 8000c38:	2203      	movs	r2, #3
 8000c3a:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(TRIG_PORT_RIGHT, TRIG_PIN_RIGHT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c42:	482f      	ldr	r0, [pc, #188]	@ (8000d00 <poll_ultrasonic+0x198>)
 8000c44:	f001 fef8 	bl	8002a38 <HAL_GPIO_WritePin>
	delay_in_us(10, &htim4);  // wait for 10 us
 8000c48:	492e      	ldr	r1, [pc, #184]	@ (8000d04 <poll_ultrasonic+0x19c>)
 8000c4a:	200a      	movs	r0, #10
 8000c4c:	f7ff ff74 	bl	8000b38 <delay_in_us>
	HAL_GPIO_WritePin(TRIG_PORT_RIGHT, TRIG_PIN_RIGHT, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000c50:	2200      	movs	r2, #0
 8000c52:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c56:	482a      	ldr	r0, [pc, #168]	@ (8000d00 <poll_ultrasonic+0x198>)
 8000c58:	f001 feee 	bl	8002a38 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 8000c5c:	4b29      	ldr	r3, [pc, #164]	@ (8000d04 <poll_ultrasonic+0x19c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	68da      	ldr	r2, [r3, #12]
 8000c62:	4b28      	ldr	r3, [pc, #160]	@ (8000d04 <poll_ultrasonic+0x19c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f042 0202 	orr.w	r2, r2, #2
 8000c6a:	60da      	str	r2, [r3, #12]
	HAL_Delay(10);
 8000c6c:	200a      	movs	r0, #10
 8000c6e:	f001 faf7 	bl	8002260 <HAL_Delay>
	while(is_first_captured != 0);
 8000c72:	bf00      	nop
 8000c74:	4b1d      	ldr	r3, [pc, #116]	@ (8000cec <poll_ultrasonic+0x184>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d1fb      	bne.n	8000c74 <poll_ultrasonic+0x10c>

	// Display Detection Status on LCD Screen
	lcd_put_cur(1, 2);
 8000c7c:	2102      	movs	r1, #2
 8000c7e:	2001      	movs	r0, #1
 8000c80:	f7ff fdd8 	bl	8000834 <lcd_put_cur>
	lcd_send_data(detection_status[0]);
 8000c84:	4b20      	ldr	r3, [pc, #128]	@ (8000d08 <poll_ultrasonic+0x1a0>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fda3 	bl	80007d4 <lcd_send_data>
	lcd_put_cur(1, 6);
 8000c8e:	2106      	movs	r1, #6
 8000c90:	2001      	movs	r0, #1
 8000c92:	f7ff fdcf 	bl	8000834 <lcd_put_cur>
	lcd_send_data(detection_status[1]);
 8000c96:	4b1c      	ldr	r3, [pc, #112]	@ (8000d08 <poll_ultrasonic+0x1a0>)
 8000c98:	785b      	ldrb	r3, [r3, #1]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fd9a 	bl	80007d4 <lcd_send_data>
	lcd_put_cur(1, 10);
 8000ca0:	210a      	movs	r1, #10
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f7ff fdc6 	bl	8000834 <lcd_put_cur>
	lcd_send_data(detection_status[2]);
 8000ca8:	4b17      	ldr	r3, [pc, #92]	@ (8000d08 <poll_ultrasonic+0x1a0>)
 8000caa:	789b      	ldrb	r3, [r3, #2]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fd91 	bl	80007d4 <lcd_send_data>
	lcd_put_cur(1, 14);
 8000cb2:	210e      	movs	r1, #14
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f7ff fdbd 	bl	8000834 <lcd_put_cur>
	lcd_send_data(detection_status[3]);
 8000cba:	4b13      	ldr	r3, [pc, #76]	@ (8000d08 <poll_ultrasonic+0x1a0>)
 8000cbc:	78db      	ldrb	r3, [r3, #3]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fd88 	bl	80007d4 <lcd_send_data>

	// Set last bytes to '0'
	detection_status[4] = '0';
 8000cc4:	4b10      	ldr	r3, [pc, #64]	@ (8000d08 <poll_ultrasonic+0x1a0>)
 8000cc6:	2230      	movs	r2, #48	@ 0x30
 8000cc8:	711a      	strb	r2, [r3, #4]
	detection_status[5] = '0';
 8000cca:	4b0f      	ldr	r3, [pc, #60]	@ (8000d08 <poll_ultrasonic+0x1a0>)
 8000ccc:	2230      	movs	r2, #48	@ 0x30
 8000cce:	715a      	strb	r2, [r3, #5]

	// Send detection status to Jetson
	Send_to_Base('0', detection_status, 1);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	490d      	ldr	r1, [pc, #52]	@ (8000d08 <poll_ultrasonic+0x1a0>)
 8000cd4:	2030      	movs	r0, #48	@ 0x30
 8000cd6:	f7ff fea9 	bl	8000a2c <Send_to_Base>
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000358 	.word	0x20000358
 8000ce4:	40020800 	.word	0x40020800
 8000ce8:	2000018c 	.word	0x2000018c
 8000cec:	20000374 	.word	0x20000374
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	200000f4 	.word	0x200000f4
 8000cf8:	40020000 	.word	0x40020000
 8000cfc:	20000140 	.word	0x20000140
 8000d00:	40020c00 	.word	0x40020c00
 8000d04:	200001d8 	.word	0x200001d8
 8000d08:	20000378 	.word	0x20000378
 8000d0c:	00000000 	.word	0x00000000

08000d10 <HAL_TIM_IC_CaptureCallback>:


// Input Capture Callback Function
void HAL_TIM_IC_CaptureCallback (TIM_HandleTypeDef *htim) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) { // If the interrupt source is channel 1
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	7f1b      	ldrb	r3, [r3, #28]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	f040 808d 	bne.w	8000e3c <HAL_TIM_IC_CaptureCallback+0x12c>
		if (is_first_captured == 0) { // If the first value is not captured
 8000d22:	4b4b      	ldr	r3, [pc, #300]	@ (8000e50 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d11a      	bne.n	8000d60 <HAL_TIM_IC_CaptureCallback+0x50>
			val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // Read the first value
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f004 fcf7 	bl	8005720 <HAL_TIM_ReadCapturedValue>
 8000d32:	4603      	mov	r3, r0
 8000d34:	4a47      	ldr	r2, [pc, #284]	@ (8000e54 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000d36:	6013      	str	r3, [r2, #0]
			is_first_captured = 1;
 8000d38:	4b45      	ldr	r3, [pc, #276]	@ (8000e50 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	701a      	strb	r2, [r3, #0]
			// Change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	6a1a      	ldr	r2, [r3, #32]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f022 020a 	bic.w	r2, r2, #10
 8000d4c:	621a      	str	r2, [r3, #32]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	6a1a      	ldr	r2, [r3, #32]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f042 0202 	orr.w	r2, r2, #2
 8000d5c:	621a      	str	r2, [r3, #32]
			else {
				detection_status[idx] = '0';  // no obstacle detected
			}
		}
	}
}
 8000d5e:	e06d      	b.n	8000e3c <HAL_TIM_IC_CaptureCallback+0x12c>
		else if (is_first_captured == 1) { // If the first is already captured
 8000d60:	4b3b      	ldr	r3, [pc, #236]	@ (8000e50 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d169      	bne.n	8000e3c <HAL_TIM_IC_CaptureCallback+0x12c>
			val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // Read second value
 8000d68:	2100      	movs	r1, #0
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f004 fcd8 	bl	8005720 <HAL_TIM_ReadCapturedValue>
 8000d70:	4603      	mov	r3, r0
 8000d72:	4a39      	ldr	r2, [pc, #228]	@ (8000e58 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000d74:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // Reset the counter
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	625a      	str	r2, [r3, #36]	@ 0x24
			if (val2 > val1) {
 8000d7e:	4b36      	ldr	r3, [pc, #216]	@ (8000e58 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	4b34      	ldr	r3, [pc, #208]	@ (8000e54 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d906      	bls.n	8000d98 <HAL_TIM_IC_CaptureCallback+0x88>
				diff = val2 - val1; // diff is in microseconds
 8000d8a:	4b33      	ldr	r3, [pc, #204]	@ (8000e58 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	4b31      	ldr	r3, [pc, #196]	@ (8000e54 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	e00e      	b.n	8000db6 <HAL_TIM_IC_CaptureCallback+0xa6>
			else if (val1 > val2) {
 8000d98:	4b2e      	ldr	r3, [pc, #184]	@ (8000e54 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4b2e      	ldr	r3, [pc, #184]	@ (8000e58 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d908      	bls.n	8000db6 <HAL_TIM_IC_CaptureCallback+0xa6>
				diff = (0xffff - val1) + val2;  // diff is in microseconds
 8000da4:	4b2c      	ldr	r3, [pc, #176]	@ (8000e58 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4b2a      	ldr	r3, [pc, #168]	@ (8000e54 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	1ad2      	subs	r2, r2, r3
 8000dae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000db2:	4413      	add	r3, r2
 8000db4:	60fb      	str	r3, [r7, #12]
			distance[idx] = diff * .034/2;  // UNITS BREAKDOWN: (10^(-6) s) * (10^4 m/s) = 10^(-2) m = cm -> distance is in cm
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	ee07 3a90 	vmov	s15, r3
 8000dbc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000dc0:	ed9f 6b21 	vldr	d6, [pc, #132]	@ 8000e48 <HAL_TIM_IC_CaptureCallback+0x138>
 8000dc4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000dc8:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 8000dcc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000dd0:	4b22      	ldr	r3, [pc, #136]	@ (8000e5c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000dd8:	ee17 1a90 	vmov	r1, s15
 8000ddc:	4a20      	ldr	r2, [pc, #128]	@ (8000e60 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000dde:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			is_first_captured = 0; // Set back to false
 8000de2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e50 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	6a1a      	ldr	r2, [r3, #32]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f022 020a 	bic.w	r2, r2, #10
 8000df6:	621a      	str	r2, [r3, #32]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	6a12      	ldr	r2, [r2, #32]
 8000e02:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	68da      	ldr	r2, [r3, #12]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f022 0202 	bic.w	r2, r2, #2
 8000e12:	60da      	str	r2, [r3, #12]
			if (distance[idx] < distance_threshold) {
 8000e14:	4b11      	ldr	r3, [pc, #68]	@ (8000e5c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a11      	ldr	r2, [pc, #68]	@ (8000e60 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000e1a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e1e:	4b11      	ldr	r3, [pc, #68]	@ (8000e64 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d205      	bcs.n	8000e32 <HAL_TIM_IC_CaptureCallback+0x122>
				detection_status[idx] = '1';  // obstacle detected!
 8000e26:	4b0d      	ldr	r3, [pc, #52]	@ (8000e5c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a0f      	ldr	r2, [pc, #60]	@ (8000e68 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000e2c:	2131      	movs	r1, #49	@ 0x31
 8000e2e:	54d1      	strb	r1, [r2, r3]
}
 8000e30:	e004      	b.n	8000e3c <HAL_TIM_IC_CaptureCallback+0x12c>
				detection_status[idx] = '0';  // no obstacle detected
 8000e32:	4b0a      	ldr	r3, [pc, #40]	@ (8000e5c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a0c      	ldr	r2, [pc, #48]	@ (8000e68 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000e38:	2130      	movs	r1, #48	@ 0x30
 8000e3a:	54d1      	strb	r1, [r2, r3]
}
 8000e3c:	bf00      	nop
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	f3af 8000 	nop.w
 8000e48:	b020c49c 	.word	0xb020c49c
 8000e4c:	3fa16872 	.word	0x3fa16872
 8000e50:	20000374 	.word	0x20000374
 8000e54:	2000035c 	.word	0x2000035c
 8000e58:	20000360 	.word	0x20000360
 8000e5c:	20000358 	.word	0x20000358
 8000e60:	20000364 	.word	0x20000364
 8000e64:	20000018 	.word	0x20000018
 8000e68:	20000378 	.word	0x20000378

08000e6c <Start_Diff_PWM>:

/************************ MOTOR CONTROLLER ********************/
void Start_Diff_PWM(void) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000e70:	2108      	movs	r1, #8
 8000e72:	4808      	ldr	r0, [pc, #32]	@ (8000e94 <Start_Diff_PWM+0x28>)
 8000e74:	f003 fe26 	bl	8004ac4 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 8000e78:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <Start_Diff_PWM+0x28>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000e80:	210c      	movs	r1, #12
 8000e82:	4804      	ldr	r0, [pc, #16]	@ (8000e94 <Start_Diff_PWM+0x28>)
 8000e84:	f003 fe1e 	bl	8004ac4 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 8000e88:	4b02      	ldr	r3, [pc, #8]	@ (8000e94 <Start_Diff_PWM+0x28>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000224 	.word	0x20000224

08000e98 <move>:

void move(float x, float angle) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000ea2:	edc7 0a00 	vstr	s1, [r7]
				angle_diff = fabs(angle - tide_angle);
			}
		}
	}*/
	//calculated equation. assume x is in 6 inch intervals
	if(x == 1) {
 8000ea6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000eae:	eef4 7a47 	vcmp.f32	s15, s14
 8000eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb6:	d122      	bne.n	8000efe <move+0x66>
		motors_controller(1,1);
 8000eb8:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8000ebc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000ec0:	f000 f82c 	bl	8000f1c <motors_controller>
		HAL_TIM_Base_Start_IT(&htim9);
 8000ec4:	4810      	ldr	r0, [pc, #64]	@ (8000f08 <move+0x70>)
 8000ec6:	f003 fd2d 	bl	8004924 <HAL_TIM_Base_Start_IT>
		TIM9 -> CR1 |= 0b1;
 8000eca:	4b10      	ldr	r3, [pc, #64]	@ (8000f0c <move+0x74>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a0f      	ldr	r2, [pc, #60]	@ (8000f0c <move+0x74>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6013      	str	r3, [r2, #0]
		//wait for timer to overrun the 4.25 second period
		while(!ic_overrun);
 8000ed6:	bf00      	nop
 8000ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f10 <move+0x78>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d0fb      	beq.n	8000ed8 <move+0x40>
		motors_controller(0,0);
 8000ee0:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 8000f14 <move+0x7c>
 8000ee4:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8000f14 <move+0x7c>
 8000ee8:	f000 f818 	bl	8000f1c <motors_controller>
		TIM9 -> CNT = 0;
 8000eec:	4b07      	ldr	r3, [pc, #28]	@ (8000f0c <move+0x74>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	625a      	str	r2, [r3, #36]	@ 0x24
		ic_overrun = 0;
 8000ef2:	4b07      	ldr	r3, [pc, #28]	@ (8000f10 <move+0x78>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
		tim9_counter = 0;
 8000ef8:	4b07      	ldr	r3, [pc, #28]	@ (8000f18 <move+0x80>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
	}
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000270 	.word	0x20000270
 8000f0c:	40014000 	.word	0x40014000
 8000f10:	20000394 	.word	0x20000394
 8000f14:	00000000 	.word	0x00000000
 8000f18:	20000390 	.word	0x20000390

08000f1c <motors_controller>:

void motors_controller(float on_r, float on_l) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f26:	edc7 0a00 	vstr	s1, [r7]
	if(on_r == 1) {
 8000f2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f32:	eef4 7a47 	vcmp.f32	s15, s14
 8000f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f3a:	d111      	bne.n	8000f60 <motors_controller+0x44>
		HAL_GPIO_WritePin(RIGHT_REVERSE, RIGHT_REVERSE_PIN, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f42:	4842      	ldr	r0, [pc, #264]	@ (800104c <motors_controller+0x130>)
 8000f44:	f001 fd78 	bl	8002a38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RIGHT_FORWARD, RIGHT_FORWARD_PIN, GPIO_PIN_SET);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f4e:	483f      	ldr	r0, [pc, #252]	@ (800104c <motors_controller+0x130>)
 8000f50:	f001 fd72 	bl	8002a38 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&RIGHT_PWM, RIGHT_PWM_CHANNEL, 0.8 * pwm_period);
 8000f54:	4b3e      	ldr	r3, [pc, #248]	@ (8001050 <motors_controller+0x134>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f240 727f 	movw	r2, #1919	@ 0x77f
 8000f5c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f5e:	e02a      	b.n	8000fb6 <motors_controller+0x9a>
	}
	else if(on_r == -1) {
 8000f60:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f64:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8000f68:	eef4 7a47 	vcmp.f32	s15, s14
 8000f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f70:	d111      	bne.n	8000f96 <motors_controller+0x7a>
		HAL_GPIO_WritePin(RIGHT_FORWARD, RIGHT_FORWARD_PIN, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f78:	4834      	ldr	r0, [pc, #208]	@ (800104c <motors_controller+0x130>)
 8000f7a:	f001 fd5d 	bl	8002a38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RIGHT_REVERSE, RIGHT_REVERSE_PIN, GPIO_PIN_SET);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f84:	4831      	ldr	r0, [pc, #196]	@ (800104c <motors_controller+0x130>)
 8000f86:	f001 fd57 	bl	8002a38 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&RIGHT_PWM, RIGHT_PWM_CHANNEL, 0.8 * pwm_period);
 8000f8a:	4b31      	ldr	r3, [pc, #196]	@ (8001050 <motors_controller+0x134>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f240 727f 	movw	r2, #1919	@ 0x77f
 8000f92:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f94:	e00f      	b.n	8000fb6 <motors_controller+0x9a>
	}
	else {
		__HAL_TIM_SET_COMPARE(&RIGHT_PWM, RIGHT_PWM_CHANNEL, 0);
 8000f96:	4b2e      	ldr	r3, [pc, #184]	@ (8001050 <motors_controller+0x134>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_GPIO_WritePin(RIGHT_FORWARD, RIGHT_FORWARD_PIN, GPIO_PIN_RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fa4:	4829      	ldr	r0, [pc, #164]	@ (800104c <motors_controller+0x130>)
 8000fa6:	f001 fd47 	bl	8002a38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RIGHT_REVERSE, RIGHT_REVERSE_PIN, GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fb0:	4826      	ldr	r0, [pc, #152]	@ (800104c <motors_controller+0x130>)
 8000fb2:	f001 fd41 	bl	8002a38 <HAL_GPIO_WritePin>
	}

	if(on_l == 1) {
 8000fb6:	edd7 7a00 	vldr	s15, [r7]
 8000fba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000fbe:	eef4 7a47 	vcmp.f32	s15, s14
 8000fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc6:	d111      	bne.n	8000fec <motors_controller+0xd0>
		HAL_GPIO_WritePin(LEFT_REVERSE, LEFT_REVERSE_PIN, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fce:	481f      	ldr	r0, [pc, #124]	@ (800104c <motors_controller+0x130>)
 8000fd0:	f001 fd32 	bl	8002a38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEFT_FORWARD, LEFT_FORWARD_PIN, GPIO_PIN_SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fda:	481c      	ldr	r0, [pc, #112]	@ (800104c <motors_controller+0x130>)
 8000fdc:	f001 fd2c 	bl	8002a38 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&LEFT_PWM, LEFT_PWM_CHANNEL, 0.778 * pwm_period);
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8001050 <motors_controller+0x134>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f240 724a 	movw	r2, #1866	@ 0x74a
 8000fe8:	641a      	str	r2, [r3, #64]	@ 0x40
	else {
		__HAL_TIM_SET_COMPARE(&LEFT_PWM, LEFT_PWM_CHANNEL, 0);
		HAL_GPIO_WritePin(LEFT_FORWARD, LEFT_FORWARD_PIN, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LEFT_REVERSE, LEFT_REVERSE_PIN, GPIO_PIN_RESET);
	}
}
 8000fea:	e02a      	b.n	8001042 <motors_controller+0x126>
	else if(on_l == -1) {
 8000fec:	edd7 7a00 	vldr	s15, [r7]
 8000ff0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8000ff4:	eef4 7a47 	vcmp.f32	s15, s14
 8000ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffc:	d111      	bne.n	8001022 <motors_controller+0x106>
		HAL_GPIO_WritePin(LEFT_FORWARD, LEFT_FORWARD_PIN, GPIO_PIN_RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001004:	4811      	ldr	r0, [pc, #68]	@ (800104c <motors_controller+0x130>)
 8001006:	f001 fd17 	bl	8002a38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEFT_REVERSE, LEFT_REVERSE_PIN, GPIO_PIN_SET);
 800100a:	2201      	movs	r2, #1
 800100c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001010:	480e      	ldr	r0, [pc, #56]	@ (800104c <motors_controller+0x130>)
 8001012:	f001 fd11 	bl	8002a38 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&LEFT_PWM, LEFT_PWM_CHANNEL, 0.778 * pwm_period);
 8001016:	4b0e      	ldr	r3, [pc, #56]	@ (8001050 <motors_controller+0x134>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f240 724a 	movw	r2, #1866	@ 0x74a
 800101e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001020:	e00f      	b.n	8001042 <motors_controller+0x126>
		__HAL_TIM_SET_COMPARE(&LEFT_PWM, LEFT_PWM_CHANNEL, 0);
 8001022:	4b0b      	ldr	r3, [pc, #44]	@ (8001050 <motors_controller+0x134>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2200      	movs	r2, #0
 8001028:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_GPIO_WritePin(LEFT_FORWARD, LEFT_FORWARD_PIN, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001030:	4806      	ldr	r0, [pc, #24]	@ (800104c <motors_controller+0x130>)
 8001032:	f001 fd01 	bl	8002a38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEFT_REVERSE, LEFT_REVERSE_PIN, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800103c:	4803      	ldr	r0, [pc, #12]	@ (800104c <motors_controller+0x130>)
 800103e:	f001 fcfb 	bl	8002a38 <HAL_GPIO_WritePin>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40021000 	.word	0x40021000
 8001050:	20000224 	.word	0x20000224

08001054 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim9.Instance){
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b10      	ldr	r3, [pc, #64]	@ (80010a4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	429a      	cmp	r2, r3
 8001066:	d116      	bne.n	8001096 <HAL_TIM_PeriodElapsedCallback+0x42>
		__HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f06f 0201 	mvn.w	r2, #1
 8001070:	611a      	str	r2, [r3, #16]
		tim9_counter++;
 8001072:	4b0d      	ldr	r3, [pc, #52]	@ (80010a8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	3301      	adds	r3, #1
 8001078:	4a0b      	ldr	r2, [pc, #44]	@ (80010a8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800107a:	6013      	str	r3, [r2, #0]
		if(tim9_counter >= 17){
 800107c:	4b0a      	ldr	r3, [pc, #40]	@ (80010a8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b10      	cmp	r3, #16
 8001082:	dd08      	ble.n	8001096 <HAL_TIM_PeriodElapsedCallback+0x42>
			ic_overrun = 1;
 8001084:	4b09      	ldr	r3, [pc, #36]	@ (80010ac <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001086:	2201      	movs	r2, #1
 8001088:	601a      	str	r2, [r3, #0]
			TIM9 -> CR1 &= ~0b1;
 800108a:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a08      	ldr	r2, [pc, #32]	@ (80010b0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001090:	f023 0301 	bic.w	r3, r3, #1
 8001094:	6013      	str	r3, [r2, #0]
		}
	}
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20000270 	.word	0x20000270
 80010a8:	20000390 	.word	0x20000390
 80010ac:	20000394 	.word	0x20000394
 80010b0:	40014000 	.word	0x40014000

080010b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	*/

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80010b8:	f000 fcec 	bl	8001a94 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010bc:	f001 f873 	bl	80021a6 <HAL_Init>
  Start_Diff_PWM();
 80010c0:	f7ff fed4 	bl	8000e6c <Start_Diff_PWM>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c4:	f000 f836 	bl	8001134 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c8:	f000 fc04 	bl	80018d4 <MX_GPIO_Init>
  MX_I2C2_Init();
 80010cc:	f000 f8e2 	bl	8001294 <MX_I2C2_Init>
  MX_TIM1_Init();
 80010d0:	f000 f920 	bl	8001314 <MX_TIM1_Init>
  MX_TIM2_Init();
 80010d4:	f000 f998 	bl	8001408 <MX_TIM2_Init>
  MX_TIM3_Init();
 80010d8:	f000 fa0a 	bl	80014f0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80010dc:	f000 fa7e 	bl	80015dc <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80010e0:	f000 fbc8 	bl	8001874 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010e4:	f000 f896 	bl	8001214 <MX_I2C1_Init>
  MX_TIM8_Init();
 80010e8:	f000 faee 	bl	80016c8 <MX_TIM8_Init>
  MX_TIM9_Init();
 80010ec:	f000 fb88 	bl	8001800 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  // Turn ON Debug LED
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 80010f0:	2201      	movs	r2, #1
 80010f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010f6:	480b      	ldr	r0, [pc, #44]	@ (8001124 <main+0x70>)
 80010f8:	f001 fc9e 	bl	8002a38 <HAL_GPIO_WritePin>

  // Comment when not using LCD screen
  lcd_init();
 80010fc:	f7ff fbb9 	bl	8000872 <lcd_init>

  // lcd_send_string("TID-E - Team 14");

  // Display intial stuff
  lcd_send_string (" Px  Nx  Py  Ny");
 8001100:	4809      	ldr	r0, [pc, #36]	@ (8001128 <main+0x74>)
 8001102:	f7ff fbf3 	bl	80008ec <lcd_send_string>
  lcd_put_cur(1, 2);
 8001106:	2102      	movs	r1, #2
 8001108:	2001      	movs	r0, #1
 800110a:	f7ff fb93 	bl	8000834 <lcd_put_cur>
  lcd_send_string("0   0   0   0");
 800110e:	4807      	ldr	r0, [pc, #28]	@ (800112c <main+0x78>)
 8001110:	f7ff fbec 	bl	80008ec <lcd_send_string>

  // Start and configure IMU
  BNO055_Init_I2C(&hi2c2);
 8001114:	4806      	ldr	r0, [pc, #24]	@ (8001130 <main+0x7c>)
 8001116:	f7ff fa25 	bl	8000564 <BNO055_Init_I2C>

  // Start receiving from base
  Receive_from_Base();
 800111a:	f7ff fcc5 	bl	8000aa8 <Receive_from_Base>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800111e:	bf00      	nop
 8001120:	e7fd      	b.n	800111e <main+0x6a>
 8001122:	bf00      	nop
 8001124:	40020400 	.word	0x40020400
 8001128:	08007c94 	.word	0x08007c94
 800112c:	08007ca4 	.word	0x08007ca4
 8001130:	200000a0 	.word	0x200000a0

08001134 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b094      	sub	sp, #80	@ 0x50
 8001138:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113a:	f107 031c 	add.w	r3, r7, #28
 800113e:	2234      	movs	r2, #52	@ 0x34
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f006 fd4d 	bl	8007be2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001148:	f107 0308 	add.w	r3, r7, #8
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001158:	4b2c      	ldr	r3, [pc, #176]	@ (800120c <SystemClock_Config+0xd8>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115c:	4a2b      	ldr	r2, [pc, #172]	@ (800120c <SystemClock_Config+0xd8>)
 800115e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001162:	6413      	str	r3, [r2, #64]	@ 0x40
 8001164:	4b29      	ldr	r3, [pc, #164]	@ (800120c <SystemClock_Config+0xd8>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001170:	4b27      	ldr	r3, [pc, #156]	@ (8001210 <SystemClock_Config+0xdc>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001178:	4a25      	ldr	r2, [pc, #148]	@ (8001210 <SystemClock_Config+0xdc>)
 800117a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	4b23      	ldr	r3, [pc, #140]	@ (8001210 <SystemClock_Config+0xdc>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001188:	603b      	str	r3, [r7, #0]
 800118a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800118c:	2302      	movs	r3, #2
 800118e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001190:	2301      	movs	r3, #1
 8001192:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001194:	2310      	movs	r3, #16
 8001196:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001198:	2302      	movs	r3, #2
 800119a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800119c:	2300      	movs	r3, #0
 800119e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011a0:	2310      	movs	r3, #16
 80011a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 80011a4:	23c0      	movs	r3, #192	@ 0xc0
 80011a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011a8:	2302      	movs	r3, #2
 80011aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011ac:	2302      	movs	r3, #2
 80011ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011b0:	2302      	movs	r3, #2
 80011b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	4618      	mov	r0, r3
 80011ba:	f002 fa9f 	bl	80036fc <HAL_RCC_OscConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011c4:	f000 fc92 	bl	8001aec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011c8:	f002 fa48 	bl	800365c <HAL_PWREx_EnableOverDrive>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80011d2:	f000 fc8b 	bl	8001aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d6:	230f      	movs	r3, #15
 80011d8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011da:	2302      	movs	r3, #2
 80011dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011ec:	f107 0308 	add.w	r3, r7, #8
 80011f0:	2103      	movs	r1, #3
 80011f2:	4618      	mov	r0, r3
 80011f4:	f002 fd30 	bl	8003c58 <HAL_RCC_ClockConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80011fe:	f000 fc75 	bl	8001aec <Error_Handler>
  }
}
 8001202:	bf00      	nop
 8001204:	3750      	adds	r7, #80	@ 0x50
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40023800 	.word	0x40023800
 8001210:	40007000 	.word	0x40007000

08001214 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001218:	4b1b      	ldr	r3, [pc, #108]	@ (8001288 <MX_I2C1_Init+0x74>)
 800121a:	4a1c      	ldr	r2, [pc, #112]	@ (800128c <MX_I2C1_Init+0x78>)
 800121c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800121e:	4b1a      	ldr	r3, [pc, #104]	@ (8001288 <MX_I2C1_Init+0x74>)
 8001220:	4a1b      	ldr	r2, [pc, #108]	@ (8001290 <MX_I2C1_Init+0x7c>)
 8001222:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001224:	4b18      	ldr	r3, [pc, #96]	@ (8001288 <MX_I2C1_Init+0x74>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800122a:	4b17      	ldr	r3, [pc, #92]	@ (8001288 <MX_I2C1_Init+0x74>)
 800122c:	2201      	movs	r2, #1
 800122e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001230:	4b15      	ldr	r3, [pc, #84]	@ (8001288 <MX_I2C1_Init+0x74>)
 8001232:	2200      	movs	r2, #0
 8001234:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001236:	4b14      	ldr	r3, [pc, #80]	@ (8001288 <MX_I2C1_Init+0x74>)
 8001238:	2200      	movs	r2, #0
 800123a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800123c:	4b12      	ldr	r3, [pc, #72]	@ (8001288 <MX_I2C1_Init+0x74>)
 800123e:	2200      	movs	r2, #0
 8001240:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001242:	4b11      	ldr	r3, [pc, #68]	@ (8001288 <MX_I2C1_Init+0x74>)
 8001244:	2200      	movs	r2, #0
 8001246:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001248:	4b0f      	ldr	r3, [pc, #60]	@ (8001288 <MX_I2C1_Init+0x74>)
 800124a:	2200      	movs	r2, #0
 800124c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800124e:	480e      	ldr	r0, [pc, #56]	@ (8001288 <MX_I2C1_Init+0x74>)
 8001250:	f001 fc30 	bl	8002ab4 <HAL_I2C_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800125a:	f000 fc47 	bl	8001aec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800125e:	2100      	movs	r1, #0
 8001260:	4809      	ldr	r0, [pc, #36]	@ (8001288 <MX_I2C1_Init+0x74>)
 8001262:	f002 f963 	bl	800352c <HAL_I2CEx_ConfigAnalogFilter>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800126c:	f000 fc3e 	bl	8001aec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001270:	2100      	movs	r1, #0
 8001272:	4805      	ldr	r0, [pc, #20]	@ (8001288 <MX_I2C1_Init+0x74>)
 8001274:	f002 f9a5 	bl	80035c2 <HAL_I2CEx_ConfigDigitalFilter>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800127e:	f000 fc35 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	2000004c 	.word	0x2000004c
 800128c:	40005400 	.word	0x40005400
 8001290:	20303e5d 	.word	0x20303e5d

08001294 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001298:	4b1b      	ldr	r3, [pc, #108]	@ (8001308 <MX_I2C2_Init+0x74>)
 800129a:	4a1c      	ldr	r2, [pc, #112]	@ (800130c <MX_I2C2_Init+0x78>)
 800129c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 800129e:	4b1a      	ldr	r3, [pc, #104]	@ (8001308 <MX_I2C2_Init+0x74>)
 80012a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001310 <MX_I2C2_Init+0x7c>)
 80012a2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80012a4:	4b18      	ldr	r3, [pc, #96]	@ (8001308 <MX_I2C2_Init+0x74>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012aa:	4b17      	ldr	r3, [pc, #92]	@ (8001308 <MX_I2C2_Init+0x74>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012b0:	4b15      	ldr	r3, [pc, #84]	@ (8001308 <MX_I2C2_Init+0x74>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80012b6:	4b14      	ldr	r3, [pc, #80]	@ (8001308 <MX_I2C2_Init+0x74>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012bc:	4b12      	ldr	r3, [pc, #72]	@ (8001308 <MX_I2C2_Init+0x74>)
 80012be:	2200      	movs	r2, #0
 80012c0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012c2:	4b11      	ldr	r3, [pc, #68]	@ (8001308 <MX_I2C2_Init+0x74>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001308 <MX_I2C2_Init+0x74>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012ce:	480e      	ldr	r0, [pc, #56]	@ (8001308 <MX_I2C2_Init+0x74>)
 80012d0:	f001 fbf0 	bl	8002ab4 <HAL_I2C_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80012da:	f000 fc07 	bl	8001aec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012de:	2100      	movs	r1, #0
 80012e0:	4809      	ldr	r0, [pc, #36]	@ (8001308 <MX_I2C2_Init+0x74>)
 80012e2:	f002 f923 	bl	800352c <HAL_I2CEx_ConfigAnalogFilter>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80012ec:	f000 fbfe 	bl	8001aec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80012f0:	2100      	movs	r1, #0
 80012f2:	4805      	ldr	r0, [pc, #20]	@ (8001308 <MX_I2C2_Init+0x74>)
 80012f4:	f002 f965 	bl	80035c2 <HAL_I2CEx_ConfigDigitalFilter>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80012fe:	f000 fbf5 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200000a0 	.word	0x200000a0
 800130c:	40005800 	.word	0x40005800
 8001310:	20303e5d 	.word	0x20303e5d

08001314 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08c      	sub	sp, #48	@ 0x30
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800131a:	f107 0320 	add.w	r3, r7, #32
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001340:	4b2f      	ldr	r3, [pc, #188]	@ (8001400 <MX_TIM1_Init+0xec>)
 8001342:	4a30      	ldr	r2, [pc, #192]	@ (8001404 <MX_TIM1_Init+0xf0>)
 8001344:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 8001346:	4b2e      	ldr	r3, [pc, #184]	@ (8001400 <MX_TIM1_Init+0xec>)
 8001348:	225f      	movs	r2, #95	@ 0x5f
 800134a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134c:	4b2c      	ldr	r3, [pc, #176]	@ (8001400 <MX_TIM1_Init+0xec>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001352:	4b2b      	ldr	r3, [pc, #172]	@ (8001400 <MX_TIM1_Init+0xec>)
 8001354:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001358:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135a:	4b29      	ldr	r3, [pc, #164]	@ (8001400 <MX_TIM1_Init+0xec>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001360:	4b27      	ldr	r3, [pc, #156]	@ (8001400 <MX_TIM1_Init+0xec>)
 8001362:	2200      	movs	r2, #0
 8001364:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001366:	4b26      	ldr	r3, [pc, #152]	@ (8001400 <MX_TIM1_Init+0xec>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800136c:	4824      	ldr	r0, [pc, #144]	@ (8001400 <MX_TIM1_Init+0xec>)
 800136e:	f003 fa81 	bl	8004874 <HAL_TIM_Base_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001378:	f000 fbb8 	bl	8001aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800137c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001380:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001382:	f107 0320 	add.w	r3, r7, #32
 8001386:	4619      	mov	r1, r3
 8001388:	481d      	ldr	r0, [pc, #116]	@ (8001400 <MX_TIM1_Init+0xec>)
 800138a:	f004 f8ff 	bl	800558c <HAL_TIM_ConfigClockSource>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001394:	f000 fbaa 	bl	8001aec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001398:	4819      	ldr	r0, [pc, #100]	@ (8001400 <MX_TIM1_Init+0xec>)
 800139a:	f003 fc8d 	bl	8004cb8 <HAL_TIM_IC_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80013a4:	f000 fba2 	bl	8001aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	4619      	mov	r1, r3
 80013ba:	4811      	ldr	r0, [pc, #68]	@ (8001400 <MX_TIM1_Init+0xec>)
 80013bc:	f004 ff06 	bl	80061cc <HAL_TIMEx_MasterConfigSynchronization>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 80013c6:	f000 fb91 	bl	8001aec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013ca:	2300      	movs	r3, #0
 80013cc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013ce:	2301      	movs	r3, #1
 80013d0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2200      	movs	r2, #0
 80013de:	4619      	mov	r1, r3
 80013e0:	4807      	ldr	r0, [pc, #28]	@ (8001400 <MX_TIM1_Init+0xec>)
 80013e2:	f003 ff22 	bl	800522a <HAL_TIM_IC_ConfigChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80013ec:	f000 fb7e 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80013f0:	2100      	movs	r1, #0
 80013f2:	4803      	ldr	r0, [pc, #12]	@ (8001400 <MX_TIM1_Init+0xec>)
 80013f4:	f003 fcc2 	bl	8004d7c <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM1_Init 2 */

}
 80013f8:	bf00      	nop
 80013fa:	3730      	adds	r7, #48	@ 0x30
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	200000f4 	.word	0x200000f4
 8001404:	40010000 	.word	0x40010000

08001408 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08c      	sub	sp, #48	@ 0x30
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800140e:	f107 0320 	add.w	r3, r7, #32
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001434:	4b2d      	ldr	r3, [pc, #180]	@ (80014ec <MX_TIM2_Init+0xe4>)
 8001436:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800143a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 800143c:	4b2b      	ldr	r3, [pc, #172]	@ (80014ec <MX_TIM2_Init+0xe4>)
 800143e:	225f      	movs	r2, #95	@ 0x5f
 8001440:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001442:	4b2a      	ldr	r3, [pc, #168]	@ (80014ec <MX_TIM2_Init+0xe4>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8001448:	4b28      	ldr	r3, [pc, #160]	@ (80014ec <MX_TIM2_Init+0xe4>)
 800144a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800144e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001450:	4b26      	ldr	r3, [pc, #152]	@ (80014ec <MX_TIM2_Init+0xe4>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001456:	4b25      	ldr	r3, [pc, #148]	@ (80014ec <MX_TIM2_Init+0xe4>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800145c:	4823      	ldr	r0, [pc, #140]	@ (80014ec <MX_TIM2_Init+0xe4>)
 800145e:	f003 fa09 	bl	8004874 <HAL_TIM_Base_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001468:	f000 fb40 	bl	8001aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800146c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001470:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001472:	f107 0320 	add.w	r3, r7, #32
 8001476:	4619      	mov	r1, r3
 8001478:	481c      	ldr	r0, [pc, #112]	@ (80014ec <MX_TIM2_Init+0xe4>)
 800147a:	f004 f887 	bl	800558c <HAL_TIM_ConfigClockSource>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001484:	f000 fb32 	bl	8001aec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001488:	4818      	ldr	r0, [pc, #96]	@ (80014ec <MX_TIM2_Init+0xe4>)
 800148a:	f003 fc15 	bl	8004cb8 <HAL_TIM_IC_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001494:	f000 fb2a 	bl	8001aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	4619      	mov	r1, r3
 80014a6:	4811      	ldr	r0, [pc, #68]	@ (80014ec <MX_TIM2_Init+0xe4>)
 80014a8:	f004 fe90 	bl	80061cc <HAL_TIMEx_MasterConfigSynchronization>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 80014b2:	f000 fb1b 	bl	8001aec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014b6:	2300      	movs	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014ba:	2301      	movs	r3, #1
 80014bc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	2200      	movs	r2, #0
 80014ca:	4619      	mov	r1, r3
 80014cc:	4807      	ldr	r0, [pc, #28]	@ (80014ec <MX_TIM2_Init+0xe4>)
 80014ce:	f003 feac 	bl	800522a <HAL_TIM_IC_ConfigChannel>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80014d8:	f000 fb08 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80014dc:	2100      	movs	r1, #0
 80014de:	4803      	ldr	r0, [pc, #12]	@ (80014ec <MX_TIM2_Init+0xe4>)
 80014e0:	f003 fc4c 	bl	8004d7c <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 80014e4:	bf00      	nop
 80014e6:	3730      	adds	r7, #48	@ 0x30
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000140 	.word	0x20000140

080014f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08c      	sub	sp, #48	@ 0x30
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f6:	f107 0320 	add.w	r3, r7, #32
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800151c:	4b2d      	ldr	r3, [pc, #180]	@ (80015d4 <MX_TIM3_Init+0xe4>)
 800151e:	4a2e      	ldr	r2, [pc, #184]	@ (80015d8 <MX_TIM3_Init+0xe8>)
 8001520:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96-1;
 8001522:	4b2c      	ldr	r3, [pc, #176]	@ (80015d4 <MX_TIM3_Init+0xe4>)
 8001524:	225f      	movs	r2, #95	@ 0x5f
 8001526:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001528:	4b2a      	ldr	r3, [pc, #168]	@ (80015d4 <MX_TIM3_Init+0xe4>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 800152e:	4b29      	ldr	r3, [pc, #164]	@ (80015d4 <MX_TIM3_Init+0xe4>)
 8001530:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001534:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001536:	4b27      	ldr	r3, [pc, #156]	@ (80015d4 <MX_TIM3_Init+0xe4>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153c:	4b25      	ldr	r3, [pc, #148]	@ (80015d4 <MX_TIM3_Init+0xe4>)
 800153e:	2200      	movs	r2, #0
 8001540:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001542:	4824      	ldr	r0, [pc, #144]	@ (80015d4 <MX_TIM3_Init+0xe4>)
 8001544:	f003 f996 	bl	8004874 <HAL_TIM_Base_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 800154e:	f000 facd 	bl	8001aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001552:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001556:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001558:	f107 0320 	add.w	r3, r7, #32
 800155c:	4619      	mov	r1, r3
 800155e:	481d      	ldr	r0, [pc, #116]	@ (80015d4 <MX_TIM3_Init+0xe4>)
 8001560:	f004 f814 	bl	800558c <HAL_TIM_ConfigClockSource>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800156a:	f000 fabf 	bl	8001aec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800156e:	4819      	ldr	r0, [pc, #100]	@ (80015d4 <MX_TIM3_Init+0xe4>)
 8001570:	f003 fba2 	bl	8004cb8 <HAL_TIM_IC_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800157a:	f000 fab7 	bl	8001aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4619      	mov	r1, r3
 800158c:	4811      	ldr	r0, [pc, #68]	@ (80015d4 <MX_TIM3_Init+0xe4>)
 800158e:	f004 fe1d 	bl	80061cc <HAL_TIMEx_MasterConfigSynchronization>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8001598:	f000 faa8 	bl	8001aec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800159c:	2300      	movs	r3, #0
 800159e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015a0:	2301      	movs	r3, #1
 80015a2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	2200      	movs	r2, #0
 80015b0:	4619      	mov	r1, r3
 80015b2:	4808      	ldr	r0, [pc, #32]	@ (80015d4 <MX_TIM3_Init+0xe4>)
 80015b4:	f003 fe39 	bl	800522a <HAL_TIM_IC_ConfigChannel>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 80015be:	f000 fa95 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80015c2:	2100      	movs	r1, #0
 80015c4:	4803      	ldr	r0, [pc, #12]	@ (80015d4 <MX_TIM3_Init+0xe4>)
 80015c6:	f003 fbd9 	bl	8004d7c <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM3_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	3730      	adds	r7, #48	@ 0x30
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	2000018c 	.word	0x2000018c
 80015d8:	40000400 	.word	0x40000400

080015dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08c      	sub	sp, #48	@ 0x30
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015e2:	f107 0320 	add.w	r3, r7, #32
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001608:	4b2d      	ldr	r3, [pc, #180]	@ (80016c0 <MX_TIM4_Init+0xe4>)
 800160a:	4a2e      	ldr	r2, [pc, #184]	@ (80016c4 <MX_TIM4_Init+0xe8>)
 800160c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 96-1;
 800160e:	4b2c      	ldr	r3, [pc, #176]	@ (80016c0 <MX_TIM4_Init+0xe4>)
 8001610:	225f      	movs	r2, #95	@ 0x5f
 8001612:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001614:	4b2a      	ldr	r3, [pc, #168]	@ (80016c0 <MX_TIM4_Init+0xe4>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 800161a:	4b29      	ldr	r3, [pc, #164]	@ (80016c0 <MX_TIM4_Init+0xe4>)
 800161c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001620:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001622:	4b27      	ldr	r3, [pc, #156]	@ (80016c0 <MX_TIM4_Init+0xe4>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001628:	4b25      	ldr	r3, [pc, #148]	@ (80016c0 <MX_TIM4_Init+0xe4>)
 800162a:	2200      	movs	r2, #0
 800162c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800162e:	4824      	ldr	r0, [pc, #144]	@ (80016c0 <MX_TIM4_Init+0xe4>)
 8001630:	f003 f920 	bl	8004874 <HAL_TIM_Base_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 800163a:	f000 fa57 	bl	8001aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800163e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001642:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001644:	f107 0320 	add.w	r3, r7, #32
 8001648:	4619      	mov	r1, r3
 800164a:	481d      	ldr	r0, [pc, #116]	@ (80016c0 <MX_TIM4_Init+0xe4>)
 800164c:	f003 ff9e 	bl	800558c <HAL_TIM_ConfigClockSource>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001656:	f000 fa49 	bl	8001aec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800165a:	4819      	ldr	r0, [pc, #100]	@ (80016c0 <MX_TIM4_Init+0xe4>)
 800165c:	f003 fb2c 	bl	8004cb8 <HAL_TIM_IC_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001666:	f000 fa41 	bl	8001aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4619      	mov	r1, r3
 8001678:	4811      	ldr	r0, [pc, #68]	@ (80016c0 <MX_TIM4_Init+0xe4>)
 800167a:	f004 fda7 	bl	80061cc <HAL_TIMEx_MasterConfigSynchronization>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8001684:	f000 fa32 	bl	8001aec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001688:	2300      	movs	r3, #0
 800168a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800168c:	2301      	movs	r3, #1
 800168e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	2200      	movs	r2, #0
 800169c:	4619      	mov	r1, r3
 800169e:	4808      	ldr	r0, [pc, #32]	@ (80016c0 <MX_TIM4_Init+0xe4>)
 80016a0:	f003 fdc3 	bl	800522a <HAL_TIM_IC_ConfigChannel>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 80016aa:	f000 fa1f 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80016ae:	2100      	movs	r1, #0
 80016b0:	4803      	ldr	r0, [pc, #12]	@ (80016c0 <MX_TIM4_Init+0xe4>)
 80016b2:	f003 fb63 	bl	8004d7c <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM4_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	3730      	adds	r7, #48	@ 0x30
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200001d8 	.word	0x200001d8
 80016c4:	40000800 	.word	0x40000800

080016c8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b096      	sub	sp, #88	@ 0x58
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ce:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016da:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
 80016e8:	611a      	str	r2, [r3, #16]
 80016ea:	615a      	str	r2, [r3, #20]
 80016ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016ee:	1d3b      	adds	r3, r7, #4
 80016f0:	222c      	movs	r2, #44	@ 0x2c
 80016f2:	2100      	movs	r1, #0
 80016f4:	4618      	mov	r0, r3
 80016f6:	f006 fa74 	bl	8007be2 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80016fa:	4b3f      	ldr	r3, [pc, #252]	@ (80017f8 <MX_TIM8_Init+0x130>)
 80016fc:	4a3f      	ldr	r2, [pc, #252]	@ (80017fc <MX_TIM8_Init+0x134>)
 80016fe:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001700:	4b3d      	ldr	r3, [pc, #244]	@ (80017f8 <MX_TIM8_Init+0x130>)
 8001702:	2200      	movs	r2, #0
 8001704:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001706:	4b3c      	ldr	r3, [pc, #240]	@ (80017f8 <MX_TIM8_Init+0x130>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2399;
 800170c:	4b3a      	ldr	r3, [pc, #232]	@ (80017f8 <MX_TIM8_Init+0x130>)
 800170e:	f640 125f 	movw	r2, #2399	@ 0x95f
 8001712:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001714:	4b38      	ldr	r3, [pc, #224]	@ (80017f8 <MX_TIM8_Init+0x130>)
 8001716:	2200      	movs	r2, #0
 8001718:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800171a:	4b37      	ldr	r3, [pc, #220]	@ (80017f8 <MX_TIM8_Init+0x130>)
 800171c:	2200      	movs	r2, #0
 800171e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001720:	4b35      	ldr	r3, [pc, #212]	@ (80017f8 <MX_TIM8_Init+0x130>)
 8001722:	2200      	movs	r2, #0
 8001724:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001726:	4834      	ldr	r0, [pc, #208]	@ (80017f8 <MX_TIM8_Init+0x130>)
 8001728:	f003 f974 	bl	8004a14 <HAL_TIM_PWM_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001732:	f000 f9db 	bl	8001aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001736:	2300      	movs	r3, #0
 8001738:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800173a:	2300      	movs	r3, #0
 800173c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800173e:	2300      	movs	r3, #0
 8001740:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001742:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001746:	4619      	mov	r1, r3
 8001748:	482b      	ldr	r0, [pc, #172]	@ (80017f8 <MX_TIM8_Init+0x130>)
 800174a:	f004 fd3f 	bl	80061cc <HAL_TIMEx_MasterConfigSynchronization>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001754:	f000 f9ca 	bl	8001aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001758:	2360      	movs	r3, #96	@ 0x60
 800175a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001760:	2300      	movs	r3, #0
 8001762:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001764:	2300      	movs	r3, #0
 8001766:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800176c:	2300      	movs	r3, #0
 800176e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001770:	2300      	movs	r3, #0
 8001772:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001774:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001778:	2208      	movs	r2, #8
 800177a:	4619      	mov	r1, r3
 800177c:	481e      	ldr	r0, [pc, #120]	@ (80017f8 <MX_TIM8_Init+0x130>)
 800177e:	f003 fdf1 	bl	8005364 <HAL_TIM_PWM_ConfigChannel>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001788:	f000 f9b0 	bl	8001aec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800178c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001790:	220c      	movs	r2, #12
 8001792:	4619      	mov	r1, r3
 8001794:	4818      	ldr	r0, [pc, #96]	@ (80017f8 <MX_TIM8_Init+0x130>)
 8001796:	f003 fde5 	bl	8005364 <HAL_TIM_PWM_ConfigChannel>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 80017a0:	f000 f9a4 	bl	8001aec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017a4:	2300      	movs	r3, #0
 80017a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017ca:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	4619      	mov	r1, r3
 80017d8:	4807      	ldr	r0, [pc, #28]	@ (80017f8 <MX_TIM8_Init+0x130>)
 80017da:	f004 fd85 	bl	80062e8 <HAL_TIMEx_ConfigBreakDeadTime>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 80017e4:	f000 f982 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80017e8:	4803      	ldr	r0, [pc, #12]	@ (80017f8 <MX_TIM8_Init+0x130>)
 80017ea:	f000 fb8d 	bl	8001f08 <HAL_TIM_MspPostInit>

}
 80017ee:	bf00      	nop
 80017f0:	3758      	adds	r7, #88	@ 0x58
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000224 	.word	0x20000224
 80017fc:	40010400 	.word	0x40010400

08001800 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001806:	463b      	mov	r3, r7
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001812:	4b16      	ldr	r3, [pc, #88]	@ (800186c <MX_TIM9_Init+0x6c>)
 8001814:	4a16      	ldr	r2, [pc, #88]	@ (8001870 <MX_TIM9_Init+0x70>)
 8001816:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 383;
 8001818:	4b14      	ldr	r3, [pc, #80]	@ (800186c <MX_TIM9_Init+0x6c>)
 800181a:	f240 127f 	movw	r2, #383	@ 0x17f
 800181e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001820:	4b12      	ldr	r3, [pc, #72]	@ (800186c <MX_TIM9_Init+0x6c>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 62499;
 8001826:	4b11      	ldr	r3, [pc, #68]	@ (800186c <MX_TIM9_Init+0x6c>)
 8001828:	f24f 4223 	movw	r2, #62499	@ 0xf423
 800182c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800182e:	4b0f      	ldr	r3, [pc, #60]	@ (800186c <MX_TIM9_Init+0x6c>)
 8001830:	2200      	movs	r2, #0
 8001832:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001834:	4b0d      	ldr	r3, [pc, #52]	@ (800186c <MX_TIM9_Init+0x6c>)
 8001836:	2200      	movs	r2, #0
 8001838:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800183a:	480c      	ldr	r0, [pc, #48]	@ (800186c <MX_TIM9_Init+0x6c>)
 800183c:	f003 f81a 	bl	8004874 <HAL_TIM_Base_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8001846:	f000 f951 	bl	8001aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800184a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800184e:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001850:	463b      	mov	r3, r7
 8001852:	4619      	mov	r1, r3
 8001854:	4805      	ldr	r0, [pc, #20]	@ (800186c <MX_TIM9_Init+0x6c>)
 8001856:	f003 fe99 	bl	800558c <HAL_TIM_ConfigClockSource>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8001860:	f000 f944 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001864:	bf00      	nop
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000270 	.word	0x20000270
 8001870:	40014000 	.word	0x40014000

08001874 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001878:	4b14      	ldr	r3, [pc, #80]	@ (80018cc <MX_USART2_UART_Init+0x58>)
 800187a:	4a15      	ldr	r2, [pc, #84]	@ (80018d0 <MX_USART2_UART_Init+0x5c>)
 800187c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800187e:	4b13      	ldr	r3, [pc, #76]	@ (80018cc <MX_USART2_UART_Init+0x58>)
 8001880:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001884:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001886:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <MX_USART2_UART_Init+0x58>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800188c:	4b0f      	ldr	r3, [pc, #60]	@ (80018cc <MX_USART2_UART_Init+0x58>)
 800188e:	2200      	movs	r2, #0
 8001890:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001892:	4b0e      	ldr	r3, [pc, #56]	@ (80018cc <MX_USART2_UART_Init+0x58>)
 8001894:	2200      	movs	r2, #0
 8001896:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001898:	4b0c      	ldr	r3, [pc, #48]	@ (80018cc <MX_USART2_UART_Init+0x58>)
 800189a:	220c      	movs	r2, #12
 800189c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800189e:	4b0b      	ldr	r3, [pc, #44]	@ (80018cc <MX_USART2_UART_Init+0x58>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a4:	4b09      	ldr	r3, [pc, #36]	@ (80018cc <MX_USART2_UART_Init+0x58>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018aa:	4b08      	ldr	r3, [pc, #32]	@ (80018cc <MX_USART2_UART_Init+0x58>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018b0:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <MX_USART2_UART_Init+0x58>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018b6:	4805      	ldr	r0, [pc, #20]	@ (80018cc <MX_USART2_UART_Init+0x58>)
 80018b8:	f004 fdb2 	bl	8006420 <HAL_UART_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80018c2:	f000 f913 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200002bc 	.word	0x200002bc
 80018d0:	40004400 	.word	0x40004400

080018d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08c      	sub	sp, #48	@ 0x30
 80018d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018da:	f107 031c 	add.w	r3, r7, #28
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
 80018e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018ea:	4b63      	ldr	r3, [pc, #396]	@ (8001a78 <MX_GPIO_Init+0x1a4>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	4a62      	ldr	r2, [pc, #392]	@ (8001a78 <MX_GPIO_Init+0x1a4>)
 80018f0:	f043 0320 	orr.w	r3, r3, #32
 80018f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f6:	4b60      	ldr	r3, [pc, #384]	@ (8001a78 <MX_GPIO_Init+0x1a4>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fa:	f003 0320 	and.w	r3, r3, #32
 80018fe:	61bb      	str	r3, [r7, #24]
 8001900:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001902:	4b5d      	ldr	r3, [pc, #372]	@ (8001a78 <MX_GPIO_Init+0x1a4>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001906:	4a5c      	ldr	r2, [pc, #368]	@ (8001a78 <MX_GPIO_Init+0x1a4>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6313      	str	r3, [r2, #48]	@ 0x30
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <MX_GPIO_Init+0x1a4>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800191a:	4b57      	ldr	r3, [pc, #348]	@ (8001a78 <MX_GPIO_Init+0x1a4>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	4a56      	ldr	r2, [pc, #344]	@ (8001a78 <MX_GPIO_Init+0x1a4>)
 8001920:	f043 0310 	orr.w	r3, r3, #16
 8001924:	6313      	str	r3, [r2, #48]	@ 0x30
 8001926:	4b54      	ldr	r3, [pc, #336]	@ (8001a78 <MX_GPIO_Init+0x1a4>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	f003 0310 	and.w	r3, r3, #16
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001932:	4b51      	ldr	r3, [pc, #324]	@ (8001a78 <MX_GPIO_Init+0x1a4>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	4a50      	ldr	r2, [pc, #320]	@ (8001a78 <MX_GPIO_Init+0x1a4>)
 8001938:	f043 0302 	orr.w	r3, r3, #2
 800193c:	6313      	str	r3, [r2, #48]	@ 0x30
 800193e:	4b4e      	ldr	r3, [pc, #312]	@ (8001a78 <MX_GPIO_Init+0x1a4>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800194a:	4b4b      	ldr	r3, [pc, #300]	@ (8001a78 <MX_GPIO_Init+0x1a4>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	4a4a      	ldr	r2, [pc, #296]	@ (8001a78 <MX_GPIO_Init+0x1a4>)
 8001950:	f043 0308 	orr.w	r3, r3, #8
 8001954:	6313      	str	r3, [r2, #48]	@ 0x30
 8001956:	4b48      	ldr	r3, [pc, #288]	@ (8001a78 <MX_GPIO_Init+0x1a4>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	f003 0308 	and.w	r3, r3, #8
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001962:	4b45      	ldr	r3, [pc, #276]	@ (8001a78 <MX_GPIO_Init+0x1a4>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	4a44      	ldr	r2, [pc, #272]	@ (8001a78 <MX_GPIO_Init+0x1a4>)
 8001968:	f043 0304 	orr.w	r3, r3, #4
 800196c:	6313      	str	r3, [r2, #48]	@ 0x30
 800196e:	4b42      	ldr	r3, [pc, #264]	@ (8001a78 <MX_GPIO_Init+0x1a4>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(US2_TRIG_GPIO_Port, US2_TRIG_Pin, GPIO_PIN_RESET);
 800197a:	2200      	movs	r2, #0
 800197c:	2140      	movs	r1, #64	@ 0x40
 800197e:	483f      	ldr	r0, [pc, #252]	@ (8001a7c <MX_GPIO_Init+0x1a8>)
 8001980:	f001 f85a 	bl	8002a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, US1_TRIG_Pin|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001984:	2200      	movs	r2, #0
 8001986:	f44f 41f2 	mov.w	r1, #30976	@ 0x7900
 800198a:	483d      	ldr	r0, [pc, #244]	@ (8001a80 <MX_GPIO_Init+0x1ac>)
 800198c:	f001 f854 	bl	8002a38 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Debug_LED_GPIO_Port, Debug_LED_Pin, GPIO_PIN_RESET);
 8001990:	2200      	movs	r2, #0
 8001992:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001996:	483b      	ldr	r0, [pc, #236]	@ (8001a84 <MX_GPIO_Init+0x1b0>)
 8001998:	f001 f84e 	bl	8002a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(US4_TRIG_GPIO_Port, US4_TRIG_Pin, GPIO_PIN_RESET);
 800199c:	2200      	movs	r2, #0
 800199e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019a2:	4839      	ldr	r0, [pc, #228]	@ (8001a88 <MX_GPIO_Init+0x1b4>)
 80019a4:	f001 f848 	bl	8002a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(US3_TRIG_GPIO_Port, US3_TRIG_Pin, GPIO_PIN_RESET);
 80019a8:	2200      	movs	r2, #0
 80019aa:	2180      	movs	r1, #128	@ 0x80
 80019ac:	4837      	ldr	r0, [pc, #220]	@ (8001a8c <MX_GPIO_Init+0x1b8>)
 80019ae:	f001 f843 	bl	8002a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BNO055_INT_Pin */
  GPIO_InitStruct.Pin = BNO055_INT_Pin;
 80019b2:	2308      	movs	r3, #8
 80019b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019b6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BNO055_INT_GPIO_Port, &GPIO_InitStruct);
 80019c0:	f107 031c 	add.w	r3, r7, #28
 80019c4:	4619      	mov	r1, r3
 80019c6:	4832      	ldr	r0, [pc, #200]	@ (8001a90 <MX_GPIO_Init+0x1bc>)
 80019c8:	f000 fe8a 	bl	80026e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : US2_TRIG_Pin */
  GPIO_InitStruct.Pin = US2_TRIG_Pin;
 80019cc:	2340      	movs	r3, #64	@ 0x40
 80019ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d0:	2301      	movs	r3, #1
 80019d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d8:	2300      	movs	r3, #0
 80019da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(US2_TRIG_GPIO_Port, &GPIO_InitStruct);
 80019dc:	f107 031c 	add.w	r3, r7, #28
 80019e0:	4619      	mov	r1, r3
 80019e2:	4826      	ldr	r0, [pc, #152]	@ (8001a7c <MX_GPIO_Init+0x1a8>)
 80019e4:	f000 fe7c 	bl	80026e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : US1_TRIG_Pin PE11 PE12 PE13
                           PE14 */
  GPIO_InitStruct.Pin = US1_TRIG_Pin|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80019e8:	f44f 43f2 	mov.w	r3, #30976	@ 0x7900
 80019ec:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ee:	2301      	movs	r3, #1
 80019f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	2300      	movs	r3, #0
 80019f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019fa:	f107 031c 	add.w	r3, r7, #28
 80019fe:	4619      	mov	r1, r3
 8001a00:	481f      	ldr	r0, [pc, #124]	@ (8001a80 <MX_GPIO_Init+0x1ac>)
 8001a02:	f000 fe6d 	bl	80026e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Debug_LED_Pin */
  GPIO_InitStruct.Pin = Debug_LED_Pin;
 8001a06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2300      	movs	r3, #0
 8001a16:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Debug_LED_GPIO_Port, &GPIO_InitStruct);
 8001a18:	f107 031c 	add.w	r3, r7, #28
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4819      	ldr	r0, [pc, #100]	@ (8001a84 <MX_GPIO_Init+0x1b0>)
 8001a20:	f000 fe5e 	bl	80026e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : US4_TRIG_Pin */
  GPIO_InitStruct.Pin = US4_TRIG_Pin;
 8001a24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2300      	movs	r3, #0
 8001a34:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(US4_TRIG_GPIO_Port, &GPIO_InitStruct);
 8001a36:	f107 031c 	add.w	r3, r7, #28
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4812      	ldr	r0, [pc, #72]	@ (8001a88 <MX_GPIO_Init+0x1b4>)
 8001a3e:	f000 fe4f 	bl	80026e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : US3_TRIG_Pin */
  GPIO_InitStruct.Pin = US3_TRIG_Pin;
 8001a42:	2380      	movs	r3, #128	@ 0x80
 8001a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a46:	2301      	movs	r3, #1
 8001a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(US3_TRIG_GPIO_Port, &GPIO_InitStruct);
 8001a52:	f107 031c 	add.w	r3, r7, #28
 8001a56:	4619      	mov	r1, r3
 8001a58:	480c      	ldr	r0, [pc, #48]	@ (8001a8c <MX_GPIO_Init+0x1b8>)
 8001a5a:	f000 fe41 	bl	80026e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2100      	movs	r1, #0
 8001a62:	2009      	movs	r0, #9
 8001a64:	f000 fcfb 	bl	800245e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001a68:	2009      	movs	r0, #9
 8001a6a:	f000 fd14 	bl	8002496 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a6e:	bf00      	nop
 8001a70:	3730      	adds	r7, #48	@ 0x30
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40020000 	.word	0x40020000
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40020400 	.word	0x40020400
 8001a88:	40020c00 	.word	0x40020c00
 8001a8c:	40020800 	.word	0x40020800
 8001a90:	40021400 	.word	0x40021400

08001a94 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001a9a:	463b      	mov	r3, r7
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001aa6:	f000 fd11 	bl	80024cc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001ab6:	231f      	movs	r3, #31
 8001ab8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001aba:	2387      	movs	r3, #135	@ 0x87
 8001abc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001aca:	2301      	movs	r3, #1
 8001acc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001ad6:	463b      	mov	r3, r7
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f000 fd2f 	bl	800253c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001ade:	2004      	movs	r0, #4
 8001ae0:	f000 fd0c 	bl	80024fc <HAL_MPU_Enable>

}
 8001ae4:	bf00      	nop
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af0:	b672      	cpsid	i
}
 8001af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <Error_Handler+0x8>

08001af8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001afe:	4b0f      	ldr	r3, [pc, #60]	@ (8001b3c <HAL_MspInit+0x44>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b02:	4a0e      	ldr	r2, [pc, #56]	@ (8001b3c <HAL_MspInit+0x44>)
 8001b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b3c <HAL_MspInit+0x44>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b12:	607b      	str	r3, [r7, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b16:	4b09      	ldr	r3, [pc, #36]	@ (8001b3c <HAL_MspInit+0x44>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1a:	4a08      	ldr	r2, [pc, #32]	@ (8001b3c <HAL_MspInit+0x44>)
 8001b1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b22:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <HAL_MspInit+0x44>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	40023800 	.word	0x40023800

08001b40 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b0b0      	sub	sp, #192	@ 0xc0
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b58:	f107 031c 	add.w	r3, r7, #28
 8001b5c:	2290      	movs	r2, #144	@ 0x90
 8001b5e:	2100      	movs	r1, #0
 8001b60:	4618      	mov	r0, r3
 8001b62:	f006 f83e 	bl	8007be2 <memset>
  if(hi2c->Instance==I2C1)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a43      	ldr	r2, [pc, #268]	@ (8001c78 <HAL_I2C_MspInit+0x138>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d13d      	bne.n	8001bec <HAL_I2C_MspInit+0xac>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b70:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b74:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b7c:	f107 031c 	add.w	r3, r7, #28
 8001b80:	4618      	mov	r0, r3
 8001b82:	f002 fa4f 	bl	8004024 <HAL_RCCEx_PeriphCLKConfig>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001b8c:	f7ff ffae 	bl	8001aec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b90:	4b3a      	ldr	r3, [pc, #232]	@ (8001c7c <HAL_I2C_MspInit+0x13c>)
 8001b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b94:	4a39      	ldr	r2, [pc, #228]	@ (8001c7c <HAL_I2C_MspInit+0x13c>)
 8001b96:	f043 0302 	orr.w	r3, r3, #2
 8001b9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b9c:	4b37      	ldr	r3, [pc, #220]	@ (8001c7c <HAL_I2C_MspInit+0x13c>)
 8001b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	61bb      	str	r3, [r7, #24]
 8001ba6:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ba8:	23c0      	movs	r3, #192	@ 0xc0
 8001baa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bae:	2312      	movs	r3, #18
 8001bb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bc0:	2304      	movs	r3, #4
 8001bc2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001bca:	4619      	mov	r1, r3
 8001bcc:	482c      	ldr	r0, [pc, #176]	@ (8001c80 <HAL_I2C_MspInit+0x140>)
 8001bce:	f000 fd87 	bl	80026e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bd2:	4b2a      	ldr	r3, [pc, #168]	@ (8001c7c <HAL_I2C_MspInit+0x13c>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd6:	4a29      	ldr	r2, [pc, #164]	@ (8001c7c <HAL_I2C_MspInit+0x13c>)
 8001bd8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bde:	4b27      	ldr	r3, [pc, #156]	@ (8001c7c <HAL_I2C_MspInit+0x13c>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001bea:	e041      	b.n	8001c70 <HAL_I2C_MspInit+0x130>
  else if(hi2c->Instance==I2C2)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a24      	ldr	r2, [pc, #144]	@ (8001c84 <HAL_I2C_MspInit+0x144>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d13c      	bne.n	8001c70 <HAL_I2C_MspInit+0x130>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001bf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001bfa:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c02:	f107 031c 	add.w	r3, r7, #28
 8001c06:	4618      	mov	r0, r3
 8001c08:	f002 fa0c 	bl	8004024 <HAL_RCCEx_PeriphCLKConfig>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001c12:	f7ff ff6b 	bl	8001aec <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c16:	4b19      	ldr	r3, [pc, #100]	@ (8001c7c <HAL_I2C_MspInit+0x13c>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1a:	4a18      	ldr	r2, [pc, #96]	@ (8001c7c <HAL_I2C_MspInit+0x13c>)
 8001c1c:	f043 0320 	orr.w	r3, r3, #32
 8001c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c22:	4b16      	ldr	r3, [pc, #88]	@ (8001c7c <HAL_I2C_MspInit+0x13c>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c26:	f003 0320 	and.w	r3, r3, #32
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BNO055_SDA_Pin|BNO055_SCL_Pin;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c34:	2312      	movs	r3, #18
 8001c36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c40:	2303      	movs	r3, #3
 8001c42:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c46:	2304      	movs	r3, #4
 8001c48:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c4c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001c50:	4619      	mov	r1, r3
 8001c52:	480d      	ldr	r0, [pc, #52]	@ (8001c88 <HAL_I2C_MspInit+0x148>)
 8001c54:	f000 fd44 	bl	80026e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c58:	4b08      	ldr	r3, [pc, #32]	@ (8001c7c <HAL_I2C_MspInit+0x13c>)
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5c:	4a07      	ldr	r2, [pc, #28]	@ (8001c7c <HAL_I2C_MspInit+0x13c>)
 8001c5e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c62:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c64:	4b05      	ldr	r3, [pc, #20]	@ (8001c7c <HAL_I2C_MspInit+0x13c>)
 8001c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
}
 8001c70:	bf00      	nop
 8001c72:	37c0      	adds	r7, #192	@ 0xc0
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40005400 	.word	0x40005400
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40020400 	.word	0x40020400
 8001c84:	40005800 	.word	0x40005800
 8001c88:	40021400 	.word	0x40021400

08001c8c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b090      	sub	sp, #64	@ 0x40
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a7e      	ldr	r2, [pc, #504]	@ (8001ea4 <HAL_TIM_Base_MspInit+0x218>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d139      	bne.n	8001d22 <HAL_TIM_Base_MspInit+0x96>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cae:	4b7e      	ldr	r3, [pc, #504]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x21c>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb2:	4a7d      	ldr	r2, [pc, #500]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x21c>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cba:	4b7b      	ldr	r3, [pc, #492]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x21c>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cc6:	4b78      	ldr	r3, [pc, #480]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x21c>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cca:	4a77      	ldr	r2, [pc, #476]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x21c>)
 8001ccc:	f043 0310 	orr.w	r3, r3, #16
 8001cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd2:	4b75      	ldr	r3, [pc, #468]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x21c>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	f003 0310 	and.w	r3, r3, #16
 8001cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = US1_ECHO_Pin;
 8001cde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cec:	2300      	movs	r3, #0
 8001cee:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(US1_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001cf4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	486c      	ldr	r0, [pc, #432]	@ (8001eac <HAL_TIM_Base_MspInit+0x220>)
 8001cfc:	f000 fcf0 	bl	80026e0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001d00:	2200      	movs	r2, #0
 8001d02:	2100      	movs	r1, #0
 8001d04:	2018      	movs	r0, #24
 8001d06:	f000 fbaa 	bl	800245e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001d0a:	2018      	movs	r0, #24
 8001d0c:	f000 fbc3 	bl	8002496 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001d10:	2200      	movs	r2, #0
 8001d12:	2100      	movs	r1, #0
 8001d14:	201b      	movs	r0, #27
 8001d16:	f000 fba2 	bl	800245e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001d1a:	201b      	movs	r0, #27
 8001d1c:	f000 fbbb 	bl	8002496 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM9_MspInit 1 */

    /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001d20:	e0bb      	b.n	8001e9a <HAL_TIM_Base_MspInit+0x20e>
  else if(htim_base->Instance==TIM2)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d2a:	d130      	bne.n	8001d8e <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d2c:	4b5e      	ldr	r3, [pc, #376]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x21c>)
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d30:	4a5d      	ldr	r2, [pc, #372]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x21c>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d38:	4b5b      	ldr	r3, [pc, #364]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x21c>)
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	623b      	str	r3, [r7, #32]
 8001d42:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d44:	4b58      	ldr	r3, [pc, #352]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x21c>)
 8001d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d48:	4a57      	ldr	r2, [pc, #348]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x21c>)
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d50:	4b55      	ldr	r3, [pc, #340]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x21c>)
 8001d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	61fb      	str	r3, [r7, #28]
 8001d5a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = US2_ECHO_Pin;
 8001d5c:	2320      	movs	r3, #32
 8001d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d60:	2302      	movs	r3, #2
 8001d62:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(US2_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001d70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d74:	4619      	mov	r1, r3
 8001d76:	484e      	ldr	r0, [pc, #312]	@ (8001eb0 <HAL_TIM_Base_MspInit+0x224>)
 8001d78:	f000 fcb2 	bl	80026e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2100      	movs	r1, #0
 8001d80:	201c      	movs	r0, #28
 8001d82:	f000 fb6c 	bl	800245e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d86:	201c      	movs	r0, #28
 8001d88:	f000 fb85 	bl	8002496 <HAL_NVIC_EnableIRQ>
}
 8001d8c:	e085      	b.n	8001e9a <HAL_TIM_Base_MspInit+0x20e>
  else if(htim_base->Instance==TIM3)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a48      	ldr	r2, [pc, #288]	@ (8001eb4 <HAL_TIM_Base_MspInit+0x228>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d130      	bne.n	8001dfa <HAL_TIM_Base_MspInit+0x16e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d98:	4b43      	ldr	r3, [pc, #268]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x21c>)
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9c:	4a42      	ldr	r2, [pc, #264]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x21c>)
 8001d9e:	f043 0302 	orr.w	r3, r3, #2
 8001da2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001da4:	4b40      	ldr	r3, [pc, #256]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x21c>)
 8001da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	61bb      	str	r3, [r7, #24]
 8001dae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db0:	4b3d      	ldr	r3, [pc, #244]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x21c>)
 8001db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db4:	4a3c      	ldr	r2, [pc, #240]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x21c>)
 8001db6:	f043 0304 	orr.w	r3, r3, #4
 8001dba:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dbc:	4b3a      	ldr	r3, [pc, #232]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x21c>)
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = US3_ECHO_Pin;
 8001dc8:	2340      	movs	r3, #64	@ 0x40
 8001dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(US3_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001ddc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001de0:	4619      	mov	r1, r3
 8001de2:	4835      	ldr	r0, [pc, #212]	@ (8001eb8 <HAL_TIM_Base_MspInit+0x22c>)
 8001de4:	f000 fc7c 	bl	80026e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001de8:	2200      	movs	r2, #0
 8001dea:	2100      	movs	r1, #0
 8001dec:	201d      	movs	r0, #29
 8001dee:	f000 fb36 	bl	800245e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001df2:	201d      	movs	r0, #29
 8001df4:	f000 fb4f 	bl	8002496 <HAL_NVIC_EnableIRQ>
}
 8001df8:	e04f      	b.n	8001e9a <HAL_TIM_Base_MspInit+0x20e>
  else if(htim_base->Instance==TIM4)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a2f      	ldr	r2, [pc, #188]	@ (8001ebc <HAL_TIM_Base_MspInit+0x230>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d131      	bne.n	8001e68 <HAL_TIM_Base_MspInit+0x1dc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e04:	4b28      	ldr	r3, [pc, #160]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x21c>)
 8001e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e08:	4a27      	ldr	r2, [pc, #156]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x21c>)
 8001e0a:	f043 0304 	orr.w	r3, r3, #4
 8001e0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e10:	4b25      	ldr	r3, [pc, #148]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x21c>)
 8001e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e1c:	4b22      	ldr	r3, [pc, #136]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x21c>)
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e20:	4a21      	ldr	r2, [pc, #132]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x21c>)
 8001e22:	f043 0308 	orr.w	r3, r3, #8
 8001e26:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e28:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x21c>)
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = US4_ECHO_Pin;
 8001e34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e42:	2300      	movs	r3, #0
 8001e44:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e46:	2302      	movs	r3, #2
 8001e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(US4_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001e4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e4e:	4619      	mov	r1, r3
 8001e50:	481b      	ldr	r0, [pc, #108]	@ (8001ec0 <HAL_TIM_Base_MspInit+0x234>)
 8001e52:	f000 fc45 	bl	80026e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2100      	movs	r1, #0
 8001e5a:	201e      	movs	r0, #30
 8001e5c:	f000 faff 	bl	800245e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e60:	201e      	movs	r0, #30
 8001e62:	f000 fb18 	bl	8002496 <HAL_NVIC_EnableIRQ>
}
 8001e66:	e018      	b.n	8001e9a <HAL_TIM_Base_MspInit+0x20e>
  else if(htim_base->Instance==TIM9)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a15      	ldr	r2, [pc, #84]	@ (8001ec4 <HAL_TIM_Base_MspInit+0x238>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d113      	bne.n	8001e9a <HAL_TIM_Base_MspInit+0x20e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001e72:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x21c>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e76:	4a0c      	ldr	r2, [pc, #48]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x21c>)
 8001e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x21c>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	2018      	movs	r0, #24
 8001e90:	f000 fae5 	bl	800245e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001e94:	2018      	movs	r0, #24
 8001e96:	f000 fafe 	bl	8002496 <HAL_NVIC_EnableIRQ>
}
 8001e9a:	bf00      	nop
 8001e9c:	3740      	adds	r7, #64	@ 0x40
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40010000 	.word	0x40010000
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	40020000 	.word	0x40020000
 8001eb4:	40000400 	.word	0x40000400
 8001eb8:	40020800 	.word	0x40020800
 8001ebc:	40000800 	.word	0x40000800
 8001ec0:	40020c00 	.word	0x40020c00
 8001ec4:	40014000 	.word	0x40014000

08001ec8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a0a      	ldr	r2, [pc, #40]	@ (8001f00 <HAL_TIM_PWM_MspInit+0x38>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d10b      	bne.n	8001ef2 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001eda:	4b0a      	ldr	r3, [pc, #40]	@ (8001f04 <HAL_TIM_PWM_MspInit+0x3c>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ede:	4a09      	ldr	r2, [pc, #36]	@ (8001f04 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ee0:	f043 0302 	orr.w	r3, r3, #2
 8001ee4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ee6:	4b07      	ldr	r3, [pc, #28]	@ (8001f04 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM8_MspInit 1 */

  }

}
 8001ef2:	bf00      	nop
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40010400 	.word	0x40010400
 8001f04:	40023800 	.word	0x40023800

08001f08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 030c 	add.w	r3, r7, #12
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a11      	ldr	r2, [pc, #68]	@ (8001f6c <HAL_TIM_MspPostInit+0x64>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d11c      	bne.n	8001f64 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f2a:	4b11      	ldr	r3, [pc, #68]	@ (8001f70 <HAL_TIM_MspPostInit+0x68>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2e:	4a10      	ldr	r2, [pc, #64]	@ (8001f70 <HAL_TIM_MspPostInit+0x68>)
 8001f30:	f043 0304 	orr.w	r3, r3, #4
 8001f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f36:	4b0e      	ldr	r3, [pc, #56]	@ (8001f70 <HAL_TIM_MspPostInit+0x68>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3a:	f003 0304 	and.w	r3, r3, #4
 8001f3e:	60bb      	str	r3, [r7, #8]
 8001f40:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f42:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f46:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f50:	2300      	movs	r3, #0
 8001f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001f54:	2303      	movs	r3, #3
 8001f56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f58:	f107 030c 	add.w	r3, r7, #12
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4805      	ldr	r0, [pc, #20]	@ (8001f74 <HAL_TIM_MspPostInit+0x6c>)
 8001f60:	f000 fbbe 	bl	80026e0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001f64:	bf00      	nop
 8001f66:	3720      	adds	r7, #32
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40010400 	.word	0x40010400
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40020800 	.word	0x40020800

08001f78 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b0ae      	sub	sp, #184	@ 0xb8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f80:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f90:	f107 0314 	add.w	r3, r7, #20
 8001f94:	2290      	movs	r2, #144	@ 0x90
 8001f96:	2100      	movs	r1, #0
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f005 fe22 	bl	8007be2 <memset>
  if(huart->Instance==USART2)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a25      	ldr	r2, [pc, #148]	@ (8002038 <HAL_UART_MspInit+0xc0>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d142      	bne.n	800202e <HAL_UART_MspInit+0xb6>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001fa8:	2380      	movs	r3, #128	@ 0x80
 8001faa:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001fac:	2300      	movs	r3, #0
 8001fae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f002 f835 	bl	8004024 <HAL_RCCEx_PeriphCLKConfig>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fc0:	f7ff fd94 	bl	8001aec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800203c <HAL_UART_MspInit+0xc4>)
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc8:	4a1c      	ldr	r2, [pc, #112]	@ (800203c <HAL_UART_MspInit+0xc4>)
 8001fca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fce:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800203c <HAL_UART_MspInit+0xc4>)
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd8:	613b      	str	r3, [r7, #16]
 8001fda:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fdc:	4b17      	ldr	r3, [pc, #92]	@ (800203c <HAL_UART_MspInit+0xc4>)
 8001fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe0:	4a16      	ldr	r2, [pc, #88]	@ (800203c <HAL_UART_MspInit+0xc4>)
 8001fe2:	f043 0308 	orr.w	r3, r3, #8
 8001fe6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fe8:	4b14      	ldr	r3, [pc, #80]	@ (800203c <HAL_UART_MspInit+0xc4>)
 8001fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fec:	f003 0308 	and.w	r3, r3, #8
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = Bluetooth_TX_Pin|Bluetooth_RX_Pin;
 8001ff4:	2360      	movs	r3, #96	@ 0x60
 8001ff6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002006:	2303      	movs	r3, #3
 8002008:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800200c:	2307      	movs	r3, #7
 800200e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002012:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002016:	4619      	mov	r1, r3
 8002018:	4809      	ldr	r0, [pc, #36]	@ (8002040 <HAL_UART_MspInit+0xc8>)
 800201a:	f000 fb61 	bl	80026e0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 800201e:	2200      	movs	r2, #0
 8002020:	2102      	movs	r1, #2
 8002022:	2026      	movs	r0, #38	@ 0x26
 8002024:	f000 fa1b 	bl	800245e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002028:	2026      	movs	r0, #38	@ 0x26
 800202a:	f000 fa34 	bl	8002496 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800202e:	bf00      	nop
 8002030:	37b8      	adds	r7, #184	@ 0xb8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40004400 	.word	0x40004400
 800203c:	40023800 	.word	0x40023800
 8002040:	40020c00 	.word	0x40020c00

08002044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002048:	bf00      	nop
 800204a:	e7fd      	b.n	8002048 <NMI_Handler+0x4>

0800204c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002050:	bf00      	nop
 8002052:	e7fd      	b.n	8002050 <HardFault_Handler+0x4>

08002054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002058:	bf00      	nop
 800205a:	e7fd      	b.n	8002058 <MemManage_Handler+0x4>

0800205c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002060:	bf00      	nop
 8002062:	e7fd      	b.n	8002060 <BusFault_Handler+0x4>

08002064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002068:	bf00      	nop
 800206a:	e7fd      	b.n	8002068 <UsageFault_Handler+0x4>

0800206c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800209a:	f000 f8c1 	bl	8002220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BNO055_INT_Pin);
 80020a6:	2008      	movs	r0, #8
 80020a8:	f000 fce0 	bl	8002a6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80020ac:	bf00      	nop
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020b4:	4803      	ldr	r0, [pc, #12]	@ (80020c4 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80020b6:	f002 ffb1 	bl	800501c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 80020ba:	4803      	ldr	r0, [pc, #12]	@ (80020c8 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80020bc:	f002 ffae 	bl	800501c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	200000f4 	.word	0x200000f4
 80020c8:	20000270 	.word	0x20000270

080020cc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020d0:	4802      	ldr	r0, [pc, #8]	@ (80020dc <TIM1_CC_IRQHandler+0x10>)
 80020d2:	f002 ffa3 	bl	800501c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	200000f4 	.word	0x200000f4

080020e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020e4:	4802      	ldr	r0, [pc, #8]	@ (80020f0 <TIM2_IRQHandler+0x10>)
 80020e6:	f002 ff99 	bl	800501c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000140 	.word	0x20000140

080020f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020f8:	4802      	ldr	r0, [pc, #8]	@ (8002104 <TIM3_IRQHandler+0x10>)
 80020fa:	f002 ff8f 	bl	800501c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	2000018c 	.word	0x2000018c

08002108 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800210c:	4802      	ldr	r0, [pc, #8]	@ (8002118 <TIM4_IRQHandler+0x10>)
 800210e:	f002 ff85 	bl	800501c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	200001d8 	.word	0x200001d8

0800211c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002120:	4802      	ldr	r0, [pc, #8]	@ (800212c <USART2_IRQHandler+0x10>)
 8002122:	f004 fa6d 	bl	8006600 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	200002bc 	.word	0x200002bc

08002130 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002134:	4b06      	ldr	r3, [pc, #24]	@ (8002150 <SystemInit+0x20>)
 8002136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800213a:	4a05      	ldr	r2, [pc, #20]	@ (8002150 <SystemInit+0x20>)
 800213c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002140:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	e000ed00 	.word	0xe000ed00

08002154 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002154:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800218c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002158:	f7ff ffea 	bl	8002130 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800215c:	480c      	ldr	r0, [pc, #48]	@ (8002190 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800215e:	490d      	ldr	r1, [pc, #52]	@ (8002194 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002160:	4a0d      	ldr	r2, [pc, #52]	@ (8002198 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002164:	e002      	b.n	800216c <LoopCopyDataInit>

08002166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800216a:	3304      	adds	r3, #4

0800216c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800216c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800216e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002170:	d3f9      	bcc.n	8002166 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002172:	4a0a      	ldr	r2, [pc, #40]	@ (800219c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002174:	4c0a      	ldr	r4, [pc, #40]	@ (80021a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002178:	e001      	b.n	800217e <LoopFillZerobss>

0800217a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800217a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800217c:	3204      	adds	r2, #4

0800217e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800217e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002180:	d3fb      	bcc.n	800217a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002182:	f005 fd4d 	bl	8007c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002186:	f7fe ff95 	bl	80010b4 <main>
  bx  lr    
 800218a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800218c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002190:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002194:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8002198:	08007cdc 	.word	0x08007cdc
  ldr r2, =_sbss
 800219c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80021a0:	2000039c 	.word	0x2000039c

080021a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021a4:	e7fe      	b.n	80021a4 <ADC_IRQHandler>

080021a6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021aa:	2003      	movs	r0, #3
 80021ac:	f000 f94c 	bl	8002448 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021b0:	2001      	movs	r0, #1
 80021b2:	f000 f805 	bl	80021c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021b6:	f7ff fc9f 	bl	8001af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021c8:	4b12      	ldr	r3, [pc, #72]	@ (8002214 <HAL_InitTick+0x54>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4b12      	ldr	r3, [pc, #72]	@ (8002218 <HAL_InitTick+0x58>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	4619      	mov	r1, r3
 80021d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021da:	fbb2 f3f3 	udiv	r3, r2, r3
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 f967 	bl	80024b2 <HAL_SYSTICK_Config>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e00e      	b.n	800220c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b0f      	cmp	r3, #15
 80021f2:	d80a      	bhi.n	800220a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021f4:	2200      	movs	r2, #0
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	f04f 30ff 	mov.w	r0, #4294967295
 80021fc:	f000 f92f 	bl	800245e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002200:	4a06      	ldr	r2, [pc, #24]	@ (800221c <HAL_InitTick+0x5c>)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	e000      	b.n	800220c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
}
 800220c:	4618      	mov	r0, r3
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	2000001c 	.word	0x2000001c
 8002218:	20000024 	.word	0x20000024
 800221c:	20000020 	.word	0x20000020

08002220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002224:	4b06      	ldr	r3, [pc, #24]	@ (8002240 <HAL_IncTick+0x20>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	461a      	mov	r2, r3
 800222a:	4b06      	ldr	r3, [pc, #24]	@ (8002244 <HAL_IncTick+0x24>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4413      	add	r3, r2
 8002230:	4a04      	ldr	r2, [pc, #16]	@ (8002244 <HAL_IncTick+0x24>)
 8002232:	6013      	str	r3, [r2, #0]
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	20000024 	.word	0x20000024
 8002244:	20000398 	.word	0x20000398

08002248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return uwTick;
 800224c:	4b03      	ldr	r3, [pc, #12]	@ (800225c <HAL_GetTick+0x14>)
 800224e:	681b      	ldr	r3, [r3, #0]
}
 8002250:	4618      	mov	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	20000398 	.word	0x20000398

08002260 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002268:	f7ff ffee 	bl	8002248 <HAL_GetTick>
 800226c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002278:	d005      	beq.n	8002286 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800227a:	4b0a      	ldr	r3, [pc, #40]	@ (80022a4 <HAL_Delay+0x44>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4413      	add	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002286:	bf00      	nop
 8002288:	f7ff ffde 	bl	8002248 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	429a      	cmp	r2, r3
 8002296:	d8f7      	bhi.n	8002288 <HAL_Delay+0x28>
  {
  }
}
 8002298:	bf00      	nop
 800229a:	bf00      	nop
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000024 	.word	0x20000024

080022a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022b8:	4b0b      	ldr	r3, [pc, #44]	@ (80022e8 <__NVIC_SetPriorityGrouping+0x40>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022c4:	4013      	ands	r3, r2
 80022c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022d0:	4b06      	ldr	r3, [pc, #24]	@ (80022ec <__NVIC_SetPriorityGrouping+0x44>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022d6:	4a04      	ldr	r2, [pc, #16]	@ (80022e8 <__NVIC_SetPriorityGrouping+0x40>)
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	60d3      	str	r3, [r2, #12]
}
 80022dc:	bf00      	nop
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	e000ed00 	.word	0xe000ed00
 80022ec:	05fa0000 	.word	0x05fa0000

080022f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022f4:	4b04      	ldr	r3, [pc, #16]	@ (8002308 <__NVIC_GetPriorityGrouping+0x18>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	0a1b      	lsrs	r3, r3, #8
 80022fa:	f003 0307 	and.w	r3, r3, #7
}
 80022fe:	4618      	mov	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	2b00      	cmp	r3, #0
 800231c:	db0b      	blt.n	8002336 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	f003 021f 	and.w	r2, r3, #31
 8002324:	4907      	ldr	r1, [pc, #28]	@ (8002344 <__NVIC_EnableIRQ+0x38>)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	095b      	lsrs	r3, r3, #5
 800232c:	2001      	movs	r0, #1
 800232e:	fa00 f202 	lsl.w	r2, r0, r2
 8002332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	e000e100 	.word	0xe000e100

08002348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	6039      	str	r1, [r7, #0]
 8002352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002358:	2b00      	cmp	r3, #0
 800235a:	db0a      	blt.n	8002372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	b2da      	uxtb	r2, r3
 8002360:	490c      	ldr	r1, [pc, #48]	@ (8002394 <__NVIC_SetPriority+0x4c>)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	0112      	lsls	r2, r2, #4
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	440b      	add	r3, r1
 800236c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002370:	e00a      	b.n	8002388 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	b2da      	uxtb	r2, r3
 8002376:	4908      	ldr	r1, [pc, #32]	@ (8002398 <__NVIC_SetPriority+0x50>)
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	3b04      	subs	r3, #4
 8002380:	0112      	lsls	r2, r2, #4
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	440b      	add	r3, r1
 8002386:	761a      	strb	r2, [r3, #24]
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	e000e100 	.word	0xe000e100
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800239c:	b480      	push	{r7}
 800239e:	b089      	sub	sp, #36	@ 0x24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f1c3 0307 	rsb	r3, r3, #7
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	bf28      	it	cs
 80023ba:	2304      	movcs	r3, #4
 80023bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	3304      	adds	r3, #4
 80023c2:	2b06      	cmp	r3, #6
 80023c4:	d902      	bls.n	80023cc <NVIC_EncodePriority+0x30>
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3b03      	subs	r3, #3
 80023ca:	e000      	b.n	80023ce <NVIC_EncodePriority+0x32>
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d0:	f04f 32ff 	mov.w	r2, #4294967295
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43da      	mvns	r2, r3
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	401a      	ands	r2, r3
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e4:	f04f 31ff 	mov.w	r1, #4294967295
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	fa01 f303 	lsl.w	r3, r1, r3
 80023ee:	43d9      	mvns	r1, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f4:	4313      	orrs	r3, r2
         );
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3724      	adds	r7, #36	@ 0x24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
	...

08002404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3b01      	subs	r3, #1
 8002410:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002414:	d301      	bcc.n	800241a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002416:	2301      	movs	r3, #1
 8002418:	e00f      	b.n	800243a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800241a:	4a0a      	ldr	r2, [pc, #40]	@ (8002444 <SysTick_Config+0x40>)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3b01      	subs	r3, #1
 8002420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002422:	210f      	movs	r1, #15
 8002424:	f04f 30ff 	mov.w	r0, #4294967295
 8002428:	f7ff ff8e 	bl	8002348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800242c:	4b05      	ldr	r3, [pc, #20]	@ (8002444 <SysTick_Config+0x40>)
 800242e:	2200      	movs	r2, #0
 8002430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002432:	4b04      	ldr	r3, [pc, #16]	@ (8002444 <SysTick_Config+0x40>)
 8002434:	2207      	movs	r2, #7
 8002436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	e000e010 	.word	0xe000e010

08002448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff ff29 	bl	80022a8 <__NVIC_SetPriorityGrouping>
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800245e:	b580      	push	{r7, lr}
 8002460:	b086      	sub	sp, #24
 8002462:	af00      	add	r7, sp, #0
 8002464:	4603      	mov	r3, r0
 8002466:	60b9      	str	r1, [r7, #8]
 8002468:	607a      	str	r2, [r7, #4]
 800246a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002470:	f7ff ff3e 	bl	80022f0 <__NVIC_GetPriorityGrouping>
 8002474:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	68b9      	ldr	r1, [r7, #8]
 800247a:	6978      	ldr	r0, [r7, #20]
 800247c:	f7ff ff8e 	bl	800239c <NVIC_EncodePriority>
 8002480:	4602      	mov	r2, r0
 8002482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002486:	4611      	mov	r1, r2
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff ff5d 	bl	8002348 <__NVIC_SetPriority>
}
 800248e:	bf00      	nop
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	4603      	mov	r3, r0
 800249e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff ff31 	bl	800230c <__NVIC_EnableIRQ>
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff ffa2 	bl	8002404 <SysTick_Config>
 80024c0:	4603      	mov	r3, r0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80024d0:	f3bf 8f5f 	dmb	sy
}
 80024d4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80024d6:	4b07      	ldr	r3, [pc, #28]	@ (80024f4 <HAL_MPU_Disable+0x28>)
 80024d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024da:	4a06      	ldr	r2, [pc, #24]	@ (80024f4 <HAL_MPU_Disable+0x28>)
 80024dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024e0:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80024e2:	4b05      	ldr	r3, [pc, #20]	@ (80024f8 <HAL_MPU_Disable+0x2c>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	605a      	str	r2, [r3, #4]
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	e000ed00 	.word	0xe000ed00
 80024f8:	e000ed90 	.word	0xe000ed90

080024fc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002504:	4a0b      	ldr	r2, [pc, #44]	@ (8002534 <HAL_MPU_Enable+0x38>)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800250e:	4b0a      	ldr	r3, [pc, #40]	@ (8002538 <HAL_MPU_Enable+0x3c>)
 8002510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002512:	4a09      	ldr	r2, [pc, #36]	@ (8002538 <HAL_MPU_Enable+0x3c>)
 8002514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002518:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800251a:	f3bf 8f4f 	dsb	sy
}
 800251e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002520:	f3bf 8f6f 	isb	sy
}
 8002524:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	e000ed90 	.word	0xe000ed90
 8002538:	e000ed00 	.word	0xe000ed00

0800253c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	785a      	ldrb	r2, [r3, #1]
 8002548:	4b1b      	ldr	r3, [pc, #108]	@ (80025b8 <HAL_MPU_ConfigRegion+0x7c>)
 800254a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800254c:	4b1a      	ldr	r3, [pc, #104]	@ (80025b8 <HAL_MPU_ConfigRegion+0x7c>)
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	4a19      	ldr	r2, [pc, #100]	@ (80025b8 <HAL_MPU_ConfigRegion+0x7c>)
 8002552:	f023 0301 	bic.w	r3, r3, #1
 8002556:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002558:	4a17      	ldr	r2, [pc, #92]	@ (80025b8 <HAL_MPU_ConfigRegion+0x7c>)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	7b1b      	ldrb	r3, [r3, #12]
 8002564:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	7adb      	ldrb	r3, [r3, #11]
 800256a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800256c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	7a9b      	ldrb	r3, [r3, #10]
 8002572:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002574:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	7b5b      	ldrb	r3, [r3, #13]
 800257a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800257c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	7b9b      	ldrb	r3, [r3, #14]
 8002582:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002584:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	7bdb      	ldrb	r3, [r3, #15]
 800258a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800258c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	7a5b      	ldrb	r3, [r3, #9]
 8002592:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002594:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	7a1b      	ldrb	r3, [r3, #8]
 800259a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800259c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	7812      	ldrb	r2, [r2, #0]
 80025a2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025a4:	4a04      	ldr	r2, [pc, #16]	@ (80025b8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80025a6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025a8:	6113      	str	r3, [r2, #16]
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	e000ed90 	.word	0xe000ed90

080025bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025ca:	f7ff fe3d 	bl	8002248 <HAL_GetTick>
 80025ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d008      	beq.n	80025ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2280      	movs	r2, #128	@ 0x80
 80025e0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e052      	b.n	8002694 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0216 	bic.w	r2, r2, #22
 80025fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	695a      	ldr	r2, [r3, #20]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800260c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002612:	2b00      	cmp	r3, #0
 8002614:	d103      	bne.n	800261e <HAL_DMA_Abort+0x62>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800261a:	2b00      	cmp	r3, #0
 800261c:	d007      	beq.n	800262e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 0208 	bic.w	r2, r2, #8
 800262c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0201 	bic.w	r2, r2, #1
 800263c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800263e:	e013      	b.n	8002668 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002640:	f7ff fe02 	bl	8002248 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b05      	cmp	r3, #5
 800264c:	d90c      	bls.n	8002668 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2220      	movs	r2, #32
 8002652:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2203      	movs	r2, #3
 8002658:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e015      	b.n	8002694 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1e4      	bne.n	8002640 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267a:	223f      	movs	r2, #63	@ 0x3f
 800267c:	409a      	lsls	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d004      	beq.n	80026ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2280      	movs	r2, #128	@ 0x80
 80026b4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e00c      	b.n	80026d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2205      	movs	r2, #5
 80026be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0201 	bic.w	r2, r2, #1
 80026d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b089      	sub	sp, #36	@ 0x24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80026ea:	2300      	movs	r3, #0
 80026ec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80026fa:	2300      	movs	r3, #0
 80026fc:	61fb      	str	r3, [r7, #28]
 80026fe:	e175      	b.n	80029ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002700:	2201      	movs	r2, #1
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	4013      	ands	r3, r2
 8002712:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	429a      	cmp	r2, r3
 800271a:	f040 8164 	bne.w	80029e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	2b01      	cmp	r3, #1
 8002728:	d005      	beq.n	8002736 <HAL_GPIO_Init+0x56>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d130      	bne.n	8002798 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	2203      	movs	r2, #3
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43db      	mvns	r3, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4013      	ands	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4313      	orrs	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800276c:	2201      	movs	r2, #1
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f003 0201 	and.w	r2, r3, #1
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 0303 	and.w	r3, r3, #3
 80027a0:	2b03      	cmp	r3, #3
 80027a2:	d017      	beq.n	80027d4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	2203      	movs	r2, #3
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d123      	bne.n	8002828 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	08da      	lsrs	r2, r3, #3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3208      	adds	r2, #8
 80027e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	220f      	movs	r2, #15
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4313      	orrs	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	08da      	lsrs	r2, r3, #3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3208      	adds	r2, #8
 8002822:	69b9      	ldr	r1, [r7, #24]
 8002824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	2203      	movs	r2, #3
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 0203 	and.w	r2, r3, #3
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 80be 	beq.w	80029e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800286a:	4b66      	ldr	r3, [pc, #408]	@ (8002a04 <HAL_GPIO_Init+0x324>)
 800286c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286e:	4a65      	ldr	r2, [pc, #404]	@ (8002a04 <HAL_GPIO_Init+0x324>)
 8002870:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002874:	6453      	str	r3, [r2, #68]	@ 0x44
 8002876:	4b63      	ldr	r3, [pc, #396]	@ (8002a04 <HAL_GPIO_Init+0x324>)
 8002878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002882:	4a61      	ldr	r2, [pc, #388]	@ (8002a08 <HAL_GPIO_Init+0x328>)
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	089b      	lsrs	r3, r3, #2
 8002888:	3302      	adds	r3, #2
 800288a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800288e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	220f      	movs	r2, #15
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4013      	ands	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a58      	ldr	r2, [pc, #352]	@ (8002a0c <HAL_GPIO_Init+0x32c>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d037      	beq.n	800291e <HAL_GPIO_Init+0x23e>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a57      	ldr	r2, [pc, #348]	@ (8002a10 <HAL_GPIO_Init+0x330>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d031      	beq.n	800291a <HAL_GPIO_Init+0x23a>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a56      	ldr	r2, [pc, #344]	@ (8002a14 <HAL_GPIO_Init+0x334>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d02b      	beq.n	8002916 <HAL_GPIO_Init+0x236>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a55      	ldr	r2, [pc, #340]	@ (8002a18 <HAL_GPIO_Init+0x338>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d025      	beq.n	8002912 <HAL_GPIO_Init+0x232>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a54      	ldr	r2, [pc, #336]	@ (8002a1c <HAL_GPIO_Init+0x33c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d01f      	beq.n	800290e <HAL_GPIO_Init+0x22e>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a53      	ldr	r2, [pc, #332]	@ (8002a20 <HAL_GPIO_Init+0x340>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d019      	beq.n	800290a <HAL_GPIO_Init+0x22a>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a52      	ldr	r2, [pc, #328]	@ (8002a24 <HAL_GPIO_Init+0x344>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d013      	beq.n	8002906 <HAL_GPIO_Init+0x226>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a51      	ldr	r2, [pc, #324]	@ (8002a28 <HAL_GPIO_Init+0x348>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d00d      	beq.n	8002902 <HAL_GPIO_Init+0x222>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a50      	ldr	r2, [pc, #320]	@ (8002a2c <HAL_GPIO_Init+0x34c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d007      	beq.n	80028fe <HAL_GPIO_Init+0x21e>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a4f      	ldr	r2, [pc, #316]	@ (8002a30 <HAL_GPIO_Init+0x350>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d101      	bne.n	80028fa <HAL_GPIO_Init+0x21a>
 80028f6:	2309      	movs	r3, #9
 80028f8:	e012      	b.n	8002920 <HAL_GPIO_Init+0x240>
 80028fa:	230a      	movs	r3, #10
 80028fc:	e010      	b.n	8002920 <HAL_GPIO_Init+0x240>
 80028fe:	2308      	movs	r3, #8
 8002900:	e00e      	b.n	8002920 <HAL_GPIO_Init+0x240>
 8002902:	2307      	movs	r3, #7
 8002904:	e00c      	b.n	8002920 <HAL_GPIO_Init+0x240>
 8002906:	2306      	movs	r3, #6
 8002908:	e00a      	b.n	8002920 <HAL_GPIO_Init+0x240>
 800290a:	2305      	movs	r3, #5
 800290c:	e008      	b.n	8002920 <HAL_GPIO_Init+0x240>
 800290e:	2304      	movs	r3, #4
 8002910:	e006      	b.n	8002920 <HAL_GPIO_Init+0x240>
 8002912:	2303      	movs	r3, #3
 8002914:	e004      	b.n	8002920 <HAL_GPIO_Init+0x240>
 8002916:	2302      	movs	r3, #2
 8002918:	e002      	b.n	8002920 <HAL_GPIO_Init+0x240>
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <HAL_GPIO_Init+0x240>
 800291e:	2300      	movs	r3, #0
 8002920:	69fa      	ldr	r2, [r7, #28]
 8002922:	f002 0203 	and.w	r2, r2, #3
 8002926:	0092      	lsls	r2, r2, #2
 8002928:	4093      	lsls	r3, r2
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4313      	orrs	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002930:	4935      	ldr	r1, [pc, #212]	@ (8002a08 <HAL_GPIO_Init+0x328>)
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	089b      	lsrs	r3, r3, #2
 8002936:	3302      	adds	r3, #2
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800293e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a34 <HAL_GPIO_Init+0x354>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	43db      	mvns	r3, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4013      	ands	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002962:	4a34      	ldr	r2, [pc, #208]	@ (8002a34 <HAL_GPIO_Init+0x354>)
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002968:	4b32      	ldr	r3, [pc, #200]	@ (8002a34 <HAL_GPIO_Init+0x354>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800298c:	4a29      	ldr	r2, [pc, #164]	@ (8002a34 <HAL_GPIO_Init+0x354>)
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002992:	4b28      	ldr	r3, [pc, #160]	@ (8002a34 <HAL_GPIO_Init+0x354>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	43db      	mvns	r3, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4013      	ands	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029b6:	4a1f      	ldr	r2, [pc, #124]	@ (8002a34 <HAL_GPIO_Init+0x354>)
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002a34 <HAL_GPIO_Init+0x354>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029e0:	4a14      	ldr	r2, [pc, #80]	@ (8002a34 <HAL_GPIO_Init+0x354>)
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	3301      	adds	r3, #1
 80029ea:	61fb      	str	r3, [r7, #28]
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	2b0f      	cmp	r3, #15
 80029f0:	f67f ae86 	bls.w	8002700 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80029f4:	bf00      	nop
 80029f6:	bf00      	nop
 80029f8:	3724      	adds	r7, #36	@ 0x24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	40023800 	.word	0x40023800
 8002a08:	40013800 	.word	0x40013800
 8002a0c:	40020000 	.word	0x40020000
 8002a10:	40020400 	.word	0x40020400
 8002a14:	40020800 	.word	0x40020800
 8002a18:	40020c00 	.word	0x40020c00
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	40021400 	.word	0x40021400
 8002a24:	40021800 	.word	0x40021800
 8002a28:	40021c00 	.word	0x40021c00
 8002a2c:	40022000 	.word	0x40022000
 8002a30:	40022400 	.word	0x40022400
 8002a34:	40013c00 	.word	0x40013c00

08002a38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	807b      	strh	r3, [r7, #2]
 8002a44:	4613      	mov	r3, r2
 8002a46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a48:	787b      	ldrb	r3, [r7, #1]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a4e:	887a      	ldrh	r2, [r7, #2]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a54:	e003      	b.n	8002a5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a56:	887b      	ldrh	r3, [r7, #2]
 8002a58:	041a      	lsls	r2, r3, #16
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	619a      	str	r2, [r3, #24]
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
	...

08002a6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4603      	mov	r3, r0
 8002a74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a76:	4b08      	ldr	r3, [pc, #32]	@ (8002a98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a78:	695a      	ldr	r2, [r3, #20]
 8002a7a:	88fb      	ldrh	r3, [r7, #6]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d006      	beq.n	8002a90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a82:	4a05      	ldr	r2, [pc, #20]	@ (8002a98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a84:	88fb      	ldrh	r3, [r7, #6]
 8002a86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a88:	88fb      	ldrh	r3, [r7, #6]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 f806 	bl	8002a9c <HAL_GPIO_EXTI_Callback>
  }
}
 8002a90:	bf00      	nop
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40013c00 	.word	0x40013c00

08002a9c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
	...

08002ab4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e08b      	b.n	8002bde <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d106      	bne.n	8002ae0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff f830 	bl	8001b40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2224      	movs	r2, #36	@ 0x24
 8002ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0201 	bic.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d107      	bne.n	8002b2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	e006      	b.n	8002b3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002b3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d108      	bne.n	8002b56 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b52:	605a      	str	r2, [r3, #4]
 8002b54:	e007      	b.n	8002b66 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6859      	ldr	r1, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	4b1d      	ldr	r3, [pc, #116]	@ (8002be8 <HAL_I2C_Init+0x134>)
 8002b72:	430b      	orrs	r3, r1
 8002b74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691a      	ldr	r2, [r3, #16]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69d9      	ldr	r1, [r3, #28]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a1a      	ldr	r2, [r3, #32]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0201 	orr.w	r2, r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2220      	movs	r2, #32
 8002bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	02008000 	.word	0x02008000

08002bec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b088      	sub	sp, #32
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	607a      	str	r2, [r7, #4]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	817b      	strh	r3, [r7, #10]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b20      	cmp	r3, #32
 8002c0a:	f040 80fd 	bne.w	8002e08 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <HAL_I2C_Master_Transmit+0x30>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e0f6      	b.n	8002e0a <HAL_I2C_Master_Transmit+0x21e>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c24:	f7ff fb10 	bl	8002248 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	2319      	movs	r3, #25
 8002c30:	2201      	movs	r2, #1
 8002c32:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 fa82 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e0e1      	b.n	8002e0a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2221      	movs	r2, #33	@ 0x21
 8002c4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2210      	movs	r2, #16
 8002c52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	893a      	ldrh	r2, [r7, #8]
 8002c66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	2bff      	cmp	r3, #255	@ 0xff
 8002c76:	d906      	bls.n	8002c86 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	22ff      	movs	r2, #255	@ 0xff
 8002c7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002c7e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	e007      	b.n	8002c96 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002c90:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c94:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d024      	beq.n	8002ce8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca2:	781a      	ldrb	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	8979      	ldrh	r1, [r7, #10]
 8002cda:	4b4e      	ldr	r3, [pc, #312]	@ (8002e14 <HAL_I2C_Master_Transmit+0x228>)
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 fbf1 	bl	80034c8 <I2C_TransferConfig>
 8002ce6:	e066      	b.n	8002db6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	8979      	ldrh	r1, [r7, #10]
 8002cf0:	4b48      	ldr	r3, [pc, #288]	@ (8002e14 <HAL_I2C_Master_Transmit+0x228>)
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 fbe6 	bl	80034c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002cfc:	e05b      	b.n	8002db6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	6a39      	ldr	r1, [r7, #32]
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 fa75 	bl	80031f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e07b      	b.n	8002e0a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d16:	781a      	ldrb	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d22:	1c5a      	adds	r2, r3, #1
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d034      	beq.n	8002db6 <HAL_I2C_Master_Transmit+0x1ca>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d130      	bne.n	8002db6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	2180      	movs	r1, #128	@ 0x80
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 f9ee 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e04d      	b.n	8002e0a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	2bff      	cmp	r3, #255	@ 0xff
 8002d76:	d90e      	bls.n	8002d96 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	22ff      	movs	r2, #255	@ 0xff
 8002d7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	8979      	ldrh	r1, [r7, #10]
 8002d86:	2300      	movs	r3, #0
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 fb9a 	bl	80034c8 <I2C_TransferConfig>
 8002d94:	e00f      	b.n	8002db6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	8979      	ldrh	r1, [r7, #10]
 8002da8:	2300      	movs	r3, #0
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 fb89 	bl	80034c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d19e      	bne.n	8002cfe <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	6a39      	ldr	r1, [r7, #32]
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 fa5b 	bl	8003280 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e01a      	b.n	8002e0a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6859      	ldr	r1, [r3, #4]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	4b0c      	ldr	r3, [pc, #48]	@ (8002e18 <HAL_I2C_Master_Transmit+0x22c>)
 8002de8:	400b      	ands	r3, r1
 8002dea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2220      	movs	r2, #32
 8002df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	e000      	b.n	8002e0a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002e08:	2302      	movs	r3, #2
  }
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	80002000 	.word	0x80002000
 8002e18:	fe00e800 	.word	0xfe00e800

08002e1c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b088      	sub	sp, #32
 8002e20:	af02      	add	r7, sp, #8
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	4608      	mov	r0, r1
 8002e26:	4611      	mov	r1, r2
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	817b      	strh	r3, [r7, #10]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	813b      	strh	r3, [r7, #8]
 8002e32:	4613      	mov	r3, r2
 8002e34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b20      	cmp	r3, #32
 8002e40:	f040 80fd 	bne.w	800303e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d002      	beq.n	8002e50 <HAL_I2C_Mem_Read+0x34>
 8002e4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d105      	bne.n	8002e5c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e56:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e0f1      	b.n	8003040 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_I2C_Mem_Read+0x4e>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e0ea      	b.n	8003040 <HAL_I2C_Mem_Read+0x224>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e72:	f7ff f9e9 	bl	8002248 <HAL_GetTick>
 8002e76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	2319      	movs	r3, #25
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 f95b 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e0d5      	b.n	8003040 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2222      	movs	r2, #34	@ 0x22
 8002e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2240      	movs	r2, #64	@ 0x40
 8002ea0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6a3a      	ldr	r2, [r7, #32]
 8002eae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002eb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ebc:	88f8      	ldrh	r0, [r7, #6]
 8002ebe:	893a      	ldrh	r2, [r7, #8]
 8002ec0:	8979      	ldrh	r1, [r7, #10]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	9301      	str	r3, [sp, #4]
 8002ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	4603      	mov	r3, r0
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 f8bf 	bl	8003050 <I2C_RequestMemoryRead>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e0ad      	b.n	8003040 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	2bff      	cmp	r3, #255	@ 0xff
 8002eec:	d90e      	bls.n	8002f0c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	8979      	ldrh	r1, [r7, #10]
 8002efc:	4b52      	ldr	r3, [pc, #328]	@ (8003048 <HAL_I2C_Mem_Read+0x22c>)
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 fadf 	bl	80034c8 <I2C_TransferConfig>
 8002f0a:	e00f      	b.n	8002f2c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	8979      	ldrh	r1, [r7, #10]
 8002f1e:	4b4a      	ldr	r3, [pc, #296]	@ (8003048 <HAL_I2C_Mem_Read+0x22c>)
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 face 	bl	80034c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f32:	2200      	movs	r2, #0
 8002f34:	2104      	movs	r1, #4
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 f902 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e07c      	b.n	8003040 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f58:	1c5a      	adds	r2, r3, #1
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d034      	beq.n	8002fec <HAL_I2C_Mem_Read+0x1d0>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d130      	bne.n	8002fec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f90:	2200      	movs	r2, #0
 8002f92:	2180      	movs	r1, #128	@ 0x80
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f000 f8d3 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e04d      	b.n	8003040 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	2bff      	cmp	r3, #255	@ 0xff
 8002fac:	d90e      	bls.n	8002fcc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	8979      	ldrh	r1, [r7, #10]
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f000 fa7f 	bl	80034c8 <I2C_TransferConfig>
 8002fca:	e00f      	b.n	8002fec <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	8979      	ldrh	r1, [r7, #10]
 8002fde:	2300      	movs	r3, #0
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 fa6e 	bl	80034c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d19a      	bne.n	8002f2c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 f940 	bl	8003280 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e01a      	b.n	8003040 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2220      	movs	r2, #32
 8003010:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6859      	ldr	r1, [r3, #4]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	4b0b      	ldr	r3, [pc, #44]	@ (800304c <HAL_I2C_Mem_Read+0x230>)
 800301e:	400b      	ands	r3, r1
 8003020:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2220      	movs	r2, #32
 8003026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	e000      	b.n	8003040 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800303e:	2302      	movs	r3, #2
  }
}
 8003040:	4618      	mov	r0, r3
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	80002400 	.word	0x80002400
 800304c:	fe00e800 	.word	0xfe00e800

08003050 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af02      	add	r7, sp, #8
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	4608      	mov	r0, r1
 800305a:	4611      	mov	r1, r2
 800305c:	461a      	mov	r2, r3
 800305e:	4603      	mov	r3, r0
 8003060:	817b      	strh	r3, [r7, #10]
 8003062:	460b      	mov	r3, r1
 8003064:	813b      	strh	r3, [r7, #8]
 8003066:	4613      	mov	r3, r2
 8003068:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800306a:	88fb      	ldrh	r3, [r7, #6]
 800306c:	b2da      	uxtb	r2, r3
 800306e:	8979      	ldrh	r1, [r7, #10]
 8003070:	4b20      	ldr	r3, [pc, #128]	@ (80030f4 <I2C_RequestMemoryRead+0xa4>)
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	2300      	movs	r3, #0
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 fa26 	bl	80034c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800307c:	69fa      	ldr	r2, [r7, #28]
 800307e:	69b9      	ldr	r1, [r7, #24]
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f000 f8b6 	bl	80031f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e02c      	b.n	80030ea <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003090:	88fb      	ldrh	r3, [r7, #6]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d105      	bne.n	80030a2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003096:	893b      	ldrh	r3, [r7, #8]
 8003098:	b2da      	uxtb	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	629a      	str	r2, [r3, #40]	@ 0x28
 80030a0:	e015      	b.n	80030ce <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80030a2:	893b      	ldrh	r3, [r7, #8]
 80030a4:	0a1b      	lsrs	r3, r3, #8
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030b0:	69fa      	ldr	r2, [r7, #28]
 80030b2:	69b9      	ldr	r1, [r7, #24]
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 f89c 	bl	80031f2 <I2C_WaitOnTXISFlagUntilTimeout>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e012      	b.n	80030ea <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030c4:	893b      	ldrh	r3, [r7, #8]
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	2200      	movs	r2, #0
 80030d6:	2140      	movs	r1, #64	@ 0x40
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 f831 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e000      	b.n	80030ea <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	80002000 	.word	0x80002000

080030f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b02      	cmp	r3, #2
 800310c:	d103      	bne.n	8003116 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2200      	movs	r2, #0
 8003114:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b01      	cmp	r3, #1
 8003122:	d007      	beq.n	8003134 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	699a      	ldr	r2, [r3, #24]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0201 	orr.w	r2, r2, #1
 8003132:	619a      	str	r2, [r3, #24]
  }
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	603b      	str	r3, [r7, #0]
 800314c:	4613      	mov	r3, r2
 800314e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003150:	e03b      	b.n	80031ca <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	6839      	ldr	r1, [r7, #0]
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 f8d6 	bl	8003308 <I2C_IsErrorOccurred>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e041      	b.n	80031ea <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316c:	d02d      	beq.n	80031ca <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800316e:	f7ff f86b 	bl	8002248 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	429a      	cmp	r2, r3
 800317c:	d302      	bcc.n	8003184 <I2C_WaitOnFlagUntilTimeout+0x44>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d122      	bne.n	80031ca <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	699a      	ldr	r2, [r3, #24]
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	4013      	ands	r3, r2
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	429a      	cmp	r2, r3
 8003192:	bf0c      	ite	eq
 8003194:	2301      	moveq	r3, #1
 8003196:	2300      	movne	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	461a      	mov	r2, r3
 800319c:	79fb      	ldrb	r3, [r7, #7]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d113      	bne.n	80031ca <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a6:	f043 0220 	orr.w	r2, r3, #32
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2220      	movs	r2, #32
 80031b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e00f      	b.n	80031ea <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	699a      	ldr	r2, [r3, #24]
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	4013      	ands	r3, r2
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	bf0c      	ite	eq
 80031da:	2301      	moveq	r3, #1
 80031dc:	2300      	movne	r3, #0
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	461a      	mov	r2, r3
 80031e2:	79fb      	ldrb	r3, [r7, #7]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d0b4      	beq.n	8003152 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b084      	sub	sp, #16
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	60f8      	str	r0, [r7, #12]
 80031fa:	60b9      	str	r1, [r7, #8]
 80031fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031fe:	e033      	b.n	8003268 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	68b9      	ldr	r1, [r7, #8]
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f000 f87f 	bl	8003308 <I2C_IsErrorOccurred>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e031      	b.n	8003278 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321a:	d025      	beq.n	8003268 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800321c:	f7ff f814 	bl	8002248 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	429a      	cmp	r2, r3
 800322a:	d302      	bcc.n	8003232 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d11a      	bne.n	8003268 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b02      	cmp	r3, #2
 800323e:	d013      	beq.n	8003268 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003244:	f043 0220 	orr.w	r2, r3, #32
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2220      	movs	r2, #32
 8003250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e007      	b.n	8003278 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b02      	cmp	r3, #2
 8003274:	d1c4      	bne.n	8003200 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800328c:	e02f      	b.n	80032ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	68b9      	ldr	r1, [r7, #8]
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 f838 	bl	8003308 <I2C_IsErrorOccurred>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e02d      	b.n	80032fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a2:	f7fe ffd1 	bl	8002248 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d302      	bcc.n	80032b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d11a      	bne.n	80032ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	f003 0320 	and.w	r3, r3, #32
 80032c2:	2b20      	cmp	r3, #32
 80032c4:	d013      	beq.n	80032ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ca:	f043 0220 	orr.w	r2, r3, #32
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2220      	movs	r2, #32
 80032d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e007      	b.n	80032fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	f003 0320 	and.w	r3, r3, #32
 80032f8:	2b20      	cmp	r3, #32
 80032fa:	d1c8      	bne.n	800328e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b08a      	sub	sp, #40	@ 0x28
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003314:	2300      	movs	r3, #0
 8003316:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003322:	2300      	movs	r3, #0
 8003324:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	f003 0310 	and.w	r3, r3, #16
 8003330:	2b00      	cmp	r3, #0
 8003332:	d068      	beq.n	8003406 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2210      	movs	r2, #16
 800333a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800333c:	e049      	b.n	80033d2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003344:	d045      	beq.n	80033d2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003346:	f7fe ff7f 	bl	8002248 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	429a      	cmp	r2, r3
 8003354:	d302      	bcc.n	800335c <I2C_IsErrorOccurred+0x54>
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d13a      	bne.n	80033d2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003366:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800336e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800337a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800337e:	d121      	bne.n	80033c4 <I2C_IsErrorOccurred+0xbc>
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003386:	d01d      	beq.n	80033c4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003388:	7cfb      	ldrb	r3, [r7, #19]
 800338a:	2b20      	cmp	r3, #32
 800338c:	d01a      	beq.n	80033c4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800339c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800339e:	f7fe ff53 	bl	8002248 <HAL_GetTick>
 80033a2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033a4:	e00e      	b.n	80033c4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80033a6:	f7fe ff4f 	bl	8002248 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b19      	cmp	r3, #25
 80033b2:	d907      	bls.n	80033c4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	f043 0320 	orr.w	r3, r3, #32
 80033ba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80033c2:	e006      	b.n	80033d2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	f003 0320 	and.w	r3, r3, #32
 80033ce:	2b20      	cmp	r3, #32
 80033d0:	d1e9      	bne.n	80033a6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	f003 0320 	and.w	r3, r3, #32
 80033dc:	2b20      	cmp	r3, #32
 80033de:	d003      	beq.n	80033e8 <I2C_IsErrorOccurred+0xe0>
 80033e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0aa      	beq.n	800333e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80033e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d103      	bne.n	80033f8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2220      	movs	r2, #32
 80033f6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80033f8:	6a3b      	ldr	r3, [r7, #32]
 80033fa:	f043 0304 	orr.w	r3, r3, #4
 80033fe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00b      	beq.n	8003430 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	f043 0301 	orr.w	r3, r3, #1
 800341e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003428:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00b      	beq.n	8003452 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	f043 0308 	orr.w	r3, r3, #8
 8003440:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800344a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00b      	beq.n	8003474 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	f043 0302 	orr.w	r3, r3, #2
 8003462:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800346c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003474:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003478:	2b00      	cmp	r3, #0
 800347a:	d01c      	beq.n	80034b6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f7ff fe3b 	bl	80030f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6859      	ldr	r1, [r3, #4]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	4b0d      	ldr	r3, [pc, #52]	@ (80034c4 <I2C_IsErrorOccurred+0x1bc>)
 800348e:	400b      	ands	r3, r1
 8003490:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003496:	6a3b      	ldr	r3, [r7, #32]
 8003498:	431a      	orrs	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2220      	movs	r2, #32
 80034a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80034b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3728      	adds	r7, #40	@ 0x28
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	fe00e800 	.word	0xfe00e800

080034c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b087      	sub	sp, #28
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	607b      	str	r3, [r7, #4]
 80034d2:	460b      	mov	r3, r1
 80034d4:	817b      	strh	r3, [r7, #10]
 80034d6:	4613      	mov	r3, r2
 80034d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034da:	897b      	ldrh	r3, [r7, #10]
 80034dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80034e0:	7a7b      	ldrb	r3, [r7, #9]
 80034e2:	041b      	lsls	r3, r3, #16
 80034e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034e8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80034f6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	0d5b      	lsrs	r3, r3, #21
 8003502:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003506:	4b08      	ldr	r3, [pc, #32]	@ (8003528 <I2C_TransferConfig+0x60>)
 8003508:	430b      	orrs	r3, r1
 800350a:	43db      	mvns	r3, r3
 800350c:	ea02 0103 	and.w	r1, r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	430a      	orrs	r2, r1
 8003518:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800351a:	bf00      	nop
 800351c:	371c      	adds	r7, #28
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	03ff63ff 	.word	0x03ff63ff

0800352c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b20      	cmp	r3, #32
 8003540:	d138      	bne.n	80035b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003548:	2b01      	cmp	r3, #1
 800354a:	d101      	bne.n	8003550 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800354c:	2302      	movs	r3, #2
 800354e:	e032      	b.n	80035b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2224      	movs	r2, #36	@ 0x24
 800355c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0201 	bic.w	r2, r2, #1
 800356e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800357e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6819      	ldr	r1, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0201 	orr.w	r2, r2, #1
 800359e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035b0:	2300      	movs	r3, #0
 80035b2:	e000      	b.n	80035b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035b4:	2302      	movs	r3, #2
  }
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b085      	sub	sp, #20
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
 80035ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b20      	cmp	r3, #32
 80035d6:	d139      	bne.n	800364c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e033      	b.n	800364e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2224      	movs	r2, #36	@ 0x24
 80035f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0201 	bic.w	r2, r2, #1
 8003604:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003614:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	021b      	lsls	r3, r3, #8
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	4313      	orrs	r3, r2
 800361e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0201 	orr.w	r2, r2, #1
 8003636:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003648:	2300      	movs	r3, #0
 800364a:	e000      	b.n	800364e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800364c:	2302      	movs	r3, #2
  }
}
 800364e:	4618      	mov	r0, r3
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
	...

0800365c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003662:	2300      	movs	r3, #0
 8003664:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003666:	4b23      	ldr	r3, [pc, #140]	@ (80036f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366a:	4a22      	ldr	r2, [pc, #136]	@ (80036f4 <HAL_PWREx_EnableOverDrive+0x98>)
 800366c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003670:	6413      	str	r3, [r2, #64]	@ 0x40
 8003672:	4b20      	ldr	r3, [pc, #128]	@ (80036f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003676:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800367a:	603b      	str	r3, [r7, #0]
 800367c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800367e:	4b1e      	ldr	r3, [pc, #120]	@ (80036f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a1d      	ldr	r2, [pc, #116]	@ (80036f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003684:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003688:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800368a:	f7fe fddd 	bl	8002248 <HAL_GetTick>
 800368e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003690:	e009      	b.n	80036a6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003692:	f7fe fdd9 	bl	8002248 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80036a0:	d901      	bls.n	80036a6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e022      	b.n	80036ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036a6:	4b14      	ldr	r3, [pc, #80]	@ (80036f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036b2:	d1ee      	bne.n	8003692 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80036b4:	4b10      	ldr	r3, [pc, #64]	@ (80036f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a0f      	ldr	r2, [pc, #60]	@ (80036f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036be:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036c0:	f7fe fdc2 	bl	8002248 <HAL_GetTick>
 80036c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036c6:	e009      	b.n	80036dc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036c8:	f7fe fdbe 	bl	8002248 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80036d6:	d901      	bls.n	80036dc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e007      	b.n	80036ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036dc:	4b06      	ldr	r3, [pc, #24]	@ (80036f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80036e8:	d1ee      	bne.n	80036c8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40023800 	.word	0x40023800
 80036f8:	40007000 	.word	0x40007000

080036fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003704:	2300      	movs	r3, #0
 8003706:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e29b      	b.n	8003c4a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 8087 	beq.w	800382e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003720:	4b96      	ldr	r3, [pc, #600]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f003 030c 	and.w	r3, r3, #12
 8003728:	2b04      	cmp	r3, #4
 800372a:	d00c      	beq.n	8003746 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800372c:	4b93      	ldr	r3, [pc, #588]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 030c 	and.w	r3, r3, #12
 8003734:	2b08      	cmp	r3, #8
 8003736:	d112      	bne.n	800375e <HAL_RCC_OscConfig+0x62>
 8003738:	4b90      	ldr	r3, [pc, #576]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003740:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003744:	d10b      	bne.n	800375e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003746:	4b8d      	ldr	r3, [pc, #564]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d06c      	beq.n	800382c <HAL_RCC_OscConfig+0x130>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d168      	bne.n	800382c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e275      	b.n	8003c4a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003766:	d106      	bne.n	8003776 <HAL_RCC_OscConfig+0x7a>
 8003768:	4b84      	ldr	r3, [pc, #528]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a83      	ldr	r2, [pc, #524]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 800376e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003772:	6013      	str	r3, [r2, #0]
 8003774:	e02e      	b.n	80037d4 <HAL_RCC_OscConfig+0xd8>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10c      	bne.n	8003798 <HAL_RCC_OscConfig+0x9c>
 800377e:	4b7f      	ldr	r3, [pc, #508]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a7e      	ldr	r2, [pc, #504]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 8003784:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003788:	6013      	str	r3, [r2, #0]
 800378a:	4b7c      	ldr	r3, [pc, #496]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a7b      	ldr	r2, [pc, #492]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 8003790:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	e01d      	b.n	80037d4 <HAL_RCC_OscConfig+0xd8>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037a0:	d10c      	bne.n	80037bc <HAL_RCC_OscConfig+0xc0>
 80037a2:	4b76      	ldr	r3, [pc, #472]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a75      	ldr	r2, [pc, #468]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 80037a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	4b73      	ldr	r3, [pc, #460]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a72      	ldr	r2, [pc, #456]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 80037b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	e00b      	b.n	80037d4 <HAL_RCC_OscConfig+0xd8>
 80037bc:	4b6f      	ldr	r3, [pc, #444]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a6e      	ldr	r2, [pc, #440]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 80037c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037c6:	6013      	str	r3, [r2, #0]
 80037c8:	4b6c      	ldr	r3, [pc, #432]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a6b      	ldr	r2, [pc, #428]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 80037ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d013      	beq.n	8003804 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037dc:	f7fe fd34 	bl	8002248 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037e4:	f7fe fd30 	bl	8002248 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b64      	cmp	r3, #100	@ 0x64
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e229      	b.n	8003c4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f6:	4b61      	ldr	r3, [pc, #388]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d0f0      	beq.n	80037e4 <HAL_RCC_OscConfig+0xe8>
 8003802:	e014      	b.n	800382e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003804:	f7fe fd20 	bl	8002248 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800380c:	f7fe fd1c 	bl	8002248 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b64      	cmp	r3, #100	@ 0x64
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e215      	b.n	8003c4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800381e:	4b57      	ldr	r3, [pc, #348]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1f0      	bne.n	800380c <HAL_RCC_OscConfig+0x110>
 800382a:	e000      	b.n	800382e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800382c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d069      	beq.n	800390e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800383a:	4b50      	ldr	r3, [pc, #320]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 030c 	and.w	r3, r3, #12
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00b      	beq.n	800385e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003846:	4b4d      	ldr	r3, [pc, #308]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 030c 	and.w	r3, r3, #12
 800384e:	2b08      	cmp	r3, #8
 8003850:	d11c      	bne.n	800388c <HAL_RCC_OscConfig+0x190>
 8003852:	4b4a      	ldr	r3, [pc, #296]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d116      	bne.n	800388c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800385e:	4b47      	ldr	r3, [pc, #284]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d005      	beq.n	8003876 <HAL_RCC_OscConfig+0x17a>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d001      	beq.n	8003876 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e1e9      	b.n	8003c4a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003876:	4b41      	ldr	r3, [pc, #260]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	493d      	ldr	r1, [pc, #244]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 8003886:	4313      	orrs	r3, r2
 8003888:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800388a:	e040      	b.n	800390e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d023      	beq.n	80038dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003894:	4b39      	ldr	r3, [pc, #228]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a38      	ldr	r2, [pc, #224]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 800389a:	f043 0301 	orr.w	r3, r3, #1
 800389e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a0:	f7fe fcd2 	bl	8002248 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038a8:	f7fe fcce 	bl	8002248 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e1c7      	b.n	8003c4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ba:	4b30      	ldr	r3, [pc, #192]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0f0      	beq.n	80038a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c6:	4b2d      	ldr	r3, [pc, #180]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	4929      	ldr	r1, [pc, #164]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	600b      	str	r3, [r1, #0]
 80038da:	e018      	b.n	800390e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038dc:	4b27      	ldr	r3, [pc, #156]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a26      	ldr	r2, [pc, #152]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 80038e2:	f023 0301 	bic.w	r3, r3, #1
 80038e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e8:	f7fe fcae 	bl	8002248 <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038f0:	f7fe fcaa 	bl	8002248 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e1a3      	b.n	8003c4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003902:	4b1e      	ldr	r3, [pc, #120]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1f0      	bne.n	80038f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0308 	and.w	r3, r3, #8
 8003916:	2b00      	cmp	r3, #0
 8003918:	d038      	beq.n	800398c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d019      	beq.n	8003956 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003922:	4b16      	ldr	r3, [pc, #88]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 8003924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003926:	4a15      	ldr	r2, [pc, #84]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800392e:	f7fe fc8b 	bl	8002248 <HAL_GetTick>
 8003932:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003934:	e008      	b.n	8003948 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003936:	f7fe fc87 	bl	8002248 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e180      	b.n	8003c4a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003948:	4b0c      	ldr	r3, [pc, #48]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 800394a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0f0      	beq.n	8003936 <HAL_RCC_OscConfig+0x23a>
 8003954:	e01a      	b.n	800398c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003956:	4b09      	ldr	r3, [pc, #36]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 8003958:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800395a:	4a08      	ldr	r2, [pc, #32]	@ (800397c <HAL_RCC_OscConfig+0x280>)
 800395c:	f023 0301 	bic.w	r3, r3, #1
 8003960:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003962:	f7fe fc71 	bl	8002248 <HAL_GetTick>
 8003966:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003968:	e00a      	b.n	8003980 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800396a:	f7fe fc6d 	bl	8002248 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d903      	bls.n	8003980 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e166      	b.n	8003c4a <HAL_RCC_OscConfig+0x54e>
 800397c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003980:	4b92      	ldr	r3, [pc, #584]	@ (8003bcc <HAL_RCC_OscConfig+0x4d0>)
 8003982:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1ee      	bne.n	800396a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 80a4 	beq.w	8003ae2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800399a:	4b8c      	ldr	r3, [pc, #560]	@ (8003bcc <HAL_RCC_OscConfig+0x4d0>)
 800399c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10d      	bne.n	80039c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80039a6:	4b89      	ldr	r3, [pc, #548]	@ (8003bcc <HAL_RCC_OscConfig+0x4d0>)
 80039a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039aa:	4a88      	ldr	r2, [pc, #544]	@ (8003bcc <HAL_RCC_OscConfig+0x4d0>)
 80039ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80039b2:	4b86      	ldr	r3, [pc, #536]	@ (8003bcc <HAL_RCC_OscConfig+0x4d0>)
 80039b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ba:	60bb      	str	r3, [r7, #8]
 80039bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039be:	2301      	movs	r3, #1
 80039c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039c2:	4b83      	ldr	r3, [pc, #524]	@ (8003bd0 <HAL_RCC_OscConfig+0x4d4>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d118      	bne.n	8003a00 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80039ce:	4b80      	ldr	r3, [pc, #512]	@ (8003bd0 <HAL_RCC_OscConfig+0x4d4>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a7f      	ldr	r2, [pc, #508]	@ (8003bd0 <HAL_RCC_OscConfig+0x4d4>)
 80039d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039da:	f7fe fc35 	bl	8002248 <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e2:	f7fe fc31 	bl	8002248 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b64      	cmp	r3, #100	@ 0x64
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e12a      	b.n	8003c4a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039f4:	4b76      	ldr	r3, [pc, #472]	@ (8003bd0 <HAL_RCC_OscConfig+0x4d4>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0f0      	beq.n	80039e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d106      	bne.n	8003a16 <HAL_RCC_OscConfig+0x31a>
 8003a08:	4b70      	ldr	r3, [pc, #448]	@ (8003bcc <HAL_RCC_OscConfig+0x4d0>)
 8003a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a0c:	4a6f      	ldr	r2, [pc, #444]	@ (8003bcc <HAL_RCC_OscConfig+0x4d0>)
 8003a0e:	f043 0301 	orr.w	r3, r3, #1
 8003a12:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a14:	e02d      	b.n	8003a72 <HAL_RCC_OscConfig+0x376>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10c      	bne.n	8003a38 <HAL_RCC_OscConfig+0x33c>
 8003a1e:	4b6b      	ldr	r3, [pc, #428]	@ (8003bcc <HAL_RCC_OscConfig+0x4d0>)
 8003a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a22:	4a6a      	ldr	r2, [pc, #424]	@ (8003bcc <HAL_RCC_OscConfig+0x4d0>)
 8003a24:	f023 0301 	bic.w	r3, r3, #1
 8003a28:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a2a:	4b68      	ldr	r3, [pc, #416]	@ (8003bcc <HAL_RCC_OscConfig+0x4d0>)
 8003a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a2e:	4a67      	ldr	r2, [pc, #412]	@ (8003bcc <HAL_RCC_OscConfig+0x4d0>)
 8003a30:	f023 0304 	bic.w	r3, r3, #4
 8003a34:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a36:	e01c      	b.n	8003a72 <HAL_RCC_OscConfig+0x376>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2b05      	cmp	r3, #5
 8003a3e:	d10c      	bne.n	8003a5a <HAL_RCC_OscConfig+0x35e>
 8003a40:	4b62      	ldr	r3, [pc, #392]	@ (8003bcc <HAL_RCC_OscConfig+0x4d0>)
 8003a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a44:	4a61      	ldr	r2, [pc, #388]	@ (8003bcc <HAL_RCC_OscConfig+0x4d0>)
 8003a46:	f043 0304 	orr.w	r3, r3, #4
 8003a4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a4c:	4b5f      	ldr	r3, [pc, #380]	@ (8003bcc <HAL_RCC_OscConfig+0x4d0>)
 8003a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a50:	4a5e      	ldr	r2, [pc, #376]	@ (8003bcc <HAL_RCC_OscConfig+0x4d0>)
 8003a52:	f043 0301 	orr.w	r3, r3, #1
 8003a56:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a58:	e00b      	b.n	8003a72 <HAL_RCC_OscConfig+0x376>
 8003a5a:	4b5c      	ldr	r3, [pc, #368]	@ (8003bcc <HAL_RCC_OscConfig+0x4d0>)
 8003a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a5e:	4a5b      	ldr	r2, [pc, #364]	@ (8003bcc <HAL_RCC_OscConfig+0x4d0>)
 8003a60:	f023 0301 	bic.w	r3, r3, #1
 8003a64:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a66:	4b59      	ldr	r3, [pc, #356]	@ (8003bcc <HAL_RCC_OscConfig+0x4d0>)
 8003a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a6a:	4a58      	ldr	r2, [pc, #352]	@ (8003bcc <HAL_RCC_OscConfig+0x4d0>)
 8003a6c:	f023 0304 	bic.w	r3, r3, #4
 8003a70:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d015      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a7a:	f7fe fbe5 	bl	8002248 <HAL_GetTick>
 8003a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a80:	e00a      	b.n	8003a98 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a82:	f7fe fbe1 	bl	8002248 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e0d8      	b.n	8003c4a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a98:	4b4c      	ldr	r3, [pc, #304]	@ (8003bcc <HAL_RCC_OscConfig+0x4d0>)
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0ee      	beq.n	8003a82 <HAL_RCC_OscConfig+0x386>
 8003aa4:	e014      	b.n	8003ad0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa6:	f7fe fbcf 	bl	8002248 <HAL_GetTick>
 8003aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aac:	e00a      	b.n	8003ac4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aae:	f7fe fbcb 	bl	8002248 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e0c2      	b.n	8003c4a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ac4:	4b41      	ldr	r3, [pc, #260]	@ (8003bcc <HAL_RCC_OscConfig+0x4d0>)
 8003ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1ee      	bne.n	8003aae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ad0:	7dfb      	ldrb	r3, [r7, #23]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d105      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ad6:	4b3d      	ldr	r3, [pc, #244]	@ (8003bcc <HAL_RCC_OscConfig+0x4d0>)
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ada:	4a3c      	ldr	r2, [pc, #240]	@ (8003bcc <HAL_RCC_OscConfig+0x4d0>)
 8003adc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ae0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 80ae 	beq.w	8003c48 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003aec:	4b37      	ldr	r3, [pc, #220]	@ (8003bcc <HAL_RCC_OscConfig+0x4d0>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f003 030c 	and.w	r3, r3, #12
 8003af4:	2b08      	cmp	r3, #8
 8003af6:	d06d      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d14b      	bne.n	8003b98 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b00:	4b32      	ldr	r3, [pc, #200]	@ (8003bcc <HAL_RCC_OscConfig+0x4d0>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a31      	ldr	r2, [pc, #196]	@ (8003bcc <HAL_RCC_OscConfig+0x4d0>)
 8003b06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0c:	f7fe fb9c 	bl	8002248 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b14:	f7fe fb98 	bl	8002248 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e091      	b.n	8003c4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b26:	4b29      	ldr	r3, [pc, #164]	@ (8003bcc <HAL_RCC_OscConfig+0x4d0>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1f0      	bne.n	8003b14 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69da      	ldr	r2, [r3, #28]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b40:	019b      	lsls	r3, r3, #6
 8003b42:	431a      	orrs	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b48:	085b      	lsrs	r3, r3, #1
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	041b      	lsls	r3, r3, #16
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b54:	061b      	lsls	r3, r3, #24
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5c:	071b      	lsls	r3, r3, #28
 8003b5e:	491b      	ldr	r1, [pc, #108]	@ (8003bcc <HAL_RCC_OscConfig+0x4d0>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b64:	4b19      	ldr	r3, [pc, #100]	@ (8003bcc <HAL_RCC_OscConfig+0x4d0>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a18      	ldr	r2, [pc, #96]	@ (8003bcc <HAL_RCC_OscConfig+0x4d0>)
 8003b6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b70:	f7fe fb6a 	bl	8002248 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b78:	f7fe fb66 	bl	8002248 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e05f      	b.n	8003c4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b8a:	4b10      	ldr	r3, [pc, #64]	@ (8003bcc <HAL_RCC_OscConfig+0x4d0>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0f0      	beq.n	8003b78 <HAL_RCC_OscConfig+0x47c>
 8003b96:	e057      	b.n	8003c48 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b98:	4b0c      	ldr	r3, [pc, #48]	@ (8003bcc <HAL_RCC_OscConfig+0x4d0>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a0b      	ldr	r2, [pc, #44]	@ (8003bcc <HAL_RCC_OscConfig+0x4d0>)
 8003b9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba4:	f7fe fb50 	bl	8002248 <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bac:	f7fe fb4c 	bl	8002248 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e045      	b.n	8003c4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bbe:	4b03      	ldr	r3, [pc, #12]	@ (8003bcc <HAL_RCC_OscConfig+0x4d0>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f0      	bne.n	8003bac <HAL_RCC_OscConfig+0x4b0>
 8003bca:	e03d      	b.n	8003c48 <HAL_RCC_OscConfig+0x54c>
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003bd4:	4b1f      	ldr	r3, [pc, #124]	@ (8003c54 <HAL_RCC_OscConfig+0x558>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d030      	beq.n	8003c44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d129      	bne.n	8003c44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d122      	bne.n	8003c44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c04:	4013      	ands	r3, r2
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c0a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d119      	bne.n	8003c44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1a:	085b      	lsrs	r3, r3, #1
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d10f      	bne.n	8003c44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d107      	bne.n	8003c44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c3e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d001      	beq.n	8003c48 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e000      	b.n	8003c4a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40023800 	.word	0x40023800

08003c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003c62:	2300      	movs	r3, #0
 8003c64:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e0d0      	b.n	8003e12 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c70:	4b6a      	ldr	r3, [pc, #424]	@ (8003e1c <HAL_RCC_ClockConfig+0x1c4>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 030f 	and.w	r3, r3, #15
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d910      	bls.n	8003ca0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c7e:	4b67      	ldr	r3, [pc, #412]	@ (8003e1c <HAL_RCC_ClockConfig+0x1c4>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f023 020f 	bic.w	r2, r3, #15
 8003c86:	4965      	ldr	r1, [pc, #404]	@ (8003e1c <HAL_RCC_ClockConfig+0x1c4>)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c8e:	4b63      	ldr	r3, [pc, #396]	@ (8003e1c <HAL_RCC_ClockConfig+0x1c4>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d001      	beq.n	8003ca0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e0b8      	b.n	8003e12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d020      	beq.n	8003cee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d005      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cb8:	4b59      	ldr	r3, [pc, #356]	@ (8003e20 <HAL_RCC_ClockConfig+0x1c8>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	4a58      	ldr	r2, [pc, #352]	@ (8003e20 <HAL_RCC_ClockConfig+0x1c8>)
 8003cbe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003cc2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0308 	and.w	r3, r3, #8
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d005      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cd0:	4b53      	ldr	r3, [pc, #332]	@ (8003e20 <HAL_RCC_ClockConfig+0x1c8>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	4a52      	ldr	r2, [pc, #328]	@ (8003e20 <HAL_RCC_ClockConfig+0x1c8>)
 8003cd6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003cda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cdc:	4b50      	ldr	r3, [pc, #320]	@ (8003e20 <HAL_RCC_ClockConfig+0x1c8>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	494d      	ldr	r1, [pc, #308]	@ (8003e20 <HAL_RCC_ClockConfig+0x1c8>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d040      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d107      	bne.n	8003d12 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d02:	4b47      	ldr	r3, [pc, #284]	@ (8003e20 <HAL_RCC_ClockConfig+0x1c8>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d115      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e07f      	b.n	8003e12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d107      	bne.n	8003d2a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d1a:	4b41      	ldr	r3, [pc, #260]	@ (8003e20 <HAL_RCC_ClockConfig+0x1c8>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d109      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e073      	b.n	8003e12 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d2a:	4b3d      	ldr	r3, [pc, #244]	@ (8003e20 <HAL_RCC_ClockConfig+0x1c8>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e06b      	b.n	8003e12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d3a:	4b39      	ldr	r3, [pc, #228]	@ (8003e20 <HAL_RCC_ClockConfig+0x1c8>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f023 0203 	bic.w	r2, r3, #3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	4936      	ldr	r1, [pc, #216]	@ (8003e20 <HAL_RCC_ClockConfig+0x1c8>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d4c:	f7fe fa7c 	bl	8002248 <HAL_GetTick>
 8003d50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d52:	e00a      	b.n	8003d6a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d54:	f7fe fa78 	bl	8002248 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e053      	b.n	8003e12 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d6a:	4b2d      	ldr	r3, [pc, #180]	@ (8003e20 <HAL_RCC_ClockConfig+0x1c8>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 020c 	and.w	r2, r3, #12
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d1eb      	bne.n	8003d54 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d7c:	4b27      	ldr	r3, [pc, #156]	@ (8003e1c <HAL_RCC_ClockConfig+0x1c4>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 030f 	and.w	r3, r3, #15
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d210      	bcs.n	8003dac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d8a:	4b24      	ldr	r3, [pc, #144]	@ (8003e1c <HAL_RCC_ClockConfig+0x1c4>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f023 020f 	bic.w	r2, r3, #15
 8003d92:	4922      	ldr	r1, [pc, #136]	@ (8003e1c <HAL_RCC_ClockConfig+0x1c4>)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d9a:	4b20      	ldr	r3, [pc, #128]	@ (8003e1c <HAL_RCC_ClockConfig+0x1c4>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d001      	beq.n	8003dac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e032      	b.n	8003e12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d008      	beq.n	8003dca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003db8:	4b19      	ldr	r3, [pc, #100]	@ (8003e20 <HAL_RCC_ClockConfig+0x1c8>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	4916      	ldr	r1, [pc, #88]	@ (8003e20 <HAL_RCC_ClockConfig+0x1c8>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d009      	beq.n	8003dea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003dd6:	4b12      	ldr	r3, [pc, #72]	@ (8003e20 <HAL_RCC_ClockConfig+0x1c8>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	490e      	ldr	r1, [pc, #56]	@ (8003e20 <HAL_RCC_ClockConfig+0x1c8>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003dea:	f000 f821 	bl	8003e30 <HAL_RCC_GetSysClockFreq>
 8003dee:	4602      	mov	r2, r0
 8003df0:	4b0b      	ldr	r3, [pc, #44]	@ (8003e20 <HAL_RCC_ClockConfig+0x1c8>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	091b      	lsrs	r3, r3, #4
 8003df6:	f003 030f 	and.w	r3, r3, #15
 8003dfa:	490a      	ldr	r1, [pc, #40]	@ (8003e24 <HAL_RCC_ClockConfig+0x1cc>)
 8003dfc:	5ccb      	ldrb	r3, [r1, r3]
 8003dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8003e02:	4a09      	ldr	r2, [pc, #36]	@ (8003e28 <HAL_RCC_ClockConfig+0x1d0>)
 8003e04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e06:	4b09      	ldr	r3, [pc, #36]	@ (8003e2c <HAL_RCC_ClockConfig+0x1d4>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7fe f9d8 	bl	80021c0 <HAL_InitTick>

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	40023c00 	.word	0x40023c00
 8003e20:	40023800 	.word	0x40023800
 8003e24:	08007cb4 	.word	0x08007cb4
 8003e28:	2000001c 	.word	0x2000001c
 8003e2c:	20000020 	.word	0x20000020

08003e30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e34:	b090      	sub	sp, #64	@ 0x40
 8003e36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e40:	2300      	movs	r3, #0
 8003e42:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003e44:	2300      	movs	r3, #0
 8003e46:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e48:	4b59      	ldr	r3, [pc, #356]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f003 030c 	and.w	r3, r3, #12
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d00d      	beq.n	8003e70 <HAL_RCC_GetSysClockFreq+0x40>
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	f200 80a1 	bhi.w	8003f9c <HAL_RCC_GetSysClockFreq+0x16c>
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d002      	beq.n	8003e64 <HAL_RCC_GetSysClockFreq+0x34>
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d003      	beq.n	8003e6a <HAL_RCC_GetSysClockFreq+0x3a>
 8003e62:	e09b      	b.n	8003f9c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e64:	4b53      	ldr	r3, [pc, #332]	@ (8003fb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e66:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e68:	e09b      	b.n	8003fa2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e6a:	4b53      	ldr	r3, [pc, #332]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e6c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e6e:	e098      	b.n	8003fa2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e70:	4b4f      	ldr	r3, [pc, #316]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e78:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003e7a:	4b4d      	ldr	r3, [pc, #308]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d028      	beq.n	8003ed8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e86:	4b4a      	ldr	r3, [pc, #296]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	099b      	lsrs	r3, r3, #6
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	623b      	str	r3, [r7, #32]
 8003e90:	627a      	str	r2, [r7, #36]	@ 0x24
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e98:	2100      	movs	r1, #0
 8003e9a:	4b47      	ldr	r3, [pc, #284]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e9c:	fb03 f201 	mul.w	r2, r3, r1
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	fb00 f303 	mul.w	r3, r0, r3
 8003ea6:	4413      	add	r3, r2
 8003ea8:	4a43      	ldr	r2, [pc, #268]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003eaa:	fba0 1202 	umull	r1, r2, r0, r2
 8003eae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003eb0:	460a      	mov	r2, r1
 8003eb2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003eb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003eb6:	4413      	add	r3, r2
 8003eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	61bb      	str	r3, [r7, #24]
 8003ec0:	61fa      	str	r2, [r7, #28]
 8003ec2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ec6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003eca:	f7fc f9b5 	bl	8000238 <__aeabi_uldivmod>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ed6:	e053      	b.n	8003f80 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ed8:	4b35      	ldr	r3, [pc, #212]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	099b      	lsrs	r3, r3, #6
 8003ede:	2200      	movs	r2, #0
 8003ee0:	613b      	str	r3, [r7, #16]
 8003ee2:	617a      	str	r2, [r7, #20]
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003eea:	f04f 0b00 	mov.w	fp, #0
 8003eee:	4652      	mov	r2, sl
 8003ef0:	465b      	mov	r3, fp
 8003ef2:	f04f 0000 	mov.w	r0, #0
 8003ef6:	f04f 0100 	mov.w	r1, #0
 8003efa:	0159      	lsls	r1, r3, #5
 8003efc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f00:	0150      	lsls	r0, r2, #5
 8003f02:	4602      	mov	r2, r0
 8003f04:	460b      	mov	r3, r1
 8003f06:	ebb2 080a 	subs.w	r8, r2, sl
 8003f0a:	eb63 090b 	sbc.w	r9, r3, fp
 8003f0e:	f04f 0200 	mov.w	r2, #0
 8003f12:	f04f 0300 	mov.w	r3, #0
 8003f16:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003f1a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003f1e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003f22:	ebb2 0408 	subs.w	r4, r2, r8
 8003f26:	eb63 0509 	sbc.w	r5, r3, r9
 8003f2a:	f04f 0200 	mov.w	r2, #0
 8003f2e:	f04f 0300 	mov.w	r3, #0
 8003f32:	00eb      	lsls	r3, r5, #3
 8003f34:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f38:	00e2      	lsls	r2, r4, #3
 8003f3a:	4614      	mov	r4, r2
 8003f3c:	461d      	mov	r5, r3
 8003f3e:	eb14 030a 	adds.w	r3, r4, sl
 8003f42:	603b      	str	r3, [r7, #0]
 8003f44:	eb45 030b 	adc.w	r3, r5, fp
 8003f48:	607b      	str	r3, [r7, #4]
 8003f4a:	f04f 0200 	mov.w	r2, #0
 8003f4e:	f04f 0300 	mov.w	r3, #0
 8003f52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f56:	4629      	mov	r1, r5
 8003f58:	028b      	lsls	r3, r1, #10
 8003f5a:	4621      	mov	r1, r4
 8003f5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f60:	4621      	mov	r1, r4
 8003f62:	028a      	lsls	r2, r1, #10
 8003f64:	4610      	mov	r0, r2
 8003f66:	4619      	mov	r1, r3
 8003f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	60bb      	str	r3, [r7, #8]
 8003f6e:	60fa      	str	r2, [r7, #12]
 8003f70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f74:	f7fc f960 	bl	8000238 <__aeabi_uldivmod>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003f80:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	0c1b      	lsrs	r3, r3, #16
 8003f86:	f003 0303 	and.w	r3, r3, #3
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003f90:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f98:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f9a:	e002      	b.n	8003fa2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f9c:	4b05      	ldr	r3, [pc, #20]	@ (8003fb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003fa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3740      	adds	r7, #64	@ 0x40
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fae:	bf00      	nop
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	00f42400 	.word	0x00f42400
 8003fb8:	017d7840 	.word	0x017d7840

08003fbc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fc0:	4b03      	ldr	r3, [pc, #12]	@ (8003fd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	2000001c 	.word	0x2000001c

08003fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fd8:	f7ff fff0 	bl	8003fbc <HAL_RCC_GetHCLKFreq>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	4b05      	ldr	r3, [pc, #20]	@ (8003ff4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	0a9b      	lsrs	r3, r3, #10
 8003fe4:	f003 0307 	and.w	r3, r3, #7
 8003fe8:	4903      	ldr	r1, [pc, #12]	@ (8003ff8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fea:	5ccb      	ldrb	r3, [r1, r3]
 8003fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40023800 	.word	0x40023800
 8003ff8:	08007cc4 	.word	0x08007cc4

08003ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004000:	f7ff ffdc 	bl	8003fbc <HAL_RCC_GetHCLKFreq>
 8004004:	4602      	mov	r2, r0
 8004006:	4b05      	ldr	r3, [pc, #20]	@ (800401c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	0b5b      	lsrs	r3, r3, #13
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	4903      	ldr	r1, [pc, #12]	@ (8004020 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004012:	5ccb      	ldrb	r3, [r1, r3]
 8004014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004018:	4618      	mov	r0, r3
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40023800 	.word	0x40023800
 8004020:	08007cc4 	.word	0x08007cc4

08004024 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800402c:	2300      	movs	r3, #0
 800402e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004030:	2300      	movs	r3, #0
 8004032:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004034:	2300      	movs	r3, #0
 8004036:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004038:	2300      	movs	r3, #0
 800403a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800403c:	2300      	movs	r3, #0
 800403e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b00      	cmp	r3, #0
 800404a:	d012      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800404c:	4b69      	ldr	r3, [pc, #420]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	4a68      	ldr	r2, [pc, #416]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004052:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004056:	6093      	str	r3, [r2, #8]
 8004058:	4b66      	ldr	r3, [pc, #408]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004060:	4964      	ldr	r1, [pc, #400]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004062:	4313      	orrs	r3, r2
 8004064:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800406e:	2301      	movs	r3, #1
 8004070:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d017      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800407e:	4b5d      	ldr	r3, [pc, #372]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004080:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004084:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800408c:	4959      	ldr	r1, [pc, #356]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800408e:	4313      	orrs	r3, r2
 8004090:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004098:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800409c:	d101      	bne.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800409e:	2301      	movs	r3, #1
 80040a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80040aa:	2301      	movs	r3, #1
 80040ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d017      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80040ba:	4b4e      	ldr	r3, [pc, #312]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040c0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c8:	494a      	ldr	r1, [pc, #296]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040d8:	d101      	bne.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80040da:	2301      	movs	r3, #1
 80040dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80040e6:	2301      	movs	r3, #1
 80040e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80040f6:	2301      	movs	r3, #1
 80040f8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0320 	and.w	r3, r3, #32
 8004102:	2b00      	cmp	r3, #0
 8004104:	f000 808b 	beq.w	800421e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004108:	4b3a      	ldr	r3, [pc, #232]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800410a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410c:	4a39      	ldr	r2, [pc, #228]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800410e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004112:	6413      	str	r3, [r2, #64]	@ 0x40
 8004114:	4b37      	ldr	r3, [pc, #220]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004118:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800411c:	60bb      	str	r3, [r7, #8]
 800411e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004120:	4b35      	ldr	r3, [pc, #212]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a34      	ldr	r2, [pc, #208]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004126:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800412a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800412c:	f7fe f88c 	bl	8002248 <HAL_GetTick>
 8004130:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004132:	e008      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004134:	f7fe f888 	bl	8002248 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b64      	cmp	r3, #100	@ 0x64
 8004140:	d901      	bls.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e38f      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004146:	4b2c      	ldr	r3, [pc, #176]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0f0      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004152:	4b28      	ldr	r3, [pc, #160]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004156:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800415a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d035      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004166:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	429a      	cmp	r2, r3
 800416e:	d02e      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004170:	4b20      	ldr	r3, [pc, #128]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004174:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004178:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800417a:	4b1e      	ldr	r3, [pc, #120]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800417c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800417e:	4a1d      	ldr	r2, [pc, #116]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004184:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004186:	4b1b      	ldr	r3, [pc, #108]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800418a:	4a1a      	ldr	r2, [pc, #104]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800418c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004190:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004192:	4a18      	ldr	r2, [pc, #96]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004198:	4b16      	ldr	r3, [pc, #88]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800419a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d114      	bne.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a4:	f7fe f850 	bl	8002248 <HAL_GetTick>
 80041a8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041aa:	e00a      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041ac:	f7fe f84c 	bl	8002248 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e351      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041c2:	4b0c      	ldr	r3, [pc, #48]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0ee      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041da:	d111      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80041dc:	4b05      	ldr	r3, [pc, #20]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80041e8:	4b04      	ldr	r3, [pc, #16]	@ (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80041ea:	400b      	ands	r3, r1
 80041ec:	4901      	ldr	r1, [pc, #4]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	608b      	str	r3, [r1, #8]
 80041f2:	e00b      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80041f4:	40023800 	.word	0x40023800
 80041f8:	40007000 	.word	0x40007000
 80041fc:	0ffffcff 	.word	0x0ffffcff
 8004200:	4bac      	ldr	r3, [pc, #688]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	4aab      	ldr	r2, [pc, #684]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004206:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800420a:	6093      	str	r3, [r2, #8]
 800420c:	4ba9      	ldr	r3, [pc, #676]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800420e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004218:	49a6      	ldr	r1, [pc, #664]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800421a:	4313      	orrs	r3, r2
 800421c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0310 	and.w	r3, r3, #16
 8004226:	2b00      	cmp	r3, #0
 8004228:	d010      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800422a:	4ba2      	ldr	r3, [pc, #648]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800422c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004230:	4aa0      	ldr	r2, [pc, #640]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004232:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004236:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800423a:	4b9e      	ldr	r3, [pc, #632]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800423c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004244:	499b      	ldr	r1, [pc, #620]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004246:	4313      	orrs	r3, r2
 8004248:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00a      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004258:	4b96      	ldr	r3, [pc, #600]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800425a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800425e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004266:	4993      	ldr	r1, [pc, #588]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004268:	4313      	orrs	r3, r2
 800426a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00a      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800427a:	4b8e      	ldr	r3, [pc, #568]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800427c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004280:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004288:	498a      	ldr	r1, [pc, #552]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800428a:	4313      	orrs	r3, r2
 800428c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00a      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800429c:	4b85      	ldr	r3, [pc, #532]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800429e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042aa:	4982      	ldr	r1, [pc, #520]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00a      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042be:	4b7d      	ldr	r3, [pc, #500]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042cc:	4979      	ldr	r1, [pc, #484]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00a      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042e0:	4b74      	ldr	r3, [pc, #464]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042e6:	f023 0203 	bic.w	r2, r3, #3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ee:	4971      	ldr	r1, [pc, #452]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00a      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004302:	4b6c      	ldr	r3, [pc, #432]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004304:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004308:	f023 020c 	bic.w	r2, r3, #12
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004310:	4968      	ldr	r1, [pc, #416]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004312:	4313      	orrs	r3, r2
 8004314:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00a      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004324:	4b63      	ldr	r3, [pc, #396]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800432a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004332:	4960      	ldr	r1, [pc, #384]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004334:	4313      	orrs	r3, r2
 8004336:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00a      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004346:	4b5b      	ldr	r3, [pc, #364]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800434c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004354:	4957      	ldr	r1, [pc, #348]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004356:	4313      	orrs	r3, r2
 8004358:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00a      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004368:	4b52      	ldr	r3, [pc, #328]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800436a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800436e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004376:	494f      	ldr	r1, [pc, #316]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004378:	4313      	orrs	r3, r2
 800437a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00a      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800438a:	4b4a      	ldr	r3, [pc, #296]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800438c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004390:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004398:	4946      	ldr	r1, [pc, #280]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800439a:	4313      	orrs	r3, r2
 800439c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00a      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80043ac:	4b41      	ldr	r3, [pc, #260]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043b2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ba:	493e      	ldr	r1, [pc, #248]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00a      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80043ce:	4b39      	ldr	r3, [pc, #228]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043d4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043dc:	4935      	ldr	r1, [pc, #212]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00a      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80043f0:	4b30      	ldr	r3, [pc, #192]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043f6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043fe:	492d      	ldr	r1, [pc, #180]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004400:	4313      	orrs	r3, r2
 8004402:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d011      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004412:	4b28      	ldr	r3, [pc, #160]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004414:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004418:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004420:	4924      	ldr	r1, [pc, #144]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004422:	4313      	orrs	r3, r2
 8004424:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800442c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004430:	d101      	bne.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004432:	2301      	movs	r3, #1
 8004434:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0308 	and.w	r3, r3, #8
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004442:	2301      	movs	r3, #1
 8004444:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004452:	4b18      	ldr	r3, [pc, #96]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004454:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004458:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004460:	4914      	ldr	r1, [pc, #80]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004462:	4313      	orrs	r3, r2
 8004464:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00b      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004474:	4b0f      	ldr	r3, [pc, #60]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800447a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004484:	490b      	ldr	r1, [pc, #44]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004486:	4313      	orrs	r3, r2
 8004488:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00f      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004498:	4b06      	ldr	r3, [pc, #24]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800449a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800449e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044a8:	4902      	ldr	r1, [pc, #8]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80044b0:	e002      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80044b2:	bf00      	nop
 80044b4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00b      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044c4:	4b8a      	ldr	r3, [pc, #552]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044ca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044d4:	4986      	ldr	r1, [pc, #536]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00b      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80044e8:	4b81      	ldr	r3, [pc, #516]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044ee:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044f8:	497d      	ldr	r1, [pc, #500]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d006      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	f000 80d6 	beq.w	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004514:	4b76      	ldr	r3, [pc, #472]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a75      	ldr	r2, [pc, #468]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800451a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800451e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004520:	f7fd fe92 	bl	8002248 <HAL_GetTick>
 8004524:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004526:	e008      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004528:	f7fd fe8e 	bl	8002248 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b64      	cmp	r3, #100	@ 0x64
 8004534:	d901      	bls.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e195      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800453a:	4b6d      	ldr	r3, [pc, #436]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1f0      	bne.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d021      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004556:	2b00      	cmp	r3, #0
 8004558:	d11d      	bne.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800455a:	4b65      	ldr	r3, [pc, #404]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800455c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004560:	0c1b      	lsrs	r3, r3, #16
 8004562:	f003 0303 	and.w	r3, r3, #3
 8004566:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004568:	4b61      	ldr	r3, [pc, #388]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800456a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800456e:	0e1b      	lsrs	r3, r3, #24
 8004570:	f003 030f 	and.w	r3, r3, #15
 8004574:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	019a      	lsls	r2, r3, #6
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	041b      	lsls	r3, r3, #16
 8004580:	431a      	orrs	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	061b      	lsls	r3, r3, #24
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	071b      	lsls	r3, r3, #28
 800458e:	4958      	ldr	r1, [pc, #352]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004590:	4313      	orrs	r3, r2
 8004592:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d004      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x588>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045aa:	d00a      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d02e      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045c0:	d129      	bne.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80045c2:	4b4b      	ldr	r3, [pc, #300]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045c8:	0c1b      	lsrs	r3, r3, #16
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045d0:	4b47      	ldr	r3, [pc, #284]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045d6:	0f1b      	lsrs	r3, r3, #28
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	019a      	lsls	r2, r3, #6
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	041b      	lsls	r3, r3, #16
 80045e8:	431a      	orrs	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	061b      	lsls	r3, r3, #24
 80045f0:	431a      	orrs	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	071b      	lsls	r3, r3, #28
 80045f6:	493e      	ldr	r1, [pc, #248]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80045fe:	4b3c      	ldr	r3, [pc, #240]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004600:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004604:	f023 021f 	bic.w	r2, r3, #31
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460c:	3b01      	subs	r3, #1
 800460e:	4938      	ldr	r1, [pc, #224]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004610:	4313      	orrs	r3, r2
 8004612:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d01d      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004622:	4b33      	ldr	r3, [pc, #204]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004624:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004628:	0e1b      	lsrs	r3, r3, #24
 800462a:	f003 030f 	and.w	r3, r3, #15
 800462e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004630:	4b2f      	ldr	r3, [pc, #188]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004632:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004636:	0f1b      	lsrs	r3, r3, #28
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	019a      	lsls	r2, r3, #6
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	041b      	lsls	r3, r3, #16
 800464a:	431a      	orrs	r2, r3
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	061b      	lsls	r3, r3, #24
 8004650:	431a      	orrs	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	071b      	lsls	r3, r3, #28
 8004656:	4926      	ldr	r1, [pc, #152]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004658:	4313      	orrs	r3, r2
 800465a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d011      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	019a      	lsls	r2, r3, #6
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	041b      	lsls	r3, r3, #16
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	061b      	lsls	r3, r3, #24
 800467e:	431a      	orrs	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	071b      	lsls	r3, r3, #28
 8004686:	491a      	ldr	r1, [pc, #104]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004688:	4313      	orrs	r3, r2
 800468a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800468e:	4b18      	ldr	r3, [pc, #96]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a17      	ldr	r2, [pc, #92]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004694:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004698:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800469a:	f7fd fdd5 	bl	8002248 <HAL_GetTick>
 800469e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046a0:	e008      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046a2:	f7fd fdd1 	bl	8002248 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b64      	cmp	r3, #100	@ 0x64
 80046ae:	d901      	bls.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e0d8      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046b4:	4b0e      	ldr	r3, [pc, #56]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d0f0      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	f040 80ce 	bne.w	8004864 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80046c8:	4b09      	ldr	r3, [pc, #36]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a08      	ldr	r2, [pc, #32]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046d4:	f7fd fdb8 	bl	8002248 <HAL_GetTick>
 80046d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80046da:	e00b      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80046dc:	f7fd fdb4 	bl	8002248 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b64      	cmp	r3, #100	@ 0x64
 80046e8:	d904      	bls.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e0bb      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80046ee:	bf00      	nop
 80046f0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80046f4:	4b5e      	ldr	r3, [pc, #376]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004700:	d0ec      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004712:	2b00      	cmp	r3, #0
 8004714:	d009      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800471e:	2b00      	cmp	r3, #0
 8004720:	d02e      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004726:	2b00      	cmp	r3, #0
 8004728:	d12a      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800472a:	4b51      	ldr	r3, [pc, #324]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800472c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004730:	0c1b      	lsrs	r3, r3, #16
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004738:	4b4d      	ldr	r3, [pc, #308]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800473a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800473e:	0f1b      	lsrs	r3, r3, #28
 8004740:	f003 0307 	and.w	r3, r3, #7
 8004744:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	019a      	lsls	r2, r3, #6
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	041b      	lsls	r3, r3, #16
 8004750:	431a      	orrs	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	061b      	lsls	r3, r3, #24
 8004758:	431a      	orrs	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	071b      	lsls	r3, r3, #28
 800475e:	4944      	ldr	r1, [pc, #272]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004760:	4313      	orrs	r3, r2
 8004762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004766:	4b42      	ldr	r3, [pc, #264]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004768:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800476c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004774:	3b01      	subs	r3, #1
 8004776:	021b      	lsls	r3, r3, #8
 8004778:	493d      	ldr	r1, [pc, #244]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800477a:	4313      	orrs	r3, r2
 800477c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d022      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004790:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004794:	d11d      	bne.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004796:	4b36      	ldr	r3, [pc, #216]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004798:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800479c:	0e1b      	lsrs	r3, r3, #24
 800479e:	f003 030f 	and.w	r3, r3, #15
 80047a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80047a4:	4b32      	ldr	r3, [pc, #200]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047aa:	0f1b      	lsrs	r3, r3, #28
 80047ac:	f003 0307 	and.w	r3, r3, #7
 80047b0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	019a      	lsls	r2, r3, #6
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	041b      	lsls	r3, r3, #16
 80047be:	431a      	orrs	r2, r3
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	061b      	lsls	r3, r3, #24
 80047c4:	431a      	orrs	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	071b      	lsls	r3, r3, #28
 80047ca:	4929      	ldr	r1, [pc, #164]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0308 	and.w	r3, r3, #8
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d028      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80047de:	4b24      	ldr	r3, [pc, #144]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e4:	0e1b      	lsrs	r3, r3, #24
 80047e6:	f003 030f 	and.w	r3, r3, #15
 80047ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80047ec:	4b20      	ldr	r3, [pc, #128]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f2:	0c1b      	lsrs	r3, r3, #16
 80047f4:	f003 0303 	and.w	r3, r3, #3
 80047f8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	019a      	lsls	r2, r3, #6
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	041b      	lsls	r3, r3, #16
 8004804:	431a      	orrs	r2, r3
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	061b      	lsls	r3, r3, #24
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	69db      	ldr	r3, [r3, #28]
 8004810:	071b      	lsls	r3, r3, #28
 8004812:	4917      	ldr	r1, [pc, #92]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004814:	4313      	orrs	r3, r2
 8004816:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800481a:	4b15      	ldr	r3, [pc, #84]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800481c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004820:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004828:	4911      	ldr	r1, [pc, #68]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800482a:	4313      	orrs	r3, r2
 800482c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004830:	4b0f      	ldr	r3, [pc, #60]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a0e      	ldr	r2, [pc, #56]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004836:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800483a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800483c:	f7fd fd04 	bl	8002248 <HAL_GetTick>
 8004840:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004842:	e008      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004844:	f7fd fd00 	bl	8002248 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	2b64      	cmp	r3, #100	@ 0x64
 8004850:	d901      	bls.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e007      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004856:	4b06      	ldr	r3, [pc, #24]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800485e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004862:	d1ef      	bne.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3720      	adds	r7, #32
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	40023800 	.word	0x40023800

08004874 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e049      	b.n	800491a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d106      	bne.n	80048a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7fd f9f6 	bl	8001c8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2202      	movs	r2, #2
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	3304      	adds	r3, #4
 80048b0:	4619      	mov	r1, r3
 80048b2:	4610      	mov	r0, r2
 80048b4:	f000 ff96 	bl	80057e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
	...

08004924 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2b01      	cmp	r3, #1
 8004936:	d001      	beq.n	800493c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e054      	b.n	80049e6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2202      	movs	r2, #2
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f042 0201 	orr.w	r2, r2, #1
 8004952:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a26      	ldr	r2, [pc, #152]	@ (80049f4 <HAL_TIM_Base_Start_IT+0xd0>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d022      	beq.n	80049a4 <HAL_TIM_Base_Start_IT+0x80>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004966:	d01d      	beq.n	80049a4 <HAL_TIM_Base_Start_IT+0x80>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a22      	ldr	r2, [pc, #136]	@ (80049f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d018      	beq.n	80049a4 <HAL_TIM_Base_Start_IT+0x80>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a21      	ldr	r2, [pc, #132]	@ (80049fc <HAL_TIM_Base_Start_IT+0xd8>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d013      	beq.n	80049a4 <HAL_TIM_Base_Start_IT+0x80>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a1f      	ldr	r2, [pc, #124]	@ (8004a00 <HAL_TIM_Base_Start_IT+0xdc>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d00e      	beq.n	80049a4 <HAL_TIM_Base_Start_IT+0x80>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a1e      	ldr	r2, [pc, #120]	@ (8004a04 <HAL_TIM_Base_Start_IT+0xe0>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d009      	beq.n	80049a4 <HAL_TIM_Base_Start_IT+0x80>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a1c      	ldr	r2, [pc, #112]	@ (8004a08 <HAL_TIM_Base_Start_IT+0xe4>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d004      	beq.n	80049a4 <HAL_TIM_Base_Start_IT+0x80>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a1b      	ldr	r2, [pc, #108]	@ (8004a0c <HAL_TIM_Base_Start_IT+0xe8>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d115      	bne.n	80049d0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689a      	ldr	r2, [r3, #8]
 80049aa:	4b19      	ldr	r3, [pc, #100]	@ (8004a10 <HAL_TIM_Base_Start_IT+0xec>)
 80049ac:	4013      	ands	r3, r2
 80049ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2b06      	cmp	r3, #6
 80049b4:	d015      	beq.n	80049e2 <HAL_TIM_Base_Start_IT+0xbe>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049bc:	d011      	beq.n	80049e2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f042 0201 	orr.w	r2, r2, #1
 80049cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ce:	e008      	b.n	80049e2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0201 	orr.w	r2, r2, #1
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	e000      	b.n	80049e4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	40010000 	.word	0x40010000
 80049f8:	40000400 	.word	0x40000400
 80049fc:	40000800 	.word	0x40000800
 8004a00:	40000c00 	.word	0x40000c00
 8004a04:	40010400 	.word	0x40010400
 8004a08:	40014000 	.word	0x40014000
 8004a0c:	40001800 	.word	0x40001800
 8004a10:	00010007 	.word	0x00010007

08004a14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e049      	b.n	8004aba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d106      	bne.n	8004a40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7fd fa44 	bl	8001ec8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2202      	movs	r2, #2
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3304      	adds	r3, #4
 8004a50:	4619      	mov	r1, r3
 8004a52:	4610      	mov	r0, r2
 8004a54:	f000 fec6 	bl	80057e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
	...

08004ac4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d109      	bne.n	8004ae8 <HAL_TIM_PWM_Start+0x24>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	bf14      	ite	ne
 8004ae0:	2301      	movne	r3, #1
 8004ae2:	2300      	moveq	r3, #0
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	e03c      	b.n	8004b62 <HAL_TIM_PWM_Start+0x9e>
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	d109      	bne.n	8004b02 <HAL_TIM_PWM_Start+0x3e>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	bf14      	ite	ne
 8004afa:	2301      	movne	r3, #1
 8004afc:	2300      	moveq	r3, #0
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	e02f      	b.n	8004b62 <HAL_TIM_PWM_Start+0x9e>
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d109      	bne.n	8004b1c <HAL_TIM_PWM_Start+0x58>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	bf14      	ite	ne
 8004b14:	2301      	movne	r3, #1
 8004b16:	2300      	moveq	r3, #0
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	e022      	b.n	8004b62 <HAL_TIM_PWM_Start+0x9e>
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	2b0c      	cmp	r3, #12
 8004b20:	d109      	bne.n	8004b36 <HAL_TIM_PWM_Start+0x72>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	bf14      	ite	ne
 8004b2e:	2301      	movne	r3, #1
 8004b30:	2300      	moveq	r3, #0
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	e015      	b.n	8004b62 <HAL_TIM_PWM_Start+0x9e>
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b10      	cmp	r3, #16
 8004b3a:	d109      	bne.n	8004b50 <HAL_TIM_PWM_Start+0x8c>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	bf14      	ite	ne
 8004b48:	2301      	movne	r3, #1
 8004b4a:	2300      	moveq	r3, #0
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	e008      	b.n	8004b62 <HAL_TIM_PWM_Start+0x9e>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	bf14      	ite	ne
 8004b5c:	2301      	movne	r3, #1
 8004b5e:	2300      	moveq	r3, #0
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e092      	b.n	8004c90 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d104      	bne.n	8004b7a <HAL_TIM_PWM_Start+0xb6>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2202      	movs	r2, #2
 8004b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b78:	e023      	b.n	8004bc2 <HAL_TIM_PWM_Start+0xfe>
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2b04      	cmp	r3, #4
 8004b7e:	d104      	bne.n	8004b8a <HAL_TIM_PWM_Start+0xc6>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b88:	e01b      	b.n	8004bc2 <HAL_TIM_PWM_Start+0xfe>
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d104      	bne.n	8004b9a <HAL_TIM_PWM_Start+0xd6>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b98:	e013      	b.n	8004bc2 <HAL_TIM_PWM_Start+0xfe>
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b0c      	cmp	r3, #12
 8004b9e:	d104      	bne.n	8004baa <HAL_TIM_PWM_Start+0xe6>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ba8:	e00b      	b.n	8004bc2 <HAL_TIM_PWM_Start+0xfe>
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b10      	cmp	r3, #16
 8004bae:	d104      	bne.n	8004bba <HAL_TIM_PWM_Start+0xf6>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bb8:	e003      	b.n	8004bc2 <HAL_TIM_PWM_Start+0xfe>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	6839      	ldr	r1, [r7, #0]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f001 fad8 	bl	8006180 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a30      	ldr	r2, [pc, #192]	@ (8004c98 <HAL_TIM_PWM_Start+0x1d4>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d004      	beq.n	8004be4 <HAL_TIM_PWM_Start+0x120>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a2f      	ldr	r2, [pc, #188]	@ (8004c9c <HAL_TIM_PWM_Start+0x1d8>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d101      	bne.n	8004be8 <HAL_TIM_PWM_Start+0x124>
 8004be4:	2301      	movs	r3, #1
 8004be6:	e000      	b.n	8004bea <HAL_TIM_PWM_Start+0x126>
 8004be8:	2300      	movs	r3, #0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d007      	beq.n	8004bfe <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004bfc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a25      	ldr	r2, [pc, #148]	@ (8004c98 <HAL_TIM_PWM_Start+0x1d4>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d022      	beq.n	8004c4e <HAL_TIM_PWM_Start+0x18a>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c10:	d01d      	beq.n	8004c4e <HAL_TIM_PWM_Start+0x18a>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a22      	ldr	r2, [pc, #136]	@ (8004ca0 <HAL_TIM_PWM_Start+0x1dc>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d018      	beq.n	8004c4e <HAL_TIM_PWM_Start+0x18a>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a20      	ldr	r2, [pc, #128]	@ (8004ca4 <HAL_TIM_PWM_Start+0x1e0>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d013      	beq.n	8004c4e <HAL_TIM_PWM_Start+0x18a>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ca8 <HAL_TIM_PWM_Start+0x1e4>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d00e      	beq.n	8004c4e <HAL_TIM_PWM_Start+0x18a>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a19      	ldr	r2, [pc, #100]	@ (8004c9c <HAL_TIM_PWM_Start+0x1d8>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d009      	beq.n	8004c4e <HAL_TIM_PWM_Start+0x18a>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a1b      	ldr	r2, [pc, #108]	@ (8004cac <HAL_TIM_PWM_Start+0x1e8>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d004      	beq.n	8004c4e <HAL_TIM_PWM_Start+0x18a>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a19      	ldr	r2, [pc, #100]	@ (8004cb0 <HAL_TIM_PWM_Start+0x1ec>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d115      	bne.n	8004c7a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689a      	ldr	r2, [r3, #8]
 8004c54:	4b17      	ldr	r3, [pc, #92]	@ (8004cb4 <HAL_TIM_PWM_Start+0x1f0>)
 8004c56:	4013      	ands	r3, r2
 8004c58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2b06      	cmp	r3, #6
 8004c5e:	d015      	beq.n	8004c8c <HAL_TIM_PWM_Start+0x1c8>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c66:	d011      	beq.n	8004c8c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f042 0201 	orr.w	r2, r2, #1
 8004c76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c78:	e008      	b.n	8004c8c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f042 0201 	orr.w	r2, r2, #1
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	e000      	b.n	8004c8e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	40010000 	.word	0x40010000
 8004c9c:	40010400 	.word	0x40010400
 8004ca0:	40000400 	.word	0x40000400
 8004ca4:	40000800 	.word	0x40000800
 8004ca8:	40000c00 	.word	0x40000c00
 8004cac:	40014000 	.word	0x40014000
 8004cb0:	40001800 	.word	0x40001800
 8004cb4:	00010007 	.word	0x00010007

08004cb8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e049      	b.n	8004d5e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d106      	bne.n	8004ce4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f841 	bl	8004d66 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3304      	adds	r3, #4
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4610      	mov	r0, r2
 8004cf8:	f000 fd74 	bl	80057e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b083      	sub	sp, #12
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004d6e:	bf00      	nop
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
	...

08004d7c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d86:	2300      	movs	r3, #0
 8004d88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d104      	bne.n	8004d9a <HAL_TIM_IC_Start_IT+0x1e>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	e023      	b.n	8004de2 <HAL_TIM_IC_Start_IT+0x66>
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	2b04      	cmp	r3, #4
 8004d9e:	d104      	bne.n	8004daa <HAL_TIM_IC_Start_IT+0x2e>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	e01b      	b.n	8004de2 <HAL_TIM_IC_Start_IT+0x66>
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b08      	cmp	r3, #8
 8004dae:	d104      	bne.n	8004dba <HAL_TIM_IC_Start_IT+0x3e>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	e013      	b.n	8004de2 <HAL_TIM_IC_Start_IT+0x66>
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b0c      	cmp	r3, #12
 8004dbe:	d104      	bne.n	8004dca <HAL_TIM_IC_Start_IT+0x4e>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	e00b      	b.n	8004de2 <HAL_TIM_IC_Start_IT+0x66>
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2b10      	cmp	r3, #16
 8004dce:	d104      	bne.n	8004dda <HAL_TIM_IC_Start_IT+0x5e>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	e003      	b.n	8004de2 <HAL_TIM_IC_Start_IT+0x66>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d104      	bne.n	8004df4 <HAL_TIM_IC_Start_IT+0x78>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	e013      	b.n	8004e1c <HAL_TIM_IC_Start_IT+0xa0>
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	2b04      	cmp	r3, #4
 8004df8:	d104      	bne.n	8004e04 <HAL_TIM_IC_Start_IT+0x88>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	e00b      	b.n	8004e1c <HAL_TIM_IC_Start_IT+0xa0>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	2b08      	cmp	r3, #8
 8004e08:	d104      	bne.n	8004e14 <HAL_TIM_IC_Start_IT+0x98>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	e003      	b.n	8004e1c <HAL_TIM_IC_Start_IT+0xa0>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e1e:	7bbb      	ldrb	r3, [r7, #14]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d102      	bne.n	8004e2a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e24:	7b7b      	ldrb	r3, [r7, #13]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d001      	beq.n	8004e2e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e0e2      	b.n	8004ff4 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d104      	bne.n	8004e3e <HAL_TIM_IC_Start_IT+0xc2>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e3c:	e023      	b.n	8004e86 <HAL_TIM_IC_Start_IT+0x10a>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b04      	cmp	r3, #4
 8004e42:	d104      	bne.n	8004e4e <HAL_TIM_IC_Start_IT+0xd2>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2202      	movs	r2, #2
 8004e48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e4c:	e01b      	b.n	8004e86 <HAL_TIM_IC_Start_IT+0x10a>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b08      	cmp	r3, #8
 8004e52:	d104      	bne.n	8004e5e <HAL_TIM_IC_Start_IT+0xe2>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e5c:	e013      	b.n	8004e86 <HAL_TIM_IC_Start_IT+0x10a>
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b0c      	cmp	r3, #12
 8004e62:	d104      	bne.n	8004e6e <HAL_TIM_IC_Start_IT+0xf2>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2202      	movs	r2, #2
 8004e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e6c:	e00b      	b.n	8004e86 <HAL_TIM_IC_Start_IT+0x10a>
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2b10      	cmp	r3, #16
 8004e72:	d104      	bne.n	8004e7e <HAL_TIM_IC_Start_IT+0x102>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e7c:	e003      	b.n	8004e86 <HAL_TIM_IC_Start_IT+0x10a>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2202      	movs	r2, #2
 8004e82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d104      	bne.n	8004e96 <HAL_TIM_IC_Start_IT+0x11a>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e94:	e013      	b.n	8004ebe <HAL_TIM_IC_Start_IT+0x142>
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b04      	cmp	r3, #4
 8004e9a:	d104      	bne.n	8004ea6 <HAL_TIM_IC_Start_IT+0x12a>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ea4:	e00b      	b.n	8004ebe <HAL_TIM_IC_Start_IT+0x142>
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	d104      	bne.n	8004eb6 <HAL_TIM_IC_Start_IT+0x13a>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004eb4:	e003      	b.n	8004ebe <HAL_TIM_IC_Start_IT+0x142>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2202      	movs	r2, #2
 8004eba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2b0c      	cmp	r3, #12
 8004ec2:	d841      	bhi.n	8004f48 <HAL_TIM_IC_Start_IT+0x1cc>
 8004ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8004ecc <HAL_TIM_IC_Start_IT+0x150>)
 8004ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eca:	bf00      	nop
 8004ecc:	08004f01 	.word	0x08004f01
 8004ed0:	08004f49 	.word	0x08004f49
 8004ed4:	08004f49 	.word	0x08004f49
 8004ed8:	08004f49 	.word	0x08004f49
 8004edc:	08004f13 	.word	0x08004f13
 8004ee0:	08004f49 	.word	0x08004f49
 8004ee4:	08004f49 	.word	0x08004f49
 8004ee8:	08004f49 	.word	0x08004f49
 8004eec:	08004f25 	.word	0x08004f25
 8004ef0:	08004f49 	.word	0x08004f49
 8004ef4:	08004f49 	.word	0x08004f49
 8004ef8:	08004f49 	.word	0x08004f49
 8004efc:	08004f37 	.word	0x08004f37
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68da      	ldr	r2, [r3, #12]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f042 0202 	orr.w	r2, r2, #2
 8004f0e:	60da      	str	r2, [r3, #12]
      break;
 8004f10:	e01d      	b.n	8004f4e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68da      	ldr	r2, [r3, #12]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f042 0204 	orr.w	r2, r2, #4
 8004f20:	60da      	str	r2, [r3, #12]
      break;
 8004f22:	e014      	b.n	8004f4e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68da      	ldr	r2, [r3, #12]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 0208 	orr.w	r2, r2, #8
 8004f32:	60da      	str	r2, [r3, #12]
      break;
 8004f34:	e00b      	b.n	8004f4e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68da      	ldr	r2, [r3, #12]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f042 0210 	orr.w	r2, r2, #16
 8004f44:	60da      	str	r2, [r3, #12]
      break;
 8004f46:	e002      	b.n	8004f4e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f4c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004f4e:	7bfb      	ldrb	r3, [r7, #15]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d14e      	bne.n	8004ff2 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	6839      	ldr	r1, [r7, #0]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f001 f90f 	bl	8006180 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a25      	ldr	r2, [pc, #148]	@ (8004ffc <HAL_TIM_IC_Start_IT+0x280>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d022      	beq.n	8004fb2 <HAL_TIM_IC_Start_IT+0x236>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f74:	d01d      	beq.n	8004fb2 <HAL_TIM_IC_Start_IT+0x236>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a21      	ldr	r2, [pc, #132]	@ (8005000 <HAL_TIM_IC_Start_IT+0x284>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d018      	beq.n	8004fb2 <HAL_TIM_IC_Start_IT+0x236>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a1f      	ldr	r2, [pc, #124]	@ (8005004 <HAL_TIM_IC_Start_IT+0x288>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d013      	beq.n	8004fb2 <HAL_TIM_IC_Start_IT+0x236>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a1e      	ldr	r2, [pc, #120]	@ (8005008 <HAL_TIM_IC_Start_IT+0x28c>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d00e      	beq.n	8004fb2 <HAL_TIM_IC_Start_IT+0x236>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a1c      	ldr	r2, [pc, #112]	@ (800500c <HAL_TIM_IC_Start_IT+0x290>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d009      	beq.n	8004fb2 <HAL_TIM_IC_Start_IT+0x236>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a1b      	ldr	r2, [pc, #108]	@ (8005010 <HAL_TIM_IC_Start_IT+0x294>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d004      	beq.n	8004fb2 <HAL_TIM_IC_Start_IT+0x236>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a19      	ldr	r2, [pc, #100]	@ (8005014 <HAL_TIM_IC_Start_IT+0x298>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d115      	bne.n	8004fde <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689a      	ldr	r2, [r3, #8]
 8004fb8:	4b17      	ldr	r3, [pc, #92]	@ (8005018 <HAL_TIM_IC_Start_IT+0x29c>)
 8004fba:	4013      	ands	r3, r2
 8004fbc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2b06      	cmp	r3, #6
 8004fc2:	d015      	beq.n	8004ff0 <HAL_TIM_IC_Start_IT+0x274>
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fca:	d011      	beq.n	8004ff0 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f042 0201 	orr.w	r2, r2, #1
 8004fda:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fdc:	e008      	b.n	8004ff0 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f042 0201 	orr.w	r2, r2, #1
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	e000      	b.n	8004ff2 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ff0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	40010000 	.word	0x40010000
 8005000:	40000400 	.word	0x40000400
 8005004:	40000800 	.word	0x40000800
 8005008:	40000c00 	.word	0x40000c00
 800500c:	40010400 	.word	0x40010400
 8005010:	40014000 	.word	0x40014000
 8005014:	40001800 	.word	0x40001800
 8005018:	00010007 	.word	0x00010007

0800501c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d020      	beq.n	8005080 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f003 0302 	and.w	r3, r3, #2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d01b      	beq.n	8005080 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f06f 0202 	mvn.w	r2, #2
 8005050:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	f003 0303 	and.w	r3, r3, #3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7fb fe52 	bl	8000d10 <HAL_TIM_IC_CaptureCallback>
 800506c:	e005      	b.n	800507a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fb9a 	bl	80057a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 fba1 	bl	80057bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f003 0304 	and.w	r3, r3, #4
 8005086:	2b00      	cmp	r3, #0
 8005088:	d020      	beq.n	80050cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b00      	cmp	r3, #0
 8005092:	d01b      	beq.n	80050cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f06f 0204 	mvn.w	r2, #4
 800509c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2202      	movs	r2, #2
 80050a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7fb fe2c 	bl	8000d10 <HAL_TIM_IC_CaptureCallback>
 80050b8:	e005      	b.n	80050c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 fb74 	bl	80057a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 fb7b 	bl	80057bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f003 0308 	and.w	r3, r3, #8
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d020      	beq.n	8005118 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f003 0308 	and.w	r3, r3, #8
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d01b      	beq.n	8005118 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f06f 0208 	mvn.w	r2, #8
 80050e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2204      	movs	r2, #4
 80050ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7fb fe06 	bl	8000d10 <HAL_TIM_IC_CaptureCallback>
 8005104:	e005      	b.n	8005112 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 fb4e 	bl	80057a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 fb55 	bl	80057bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	f003 0310 	and.w	r3, r3, #16
 800511e:	2b00      	cmp	r3, #0
 8005120:	d020      	beq.n	8005164 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f003 0310 	and.w	r3, r3, #16
 8005128:	2b00      	cmp	r3, #0
 800512a:	d01b      	beq.n	8005164 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f06f 0210 	mvn.w	r2, #16
 8005134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2208      	movs	r2, #8
 800513a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7fb fde0 	bl	8000d10 <HAL_TIM_IC_CaptureCallback>
 8005150:	e005      	b.n	800515e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 fb28 	bl	80057a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 fb2f 	bl	80057bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00c      	beq.n	8005188 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	2b00      	cmp	r3, #0
 8005176:	d007      	beq.n	8005188 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f06f 0201 	mvn.w	r2, #1
 8005180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7fb ff66 	bl	8001054 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800518e:	2b00      	cmp	r3, #0
 8005190:	d104      	bne.n	800519c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00c      	beq.n	80051b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d007      	beq.n	80051b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80051ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f001 f921 	bl	80063f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00c      	beq.n	80051da <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d007      	beq.n	80051da <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80051d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f001 f919 	bl	800640c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00c      	beq.n	80051fe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d007      	beq.n	80051fe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80051f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 fae9 	bl	80057d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	f003 0320 	and.w	r3, r3, #32
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00c      	beq.n	8005222 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f003 0320 	and.w	r3, r3, #32
 800520e:	2b00      	cmp	r3, #0
 8005210:	d007      	beq.n	8005222 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f06f 0220 	mvn.w	r2, #32
 800521a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f001 f8e1 	bl	80063e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005222:	bf00      	nop
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b086      	sub	sp, #24
 800522e:	af00      	add	r7, sp, #0
 8005230:	60f8      	str	r0, [r7, #12]
 8005232:	60b9      	str	r1, [r7, #8]
 8005234:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005236:	2300      	movs	r3, #0
 8005238:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005240:	2b01      	cmp	r3, #1
 8005242:	d101      	bne.n	8005248 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005244:	2302      	movs	r3, #2
 8005246:	e088      	b.n	800535a <HAL_TIM_IC_ConfigChannel+0x130>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d11b      	bne.n	800528e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005266:	f000 fdc7 	bl	8005df8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	699a      	ldr	r2, [r3, #24]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 020c 	bic.w	r2, r2, #12
 8005278:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6999      	ldr	r1, [r3, #24]
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	430a      	orrs	r2, r1
 800528a:	619a      	str	r2, [r3, #24]
 800528c:	e060      	b.n	8005350 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b04      	cmp	r3, #4
 8005292:	d11c      	bne.n	80052ce <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80052a4:	f000 fe4b 	bl	8005f3e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	699a      	ldr	r2, [r3, #24]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80052b6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6999      	ldr	r1, [r3, #24]
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	021a      	lsls	r2, r3, #8
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	430a      	orrs	r2, r1
 80052ca:	619a      	str	r2, [r3, #24]
 80052cc:	e040      	b.n	8005350 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d11b      	bne.n	800530c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80052e4:	f000 fe98 	bl	8006018 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	69da      	ldr	r2, [r3, #28]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f022 020c 	bic.w	r2, r2, #12
 80052f6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	69d9      	ldr	r1, [r3, #28]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	689a      	ldr	r2, [r3, #8]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	430a      	orrs	r2, r1
 8005308:	61da      	str	r2, [r3, #28]
 800530a:	e021      	b.n	8005350 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b0c      	cmp	r3, #12
 8005310:	d11c      	bne.n	800534c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005322:	f000 feb5 	bl	8006090 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	69da      	ldr	r2, [r3, #28]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005334:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	69d9      	ldr	r1, [r3, #28]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	021a      	lsls	r2, r3, #8
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	61da      	str	r2, [r3, #28]
 800534a:	e001      	b.n	8005350 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005358:	7dfb      	ldrb	r3, [r7, #23]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3718      	adds	r7, #24
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
	...

08005364 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005370:	2300      	movs	r3, #0
 8005372:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800537a:	2b01      	cmp	r3, #1
 800537c:	d101      	bne.n	8005382 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800537e:	2302      	movs	r3, #2
 8005380:	e0ff      	b.n	8005582 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b14      	cmp	r3, #20
 800538e:	f200 80f0 	bhi.w	8005572 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005392:	a201      	add	r2, pc, #4	@ (adr r2, 8005398 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005398:	080053ed 	.word	0x080053ed
 800539c:	08005573 	.word	0x08005573
 80053a0:	08005573 	.word	0x08005573
 80053a4:	08005573 	.word	0x08005573
 80053a8:	0800542d 	.word	0x0800542d
 80053ac:	08005573 	.word	0x08005573
 80053b0:	08005573 	.word	0x08005573
 80053b4:	08005573 	.word	0x08005573
 80053b8:	0800546f 	.word	0x0800546f
 80053bc:	08005573 	.word	0x08005573
 80053c0:	08005573 	.word	0x08005573
 80053c4:	08005573 	.word	0x08005573
 80053c8:	080054af 	.word	0x080054af
 80053cc:	08005573 	.word	0x08005573
 80053d0:	08005573 	.word	0x08005573
 80053d4:	08005573 	.word	0x08005573
 80053d8:	080054f1 	.word	0x080054f1
 80053dc:	08005573 	.word	0x08005573
 80053e0:	08005573 	.word	0x08005573
 80053e4:	08005573 	.word	0x08005573
 80053e8:	08005531 	.word	0x08005531
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68b9      	ldr	r1, [r7, #8]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 faa2 	bl	800593c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	699a      	ldr	r2, [r3, #24]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f042 0208 	orr.w	r2, r2, #8
 8005406:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	699a      	ldr	r2, [r3, #24]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f022 0204 	bic.w	r2, r2, #4
 8005416:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6999      	ldr	r1, [r3, #24]
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	691a      	ldr	r2, [r3, #16]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	430a      	orrs	r2, r1
 8005428:	619a      	str	r2, [r3, #24]
      break;
 800542a:	e0a5      	b.n	8005578 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68b9      	ldr	r1, [r7, #8]
 8005432:	4618      	mov	r0, r3
 8005434:	f000 faf4 	bl	8005a20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	699a      	ldr	r2, [r3, #24]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005446:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	699a      	ldr	r2, [r3, #24]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005456:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6999      	ldr	r1, [r3, #24]
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	021a      	lsls	r2, r3, #8
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	619a      	str	r2, [r3, #24]
      break;
 800546c:	e084      	b.n	8005578 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68b9      	ldr	r1, [r7, #8]
 8005474:	4618      	mov	r0, r3
 8005476:	f000 fb4b 	bl	8005b10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	69da      	ldr	r2, [r3, #28]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f042 0208 	orr.w	r2, r2, #8
 8005488:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69da      	ldr	r2, [r3, #28]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 0204 	bic.w	r2, r2, #4
 8005498:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	69d9      	ldr	r1, [r3, #28]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	691a      	ldr	r2, [r3, #16]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	430a      	orrs	r2, r1
 80054aa:	61da      	str	r2, [r3, #28]
      break;
 80054ac:	e064      	b.n	8005578 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68b9      	ldr	r1, [r7, #8]
 80054b4:	4618      	mov	r0, r3
 80054b6:	f000 fba1 	bl	8005bfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	69da      	ldr	r2, [r3, #28]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	69da      	ldr	r2, [r3, #28]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	69d9      	ldr	r1, [r3, #28]
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	021a      	lsls	r2, r3, #8
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	61da      	str	r2, [r3, #28]
      break;
 80054ee:	e043      	b.n	8005578 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68b9      	ldr	r1, [r7, #8]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 fbd8 	bl	8005cac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f042 0208 	orr.w	r2, r2, #8
 800550a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 0204 	bic.w	r2, r2, #4
 800551a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	691a      	ldr	r2, [r3, #16]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	430a      	orrs	r2, r1
 800552c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800552e:	e023      	b.n	8005578 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68b9      	ldr	r1, [r7, #8]
 8005536:	4618      	mov	r0, r3
 8005538:	f000 fc0a 	bl	8005d50 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800554a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800555a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	021a      	lsls	r2, r3, #8
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	430a      	orrs	r2, r1
 800556e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005570:	e002      	b.n	8005578 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	75fb      	strb	r3, [r7, #23]
      break;
 8005576:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005580:	7dfb      	ldrb	r3, [r7, #23]
}
 8005582:	4618      	mov	r0, r3
 8005584:	3718      	adds	r7, #24
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop

0800558c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005596:	2300      	movs	r3, #0
 8005598:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d101      	bne.n	80055a8 <HAL_TIM_ConfigClockSource+0x1c>
 80055a4:	2302      	movs	r3, #2
 80055a6:	e0b4      	b.n	8005712 <HAL_TIM_ConfigClockSource+0x186>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	4b56      	ldr	r3, [pc, #344]	@ (800571c <HAL_TIM_ConfigClockSource+0x190>)
 80055c4:	4013      	ands	r3, r2
 80055c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055e0:	d03e      	beq.n	8005660 <HAL_TIM_ConfigClockSource+0xd4>
 80055e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055e6:	f200 8087 	bhi.w	80056f8 <HAL_TIM_ConfigClockSource+0x16c>
 80055ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055ee:	f000 8086 	beq.w	80056fe <HAL_TIM_ConfigClockSource+0x172>
 80055f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055f6:	d87f      	bhi.n	80056f8 <HAL_TIM_ConfigClockSource+0x16c>
 80055f8:	2b70      	cmp	r3, #112	@ 0x70
 80055fa:	d01a      	beq.n	8005632 <HAL_TIM_ConfigClockSource+0xa6>
 80055fc:	2b70      	cmp	r3, #112	@ 0x70
 80055fe:	d87b      	bhi.n	80056f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005600:	2b60      	cmp	r3, #96	@ 0x60
 8005602:	d050      	beq.n	80056a6 <HAL_TIM_ConfigClockSource+0x11a>
 8005604:	2b60      	cmp	r3, #96	@ 0x60
 8005606:	d877      	bhi.n	80056f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005608:	2b50      	cmp	r3, #80	@ 0x50
 800560a:	d03c      	beq.n	8005686 <HAL_TIM_ConfigClockSource+0xfa>
 800560c:	2b50      	cmp	r3, #80	@ 0x50
 800560e:	d873      	bhi.n	80056f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005610:	2b40      	cmp	r3, #64	@ 0x40
 8005612:	d058      	beq.n	80056c6 <HAL_TIM_ConfigClockSource+0x13a>
 8005614:	2b40      	cmp	r3, #64	@ 0x40
 8005616:	d86f      	bhi.n	80056f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005618:	2b30      	cmp	r3, #48	@ 0x30
 800561a:	d064      	beq.n	80056e6 <HAL_TIM_ConfigClockSource+0x15a>
 800561c:	2b30      	cmp	r3, #48	@ 0x30
 800561e:	d86b      	bhi.n	80056f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005620:	2b20      	cmp	r3, #32
 8005622:	d060      	beq.n	80056e6 <HAL_TIM_ConfigClockSource+0x15a>
 8005624:	2b20      	cmp	r3, #32
 8005626:	d867      	bhi.n	80056f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005628:	2b00      	cmp	r3, #0
 800562a:	d05c      	beq.n	80056e6 <HAL_TIM_ConfigClockSource+0x15a>
 800562c:	2b10      	cmp	r3, #16
 800562e:	d05a      	beq.n	80056e6 <HAL_TIM_ConfigClockSource+0x15a>
 8005630:	e062      	b.n	80056f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005642:	f000 fd7d 	bl	8006140 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005654:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	609a      	str	r2, [r3, #8]
      break;
 800565e:	e04f      	b.n	8005700 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005670:	f000 fd66 	bl	8006140 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689a      	ldr	r2, [r3, #8]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005682:	609a      	str	r2, [r3, #8]
      break;
 8005684:	e03c      	b.n	8005700 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005692:	461a      	mov	r2, r3
 8005694:	f000 fc24 	bl	8005ee0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2150      	movs	r1, #80	@ 0x50
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 fd33 	bl	800610a <TIM_ITRx_SetConfig>
      break;
 80056a4:	e02c      	b.n	8005700 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056b2:	461a      	mov	r2, r3
 80056b4:	f000 fc80 	bl	8005fb8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2160      	movs	r1, #96	@ 0x60
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 fd23 	bl	800610a <TIM_ITRx_SetConfig>
      break;
 80056c4:	e01c      	b.n	8005700 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056d2:	461a      	mov	r2, r3
 80056d4:	f000 fc04 	bl	8005ee0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2140      	movs	r1, #64	@ 0x40
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 fd13 	bl	800610a <TIM_ITRx_SetConfig>
      break;
 80056e4:	e00c      	b.n	8005700 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4619      	mov	r1, r3
 80056f0:	4610      	mov	r0, r2
 80056f2:	f000 fd0a 	bl	800610a <TIM_ITRx_SetConfig>
      break;
 80056f6:	e003      	b.n	8005700 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	73fb      	strb	r3, [r7, #15]
      break;
 80056fc:	e000      	b.n	8005700 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005710:	7bfb      	ldrb	r3, [r7, #15]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	fffeff88 	.word	0xfffeff88

08005720 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800572a:	2300      	movs	r3, #0
 800572c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2b0c      	cmp	r3, #12
 8005732:	d831      	bhi.n	8005798 <HAL_TIM_ReadCapturedValue+0x78>
 8005734:	a201      	add	r2, pc, #4	@ (adr r2, 800573c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573a:	bf00      	nop
 800573c:	08005771 	.word	0x08005771
 8005740:	08005799 	.word	0x08005799
 8005744:	08005799 	.word	0x08005799
 8005748:	08005799 	.word	0x08005799
 800574c:	0800577b 	.word	0x0800577b
 8005750:	08005799 	.word	0x08005799
 8005754:	08005799 	.word	0x08005799
 8005758:	08005799 	.word	0x08005799
 800575c:	08005785 	.word	0x08005785
 8005760:	08005799 	.word	0x08005799
 8005764:	08005799 	.word	0x08005799
 8005768:	08005799 	.word	0x08005799
 800576c:	0800578f 	.word	0x0800578f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005776:	60fb      	str	r3, [r7, #12]

      break;
 8005778:	e00f      	b.n	800579a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005780:	60fb      	str	r3, [r7, #12]

      break;
 8005782:	e00a      	b.n	800579a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800578a:	60fb      	str	r3, [r7, #12]

      break;
 800578c:	e005      	b.n	800579a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005794:	60fb      	str	r3, [r7, #12]

      break;
 8005796:	e000      	b.n	800579a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005798:	bf00      	nop
  }

  return tmpreg;
 800579a:	68fb      	ldr	r3, [r7, #12]
}
 800579c:	4618      	mov	r0, r3
 800579e:	3714      	adds	r7, #20
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a46      	ldr	r2, [pc, #280]	@ (8005910 <TIM_Base_SetConfig+0x12c>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d013      	beq.n	8005824 <TIM_Base_SetConfig+0x40>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005802:	d00f      	beq.n	8005824 <TIM_Base_SetConfig+0x40>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a43      	ldr	r2, [pc, #268]	@ (8005914 <TIM_Base_SetConfig+0x130>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d00b      	beq.n	8005824 <TIM_Base_SetConfig+0x40>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a42      	ldr	r2, [pc, #264]	@ (8005918 <TIM_Base_SetConfig+0x134>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d007      	beq.n	8005824 <TIM_Base_SetConfig+0x40>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a41      	ldr	r2, [pc, #260]	@ (800591c <TIM_Base_SetConfig+0x138>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d003      	beq.n	8005824 <TIM_Base_SetConfig+0x40>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a40      	ldr	r2, [pc, #256]	@ (8005920 <TIM_Base_SetConfig+0x13c>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d108      	bne.n	8005836 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800582a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	4313      	orrs	r3, r2
 8005834:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a35      	ldr	r2, [pc, #212]	@ (8005910 <TIM_Base_SetConfig+0x12c>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d02b      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005844:	d027      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a32      	ldr	r2, [pc, #200]	@ (8005914 <TIM_Base_SetConfig+0x130>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d023      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a31      	ldr	r2, [pc, #196]	@ (8005918 <TIM_Base_SetConfig+0x134>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d01f      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a30      	ldr	r2, [pc, #192]	@ (800591c <TIM_Base_SetConfig+0x138>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d01b      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a2f      	ldr	r2, [pc, #188]	@ (8005920 <TIM_Base_SetConfig+0x13c>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d017      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a2e      	ldr	r2, [pc, #184]	@ (8005924 <TIM_Base_SetConfig+0x140>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d013      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a2d      	ldr	r2, [pc, #180]	@ (8005928 <TIM_Base_SetConfig+0x144>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d00f      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a2c      	ldr	r2, [pc, #176]	@ (800592c <TIM_Base_SetConfig+0x148>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d00b      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a2b      	ldr	r2, [pc, #172]	@ (8005930 <TIM_Base_SetConfig+0x14c>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d007      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a2a      	ldr	r2, [pc, #168]	@ (8005934 <TIM_Base_SetConfig+0x150>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d003      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a29      	ldr	r2, [pc, #164]	@ (8005938 <TIM_Base_SetConfig+0x154>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d108      	bne.n	80058a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800589c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	689a      	ldr	r2, [r3, #8]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a10      	ldr	r2, [pc, #64]	@ (8005910 <TIM_Base_SetConfig+0x12c>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d003      	beq.n	80058dc <TIM_Base_SetConfig+0xf8>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a12      	ldr	r2, [pc, #72]	@ (8005920 <TIM_Base_SetConfig+0x13c>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d103      	bne.n	80058e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	691a      	ldr	r2, [r3, #16]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d105      	bne.n	8005902 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	f023 0201 	bic.w	r2, r3, #1
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	611a      	str	r2, [r3, #16]
  }
}
 8005902:	bf00      	nop
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	40010000 	.word	0x40010000
 8005914:	40000400 	.word	0x40000400
 8005918:	40000800 	.word	0x40000800
 800591c:	40000c00 	.word	0x40000c00
 8005920:	40010400 	.word	0x40010400
 8005924:	40014000 	.word	0x40014000
 8005928:	40014400 	.word	0x40014400
 800592c:	40014800 	.word	0x40014800
 8005930:	40001800 	.word	0x40001800
 8005934:	40001c00 	.word	0x40001c00
 8005938:	40002000 	.word	0x40002000

0800593c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800593c:	b480      	push	{r7}
 800593e:	b087      	sub	sp, #28
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a1b      	ldr	r3, [r3, #32]
 8005950:	f023 0201 	bic.w	r2, r3, #1
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4b2b      	ldr	r3, [pc, #172]	@ (8005a14 <TIM_OC1_SetConfig+0xd8>)
 8005968:	4013      	ands	r3, r2
 800596a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f023 0303 	bic.w	r3, r3, #3
 8005972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	4313      	orrs	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f023 0302 	bic.w	r3, r3, #2
 8005984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	4313      	orrs	r3, r2
 800598e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a21      	ldr	r2, [pc, #132]	@ (8005a18 <TIM_OC1_SetConfig+0xdc>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d003      	beq.n	80059a0 <TIM_OC1_SetConfig+0x64>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a20      	ldr	r2, [pc, #128]	@ (8005a1c <TIM_OC1_SetConfig+0xe0>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d10c      	bne.n	80059ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	f023 0308 	bic.w	r3, r3, #8
 80059a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f023 0304 	bic.w	r3, r3, #4
 80059b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a16      	ldr	r2, [pc, #88]	@ (8005a18 <TIM_OC1_SetConfig+0xdc>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d003      	beq.n	80059ca <TIM_OC1_SetConfig+0x8e>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a15      	ldr	r2, [pc, #84]	@ (8005a1c <TIM_OC1_SetConfig+0xe0>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d111      	bne.n	80059ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	621a      	str	r2, [r3, #32]
}
 8005a08:	bf00      	nop
 8005a0a:	371c      	adds	r7, #28
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	fffeff8f 	.word	0xfffeff8f
 8005a18:	40010000 	.word	0x40010000
 8005a1c:	40010400 	.word	0x40010400

08005a20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b087      	sub	sp, #28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a1b      	ldr	r3, [r3, #32]
 8005a34:	f023 0210 	bic.w	r2, r3, #16
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	4b2e      	ldr	r3, [pc, #184]	@ (8005b04 <TIM_OC2_SetConfig+0xe4>)
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	021b      	lsls	r3, r3, #8
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f023 0320 	bic.w	r3, r3, #32
 8005a6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	011b      	lsls	r3, r3, #4
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a23      	ldr	r2, [pc, #140]	@ (8005b08 <TIM_OC2_SetConfig+0xe8>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d003      	beq.n	8005a88 <TIM_OC2_SetConfig+0x68>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a22      	ldr	r2, [pc, #136]	@ (8005b0c <TIM_OC2_SetConfig+0xec>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d10d      	bne.n	8005aa4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	011b      	lsls	r3, r3, #4
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005aa2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a18      	ldr	r2, [pc, #96]	@ (8005b08 <TIM_OC2_SetConfig+0xe8>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d003      	beq.n	8005ab4 <TIM_OC2_SetConfig+0x94>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a17      	ldr	r2, [pc, #92]	@ (8005b0c <TIM_OC2_SetConfig+0xec>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d113      	bne.n	8005adc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005aba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	695b      	ldr	r3, [r3, #20]
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	685a      	ldr	r2, [r3, #4]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	621a      	str	r2, [r3, #32]
}
 8005af6:	bf00      	nop
 8005af8:	371c      	adds	r7, #28
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	feff8fff 	.word	0xfeff8fff
 8005b08:	40010000 	.word	0x40010000
 8005b0c:	40010400 	.word	0x40010400

08005b10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b087      	sub	sp, #28
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	4b2d      	ldr	r3, [pc, #180]	@ (8005bf0 <TIM_OC3_SetConfig+0xe0>)
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f023 0303 	bic.w	r3, r3, #3
 8005b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	021b      	lsls	r3, r3, #8
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a22      	ldr	r2, [pc, #136]	@ (8005bf4 <TIM_OC3_SetConfig+0xe4>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d003      	beq.n	8005b76 <TIM_OC3_SetConfig+0x66>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a21      	ldr	r2, [pc, #132]	@ (8005bf8 <TIM_OC3_SetConfig+0xe8>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d10d      	bne.n	8005b92 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	021b      	lsls	r3, r3, #8
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a17      	ldr	r2, [pc, #92]	@ (8005bf4 <TIM_OC3_SetConfig+0xe4>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d003      	beq.n	8005ba2 <TIM_OC3_SetConfig+0x92>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a16      	ldr	r2, [pc, #88]	@ (8005bf8 <TIM_OC3_SetConfig+0xe8>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d113      	bne.n	8005bca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ba8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	011b      	lsls	r3, r3, #4
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	011b      	lsls	r3, r3, #4
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	685a      	ldr	r2, [r3, #4]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	621a      	str	r2, [r3, #32]
}
 8005be4:	bf00      	nop
 8005be6:	371c      	adds	r7, #28
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	fffeff8f 	.word	0xfffeff8f
 8005bf4:	40010000 	.word	0x40010000
 8005bf8:	40010400 	.word	0x40010400

08005bfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a1b      	ldr	r3, [r3, #32]
 8005c10:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	69db      	ldr	r3, [r3, #28]
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	4b1e      	ldr	r3, [pc, #120]	@ (8005ca0 <TIM_OC4_SetConfig+0xa4>)
 8005c28:	4013      	ands	r3, r2
 8005c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	021b      	lsls	r3, r3, #8
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	031b      	lsls	r3, r3, #12
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a13      	ldr	r2, [pc, #76]	@ (8005ca4 <TIM_OC4_SetConfig+0xa8>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d003      	beq.n	8005c64 <TIM_OC4_SetConfig+0x68>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a12      	ldr	r2, [pc, #72]	@ (8005ca8 <TIM_OC4_SetConfig+0xac>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d109      	bne.n	8005c78 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	019b      	lsls	r3, r3, #6
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	621a      	str	r2, [r3, #32]
}
 8005c92:	bf00      	nop
 8005c94:	371c      	adds	r7, #28
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	feff8fff 	.word	0xfeff8fff
 8005ca4:	40010000 	.word	0x40010000
 8005ca8:	40010400 	.word	0x40010400

08005cac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b087      	sub	sp, #28
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a1b      	ldr	r3, [r3, #32]
 8005cc0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8005d44 <TIM_OC5_SetConfig+0x98>)
 8005cd8:	4013      	ands	r3, r2
 8005cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005cec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	041b      	lsls	r3, r3, #16
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a12      	ldr	r2, [pc, #72]	@ (8005d48 <TIM_OC5_SetConfig+0x9c>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d003      	beq.n	8005d0a <TIM_OC5_SetConfig+0x5e>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a11      	ldr	r2, [pc, #68]	@ (8005d4c <TIM_OC5_SetConfig+0xa0>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d109      	bne.n	8005d1e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	021b      	lsls	r3, r3, #8
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	685a      	ldr	r2, [r3, #4]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	621a      	str	r2, [r3, #32]
}
 8005d38:	bf00      	nop
 8005d3a:	371c      	adds	r7, #28
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr
 8005d44:	fffeff8f 	.word	0xfffeff8f
 8005d48:	40010000 	.word	0x40010000
 8005d4c:	40010400 	.word	0x40010400

08005d50 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	4b1c      	ldr	r3, [pc, #112]	@ (8005dec <TIM_OC6_SetConfig+0x9c>)
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	021b      	lsls	r3, r3, #8
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005d92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	051b      	lsls	r3, r3, #20
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a13      	ldr	r2, [pc, #76]	@ (8005df0 <TIM_OC6_SetConfig+0xa0>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d003      	beq.n	8005db0 <TIM_OC6_SetConfig+0x60>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a12      	ldr	r2, [pc, #72]	@ (8005df4 <TIM_OC6_SetConfig+0xa4>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d109      	bne.n	8005dc4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005db6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	695b      	ldr	r3, [r3, #20]
 8005dbc:	029b      	lsls	r3, r3, #10
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	685a      	ldr	r2, [r3, #4]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	693a      	ldr	r2, [r7, #16]
 8005ddc:	621a      	str	r2, [r3, #32]
}
 8005dde:	bf00      	nop
 8005de0:	371c      	adds	r7, #28
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	feff8fff 	.word	0xfeff8fff
 8005df0:	40010000 	.word	0x40010000
 8005df4:	40010400 	.word	0x40010400

08005df8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b087      	sub	sp, #28
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
 8005e04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6a1b      	ldr	r3, [r3, #32]
 8005e10:	f023 0201 	bic.w	r2, r3, #1
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	4a28      	ldr	r2, [pc, #160]	@ (8005ec4 <TIM_TI1_SetConfig+0xcc>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d01b      	beq.n	8005e5e <TIM_TI1_SetConfig+0x66>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e2c:	d017      	beq.n	8005e5e <TIM_TI1_SetConfig+0x66>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	4a25      	ldr	r2, [pc, #148]	@ (8005ec8 <TIM_TI1_SetConfig+0xd0>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d013      	beq.n	8005e5e <TIM_TI1_SetConfig+0x66>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	4a24      	ldr	r2, [pc, #144]	@ (8005ecc <TIM_TI1_SetConfig+0xd4>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d00f      	beq.n	8005e5e <TIM_TI1_SetConfig+0x66>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	4a23      	ldr	r2, [pc, #140]	@ (8005ed0 <TIM_TI1_SetConfig+0xd8>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d00b      	beq.n	8005e5e <TIM_TI1_SetConfig+0x66>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	4a22      	ldr	r2, [pc, #136]	@ (8005ed4 <TIM_TI1_SetConfig+0xdc>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d007      	beq.n	8005e5e <TIM_TI1_SetConfig+0x66>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	4a21      	ldr	r2, [pc, #132]	@ (8005ed8 <TIM_TI1_SetConfig+0xe0>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d003      	beq.n	8005e5e <TIM_TI1_SetConfig+0x66>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	4a20      	ldr	r2, [pc, #128]	@ (8005edc <TIM_TI1_SetConfig+0xe4>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d101      	bne.n	8005e62 <TIM_TI1_SetConfig+0x6a>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e000      	b.n	8005e64 <TIM_TI1_SetConfig+0x6c>
 8005e62:	2300      	movs	r3, #0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d008      	beq.n	8005e7a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	f023 0303 	bic.w	r3, r3, #3
 8005e6e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	617b      	str	r3, [r7, #20]
 8005e78:	e003      	b.n	8005e82 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	f043 0301 	orr.w	r3, r3, #1
 8005e80:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	011b      	lsls	r3, r3, #4
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	f023 030a 	bic.w	r3, r3, #10
 8005e9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	f003 030a 	and.w	r3, r3, #10
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	621a      	str	r2, [r3, #32]
}
 8005eb6:	bf00      	nop
 8005eb8:	371c      	adds	r7, #28
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	40010000 	.word	0x40010000
 8005ec8:	40000400 	.word	0x40000400
 8005ecc:	40000800 	.word	0x40000800
 8005ed0:	40000c00 	.word	0x40000c00
 8005ed4:	40010400 	.word	0x40010400
 8005ed8:	40014000 	.word	0x40014000
 8005edc:	40001800 	.word	0x40001800

08005ee0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b087      	sub	sp, #28
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	f023 0201 	bic.w	r2, r3, #1
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	011b      	lsls	r3, r3, #4
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	f023 030a 	bic.w	r3, r3, #10
 8005f1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	621a      	str	r2, [r3, #32]
}
 8005f32:	bf00      	nop
 8005f34:	371c      	adds	r7, #28
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b087      	sub	sp, #28
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	60f8      	str	r0, [r7, #12]
 8005f46:	60b9      	str	r1, [r7, #8]
 8005f48:	607a      	str	r2, [r7, #4]
 8005f4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	f023 0210 	bic.w	r2, r3, #16
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	021b      	lsls	r3, r3, #8
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	031b      	lsls	r3, r3, #12
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f90:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	011b      	lsls	r3, r3, #4
 8005f96:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	621a      	str	r2, [r3, #32]
}
 8005fac:	bf00      	nop
 8005fae:	371c      	adds	r7, #28
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b087      	sub	sp, #28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6a1b      	ldr	r3, [r3, #32]
 8005fc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	f023 0210 	bic.w	r2, r3, #16
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005fe2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	031b      	lsls	r3, r3, #12
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005ff4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	011b      	lsls	r3, r3, #4
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	621a      	str	r2, [r3, #32]
}
 800600c:	bf00      	nop
 800600e:	371c      	adds	r7, #28
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006018:	b480      	push	{r7}
 800601a:	b087      	sub	sp, #28
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
 8006024:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	69db      	ldr	r3, [r3, #28]
 800603c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	f023 0303 	bic.w	r3, r3, #3
 8006044:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4313      	orrs	r3, r2
 800604c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006054:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	011b      	lsls	r3, r3, #4
 800605a:	b2db      	uxtb	r3, r3
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	4313      	orrs	r3, r2
 8006060:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006068:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	021b      	lsls	r3, r3, #8
 800606e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	4313      	orrs	r3, r2
 8006076:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	621a      	str	r2, [r3, #32]
}
 8006084:	bf00      	nop
 8006086:	371c      	adds	r7, #28
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006090:	b480      	push	{r7}
 8006092:	b087      	sub	sp, #28
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
 800609c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6a1b      	ldr	r3, [r3, #32]
 80060a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	69db      	ldr	r3, [r3, #28]
 80060b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060bc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	021b      	lsls	r3, r3, #8
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80060ce:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	031b      	lsls	r3, r3, #12
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	4313      	orrs	r3, r2
 80060da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80060e2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	031b      	lsls	r3, r3, #12
 80060e8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	621a      	str	r2, [r3, #32]
}
 80060fe:	bf00      	nop
 8006100:	371c      	adds	r7, #28
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr

0800610a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800610a:	b480      	push	{r7}
 800610c:	b085      	sub	sp, #20
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
 8006112:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006120:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	4313      	orrs	r3, r2
 8006128:	f043 0307 	orr.w	r3, r3, #7
 800612c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	609a      	str	r2, [r3, #8]
}
 8006134:	bf00      	nop
 8006136:	3714      	adds	r7, #20
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006140:	b480      	push	{r7}
 8006142:	b087      	sub	sp, #28
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
 800614c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800615a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	021a      	lsls	r2, r3, #8
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	431a      	orrs	r2, r3
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	4313      	orrs	r3, r2
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	4313      	orrs	r3, r2
 800616c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	609a      	str	r2, [r3, #8]
}
 8006174:	bf00      	nop
 8006176:	371c      	adds	r7, #28
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006180:	b480      	push	{r7}
 8006182:	b087      	sub	sp, #28
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	f003 031f 	and.w	r3, r3, #31
 8006192:	2201      	movs	r2, #1
 8006194:	fa02 f303 	lsl.w	r3, r2, r3
 8006198:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6a1a      	ldr	r2, [r3, #32]
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	43db      	mvns	r3, r3
 80061a2:	401a      	ands	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6a1a      	ldr	r2, [r3, #32]
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	f003 031f 	and.w	r3, r3, #31
 80061b2:	6879      	ldr	r1, [r7, #4]
 80061b4:	fa01 f303 	lsl.w	r3, r1, r3
 80061b8:	431a      	orrs	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	621a      	str	r2, [r3, #32]
}
 80061be:	bf00      	nop
 80061c0:	371c      	adds	r7, #28
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
	...

080061cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d101      	bne.n	80061e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061e0:	2302      	movs	r3, #2
 80061e2:	e06d      	b.n	80062c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a30      	ldr	r2, [pc, #192]	@ (80062cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d004      	beq.n	8006218 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a2f      	ldr	r2, [pc, #188]	@ (80062d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d108      	bne.n	800622a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800621e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006230:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	4313      	orrs	r3, r2
 800623a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a20      	ldr	r2, [pc, #128]	@ (80062cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d022      	beq.n	8006294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006256:	d01d      	beq.n	8006294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a1d      	ldr	r2, [pc, #116]	@ (80062d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d018      	beq.n	8006294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a1c      	ldr	r2, [pc, #112]	@ (80062d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d013      	beq.n	8006294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a1a      	ldr	r2, [pc, #104]	@ (80062dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d00e      	beq.n	8006294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a15      	ldr	r2, [pc, #84]	@ (80062d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d009      	beq.n	8006294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a16      	ldr	r2, [pc, #88]	@ (80062e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d004      	beq.n	8006294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a15      	ldr	r2, [pc, #84]	@ (80062e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d10c      	bne.n	80062ae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800629a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3714      	adds	r7, #20
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr
 80062cc:	40010000 	.word	0x40010000
 80062d0:	40010400 	.word	0x40010400
 80062d4:	40000400 	.word	0x40000400
 80062d8:	40000800 	.word	0x40000800
 80062dc:	40000c00 	.word	0x40000c00
 80062e0:	40014000 	.word	0x40014000
 80062e4:	40001800 	.word	0x40001800

080062e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d101      	bne.n	8006304 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006300:	2302      	movs	r3, #2
 8006302:	e065      	b.n	80063d0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	4313      	orrs	r3, r2
 8006318:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	4313      	orrs	r3, r2
 8006326:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	4313      	orrs	r3, r2
 8006334:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4313      	orrs	r3, r2
 8006342:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	4313      	orrs	r3, r2
 8006350:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	4313      	orrs	r3, r2
 800635e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800636a:	4313      	orrs	r3, r2
 800636c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	041b      	lsls	r3, r3, #16
 800637a:	4313      	orrs	r3, r2
 800637c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a16      	ldr	r2, [pc, #88]	@ (80063dc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d004      	beq.n	8006392 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a14      	ldr	r2, [pc, #80]	@ (80063e0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d115      	bne.n	80063be <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800639c:	051b      	lsls	r3, r3, #20
 800639e:	4313      	orrs	r3, r2
 80063a0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	69db      	ldr	r3, [r3, #28]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	40010000 	.word	0x40010000
 80063e0:	40010400 	.word	0x40010400

080063e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d101      	bne.n	8006432 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e040      	b.n	80064b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006436:	2b00      	cmp	r3, #0
 8006438:	d106      	bne.n	8006448 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f7fb fd98 	bl	8001f78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2224      	movs	r2, #36	@ 0x24
 800644c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f022 0201 	bic.w	r2, r2, #1
 800645c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006462:	2b00      	cmp	r3, #0
 8006464:	d002      	beq.n	800646c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fe36 	bl	80070d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 fbcf 	bl	8006c10 <UART_SetConfig>
 8006472:	4603      	mov	r3, r0
 8006474:	2b01      	cmp	r3, #1
 8006476:	d101      	bne.n	800647c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e01b      	b.n	80064b4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685a      	ldr	r2, [r3, #4]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800648a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	689a      	ldr	r2, [r3, #8]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800649a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f042 0201 	orr.w	r2, r2, #1
 80064aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 feb5 	bl	800721c <UART_CheckIdleState>
 80064b2:	4603      	mov	r3, r0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3708      	adds	r7, #8
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80064bc:	b480      	push	{r7}
 80064be:	b08b      	sub	sp, #44	@ 0x2c
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	4613      	mov	r3, r2
 80064c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064ce:	2b20      	cmp	r3, #32
 80064d0:	d147      	bne.n	8006562 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d002      	beq.n	80064de <HAL_UART_Transmit_IT+0x22>
 80064d8:	88fb      	ldrh	r3, [r7, #6]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e040      	b.n	8006564 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	88fa      	ldrh	r2, [r7, #6]
 80064ec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	88fa      	ldrh	r2, [r7, #6]
 80064f4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2221      	movs	r2, #33	@ 0x21
 800650a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006514:	d107      	bne.n	8006526 <HAL_UART_Transmit_IT+0x6a>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d103      	bne.n	8006526 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	4a13      	ldr	r2, [pc, #76]	@ (8006570 <HAL_UART_Transmit_IT+0xb4>)
 8006522:	66da      	str	r2, [r3, #108]	@ 0x6c
 8006524:	e002      	b.n	800652c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	4a12      	ldr	r2, [pc, #72]	@ (8006574 <HAL_UART_Transmit_IT+0xb8>)
 800652a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	e853 3f00 	ldrex	r3, [r3]
 8006538:	613b      	str	r3, [r7, #16]
   return(result);
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006540:	627b      	str	r3, [r7, #36]	@ 0x24
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	461a      	mov	r2, r3
 8006548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654a:	623b      	str	r3, [r7, #32]
 800654c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654e:	69f9      	ldr	r1, [r7, #28]
 8006550:	6a3a      	ldr	r2, [r7, #32]
 8006552:	e841 2300 	strex	r3, r2, [r1]
 8006556:	61bb      	str	r3, [r7, #24]
   return(result);
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1e6      	bne.n	800652c <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800655e:	2300      	movs	r3, #0
 8006560:	e000      	b.n	8006564 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006562:	2302      	movs	r3, #2
  }
}
 8006564:	4618      	mov	r0, r3
 8006566:	372c      	adds	r7, #44	@ 0x2c
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr
 8006570:	0800777f 	.word	0x0800777f
 8006574:	080076c9 	.word	0x080076c9

08006578 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b08a      	sub	sp, #40	@ 0x28
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	4613      	mov	r3, r2
 8006584:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800658c:	2b20      	cmp	r3, #32
 800658e:	d132      	bne.n	80065f6 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d002      	beq.n	800659c <HAL_UART_Receive_IT+0x24>
 8006596:	88fb      	ldrh	r3, [r7, #6]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e02b      	b.n	80065f8 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d018      	beq.n	80065e6 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	e853 3f00 	ldrex	r3, [r3]
 80065c0:	613b      	str	r3, [r7, #16]
   return(result);
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80065c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	461a      	mov	r2, r3
 80065d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d2:	623b      	str	r3, [r7, #32]
 80065d4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d6:	69f9      	ldr	r1, [r7, #28]
 80065d8:	6a3a      	ldr	r2, [r7, #32]
 80065da:	e841 2300 	strex	r3, r2, [r1]
 80065de:	61bb      	str	r3, [r7, #24]
   return(result);
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1e6      	bne.n	80065b4 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80065e6:	88fb      	ldrh	r3, [r7, #6]
 80065e8:	461a      	mov	r2, r3
 80065ea:	68b9      	ldr	r1, [r7, #8]
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f000 ff2b 	bl	8007448 <UART_Start_Receive_IT>
 80065f2:	4603      	mov	r3, r0
 80065f4:	e000      	b.n	80065f8 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80065f6:	2302      	movs	r3, #2
  }
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3728      	adds	r7, #40	@ 0x28
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b0ba      	sub	sp, #232	@ 0xe8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006626:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800662a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800662e:	4013      	ands	r3, r2
 8006630:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006634:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006638:	2b00      	cmp	r3, #0
 800663a:	d115      	bne.n	8006668 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800663c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006640:	f003 0320 	and.w	r3, r3, #32
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00f      	beq.n	8006668 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800664c:	f003 0320 	and.w	r3, r3, #32
 8006650:	2b00      	cmp	r3, #0
 8006652:	d009      	beq.n	8006668 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 82ac 	beq.w	8006bb6 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	4798      	blx	r3
      }
      return;
 8006666:	e2a6      	b.n	8006bb6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006668:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 8117 	beq.w	80068a0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	2b00      	cmp	r3, #0
 800667c:	d106      	bne.n	800668c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800667e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006682:	4b85      	ldr	r3, [pc, #532]	@ (8006898 <HAL_UART_IRQHandler+0x298>)
 8006684:	4013      	ands	r3, r2
 8006686:	2b00      	cmp	r3, #0
 8006688:	f000 810a 	beq.w	80068a0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800668c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	2b00      	cmp	r3, #0
 8006696:	d011      	beq.n	80066bc <HAL_UART_IRQHandler+0xbc>
 8006698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800669c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00b      	beq.n	80066bc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2201      	movs	r2, #1
 80066aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066b2:	f043 0201 	orr.w	r2, r3, #1
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066c0:	f003 0302 	and.w	r3, r3, #2
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d011      	beq.n	80066ec <HAL_UART_IRQHandler+0xec>
 80066c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00b      	beq.n	80066ec <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2202      	movs	r2, #2
 80066da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066e2:	f043 0204 	orr.w	r2, r3, #4
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066f0:	f003 0304 	and.w	r3, r3, #4
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d011      	beq.n	800671c <HAL_UART_IRQHandler+0x11c>
 80066f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066fc:	f003 0301 	and.w	r3, r3, #1
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00b      	beq.n	800671c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2204      	movs	r2, #4
 800670a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006712:	f043 0202 	orr.w	r2, r3, #2
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800671c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006720:	f003 0308 	and.w	r3, r3, #8
 8006724:	2b00      	cmp	r3, #0
 8006726:	d017      	beq.n	8006758 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800672c:	f003 0320 	and.w	r3, r3, #32
 8006730:	2b00      	cmp	r3, #0
 8006732:	d105      	bne.n	8006740 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006734:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006738:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00b      	beq.n	8006758 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2208      	movs	r2, #8
 8006746:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800674e:	f043 0208 	orr.w	r2, r3, #8
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800675c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006760:	2b00      	cmp	r3, #0
 8006762:	d012      	beq.n	800678a <HAL_UART_IRQHandler+0x18a>
 8006764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006768:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00c      	beq.n	800678a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006778:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006780:	f043 0220 	orr.w	r2, r3, #32
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006790:	2b00      	cmp	r3, #0
 8006792:	f000 8212 	beq.w	8006bba <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800679a:	f003 0320 	and.w	r3, r3, #32
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00d      	beq.n	80067be <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80067a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067a6:	f003 0320 	and.w	r3, r3, #32
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d007      	beq.n	80067be <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d003      	beq.n	80067be <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067d2:	2b40      	cmp	r3, #64	@ 0x40
 80067d4:	d005      	beq.n	80067e2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80067d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067da:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d04f      	beq.n	8006882 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 fef6 	bl	80075d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067f2:	2b40      	cmp	r3, #64	@ 0x40
 80067f4:	d141      	bne.n	800687a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	3308      	adds	r3, #8
 80067fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006800:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006804:	e853 3f00 	ldrex	r3, [r3]
 8006808:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800680c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006810:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006814:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	3308      	adds	r3, #8
 800681e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006822:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006826:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800682e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006832:	e841 2300 	strex	r3, r2, [r1]
 8006836:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800683a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1d9      	bne.n	80067f6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006846:	2b00      	cmp	r3, #0
 8006848:	d013      	beq.n	8006872 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800684e:	4a13      	ldr	r2, [pc, #76]	@ (800689c <HAL_UART_IRQHandler+0x29c>)
 8006850:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006856:	4618      	mov	r0, r3
 8006858:	f7fb ff20 	bl	800269c <HAL_DMA_Abort_IT>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d017      	beq.n	8006892 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800686c:	4610      	mov	r0, r2
 800686e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006870:	e00f      	b.n	8006892 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f9ac 	bl	8006bd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006878:	e00b      	b.n	8006892 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f9a8 	bl	8006bd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006880:	e007      	b.n	8006892 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f9a4 	bl	8006bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006890:	e193      	b.n	8006bba <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006892:	bf00      	nop
    return;
 8006894:	e191      	b.n	8006bba <HAL_UART_IRQHandler+0x5ba>
 8006896:	bf00      	nop
 8006898:	04000120 	.word	0x04000120
 800689c:	0800769d 	.word	0x0800769d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	f040 814c 	bne.w	8006b42 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80068aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068ae:	f003 0310 	and.w	r3, r3, #16
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f000 8145 	beq.w	8006b42 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80068b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068bc:	f003 0310 	and.w	r3, r3, #16
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 813e 	beq.w	8006b42 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2210      	movs	r2, #16
 80068cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068d8:	2b40      	cmp	r3, #64	@ 0x40
 80068da:	f040 80b6 	bne.w	8006a4a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068ea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f000 8165 	beq.w	8006bbe <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80068fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068fe:	429a      	cmp	r2, r3
 8006900:	f080 815d 	bcs.w	8006bbe <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800690a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006912:	69db      	ldr	r3, [r3, #28]
 8006914:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006918:	f000 8086 	beq.w	8006a28 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006924:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006928:	e853 3f00 	ldrex	r3, [r3]
 800692c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006930:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006934:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006938:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	461a      	mov	r2, r3
 8006942:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006946:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800694a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006952:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006956:	e841 2300 	strex	r3, r2, [r1]
 800695a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800695e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1da      	bne.n	800691c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	3308      	adds	r3, #8
 800696c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006970:	e853 3f00 	ldrex	r3, [r3]
 8006974:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006976:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006978:	f023 0301 	bic.w	r3, r3, #1
 800697c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	3308      	adds	r3, #8
 8006986:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800698a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800698e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006990:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006992:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006996:	e841 2300 	strex	r3, r2, [r1]
 800699a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800699c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1e1      	bne.n	8006966 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	3308      	adds	r3, #8
 80069a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80069ac:	e853 3f00 	ldrex	r3, [r3]
 80069b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80069b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	3308      	adds	r3, #8
 80069c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80069c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80069c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80069cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80069ce:	e841 2300 	strex	r3, r2, [r1]
 80069d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80069d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1e3      	bne.n	80069a2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2220      	movs	r2, #32
 80069de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069f0:	e853 3f00 	ldrex	r3, [r3]
 80069f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80069f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069f8:	f023 0310 	bic.w	r3, r3, #16
 80069fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	461a      	mov	r2, r3
 8006a06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a0c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a12:	e841 2300 	strex	r3, r2, [r1]
 8006a16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1e4      	bne.n	80069e8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fb fdca 	bl	80025bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	4619      	mov	r1, r3
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f8ce 	bl	8006be4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a48:	e0b9      	b.n	8006bbe <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f000 80ab 	beq.w	8006bc2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006a6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 80a6 	beq.w	8006bc2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a7e:	e853 3f00 	ldrex	r3, [r3]
 8006a82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	461a      	mov	r2, r3
 8006a94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006a98:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a9a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006aa0:	e841 2300 	strex	r3, r2, [r1]
 8006aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006aa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1e4      	bne.n	8006a76 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	3308      	adds	r3, #8
 8006ab2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab6:	e853 3f00 	ldrex	r3, [r3]
 8006aba:	623b      	str	r3, [r7, #32]
   return(result);
 8006abc:	6a3b      	ldr	r3, [r7, #32]
 8006abe:	f023 0301 	bic.w	r3, r3, #1
 8006ac2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	3308      	adds	r3, #8
 8006acc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006ad0:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ad6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ad8:	e841 2300 	strex	r3, r2, [r1]
 8006adc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1e3      	bne.n	8006aac <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2220      	movs	r2, #32
 8006ae8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	e853 3f00 	ldrex	r3, [r3]
 8006b04:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f023 0310 	bic.w	r3, r3, #16
 8006b0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	461a      	mov	r2, r3
 8006b16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006b1a:	61fb      	str	r3, [r7, #28]
 8006b1c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1e:	69b9      	ldr	r1, [r7, #24]
 8006b20:	69fa      	ldr	r2, [r7, #28]
 8006b22:	e841 2300 	strex	r3, r2, [r1]
 8006b26:	617b      	str	r3, [r7, #20]
   return(result);
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1e4      	bne.n	8006af8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2202      	movs	r2, #2
 8006b32:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b38:	4619      	mov	r1, r3
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f852 	bl	8006be4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b40:	e03f      	b.n	8006bc2 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00e      	beq.n	8006b6c <HAL_UART_IRQHandler+0x56c>
 8006b4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d008      	beq.n	8006b6c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006b62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 f849 	bl	8006bfc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b6a:	e02d      	b.n	8006bc8 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00e      	beq.n	8006b96 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d008      	beq.n	8006b96 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d01c      	beq.n	8006bc6 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	4798      	blx	r3
    }
    return;
 8006b94:	e017      	b.n	8006bc6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d012      	beq.n	8006bc8 <HAL_UART_IRQHandler+0x5c8>
 8006ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00c      	beq.n	8006bc8 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 fe45 	bl	800783e <UART_EndTransmit_IT>
    return;
 8006bb4:	e008      	b.n	8006bc8 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006bb6:	bf00      	nop
 8006bb8:	e006      	b.n	8006bc8 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006bba:	bf00      	nop
 8006bbc:	e004      	b.n	8006bc8 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006bbe:	bf00      	nop
 8006bc0:	e002      	b.n	8006bc8 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006bc2:	bf00      	nop
 8006bc4:	e000      	b.n	8006bc8 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006bc6:	bf00      	nop
  }

}
 8006bc8:	37e8      	adds	r7, #232	@ 0xe8
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop

08006bd0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	460b      	mov	r3, r1
 8006bee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006c04:	bf00      	nop
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b088      	sub	sp, #32
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	689a      	ldr	r2, [r3, #8]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	431a      	orrs	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	431a      	orrs	r2, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	69db      	ldr	r3, [r3, #28]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	4ba6      	ldr	r3, [pc, #664]	@ (8006ed4 <UART_SetConfig+0x2c4>)
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	6812      	ldr	r2, [r2, #0]
 8006c42:	6979      	ldr	r1, [r7, #20]
 8006c44:	430b      	orrs	r3, r1
 8006c46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68da      	ldr	r2, [r3, #12]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	430a      	orrs	r2, r1
 8006c5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	699b      	ldr	r3, [r3, #24]
 8006c62:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a1b      	ldr	r3, [r3, #32]
 8006c68:	697a      	ldr	r2, [r7, #20]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	697a      	ldr	r2, [r7, #20]
 8006c7e:	430a      	orrs	r2, r1
 8006c80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a94      	ldr	r2, [pc, #592]	@ (8006ed8 <UART_SetConfig+0x2c8>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d120      	bne.n	8006cce <UART_SetConfig+0xbe>
 8006c8c:	4b93      	ldr	r3, [pc, #588]	@ (8006edc <UART_SetConfig+0x2cc>)
 8006c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c92:	f003 0303 	and.w	r3, r3, #3
 8006c96:	2b03      	cmp	r3, #3
 8006c98:	d816      	bhi.n	8006cc8 <UART_SetConfig+0xb8>
 8006c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8006ca0 <UART_SetConfig+0x90>)
 8006c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca0:	08006cb1 	.word	0x08006cb1
 8006ca4:	08006cbd 	.word	0x08006cbd
 8006ca8:	08006cb7 	.word	0x08006cb7
 8006cac:	08006cc3 	.word	0x08006cc3
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	77fb      	strb	r3, [r7, #31]
 8006cb4:	e150      	b.n	8006f58 <UART_SetConfig+0x348>
 8006cb6:	2302      	movs	r3, #2
 8006cb8:	77fb      	strb	r3, [r7, #31]
 8006cba:	e14d      	b.n	8006f58 <UART_SetConfig+0x348>
 8006cbc:	2304      	movs	r3, #4
 8006cbe:	77fb      	strb	r3, [r7, #31]
 8006cc0:	e14a      	b.n	8006f58 <UART_SetConfig+0x348>
 8006cc2:	2308      	movs	r3, #8
 8006cc4:	77fb      	strb	r3, [r7, #31]
 8006cc6:	e147      	b.n	8006f58 <UART_SetConfig+0x348>
 8006cc8:	2310      	movs	r3, #16
 8006cca:	77fb      	strb	r3, [r7, #31]
 8006ccc:	e144      	b.n	8006f58 <UART_SetConfig+0x348>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a83      	ldr	r2, [pc, #524]	@ (8006ee0 <UART_SetConfig+0x2d0>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d132      	bne.n	8006d3e <UART_SetConfig+0x12e>
 8006cd8:	4b80      	ldr	r3, [pc, #512]	@ (8006edc <UART_SetConfig+0x2cc>)
 8006cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cde:	f003 030c 	and.w	r3, r3, #12
 8006ce2:	2b0c      	cmp	r3, #12
 8006ce4:	d828      	bhi.n	8006d38 <UART_SetConfig+0x128>
 8006ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8006cec <UART_SetConfig+0xdc>)
 8006ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cec:	08006d21 	.word	0x08006d21
 8006cf0:	08006d39 	.word	0x08006d39
 8006cf4:	08006d39 	.word	0x08006d39
 8006cf8:	08006d39 	.word	0x08006d39
 8006cfc:	08006d2d 	.word	0x08006d2d
 8006d00:	08006d39 	.word	0x08006d39
 8006d04:	08006d39 	.word	0x08006d39
 8006d08:	08006d39 	.word	0x08006d39
 8006d0c:	08006d27 	.word	0x08006d27
 8006d10:	08006d39 	.word	0x08006d39
 8006d14:	08006d39 	.word	0x08006d39
 8006d18:	08006d39 	.word	0x08006d39
 8006d1c:	08006d33 	.word	0x08006d33
 8006d20:	2300      	movs	r3, #0
 8006d22:	77fb      	strb	r3, [r7, #31]
 8006d24:	e118      	b.n	8006f58 <UART_SetConfig+0x348>
 8006d26:	2302      	movs	r3, #2
 8006d28:	77fb      	strb	r3, [r7, #31]
 8006d2a:	e115      	b.n	8006f58 <UART_SetConfig+0x348>
 8006d2c:	2304      	movs	r3, #4
 8006d2e:	77fb      	strb	r3, [r7, #31]
 8006d30:	e112      	b.n	8006f58 <UART_SetConfig+0x348>
 8006d32:	2308      	movs	r3, #8
 8006d34:	77fb      	strb	r3, [r7, #31]
 8006d36:	e10f      	b.n	8006f58 <UART_SetConfig+0x348>
 8006d38:	2310      	movs	r3, #16
 8006d3a:	77fb      	strb	r3, [r7, #31]
 8006d3c:	e10c      	b.n	8006f58 <UART_SetConfig+0x348>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a68      	ldr	r2, [pc, #416]	@ (8006ee4 <UART_SetConfig+0x2d4>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d120      	bne.n	8006d8a <UART_SetConfig+0x17a>
 8006d48:	4b64      	ldr	r3, [pc, #400]	@ (8006edc <UART_SetConfig+0x2cc>)
 8006d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d4e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006d52:	2b30      	cmp	r3, #48	@ 0x30
 8006d54:	d013      	beq.n	8006d7e <UART_SetConfig+0x16e>
 8006d56:	2b30      	cmp	r3, #48	@ 0x30
 8006d58:	d814      	bhi.n	8006d84 <UART_SetConfig+0x174>
 8006d5a:	2b20      	cmp	r3, #32
 8006d5c:	d009      	beq.n	8006d72 <UART_SetConfig+0x162>
 8006d5e:	2b20      	cmp	r3, #32
 8006d60:	d810      	bhi.n	8006d84 <UART_SetConfig+0x174>
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d002      	beq.n	8006d6c <UART_SetConfig+0x15c>
 8006d66:	2b10      	cmp	r3, #16
 8006d68:	d006      	beq.n	8006d78 <UART_SetConfig+0x168>
 8006d6a:	e00b      	b.n	8006d84 <UART_SetConfig+0x174>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	77fb      	strb	r3, [r7, #31]
 8006d70:	e0f2      	b.n	8006f58 <UART_SetConfig+0x348>
 8006d72:	2302      	movs	r3, #2
 8006d74:	77fb      	strb	r3, [r7, #31]
 8006d76:	e0ef      	b.n	8006f58 <UART_SetConfig+0x348>
 8006d78:	2304      	movs	r3, #4
 8006d7a:	77fb      	strb	r3, [r7, #31]
 8006d7c:	e0ec      	b.n	8006f58 <UART_SetConfig+0x348>
 8006d7e:	2308      	movs	r3, #8
 8006d80:	77fb      	strb	r3, [r7, #31]
 8006d82:	e0e9      	b.n	8006f58 <UART_SetConfig+0x348>
 8006d84:	2310      	movs	r3, #16
 8006d86:	77fb      	strb	r3, [r7, #31]
 8006d88:	e0e6      	b.n	8006f58 <UART_SetConfig+0x348>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a56      	ldr	r2, [pc, #344]	@ (8006ee8 <UART_SetConfig+0x2d8>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d120      	bne.n	8006dd6 <UART_SetConfig+0x1c6>
 8006d94:	4b51      	ldr	r3, [pc, #324]	@ (8006edc <UART_SetConfig+0x2cc>)
 8006d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d9a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006d9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006da0:	d013      	beq.n	8006dca <UART_SetConfig+0x1ba>
 8006da2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006da4:	d814      	bhi.n	8006dd0 <UART_SetConfig+0x1c0>
 8006da6:	2b80      	cmp	r3, #128	@ 0x80
 8006da8:	d009      	beq.n	8006dbe <UART_SetConfig+0x1ae>
 8006daa:	2b80      	cmp	r3, #128	@ 0x80
 8006dac:	d810      	bhi.n	8006dd0 <UART_SetConfig+0x1c0>
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d002      	beq.n	8006db8 <UART_SetConfig+0x1a8>
 8006db2:	2b40      	cmp	r3, #64	@ 0x40
 8006db4:	d006      	beq.n	8006dc4 <UART_SetConfig+0x1b4>
 8006db6:	e00b      	b.n	8006dd0 <UART_SetConfig+0x1c0>
 8006db8:	2300      	movs	r3, #0
 8006dba:	77fb      	strb	r3, [r7, #31]
 8006dbc:	e0cc      	b.n	8006f58 <UART_SetConfig+0x348>
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	77fb      	strb	r3, [r7, #31]
 8006dc2:	e0c9      	b.n	8006f58 <UART_SetConfig+0x348>
 8006dc4:	2304      	movs	r3, #4
 8006dc6:	77fb      	strb	r3, [r7, #31]
 8006dc8:	e0c6      	b.n	8006f58 <UART_SetConfig+0x348>
 8006dca:	2308      	movs	r3, #8
 8006dcc:	77fb      	strb	r3, [r7, #31]
 8006dce:	e0c3      	b.n	8006f58 <UART_SetConfig+0x348>
 8006dd0:	2310      	movs	r3, #16
 8006dd2:	77fb      	strb	r3, [r7, #31]
 8006dd4:	e0c0      	b.n	8006f58 <UART_SetConfig+0x348>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a44      	ldr	r2, [pc, #272]	@ (8006eec <UART_SetConfig+0x2dc>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d125      	bne.n	8006e2c <UART_SetConfig+0x21c>
 8006de0:	4b3e      	ldr	r3, [pc, #248]	@ (8006edc <UART_SetConfig+0x2cc>)
 8006de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006de6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006dea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006dee:	d017      	beq.n	8006e20 <UART_SetConfig+0x210>
 8006df0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006df4:	d817      	bhi.n	8006e26 <UART_SetConfig+0x216>
 8006df6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dfa:	d00b      	beq.n	8006e14 <UART_SetConfig+0x204>
 8006dfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e00:	d811      	bhi.n	8006e26 <UART_SetConfig+0x216>
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d003      	beq.n	8006e0e <UART_SetConfig+0x1fe>
 8006e06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e0a:	d006      	beq.n	8006e1a <UART_SetConfig+0x20a>
 8006e0c:	e00b      	b.n	8006e26 <UART_SetConfig+0x216>
 8006e0e:	2300      	movs	r3, #0
 8006e10:	77fb      	strb	r3, [r7, #31]
 8006e12:	e0a1      	b.n	8006f58 <UART_SetConfig+0x348>
 8006e14:	2302      	movs	r3, #2
 8006e16:	77fb      	strb	r3, [r7, #31]
 8006e18:	e09e      	b.n	8006f58 <UART_SetConfig+0x348>
 8006e1a:	2304      	movs	r3, #4
 8006e1c:	77fb      	strb	r3, [r7, #31]
 8006e1e:	e09b      	b.n	8006f58 <UART_SetConfig+0x348>
 8006e20:	2308      	movs	r3, #8
 8006e22:	77fb      	strb	r3, [r7, #31]
 8006e24:	e098      	b.n	8006f58 <UART_SetConfig+0x348>
 8006e26:	2310      	movs	r3, #16
 8006e28:	77fb      	strb	r3, [r7, #31]
 8006e2a:	e095      	b.n	8006f58 <UART_SetConfig+0x348>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a2f      	ldr	r2, [pc, #188]	@ (8006ef0 <UART_SetConfig+0x2e0>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d125      	bne.n	8006e82 <UART_SetConfig+0x272>
 8006e36:	4b29      	ldr	r3, [pc, #164]	@ (8006edc <UART_SetConfig+0x2cc>)
 8006e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e3c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006e40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e44:	d017      	beq.n	8006e76 <UART_SetConfig+0x266>
 8006e46:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e4a:	d817      	bhi.n	8006e7c <UART_SetConfig+0x26c>
 8006e4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e50:	d00b      	beq.n	8006e6a <UART_SetConfig+0x25a>
 8006e52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e56:	d811      	bhi.n	8006e7c <UART_SetConfig+0x26c>
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d003      	beq.n	8006e64 <UART_SetConfig+0x254>
 8006e5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e60:	d006      	beq.n	8006e70 <UART_SetConfig+0x260>
 8006e62:	e00b      	b.n	8006e7c <UART_SetConfig+0x26c>
 8006e64:	2301      	movs	r3, #1
 8006e66:	77fb      	strb	r3, [r7, #31]
 8006e68:	e076      	b.n	8006f58 <UART_SetConfig+0x348>
 8006e6a:	2302      	movs	r3, #2
 8006e6c:	77fb      	strb	r3, [r7, #31]
 8006e6e:	e073      	b.n	8006f58 <UART_SetConfig+0x348>
 8006e70:	2304      	movs	r3, #4
 8006e72:	77fb      	strb	r3, [r7, #31]
 8006e74:	e070      	b.n	8006f58 <UART_SetConfig+0x348>
 8006e76:	2308      	movs	r3, #8
 8006e78:	77fb      	strb	r3, [r7, #31]
 8006e7a:	e06d      	b.n	8006f58 <UART_SetConfig+0x348>
 8006e7c:	2310      	movs	r3, #16
 8006e7e:	77fb      	strb	r3, [r7, #31]
 8006e80:	e06a      	b.n	8006f58 <UART_SetConfig+0x348>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a1b      	ldr	r2, [pc, #108]	@ (8006ef4 <UART_SetConfig+0x2e4>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d138      	bne.n	8006efe <UART_SetConfig+0x2ee>
 8006e8c:	4b13      	ldr	r3, [pc, #76]	@ (8006edc <UART_SetConfig+0x2cc>)
 8006e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e92:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006e96:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e9a:	d017      	beq.n	8006ecc <UART_SetConfig+0x2bc>
 8006e9c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ea0:	d82a      	bhi.n	8006ef8 <UART_SetConfig+0x2e8>
 8006ea2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ea6:	d00b      	beq.n	8006ec0 <UART_SetConfig+0x2b0>
 8006ea8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006eac:	d824      	bhi.n	8006ef8 <UART_SetConfig+0x2e8>
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d003      	beq.n	8006eba <UART_SetConfig+0x2aa>
 8006eb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006eb6:	d006      	beq.n	8006ec6 <UART_SetConfig+0x2b6>
 8006eb8:	e01e      	b.n	8006ef8 <UART_SetConfig+0x2e8>
 8006eba:	2300      	movs	r3, #0
 8006ebc:	77fb      	strb	r3, [r7, #31]
 8006ebe:	e04b      	b.n	8006f58 <UART_SetConfig+0x348>
 8006ec0:	2302      	movs	r3, #2
 8006ec2:	77fb      	strb	r3, [r7, #31]
 8006ec4:	e048      	b.n	8006f58 <UART_SetConfig+0x348>
 8006ec6:	2304      	movs	r3, #4
 8006ec8:	77fb      	strb	r3, [r7, #31]
 8006eca:	e045      	b.n	8006f58 <UART_SetConfig+0x348>
 8006ecc:	2308      	movs	r3, #8
 8006ece:	77fb      	strb	r3, [r7, #31]
 8006ed0:	e042      	b.n	8006f58 <UART_SetConfig+0x348>
 8006ed2:	bf00      	nop
 8006ed4:	efff69f3 	.word	0xefff69f3
 8006ed8:	40011000 	.word	0x40011000
 8006edc:	40023800 	.word	0x40023800
 8006ee0:	40004400 	.word	0x40004400
 8006ee4:	40004800 	.word	0x40004800
 8006ee8:	40004c00 	.word	0x40004c00
 8006eec:	40005000 	.word	0x40005000
 8006ef0:	40011400 	.word	0x40011400
 8006ef4:	40007800 	.word	0x40007800
 8006ef8:	2310      	movs	r3, #16
 8006efa:	77fb      	strb	r3, [r7, #31]
 8006efc:	e02c      	b.n	8006f58 <UART_SetConfig+0x348>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a72      	ldr	r2, [pc, #456]	@ (80070cc <UART_SetConfig+0x4bc>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d125      	bne.n	8006f54 <UART_SetConfig+0x344>
 8006f08:	4b71      	ldr	r3, [pc, #452]	@ (80070d0 <UART_SetConfig+0x4c0>)
 8006f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f0e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006f12:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006f16:	d017      	beq.n	8006f48 <UART_SetConfig+0x338>
 8006f18:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006f1c:	d817      	bhi.n	8006f4e <UART_SetConfig+0x33e>
 8006f1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f22:	d00b      	beq.n	8006f3c <UART_SetConfig+0x32c>
 8006f24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f28:	d811      	bhi.n	8006f4e <UART_SetConfig+0x33e>
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d003      	beq.n	8006f36 <UART_SetConfig+0x326>
 8006f2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f32:	d006      	beq.n	8006f42 <UART_SetConfig+0x332>
 8006f34:	e00b      	b.n	8006f4e <UART_SetConfig+0x33e>
 8006f36:	2300      	movs	r3, #0
 8006f38:	77fb      	strb	r3, [r7, #31]
 8006f3a:	e00d      	b.n	8006f58 <UART_SetConfig+0x348>
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	77fb      	strb	r3, [r7, #31]
 8006f40:	e00a      	b.n	8006f58 <UART_SetConfig+0x348>
 8006f42:	2304      	movs	r3, #4
 8006f44:	77fb      	strb	r3, [r7, #31]
 8006f46:	e007      	b.n	8006f58 <UART_SetConfig+0x348>
 8006f48:	2308      	movs	r3, #8
 8006f4a:	77fb      	strb	r3, [r7, #31]
 8006f4c:	e004      	b.n	8006f58 <UART_SetConfig+0x348>
 8006f4e:	2310      	movs	r3, #16
 8006f50:	77fb      	strb	r3, [r7, #31]
 8006f52:	e001      	b.n	8006f58 <UART_SetConfig+0x348>
 8006f54:	2310      	movs	r3, #16
 8006f56:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	69db      	ldr	r3, [r3, #28]
 8006f5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f60:	d15b      	bne.n	800701a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006f62:	7ffb      	ldrb	r3, [r7, #31]
 8006f64:	2b08      	cmp	r3, #8
 8006f66:	d828      	bhi.n	8006fba <UART_SetConfig+0x3aa>
 8006f68:	a201      	add	r2, pc, #4	@ (adr r2, 8006f70 <UART_SetConfig+0x360>)
 8006f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6e:	bf00      	nop
 8006f70:	08006f95 	.word	0x08006f95
 8006f74:	08006f9d 	.word	0x08006f9d
 8006f78:	08006fa5 	.word	0x08006fa5
 8006f7c:	08006fbb 	.word	0x08006fbb
 8006f80:	08006fab 	.word	0x08006fab
 8006f84:	08006fbb 	.word	0x08006fbb
 8006f88:	08006fbb 	.word	0x08006fbb
 8006f8c:	08006fbb 	.word	0x08006fbb
 8006f90:	08006fb3 	.word	0x08006fb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f94:	f7fd f81e 	bl	8003fd4 <HAL_RCC_GetPCLK1Freq>
 8006f98:	61b8      	str	r0, [r7, #24]
        break;
 8006f9a:	e013      	b.n	8006fc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f9c:	f7fd f82e 	bl	8003ffc <HAL_RCC_GetPCLK2Freq>
 8006fa0:	61b8      	str	r0, [r7, #24]
        break;
 8006fa2:	e00f      	b.n	8006fc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fa4:	4b4b      	ldr	r3, [pc, #300]	@ (80070d4 <UART_SetConfig+0x4c4>)
 8006fa6:	61bb      	str	r3, [r7, #24]
        break;
 8006fa8:	e00c      	b.n	8006fc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006faa:	f7fc ff41 	bl	8003e30 <HAL_RCC_GetSysClockFreq>
 8006fae:	61b8      	str	r0, [r7, #24]
        break;
 8006fb0:	e008      	b.n	8006fc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fb6:	61bb      	str	r3, [r7, #24]
        break;
 8006fb8:	e004      	b.n	8006fc4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	77bb      	strb	r3, [r7, #30]
        break;
 8006fc2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d074      	beq.n	80070b4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	005a      	lsls	r2, r3, #1
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	085b      	lsrs	r3, r3, #1
 8006fd4:	441a      	add	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fde:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	2b0f      	cmp	r3, #15
 8006fe4:	d916      	bls.n	8007014 <UART_SetConfig+0x404>
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fec:	d212      	bcs.n	8007014 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	f023 030f 	bic.w	r3, r3, #15
 8006ff6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	085b      	lsrs	r3, r3, #1
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	f003 0307 	and.w	r3, r3, #7
 8007002:	b29a      	uxth	r2, r3
 8007004:	89fb      	ldrh	r3, [r7, #14]
 8007006:	4313      	orrs	r3, r2
 8007008:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	89fa      	ldrh	r2, [r7, #14]
 8007010:	60da      	str	r2, [r3, #12]
 8007012:	e04f      	b.n	80070b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	77bb      	strb	r3, [r7, #30]
 8007018:	e04c      	b.n	80070b4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800701a:	7ffb      	ldrb	r3, [r7, #31]
 800701c:	2b08      	cmp	r3, #8
 800701e:	d828      	bhi.n	8007072 <UART_SetConfig+0x462>
 8007020:	a201      	add	r2, pc, #4	@ (adr r2, 8007028 <UART_SetConfig+0x418>)
 8007022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007026:	bf00      	nop
 8007028:	0800704d 	.word	0x0800704d
 800702c:	08007055 	.word	0x08007055
 8007030:	0800705d 	.word	0x0800705d
 8007034:	08007073 	.word	0x08007073
 8007038:	08007063 	.word	0x08007063
 800703c:	08007073 	.word	0x08007073
 8007040:	08007073 	.word	0x08007073
 8007044:	08007073 	.word	0x08007073
 8007048:	0800706b 	.word	0x0800706b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800704c:	f7fc ffc2 	bl	8003fd4 <HAL_RCC_GetPCLK1Freq>
 8007050:	61b8      	str	r0, [r7, #24]
        break;
 8007052:	e013      	b.n	800707c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007054:	f7fc ffd2 	bl	8003ffc <HAL_RCC_GetPCLK2Freq>
 8007058:	61b8      	str	r0, [r7, #24]
        break;
 800705a:	e00f      	b.n	800707c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800705c:	4b1d      	ldr	r3, [pc, #116]	@ (80070d4 <UART_SetConfig+0x4c4>)
 800705e:	61bb      	str	r3, [r7, #24]
        break;
 8007060:	e00c      	b.n	800707c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007062:	f7fc fee5 	bl	8003e30 <HAL_RCC_GetSysClockFreq>
 8007066:	61b8      	str	r0, [r7, #24]
        break;
 8007068:	e008      	b.n	800707c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800706a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800706e:	61bb      	str	r3, [r7, #24]
        break;
 8007070:	e004      	b.n	800707c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007072:	2300      	movs	r3, #0
 8007074:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	77bb      	strb	r3, [r7, #30]
        break;
 800707a:	bf00      	nop
    }

    if (pclk != 0U)
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d018      	beq.n	80070b4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	085a      	lsrs	r2, r3, #1
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	441a      	add	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	fbb2 f3f3 	udiv	r3, r2, r3
 8007094:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	2b0f      	cmp	r3, #15
 800709a:	d909      	bls.n	80070b0 <UART_SetConfig+0x4a0>
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070a2:	d205      	bcs.n	80070b0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	60da      	str	r2, [r3, #12]
 80070ae:	e001      	b.n	80070b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80070c0:	7fbb      	ldrb	r3, [r7, #30]
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3720      	adds	r7, #32
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	40007c00 	.word	0x40007c00
 80070d0:	40023800 	.word	0x40023800
 80070d4:	00f42400 	.word	0x00f42400

080070d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e4:	f003 0308 	and.w	r3, r3, #8
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00a      	beq.n	8007102 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	430a      	orrs	r2, r1
 8007100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00a      	beq.n	8007124 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	430a      	orrs	r2, r1
 8007122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007128:	f003 0302 	and.w	r3, r3, #2
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00a      	beq.n	8007146 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	430a      	orrs	r2, r1
 8007144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800714a:	f003 0304 	and.w	r3, r3, #4
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00a      	beq.n	8007168 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	430a      	orrs	r2, r1
 8007166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800716c:	f003 0310 	and.w	r3, r3, #16
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00a      	beq.n	800718a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	430a      	orrs	r2, r1
 8007188:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800718e:	f003 0320 	and.w	r3, r3, #32
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00a      	beq.n	80071ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	430a      	orrs	r2, r1
 80071aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d01a      	beq.n	80071ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	430a      	orrs	r2, r1
 80071cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071d6:	d10a      	bne.n	80071ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	430a      	orrs	r2, r1
 80071ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00a      	beq.n	8007210 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	430a      	orrs	r2, r1
 800720e:	605a      	str	r2, [r3, #4]
  }
}
 8007210:	bf00      	nop
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b098      	sub	sp, #96	@ 0x60
 8007220:	af02      	add	r7, sp, #8
 8007222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800722c:	f7fb f80c 	bl	8002248 <HAL_GetTick>
 8007230:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0308 	and.w	r3, r3, #8
 800723c:	2b08      	cmp	r3, #8
 800723e:	d12e      	bne.n	800729e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007240:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007248:	2200      	movs	r2, #0
 800724a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f88c 	bl	800736c <UART_WaitOnFlagUntilTimeout>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d021      	beq.n	800729e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007262:	e853 3f00 	ldrex	r3, [r3]
 8007266:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800726a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800726e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	461a      	mov	r2, r3
 8007276:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007278:	647b      	str	r3, [r7, #68]	@ 0x44
 800727a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800727e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007280:	e841 2300 	strex	r3, r2, [r1]
 8007284:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007286:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1e6      	bne.n	800725a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2220      	movs	r2, #32
 8007290:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800729a:	2303      	movs	r3, #3
 800729c:	e062      	b.n	8007364 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 0304 	and.w	r3, r3, #4
 80072a8:	2b04      	cmp	r3, #4
 80072aa:	d149      	bne.n	8007340 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072b4:	2200      	movs	r2, #0
 80072b6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f856 	bl	800736c <UART_WaitOnFlagUntilTimeout>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d03c      	beq.n	8007340 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ce:	e853 3f00 	ldrex	r3, [r3]
 80072d2:	623b      	str	r3, [r7, #32]
   return(result);
 80072d4:	6a3b      	ldr	r3, [r7, #32]
 80072d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	461a      	mov	r2, r3
 80072e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80072e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072ec:	e841 2300 	strex	r3, r2, [r1]
 80072f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d1e6      	bne.n	80072c6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	3308      	adds	r3, #8
 80072fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	e853 3f00 	ldrex	r3, [r3]
 8007306:	60fb      	str	r3, [r7, #12]
   return(result);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f023 0301 	bic.w	r3, r3, #1
 800730e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	3308      	adds	r3, #8
 8007316:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007318:	61fa      	str	r2, [r7, #28]
 800731a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731c:	69b9      	ldr	r1, [r7, #24]
 800731e:	69fa      	ldr	r2, [r7, #28]
 8007320:	e841 2300 	strex	r3, r2, [r1]
 8007324:	617b      	str	r3, [r7, #20]
   return(result);
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d1e5      	bne.n	80072f8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2220      	movs	r2, #32
 8007330:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e011      	b.n	8007364 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2220      	movs	r2, #32
 8007344:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2220      	movs	r2, #32
 800734a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3758      	adds	r7, #88	@ 0x58
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	603b      	str	r3, [r7, #0]
 8007378:	4613      	mov	r3, r2
 800737a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800737c:	e04f      	b.n	800741e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007384:	d04b      	beq.n	800741e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007386:	f7fa ff5f 	bl	8002248 <HAL_GetTick>
 800738a:	4602      	mov	r2, r0
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	1ad3      	subs	r3, r2, r3
 8007390:	69ba      	ldr	r2, [r7, #24]
 8007392:	429a      	cmp	r2, r3
 8007394:	d302      	bcc.n	800739c <UART_WaitOnFlagUntilTimeout+0x30>
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d101      	bne.n	80073a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800739c:	2303      	movs	r3, #3
 800739e:	e04e      	b.n	800743e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 0304 	and.w	r3, r3, #4
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d037      	beq.n	800741e <UART_WaitOnFlagUntilTimeout+0xb2>
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	2b80      	cmp	r3, #128	@ 0x80
 80073b2:	d034      	beq.n	800741e <UART_WaitOnFlagUntilTimeout+0xb2>
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	2b40      	cmp	r3, #64	@ 0x40
 80073b8:	d031      	beq.n	800741e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	69db      	ldr	r3, [r3, #28]
 80073c0:	f003 0308 	and.w	r3, r3, #8
 80073c4:	2b08      	cmp	r3, #8
 80073c6:	d110      	bne.n	80073ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2208      	movs	r2, #8
 80073ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f000 f8ff 	bl	80075d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2208      	movs	r2, #8
 80073da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e029      	b.n	800743e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	69db      	ldr	r3, [r3, #28]
 80073f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073f8:	d111      	bne.n	800741e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007402:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f000 f8e5 	bl	80075d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2220      	movs	r2, #32
 800740e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800741a:	2303      	movs	r3, #3
 800741c:	e00f      	b.n	800743e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	69da      	ldr	r2, [r3, #28]
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	4013      	ands	r3, r2
 8007428:	68ba      	ldr	r2, [r7, #8]
 800742a:	429a      	cmp	r2, r3
 800742c:	bf0c      	ite	eq
 800742e:	2301      	moveq	r3, #1
 8007430:	2300      	movne	r3, #0
 8007432:	b2db      	uxtb	r3, r3
 8007434:	461a      	mov	r2, r3
 8007436:	79fb      	ldrb	r3, [r7, #7]
 8007438:	429a      	cmp	r2, r3
 800743a:	d0a0      	beq.n	800737e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
	...

08007448 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007448:	b480      	push	{r7}
 800744a:	b097      	sub	sp, #92	@ 0x5c
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	4613      	mov	r3, r2
 8007454:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	88fa      	ldrh	r2, [r7, #6]
 8007460:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	88fa      	ldrh	r2, [r7, #6]
 8007468:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800747a:	d10e      	bne.n	800749a <UART_Start_Receive_IT+0x52>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d105      	bne.n	8007490 <UART_Start_Receive_IT+0x48>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800748a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800748e:	e02d      	b.n	80074ec <UART_Start_Receive_IT+0xa4>
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	22ff      	movs	r2, #255	@ 0xff
 8007494:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007498:	e028      	b.n	80074ec <UART_Start_Receive_IT+0xa4>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10d      	bne.n	80074be <UART_Start_Receive_IT+0x76>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d104      	bne.n	80074b4 <UART_Start_Receive_IT+0x6c>
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	22ff      	movs	r2, #255	@ 0xff
 80074ae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80074b2:	e01b      	b.n	80074ec <UART_Start_Receive_IT+0xa4>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	227f      	movs	r2, #127	@ 0x7f
 80074b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80074bc:	e016      	b.n	80074ec <UART_Start_Receive_IT+0xa4>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074c6:	d10d      	bne.n	80074e4 <UART_Start_Receive_IT+0x9c>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d104      	bne.n	80074da <UART_Start_Receive_IT+0x92>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	227f      	movs	r2, #127	@ 0x7f
 80074d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80074d8:	e008      	b.n	80074ec <UART_Start_Receive_IT+0xa4>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	223f      	movs	r2, #63	@ 0x3f
 80074de:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80074e2:	e003      	b.n	80074ec <UART_Start_Receive_IT+0xa4>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2222      	movs	r2, #34	@ 0x22
 80074f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	3308      	adds	r3, #8
 8007502:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007506:	e853 3f00 	ldrex	r3, [r3]
 800750a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800750c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800750e:	f043 0301 	orr.w	r3, r3, #1
 8007512:	657b      	str	r3, [r7, #84]	@ 0x54
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	3308      	adds	r3, #8
 800751a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800751c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800751e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007520:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007522:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007524:	e841 2300 	strex	r3, r2, [r1]
 8007528:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800752a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1e5      	bne.n	80074fc <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007538:	d107      	bne.n	800754a <UART_Start_Receive_IT+0x102>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d103      	bne.n	800754a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	4a21      	ldr	r2, [pc, #132]	@ (80075cc <UART_Start_Receive_IT+0x184>)
 8007546:	669a      	str	r2, [r3, #104]	@ 0x68
 8007548:	e002      	b.n	8007550 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	4a20      	ldr	r2, [pc, #128]	@ (80075d0 <UART_Start_Receive_IT+0x188>)
 800754e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d019      	beq.n	800758c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007560:	e853 3f00 	ldrex	r3, [r3]
 8007564:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007568:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800756c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	461a      	mov	r2, r3
 8007574:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007576:	637b      	str	r3, [r7, #52]	@ 0x34
 8007578:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800757c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800757e:	e841 2300 	strex	r3, r2, [r1]
 8007582:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1e6      	bne.n	8007558 <UART_Start_Receive_IT+0x110>
 800758a:	e018      	b.n	80075be <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	e853 3f00 	ldrex	r3, [r3]
 8007598:	613b      	str	r3, [r7, #16]
   return(result);
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	f043 0320 	orr.w	r3, r3, #32
 80075a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	461a      	mov	r2, r3
 80075a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075aa:	623b      	str	r3, [r7, #32]
 80075ac:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ae:	69f9      	ldr	r1, [r7, #28]
 80075b0:	6a3a      	ldr	r2, [r7, #32]
 80075b2:	e841 2300 	strex	r3, r2, [r1]
 80075b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1e6      	bne.n	800758c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	375c      	adds	r7, #92	@ 0x5c
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr
 80075cc:	08007a3b 	.word	0x08007a3b
 80075d0:	08007893 	.word	0x08007893

080075d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b095      	sub	sp, #84	@ 0x54
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075e4:	e853 3f00 	ldrex	r3, [r3]
 80075e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80075ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	461a      	mov	r2, r3
 80075f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80075fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007600:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007602:	e841 2300 	strex	r3, r2, [r1]
 8007606:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1e6      	bne.n	80075dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	3308      	adds	r3, #8
 8007614:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007616:	6a3b      	ldr	r3, [r7, #32]
 8007618:	e853 3f00 	ldrex	r3, [r3]
 800761c:	61fb      	str	r3, [r7, #28]
   return(result);
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	f023 0301 	bic.w	r3, r3, #1
 8007624:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	3308      	adds	r3, #8
 800762c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800762e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007630:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007632:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007634:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007636:	e841 2300 	strex	r3, r2, [r1]
 800763a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800763c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1e5      	bne.n	800760e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007646:	2b01      	cmp	r3, #1
 8007648:	d118      	bne.n	800767c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	e853 3f00 	ldrex	r3, [r3]
 8007656:	60bb      	str	r3, [r7, #8]
   return(result);
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	f023 0310 	bic.w	r3, r3, #16
 800765e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	461a      	mov	r2, r3
 8007666:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007668:	61bb      	str	r3, [r7, #24]
 800766a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766c:	6979      	ldr	r1, [r7, #20]
 800766e:	69ba      	ldr	r2, [r7, #24]
 8007670:	e841 2300 	strex	r3, r2, [r1]
 8007674:	613b      	str	r3, [r7, #16]
   return(result);
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1e6      	bne.n	800764a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2220      	movs	r2, #32
 8007680:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007690:	bf00      	nop
 8007692:	3754      	adds	r7, #84	@ 0x54
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	f7ff fa88 	bl	8006bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076c0:	bf00      	nop
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b08f      	sub	sp, #60	@ 0x3c
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80076d4:	2b21      	cmp	r3, #33	@ 0x21
 80076d6:	d14c      	bne.n	8007772 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80076de:	b29b      	uxth	r3, r3
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d132      	bne.n	800774a <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ea:	6a3b      	ldr	r3, [r7, #32]
 80076ec:	e853 3f00 	ldrex	r3, [r3]
 80076f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	461a      	mov	r2, r3
 8007700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007702:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007704:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007706:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007708:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800770a:	e841 2300 	strex	r3, r2, [r1]
 800770e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1e6      	bne.n	80076e4 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	e853 3f00 	ldrex	r3, [r3]
 8007722:	60bb      	str	r3, [r7, #8]
   return(result);
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800772a:	633b      	str	r3, [r7, #48]	@ 0x30
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	461a      	mov	r2, r3
 8007732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007734:	61bb      	str	r3, [r7, #24]
 8007736:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007738:	6979      	ldr	r1, [r7, #20]
 800773a:	69ba      	ldr	r2, [r7, #24]
 800773c:	e841 2300 	strex	r3, r2, [r1]
 8007740:	613b      	str	r3, [r7, #16]
   return(result);
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d1e6      	bne.n	8007716 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007748:	e013      	b.n	8007772 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800774e:	781a      	ldrb	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800775a:	1c5a      	adds	r2, r3, #1
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007766:	b29b      	uxth	r3, r3
 8007768:	3b01      	subs	r3, #1
 800776a:	b29a      	uxth	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8007772:	bf00      	nop
 8007774:	373c      	adds	r7, #60	@ 0x3c
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr

0800777e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800777e:	b480      	push	{r7}
 8007780:	b091      	sub	sp, #68	@ 0x44
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800778a:	2b21      	cmp	r3, #33	@ 0x21
 800778c:	d151      	bne.n	8007832 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007794:	b29b      	uxth	r3, r3
 8007796:	2b00      	cmp	r3, #0
 8007798:	d132      	bne.n	8007800 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a2:	e853 3f00 	ldrex	r3, [r3]
 80077a6:	623b      	str	r3, [r7, #32]
   return(result);
 80077a8:	6a3b      	ldr	r3, [r7, #32]
 80077aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	461a      	mov	r2, r3
 80077b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80077ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077c0:	e841 2300 	strex	r3, r2, [r1]
 80077c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80077c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1e6      	bne.n	800779a <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	e853 3f00 	ldrex	r3, [r3]
 80077d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	461a      	mov	r2, r3
 80077e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ea:	61fb      	str	r3, [r7, #28]
 80077ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ee:	69b9      	ldr	r1, [r7, #24]
 80077f0:	69fa      	ldr	r2, [r7, #28]
 80077f2:	e841 2300 	strex	r3, r2, [r1]
 80077f6:	617b      	str	r3, [r7, #20]
   return(result);
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1e6      	bne.n	80077cc <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80077fe:	e018      	b.n	8007832 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007804:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007806:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007808:	881b      	ldrh	r3, [r3, #0]
 800780a:	461a      	mov	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007814:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800781a:	1c9a      	adds	r2, r3, #2
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007826:	b29b      	uxth	r3, r3
 8007828:	3b01      	subs	r3, #1
 800782a:	b29a      	uxth	r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8007832:	bf00      	nop
 8007834:	3744      	adds	r7, #68	@ 0x44
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr

0800783e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800783e:	b580      	push	{r7, lr}
 8007840:	b088      	sub	sp, #32
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	e853 3f00 	ldrex	r3, [r3]
 8007852:	60bb      	str	r3, [r7, #8]
   return(result);
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800785a:	61fb      	str	r3, [r7, #28]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	461a      	mov	r2, r3
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	61bb      	str	r3, [r7, #24]
 8007866:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007868:	6979      	ldr	r1, [r7, #20]
 800786a:	69ba      	ldr	r2, [r7, #24]
 800786c:	e841 2300 	strex	r3, r2, [r1]
 8007870:	613b      	str	r3, [r7, #16]
   return(result);
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1e6      	bne.n	8007846 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2220      	movs	r2, #32
 800787c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f7f9 f91d 	bl	8000ac4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800788a:	bf00      	nop
 800788c:	3720      	adds	r7, #32
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b09c      	sub	sp, #112	@ 0x70
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80078a0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078aa:	2b22      	cmp	r3, #34	@ 0x22
 80078ac:	f040 80b9 	bne.w	8007a22 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078b6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80078ba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80078be:	b2d9      	uxtb	r1, r3
 80078c0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80078c4:	b2da      	uxtb	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078ca:	400a      	ands	r2, r1
 80078cc:	b2d2      	uxtb	r2, r2
 80078ce:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078d4:	1c5a      	adds	r2, r3, #1
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	3b01      	subs	r3, #1
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	f040 809c 	bne.w	8007a32 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007900:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007902:	e853 3f00 	ldrex	r3, [r3]
 8007906:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007908:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800790a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800790e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	461a      	mov	r2, r3
 8007916:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007918:	65bb      	str	r3, [r7, #88]	@ 0x58
 800791a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800791e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007920:	e841 2300 	strex	r3, r2, [r1]
 8007924:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007926:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007928:	2b00      	cmp	r3, #0
 800792a:	d1e6      	bne.n	80078fa <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	3308      	adds	r3, #8
 8007932:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007936:	e853 3f00 	ldrex	r3, [r3]
 800793a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800793c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800793e:	f023 0301 	bic.w	r3, r3, #1
 8007942:	667b      	str	r3, [r7, #100]	@ 0x64
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	3308      	adds	r3, #8
 800794a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800794c:	647a      	str	r2, [r7, #68]	@ 0x44
 800794e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007950:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007952:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007954:	e841 2300 	strex	r3, r2, [r1]
 8007958:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800795a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800795c:	2b00      	cmp	r3, #0
 800795e:	d1e5      	bne.n	800792c <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2220      	movs	r2, #32
 8007964:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d018      	beq.n	80079b4 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800798a:	e853 3f00 	ldrex	r3, [r3]
 800798e:	623b      	str	r3, [r7, #32]
   return(result);
 8007990:	6a3b      	ldr	r3, [r7, #32]
 8007992:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007996:	663b      	str	r3, [r7, #96]	@ 0x60
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	461a      	mov	r2, r3
 800799e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80079a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079a8:	e841 2300 	strex	r3, r2, [r1]
 80079ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80079ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1e6      	bne.n	8007982 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d12e      	bne.n	8007a1a <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	e853 3f00 	ldrex	r3, [r3]
 80079ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f023 0310 	bic.w	r3, r3, #16
 80079d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	461a      	mov	r2, r3
 80079de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079e0:	61fb      	str	r3, [r7, #28]
 80079e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e4:	69b9      	ldr	r1, [r7, #24]
 80079e6:	69fa      	ldr	r2, [r7, #28]
 80079e8:	e841 2300 	strex	r3, r2, [r1]
 80079ec:	617b      	str	r3, [r7, #20]
   return(result);
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1e6      	bne.n	80079c2 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	69db      	ldr	r3, [r3, #28]
 80079fa:	f003 0310 	and.w	r3, r3, #16
 80079fe:	2b10      	cmp	r3, #16
 8007a00:	d103      	bne.n	8007a0a <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2210      	movs	r2, #16
 8007a08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007a10:	4619      	mov	r1, r3
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f7ff f8e6 	bl	8006be4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a18:	e00b      	b.n	8007a32 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f7f9 f86a 	bl	8000af4 <HAL_UART_RxCpltCallback>
}
 8007a20:	e007      	b.n	8007a32 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	699a      	ldr	r2, [r3, #24]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f042 0208 	orr.w	r2, r2, #8
 8007a30:	619a      	str	r2, [r3, #24]
}
 8007a32:	bf00      	nop
 8007a34:	3770      	adds	r7, #112	@ 0x70
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b09c      	sub	sp, #112	@ 0x70
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007a48:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a52:	2b22      	cmp	r3, #34	@ 0x22
 8007a54:	f040 80b9 	bne.w	8007bca <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a5e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a66:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007a68:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007a6c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007a70:	4013      	ands	r3, r2
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007a76:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a7c:	1c9a      	adds	r2, r3, #2
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f040 809c 	bne.w	8007bda <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007aaa:	e853 3f00 	ldrex	r3, [r3]
 8007aae:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007ab0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ab2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ab6:	667b      	str	r3, [r7, #100]	@ 0x64
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	461a      	mov	r2, r3
 8007abe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ac0:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ac2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007ac6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007ac8:	e841 2300 	strex	r3, r2, [r1]
 8007acc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007ace:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d1e6      	bne.n	8007aa2 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	3308      	adds	r3, #8
 8007ada:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ade:	e853 3f00 	ldrex	r3, [r3]
 8007ae2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae6:	f023 0301 	bic.w	r3, r3, #1
 8007aea:	663b      	str	r3, [r7, #96]	@ 0x60
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	3308      	adds	r3, #8
 8007af2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007af4:	643a      	str	r2, [r7, #64]	@ 0x40
 8007af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007afa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007afc:	e841 2300 	strex	r3, r2, [r1]
 8007b00:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1e5      	bne.n	8007ad4 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2220      	movs	r2, #32
 8007b0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d018      	beq.n	8007b5c <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b30:	6a3b      	ldr	r3, [r7, #32]
 8007b32:	e853 3f00 	ldrex	r3, [r3]
 8007b36:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007b3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	461a      	mov	r2, r3
 8007b46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b4a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b50:	e841 2300 	strex	r3, r2, [r1]
 8007b54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1e6      	bne.n	8007b2a <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d12e      	bne.n	8007bc2 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	e853 3f00 	ldrex	r3, [r3]
 8007b76:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	f023 0310 	bic.w	r3, r3, #16
 8007b7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	461a      	mov	r2, r3
 8007b86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b88:	61bb      	str	r3, [r7, #24]
 8007b8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8c:	6979      	ldr	r1, [r7, #20]
 8007b8e:	69ba      	ldr	r2, [r7, #24]
 8007b90:	e841 2300 	strex	r3, r2, [r1]
 8007b94:	613b      	str	r3, [r7, #16]
   return(result);
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1e6      	bne.n	8007b6a <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	69db      	ldr	r3, [r3, #28]
 8007ba2:	f003 0310 	and.w	r3, r3, #16
 8007ba6:	2b10      	cmp	r3, #16
 8007ba8:	d103      	bne.n	8007bb2 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2210      	movs	r2, #16
 8007bb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007bb8:	4619      	mov	r1, r3
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f7ff f812 	bl	8006be4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007bc0:	e00b      	b.n	8007bda <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f7f8 ff96 	bl	8000af4 <HAL_UART_RxCpltCallback>
}
 8007bc8:	e007      	b.n	8007bda <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	699a      	ldr	r2, [r3, #24]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f042 0208 	orr.w	r2, r2, #8
 8007bd8:	619a      	str	r2, [r3, #24]
}
 8007bda:	bf00      	nop
 8007bdc:	3770      	adds	r7, #112	@ 0x70
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <memset>:
 8007be2:	4402      	add	r2, r0
 8007be4:	4603      	mov	r3, r0
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d100      	bne.n	8007bec <memset+0xa>
 8007bea:	4770      	bx	lr
 8007bec:	f803 1b01 	strb.w	r1, [r3], #1
 8007bf0:	e7f9      	b.n	8007be6 <memset+0x4>

08007bf2 <strstr>:
 8007bf2:	780a      	ldrb	r2, [r1, #0]
 8007bf4:	b570      	push	{r4, r5, r6, lr}
 8007bf6:	b96a      	cbnz	r2, 8007c14 <strstr+0x22>
 8007bf8:	bd70      	pop	{r4, r5, r6, pc}
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d109      	bne.n	8007c12 <strstr+0x20>
 8007bfe:	460c      	mov	r4, r1
 8007c00:	4605      	mov	r5, r0
 8007c02:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d0f6      	beq.n	8007bf8 <strstr+0x6>
 8007c0a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007c0e:	429e      	cmp	r6, r3
 8007c10:	d0f7      	beq.n	8007c02 <strstr+0x10>
 8007c12:	3001      	adds	r0, #1
 8007c14:	7803      	ldrb	r3, [r0, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1ef      	bne.n	8007bfa <strstr+0x8>
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	e7ec      	b.n	8007bf8 <strstr+0x6>
	...

08007c20 <__libc_init_array>:
 8007c20:	b570      	push	{r4, r5, r6, lr}
 8007c22:	4d0d      	ldr	r5, [pc, #52]	@ (8007c58 <__libc_init_array+0x38>)
 8007c24:	4c0d      	ldr	r4, [pc, #52]	@ (8007c5c <__libc_init_array+0x3c>)
 8007c26:	1b64      	subs	r4, r4, r5
 8007c28:	10a4      	asrs	r4, r4, #2
 8007c2a:	2600      	movs	r6, #0
 8007c2c:	42a6      	cmp	r6, r4
 8007c2e:	d109      	bne.n	8007c44 <__libc_init_array+0x24>
 8007c30:	4d0b      	ldr	r5, [pc, #44]	@ (8007c60 <__libc_init_array+0x40>)
 8007c32:	4c0c      	ldr	r4, [pc, #48]	@ (8007c64 <__libc_init_array+0x44>)
 8007c34:	f000 f818 	bl	8007c68 <_init>
 8007c38:	1b64      	subs	r4, r4, r5
 8007c3a:	10a4      	asrs	r4, r4, #2
 8007c3c:	2600      	movs	r6, #0
 8007c3e:	42a6      	cmp	r6, r4
 8007c40:	d105      	bne.n	8007c4e <__libc_init_array+0x2e>
 8007c42:	bd70      	pop	{r4, r5, r6, pc}
 8007c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c48:	4798      	blx	r3
 8007c4a:	3601      	adds	r6, #1
 8007c4c:	e7ee      	b.n	8007c2c <__libc_init_array+0xc>
 8007c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c52:	4798      	blx	r3
 8007c54:	3601      	adds	r6, #1
 8007c56:	e7f2      	b.n	8007c3e <__libc_init_array+0x1e>
 8007c58:	08007cd4 	.word	0x08007cd4
 8007c5c:	08007cd4 	.word	0x08007cd4
 8007c60:	08007cd4 	.word	0x08007cd4
 8007c64:	08007cd8 	.word	0x08007cd8

08007c68 <_init>:
 8007c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c6a:	bf00      	nop
 8007c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c6e:	bc08      	pop	{r3}
 8007c70:	469e      	mov	lr, r3
 8007c72:	4770      	bx	lr

08007c74 <_fini>:
 8007c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c76:	bf00      	nop
 8007c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c7a:	bc08      	pop	{r3}
 8007c7c:	469e      	mov	lr, r3
 8007c7e:	4770      	bx	lr
