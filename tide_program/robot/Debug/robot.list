
robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078b4  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08007aac  08007aac  00008aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ad8  08007ad8  00009030  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007ad8  08007ad8  00008ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ae0  08007ae0  00009030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ae0  08007ae0  00008ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ae4  08007ae4  00008ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  08007ae8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  20000030  08007b18  00009030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  08007b18  000093a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00009030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014cda  00000000  00000000  0000905e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002947  00000000  00000000  0001dd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  00020680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e12  00000000  00000000  00021838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028743  00000000  00000000  0002264a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016298  00000000  00000000  0004ad8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd887  00000000  00000000  00061025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015e8ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b30  00000000  00000000  0015e8f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  00163420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000030 	.word	0x20000030
 8000214:	00000000 	.word	0x00000000
 8000218:	08007a94 	.word	0x08007a94

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000034 	.word	0x20000034
 8000234:	08007a94 	.word	0x08007a94

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b988 	b.w	8000560 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	468e      	mov	lr, r1
 8000270:	4604      	mov	r4, r0
 8000272:	4688      	mov	r8, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d962      	bls.n	8000344 <__udivmoddi4+0xdc>
 800027e:	fab2 f682 	clz	r6, r2
 8000282:	b14e      	cbz	r6, 8000298 <__udivmoddi4+0x30>
 8000284:	f1c6 0320 	rsb	r3, r6, #32
 8000288:	fa01 f806 	lsl.w	r8, r1, r6
 800028c:	fa20 f303 	lsr.w	r3, r0, r3
 8000290:	40b7      	lsls	r7, r6
 8000292:	ea43 0808 	orr.w	r8, r3, r8
 8000296:	40b4      	lsls	r4, r6
 8000298:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800029c:	fa1f fc87 	uxth.w	ip, r7
 80002a0:	fbb8 f1fe 	udiv	r1, r8, lr
 80002a4:	0c23      	lsrs	r3, r4, #16
 80002a6:	fb0e 8811 	mls	r8, lr, r1, r8
 80002aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ae:	fb01 f20c 	mul.w	r2, r1, ip
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002bc:	f080 80ea 	bcs.w	8000494 <__udivmoddi4+0x22c>
 80002c0:	429a      	cmp	r2, r3
 80002c2:	f240 80e7 	bls.w	8000494 <__udivmoddi4+0x22c>
 80002c6:	3902      	subs	r1, #2
 80002c8:	443b      	add	r3, r7
 80002ca:	1a9a      	subs	r2, r3, r2
 80002cc:	b2a3      	uxth	r3, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002da:	fb00 fc0c 	mul.w	ip, r0, ip
 80002de:	459c      	cmp	ip, r3
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0x8e>
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e8:	f080 80d6 	bcs.w	8000498 <__udivmoddi4+0x230>
 80002ec:	459c      	cmp	ip, r3
 80002ee:	f240 80d3 	bls.w	8000498 <__udivmoddi4+0x230>
 80002f2:	443b      	add	r3, r7
 80002f4:	3802      	subs	r0, #2
 80002f6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fa:	eba3 030c 	sub.w	r3, r3, ip
 80002fe:	2100      	movs	r1, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0xa2>
 8000302:	40f3      	lsrs	r3, r6
 8000304:	2200      	movs	r2, #0
 8000306:	e9c5 3200 	strd	r3, r2, [r5]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d905      	bls.n	800031e <__udivmoddi4+0xb6>
 8000312:	b10d      	cbz	r5, 8000318 <__udivmoddi4+0xb0>
 8000314:	e9c5 0100 	strd	r0, r1, [r5]
 8000318:	2100      	movs	r1, #0
 800031a:	4608      	mov	r0, r1
 800031c:	e7f5      	b.n	800030a <__udivmoddi4+0xa2>
 800031e:	fab3 f183 	clz	r1, r3
 8000322:	2900      	cmp	r1, #0
 8000324:	d146      	bne.n	80003b4 <__udivmoddi4+0x14c>
 8000326:	4573      	cmp	r3, lr
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xc8>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 8105 	bhi.w	800053a <__udivmoddi4+0x2d2>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb6e 0203 	sbc.w	r2, lr, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4690      	mov	r8, r2
 800033a:	2d00      	cmp	r5, #0
 800033c:	d0e5      	beq.n	800030a <__udivmoddi4+0xa2>
 800033e:	e9c5 4800 	strd	r4, r8, [r5]
 8000342:	e7e2      	b.n	800030a <__udivmoddi4+0xa2>
 8000344:	2a00      	cmp	r2, #0
 8000346:	f000 8090 	beq.w	800046a <__udivmoddi4+0x202>
 800034a:	fab2 f682 	clz	r6, r2
 800034e:	2e00      	cmp	r6, #0
 8000350:	f040 80a4 	bne.w	800049c <__udivmoddi4+0x234>
 8000354:	1a8a      	subs	r2, r1, r2
 8000356:	0c03      	lsrs	r3, r0, #16
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	b280      	uxth	r0, r0
 800035e:	b2bc      	uxth	r4, r7
 8000360:	2101      	movs	r1, #1
 8000362:	fbb2 fcfe 	udiv	ip, r2, lr
 8000366:	fb0e 221c 	mls	r2, lr, ip, r2
 800036a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800036e:	fb04 f20c 	mul.w	r2, r4, ip
 8000372:	429a      	cmp	r2, r3
 8000374:	d907      	bls.n	8000386 <__udivmoddi4+0x11e>
 8000376:	18fb      	adds	r3, r7, r3
 8000378:	f10c 38ff 	add.w	r8, ip, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x11c>
 800037e:	429a      	cmp	r2, r3
 8000380:	f200 80e0 	bhi.w	8000544 <__udivmoddi4+0x2dc>
 8000384:	46c4      	mov	ip, r8
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	fbb3 f2fe 	udiv	r2, r3, lr
 800038c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000390:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000394:	fb02 f404 	mul.w	r4, r2, r4
 8000398:	429c      	cmp	r4, r3
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x144>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f102 30ff 	add.w	r0, r2, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x142>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f200 80ca 	bhi.w	800053e <__udivmoddi4+0x2d6>
 80003aa:	4602      	mov	r2, r0
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0x98>
 80003b4:	f1c1 0620 	rsb	r6, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 f706 	lsr.w	r7, r2, r6
 80003be:	431f      	orrs	r7, r3
 80003c0:	fa0e f401 	lsl.w	r4, lr, r1
 80003c4:	fa20 f306 	lsr.w	r3, r0, r6
 80003c8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003cc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d0:	4323      	orrs	r3, r4
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	fa1f fc87 	uxth.w	ip, r7
 80003da:	fbbe f0f9 	udiv	r0, lr, r9
 80003de:	0c1c      	lsrs	r4, r3, #16
 80003e0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003e4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003ec:	45a6      	cmp	lr, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d909      	bls.n	8000408 <__udivmoddi4+0x1a0>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003fa:	f080 809c 	bcs.w	8000536 <__udivmoddi4+0x2ce>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f240 8099 	bls.w	8000536 <__udivmoddi4+0x2ce>
 8000404:	3802      	subs	r0, #2
 8000406:	443c      	add	r4, r7
 8000408:	eba4 040e 	sub.w	r4, r4, lr
 800040c:	fa1f fe83 	uxth.w	lr, r3
 8000410:	fbb4 f3f9 	udiv	r3, r4, r9
 8000414:	fb09 4413 	mls	r4, r9, r3, r4
 8000418:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800041c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000420:	45a4      	cmp	ip, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1ce>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f103 3eff 	add.w	lr, r3, #4294967295
 800042a:	f080 8082 	bcs.w	8000532 <__udivmoddi4+0x2ca>
 800042e:	45a4      	cmp	ip, r4
 8000430:	d97f      	bls.n	8000532 <__udivmoddi4+0x2ca>
 8000432:	3b02      	subs	r3, #2
 8000434:	443c      	add	r4, r7
 8000436:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000442:	4564      	cmp	r4, ip
 8000444:	4673      	mov	r3, lr
 8000446:	46e1      	mov	r9, ip
 8000448:	d362      	bcc.n	8000510 <__udivmoddi4+0x2a8>
 800044a:	d05f      	beq.n	800050c <__udivmoddi4+0x2a4>
 800044c:	b15d      	cbz	r5, 8000466 <__udivmoddi4+0x1fe>
 800044e:	ebb8 0203 	subs.w	r2, r8, r3
 8000452:	eb64 0409 	sbc.w	r4, r4, r9
 8000456:	fa04 f606 	lsl.w	r6, r4, r6
 800045a:	fa22 f301 	lsr.w	r3, r2, r1
 800045e:	431e      	orrs	r6, r3
 8000460:	40cc      	lsrs	r4, r1
 8000462:	e9c5 6400 	strd	r6, r4, [r5]
 8000466:	2100      	movs	r1, #0
 8000468:	e74f      	b.n	800030a <__udivmoddi4+0xa2>
 800046a:	fbb1 fcf2 	udiv	ip, r1, r2
 800046e:	0c01      	lsrs	r1, r0, #16
 8000470:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000474:	b280      	uxth	r0, r0
 8000476:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800047a:	463b      	mov	r3, r7
 800047c:	4638      	mov	r0, r7
 800047e:	463c      	mov	r4, r7
 8000480:	46b8      	mov	r8, r7
 8000482:	46be      	mov	lr, r7
 8000484:	2620      	movs	r6, #32
 8000486:	fbb1 f1f7 	udiv	r1, r1, r7
 800048a:	eba2 0208 	sub.w	r2, r2, r8
 800048e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000492:	e766      	b.n	8000362 <__udivmoddi4+0xfa>
 8000494:	4601      	mov	r1, r0
 8000496:	e718      	b.n	80002ca <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e72c      	b.n	80002f6 <__udivmoddi4+0x8e>
 800049c:	f1c6 0220 	rsb	r2, r6, #32
 80004a0:	fa2e f302 	lsr.w	r3, lr, r2
 80004a4:	40b7      	lsls	r7, r6
 80004a6:	40b1      	lsls	r1, r6
 80004a8:	fa20 f202 	lsr.w	r2, r0, r2
 80004ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b0:	430a      	orrs	r2, r1
 80004b2:	fbb3 f8fe 	udiv	r8, r3, lr
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	fb0e 3318 	mls	r3, lr, r8, r3
 80004bc:	0c11      	lsrs	r1, r2, #16
 80004be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c2:	fb08 f904 	mul.w	r9, r8, r4
 80004c6:	40b0      	lsls	r0, r6
 80004c8:	4589      	cmp	r9, r1
 80004ca:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ce:	b280      	uxth	r0, r0
 80004d0:	d93e      	bls.n	8000550 <__udivmoddi4+0x2e8>
 80004d2:	1879      	adds	r1, r7, r1
 80004d4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d8:	d201      	bcs.n	80004de <__udivmoddi4+0x276>
 80004da:	4589      	cmp	r9, r1
 80004dc:	d81f      	bhi.n	800051e <__udivmoddi4+0x2b6>
 80004de:	eba1 0109 	sub.w	r1, r1, r9
 80004e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e6:	fb09 f804 	mul.w	r8, r9, r4
 80004ea:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ee:	b292      	uxth	r2, r2
 80004f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f4:	4542      	cmp	r2, r8
 80004f6:	d229      	bcs.n	800054c <__udivmoddi4+0x2e4>
 80004f8:	18ba      	adds	r2, r7, r2
 80004fa:	f109 31ff 	add.w	r1, r9, #4294967295
 80004fe:	d2c4      	bcs.n	800048a <__udivmoddi4+0x222>
 8000500:	4542      	cmp	r2, r8
 8000502:	d2c2      	bcs.n	800048a <__udivmoddi4+0x222>
 8000504:	f1a9 0102 	sub.w	r1, r9, #2
 8000508:	443a      	add	r2, r7
 800050a:	e7be      	b.n	800048a <__udivmoddi4+0x222>
 800050c:	45f0      	cmp	r8, lr
 800050e:	d29d      	bcs.n	800044c <__udivmoddi4+0x1e4>
 8000510:	ebbe 0302 	subs.w	r3, lr, r2
 8000514:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000518:	3801      	subs	r0, #1
 800051a:	46e1      	mov	r9, ip
 800051c:	e796      	b.n	800044c <__udivmoddi4+0x1e4>
 800051e:	eba7 0909 	sub.w	r9, r7, r9
 8000522:	4449      	add	r1, r9
 8000524:	f1a8 0c02 	sub.w	ip, r8, #2
 8000528:	fbb1 f9fe 	udiv	r9, r1, lr
 800052c:	fb09 f804 	mul.w	r8, r9, r4
 8000530:	e7db      	b.n	80004ea <__udivmoddi4+0x282>
 8000532:	4673      	mov	r3, lr
 8000534:	e77f      	b.n	8000436 <__udivmoddi4+0x1ce>
 8000536:	4650      	mov	r0, sl
 8000538:	e766      	b.n	8000408 <__udivmoddi4+0x1a0>
 800053a:	4608      	mov	r0, r1
 800053c:	e6fd      	b.n	800033a <__udivmoddi4+0xd2>
 800053e:	443b      	add	r3, r7
 8000540:	3a02      	subs	r2, #2
 8000542:	e733      	b.n	80003ac <__udivmoddi4+0x144>
 8000544:	f1ac 0c02 	sub.w	ip, ip, #2
 8000548:	443b      	add	r3, r7
 800054a:	e71c      	b.n	8000386 <__udivmoddi4+0x11e>
 800054c:	4649      	mov	r1, r9
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x222>
 8000550:	eba1 0109 	sub.w	r1, r1, r9
 8000554:	46c4      	mov	ip, r8
 8000556:	fbb1 f9fe 	udiv	r9, r1, lr
 800055a:	fb09 f804 	mul.w	r8, r9, r4
 800055e:	e7c4      	b.n	80004ea <__udivmoddi4+0x282>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <BNO055_Init_I2C>:
const char reset_sensor[3]	= {REG_WRITE, BNO055_SYS_TRIGGER, 0x01 << 5};
uint8_t get_readings[1] 	= {BNO055_ACC_DATA_X_LSB};


// Configure BNO055 with the desired settings
void BNO055_Init_I2C(I2C_HandleTypeDef* hi2c_device) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b08e      	sub	sp, #56	@ 0x38
 8000568:	af02      	add	r7, sp, #8
 800056a:	6078      	str	r0, [r7, #4]
	// Select BNO055 config mode
	uint8_t opr_config_mode[2] = {BNO055_OPR_MODE, CONFIGMODE};
 800056c:	233d      	movs	r3, #61	@ 0x3d
 800056e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, opr_config_mode, sizeof(opr_config_mode), 10);
 8000570:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8000574:	230a      	movs	r3, #10
 8000576:	9300      	str	r3, [sp, #0]
 8000578:	2302      	movs	r3, #2
 800057a:	2150      	movs	r1, #80	@ 0x50
 800057c:	6878      	ldr	r0, [r7, #4]
 800057e:	f002 fb47 	bl	8002c10 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8000582:	200a      	movs	r0, #10
 8000584:	f001 fe7e 	bl	8002284 <HAL_Delay>

	// Select page 1 to configure sensors
	uint8_t conf_page1[2] = {BNO055_PAGE_ID, 0x01};
 8000588:	f240 1307 	movw	r3, #263	@ 0x107
 800058c:	853b      	strh	r3, [r7, #40]	@ 0x28
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_page1, sizeof(conf_page1), 10);
 800058e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000592:	230a      	movs	r3, #10
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	2302      	movs	r3, #2
 8000598:	2150      	movs	r1, #80	@ 0x50
 800059a:	6878      	ldr	r0, [r7, #4]
 800059c:	f002 fb38 	bl	8002c10 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80005a0:	200a      	movs	r0, #10
 80005a2:	f001 fe6f 	bl	8002284 <HAL_Delay>

	// Configure ACC (Page 1; 0x08)
	uint8_t conf_acc[2] = {BNO055_ACC_CONFIG, APwrMode << 5 | Abw << 2 | Ascale};
 80005a6:	2308      	movs	r3, #8
 80005a8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80005ac:	4b52      	ldr	r3, [pc, #328]	@ (80006f8 <BNO055_Init_I2C+0x194>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	b25b      	sxtb	r3, r3
 80005b2:	015b      	lsls	r3, r3, #5
 80005b4:	b25a      	sxtb	r2, r3
 80005b6:	4b51      	ldr	r3, [pc, #324]	@ (80006fc <BNO055_Init_I2C+0x198>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	b25b      	sxtb	r3, r3
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	b25b      	sxtb	r3, r3
 80005c0:	4313      	orrs	r3, r2
 80005c2:	b25a      	sxtb	r2, r3
 80005c4:	4b4e      	ldr	r3, [pc, #312]	@ (8000700 <BNO055_Init_I2C+0x19c>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	b25b      	sxtb	r3, r3
 80005ca:	4313      	orrs	r3, r2
 80005cc:	b25b      	sxtb	r3, r3
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_acc, sizeof(conf_acc), 10);
 80005d4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80005d8:	230a      	movs	r3, #10
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2302      	movs	r3, #2
 80005de:	2150      	movs	r1, #80	@ 0x50
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f002 fb15 	bl	8002c10 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80005e6:	200a      	movs	r0, #10
 80005e8:	f001 fe4c 	bl	8002284 <HAL_Delay>

	// Configure GYR
	uint8_t conf_gyro[2] = {BNO055_GYRO_CONFIG_0, Gbw << 3 | Gscale};
 80005ec:	230a      	movs	r3, #10
 80005ee:	f887 3020 	strb.w	r3, [r7, #32]
 80005f2:	4b44      	ldr	r3, [pc, #272]	@ (8000704 <BNO055_Init_I2C+0x1a0>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	b25b      	sxtb	r3, r3
 80005f8:	00db      	lsls	r3, r3, #3
 80005fa:	b25a      	sxtb	r2, r3
 80005fc:	4b42      	ldr	r3, [pc, #264]	@ (8000708 <BNO055_Init_I2C+0x1a4>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	b25b      	sxtb	r3, r3
 8000602:	4313      	orrs	r3, r2
 8000604:	b25b      	sxtb	r3, r3
 8000606:	b2db      	uxtb	r3, r3
 8000608:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_gyro, sizeof(conf_gyro), 10);
 800060c:	f107 0220 	add.w	r2, r7, #32
 8000610:	230a      	movs	r3, #10
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	2302      	movs	r3, #2
 8000616:	2150      	movs	r1, #80	@ 0x50
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f002 faf9 	bl	8002c10 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 800061e:	200a      	movs	r0, #10
 8000620:	f001 fe30 	bl	8002284 <HAL_Delay>

	uint8_t conf_gyro_pwr[2] = {BNO055_GYRO_CONFIG_1, GPwrMode};
 8000624:	230b      	movs	r3, #11
 8000626:	773b      	strb	r3, [r7, #28]
 8000628:	4b38      	ldr	r3, [pc, #224]	@ (800070c <BNO055_Init_I2C+0x1a8>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	777b      	strb	r3, [r7, #29]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_gyro_pwr, sizeof(conf_gyro_pwr), 10);
 800062e:	f107 021c 	add.w	r2, r7, #28
 8000632:	230a      	movs	r3, #10
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2302      	movs	r3, #2
 8000638:	2150      	movs	r1, #80	@ 0x50
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f002 fae8 	bl	8002c10 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8000640:	200a      	movs	r0, #10
 8000642:	f001 fe1f 	bl	8002284 <HAL_Delay>

	// Configure MAG
	uint8_t conf_mag_pwr[4] = {REG_WRITE, BNO055_MAG_CONFIG, 0x01, MPwrMode << 5 | MOpMode << 3 | Modr};
 8000646:	2300      	movs	r3, #0
 8000648:	763b      	strb	r3, [r7, #24]
 800064a:	2309      	movs	r3, #9
 800064c:	767b      	strb	r3, [r7, #25]
 800064e:	2301      	movs	r3, #1
 8000650:	76bb      	strb	r3, [r7, #26]
 8000652:	4b2f      	ldr	r3, [pc, #188]	@ (8000710 <BNO055_Init_I2C+0x1ac>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	b25b      	sxtb	r3, r3
 8000658:	015b      	lsls	r3, r3, #5
 800065a:	b25a      	sxtb	r2, r3
 800065c:	4b2d      	ldr	r3, [pc, #180]	@ (8000714 <BNO055_Init_I2C+0x1b0>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	b25b      	sxtb	r3, r3
 8000662:	00db      	lsls	r3, r3, #3
 8000664:	b25b      	sxtb	r3, r3
 8000666:	4313      	orrs	r3, r2
 8000668:	b25a      	sxtb	r2, r3
 800066a:	4b2b      	ldr	r3, [pc, #172]	@ (8000718 <BNO055_Init_I2C+0x1b4>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	b25b      	sxtb	r3, r3
 8000670:	4313      	orrs	r3, r2
 8000672:	b25b      	sxtb	r3, r3
 8000674:	b2db      	uxtb	r3, r3
 8000676:	76fb      	strb	r3, [r7, #27]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_mag_pwr, sizeof(conf_mag_pwr), 10);
 8000678:	f107 0218 	add.w	r2, r7, #24
 800067c:	230a      	movs	r3, #10
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	2304      	movs	r3, #4
 8000682:	2150      	movs	r1, #80	@ 0x50
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f002 fac3 	bl	8002c10 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 800068a:	200a      	movs	r0, #10
 800068c:	f001 fdfa 	bl	8002284 <HAL_Delay>

	// Select BNO055 gyro temperature source 
	//PutHexString(START_BYTE, BNO055_TEMP_SOURCE, 0x01 );
	
	// Select page 0
	uint8_t conf_page0[2] = {BNO055_PAGE_ID, 0x00};
 8000690:	2307      	movs	r3, #7
 8000692:	82bb      	strh	r3, [r7, #20]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_page0, sizeof(conf_page0), 10);
 8000694:	f107 0214 	add.w	r2, r7, #20
 8000698:	230a      	movs	r3, #10
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	2302      	movs	r3, #2
 800069e:	2150      	movs	r1, #80	@ 0x50
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f002 fab5 	bl	8002c10 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80006a6:	200a      	movs	r0, #10
 80006a8:	f001 fdec 	bl	8002284 <HAL_Delay>
	//const char conf_units[4] = {REG_WRITE, BNO055_UNIT_SEL, 0x01, 0x82};
	//SendAccelData(USART1, (uint8_t*)conf_units);
	//HAL_Delay(50);

	// Select BNO055 system power mode (Page 0; 0x3E)
	uint8_t pwr_pwrmode[2] = {BNO055_PWR_MODE, PWRMode};
 80006ac:	233e      	movs	r3, #62	@ 0x3e
 80006ae:	743b      	strb	r3, [r7, #16]
 80006b0:	4b1a      	ldr	r3, [pc, #104]	@ (800071c <BNO055_Init_I2C+0x1b8>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, pwr_pwrmode, sizeof(pwr_pwrmode), 10);
 80006b6:	f107 0210 	add.w	r2, r7, #16
 80006ba:	230a      	movs	r3, #10
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	2302      	movs	r3, #2
 80006c0:	2150      	movs	r1, #80	@ 0x50
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f002 faa4 	bl	8002c10 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80006c8:	200a      	movs	r0, #10
 80006ca:	f001 fddb 	bl	8002284 <HAL_Delay>

	// Select BNO055 system operation mode (Page 0; 0x3D)
	uint8_t opr_oprmode[2] = {BNO055_OPR_MODE, OPRMode};
 80006ce:	233d      	movs	r3, #61	@ 0x3d
 80006d0:	733b      	strb	r3, [r7, #12]
 80006d2:	4b13      	ldr	r3, [pc, #76]	@ (8000720 <BNO055_Init_I2C+0x1bc>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, opr_oprmode, sizeof(opr_oprmode), 10);
 80006d8:	f107 020c 	add.w	r2, r7, #12
 80006dc:	230a      	movs	r3, #10
 80006de:	9300      	str	r3, [sp, #0]
 80006e0:	2302      	movs	r3, #2
 80006e2:	2150      	movs	r1, #80	@ 0x50
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f002 fa93 	bl	8002c10 <HAL_I2C_Master_Transmit>
	HAL_Delay(50);
 80006ea:	2032      	movs	r0, #50	@ 0x32
 80006ec:	f001 fdca 	bl	8002284 <HAL_Delay>
}
 80006f0:	bf00      	nop
 80006f2:	3730      	adds	r7, #48	@ 0x30
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	2000004e 	.word	0x2000004e
 80006fc:	20000002 	.word	0x20000002
 8000700:	20000001 	.word	0x20000001
 8000704:	20000000 	.word	0x20000000
 8000708:	2000004d 	.word	0x2000004d
 800070c:	2000004c 	.word	0x2000004c
 8000710:	2000004f 	.word	0x2000004f
 8000714:	20000003 	.word	0x20000003
 8000718:	20000004 	.word	0x20000004
 800071c:	20000050 	.word	0x20000050
 8000720:	20000005 	.word	0x20000005

08000724 <poll_IMU>:
	return status;
}

// Poll the IMU (linear acceleration and Euler angles)
// Use this when configures in IMU mode
uint8_t poll_IMU(I2C_HandleTypeDef* hi2c_device, uint8_t* imu_raw_data) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b088      	sub	sp, #32
 8000728:	af04      	add	r7, sp, #16
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	6039      	str	r1, [r7, #0]
	uint8_t status;
	// Get the raw linear acceleration data
	status = HAL_I2C_Mem_Read(hi2c_device, BNO055_I2C_ADDR_LO<<1, BNO055_LIA_DATA_X_LSB, I2C_MEMADD_SIZE_8BIT, imu_raw_data, LIN_ACC_NUMBER_OF_BYTES, 100);
 800072e:	2364      	movs	r3, #100	@ 0x64
 8000730:	9302      	str	r3, [sp, #8]
 8000732:	2304      	movs	r3, #4
 8000734:	9301      	str	r3, [sp, #4]
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2301      	movs	r3, #1
 800073c:	2228      	movs	r2, #40	@ 0x28
 800073e:	2150      	movs	r1, #80	@ 0x50
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f002 fb7d 	bl	8002e40 <HAL_I2C_Mem_Read>
 8000746:	4603      	mov	r3, r0
 8000748:	73fb      	strb	r3, [r7, #15]
	// Get the raw Euler angles data
	status = HAL_I2C_Mem_Read(hi2c_device, BNO055_I2C_ADDR_LO<<1, BNO055_EUL_HEADING_LSB, I2C_MEMADD_SIZE_8BIT, imu_raw_data + LIN_ACC_NUMBER_OF_BYTES, EULER_NUMBER_OF_BYTES, 100);
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	3304      	adds	r3, #4
 800074e:	2264      	movs	r2, #100	@ 0x64
 8000750:	9202      	str	r2, [sp, #8]
 8000752:	2206      	movs	r2, #6
 8000754:	9201      	str	r2, [sp, #4]
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2301      	movs	r3, #1
 800075a:	221a      	movs	r2, #26
 800075c:	2150      	movs	r1, #80	@ 0x50
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f002 fb6e 	bl	8002e40 <HAL_I2C_Mem_Read>
 8000764:	4603      	mov	r3, r0
 8000766:	73fb      	strb	r3, [r7, #15]
	return status;
 8000768:	7bfb      	ldrb	r3, [r7, #15]
}
 800076a:	4618      	mov	r0, r3
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af02      	add	r7, sp, #8
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	f023 030f 	bic.w	r3, r3, #15
 8000784:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	011b      	lsls	r3, r3, #4
 800078a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800078c:	7bfb      	ldrb	r3, [r7, #15]
 800078e:	f043 030c 	orr.w	r3, r3, #12
 8000792:	b2db      	uxtb	r3, r3
 8000794:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000796:	7bfb      	ldrb	r3, [r7, #15]
 8000798:	f043 0308 	orr.w	r3, r3, #8
 800079c:	b2db      	uxtb	r3, r3
 800079e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80007a0:	7bbb      	ldrb	r3, [r7, #14]
 80007a2:	f043 030c 	orr.w	r3, r3, #12
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80007aa:	7bbb      	ldrb	r3, [r7, #14]
 80007ac:	f043 0308 	orr.w	r3, r3, #8
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80007b4:	f107 0208 	add.w	r2, r7, #8
 80007b8:	2364      	movs	r3, #100	@ 0x64
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	2304      	movs	r3, #4
 80007be:	214e      	movs	r1, #78	@ 0x4e
 80007c0:	4803      	ldr	r0, [pc, #12]	@ (80007d0 <lcd_send_cmd+0x5c>)
 80007c2:	f002 fa25 	bl	8002c10 <HAL_I2C_Master_Transmit>
}
 80007c6:	bf00      	nop
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000054 	.word	0x20000054

080007d4 <lcd_init>:
    lcd_send_cmd (col);
}


void lcd_init (void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80007d8:	2032      	movs	r0, #50	@ 0x32
 80007da:	f001 fd53 	bl	8002284 <HAL_Delay>
	lcd_send_cmd (0x30);
 80007de:	2030      	movs	r0, #48	@ 0x30
 80007e0:	f7ff ffc8 	bl	8000774 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80007e4:	2005      	movs	r0, #5
 80007e6:	f001 fd4d 	bl	8002284 <HAL_Delay>
	lcd_send_cmd (0x30);
 80007ea:	2030      	movs	r0, #48	@ 0x30
 80007ec:	f7ff ffc2 	bl	8000774 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80007f0:	2001      	movs	r0, #1
 80007f2:	f001 fd47 	bl	8002284 <HAL_Delay>
	lcd_send_cmd (0x30);
 80007f6:	2030      	movs	r0, #48	@ 0x30
 80007f8:	f7ff ffbc 	bl	8000774 <lcd_send_cmd>
	HAL_Delay(10);
 80007fc:	200a      	movs	r0, #10
 80007fe:	f001 fd41 	bl	8002284 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000802:	2020      	movs	r0, #32
 8000804:	f7ff ffb6 	bl	8000774 <lcd_send_cmd>
	HAL_Delay(10);
 8000808:	200a      	movs	r0, #10
 800080a:	f001 fd3b 	bl	8002284 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800080e:	2028      	movs	r0, #40	@ 0x28
 8000810:	f7ff ffb0 	bl	8000774 <lcd_send_cmd>
	HAL_Delay(1);
 8000814:	2001      	movs	r0, #1
 8000816:	f001 fd35 	bl	8002284 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800081a:	2008      	movs	r0, #8
 800081c:	f7ff ffaa 	bl	8000774 <lcd_send_cmd>
	HAL_Delay(1);
 8000820:	2001      	movs	r0, #1
 8000822:	f001 fd2f 	bl	8002284 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000826:	2001      	movs	r0, #1
 8000828:	f7ff ffa4 	bl	8000774 <lcd_send_cmd>
	HAL_Delay(1);
 800082c:	2001      	movs	r0, #1
 800082e:	f001 fd29 	bl	8002284 <HAL_Delay>
	HAL_Delay(1);
 8000832:	2001      	movs	r0, #1
 8000834:	f001 fd26 	bl	8002284 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000838:	2006      	movs	r0, #6
 800083a:	f7ff ff9b 	bl	8000774 <lcd_send_cmd>
	HAL_Delay(1);
 800083e:	2001      	movs	r0, #1
 8000840:	f001 fd20 	bl	8002284 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000844:	200c      	movs	r0, #12
 8000846:	f7ff ff95 	bl	8000774 <lcd_send_cmd>
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <Interpret_Commands>:
/* USER CODE BEGIN 0 */

/************************ DEVICE COMMUNICATION (BLUETOOTH) ********************/

// Interpret commands
void Interpret_Commands(uint8_t *rx_buffer) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	// Respond after establishing connection with Jetson
	if (strstr((const char * ) rx_buffer, "jrdy")) {
 8000858:	493e      	ldr	r1, [pc, #248]	@ (8000954 <Interpret_Commands+0x104>)
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f007 f8df 	bl	8007a1e <strstr>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d005      	beq.n	8000872 <Interpret_Commands+0x22>
		Send_to_Base('0', ready_confirm_string, 1);
 8000866:	2201      	movs	r2, #1
 8000868:	493b      	ldr	r1, [pc, #236]	@ (8000958 <Interpret_Commands+0x108>)
 800086a:	2030      	movs	r0, #48	@ 0x30
 800086c:	f000 f886 	bl	800097c <Send_to_Base>
		}
		else {
			Send_to_Base('0', move_fail_string, 1);
		}
	}
}
 8000870:	e06b      	b.n	800094a <Interpret_Commands+0xfa>
	else if (strstr((const char * ) rx_buffer, "poll")) {
 8000872:	493a      	ldr	r1, [pc, #232]	@ (800095c <Interpret_Commands+0x10c>)
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f007 f8d2 	bl	8007a1e <strstr>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d002      	beq.n	8000886 <Interpret_Commands+0x36>
		poll_ultrasonic();
 8000880:	f000 f91a 	bl	8000ab8 <poll_ultrasonic>
}
 8000884:	e061      	b.n	800094a <Interpret_Commands+0xfa>
	else if (strstr((const char * ) rx_buffer, "mve")) {
 8000886:	4936      	ldr	r1, [pc, #216]	@ (8000960 <Interpret_Commands+0x110>)
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f007 f8c8 	bl	8007a1e <strstr>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d05a      	beq.n	800094a <Interpret_Commands+0xfa>
		float do_move = 0;
 8000894:	f04f 0300 	mov.w	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
		if (rx_buffer[5] == '1') {
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	3305      	adds	r3, #5
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b31      	cmp	r3, #49	@ 0x31
 80008a2:	d103      	bne.n	80008ac <Interpret_Commands+0x5c>
			do_move = 1;
 80008a4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	e007      	b.n	80008bc <Interpret_Commands+0x6c>
		else if (rx_buffer[5] == '0') {
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	3305      	adds	r3, #5
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b30      	cmp	r3, #48	@ 0x30
 80008b4:	d102      	bne.n	80008bc <Interpret_Commands+0x6c>
			do_move = 0;
 80008b6:	f04f 0300 	mov.w	r3, #0
 80008ba:	60fb      	str	r3, [r7, #12]
		requested_heading = (float)(rx_buffer[6]) * 360 / 255;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	3306      	adds	r3, #6
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	ee07 3a90 	vmov	s15, r3
 80008c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008ca:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8000964 <Interpret_Commands+0x114>
 80008ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80008d2:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8000968 <Interpret_Commands+0x118>
 80008d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008da:	edc7 7a02 	vstr	s15, [r7, #8]
		move(do_move, requested_heading);
 80008de:	edd7 0a02 	vldr	s1, [r7, #8]
 80008e2:	ed97 0a03 	vldr	s0, [r7, #12]
 80008e6:	f000 fa49 	bl	8000d7c <move>
		if ((tide_angle >= requested_heading - 5) && ((tide_angle <= requested_heading + 5) || (requested_heading > 355))) {
 80008ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80008ee:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80008f2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80008f6:	4b1d      	ldr	r3, [pc, #116]	@ (800096c <Interpret_Commands+0x11c>)
 80008f8:	edd3 7a00 	vldr	s15, [r3]
 80008fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000904:	d81c      	bhi.n	8000940 <Interpret_Commands+0xf0>
 8000906:	edd7 7a02 	vldr	s15, [r7, #8]
 800090a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800090e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000912:	4b16      	ldr	r3, [pc, #88]	@ (800096c <Interpret_Commands+0x11c>)
 8000914:	edd3 7a00 	vldr	s15, [r3]
 8000918:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800091c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000920:	da08      	bge.n	8000934 <Interpret_Commands+0xe4>
 8000922:	edd7 7a02 	vldr	s15, [r7, #8]
 8000926:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8000970 <Interpret_Commands+0x120>
 800092a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800092e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000932:	dd05      	ble.n	8000940 <Interpret_Commands+0xf0>
			Send_to_Base('0', move_success_string, 1);
 8000934:	2201      	movs	r2, #1
 8000936:	490f      	ldr	r1, [pc, #60]	@ (8000974 <Interpret_Commands+0x124>)
 8000938:	2030      	movs	r0, #48	@ 0x30
 800093a:	f000 f81f 	bl	800097c <Send_to_Base>
}
 800093e:	e004      	b.n	800094a <Interpret_Commands+0xfa>
			Send_to_Base('0', move_fail_string, 1);
 8000940:	2201      	movs	r2, #1
 8000942:	490d      	ldr	r1, [pc, #52]	@ (8000978 <Interpret_Commands+0x128>)
 8000944:	2030      	movs	r0, #48	@ 0x30
 8000946:	f000 f819 	bl	800097c <Send_to_Base>
}
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	08007aac 	.word	0x08007aac
 8000958:	20000008 	.word	0x20000008
 800095c:	08007ab4 	.word	0x08007ab4
 8000960:	08007abc 	.word	0x08007abc
 8000964:	43b40000 	.word	0x43b40000
 8000968:	437f0000 	.word	0x437f0000
 800096c:	20000394 	.word	0x20000394
 8000970:	43b18000 	.word	0x43b18000
 8000974:	20000010 	.word	0x20000010
 8000978:	20000018 	.word	0x20000018

0800097c <Send_to_Base>:

// Function to send bytes to Base
void Send_to_Base (uint8_t addr, uint8_t *data, uint8_t is_ready) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	6039      	str	r1, [r7, #0]
 8000986:	71fb      	strb	r3, [r7, #7]
 8000988:	4613      	mov	r3, r2
 800098a:	71bb      	strb	r3, [r7, #6]
	while (base_state != BASE_STATE_READY) {}
 800098c:	bf00      	nop
 800098e:	4b17      	ldr	r3, [pc, #92]	@ (80009ec <Send_to_Base+0x70>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	b2db      	uxtb	r3, r3
 8000994:	2b01      	cmp	r3, #1
 8000996:	d1fa      	bne.n	800098e <Send_to_Base+0x12>
	// Assign address
	base_tx_buffer[0] = addr;
 8000998:	4a15      	ldr	r2, [pc, #84]	@ (80009f0 <Send_to_Base+0x74>)
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	7013      	strb	r3, [r2, #0]
	// Assign data (until before the last byte)
	for (int i = 1; i < BUFFER_SIZE - 1; i++) {
 800099e:	2301      	movs	r3, #1
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	e00c      	b.n	80009be <Send_to_Base+0x42>
		base_tx_buffer[i] = data[i - 1];
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	3b01      	subs	r3, #1
 80009a8:	683a      	ldr	r2, [r7, #0]
 80009aa:	4413      	add	r3, r2
 80009ac:	7819      	ldrb	r1, [r3, #0]
 80009ae:	4a10      	ldr	r2, [pc, #64]	@ (80009f0 <Send_to_Base+0x74>)
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	4413      	add	r3, r2
 80009b4:	460a      	mov	r2, r1
 80009b6:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < BUFFER_SIZE - 1; i++) {
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	3301      	adds	r3, #1
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	2b06      	cmp	r3, #6
 80009c2:	ddef      	ble.n	80009a4 <Send_to_Base+0x28>
	}
	// Assign status byte
	if (is_ready) {
 80009c4:	79bb      	ldrb	r3, [r7, #6]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d003      	beq.n	80009d2 <Send_to_Base+0x56>
		base_tx_buffer[BUFFER_SIZE - 1] = 'r';
 80009ca:	4b09      	ldr	r3, [pc, #36]	@ (80009f0 <Send_to_Base+0x74>)
 80009cc:	2272      	movs	r2, #114	@ 0x72
 80009ce:	71da      	strb	r2, [r3, #7]
 80009d0:	e002      	b.n	80009d8 <Send_to_Base+0x5c>
	}
	else {
		base_tx_buffer[BUFFER_SIZE - 1] = 'n';
 80009d2:	4b07      	ldr	r3, [pc, #28]	@ (80009f0 <Send_to_Base+0x74>)
 80009d4:	226e      	movs	r2, #110	@ 0x6e
 80009d6:	71da      	strb	r2, [r3, #7]
	}
	// Transmit data packet
	HAL_UART_Transmit_IT(&huart2, base_tx_buffer, BUFFER_SIZE);
 80009d8:	2208      	movs	r2, #8
 80009da:	4905      	ldr	r1, [pc, #20]	@ (80009f0 <Send_to_Base+0x74>)
 80009dc:	4805      	ldr	r0, [pc, #20]	@ (80009f4 <Send_to_Base+0x78>)
 80009de:	f005 fc83 	bl	80062e8 <HAL_UART_Transmit_IT>
}
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	2000035c 	.word	0x2000035c
 80009f0:	20000354 	.word	0x20000354
 80009f4:	200002c4 	.word	0x200002c4

080009f8 <Receive_from_Base>:

// Function to Receive bytes from Base
void Receive_from_Base(void) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, base_rx_buffer, BUFFER_SIZE);
 80009fc:	2208      	movs	r2, #8
 80009fe:	4903      	ldr	r1, [pc, #12]	@ (8000a0c <Receive_from_Base+0x14>)
 8000a00:	4803      	ldr	r0, [pc, #12]	@ (8000a10 <Receive_from_Base+0x18>)
 8000a02:	f005 fccf 	bl	80063a4 <HAL_UART_Receive_IT>
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	2000034c 	.word	0x2000034c
 8000a10:	200002c4 	.word	0x200002c4

08000a14 <HAL_UART_TxCpltCallback>:

// Callback function after transmitting data
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart2.Instance) {
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <HAL_UART_TxCpltCallback+0x28>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d104      	bne.n	8000a32 <HAL_UART_TxCpltCallback+0x1e>
		// Transmission fully complete, now listen for any messages from base
		base_state = BASE_STATE_BUSY;
 8000a28:	4b05      	ldr	r3, [pc, #20]	@ (8000a40 <HAL_UART_TxCpltCallback+0x2c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	701a      	strb	r2, [r3, #0]
		Receive_from_Base();
 8000a2e:	f7ff ffe3 	bl	80009f8 <Receive_from_Base>
	}
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200002c4 	.word	0x200002c4
 8000a40:	2000035c 	.word	0x2000035c

08000a44 <HAL_UART_RxCpltCallback>:

// Callback function after receiving data
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart2.Instance) {
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	4b0a      	ldr	r3, [pc, #40]	@ (8000a7c <HAL_UART_RxCpltCallback+0x38>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d10d      	bne.n	8000a74 <HAL_UART_RxCpltCallback+0x30>
		// Ready?
		if (base_rx_buffer[BUFFER_SIZE - 1] == 'r') {
 8000a58:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <HAL_UART_RxCpltCallback+0x3c>)
 8000a5a:	79db      	ldrb	r3, [r3, #7]
 8000a5c:	2b72      	cmp	r3, #114	@ 0x72
 8000a5e:	d102      	bne.n	8000a66 <HAL_UART_RxCpltCallback+0x22>
			base_state = BASE_STATE_READY;
 8000a60:	4b08      	ldr	r3, [pc, #32]	@ (8000a84 <HAL_UART_RxCpltCallback+0x40>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	701a      	strb	r2, [r3, #0]
		}
		// Is this for Robot?
		if (base_rx_buffer[0] == '2') {
 8000a66:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <HAL_UART_RxCpltCallback+0x3c>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b32      	cmp	r3, #50	@ 0x32
 8000a6c:	d102      	bne.n	8000a74 <HAL_UART_RxCpltCallback+0x30>
			// Interpret commands
			Interpret_Commands(base_rx_buffer);
 8000a6e:	4804      	ldr	r0, [pc, #16]	@ (8000a80 <HAL_UART_RxCpltCallback+0x3c>)
 8000a70:	f7ff feee 	bl	8000850 <Interpret_Commands>
		}
	}
}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	200002c4 	.word	0x200002c4
 8000a80:	2000034c 	.word	0x2000034c
 8000a84:	2000035c 	.word	0x2000035c

08000a88 <delay_in_us>:

/*************************** ULTRASONIC SENSOR READING ************************/

// Function that delays in microseconds (usec)
void delay_in_us (uint16_t time, TIM_HandleTypeDef *htim) {
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	6039      	str	r1, [r7, #0]
 8000a92:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(htim, 0);
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2200      	movs	r2, #0
 8000a9a:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(htim) <  time);
 8000a9c:	bf00      	nop
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000aa4:	88fb      	ldrh	r3, [r7, #6]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d3f9      	bcc.n	8000a9e <delay_in_us+0x16>
}
 8000aaa:	bf00      	nop
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <poll_ultrasonic>:


// Poll ultrasonic sensors
void poll_ultrasonic (void) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	// Front Sensor
	idx = 0;
 8000abc:	4b4c      	ldr	r3, [pc, #304]	@ (8000bf0 <poll_ultrasonic+0x138>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(TRIG_PORT_FRONT, TRIG_PIN_FRONT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ac8:	484a      	ldr	r0, [pc, #296]	@ (8000bf4 <poll_ultrasonic+0x13c>)
 8000aca:	f001 ffc7 	bl	8002a5c <HAL_GPIO_WritePin>
	delay_in_us(10, &htim1);  // wait for 10 us
 8000ace:	494a      	ldr	r1, [pc, #296]	@ (8000bf8 <poll_ultrasonic+0x140>)
 8000ad0:	200a      	movs	r0, #10
 8000ad2:	f7ff ffd9 	bl	8000a88 <delay_in_us>
	HAL_GPIO_WritePin(TRIG_PORT_FRONT, TRIG_PIN_FRONT, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000adc:	4845      	ldr	r0, [pc, #276]	@ (8000bf4 <poll_ultrasonic+0x13c>)
 8000ade:	f001 ffbd 	bl	8002a5c <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000ae2:	4b45      	ldr	r3, [pc, #276]	@ (8000bf8 <poll_ultrasonic+0x140>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	68da      	ldr	r2, [r3, #12]
 8000ae8:	4b43      	ldr	r3, [pc, #268]	@ (8000bf8 <poll_ultrasonic+0x140>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f042 0202 	orr.w	r2, r2, #2
 8000af0:	60da      	str	r2, [r3, #12]
	HAL_Delay(10);
 8000af2:	200a      	movs	r0, #10
 8000af4:	f001 fbc6 	bl	8002284 <HAL_Delay>
	while(is_first_captured != 0);
 8000af8:	bf00      	nop
 8000afa:	4b40      	ldr	r3, [pc, #256]	@ (8000bfc <poll_ultrasonic+0x144>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d1fb      	bne.n	8000afa <poll_ultrasonic+0x42>

	// Back Sensor
	idx = 1;
 8000b02:	4b3b      	ldr	r3, [pc, #236]	@ (8000bf0 <poll_ultrasonic+0x138>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	601a      	str	r2, [r3, #0]
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000b08:	2100      	movs	r1, #0
 8000b0a:	483d      	ldr	r0, [pc, #244]	@ (8000c00 <poll_ultrasonic+0x148>)
 8000b0c:	f004 f84c 	bl	8004ba8 <HAL_TIM_IC_Start_IT>
	HAL_GPIO_WritePin(TRIG_PORT_BACK, TRIG_PIN_BACK, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000b10:	2201      	movs	r2, #1
 8000b12:	2180      	movs	r1, #128	@ 0x80
 8000b14:	483b      	ldr	r0, [pc, #236]	@ (8000c04 <poll_ultrasonic+0x14c>)
 8000b16:	f001 ffa1 	bl	8002a5c <HAL_GPIO_WritePin>
	delay_in_us(10, &htim3);  // wait for 10 us
 8000b1a:	4939      	ldr	r1, [pc, #228]	@ (8000c00 <poll_ultrasonic+0x148>)
 8000b1c:	200a      	movs	r0, #10
 8000b1e:	f7ff ffb3 	bl	8000a88 <delay_in_us>
	HAL_GPIO_WritePin(TRIG_PORT_BACK, TRIG_PIN_BACK, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000b22:	2200      	movs	r2, #0
 8000b24:	2180      	movs	r1, #128	@ 0x80
 8000b26:	4837      	ldr	r0, [pc, #220]	@ (8000c04 <poll_ultrasonic+0x14c>)
 8000b28:	f001 ff98 	bl	8002a5c <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 8000b2c:	4b34      	ldr	r3, [pc, #208]	@ (8000c00 <poll_ultrasonic+0x148>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	68da      	ldr	r2, [r3, #12]
 8000b32:	4b33      	ldr	r3, [pc, #204]	@ (8000c00 <poll_ultrasonic+0x148>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f042 0202 	orr.w	r2, r2, #2
 8000b3a:	60da      	str	r2, [r3, #12]
	HAL_Delay(10);
 8000b3c:	200a      	movs	r0, #10
 8000b3e:	f001 fba1 	bl	8002284 <HAL_Delay>
	while(is_first_captured != 0);
 8000b42:	bf00      	nop
 8000b44:	4b2d      	ldr	r3, [pc, #180]	@ (8000bfc <poll_ultrasonic+0x144>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d1fb      	bne.n	8000b44 <poll_ultrasonic+0x8c>

	// Left Sensor
	idx = 2;
 8000b4c:	4b28      	ldr	r3, [pc, #160]	@ (8000bf0 <poll_ultrasonic+0x138>)
 8000b4e:	2202      	movs	r2, #2
 8000b50:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(TRIG_PORT_LEFT, TRIG_PIN_LEFT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000b52:	2201      	movs	r2, #1
 8000b54:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b58:	482b      	ldr	r0, [pc, #172]	@ (8000c08 <poll_ultrasonic+0x150>)
 8000b5a:	f001 ff7f 	bl	8002a5c <HAL_GPIO_WritePin>
	delay_in_us(10, &htim4);  // wait for 10 us
 8000b5e:	492b      	ldr	r1, [pc, #172]	@ (8000c0c <poll_ultrasonic+0x154>)
 8000b60:	200a      	movs	r0, #10
 8000b62:	f7ff ff91 	bl	8000a88 <delay_in_us>
	HAL_GPIO_WritePin(TRIG_PORT_LEFT, TRIG_PIN_LEFT, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000b66:	2200      	movs	r2, #0
 8000b68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b6c:	4826      	ldr	r0, [pc, #152]	@ (8000c08 <poll_ultrasonic+0x150>)
 8000b6e:	f001 ff75 	bl	8002a5c <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 8000b72:	4b26      	ldr	r3, [pc, #152]	@ (8000c0c <poll_ultrasonic+0x154>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	68da      	ldr	r2, [r3, #12]
 8000b78:	4b24      	ldr	r3, [pc, #144]	@ (8000c0c <poll_ultrasonic+0x154>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f042 0202 	orr.w	r2, r2, #2
 8000b80:	60da      	str	r2, [r3, #12]
	HAL_Delay(10);
 8000b82:	200a      	movs	r0, #10
 8000b84:	f001 fb7e 	bl	8002284 <HAL_Delay>
	while(is_first_captured != 0);
 8000b88:	bf00      	nop
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bfc <poll_ultrasonic+0x144>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d1fb      	bne.n	8000b8a <poll_ultrasonic+0xd2>

	// Right Sensor
	idx = 3;
 8000b92:	4b17      	ldr	r3, [pc, #92]	@ (8000bf0 <poll_ultrasonic+0x138>)
 8000b94:	2203      	movs	r2, #3
 8000b96:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(TRIG_PORT_RIGHT, TRIG_PIN_RIGHT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2140      	movs	r1, #64	@ 0x40
 8000b9c:	481c      	ldr	r0, [pc, #112]	@ (8000c10 <poll_ultrasonic+0x158>)
 8000b9e:	f001 ff5d 	bl	8002a5c <HAL_GPIO_WritePin>
	delay_in_us(10, &htim2);  // wait for 10 us
 8000ba2:	491c      	ldr	r1, [pc, #112]	@ (8000c14 <poll_ultrasonic+0x15c>)
 8000ba4:	200a      	movs	r0, #10
 8000ba6:	f7ff ff6f 	bl	8000a88 <delay_in_us>
	HAL_GPIO_WritePin(TRIG_PORT_RIGHT, TRIG_PIN_RIGHT, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000baa:	2200      	movs	r2, #0
 8000bac:	2140      	movs	r1, #64	@ 0x40
 8000bae:	4818      	ldr	r0, [pc, #96]	@ (8000c10 <poll_ultrasonic+0x158>)
 8000bb0:	f001 ff54 	bl	8002a5c <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 8000bb4:	4b17      	ldr	r3, [pc, #92]	@ (8000c14 <poll_ultrasonic+0x15c>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	68da      	ldr	r2, [r3, #12]
 8000bba:	4b16      	ldr	r3, [pc, #88]	@ (8000c14 <poll_ultrasonic+0x15c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f042 0202 	orr.w	r2, r2, #2
 8000bc2:	60da      	str	r2, [r3, #12]
	HAL_Delay(10);
 8000bc4:	200a      	movs	r0, #10
 8000bc6:	f001 fb5d 	bl	8002284 <HAL_Delay>
	while(is_first_captured != 0);
 8000bca:	bf00      	nop
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000bfc <poll_ultrasonic+0x144>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d1fb      	bne.n	8000bcc <poll_ultrasonic+0x114>

	// Set last bytes to '0'
	detection_status[4] = '0';
 8000bd4:	4b10      	ldr	r3, [pc, #64]	@ (8000c18 <poll_ultrasonic+0x160>)
 8000bd6:	2230      	movs	r2, #48	@ 0x30
 8000bd8:	711a      	strb	r2, [r3, #4]
	detection_status[5] = '0';
 8000bda:	4b0f      	ldr	r3, [pc, #60]	@ (8000c18 <poll_ultrasonic+0x160>)
 8000bdc:	2230      	movs	r2, #48	@ 0x30
 8000bde:	715a      	strb	r2, [r3, #5]

	// Send detection status to Jetson
	Send_to_Base('0', detection_status, 1);
 8000be0:	2201      	movs	r2, #1
 8000be2:	490d      	ldr	r1, [pc, #52]	@ (8000c18 <poll_ultrasonic+0x160>)
 8000be4:	2030      	movs	r0, #48	@ 0x30
 8000be6:	f7ff fec9 	bl	800097c <Send_to_Base>
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000360 	.word	0x20000360
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	200000fc 	.word	0x200000fc
 8000bfc:	2000037c 	.word	0x2000037c
 8000c00:	20000194 	.word	0x20000194
 8000c04:	40020800 	.word	0x40020800
 8000c08:	40020c00 	.word	0x40020c00
 8000c0c:	200001e0 	.word	0x200001e0
 8000c10:	40020000 	.word	0x40020000
 8000c14:	20000148 	.word	0x20000148
 8000c18:	20000380 	.word	0x20000380
 8000c1c:	00000000 	.word	0x00000000

08000c20 <HAL_TIM_IC_CaptureCallback>:


// Input Capture Callback Function
void HAL_TIM_IC_CaptureCallback (TIM_HandleTypeDef *htim) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) { // If the interrupt source is channel 1
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	7f1b      	ldrb	r3, [r3, #28]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	f040 808d 	bne.w	8000d4c <HAL_TIM_IC_CaptureCallback+0x12c>
		if (is_first_captured == 0) { // If the first value is not captured
 8000c32:	4b4b      	ldr	r3, [pc, #300]	@ (8000d60 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d11a      	bne.n	8000c70 <HAL_TIM_IC_CaptureCallback+0x50>
			val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // Read the first value
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f004 fc85 	bl	800554c <HAL_TIM_ReadCapturedValue>
 8000c42:	4603      	mov	r3, r0
 8000c44:	4a47      	ldr	r2, [pc, #284]	@ (8000d64 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000c46:	6013      	str	r3, [r2, #0]
			is_first_captured = 1;
 8000c48:	4b45      	ldr	r3, [pc, #276]	@ (8000d60 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	701a      	strb	r2, [r3, #0]
			// Change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	6a1a      	ldr	r2, [r3, #32]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f022 020a 	bic.w	r2, r2, #10
 8000c5c:	621a      	str	r2, [r3, #32]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	6a1a      	ldr	r2, [r3, #32]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f042 0202 	orr.w	r2, r2, #2
 8000c6c:	621a      	str	r2, [r3, #32]
			else {
				detection_status[idx] = '0';  // no obstacle detected
			}
		}
	}
}
 8000c6e:	e06d      	b.n	8000d4c <HAL_TIM_IC_CaptureCallback+0x12c>
		else if (is_first_captured == 1) { // If the first is already captured
 8000c70:	4b3b      	ldr	r3, [pc, #236]	@ (8000d60 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d169      	bne.n	8000d4c <HAL_TIM_IC_CaptureCallback+0x12c>
			val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // Read second value
 8000c78:	2100      	movs	r1, #0
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f004 fc66 	bl	800554c <HAL_TIM_ReadCapturedValue>
 8000c80:	4603      	mov	r3, r0
 8000c82:	4a39      	ldr	r2, [pc, #228]	@ (8000d68 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000c84:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // Reset the counter
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	625a      	str	r2, [r3, #36]	@ 0x24
			if (val2 > val1) {
 8000c8e:	4b36      	ldr	r3, [pc, #216]	@ (8000d68 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	4b34      	ldr	r3, [pc, #208]	@ (8000d64 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d906      	bls.n	8000ca8 <HAL_TIM_IC_CaptureCallback+0x88>
				diff = val2 - val1; // diff is in microseconds
 8000c9a:	4b33      	ldr	r3, [pc, #204]	@ (8000d68 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	4b31      	ldr	r3, [pc, #196]	@ (8000d64 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	1ad3      	subs	r3, r2, r3
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	e00e      	b.n	8000cc6 <HAL_TIM_IC_CaptureCallback+0xa6>
			else if (val1 > val2) {
 8000ca8:	4b2e      	ldr	r3, [pc, #184]	@ (8000d64 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b2e      	ldr	r3, [pc, #184]	@ (8000d68 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d908      	bls.n	8000cc6 <HAL_TIM_IC_CaptureCallback+0xa6>
				diff = (0xffff - val1) + val2;  // diff is in microseconds
 8000cb4:	4b2c      	ldr	r3, [pc, #176]	@ (8000d68 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4b2a      	ldr	r3, [pc, #168]	@ (8000d64 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	1ad2      	subs	r2, r2, r3
 8000cbe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cc2:	4413      	add	r3, r2
 8000cc4:	60fb      	str	r3, [r7, #12]
			distance[idx] = diff * .034/2;  // UNITS BREAKDOWN: (10^(-6) s) * (10^4 m/s) = 10^(-2) m = cm -> distance is in cm
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	ee07 3a90 	vmov	s15, r3
 8000ccc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000cd0:	ed9f 6b21 	vldr	d6, [pc, #132]	@ 8000d58 <HAL_TIM_IC_CaptureCallback+0x138>
 8000cd4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000cd8:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 8000cdc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ce0:	4b22      	ldr	r3, [pc, #136]	@ (8000d6c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ce8:	ee17 1a90 	vmov	r1, s15
 8000cec:	4a20      	ldr	r2, [pc, #128]	@ (8000d70 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000cee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			is_first_captured = 0; // Set back to false
 8000cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d60 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	6a1a      	ldr	r2, [r3, #32]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f022 020a 	bic.w	r2, r2, #10
 8000d06:	621a      	str	r2, [r3, #32]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	6a12      	ldr	r2, [r2, #32]
 8000d12:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	68da      	ldr	r2, [r3, #12]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f022 0202 	bic.w	r2, r2, #2
 8000d22:	60da      	str	r2, [r3, #12]
			if (distance[idx] < distance_threshold) {
 8000d24:	4b11      	ldr	r3, [pc, #68]	@ (8000d6c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a11      	ldr	r2, [pc, #68]	@ (8000d70 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000d2a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d2e:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d205      	bcs.n	8000d42 <HAL_TIM_IC_CaptureCallback+0x122>
				detection_status[idx] = '1';  // obstacle detected!
 8000d36:	4b0d      	ldr	r3, [pc, #52]	@ (8000d6c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a0f      	ldr	r2, [pc, #60]	@ (8000d78 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000d3c:	2131      	movs	r1, #49	@ 0x31
 8000d3e:	54d1      	strb	r1, [r2, r3]
}
 8000d40:	e004      	b.n	8000d4c <HAL_TIM_IC_CaptureCallback+0x12c>
				detection_status[idx] = '0';  // no obstacle detected
 8000d42:	4b0a      	ldr	r3, [pc, #40]	@ (8000d6c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a0c      	ldr	r2, [pc, #48]	@ (8000d78 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000d48:	2130      	movs	r1, #48	@ 0x30
 8000d4a:	54d1      	strb	r1, [r2, r3]
}
 8000d4c:	bf00      	nop
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	f3af 8000 	nop.w
 8000d58:	b020c49c 	.word	0xb020c49c
 8000d5c:	3fa16872 	.word	0x3fa16872
 8000d60:	2000037c 	.word	0x2000037c
 8000d64:	20000364 	.word	0x20000364
 8000d68:	20000368 	.word	0x20000368
 8000d6c:	20000360 	.word	0x20000360
 8000d70:	2000036c 	.word	0x2000036c
 8000d74:	20000020 	.word	0x20000020
 8000d78:	20000380 	.word	0x20000380

08000d7c <move>:
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
}

void move(float x, float angle) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	ed87 0a01 	vstr	s0, [r7, #4]
 8000d86:	edc7 0a00 	vstr	s1, [r7]
	while(angle - tide_angle > error_t) {
 8000d8a:	e098      	b.n	8000ebe <move+0x142>
		poll_IMU(&hi2c2, imu_readings);
 8000d8c:	496b      	ldr	r1, [pc, #428]	@ (8000f3c <move+0x1c0>)
 8000d8e:	486c      	ldr	r0, [pc, #432]	@ (8000f40 <move+0x1c4>)
 8000d90:	f7ff fcc8 	bl	8000724 <poll_IMU>
		euler_heading_raw = (((int16_t)((uint8_t *)(imu_readings))[5] << 8) | ((uint8_t *)(imu_readings))[4]);
 8000d94:	4b69      	ldr	r3, [pc, #420]	@ (8000f3c <move+0x1c0>)
 8000d96:	795b      	ldrb	r3, [r3, #5]
 8000d98:	b21b      	sxth	r3, r3
 8000d9a:	021b      	lsls	r3, r3, #8
 8000d9c:	b21a      	sxth	r2, r3
 8000d9e:	4b67      	ldr	r3, [pc, #412]	@ (8000f3c <move+0x1c0>)
 8000da0:	791b      	ldrb	r3, [r3, #4]
 8000da2:	b21b      	sxth	r3, r3
 8000da4:	4313      	orrs	r3, r2
 8000da6:	b21a      	sxth	r2, r3
 8000da8:	4b66      	ldr	r3, [pc, #408]	@ (8000f44 <move+0x1c8>)
 8000daa:	801a      	strh	r2, [r3, #0]
		tide_angle = ((float)(euler_heading_raw))/16.0f;
 8000dac:	4b65      	ldr	r3, [pc, #404]	@ (8000f44 <move+0x1c8>)
 8000dae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000db2:	ee07 3a90 	vmov	s15, r3
 8000db6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dba:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8000dbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dc2:	4b61      	ldr	r3, [pc, #388]	@ (8000f48 <move+0x1cc>)
 8000dc4:	edc3 7a00 	vstr	s15, [r3]
		int angle_diff = angle - tide_angle;
 8000dc8:	4b5f      	ldr	r3, [pc, #380]	@ (8000f48 <move+0x1cc>)
 8000dca:	edd3 7a00 	vldr	s15, [r3]
 8000dce:	ed97 7a00 	vldr	s14, [r7]
 8000dd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dda:	ee17 3a90 	vmov	r3, s15
 8000dde:	60fb      	str	r3, [r7, #12]
		//assume within tolerance, not enough time in project to do otherwise
		//if angle difference is positive, turn right
		//if angle difference is negative, turn left
		if(angle_diff < 0) {
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	da34      	bge.n	8000e50 <move+0xd4>
			while(angle_diff < error_t) {
 8000de6:	e02f      	b.n	8000e48 <move+0xcc>
				poll_IMU(&hi2c2, imu_readings);
 8000de8:	4954      	ldr	r1, [pc, #336]	@ (8000f3c <move+0x1c0>)
 8000dea:	4855      	ldr	r0, [pc, #340]	@ (8000f40 <move+0x1c4>)
 8000dec:	f7ff fc9a 	bl	8000724 <poll_IMU>
				euler_heading_raw = (((int16_t)((uint8_t *)(imu_readings))[5] << 8) | ((uint8_t *)(imu_readings))[4]);
 8000df0:	4b52      	ldr	r3, [pc, #328]	@ (8000f3c <move+0x1c0>)
 8000df2:	795b      	ldrb	r3, [r3, #5]
 8000df4:	b21b      	sxth	r3, r3
 8000df6:	021b      	lsls	r3, r3, #8
 8000df8:	b21a      	sxth	r2, r3
 8000dfa:	4b50      	ldr	r3, [pc, #320]	@ (8000f3c <move+0x1c0>)
 8000dfc:	791b      	ldrb	r3, [r3, #4]
 8000dfe:	b21b      	sxth	r3, r3
 8000e00:	4313      	orrs	r3, r2
 8000e02:	b21a      	sxth	r2, r3
 8000e04:	4b4f      	ldr	r3, [pc, #316]	@ (8000f44 <move+0x1c8>)
 8000e06:	801a      	strh	r2, [r3, #0]
				tide_angle = ((float)(euler_heading_raw))/16.0f;
 8000e08:	4b4e      	ldr	r3, [pc, #312]	@ (8000f44 <move+0x1c8>)
 8000e0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e0e:	ee07 3a90 	vmov	s15, r3
 8000e12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e16:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8000e1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e1e:	4b4a      	ldr	r3, [pc, #296]	@ (8000f48 <move+0x1cc>)
 8000e20:	edc3 7a00 	vstr	s15, [r3]
				motors_controller(1, -1);
 8000e24:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 8000e28:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000e2c:	f000 f898 	bl	8000f60 <motors_controller>
				angle_diff = angle - tide_angle;
 8000e30:	4b45      	ldr	r3, [pc, #276]	@ (8000f48 <move+0x1cc>)
 8000e32:	edd3 7a00 	vldr	s15, [r3]
 8000e36:	ed97 7a00 	vldr	s14, [r7]
 8000e3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e42:	ee17 3a90 	vmov	r3, s15
 8000e46:	60fb      	str	r3, [r7, #12]
			while(angle_diff < error_t) {
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	2b09      	cmp	r3, #9
 8000e4c:	ddcc      	ble.n	8000de8 <move+0x6c>
 8000e4e:	e036      	b.n	8000ebe <move+0x142>
			}
		}
		else if(angle_diff > 0) {
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	dd33      	ble.n	8000ebe <move+0x142>
			while(angle_diff > error_t) {
 8000e56:	e02f      	b.n	8000eb8 <move+0x13c>
				poll_IMU(&hi2c2, imu_readings);
 8000e58:	4938      	ldr	r1, [pc, #224]	@ (8000f3c <move+0x1c0>)
 8000e5a:	4839      	ldr	r0, [pc, #228]	@ (8000f40 <move+0x1c4>)
 8000e5c:	f7ff fc62 	bl	8000724 <poll_IMU>
				euler_heading_raw = (((int16_t)((uint8_t *)(imu_readings))[5] << 8) | ((uint8_t *)(imu_readings))[4]);
 8000e60:	4b36      	ldr	r3, [pc, #216]	@ (8000f3c <move+0x1c0>)
 8000e62:	795b      	ldrb	r3, [r3, #5]
 8000e64:	b21b      	sxth	r3, r3
 8000e66:	021b      	lsls	r3, r3, #8
 8000e68:	b21a      	sxth	r2, r3
 8000e6a:	4b34      	ldr	r3, [pc, #208]	@ (8000f3c <move+0x1c0>)
 8000e6c:	791b      	ldrb	r3, [r3, #4]
 8000e6e:	b21b      	sxth	r3, r3
 8000e70:	4313      	orrs	r3, r2
 8000e72:	b21a      	sxth	r2, r3
 8000e74:	4b33      	ldr	r3, [pc, #204]	@ (8000f44 <move+0x1c8>)
 8000e76:	801a      	strh	r2, [r3, #0]
				tide_angle = ((float)(euler_heading_raw))/16.0f;
 8000e78:	4b32      	ldr	r3, [pc, #200]	@ (8000f44 <move+0x1c8>)
 8000e7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e7e:	ee07 3a90 	vmov	s15, r3
 8000e82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e86:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8000e8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e8e:	4b2e      	ldr	r3, [pc, #184]	@ (8000f48 <move+0x1cc>)
 8000e90:	edc3 7a00 	vstr	s15, [r3]
				motors_controller(-1, 1);
 8000e94:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8000e98:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8000e9c:	f000 f860 	bl	8000f60 <motors_controller>
				angle_diff = angle - tide_angle;
 8000ea0:	4b29      	ldr	r3, [pc, #164]	@ (8000f48 <move+0x1cc>)
 8000ea2:	edd3 7a00 	vldr	s15, [r3]
 8000ea6:	ed97 7a00 	vldr	s14, [r7]
 8000eaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000eae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eb2:	ee17 3a90 	vmov	r3, s15
 8000eb6:	60fb      	str	r3, [r7, #12]
			while(angle_diff > error_t) {
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	2b0a      	cmp	r3, #10
 8000ebc:	dccc      	bgt.n	8000e58 <move+0xdc>
	while(angle - tide_angle > error_t) {
 8000ebe:	4b22      	ldr	r3, [pc, #136]	@ (8000f48 <move+0x1cc>)
 8000ec0:	edd3 7a00 	vldr	s15, [r3]
 8000ec4:	ed97 7a00 	vldr	s14, [r7]
 8000ec8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ecc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000ed0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed8:	f73f af58 	bgt.w	8000d8c <move+0x10>
			}
		}
	}
	//calculated equation. assume x is in 6 inch intervals
	if(x == 1) {
 8000edc:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ee0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000ee4:	eef4 7a47 	vcmp.f32	s15, s14
 8000ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eec:	d122      	bne.n	8000f34 <move+0x1b8>
		motors_controller(1,1);
 8000eee:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8000ef2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000ef6:	f000 f833 	bl	8000f60 <motors_controller>
		HAL_TIM_Base_Start_IT(&htim9);
 8000efa:	4814      	ldr	r0, [pc, #80]	@ (8000f4c <move+0x1d0>)
 8000efc:	f003 fd24 	bl	8004948 <HAL_TIM_Base_Start_IT>
		TIM9 -> CR1 |= 0b1;
 8000f00:	4b13      	ldr	r3, [pc, #76]	@ (8000f50 <move+0x1d4>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a12      	ldr	r2, [pc, #72]	@ (8000f50 <move+0x1d4>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6013      	str	r3, [r2, #0]
		//wait for timer to overrun the 4.25 second period
		while(!ic_overrun);
 8000f0c:	bf00      	nop
 8000f0e:	4b11      	ldr	r3, [pc, #68]	@ (8000f54 <move+0x1d8>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d0fb      	beq.n	8000f0e <move+0x192>
		motors_controller(0,0);
 8000f16:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8000f58 <move+0x1dc>
 8000f1a:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8000f58 <move+0x1dc>
 8000f1e:	f000 f81f 	bl	8000f60 <motors_controller>
		TIM9 -> CNT = 0;
 8000f22:	4b0b      	ldr	r3, [pc, #44]	@ (8000f50 <move+0x1d4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	625a      	str	r2, [r3, #36]	@ 0x24
		ic_overrun = 0;
 8000f28:	4b0a      	ldr	r3, [pc, #40]	@ (8000f54 <move+0x1d8>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
		tim9_counter = 0;
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f5c <move+0x1e0>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
	}
}
 8000f34:	bf00      	nop
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000388 	.word	0x20000388
 8000f40:	200000a8 	.word	0x200000a8
 8000f44:	20000392 	.word	0x20000392
 8000f48:	20000394 	.word	0x20000394
 8000f4c:	20000278 	.word	0x20000278
 8000f50:	40014000 	.word	0x40014000
 8000f54:	2000039c 	.word	0x2000039c
 8000f58:	00000000 	.word	0x00000000
 8000f5c:	20000398 	.word	0x20000398

08000f60 <motors_controller>:

void motors_controller(float on_r, float on_l) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f6a:	edc7 0a00 	vstr	s1, [r7]
	if(on_r == 1) {
 8000f6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f76:	eef4 7a47 	vcmp.f32	s15, s14
 8000f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f7e:	d111      	bne.n	8000fa4 <motors_controller+0x44>
		HAL_GPIO_WritePin(RIGHT_REVERSE, RIGHT_REVERSE_PIN, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f86:	4842      	ldr	r0, [pc, #264]	@ (8001090 <motors_controller+0x130>)
 8000f88:	f001 fd68 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RIGHT_FORWARD, RIGHT_FORWARD_PIN, GPIO_PIN_SET);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f92:	483f      	ldr	r0, [pc, #252]	@ (8001090 <motors_controller+0x130>)
 8000f94:	f001 fd62 	bl	8002a5c <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&RIGHT_PWM, RIGHT_PWM_CHANNEL, 0.8 * pwm_period);
 8000f98:	4b3e      	ldr	r3, [pc, #248]	@ (8001094 <motors_controller+0x134>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f240 727f 	movw	r2, #1919	@ 0x77f
 8000fa0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000fa2:	e02a      	b.n	8000ffa <motors_controller+0x9a>
	}
	else if(on_r == -1) {
 8000fa4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fa8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8000fac:	eef4 7a47 	vcmp.f32	s15, s14
 8000fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb4:	d111      	bne.n	8000fda <motors_controller+0x7a>
		HAL_GPIO_WritePin(RIGHT_FORWARD, RIGHT_FORWARD_PIN, GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fbc:	4834      	ldr	r0, [pc, #208]	@ (8001090 <motors_controller+0x130>)
 8000fbe:	f001 fd4d 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RIGHT_REVERSE, RIGHT_REVERSE_PIN, GPIO_PIN_SET);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fc8:	4831      	ldr	r0, [pc, #196]	@ (8001090 <motors_controller+0x130>)
 8000fca:	f001 fd47 	bl	8002a5c <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&RIGHT_PWM, RIGHT_PWM_CHANNEL, 0.8 * pwm_period);
 8000fce:	4b31      	ldr	r3, [pc, #196]	@ (8001094 <motors_controller+0x134>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f240 727f 	movw	r2, #1919	@ 0x77f
 8000fd6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000fd8:	e00f      	b.n	8000ffa <motors_controller+0x9a>
	}
	else {
		__HAL_TIM_SET_COMPARE(&RIGHT_PWM, RIGHT_PWM_CHANNEL, 0);
 8000fda:	4b2e      	ldr	r3, [pc, #184]	@ (8001094 <motors_controller+0x134>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_GPIO_WritePin(RIGHT_FORWARD, RIGHT_FORWARD_PIN, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fe8:	4829      	ldr	r0, [pc, #164]	@ (8001090 <motors_controller+0x130>)
 8000fea:	f001 fd37 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RIGHT_REVERSE, RIGHT_REVERSE_PIN, GPIO_PIN_RESET);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ff4:	4826      	ldr	r0, [pc, #152]	@ (8001090 <motors_controller+0x130>)
 8000ff6:	f001 fd31 	bl	8002a5c <HAL_GPIO_WritePin>
	}

	if(on_l == 1) {
 8000ffa:	edd7 7a00 	vldr	s15, [r7]
 8000ffe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001002:	eef4 7a47 	vcmp.f32	s15, s14
 8001006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800100a:	d111      	bne.n	8001030 <motors_controller+0xd0>
		HAL_GPIO_WritePin(LEFT_REVERSE, LEFT_REVERSE_PIN, GPIO_PIN_RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001012:	481f      	ldr	r0, [pc, #124]	@ (8001090 <motors_controller+0x130>)
 8001014:	f001 fd22 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEFT_FORWARD, LEFT_FORWARD_PIN, GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800101e:	481c      	ldr	r0, [pc, #112]	@ (8001090 <motors_controller+0x130>)
 8001020:	f001 fd1c 	bl	8002a5c <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&LEFT_PWM, LEFT_PWM_CHANNEL, 0.778 * pwm_period);
 8001024:	4b1b      	ldr	r3, [pc, #108]	@ (8001094 <motors_controller+0x134>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f240 724a 	movw	r2, #1866	@ 0x74a
 800102c:	641a      	str	r2, [r3, #64]	@ 0x40
	else {
		__HAL_TIM_SET_COMPARE(&LEFT_PWM, LEFT_PWM_CHANNEL, 0);
		HAL_GPIO_WritePin(LEFT_FORWARD, LEFT_FORWARD_PIN, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LEFT_REVERSE, LEFT_REVERSE_PIN, GPIO_PIN_RESET);
	}
}
 800102e:	e02a      	b.n	8001086 <motors_controller+0x126>
	else if(on_l == -1) {
 8001030:	edd7 7a00 	vldr	s15, [r7]
 8001034:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001038:	eef4 7a47 	vcmp.f32	s15, s14
 800103c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001040:	d111      	bne.n	8001066 <motors_controller+0x106>
		HAL_GPIO_WritePin(LEFT_FORWARD, LEFT_FORWARD_PIN, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001048:	4811      	ldr	r0, [pc, #68]	@ (8001090 <motors_controller+0x130>)
 800104a:	f001 fd07 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEFT_REVERSE, LEFT_REVERSE_PIN, GPIO_PIN_SET);
 800104e:	2201      	movs	r2, #1
 8001050:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001054:	480e      	ldr	r0, [pc, #56]	@ (8001090 <motors_controller+0x130>)
 8001056:	f001 fd01 	bl	8002a5c <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&LEFT_PWM, LEFT_PWM_CHANNEL, 0.778 * pwm_period);
 800105a:	4b0e      	ldr	r3, [pc, #56]	@ (8001094 <motors_controller+0x134>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f240 724a 	movw	r2, #1866	@ 0x74a
 8001062:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001064:	e00f      	b.n	8001086 <motors_controller+0x126>
		__HAL_TIM_SET_COMPARE(&LEFT_PWM, LEFT_PWM_CHANNEL, 0);
 8001066:	4b0b      	ldr	r3, [pc, #44]	@ (8001094 <motors_controller+0x134>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2200      	movs	r2, #0
 800106c:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_GPIO_WritePin(LEFT_FORWARD, LEFT_FORWARD_PIN, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001074:	4806      	ldr	r0, [pc, #24]	@ (8001090 <motors_controller+0x130>)
 8001076:	f001 fcf1 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEFT_REVERSE, LEFT_REVERSE_PIN, GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001080:	4803      	ldr	r0, [pc, #12]	@ (8001090 <motors_controller+0x130>)
 8001082:	f001 fceb 	bl	8002a5c <HAL_GPIO_WritePin>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40021000 	.word	0x40021000
 8001094:	2000022c 	.word	0x2000022c

08001098 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim9.Instance){
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b10      	ldr	r3, [pc, #64]	@ (80010e8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d116      	bne.n	80010da <HAL_TIM_PeriodElapsedCallback+0x42>
		__HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f06f 0201 	mvn.w	r2, #1
 80010b4:	611a      	str	r2, [r3, #16]
		tim9_counter++;
 80010b6:	4b0d      	ldr	r3, [pc, #52]	@ (80010ec <HAL_TIM_PeriodElapsedCallback+0x54>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	3301      	adds	r3, #1
 80010bc:	4a0b      	ldr	r2, [pc, #44]	@ (80010ec <HAL_TIM_PeriodElapsedCallback+0x54>)
 80010be:	6013      	str	r3, [r2, #0]
		if(tim9_counter >= 17){
 80010c0:	4b0a      	ldr	r3, [pc, #40]	@ (80010ec <HAL_TIM_PeriodElapsedCallback+0x54>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b10      	cmp	r3, #16
 80010c6:	dd08      	ble.n	80010da <HAL_TIM_PeriodElapsedCallback+0x42>
			ic_overrun = 1;
 80010c8:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	601a      	str	r2, [r3, #0]
			TIM9 -> CR1 &= ~0b1;
 80010ce:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a08      	ldr	r2, [pc, #32]	@ (80010f4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80010d4:	f023 0301 	bic.w	r3, r3, #1
 80010d8:	6013      	str	r3, [r2, #0]
		}
	}
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000278 	.word	0x20000278
 80010ec:	20000398 	.word	0x20000398
 80010f0:	2000039c 	.word	0x2000039c
 80010f4:	40014000 	.word	0x40014000

080010f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	*/

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80010fc:	f000 fcdc 	bl	8001ab8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001100:	f001 f863 	bl	80021ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001104:	f000 f828 	bl	8001158 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001108:	f000 fbf6 	bl	80018f8 <MX_GPIO_Init>
  MX_I2C2_Init();
 800110c:	f000 f8d4 	bl	80012b8 <MX_I2C2_Init>
  MX_TIM1_Init();
 8001110:	f000 f912 	bl	8001338 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001114:	f000 f98a 	bl	800142c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001118:	f000 f9fc 	bl	8001514 <MX_TIM3_Init>
  MX_TIM4_Init();
 800111c:	f000 fa70 	bl	8001600 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8001120:	f000 fbba 	bl	8001898 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001124:	f000 f888 	bl	8001238 <MX_I2C1_Init>
  MX_TIM8_Init();
 8001128:	f000 fae0 	bl	80016ec <MX_TIM8_Init>
  MX_TIM9_Init();
 800112c:	f000 fb7a 	bl	8001824 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  // Turn ON Debug LED
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8001130:	2201      	movs	r2, #1
 8001132:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001136:	4806      	ldr	r0, [pc, #24]	@ (8001150 <main+0x58>)
 8001138:	f001 fc90 	bl	8002a5c <HAL_GPIO_WritePin>

  // TODO: Comment when not using LCD screen
  lcd_init();
 800113c:	f7ff fb4a 	bl	80007d4 <lcd_init>
  */

  // lcd_send_string("H=    R=    P=");

  // Start and configure IMU
  BNO055_Init_I2C(&hi2c2);
 8001140:	4804      	ldr	r0, [pc, #16]	@ (8001154 <main+0x5c>)
 8001142:	f7ff fa0f 	bl	8000564 <BNO055_Init_I2C>

  // TODO: Uncomment when testing with device comms
  // Start receiving from base
  Receive_from_Base();
 8001146:	f7ff fc57 	bl	80009f8 <Receive_from_Base>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800114a:	bf00      	nop
 800114c:	e7fd      	b.n	800114a <main+0x52>
 800114e:	bf00      	nop
 8001150:	40020400 	.word	0x40020400
 8001154:	200000a8 	.word	0x200000a8

08001158 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b094      	sub	sp, #80	@ 0x50
 800115c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115e:	f107 031c 	add.w	r3, r7, #28
 8001162:	2234      	movs	r2, #52	@ 0x34
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f006 fc51 	bl	8007a0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800116c:	f107 0308 	add.w	r3, r7, #8
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800117c:	4b2c      	ldr	r3, [pc, #176]	@ (8001230 <SystemClock_Config+0xd8>)
 800117e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001180:	4a2b      	ldr	r2, [pc, #172]	@ (8001230 <SystemClock_Config+0xd8>)
 8001182:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001186:	6413      	str	r3, [r2, #64]	@ 0x40
 8001188:	4b29      	ldr	r3, [pc, #164]	@ (8001230 <SystemClock_Config+0xd8>)
 800118a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001194:	4b27      	ldr	r3, [pc, #156]	@ (8001234 <SystemClock_Config+0xdc>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800119c:	4a25      	ldr	r2, [pc, #148]	@ (8001234 <SystemClock_Config+0xdc>)
 800119e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011a2:	6013      	str	r3, [r2, #0]
 80011a4:	4b23      	ldr	r3, [pc, #140]	@ (8001234 <SystemClock_Config+0xdc>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011ac:	603b      	str	r3, [r7, #0]
 80011ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011b0:	2302      	movs	r3, #2
 80011b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b4:	2301      	movs	r3, #1
 80011b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b8:	2310      	movs	r3, #16
 80011ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011bc:	2302      	movs	r3, #2
 80011be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011c0:	2300      	movs	r3, #0
 80011c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011c4:	2310      	movs	r3, #16
 80011c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 80011c8:	23c0      	movs	r3, #192	@ 0xc0
 80011ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011cc:	2302      	movs	r3, #2
 80011ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011d0:	2302      	movs	r3, #2
 80011d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011d4:	2302      	movs	r3, #2
 80011d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d8:	f107 031c 	add.w	r3, r7, #28
 80011dc:	4618      	mov	r0, r3
 80011de:	f002 fa9f 	bl	8003720 <HAL_RCC_OscConfig>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011e8:	f000 fc92 	bl	8001b10 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011ec:	f002 fa48 	bl	8003680 <HAL_PWREx_EnableOverDrive>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80011f6:	f000 fc8b 	bl	8001b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fa:	230f      	movs	r3, #15
 80011fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011fe:	2302      	movs	r3, #2
 8001200:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001206:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800120a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800120c:	2300      	movs	r3, #0
 800120e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001210:	f107 0308 	add.w	r3, r7, #8
 8001214:	2103      	movs	r1, #3
 8001216:	4618      	mov	r0, r3
 8001218:	f002 fd30 	bl	8003c7c <HAL_RCC_ClockConfig>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001222:	f000 fc75 	bl	8001b10 <Error_Handler>
  }
}
 8001226:	bf00      	nop
 8001228:	3750      	adds	r7, #80	@ 0x50
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40023800 	.word	0x40023800
 8001234:	40007000 	.word	0x40007000

08001238 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800123c:	4b1b      	ldr	r3, [pc, #108]	@ (80012ac <MX_I2C1_Init+0x74>)
 800123e:	4a1c      	ldr	r2, [pc, #112]	@ (80012b0 <MX_I2C1_Init+0x78>)
 8001240:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8001242:	4b1a      	ldr	r3, [pc, #104]	@ (80012ac <MX_I2C1_Init+0x74>)
 8001244:	4a1b      	ldr	r2, [pc, #108]	@ (80012b4 <MX_I2C1_Init+0x7c>)
 8001246:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001248:	4b18      	ldr	r3, [pc, #96]	@ (80012ac <MX_I2C1_Init+0x74>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800124e:	4b17      	ldr	r3, [pc, #92]	@ (80012ac <MX_I2C1_Init+0x74>)
 8001250:	2201      	movs	r2, #1
 8001252:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001254:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <MX_I2C1_Init+0x74>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800125a:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <MX_I2C1_Init+0x74>)
 800125c:	2200      	movs	r2, #0
 800125e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001260:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <MX_I2C1_Init+0x74>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001266:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <MX_I2C1_Init+0x74>)
 8001268:	2200      	movs	r2, #0
 800126a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800126c:	4b0f      	ldr	r3, [pc, #60]	@ (80012ac <MX_I2C1_Init+0x74>)
 800126e:	2200      	movs	r2, #0
 8001270:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001272:	480e      	ldr	r0, [pc, #56]	@ (80012ac <MX_I2C1_Init+0x74>)
 8001274:	f001 fc30 	bl	8002ad8 <HAL_I2C_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800127e:	f000 fc47 	bl	8001b10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001282:	2100      	movs	r1, #0
 8001284:	4809      	ldr	r0, [pc, #36]	@ (80012ac <MX_I2C1_Init+0x74>)
 8001286:	f002 f963 	bl	8003550 <HAL_I2CEx_ConfigAnalogFilter>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001290:	f000 fc3e 	bl	8001b10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001294:	2100      	movs	r1, #0
 8001296:	4805      	ldr	r0, [pc, #20]	@ (80012ac <MX_I2C1_Init+0x74>)
 8001298:	f002 f9a5 	bl	80035e6 <HAL_I2CEx_ConfigDigitalFilter>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012a2:	f000 fc35 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000054 	.word	0x20000054
 80012b0:	40005400 	.word	0x40005400
 80012b4:	20303e5d 	.word	0x20303e5d

080012b8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012bc:	4b1b      	ldr	r3, [pc, #108]	@ (800132c <MX_I2C2_Init+0x74>)
 80012be:	4a1c      	ldr	r2, [pc, #112]	@ (8001330 <MX_I2C2_Init+0x78>)
 80012c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80012c2:	4b1a      	ldr	r3, [pc, #104]	@ (800132c <MX_I2C2_Init+0x74>)
 80012c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001334 <MX_I2C2_Init+0x7c>)
 80012c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80012c8:	4b18      	ldr	r3, [pc, #96]	@ (800132c <MX_I2C2_Init+0x74>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ce:	4b17      	ldr	r3, [pc, #92]	@ (800132c <MX_I2C2_Init+0x74>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012d4:	4b15      	ldr	r3, [pc, #84]	@ (800132c <MX_I2C2_Init+0x74>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80012da:	4b14      	ldr	r3, [pc, #80]	@ (800132c <MX_I2C2_Init+0x74>)
 80012dc:	2200      	movs	r2, #0
 80012de:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012e0:	4b12      	ldr	r3, [pc, #72]	@ (800132c <MX_I2C2_Init+0x74>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012e6:	4b11      	ldr	r3, [pc, #68]	@ (800132c <MX_I2C2_Init+0x74>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	@ (800132c <MX_I2C2_Init+0x74>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012f2:	480e      	ldr	r0, [pc, #56]	@ (800132c <MX_I2C2_Init+0x74>)
 80012f4:	f001 fbf0 	bl	8002ad8 <HAL_I2C_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80012fe:	f000 fc07 	bl	8001b10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001302:	2100      	movs	r1, #0
 8001304:	4809      	ldr	r0, [pc, #36]	@ (800132c <MX_I2C2_Init+0x74>)
 8001306:	f002 f923 	bl	8003550 <HAL_I2CEx_ConfigAnalogFilter>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001310:	f000 fbfe 	bl	8001b10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001314:	2100      	movs	r1, #0
 8001316:	4805      	ldr	r0, [pc, #20]	@ (800132c <MX_I2C2_Init+0x74>)
 8001318:	f002 f965 	bl	80035e6 <HAL_I2CEx_ConfigDigitalFilter>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001322:	f000 fbf5 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200000a8 	.word	0x200000a8
 8001330:	40005800 	.word	0x40005800
 8001334:	20303e5d 	.word	0x20303e5d

08001338 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08c      	sub	sp, #48	@ 0x30
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133e:	f107 0320 	add.w	r3, r7, #32
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001358:	1d3b      	adds	r3, r7, #4
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001364:	4b2f      	ldr	r3, [pc, #188]	@ (8001424 <MX_TIM1_Init+0xec>)
 8001366:	4a30      	ldr	r2, [pc, #192]	@ (8001428 <MX_TIM1_Init+0xf0>)
 8001368:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 800136a:	4b2e      	ldr	r3, [pc, #184]	@ (8001424 <MX_TIM1_Init+0xec>)
 800136c:	225f      	movs	r2, #95	@ 0x5f
 800136e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001370:	4b2c      	ldr	r3, [pc, #176]	@ (8001424 <MX_TIM1_Init+0xec>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001376:	4b2b      	ldr	r3, [pc, #172]	@ (8001424 <MX_TIM1_Init+0xec>)
 8001378:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800137c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137e:	4b29      	ldr	r3, [pc, #164]	@ (8001424 <MX_TIM1_Init+0xec>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001384:	4b27      	ldr	r3, [pc, #156]	@ (8001424 <MX_TIM1_Init+0xec>)
 8001386:	2200      	movs	r2, #0
 8001388:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138a:	4b26      	ldr	r3, [pc, #152]	@ (8001424 <MX_TIM1_Init+0xec>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001390:	4824      	ldr	r0, [pc, #144]	@ (8001424 <MX_TIM1_Init+0xec>)
 8001392:	f003 fa81 	bl	8004898 <HAL_TIM_Base_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 800139c:	f000 fbb8 	bl	8001b10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013a4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013a6:	f107 0320 	add.w	r3, r7, #32
 80013aa:	4619      	mov	r1, r3
 80013ac:	481d      	ldr	r0, [pc, #116]	@ (8001424 <MX_TIM1_Init+0xec>)
 80013ae:	f004 f803 	bl	80053b8 <HAL_TIM_ConfigClockSource>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80013b8:	f000 fbaa 	bl	8001b10 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80013bc:	4819      	ldr	r0, [pc, #100]	@ (8001424 <MX_TIM1_Init+0xec>)
 80013be:	f003 fb92 	bl	8004ae6 <HAL_TIM_IC_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80013c8:	f000 fba2 	bl	8001b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	4619      	mov	r1, r3
 80013de:	4811      	ldr	r0, [pc, #68]	@ (8001424 <MX_TIM1_Init+0xec>)
 80013e0:	f004 fe0a 	bl	8005ff8 <HAL_TIMEx_MasterConfigSynchronization>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 80013ea:	f000 fb91 	bl	8001b10 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013f2:	2301      	movs	r3, #1
 80013f4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	2200      	movs	r2, #0
 8001402:	4619      	mov	r1, r3
 8001404:	4807      	ldr	r0, [pc, #28]	@ (8001424 <MX_TIM1_Init+0xec>)
 8001406:	f003 fe26 	bl	8005056 <HAL_TIM_IC_ConfigChannel>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001410:	f000 fb7e 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001414:	2100      	movs	r1, #0
 8001416:	4803      	ldr	r0, [pc, #12]	@ (8001424 <MX_TIM1_Init+0xec>)
 8001418:	f003 fbc6 	bl	8004ba8 <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM1_Init 2 */

}
 800141c:	bf00      	nop
 800141e:	3730      	adds	r7, #48	@ 0x30
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	200000fc 	.word	0x200000fc
 8001428:	40010000 	.word	0x40010000

0800142c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08c      	sub	sp, #48	@ 0x30
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001432:	f107 0320 	add.w	r3, r7, #32
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800144c:	1d3b      	adds	r3, r7, #4
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001458:	4b2d      	ldr	r3, [pc, #180]	@ (8001510 <MX_TIM2_Init+0xe4>)
 800145a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800145e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 8001460:	4b2b      	ldr	r3, [pc, #172]	@ (8001510 <MX_TIM2_Init+0xe4>)
 8001462:	225f      	movs	r2, #95	@ 0x5f
 8001464:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001466:	4b2a      	ldr	r3, [pc, #168]	@ (8001510 <MX_TIM2_Init+0xe4>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 800146c:	4b28      	ldr	r3, [pc, #160]	@ (8001510 <MX_TIM2_Init+0xe4>)
 800146e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001472:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001474:	4b26      	ldr	r3, [pc, #152]	@ (8001510 <MX_TIM2_Init+0xe4>)
 8001476:	2200      	movs	r2, #0
 8001478:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147a:	4b25      	ldr	r3, [pc, #148]	@ (8001510 <MX_TIM2_Init+0xe4>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001480:	4823      	ldr	r0, [pc, #140]	@ (8001510 <MX_TIM2_Init+0xe4>)
 8001482:	f003 fa09 	bl	8004898 <HAL_TIM_Base_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 800148c:	f000 fb40 	bl	8001b10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001490:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001494:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001496:	f107 0320 	add.w	r3, r7, #32
 800149a:	4619      	mov	r1, r3
 800149c:	481c      	ldr	r0, [pc, #112]	@ (8001510 <MX_TIM2_Init+0xe4>)
 800149e:	f003 ff8b 	bl	80053b8 <HAL_TIM_ConfigClockSource>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80014a8:	f000 fb32 	bl	8001b10 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80014ac:	4818      	ldr	r0, [pc, #96]	@ (8001510 <MX_TIM2_Init+0xe4>)
 80014ae:	f003 fb1a 	bl	8004ae6 <HAL_TIM_IC_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80014b8:	f000 fb2a 	bl	8001b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	4811      	ldr	r0, [pc, #68]	@ (8001510 <MX_TIM2_Init+0xe4>)
 80014cc:	f004 fd94 	bl	8005ff8 <HAL_TIMEx_MasterConfigSynchronization>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 80014d6:	f000 fb1b 	bl	8001b10 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014de:	2301      	movs	r3, #1
 80014e0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2200      	movs	r2, #0
 80014ee:	4619      	mov	r1, r3
 80014f0:	4807      	ldr	r0, [pc, #28]	@ (8001510 <MX_TIM2_Init+0xe4>)
 80014f2:	f003 fdb0 	bl	8005056 <HAL_TIM_IC_ConfigChannel>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80014fc:	f000 fb08 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001500:	2100      	movs	r1, #0
 8001502:	4803      	ldr	r0, [pc, #12]	@ (8001510 <MX_TIM2_Init+0xe4>)
 8001504:	f003 fb50 	bl	8004ba8 <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8001508:	bf00      	nop
 800150a:	3730      	adds	r7, #48	@ 0x30
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000148 	.word	0x20000148

08001514 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08c      	sub	sp, #48	@ 0x30
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800151a:	f107 0320 	add.w	r3, r7, #32
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001534:	1d3b      	adds	r3, r7, #4
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001540:	4b2d      	ldr	r3, [pc, #180]	@ (80015f8 <MX_TIM3_Init+0xe4>)
 8001542:	4a2e      	ldr	r2, [pc, #184]	@ (80015fc <MX_TIM3_Init+0xe8>)
 8001544:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96-1;
 8001546:	4b2c      	ldr	r3, [pc, #176]	@ (80015f8 <MX_TIM3_Init+0xe4>)
 8001548:	225f      	movs	r2, #95	@ 0x5f
 800154a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154c:	4b2a      	ldr	r3, [pc, #168]	@ (80015f8 <MX_TIM3_Init+0xe4>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 8001552:	4b29      	ldr	r3, [pc, #164]	@ (80015f8 <MX_TIM3_Init+0xe4>)
 8001554:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001558:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800155a:	4b27      	ldr	r3, [pc, #156]	@ (80015f8 <MX_TIM3_Init+0xe4>)
 800155c:	2200      	movs	r2, #0
 800155e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001560:	4b25      	ldr	r3, [pc, #148]	@ (80015f8 <MX_TIM3_Init+0xe4>)
 8001562:	2200      	movs	r2, #0
 8001564:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001566:	4824      	ldr	r0, [pc, #144]	@ (80015f8 <MX_TIM3_Init+0xe4>)
 8001568:	f003 f996 	bl	8004898 <HAL_TIM_Base_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8001572:	f000 facd 	bl	8001b10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001576:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800157a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800157c:	f107 0320 	add.w	r3, r7, #32
 8001580:	4619      	mov	r1, r3
 8001582:	481d      	ldr	r0, [pc, #116]	@ (80015f8 <MX_TIM3_Init+0xe4>)
 8001584:	f003 ff18 	bl	80053b8 <HAL_TIM_ConfigClockSource>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800158e:	f000 fabf 	bl	8001b10 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001592:	4819      	ldr	r0, [pc, #100]	@ (80015f8 <MX_TIM3_Init+0xe4>)
 8001594:	f003 faa7 	bl	8004ae6 <HAL_TIM_IC_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800159e:	f000 fab7 	bl	8001b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	4811      	ldr	r0, [pc, #68]	@ (80015f8 <MX_TIM3_Init+0xe4>)
 80015b2:	f004 fd21 	bl	8005ff8 <HAL_TIMEx_MasterConfigSynchronization>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 80015bc:	f000 faa8 	bl	8001b10 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015c0:	2300      	movs	r3, #0
 80015c2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015c4:	2301      	movs	r3, #1
 80015c6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	2200      	movs	r2, #0
 80015d4:	4619      	mov	r1, r3
 80015d6:	4808      	ldr	r0, [pc, #32]	@ (80015f8 <MX_TIM3_Init+0xe4>)
 80015d8:	f003 fd3d 	bl	8005056 <HAL_TIM_IC_ConfigChannel>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 80015e2:	f000 fa95 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80015e6:	2100      	movs	r1, #0
 80015e8:	4803      	ldr	r0, [pc, #12]	@ (80015f8 <MX_TIM3_Init+0xe4>)
 80015ea:	f003 fadd 	bl	8004ba8 <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM3_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	3730      	adds	r7, #48	@ 0x30
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000194 	.word	0x20000194
 80015fc:	40000400 	.word	0x40000400

08001600 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08c      	sub	sp, #48	@ 0x30
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001606:	f107 0320 	add.w	r3, r7, #32
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]
 800162a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800162c:	4b2d      	ldr	r3, [pc, #180]	@ (80016e4 <MX_TIM4_Init+0xe4>)
 800162e:	4a2e      	ldr	r2, [pc, #184]	@ (80016e8 <MX_TIM4_Init+0xe8>)
 8001630:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 96-1;
 8001632:	4b2c      	ldr	r3, [pc, #176]	@ (80016e4 <MX_TIM4_Init+0xe4>)
 8001634:	225f      	movs	r2, #95	@ 0x5f
 8001636:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001638:	4b2a      	ldr	r3, [pc, #168]	@ (80016e4 <MX_TIM4_Init+0xe4>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 800163e:	4b29      	ldr	r3, [pc, #164]	@ (80016e4 <MX_TIM4_Init+0xe4>)
 8001640:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001644:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001646:	4b27      	ldr	r3, [pc, #156]	@ (80016e4 <MX_TIM4_Init+0xe4>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164c:	4b25      	ldr	r3, [pc, #148]	@ (80016e4 <MX_TIM4_Init+0xe4>)
 800164e:	2200      	movs	r2, #0
 8001650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001652:	4824      	ldr	r0, [pc, #144]	@ (80016e4 <MX_TIM4_Init+0xe4>)
 8001654:	f003 f920 	bl	8004898 <HAL_TIM_Base_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 800165e:	f000 fa57 	bl	8001b10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001662:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001666:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001668:	f107 0320 	add.w	r3, r7, #32
 800166c:	4619      	mov	r1, r3
 800166e:	481d      	ldr	r0, [pc, #116]	@ (80016e4 <MX_TIM4_Init+0xe4>)
 8001670:	f003 fea2 	bl	80053b8 <HAL_TIM_ConfigClockSource>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800167a:	f000 fa49 	bl	8001b10 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800167e:	4819      	ldr	r0, [pc, #100]	@ (80016e4 <MX_TIM4_Init+0xe4>)
 8001680:	f003 fa31 	bl	8004ae6 <HAL_TIM_IC_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800168a:	f000 fa41 	bl	8001b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001696:	f107 0314 	add.w	r3, r7, #20
 800169a:	4619      	mov	r1, r3
 800169c:	4811      	ldr	r0, [pc, #68]	@ (80016e4 <MX_TIM4_Init+0xe4>)
 800169e:	f004 fcab 	bl	8005ff8 <HAL_TIMEx_MasterConfigSynchronization>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 80016a8:	f000 fa32 	bl	8001b10 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016ac:	2300      	movs	r3, #0
 80016ae:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016b0:	2301      	movs	r3, #1
 80016b2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	2200      	movs	r2, #0
 80016c0:	4619      	mov	r1, r3
 80016c2:	4808      	ldr	r0, [pc, #32]	@ (80016e4 <MX_TIM4_Init+0xe4>)
 80016c4:	f003 fcc7 	bl	8005056 <HAL_TIM_IC_ConfigChannel>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 80016ce:	f000 fa1f 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80016d2:	2100      	movs	r1, #0
 80016d4:	4803      	ldr	r0, [pc, #12]	@ (80016e4 <MX_TIM4_Init+0xe4>)
 80016d6:	f003 fa67 	bl	8004ba8 <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM4_Init 2 */

}
 80016da:	bf00      	nop
 80016dc:	3730      	adds	r7, #48	@ 0x30
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200001e0 	.word	0x200001e0
 80016e8:	40000800 	.word	0x40000800

080016ec <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b096      	sub	sp, #88	@ 0x58
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016fe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
 800170c:	611a      	str	r2, [r3, #16]
 800170e:	615a      	str	r2, [r3, #20]
 8001710:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	222c      	movs	r2, #44	@ 0x2c
 8001716:	2100      	movs	r1, #0
 8001718:	4618      	mov	r0, r3
 800171a:	f006 f978 	bl	8007a0e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800171e:	4b3f      	ldr	r3, [pc, #252]	@ (800181c <MX_TIM8_Init+0x130>)
 8001720:	4a3f      	ldr	r2, [pc, #252]	@ (8001820 <MX_TIM8_Init+0x134>)
 8001722:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001724:	4b3d      	ldr	r3, [pc, #244]	@ (800181c <MX_TIM8_Init+0x130>)
 8001726:	2200      	movs	r2, #0
 8001728:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172a:	4b3c      	ldr	r3, [pc, #240]	@ (800181c <MX_TIM8_Init+0x130>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2399;
 8001730:	4b3a      	ldr	r3, [pc, #232]	@ (800181c <MX_TIM8_Init+0x130>)
 8001732:	f640 125f 	movw	r2, #2399	@ 0x95f
 8001736:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001738:	4b38      	ldr	r3, [pc, #224]	@ (800181c <MX_TIM8_Init+0x130>)
 800173a:	2200      	movs	r2, #0
 800173c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800173e:	4b37      	ldr	r3, [pc, #220]	@ (800181c <MX_TIM8_Init+0x130>)
 8001740:	2200      	movs	r2, #0
 8001742:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001744:	4b35      	ldr	r3, [pc, #212]	@ (800181c <MX_TIM8_Init+0x130>)
 8001746:	2200      	movs	r2, #0
 8001748:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800174a:	4834      	ldr	r0, [pc, #208]	@ (800181c <MX_TIM8_Init+0x130>)
 800174c:	f003 f974 	bl	8004a38 <HAL_TIM_PWM_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001756:	f000 f9db 	bl	8001b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175a:	2300      	movs	r3, #0
 800175c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800175e:	2300      	movs	r3, #0
 8001760:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001762:	2300      	movs	r3, #0
 8001764:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001766:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800176a:	4619      	mov	r1, r3
 800176c:	482b      	ldr	r0, [pc, #172]	@ (800181c <MX_TIM8_Init+0x130>)
 800176e:	f004 fc43 	bl	8005ff8 <HAL_TIMEx_MasterConfigSynchronization>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001778:	f000 f9ca 	bl	8001b10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800177c:	2360      	movs	r3, #96	@ 0x60
 800177e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001784:	2300      	movs	r3, #0
 8001786:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001788:	2300      	movs	r3, #0
 800178a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001790:	2300      	movs	r3, #0
 8001792:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001794:	2300      	movs	r3, #0
 8001796:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001798:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800179c:	2208      	movs	r2, #8
 800179e:	4619      	mov	r1, r3
 80017a0:	481e      	ldr	r0, [pc, #120]	@ (800181c <MX_TIM8_Init+0x130>)
 80017a2:	f003 fcf5 	bl	8005190 <HAL_TIM_PWM_ConfigChannel>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80017ac:	f000 f9b0 	bl	8001b10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017b0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017b4:	220c      	movs	r2, #12
 80017b6:	4619      	mov	r1, r3
 80017b8:	4818      	ldr	r0, [pc, #96]	@ (800181c <MX_TIM8_Init+0x130>)
 80017ba:	f003 fce9 	bl	8005190 <HAL_TIM_PWM_ConfigChannel>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 80017c4:	f000 f9a4 	bl	8001b10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017e6:	2300      	movs	r3, #0
 80017e8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017ee:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	4619      	mov	r1, r3
 80017fc:	4807      	ldr	r0, [pc, #28]	@ (800181c <MX_TIM8_Init+0x130>)
 80017fe:	f004 fc89 	bl	8006114 <HAL_TIMEx_ConfigBreakDeadTime>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8001808:	f000 f982 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800180c:	4803      	ldr	r0, [pc, #12]	@ (800181c <MX_TIM8_Init+0x130>)
 800180e:	f000 fb8d 	bl	8001f2c <HAL_TIM_MspPostInit>

}
 8001812:	bf00      	nop
 8001814:	3758      	adds	r7, #88	@ 0x58
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	2000022c 	.word	0x2000022c
 8001820:	40010400 	.word	0x40010400

08001824 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800182a:	463b      	mov	r3, r7
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001836:	4b16      	ldr	r3, [pc, #88]	@ (8001890 <MX_TIM9_Init+0x6c>)
 8001838:	4a16      	ldr	r2, [pc, #88]	@ (8001894 <MX_TIM9_Init+0x70>)
 800183a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 383;
 800183c:	4b14      	ldr	r3, [pc, #80]	@ (8001890 <MX_TIM9_Init+0x6c>)
 800183e:	f240 127f 	movw	r2, #383	@ 0x17f
 8001842:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001844:	4b12      	ldr	r3, [pc, #72]	@ (8001890 <MX_TIM9_Init+0x6c>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 62499;
 800184a:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <MX_TIM9_Init+0x6c>)
 800184c:	f24f 4223 	movw	r2, #62499	@ 0xf423
 8001850:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001852:	4b0f      	ldr	r3, [pc, #60]	@ (8001890 <MX_TIM9_Init+0x6c>)
 8001854:	2200      	movs	r2, #0
 8001856:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001858:	4b0d      	ldr	r3, [pc, #52]	@ (8001890 <MX_TIM9_Init+0x6c>)
 800185a:	2200      	movs	r2, #0
 800185c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800185e:	480c      	ldr	r0, [pc, #48]	@ (8001890 <MX_TIM9_Init+0x6c>)
 8001860:	f003 f81a 	bl	8004898 <HAL_TIM_Base_Init>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 800186a:	f000 f951 	bl	8001b10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800186e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001872:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001874:	463b      	mov	r3, r7
 8001876:	4619      	mov	r1, r3
 8001878:	4805      	ldr	r0, [pc, #20]	@ (8001890 <MX_TIM9_Init+0x6c>)
 800187a:	f003 fd9d 	bl	80053b8 <HAL_TIM_ConfigClockSource>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8001884:	f000 f944 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001888:	bf00      	nop
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000278 	.word	0x20000278
 8001894:	40014000 	.word	0x40014000

08001898 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800189c:	4b14      	ldr	r3, [pc, #80]	@ (80018f0 <MX_USART2_UART_Init+0x58>)
 800189e:	4a15      	ldr	r2, [pc, #84]	@ (80018f4 <MX_USART2_UART_Init+0x5c>)
 80018a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018a2:	4b13      	ldr	r3, [pc, #76]	@ (80018f0 <MX_USART2_UART_Init+0x58>)
 80018a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018aa:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <MX_USART2_UART_Init+0x58>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	@ (80018f0 <MX_USART2_UART_Init+0x58>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	@ (80018f0 <MX_USART2_UART_Init+0x58>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <MX_USART2_UART_Init+0x58>)
 80018be:	220c      	movs	r2, #12
 80018c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	@ (80018f0 <MX_USART2_UART_Init+0x58>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c8:	4b09      	ldr	r3, [pc, #36]	@ (80018f0 <MX_USART2_UART_Init+0x58>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ce:	4b08      	ldr	r3, [pc, #32]	@ (80018f0 <MX_USART2_UART_Init+0x58>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018d4:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <MX_USART2_UART_Init+0x58>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018da:	4805      	ldr	r0, [pc, #20]	@ (80018f0 <MX_USART2_UART_Init+0x58>)
 80018dc:	f004 fcb6 	bl	800624c <HAL_UART_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80018e6:	f000 f913 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200002c4 	.word	0x200002c4
 80018f4:	40004400 	.word	0x40004400

080018f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08c      	sub	sp, #48	@ 0x30
 80018fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fe:	f107 031c 	add.w	r3, r7, #28
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
 800190c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800190e:	4b63      	ldr	r3, [pc, #396]	@ (8001a9c <MX_GPIO_Init+0x1a4>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001912:	4a62      	ldr	r2, [pc, #392]	@ (8001a9c <MX_GPIO_Init+0x1a4>)
 8001914:	f043 0320 	orr.w	r3, r3, #32
 8001918:	6313      	str	r3, [r2, #48]	@ 0x30
 800191a:	4b60      	ldr	r3, [pc, #384]	@ (8001a9c <MX_GPIO_Init+0x1a4>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	f003 0320 	and.w	r3, r3, #32
 8001922:	61bb      	str	r3, [r7, #24]
 8001924:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001926:	4b5d      	ldr	r3, [pc, #372]	@ (8001a9c <MX_GPIO_Init+0x1a4>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	4a5c      	ldr	r2, [pc, #368]	@ (8001a9c <MX_GPIO_Init+0x1a4>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6313      	str	r3, [r2, #48]	@ 0x30
 8001932:	4b5a      	ldr	r3, [pc, #360]	@ (8001a9c <MX_GPIO_Init+0x1a4>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800193e:	4b57      	ldr	r3, [pc, #348]	@ (8001a9c <MX_GPIO_Init+0x1a4>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	4a56      	ldr	r2, [pc, #344]	@ (8001a9c <MX_GPIO_Init+0x1a4>)
 8001944:	f043 0310 	orr.w	r3, r3, #16
 8001948:	6313      	str	r3, [r2, #48]	@ 0x30
 800194a:	4b54      	ldr	r3, [pc, #336]	@ (8001a9c <MX_GPIO_Init+0x1a4>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	f003 0310 	and.w	r3, r3, #16
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001956:	4b51      	ldr	r3, [pc, #324]	@ (8001a9c <MX_GPIO_Init+0x1a4>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	4a50      	ldr	r2, [pc, #320]	@ (8001a9c <MX_GPIO_Init+0x1a4>)
 800195c:	f043 0302 	orr.w	r3, r3, #2
 8001960:	6313      	str	r3, [r2, #48]	@ 0x30
 8001962:	4b4e      	ldr	r3, [pc, #312]	@ (8001a9c <MX_GPIO_Init+0x1a4>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800196e:	4b4b      	ldr	r3, [pc, #300]	@ (8001a9c <MX_GPIO_Init+0x1a4>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001972:	4a4a      	ldr	r2, [pc, #296]	@ (8001a9c <MX_GPIO_Init+0x1a4>)
 8001974:	f043 0308 	orr.w	r3, r3, #8
 8001978:	6313      	str	r3, [r2, #48]	@ 0x30
 800197a:	4b48      	ldr	r3, [pc, #288]	@ (8001a9c <MX_GPIO_Init+0x1a4>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001986:	4b45      	ldr	r3, [pc, #276]	@ (8001a9c <MX_GPIO_Init+0x1a4>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	4a44      	ldr	r2, [pc, #272]	@ (8001a9c <MX_GPIO_Init+0x1a4>)
 800198c:	f043 0304 	orr.w	r3, r3, #4
 8001990:	6313      	str	r3, [r2, #48]	@ 0x30
 8001992:	4b42      	ldr	r3, [pc, #264]	@ (8001a9c <MX_GPIO_Init+0x1a4>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	f003 0304 	and.w	r3, r3, #4
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(US2_TRIG_GPIO_Port, US2_TRIG_Pin, GPIO_PIN_RESET);
 800199e:	2200      	movs	r2, #0
 80019a0:	2140      	movs	r1, #64	@ 0x40
 80019a2:	483f      	ldr	r0, [pc, #252]	@ (8001aa0 <MX_GPIO_Init+0x1a8>)
 80019a4:	f001 f85a 	bl	8002a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, US1_TRIG_Pin|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80019a8:	2200      	movs	r2, #0
 80019aa:	f44f 41f2 	mov.w	r1, #30976	@ 0x7900
 80019ae:	483d      	ldr	r0, [pc, #244]	@ (8001aa4 <MX_GPIO_Init+0x1ac>)
 80019b0:	f001 f854 	bl	8002a5c <HAL_GPIO_WritePin>
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Debug_LED_GPIO_Port, Debug_LED_Pin, GPIO_PIN_RESET);
 80019b4:	2200      	movs	r2, #0
 80019b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019ba:	483b      	ldr	r0, [pc, #236]	@ (8001aa8 <MX_GPIO_Init+0x1b0>)
 80019bc:	f001 f84e 	bl	8002a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(US4_TRIG_GPIO_Port, US4_TRIG_Pin, GPIO_PIN_RESET);
 80019c0:	2200      	movs	r2, #0
 80019c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019c6:	4839      	ldr	r0, [pc, #228]	@ (8001aac <MX_GPIO_Init+0x1b4>)
 80019c8:	f001 f848 	bl	8002a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(US3_TRIG_GPIO_Port, US3_TRIG_Pin, GPIO_PIN_RESET);
 80019cc:	2200      	movs	r2, #0
 80019ce:	2180      	movs	r1, #128	@ 0x80
 80019d0:	4837      	ldr	r0, [pc, #220]	@ (8001ab0 <MX_GPIO_Init+0x1b8>)
 80019d2:	f001 f843 	bl	8002a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BNO055_INT_Pin */
  GPIO_InitStruct.Pin = BNO055_INT_Pin;
 80019d6:	2308      	movs	r3, #8
 80019d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BNO055_INT_GPIO_Port, &GPIO_InitStruct);
 80019e4:	f107 031c 	add.w	r3, r7, #28
 80019e8:	4619      	mov	r1, r3
 80019ea:	4832      	ldr	r0, [pc, #200]	@ (8001ab4 <MX_GPIO_Init+0x1bc>)
 80019ec:	f000 fe8a 	bl	8002704 <HAL_GPIO_Init>

  /*Configure GPIO pin : US2_TRIG_Pin */
  GPIO_InitStruct.Pin = US2_TRIG_Pin;
 80019f0:	2340      	movs	r3, #64	@ 0x40
 80019f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f4:	2301      	movs	r3, #1
 80019f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fc:	2300      	movs	r3, #0
 80019fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(US2_TRIG_GPIO_Port, &GPIO_InitStruct);
 8001a00:	f107 031c 	add.w	r3, r7, #28
 8001a04:	4619      	mov	r1, r3
 8001a06:	4826      	ldr	r0, [pc, #152]	@ (8001aa0 <MX_GPIO_Init+0x1a8>)
 8001a08:	f000 fe7c 	bl	8002704 <HAL_GPIO_Init>

  /*Configure GPIO pins : US1_TRIG_Pin PE11 PE12 PE13
                           PE14 */
  GPIO_InitStruct.Pin = US1_TRIG_Pin|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001a0c:	f44f 43f2 	mov.w	r3, #30976	@ 0x7900
 8001a10:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a12:	2301      	movs	r3, #1
 8001a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a1e:	f107 031c 	add.w	r3, r7, #28
 8001a22:	4619      	mov	r1, r3
 8001a24:	481f      	ldr	r0, [pc, #124]	@ (8001aa4 <MX_GPIO_Init+0x1ac>)
 8001a26:	f000 fe6d 	bl	8002704 <HAL_GPIO_Init>

  /*Configure GPIO pin : Debug_LED_Pin */
  GPIO_InitStruct.Pin = Debug_LED_Pin;
 8001a2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a30:	2301      	movs	r3, #1
 8001a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Debug_LED_GPIO_Port, &GPIO_InitStruct);
 8001a3c:	f107 031c 	add.w	r3, r7, #28
 8001a40:	4619      	mov	r1, r3
 8001a42:	4819      	ldr	r0, [pc, #100]	@ (8001aa8 <MX_GPIO_Init+0x1b0>)
 8001a44:	f000 fe5e 	bl	8002704 <HAL_GPIO_Init>

  /*Configure GPIO pin : US4_TRIG_Pin */
  GPIO_InitStruct.Pin = US4_TRIG_Pin;
 8001a48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a56:	2300      	movs	r3, #0
 8001a58:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(US4_TRIG_GPIO_Port, &GPIO_InitStruct);
 8001a5a:	f107 031c 	add.w	r3, r7, #28
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4812      	ldr	r0, [pc, #72]	@ (8001aac <MX_GPIO_Init+0x1b4>)
 8001a62:	f000 fe4f 	bl	8002704 <HAL_GPIO_Init>

  /*Configure GPIO pin : US3_TRIG_Pin */
  GPIO_InitStruct.Pin = US3_TRIG_Pin;
 8001a66:	2380      	movs	r3, #128	@ 0x80
 8001a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2300      	movs	r3, #0
 8001a74:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(US3_TRIG_GPIO_Port, &GPIO_InitStruct);
 8001a76:	f107 031c 	add.w	r3, r7, #28
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	480c      	ldr	r0, [pc, #48]	@ (8001ab0 <MX_GPIO_Init+0x1b8>)
 8001a7e:	f000 fe41 	bl	8002704 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2100      	movs	r1, #0
 8001a86:	2009      	movs	r0, #9
 8001a88:	f000 fcfb 	bl	8002482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001a8c:	2009      	movs	r0, #9
 8001a8e:	f000 fd14 	bl	80024ba <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a92:	bf00      	nop
 8001a94:	3730      	adds	r7, #48	@ 0x30
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40020000 	.word	0x40020000
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40020400 	.word	0x40020400
 8001aac:	40020c00 	.word	0x40020c00
 8001ab0:	40020800 	.word	0x40020800
 8001ab4:	40021400 	.word	0x40021400

08001ab8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001abe:	463b      	mov	r3, r7
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001aca:	f000 fd11 	bl	80024f0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001ada:	231f      	movs	r3, #31
 8001adc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001ade:	2387      	movs	r3, #135	@ 0x87
 8001ae0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001aea:	2301      	movs	r3, #1
 8001aec:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001aee:	2301      	movs	r3, #1
 8001af0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001afa:	463b      	mov	r3, r7
 8001afc:	4618      	mov	r0, r3
 8001afe:	f000 fd2f 	bl	8002560 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001b02:	2004      	movs	r0, #4
 8001b04:	f000 fd0c 	bl	8002520 <HAL_MPU_Enable>

}
 8001b08:	bf00      	nop
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b14:	b672      	cpsid	i
}
 8001b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b18:	bf00      	nop
 8001b1a:	e7fd      	b.n	8001b18 <Error_Handler+0x8>

08001b1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b22:	4b0f      	ldr	r3, [pc, #60]	@ (8001b60 <HAL_MspInit+0x44>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b26:	4a0e      	ldr	r2, [pc, #56]	@ (8001b60 <HAL_MspInit+0x44>)
 8001b28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b60 <HAL_MspInit+0x44>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3a:	4b09      	ldr	r3, [pc, #36]	@ (8001b60 <HAL_MspInit+0x44>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3e:	4a08      	ldr	r2, [pc, #32]	@ (8001b60 <HAL_MspInit+0x44>)
 8001b40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b46:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <HAL_MspInit+0x44>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800

08001b64 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b0b0      	sub	sp, #192	@ 0xc0
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b7c:	f107 031c 	add.w	r3, r7, #28
 8001b80:	2290      	movs	r2, #144	@ 0x90
 8001b82:	2100      	movs	r1, #0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f005 ff42 	bl	8007a0e <memset>
  if(hi2c->Instance==I2C1)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a43      	ldr	r2, [pc, #268]	@ (8001c9c <HAL_I2C_MspInit+0x138>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d13d      	bne.n	8001c10 <HAL_I2C_MspInit+0xac>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b94:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b98:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ba0:	f107 031c 	add.w	r3, r7, #28
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f002 fa4f 	bl	8004048 <HAL_RCCEx_PeriphCLKConfig>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001bb0:	f7ff ffae 	bl	8001b10 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ca0 <HAL_I2C_MspInit+0x13c>)
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb8:	4a39      	ldr	r2, [pc, #228]	@ (8001ca0 <HAL_I2C_MspInit+0x13c>)
 8001bba:	f043 0302 	orr.w	r3, r3, #2
 8001bbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bc0:	4b37      	ldr	r3, [pc, #220]	@ (8001ca0 <HAL_I2C_MspInit+0x13c>)
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	61bb      	str	r3, [r7, #24]
 8001bca:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bcc:	23c0      	movs	r3, #192	@ 0xc0
 8001bce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bd2:	2312      	movs	r3, #18
 8001bd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bde:	2303      	movs	r3, #3
 8001be0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001be4:	2304      	movs	r3, #4
 8001be6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bea:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001bee:	4619      	mov	r1, r3
 8001bf0:	482c      	ldr	r0, [pc, #176]	@ (8001ca4 <HAL_I2C_MspInit+0x140>)
 8001bf2:	f000 fd87 	bl	8002704 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bf6:	4b2a      	ldr	r3, [pc, #168]	@ (8001ca0 <HAL_I2C_MspInit+0x13c>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfa:	4a29      	ldr	r2, [pc, #164]	@ (8001ca0 <HAL_I2C_MspInit+0x13c>)
 8001bfc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c02:	4b27      	ldr	r3, [pc, #156]	@ (8001ca0 <HAL_I2C_MspInit+0x13c>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c0e:	e041      	b.n	8001c94 <HAL_I2C_MspInit+0x130>
  else if(hi2c->Instance==I2C2)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a24      	ldr	r2, [pc, #144]	@ (8001ca8 <HAL_I2C_MspInit+0x144>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d13c      	bne.n	8001c94 <HAL_I2C_MspInit+0x130>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001c1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c1e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c26:	f107 031c 	add.w	r3, r7, #28
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f002 fa0c 	bl	8004048 <HAL_RCCEx_PeriphCLKConfig>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001c36:	f7ff ff6b 	bl	8001b10 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c3a:	4b19      	ldr	r3, [pc, #100]	@ (8001ca0 <HAL_I2C_MspInit+0x13c>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3e:	4a18      	ldr	r2, [pc, #96]	@ (8001ca0 <HAL_I2C_MspInit+0x13c>)
 8001c40:	f043 0320 	orr.w	r3, r3, #32
 8001c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c46:	4b16      	ldr	r3, [pc, #88]	@ (8001ca0 <HAL_I2C_MspInit+0x13c>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4a:	f003 0320 	and.w	r3, r3, #32
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BNO055_SDA_Pin|BNO055_SCL_Pin;
 8001c52:	2303      	movs	r3, #3
 8001c54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c58:	2312      	movs	r3, #18
 8001c5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c64:	2303      	movs	r3, #3
 8001c66:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c6a:	2304      	movs	r3, #4
 8001c6c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c70:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001c74:	4619      	mov	r1, r3
 8001c76:	480d      	ldr	r0, [pc, #52]	@ (8001cac <HAL_I2C_MspInit+0x148>)
 8001c78:	f000 fd44 	bl	8002704 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ca0 <HAL_I2C_MspInit+0x13c>)
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c80:	4a07      	ldr	r2, [pc, #28]	@ (8001ca0 <HAL_I2C_MspInit+0x13c>)
 8001c82:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c86:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c88:	4b05      	ldr	r3, [pc, #20]	@ (8001ca0 <HAL_I2C_MspInit+0x13c>)
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	68fb      	ldr	r3, [r7, #12]
}
 8001c94:	bf00      	nop
 8001c96:	37c0      	adds	r7, #192	@ 0xc0
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40005400 	.word	0x40005400
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40020400 	.word	0x40020400
 8001ca8:	40005800 	.word	0x40005800
 8001cac:	40021400 	.word	0x40021400

08001cb0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b090      	sub	sp, #64	@ 0x40
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a7e      	ldr	r2, [pc, #504]	@ (8001ec8 <HAL_TIM_Base_MspInit+0x218>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d139      	bne.n	8001d46 <HAL_TIM_Base_MspInit+0x96>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cd2:	4b7e      	ldr	r3, [pc, #504]	@ (8001ecc <HAL_TIM_Base_MspInit+0x21c>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd6:	4a7d      	ldr	r2, [pc, #500]	@ (8001ecc <HAL_TIM_Base_MspInit+0x21c>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cde:	4b7b      	ldr	r3, [pc, #492]	@ (8001ecc <HAL_TIM_Base_MspInit+0x21c>)
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cea:	4b78      	ldr	r3, [pc, #480]	@ (8001ecc <HAL_TIM_Base_MspInit+0x21c>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cee:	4a77      	ldr	r2, [pc, #476]	@ (8001ecc <HAL_TIM_Base_MspInit+0x21c>)
 8001cf0:	f043 0310 	orr.w	r3, r3, #16
 8001cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf6:	4b75      	ldr	r3, [pc, #468]	@ (8001ecc <HAL_TIM_Base_MspInit+0x21c>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfa:	f003 0310 	and.w	r3, r3, #16
 8001cfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = US1_ECHO_Pin;
 8001d02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d10:	2300      	movs	r3, #0
 8001d12:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d14:	2301      	movs	r3, #1
 8001d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(US1_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001d18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	486c      	ldr	r0, [pc, #432]	@ (8001ed0 <HAL_TIM_Base_MspInit+0x220>)
 8001d20:	f000 fcf0 	bl	8002704 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001d24:	2200      	movs	r2, #0
 8001d26:	2100      	movs	r1, #0
 8001d28:	2018      	movs	r0, #24
 8001d2a:	f000 fbaa 	bl	8002482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001d2e:	2018      	movs	r0, #24
 8001d30:	f000 fbc3 	bl	80024ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001d34:	2200      	movs	r2, #0
 8001d36:	2100      	movs	r1, #0
 8001d38:	201b      	movs	r0, #27
 8001d3a:	f000 fba2 	bl	8002482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001d3e:	201b      	movs	r0, #27
 8001d40:	f000 fbbb 	bl	80024ba <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM9_MspInit 1 */

    /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001d44:	e0bb      	b.n	8001ebe <HAL_TIM_Base_MspInit+0x20e>
  else if(htim_base->Instance==TIM2)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d4e:	d130      	bne.n	8001db2 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d50:	4b5e      	ldr	r3, [pc, #376]	@ (8001ecc <HAL_TIM_Base_MspInit+0x21c>)
 8001d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d54:	4a5d      	ldr	r2, [pc, #372]	@ (8001ecc <HAL_TIM_Base_MspInit+0x21c>)
 8001d56:	f043 0301 	orr.w	r3, r3, #1
 8001d5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d5c:	4b5b      	ldr	r3, [pc, #364]	@ (8001ecc <HAL_TIM_Base_MspInit+0x21c>)
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	623b      	str	r3, [r7, #32]
 8001d66:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d68:	4b58      	ldr	r3, [pc, #352]	@ (8001ecc <HAL_TIM_Base_MspInit+0x21c>)
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6c:	4a57      	ldr	r2, [pc, #348]	@ (8001ecc <HAL_TIM_Base_MspInit+0x21c>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d74:	4b55      	ldr	r3, [pc, #340]	@ (8001ecc <HAL_TIM_Base_MspInit+0x21c>)
 8001d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	61fb      	str	r3, [r7, #28]
 8001d7e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = US2_ECHO_Pin;
 8001d80:	2320      	movs	r3, #32
 8001d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d90:	2301      	movs	r3, #1
 8001d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(US2_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001d94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d98:	4619      	mov	r1, r3
 8001d9a:	484e      	ldr	r0, [pc, #312]	@ (8001ed4 <HAL_TIM_Base_MspInit+0x224>)
 8001d9c:	f000 fcb2 	bl	8002704 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001da0:	2200      	movs	r2, #0
 8001da2:	2100      	movs	r1, #0
 8001da4:	201c      	movs	r0, #28
 8001da6:	f000 fb6c 	bl	8002482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001daa:	201c      	movs	r0, #28
 8001dac:	f000 fb85 	bl	80024ba <HAL_NVIC_EnableIRQ>
}
 8001db0:	e085      	b.n	8001ebe <HAL_TIM_Base_MspInit+0x20e>
  else if(htim_base->Instance==TIM3)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a48      	ldr	r2, [pc, #288]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x228>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d130      	bne.n	8001e1e <HAL_TIM_Base_MspInit+0x16e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dbc:	4b43      	ldr	r3, [pc, #268]	@ (8001ecc <HAL_TIM_Base_MspInit+0x21c>)
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc0:	4a42      	ldr	r2, [pc, #264]	@ (8001ecc <HAL_TIM_Base_MspInit+0x21c>)
 8001dc2:	f043 0302 	orr.w	r3, r3, #2
 8001dc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dc8:	4b40      	ldr	r3, [pc, #256]	@ (8001ecc <HAL_TIM_Base_MspInit+0x21c>)
 8001dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	61bb      	str	r3, [r7, #24]
 8001dd2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd4:	4b3d      	ldr	r3, [pc, #244]	@ (8001ecc <HAL_TIM_Base_MspInit+0x21c>)
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd8:	4a3c      	ldr	r2, [pc, #240]	@ (8001ecc <HAL_TIM_Base_MspInit+0x21c>)
 8001dda:	f043 0304 	orr.w	r3, r3, #4
 8001dde:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de0:	4b3a      	ldr	r3, [pc, #232]	@ (8001ecc <HAL_TIM_Base_MspInit+0x21c>)
 8001de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = US3_ECHO_Pin;
 8001dec:	2340      	movs	r3, #64	@ 0x40
 8001dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df0:	2302      	movs	r3, #2
 8001df2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(US3_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001e00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e04:	4619      	mov	r1, r3
 8001e06:	4835      	ldr	r0, [pc, #212]	@ (8001edc <HAL_TIM_Base_MspInit+0x22c>)
 8001e08:	f000 fc7c 	bl	8002704 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2100      	movs	r1, #0
 8001e10:	201d      	movs	r0, #29
 8001e12:	f000 fb36 	bl	8002482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e16:	201d      	movs	r0, #29
 8001e18:	f000 fb4f 	bl	80024ba <HAL_NVIC_EnableIRQ>
}
 8001e1c:	e04f      	b.n	8001ebe <HAL_TIM_Base_MspInit+0x20e>
  else if(htim_base->Instance==TIM4)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a2f      	ldr	r2, [pc, #188]	@ (8001ee0 <HAL_TIM_Base_MspInit+0x230>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d131      	bne.n	8001e8c <HAL_TIM_Base_MspInit+0x1dc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e28:	4b28      	ldr	r3, [pc, #160]	@ (8001ecc <HAL_TIM_Base_MspInit+0x21c>)
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2c:	4a27      	ldr	r2, [pc, #156]	@ (8001ecc <HAL_TIM_Base_MspInit+0x21c>)
 8001e2e:	f043 0304 	orr.w	r3, r3, #4
 8001e32:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e34:	4b25      	ldr	r3, [pc, #148]	@ (8001ecc <HAL_TIM_Base_MspInit+0x21c>)
 8001e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e40:	4b22      	ldr	r3, [pc, #136]	@ (8001ecc <HAL_TIM_Base_MspInit+0x21c>)
 8001e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e44:	4a21      	ldr	r2, [pc, #132]	@ (8001ecc <HAL_TIM_Base_MspInit+0x21c>)
 8001e46:	f043 0308 	orr.w	r3, r3, #8
 8001e4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001ecc <HAL_TIM_Base_MspInit+0x21c>)
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = US4_ECHO_Pin;
 8001e58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e66:	2300      	movs	r3, #0
 8001e68:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(US4_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001e6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e72:	4619      	mov	r1, r3
 8001e74:	481b      	ldr	r0, [pc, #108]	@ (8001ee4 <HAL_TIM_Base_MspInit+0x234>)
 8001e76:	f000 fc45 	bl	8002704 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	201e      	movs	r0, #30
 8001e80:	f000 faff 	bl	8002482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e84:	201e      	movs	r0, #30
 8001e86:	f000 fb18 	bl	80024ba <HAL_NVIC_EnableIRQ>
}
 8001e8a:	e018      	b.n	8001ebe <HAL_TIM_Base_MspInit+0x20e>
  else if(htim_base->Instance==TIM9)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a15      	ldr	r2, [pc, #84]	@ (8001ee8 <HAL_TIM_Base_MspInit+0x238>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d113      	bne.n	8001ebe <HAL_TIM_Base_MspInit+0x20e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001e96:	4b0d      	ldr	r3, [pc, #52]	@ (8001ecc <HAL_TIM_Base_MspInit+0x21c>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9a:	4a0c      	ldr	r2, [pc, #48]	@ (8001ecc <HAL_TIM_Base_MspInit+0x21c>)
 8001e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ea0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ecc <HAL_TIM_Base_MspInit+0x21c>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	2018      	movs	r0, #24
 8001eb4:	f000 fae5 	bl	8002482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001eb8:	2018      	movs	r0, #24
 8001eba:	f000 fafe 	bl	80024ba <HAL_NVIC_EnableIRQ>
}
 8001ebe:	bf00      	nop
 8001ec0:	3740      	adds	r7, #64	@ 0x40
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40010000 	.word	0x40010000
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40020000 	.word	0x40020000
 8001ed8:	40000400 	.word	0x40000400
 8001edc:	40020800 	.word	0x40020800
 8001ee0:	40000800 	.word	0x40000800
 8001ee4:	40020c00 	.word	0x40020c00
 8001ee8:	40014000 	.word	0x40014000

08001eec <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a0a      	ldr	r2, [pc, #40]	@ (8001f24 <HAL_TIM_PWM_MspInit+0x38>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d10b      	bne.n	8001f16 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001efe:	4b0a      	ldr	r3, [pc, #40]	@ (8001f28 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f02:	4a09      	ldr	r2, [pc, #36]	@ (8001f28 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f04:	f043 0302 	orr.w	r3, r3, #2
 8001f08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f0a:	4b07      	ldr	r3, [pc, #28]	@ (8001f28 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM8_MspInit 1 */

  }

}
 8001f16:	bf00      	nop
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40010400 	.word	0x40010400
 8001f28:	40023800 	.word	0x40023800

08001f2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 030c 	add.w	r3, r7, #12
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a11      	ldr	r2, [pc, #68]	@ (8001f90 <HAL_TIM_MspPostInit+0x64>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d11c      	bne.n	8001f88 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f4e:	4b11      	ldr	r3, [pc, #68]	@ (8001f94 <HAL_TIM_MspPostInit+0x68>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f52:	4a10      	ldr	r2, [pc, #64]	@ (8001f94 <HAL_TIM_MspPostInit+0x68>)
 8001f54:	f043 0304 	orr.w	r3, r3, #4
 8001f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f94 <HAL_TIM_MspPostInit+0x68>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5e:	f003 0304 	and.w	r3, r3, #4
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f66:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f7c:	f107 030c 	add.w	r3, r7, #12
 8001f80:	4619      	mov	r1, r3
 8001f82:	4805      	ldr	r0, [pc, #20]	@ (8001f98 <HAL_TIM_MspPostInit+0x6c>)
 8001f84:	f000 fbbe 	bl	8002704 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001f88:	bf00      	nop
 8001f8a:	3720      	adds	r7, #32
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40010400 	.word	0x40010400
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40020800 	.word	0x40020800

08001f9c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b0ae      	sub	sp, #184	@ 0xb8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	2290      	movs	r2, #144	@ 0x90
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f005 fd26 	bl	8007a0e <memset>
  if(huart->Instance==USART2)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a25      	ldr	r2, [pc, #148]	@ (800205c <HAL_UART_MspInit+0xc0>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d142      	bne.n	8002052 <HAL_UART_MspInit+0xb6>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001fcc:	2380      	movs	r3, #128	@ 0x80
 8001fce:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f002 f835 	bl	8004048 <HAL_RCCEx_PeriphCLKConfig>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fe4:	f7ff fd94 	bl	8001b10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8002060 <HAL_UART_MspInit+0xc4>)
 8001fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fec:	4a1c      	ldr	r2, [pc, #112]	@ (8002060 <HAL_UART_MspInit+0xc4>)
 8001fee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ff2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8002060 <HAL_UART_MspInit+0xc4>)
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002000:	4b17      	ldr	r3, [pc, #92]	@ (8002060 <HAL_UART_MspInit+0xc4>)
 8002002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002004:	4a16      	ldr	r2, [pc, #88]	@ (8002060 <HAL_UART_MspInit+0xc4>)
 8002006:	f043 0308 	orr.w	r3, r3, #8
 800200a:	6313      	str	r3, [r2, #48]	@ 0x30
 800200c:	4b14      	ldr	r3, [pc, #80]	@ (8002060 <HAL_UART_MspInit+0xc4>)
 800200e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002010:	f003 0308 	and.w	r3, r3, #8
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = Bluetooth_TX_Pin|Bluetooth_RX_Pin;
 8002018:	2360      	movs	r3, #96	@ 0x60
 800201a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201e:	2302      	movs	r3, #2
 8002020:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202a:	2303      	movs	r3, #3
 800202c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002030:	2307      	movs	r3, #7
 8002032:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002036:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800203a:	4619      	mov	r1, r3
 800203c:	4809      	ldr	r0, [pc, #36]	@ (8002064 <HAL_UART_MspInit+0xc8>)
 800203e:	f000 fb61 	bl	8002704 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8002042:	2200      	movs	r2, #0
 8002044:	2102      	movs	r1, #2
 8002046:	2026      	movs	r0, #38	@ 0x26
 8002048:	f000 fa1b 	bl	8002482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800204c:	2026      	movs	r0, #38	@ 0x26
 800204e:	f000 fa34 	bl	80024ba <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002052:	bf00      	nop
 8002054:	37b8      	adds	r7, #184	@ 0xb8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40004400 	.word	0x40004400
 8002060:	40023800 	.word	0x40023800
 8002064:	40020c00 	.word	0x40020c00

08002068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800206c:	bf00      	nop
 800206e:	e7fd      	b.n	800206c <NMI_Handler+0x4>

08002070 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002074:	bf00      	nop
 8002076:	e7fd      	b.n	8002074 <HardFault_Handler+0x4>

08002078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800207c:	bf00      	nop
 800207e:	e7fd      	b.n	800207c <MemManage_Handler+0x4>

08002080 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002084:	bf00      	nop
 8002086:	e7fd      	b.n	8002084 <BusFault_Handler+0x4>

08002088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800208c:	bf00      	nop
 800208e:	e7fd      	b.n	800208c <UsageFault_Handler+0x4>

08002090 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020be:	f000 f8c1 	bl	8002244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BNO055_INT_Pin);
 80020ca:	2008      	movs	r0, #8
 80020cc:	f000 fce0 	bl	8002a90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020d8:	4803      	ldr	r0, [pc, #12]	@ (80020e8 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80020da:	f002 feb5 	bl	8004e48 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 80020de:	4803      	ldr	r0, [pc, #12]	@ (80020ec <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80020e0:	f002 feb2 	bl	8004e48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80020e4:	bf00      	nop
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	200000fc 	.word	0x200000fc
 80020ec:	20000278 	.word	0x20000278

080020f0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020f4:	4802      	ldr	r0, [pc, #8]	@ (8002100 <TIM1_CC_IRQHandler+0x10>)
 80020f6:	f002 fea7 	bl	8004e48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	200000fc 	.word	0x200000fc

08002104 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002108:	4802      	ldr	r0, [pc, #8]	@ (8002114 <TIM2_IRQHandler+0x10>)
 800210a:	f002 fe9d 	bl	8004e48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20000148 	.word	0x20000148

08002118 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800211c:	4802      	ldr	r0, [pc, #8]	@ (8002128 <TIM3_IRQHandler+0x10>)
 800211e:	f002 fe93 	bl	8004e48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000194 	.word	0x20000194

0800212c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002130:	4802      	ldr	r0, [pc, #8]	@ (800213c <TIM4_IRQHandler+0x10>)
 8002132:	f002 fe89 	bl	8004e48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	200001e0 	.word	0x200001e0

08002140 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002144:	4802      	ldr	r0, [pc, #8]	@ (8002150 <USART2_IRQHandler+0x10>)
 8002146:	f004 f971 	bl	800642c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	200002c4 	.word	0x200002c4

08002154 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002158:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <SystemInit+0x20>)
 800215a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800215e:	4a05      	ldr	r2, [pc, #20]	@ (8002174 <SystemInit+0x20>)
 8002160:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002164:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002178:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800217c:	f7ff ffea 	bl	8002154 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002180:	480c      	ldr	r0, [pc, #48]	@ (80021b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002182:	490d      	ldr	r1, [pc, #52]	@ (80021b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002184:	4a0d      	ldr	r2, [pc, #52]	@ (80021bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002188:	e002      	b.n	8002190 <LoopCopyDataInit>

0800218a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800218a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800218c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800218e:	3304      	adds	r3, #4

08002190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002194:	d3f9      	bcc.n	800218a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002196:	4a0a      	ldr	r2, [pc, #40]	@ (80021c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002198:	4c0a      	ldr	r4, [pc, #40]	@ (80021c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800219a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800219c:	e001      	b.n	80021a2 <LoopFillZerobss>

0800219e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800219e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a0:	3204      	adds	r2, #4

080021a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a4:	d3fb      	bcc.n	800219e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80021a6:	f005 fc51 	bl	8007a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021aa:	f7fe ffa5 	bl	80010f8 <main>
  bx  lr    
 80021ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021b0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80021b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b8:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 80021bc:	08007ae8 	.word	0x08007ae8
  ldr r2, =_sbss
 80021c0:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80021c4:	200003a4 	.word	0x200003a4

080021c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021c8:	e7fe      	b.n	80021c8 <ADC_IRQHandler>

080021ca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021ce:	2003      	movs	r0, #3
 80021d0:	f000 f94c 	bl	800246c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021d4:	2001      	movs	r0, #1
 80021d6:	f000 f805 	bl	80021e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021da:	f7ff fc9f 	bl	8001b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021ec:	4b12      	ldr	r3, [pc, #72]	@ (8002238 <HAL_InitTick+0x54>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	4b12      	ldr	r3, [pc, #72]	@ (800223c <HAL_InitTick+0x58>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	4619      	mov	r1, r3
 80021f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80021fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002202:	4618      	mov	r0, r3
 8002204:	f000 f967 	bl	80024d6 <HAL_SYSTICK_Config>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e00e      	b.n	8002230 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b0f      	cmp	r3, #15
 8002216:	d80a      	bhi.n	800222e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002218:	2200      	movs	r2, #0
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	f04f 30ff 	mov.w	r0, #4294967295
 8002220:	f000 f92f 	bl	8002482 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002224:	4a06      	ldr	r2, [pc, #24]	@ (8002240 <HAL_InitTick+0x5c>)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	e000      	b.n	8002230 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
}
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20000024 	.word	0x20000024
 800223c:	2000002c 	.word	0x2000002c
 8002240:	20000028 	.word	0x20000028

08002244 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002248:	4b06      	ldr	r3, [pc, #24]	@ (8002264 <HAL_IncTick+0x20>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	4b06      	ldr	r3, [pc, #24]	@ (8002268 <HAL_IncTick+0x24>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4413      	add	r3, r2
 8002254:	4a04      	ldr	r2, [pc, #16]	@ (8002268 <HAL_IncTick+0x24>)
 8002256:	6013      	str	r3, [r2, #0]
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	2000002c 	.word	0x2000002c
 8002268:	200003a0 	.word	0x200003a0

0800226c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return uwTick;
 8002270:	4b03      	ldr	r3, [pc, #12]	@ (8002280 <HAL_GetTick+0x14>)
 8002272:	681b      	ldr	r3, [r3, #0]
}
 8002274:	4618      	mov	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	200003a0 	.word	0x200003a0

08002284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800228c:	f7ff ffee 	bl	800226c <HAL_GetTick>
 8002290:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229c:	d005      	beq.n	80022aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800229e:	4b0a      	ldr	r3, [pc, #40]	@ (80022c8 <HAL_Delay+0x44>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	461a      	mov	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4413      	add	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022aa:	bf00      	nop
 80022ac:	f7ff ffde 	bl	800226c <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d8f7      	bhi.n	80022ac <HAL_Delay+0x28>
  {
  }
}
 80022bc:	bf00      	nop
 80022be:	bf00      	nop
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	2000002c 	.word	0x2000002c

080022cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022dc:	4b0b      	ldr	r3, [pc, #44]	@ (800230c <__NVIC_SetPriorityGrouping+0x40>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022e8:	4013      	ands	r3, r2
 80022ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022f4:	4b06      	ldr	r3, [pc, #24]	@ (8002310 <__NVIC_SetPriorityGrouping+0x44>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022fa:	4a04      	ldr	r2, [pc, #16]	@ (800230c <__NVIC_SetPriorityGrouping+0x40>)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	60d3      	str	r3, [r2, #12]
}
 8002300:	bf00      	nop
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	e000ed00 	.word	0xe000ed00
 8002310:	05fa0000 	.word	0x05fa0000

08002314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002318:	4b04      	ldr	r3, [pc, #16]	@ (800232c <__NVIC_GetPriorityGrouping+0x18>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	0a1b      	lsrs	r3, r3, #8
 800231e:	f003 0307 	and.w	r3, r3, #7
}
 8002322:	4618      	mov	r0, r3
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233e:	2b00      	cmp	r3, #0
 8002340:	db0b      	blt.n	800235a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	f003 021f 	and.w	r2, r3, #31
 8002348:	4907      	ldr	r1, [pc, #28]	@ (8002368 <__NVIC_EnableIRQ+0x38>)
 800234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234e:	095b      	lsrs	r3, r3, #5
 8002350:	2001      	movs	r0, #1
 8002352:	fa00 f202 	lsl.w	r2, r0, r2
 8002356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	e000e100 	.word	0xe000e100

0800236c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	6039      	str	r1, [r7, #0]
 8002376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237c:	2b00      	cmp	r3, #0
 800237e:	db0a      	blt.n	8002396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	b2da      	uxtb	r2, r3
 8002384:	490c      	ldr	r1, [pc, #48]	@ (80023b8 <__NVIC_SetPriority+0x4c>)
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	0112      	lsls	r2, r2, #4
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	440b      	add	r3, r1
 8002390:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002394:	e00a      	b.n	80023ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	b2da      	uxtb	r2, r3
 800239a:	4908      	ldr	r1, [pc, #32]	@ (80023bc <__NVIC_SetPriority+0x50>)
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	3b04      	subs	r3, #4
 80023a4:	0112      	lsls	r2, r2, #4
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	440b      	add	r3, r1
 80023aa:	761a      	strb	r2, [r3, #24]
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000e100 	.word	0xe000e100
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b089      	sub	sp, #36	@ 0x24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f1c3 0307 	rsb	r3, r3, #7
 80023da:	2b04      	cmp	r3, #4
 80023dc:	bf28      	it	cs
 80023de:	2304      	movcs	r3, #4
 80023e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3304      	adds	r3, #4
 80023e6:	2b06      	cmp	r3, #6
 80023e8:	d902      	bls.n	80023f0 <NVIC_EncodePriority+0x30>
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3b03      	subs	r3, #3
 80023ee:	e000      	b.n	80023f2 <NVIC_EncodePriority+0x32>
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f4:	f04f 32ff 	mov.w	r2, #4294967295
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43da      	mvns	r2, r3
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	401a      	ands	r2, r3
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002408:	f04f 31ff 	mov.w	r1, #4294967295
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	fa01 f303 	lsl.w	r3, r1, r3
 8002412:	43d9      	mvns	r1, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002418:	4313      	orrs	r3, r2
         );
}
 800241a:	4618      	mov	r0, r3
 800241c:	3724      	adds	r7, #36	@ 0x24
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
	...

08002428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3b01      	subs	r3, #1
 8002434:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002438:	d301      	bcc.n	800243e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800243a:	2301      	movs	r3, #1
 800243c:	e00f      	b.n	800245e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800243e:	4a0a      	ldr	r2, [pc, #40]	@ (8002468 <SysTick_Config+0x40>)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3b01      	subs	r3, #1
 8002444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002446:	210f      	movs	r1, #15
 8002448:	f04f 30ff 	mov.w	r0, #4294967295
 800244c:	f7ff ff8e 	bl	800236c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002450:	4b05      	ldr	r3, [pc, #20]	@ (8002468 <SysTick_Config+0x40>)
 8002452:	2200      	movs	r2, #0
 8002454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002456:	4b04      	ldr	r3, [pc, #16]	@ (8002468 <SysTick_Config+0x40>)
 8002458:	2207      	movs	r2, #7
 800245a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	e000e010 	.word	0xe000e010

0800246c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff ff29 	bl	80022cc <__NVIC_SetPriorityGrouping>
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002482:	b580      	push	{r7, lr}
 8002484:	b086      	sub	sp, #24
 8002486:	af00      	add	r7, sp, #0
 8002488:	4603      	mov	r3, r0
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	607a      	str	r2, [r7, #4]
 800248e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002494:	f7ff ff3e 	bl	8002314 <__NVIC_GetPriorityGrouping>
 8002498:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	6978      	ldr	r0, [r7, #20]
 80024a0:	f7ff ff8e 	bl	80023c0 <NVIC_EncodePriority>
 80024a4:	4602      	mov	r2, r0
 80024a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024aa:	4611      	mov	r1, r2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff ff5d 	bl	800236c <__NVIC_SetPriority>
}
 80024b2:	bf00      	nop
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	4603      	mov	r3, r0
 80024c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff ff31 	bl	8002330 <__NVIC_EnableIRQ>
}
 80024ce:	bf00      	nop
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff ffa2 	bl	8002428 <SysTick_Config>
 80024e4:	4603      	mov	r3, r0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80024f4:	f3bf 8f5f 	dmb	sy
}
 80024f8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80024fa:	4b07      	ldr	r3, [pc, #28]	@ (8002518 <HAL_MPU_Disable+0x28>)
 80024fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fe:	4a06      	ldr	r2, [pc, #24]	@ (8002518 <HAL_MPU_Disable+0x28>)
 8002500:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002504:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002506:	4b05      	ldr	r3, [pc, #20]	@ (800251c <HAL_MPU_Disable+0x2c>)
 8002508:	2200      	movs	r2, #0
 800250a:	605a      	str	r2, [r3, #4]
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	e000ed00 	.word	0xe000ed00
 800251c:	e000ed90 	.word	0xe000ed90

08002520 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002528:	4a0b      	ldr	r2, [pc, #44]	@ (8002558 <HAL_MPU_Enable+0x38>)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002532:	4b0a      	ldr	r3, [pc, #40]	@ (800255c <HAL_MPU_Enable+0x3c>)
 8002534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002536:	4a09      	ldr	r2, [pc, #36]	@ (800255c <HAL_MPU_Enable+0x3c>)
 8002538:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800253c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800253e:	f3bf 8f4f 	dsb	sy
}
 8002542:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002544:	f3bf 8f6f 	isb	sy
}
 8002548:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	e000ed90 	.word	0xe000ed90
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	785a      	ldrb	r2, [r3, #1]
 800256c:	4b1b      	ldr	r3, [pc, #108]	@ (80025dc <HAL_MPU_ConfigRegion+0x7c>)
 800256e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002570:	4b1a      	ldr	r3, [pc, #104]	@ (80025dc <HAL_MPU_ConfigRegion+0x7c>)
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	4a19      	ldr	r2, [pc, #100]	@ (80025dc <HAL_MPU_ConfigRegion+0x7c>)
 8002576:	f023 0301 	bic.w	r3, r3, #1
 800257a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800257c:	4a17      	ldr	r2, [pc, #92]	@ (80025dc <HAL_MPU_ConfigRegion+0x7c>)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	7b1b      	ldrb	r3, [r3, #12]
 8002588:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	7adb      	ldrb	r3, [r3, #11]
 800258e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002590:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	7a9b      	ldrb	r3, [r3, #10]
 8002596:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002598:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	7b5b      	ldrb	r3, [r3, #13]
 800259e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80025a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	7b9b      	ldrb	r3, [r3, #14]
 80025a6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80025a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	7bdb      	ldrb	r3, [r3, #15]
 80025ae:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80025b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	7a5b      	ldrb	r3, [r3, #9]
 80025b6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80025b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	7a1b      	ldrb	r3, [r3, #8]
 80025be:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80025c0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	7812      	ldrb	r2, [r2, #0]
 80025c6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025c8:	4a04      	ldr	r2, [pc, #16]	@ (80025dc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80025ca:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025cc:	6113      	str	r3, [r2, #16]
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	e000ed90 	.word	0xe000ed90

080025e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025ee:	f7ff fe3d 	bl	800226c <HAL_GetTick>
 80025f2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d008      	beq.n	8002612 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2280      	movs	r2, #128	@ 0x80
 8002604:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e052      	b.n	80026b8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 0216 	bic.w	r2, r2, #22
 8002620:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	695a      	ldr	r2, [r3, #20]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002630:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002636:	2b00      	cmp	r3, #0
 8002638:	d103      	bne.n	8002642 <HAL_DMA_Abort+0x62>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800263e:	2b00      	cmp	r3, #0
 8002640:	d007      	beq.n	8002652 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 0208 	bic.w	r2, r2, #8
 8002650:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0201 	bic.w	r2, r2, #1
 8002660:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002662:	e013      	b.n	800268c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002664:	f7ff fe02 	bl	800226c <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b05      	cmp	r3, #5
 8002670:	d90c      	bls.n	800268c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2220      	movs	r2, #32
 8002676:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2203      	movs	r2, #3
 800267c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e015      	b.n	80026b8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1e4      	bne.n	8002664 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269e:	223f      	movs	r2, #63	@ 0x3f
 80026a0:	409a      	lsls	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d004      	beq.n	80026de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2280      	movs	r2, #128	@ 0x80
 80026d8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e00c      	b.n	80026f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2205      	movs	r2, #5
 80026e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 0201 	bic.w	r2, r2, #1
 80026f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002704:	b480      	push	{r7}
 8002706:	b089      	sub	sp, #36	@ 0x24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002716:	2300      	movs	r3, #0
 8002718:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800271a:	2300      	movs	r3, #0
 800271c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800271e:	2300      	movs	r3, #0
 8002720:	61fb      	str	r3, [r7, #28]
 8002722:	e175      	b.n	8002a10 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002724:	2201      	movs	r2, #1
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	4013      	ands	r3, r2
 8002736:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	429a      	cmp	r2, r3
 800273e:	f040 8164 	bne.w	8002a0a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	2b01      	cmp	r3, #1
 800274c:	d005      	beq.n	800275a <HAL_GPIO_Init+0x56>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d130      	bne.n	80027bc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	2203      	movs	r2, #3
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43db      	mvns	r3, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4013      	ands	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4313      	orrs	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002790:	2201      	movs	r2, #1
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	091b      	lsrs	r3, r3, #4
 80027a6:	f003 0201 	and.w	r2, r3, #1
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 0303 	and.w	r3, r3, #3
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d017      	beq.n	80027f8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	2203      	movs	r2, #3
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 0303 	and.w	r3, r3, #3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d123      	bne.n	800284c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	08da      	lsrs	r2, r3, #3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3208      	adds	r2, #8
 800280c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	220f      	movs	r2, #15
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	691a      	ldr	r2, [r3, #16]
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	08da      	lsrs	r2, r3, #3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	3208      	adds	r2, #8
 8002846:	69b9      	ldr	r1, [r7, #24]
 8002848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	2203      	movs	r2, #3
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43db      	mvns	r3, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 0203 	and.w	r2, r3, #3
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 80be 	beq.w	8002a0a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800288e:	4b66      	ldr	r3, [pc, #408]	@ (8002a28 <HAL_GPIO_Init+0x324>)
 8002890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002892:	4a65      	ldr	r2, [pc, #404]	@ (8002a28 <HAL_GPIO_Init+0x324>)
 8002894:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002898:	6453      	str	r3, [r2, #68]	@ 0x44
 800289a:	4b63      	ldr	r3, [pc, #396]	@ (8002a28 <HAL_GPIO_Init+0x324>)
 800289c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800289e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80028a6:	4a61      	ldr	r2, [pc, #388]	@ (8002a2c <HAL_GPIO_Init+0x328>)
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	089b      	lsrs	r3, r3, #2
 80028ac:	3302      	adds	r3, #2
 80028ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	220f      	movs	r2, #15
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43db      	mvns	r3, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4013      	ands	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a58      	ldr	r2, [pc, #352]	@ (8002a30 <HAL_GPIO_Init+0x32c>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d037      	beq.n	8002942 <HAL_GPIO_Init+0x23e>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a57      	ldr	r2, [pc, #348]	@ (8002a34 <HAL_GPIO_Init+0x330>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d031      	beq.n	800293e <HAL_GPIO_Init+0x23a>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a56      	ldr	r2, [pc, #344]	@ (8002a38 <HAL_GPIO_Init+0x334>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d02b      	beq.n	800293a <HAL_GPIO_Init+0x236>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a55      	ldr	r2, [pc, #340]	@ (8002a3c <HAL_GPIO_Init+0x338>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d025      	beq.n	8002936 <HAL_GPIO_Init+0x232>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a54      	ldr	r2, [pc, #336]	@ (8002a40 <HAL_GPIO_Init+0x33c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d01f      	beq.n	8002932 <HAL_GPIO_Init+0x22e>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a53      	ldr	r2, [pc, #332]	@ (8002a44 <HAL_GPIO_Init+0x340>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d019      	beq.n	800292e <HAL_GPIO_Init+0x22a>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a52      	ldr	r2, [pc, #328]	@ (8002a48 <HAL_GPIO_Init+0x344>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d013      	beq.n	800292a <HAL_GPIO_Init+0x226>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a51      	ldr	r2, [pc, #324]	@ (8002a4c <HAL_GPIO_Init+0x348>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d00d      	beq.n	8002926 <HAL_GPIO_Init+0x222>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a50      	ldr	r2, [pc, #320]	@ (8002a50 <HAL_GPIO_Init+0x34c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d007      	beq.n	8002922 <HAL_GPIO_Init+0x21e>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a4f      	ldr	r2, [pc, #316]	@ (8002a54 <HAL_GPIO_Init+0x350>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d101      	bne.n	800291e <HAL_GPIO_Init+0x21a>
 800291a:	2309      	movs	r3, #9
 800291c:	e012      	b.n	8002944 <HAL_GPIO_Init+0x240>
 800291e:	230a      	movs	r3, #10
 8002920:	e010      	b.n	8002944 <HAL_GPIO_Init+0x240>
 8002922:	2308      	movs	r3, #8
 8002924:	e00e      	b.n	8002944 <HAL_GPIO_Init+0x240>
 8002926:	2307      	movs	r3, #7
 8002928:	e00c      	b.n	8002944 <HAL_GPIO_Init+0x240>
 800292a:	2306      	movs	r3, #6
 800292c:	e00a      	b.n	8002944 <HAL_GPIO_Init+0x240>
 800292e:	2305      	movs	r3, #5
 8002930:	e008      	b.n	8002944 <HAL_GPIO_Init+0x240>
 8002932:	2304      	movs	r3, #4
 8002934:	e006      	b.n	8002944 <HAL_GPIO_Init+0x240>
 8002936:	2303      	movs	r3, #3
 8002938:	e004      	b.n	8002944 <HAL_GPIO_Init+0x240>
 800293a:	2302      	movs	r3, #2
 800293c:	e002      	b.n	8002944 <HAL_GPIO_Init+0x240>
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <HAL_GPIO_Init+0x240>
 8002942:	2300      	movs	r3, #0
 8002944:	69fa      	ldr	r2, [r7, #28]
 8002946:	f002 0203 	and.w	r2, r2, #3
 800294a:	0092      	lsls	r2, r2, #2
 800294c:	4093      	lsls	r3, r2
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4313      	orrs	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002954:	4935      	ldr	r1, [pc, #212]	@ (8002a2c <HAL_GPIO_Init+0x328>)
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	089b      	lsrs	r3, r3, #2
 800295a:	3302      	adds	r3, #2
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002962:	4b3d      	ldr	r3, [pc, #244]	@ (8002a58 <HAL_GPIO_Init+0x354>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	43db      	mvns	r3, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4013      	ands	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	4313      	orrs	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002986:	4a34      	ldr	r2, [pc, #208]	@ (8002a58 <HAL_GPIO_Init+0x354>)
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800298c:	4b32      	ldr	r3, [pc, #200]	@ (8002a58 <HAL_GPIO_Init+0x354>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	43db      	mvns	r3, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4013      	ands	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029b0:	4a29      	ldr	r2, [pc, #164]	@ (8002a58 <HAL_GPIO_Init+0x354>)
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029b6:	4b28      	ldr	r3, [pc, #160]	@ (8002a58 <HAL_GPIO_Init+0x354>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	43db      	mvns	r3, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4013      	ands	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029da:	4a1f      	ldr	r2, [pc, #124]	@ (8002a58 <HAL_GPIO_Init+0x354>)
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a58 <HAL_GPIO_Init+0x354>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	43db      	mvns	r3, r3
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4013      	ands	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a04:	4a14      	ldr	r2, [pc, #80]	@ (8002a58 <HAL_GPIO_Init+0x354>)
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	61fb      	str	r3, [r7, #28]
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	2b0f      	cmp	r3, #15
 8002a14:	f67f ae86 	bls.w	8002724 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a18:	bf00      	nop
 8002a1a:	bf00      	nop
 8002a1c:	3724      	adds	r7, #36	@ 0x24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	40013800 	.word	0x40013800
 8002a30:	40020000 	.word	0x40020000
 8002a34:	40020400 	.word	0x40020400
 8002a38:	40020800 	.word	0x40020800
 8002a3c:	40020c00 	.word	0x40020c00
 8002a40:	40021000 	.word	0x40021000
 8002a44:	40021400 	.word	0x40021400
 8002a48:	40021800 	.word	0x40021800
 8002a4c:	40021c00 	.word	0x40021c00
 8002a50:	40022000 	.word	0x40022000
 8002a54:	40022400 	.word	0x40022400
 8002a58:	40013c00 	.word	0x40013c00

08002a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	807b      	strh	r3, [r7, #2]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a6c:	787b      	ldrb	r3, [r7, #1]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a72:	887a      	ldrh	r2, [r7, #2]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a78:	e003      	b.n	8002a82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a7a:	887b      	ldrh	r3, [r7, #2]
 8002a7c:	041a      	lsls	r2, r3, #16
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	619a      	str	r2, [r3, #24]
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
	...

08002a90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a9a:	4b08      	ldr	r3, [pc, #32]	@ (8002abc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a9c:	695a      	ldr	r2, [r3, #20]
 8002a9e:	88fb      	ldrh	r3, [r7, #6]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d006      	beq.n	8002ab4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002aa6:	4a05      	ldr	r2, [pc, #20]	@ (8002abc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002aa8:	88fb      	ldrh	r3, [r7, #6]
 8002aaa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002aac:	88fb      	ldrh	r3, [r7, #6]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 f806 	bl	8002ac0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ab4:	bf00      	nop
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40013c00 	.word	0x40013c00

08002ac0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
	...

08002ad8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e08b      	b.n	8002c02 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d106      	bne.n	8002b04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7ff f830 	bl	8001b64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2224      	movs	r2, #36	@ 0x24
 8002b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0201 	bic.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b28:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b38:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d107      	bne.n	8002b52 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	e006      	b.n	8002b60 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002b5e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d108      	bne.n	8002b7a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b76:	605a      	str	r2, [r3, #4]
 8002b78:	e007      	b.n	8002b8a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6859      	ldr	r1, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	4b1d      	ldr	r3, [pc, #116]	@ (8002c0c <HAL_I2C_Init+0x134>)
 8002b96:	430b      	orrs	r3, r1
 8002b98:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68da      	ldr	r2, [r3, #12]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ba8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691a      	ldr	r2, [r3, #16]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	69d9      	ldr	r1, [r3, #28]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a1a      	ldr	r2, [r3, #32]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0201 	orr.w	r2, r2, #1
 8002be2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2220      	movs	r2, #32
 8002bee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	02008000 	.word	0x02008000

08002c10 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b088      	sub	sp, #32
 8002c14:	af02      	add	r7, sp, #8
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	607a      	str	r2, [r7, #4]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	817b      	strh	r3, [r7, #10]
 8002c20:	4613      	mov	r3, r2
 8002c22:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b20      	cmp	r3, #32
 8002c2e:	f040 80fd 	bne.w	8002e2c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d101      	bne.n	8002c40 <HAL_I2C_Master_Transmit+0x30>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	e0f6      	b.n	8002e2e <HAL_I2C_Master_Transmit+0x21e>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c48:	f7ff fb10 	bl	800226c <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	2319      	movs	r3, #25
 8002c54:	2201      	movs	r2, #1
 8002c56:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 fa82 	bl	8003164 <I2C_WaitOnFlagUntilTimeout>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e0e1      	b.n	8002e2e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2221      	movs	r2, #33	@ 0x21
 8002c6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2210      	movs	r2, #16
 8002c76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	893a      	ldrh	r2, [r7, #8]
 8002c8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	2bff      	cmp	r3, #255	@ 0xff
 8002c9a:	d906      	bls.n	8002caa <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	22ff      	movs	r2, #255	@ 0xff
 8002ca0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002ca2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ca6:	617b      	str	r3, [r7, #20]
 8002ca8:	e007      	b.n	8002cba <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002cb4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cb8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d024      	beq.n	8002d0c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc6:	781a      	ldrb	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd2:	1c5a      	adds	r2, r3, #1
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	8979      	ldrh	r1, [r7, #10]
 8002cfe:	4b4e      	ldr	r3, [pc, #312]	@ (8002e38 <HAL_I2C_Master_Transmit+0x228>)
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 fbf1 	bl	80034ec <I2C_TransferConfig>
 8002d0a:	e066      	b.n	8002dda <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	8979      	ldrh	r1, [r7, #10]
 8002d14:	4b48      	ldr	r3, [pc, #288]	@ (8002e38 <HAL_I2C_Master_Transmit+0x228>)
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 fbe6 	bl	80034ec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002d20:	e05b      	b.n	8002dda <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	6a39      	ldr	r1, [r7, #32]
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 fa75 	bl	8003216 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e07b      	b.n	8002e2e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3a:	781a      	ldrb	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d034      	beq.n	8002dda <HAL_I2C_Master_Transmit+0x1ca>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d130      	bne.n	8002dda <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	2180      	movs	r1, #128	@ 0x80
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 f9ee 	bl	8003164 <I2C_WaitOnFlagUntilTimeout>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e04d      	b.n	8002e2e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	2bff      	cmp	r3, #255	@ 0xff
 8002d9a:	d90e      	bls.n	8002dba <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	22ff      	movs	r2, #255	@ 0xff
 8002da0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	8979      	ldrh	r1, [r7, #10]
 8002daa:	2300      	movs	r3, #0
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 fb9a 	bl	80034ec <I2C_TransferConfig>
 8002db8:	e00f      	b.n	8002dda <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	8979      	ldrh	r1, [r7, #10]
 8002dcc:	2300      	movs	r3, #0
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 fb89 	bl	80034ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d19e      	bne.n	8002d22 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	6a39      	ldr	r1, [r7, #32]
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 fa5b 	bl	80032a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e01a      	b.n	8002e2e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6859      	ldr	r1, [r3, #4]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8002e3c <HAL_I2C_Master_Transmit+0x22c>)
 8002e0c:	400b      	ands	r3, r1
 8002e0e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2220      	movs	r2, #32
 8002e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	e000      	b.n	8002e2e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002e2c:	2302      	movs	r3, #2
  }
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3718      	adds	r7, #24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	80002000 	.word	0x80002000
 8002e3c:	fe00e800 	.word	0xfe00e800

08002e40 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b088      	sub	sp, #32
 8002e44:	af02      	add	r7, sp, #8
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	4608      	mov	r0, r1
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	4603      	mov	r3, r0
 8002e50:	817b      	strh	r3, [r7, #10]
 8002e52:	460b      	mov	r3, r1
 8002e54:	813b      	strh	r3, [r7, #8]
 8002e56:	4613      	mov	r3, r2
 8002e58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b20      	cmp	r3, #32
 8002e64:	f040 80fd 	bne.w	8003062 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d002      	beq.n	8002e74 <HAL_I2C_Mem_Read+0x34>
 8002e6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d105      	bne.n	8002e80 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e7a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0f1      	b.n	8003064 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <HAL_I2C_Mem_Read+0x4e>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e0ea      	b.n	8003064 <HAL_I2C_Mem_Read+0x224>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e96:	f7ff f9e9 	bl	800226c <HAL_GetTick>
 8002e9a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	2319      	movs	r3, #25
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 f95b 	bl	8003164 <I2C_WaitOnFlagUntilTimeout>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e0d5      	b.n	8003064 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2222      	movs	r2, #34	@ 0x22
 8002ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2240      	movs	r2, #64	@ 0x40
 8002ec4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6a3a      	ldr	r2, [r7, #32]
 8002ed2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002ed8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ee0:	88f8      	ldrh	r0, [r7, #6]
 8002ee2:	893a      	ldrh	r2, [r7, #8]
 8002ee4:	8979      	ldrh	r1, [r7, #10]
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	9301      	str	r3, [sp, #4]
 8002eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	4603      	mov	r3, r0
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 f8bf 	bl	8003074 <I2C_RequestMemoryRead>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d005      	beq.n	8002f08 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0ad      	b.n	8003064 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	2bff      	cmp	r3, #255	@ 0xff
 8002f10:	d90e      	bls.n	8002f30 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2201      	movs	r2, #1
 8002f16:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	8979      	ldrh	r1, [r7, #10]
 8002f20:	4b52      	ldr	r3, [pc, #328]	@ (800306c <HAL_I2C_Mem_Read+0x22c>)
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 fadf 	bl	80034ec <I2C_TransferConfig>
 8002f2e:	e00f      	b.n	8002f50 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	8979      	ldrh	r1, [r7, #10]
 8002f42:	4b4a      	ldr	r3, [pc, #296]	@ (800306c <HAL_I2C_Mem_Read+0x22c>)
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 face 	bl	80034ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f56:	2200      	movs	r2, #0
 8002f58:	2104      	movs	r1, #4
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 f902 	bl	8003164 <I2C_WaitOnFlagUntilTimeout>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e07c      	b.n	8003064 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f74:	b2d2      	uxtb	r2, r2
 8002f76:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f86:	3b01      	subs	r3, #1
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	3b01      	subs	r3, #1
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d034      	beq.n	8003010 <HAL_I2C_Mem_Read+0x1d0>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d130      	bne.n	8003010 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	2180      	movs	r1, #128	@ 0x80
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 f8d3 	bl	8003164 <I2C_WaitOnFlagUntilTimeout>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e04d      	b.n	8003064 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	2bff      	cmp	r3, #255	@ 0xff
 8002fd0:	d90e      	bls.n	8002ff0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	8979      	ldrh	r1, [r7, #10]
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 fa7f 	bl	80034ec <I2C_TransferConfig>
 8002fee:	e00f      	b.n	8003010 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	8979      	ldrh	r1, [r7, #10]
 8003002:	2300      	movs	r3, #0
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 fa6e 	bl	80034ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003014:	b29b      	uxth	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d19a      	bne.n	8002f50 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 f940 	bl	80032a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e01a      	b.n	8003064 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2220      	movs	r2, #32
 8003034:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6859      	ldr	r1, [r3, #4]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	4b0b      	ldr	r3, [pc, #44]	@ (8003070 <HAL_I2C_Mem_Read+0x230>)
 8003042:	400b      	ands	r3, r1
 8003044:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2220      	movs	r2, #32
 800304a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	e000      	b.n	8003064 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003062:	2302      	movs	r3, #2
  }
}
 8003064:	4618      	mov	r0, r3
 8003066:	3718      	adds	r7, #24
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	80002400 	.word	0x80002400
 8003070:	fe00e800 	.word	0xfe00e800

08003074 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af02      	add	r7, sp, #8
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	4608      	mov	r0, r1
 800307e:	4611      	mov	r1, r2
 8003080:	461a      	mov	r2, r3
 8003082:	4603      	mov	r3, r0
 8003084:	817b      	strh	r3, [r7, #10]
 8003086:	460b      	mov	r3, r1
 8003088:	813b      	strh	r3, [r7, #8]
 800308a:	4613      	mov	r3, r2
 800308c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800308e:	88fb      	ldrh	r3, [r7, #6]
 8003090:	b2da      	uxtb	r2, r3
 8003092:	8979      	ldrh	r1, [r7, #10]
 8003094:	4b20      	ldr	r3, [pc, #128]	@ (8003118 <I2C_RequestMemoryRead+0xa4>)
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	2300      	movs	r3, #0
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 fa26 	bl	80034ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030a0:	69fa      	ldr	r2, [r7, #28]
 80030a2:	69b9      	ldr	r1, [r7, #24]
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 f8b6 	bl	8003216 <I2C_WaitOnTXISFlagUntilTimeout>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e02c      	b.n	800310e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030b4:	88fb      	ldrh	r3, [r7, #6]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d105      	bne.n	80030c6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030ba:	893b      	ldrh	r3, [r7, #8]
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80030c4:	e015      	b.n	80030f2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80030c6:	893b      	ldrh	r3, [r7, #8]
 80030c8:	0a1b      	lsrs	r3, r3, #8
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030d4:	69fa      	ldr	r2, [r7, #28]
 80030d6:	69b9      	ldr	r1, [r7, #24]
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 f89c 	bl	8003216 <I2C_WaitOnTXISFlagUntilTimeout>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e012      	b.n	800310e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030e8:	893b      	ldrh	r3, [r7, #8]
 80030ea:	b2da      	uxtb	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	2200      	movs	r2, #0
 80030fa:	2140      	movs	r1, #64	@ 0x40
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 f831 	bl	8003164 <I2C_WaitOnFlagUntilTimeout>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e000      	b.n	800310e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	80002000 	.word	0x80002000

0800311c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b02      	cmp	r3, #2
 8003130:	d103      	bne.n	800313a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2200      	movs	r2, #0
 8003138:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b01      	cmp	r3, #1
 8003146:	d007      	beq.n	8003158 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699a      	ldr	r2, [r3, #24]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0201 	orr.w	r2, r2, #1
 8003156:	619a      	str	r2, [r3, #24]
  }
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	603b      	str	r3, [r7, #0]
 8003170:	4613      	mov	r3, r2
 8003172:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003174:	e03b      	b.n	80031ee <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	6839      	ldr	r1, [r7, #0]
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 f8d6 	bl	800332c <I2C_IsErrorOccurred>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e041      	b.n	800320e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003190:	d02d      	beq.n	80031ee <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003192:	f7ff f86b 	bl	800226c <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d302      	bcc.n	80031a8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d122      	bne.n	80031ee <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	699a      	ldr	r2, [r3, #24]
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	4013      	ands	r3, r2
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	bf0c      	ite	eq
 80031b8:	2301      	moveq	r3, #1
 80031ba:	2300      	movne	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	461a      	mov	r2, r3
 80031c0:	79fb      	ldrb	r3, [r7, #7]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d113      	bne.n	80031ee <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ca:	f043 0220 	orr.w	r2, r3, #32
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2220      	movs	r2, #32
 80031d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e00f      	b.n	800320e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	699a      	ldr	r2, [r3, #24]
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	4013      	ands	r3, r2
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	bf0c      	ite	eq
 80031fe:	2301      	moveq	r3, #1
 8003200:	2300      	movne	r3, #0
 8003202:	b2db      	uxtb	r3, r3
 8003204:	461a      	mov	r2, r3
 8003206:	79fb      	ldrb	r3, [r7, #7]
 8003208:	429a      	cmp	r2, r3
 800320a:	d0b4      	beq.n	8003176 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b084      	sub	sp, #16
 800321a:	af00      	add	r7, sp, #0
 800321c:	60f8      	str	r0, [r7, #12]
 800321e:	60b9      	str	r1, [r7, #8]
 8003220:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003222:	e033      	b.n	800328c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	68b9      	ldr	r1, [r7, #8]
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 f87f 	bl	800332c <I2C_IsErrorOccurred>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e031      	b.n	800329c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323e:	d025      	beq.n	800328c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003240:	f7ff f814 	bl	800226c <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	429a      	cmp	r2, r3
 800324e:	d302      	bcc.n	8003256 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d11a      	bne.n	800328c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b02      	cmp	r3, #2
 8003262:	d013      	beq.n	800328c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003268:	f043 0220 	orr.w	r2, r3, #32
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2220      	movs	r2, #32
 8003274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e007      	b.n	800329c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b02      	cmp	r3, #2
 8003298:	d1c4      	bne.n	8003224 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032b0:	e02f      	b.n	8003312 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	68b9      	ldr	r1, [r7, #8]
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 f838 	bl	800332c <I2C_IsErrorOccurred>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e02d      	b.n	8003322 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c6:	f7fe ffd1 	bl	800226c <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d302      	bcc.n	80032dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d11a      	bne.n	8003312 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	f003 0320 	and.w	r3, r3, #32
 80032e6:	2b20      	cmp	r3, #32
 80032e8:	d013      	beq.n	8003312 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ee:	f043 0220 	orr.w	r2, r3, #32
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2220      	movs	r2, #32
 80032fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e007      	b.n	8003322 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	f003 0320 	and.w	r3, r3, #32
 800331c:	2b20      	cmp	r3, #32
 800331e:	d1c8      	bne.n	80032b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b08a      	sub	sp, #40	@ 0x28
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003338:	2300      	movs	r3, #0
 800333a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003346:	2300      	movs	r3, #0
 8003348:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	f003 0310 	and.w	r3, r3, #16
 8003354:	2b00      	cmp	r3, #0
 8003356:	d068      	beq.n	800342a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2210      	movs	r2, #16
 800335e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003360:	e049      	b.n	80033f6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003368:	d045      	beq.n	80033f6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800336a:	f7fe ff7f 	bl	800226c <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	429a      	cmp	r2, r3
 8003378:	d302      	bcc.n	8003380 <I2C_IsErrorOccurred+0x54>
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d13a      	bne.n	80033f6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800338a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003392:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800339e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033a2:	d121      	bne.n	80033e8 <I2C_IsErrorOccurred+0xbc>
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033aa:	d01d      	beq.n	80033e8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80033ac:	7cfb      	ldrb	r3, [r7, #19]
 80033ae:	2b20      	cmp	r3, #32
 80033b0:	d01a      	beq.n	80033e8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033c0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80033c2:	f7fe ff53 	bl	800226c <HAL_GetTick>
 80033c6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033c8:	e00e      	b.n	80033e8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80033ca:	f7fe ff4f 	bl	800226c <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b19      	cmp	r3, #25
 80033d6:	d907      	bls.n	80033e8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	f043 0320 	orr.w	r3, r3, #32
 80033de:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80033e6:	e006      	b.n	80033f6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	f003 0320 	and.w	r3, r3, #32
 80033f2:	2b20      	cmp	r3, #32
 80033f4:	d1e9      	bne.n	80033ca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	f003 0320 	and.w	r3, r3, #32
 8003400:	2b20      	cmp	r3, #32
 8003402:	d003      	beq.n	800340c <I2C_IsErrorOccurred+0xe0>
 8003404:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0aa      	beq.n	8003362 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800340c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003410:	2b00      	cmp	r3, #0
 8003412:	d103      	bne.n	800341c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2220      	movs	r2, #32
 800341a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	f043 0304 	orr.w	r3, r3, #4
 8003422:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00b      	beq.n	8003454 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800344c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00b      	beq.n	8003476 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	f043 0308 	orr.w	r3, r3, #8
 8003464:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800346e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00b      	beq.n	8003498 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	f043 0302 	orr.w	r3, r3, #2
 8003486:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003490:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003498:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800349c:	2b00      	cmp	r3, #0
 800349e:	d01c      	beq.n	80034da <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f7ff fe3b 	bl	800311c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6859      	ldr	r1, [r3, #4]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	4b0d      	ldr	r3, [pc, #52]	@ (80034e8 <I2C_IsErrorOccurred+0x1bc>)
 80034b2:	400b      	ands	r3, r1
 80034b4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	431a      	orrs	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2220      	movs	r2, #32
 80034c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80034da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3728      	adds	r7, #40	@ 0x28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	fe00e800 	.word	0xfe00e800

080034ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	607b      	str	r3, [r7, #4]
 80034f6:	460b      	mov	r3, r1
 80034f8:	817b      	strh	r3, [r7, #10]
 80034fa:	4613      	mov	r3, r2
 80034fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034fe:	897b      	ldrh	r3, [r7, #10]
 8003500:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003504:	7a7b      	ldrb	r3, [r7, #9]
 8003506:	041b      	lsls	r3, r3, #16
 8003508:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800350c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	4313      	orrs	r3, r2
 8003516:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800351a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	0d5b      	lsrs	r3, r3, #21
 8003526:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800352a:	4b08      	ldr	r3, [pc, #32]	@ (800354c <I2C_TransferConfig+0x60>)
 800352c:	430b      	orrs	r3, r1
 800352e:	43db      	mvns	r3, r3
 8003530:	ea02 0103 	and.w	r1, r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	430a      	orrs	r2, r1
 800353c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800353e:	bf00      	nop
 8003540:	371c      	adds	r7, #28
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	03ff63ff 	.word	0x03ff63ff

08003550 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b20      	cmp	r3, #32
 8003564:	d138      	bne.n	80035d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800356c:	2b01      	cmp	r3, #1
 800356e:	d101      	bne.n	8003574 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003570:	2302      	movs	r3, #2
 8003572:	e032      	b.n	80035da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2224      	movs	r2, #36	@ 0x24
 8003580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0201 	bic.w	r2, r2, #1
 8003592:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80035a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6819      	ldr	r1, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0201 	orr.w	r2, r2, #1
 80035c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035d4:	2300      	movs	r3, #0
 80035d6:	e000      	b.n	80035da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035d8:	2302      	movs	r3, #2
  }
}
 80035da:	4618      	mov	r0, r3
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b085      	sub	sp, #20
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b20      	cmp	r3, #32
 80035fa:	d139      	bne.n	8003670 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003602:	2b01      	cmp	r3, #1
 8003604:	d101      	bne.n	800360a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003606:	2302      	movs	r3, #2
 8003608:	e033      	b.n	8003672 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2224      	movs	r2, #36	@ 0x24
 8003616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 0201 	bic.w	r2, r2, #1
 8003628:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003638:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	021b      	lsls	r3, r3, #8
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	4313      	orrs	r3, r2
 8003642:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0201 	orr.w	r2, r2, #1
 800365a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2220      	movs	r2, #32
 8003660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800366c:	2300      	movs	r3, #0
 800366e:	e000      	b.n	8003672 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003670:	2302      	movs	r3, #2
  }
}
 8003672:	4618      	mov	r0, r3
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
	...

08003680 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003686:	2300      	movs	r3, #0
 8003688:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800368a:	4b23      	ldr	r3, [pc, #140]	@ (8003718 <HAL_PWREx_EnableOverDrive+0x98>)
 800368c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368e:	4a22      	ldr	r2, [pc, #136]	@ (8003718 <HAL_PWREx_EnableOverDrive+0x98>)
 8003690:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003694:	6413      	str	r3, [r2, #64]	@ 0x40
 8003696:	4b20      	ldr	r3, [pc, #128]	@ (8003718 <HAL_PWREx_EnableOverDrive+0x98>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800369e:	603b      	str	r3, [r7, #0]
 80036a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80036a2:	4b1e      	ldr	r3, [pc, #120]	@ (800371c <HAL_PWREx_EnableOverDrive+0x9c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a1d      	ldr	r2, [pc, #116]	@ (800371c <HAL_PWREx_EnableOverDrive+0x9c>)
 80036a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036ac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036ae:	f7fe fddd 	bl	800226c <HAL_GetTick>
 80036b2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036b4:	e009      	b.n	80036ca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036b6:	f7fe fdd9 	bl	800226c <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80036c4:	d901      	bls.n	80036ca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e022      	b.n	8003710 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036ca:	4b14      	ldr	r3, [pc, #80]	@ (800371c <HAL_PWREx_EnableOverDrive+0x9c>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036d6:	d1ee      	bne.n	80036b6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80036d8:	4b10      	ldr	r3, [pc, #64]	@ (800371c <HAL_PWREx_EnableOverDrive+0x9c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a0f      	ldr	r2, [pc, #60]	@ (800371c <HAL_PWREx_EnableOverDrive+0x9c>)
 80036de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036e4:	f7fe fdc2 	bl	800226c <HAL_GetTick>
 80036e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036ea:	e009      	b.n	8003700 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036ec:	f7fe fdbe 	bl	800226c <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80036fa:	d901      	bls.n	8003700 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e007      	b.n	8003710 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003700:	4b06      	ldr	r3, [pc, #24]	@ (800371c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003708:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800370c:	d1ee      	bne.n	80036ec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40023800 	.word	0x40023800
 800371c:	40007000 	.word	0x40007000

08003720 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003728:	2300      	movs	r3, #0
 800372a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e29b      	b.n	8003c6e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 8087 	beq.w	8003852 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003744:	4b96      	ldr	r3, [pc, #600]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 030c 	and.w	r3, r3, #12
 800374c:	2b04      	cmp	r3, #4
 800374e:	d00c      	beq.n	800376a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003750:	4b93      	ldr	r3, [pc, #588]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f003 030c 	and.w	r3, r3, #12
 8003758:	2b08      	cmp	r3, #8
 800375a:	d112      	bne.n	8003782 <HAL_RCC_OscConfig+0x62>
 800375c:	4b90      	ldr	r3, [pc, #576]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003764:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003768:	d10b      	bne.n	8003782 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800376a:	4b8d      	ldr	r3, [pc, #564]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d06c      	beq.n	8003850 <HAL_RCC_OscConfig+0x130>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d168      	bne.n	8003850 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e275      	b.n	8003c6e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800378a:	d106      	bne.n	800379a <HAL_RCC_OscConfig+0x7a>
 800378c:	4b84      	ldr	r3, [pc, #528]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a83      	ldr	r2, [pc, #524]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 8003792:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003796:	6013      	str	r3, [r2, #0]
 8003798:	e02e      	b.n	80037f8 <HAL_RCC_OscConfig+0xd8>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10c      	bne.n	80037bc <HAL_RCC_OscConfig+0x9c>
 80037a2:	4b7f      	ldr	r3, [pc, #508]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a7e      	ldr	r2, [pc, #504]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 80037a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	4b7c      	ldr	r3, [pc, #496]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a7b      	ldr	r2, [pc, #492]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 80037b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	e01d      	b.n	80037f8 <HAL_RCC_OscConfig+0xd8>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037c4:	d10c      	bne.n	80037e0 <HAL_RCC_OscConfig+0xc0>
 80037c6:	4b76      	ldr	r3, [pc, #472]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a75      	ldr	r2, [pc, #468]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 80037cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	4b73      	ldr	r3, [pc, #460]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a72      	ldr	r2, [pc, #456]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 80037d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	e00b      	b.n	80037f8 <HAL_RCC_OscConfig+0xd8>
 80037e0:	4b6f      	ldr	r3, [pc, #444]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a6e      	ldr	r2, [pc, #440]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 80037e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ea:	6013      	str	r3, [r2, #0]
 80037ec:	4b6c      	ldr	r3, [pc, #432]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a6b      	ldr	r2, [pc, #428]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 80037f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d013      	beq.n	8003828 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003800:	f7fe fd34 	bl	800226c <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003808:	f7fe fd30 	bl	800226c <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b64      	cmp	r3, #100	@ 0x64
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e229      	b.n	8003c6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381a:	4b61      	ldr	r3, [pc, #388]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0f0      	beq.n	8003808 <HAL_RCC_OscConfig+0xe8>
 8003826:	e014      	b.n	8003852 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003828:	f7fe fd20 	bl	800226c <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003830:	f7fe fd1c 	bl	800226c <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b64      	cmp	r3, #100	@ 0x64
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e215      	b.n	8003c6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003842:	4b57      	ldr	r3, [pc, #348]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f0      	bne.n	8003830 <HAL_RCC_OscConfig+0x110>
 800384e:	e000      	b.n	8003852 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d069      	beq.n	8003932 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800385e:	4b50      	ldr	r3, [pc, #320]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 030c 	and.w	r3, r3, #12
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00b      	beq.n	8003882 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800386a:	4b4d      	ldr	r3, [pc, #308]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 030c 	and.w	r3, r3, #12
 8003872:	2b08      	cmp	r3, #8
 8003874:	d11c      	bne.n	80038b0 <HAL_RCC_OscConfig+0x190>
 8003876:	4b4a      	ldr	r3, [pc, #296]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d116      	bne.n	80038b0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003882:	4b47      	ldr	r3, [pc, #284]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d005      	beq.n	800389a <HAL_RCC_OscConfig+0x17a>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d001      	beq.n	800389a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e1e9      	b.n	8003c6e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800389a:	4b41      	ldr	r3, [pc, #260]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	493d      	ldr	r1, [pc, #244]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ae:	e040      	b.n	8003932 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d023      	beq.n	8003900 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038b8:	4b39      	ldr	r3, [pc, #228]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a38      	ldr	r2, [pc, #224]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 80038be:	f043 0301 	orr.w	r3, r3, #1
 80038c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c4:	f7fe fcd2 	bl	800226c <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038cc:	f7fe fcce 	bl	800226c <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e1c7      	b.n	8003c6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038de:	4b30      	ldr	r3, [pc, #192]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0f0      	beq.n	80038cc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ea:	4b2d      	ldr	r3, [pc, #180]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	4929      	ldr	r1, [pc, #164]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	600b      	str	r3, [r1, #0]
 80038fe:	e018      	b.n	8003932 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003900:	4b27      	ldr	r3, [pc, #156]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a26      	ldr	r2, [pc, #152]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 8003906:	f023 0301 	bic.w	r3, r3, #1
 800390a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390c:	f7fe fcae 	bl	800226c <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003914:	f7fe fcaa 	bl	800226c <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e1a3      	b.n	8003c6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003926:	4b1e      	ldr	r3, [pc, #120]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1f0      	bne.n	8003914 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b00      	cmp	r3, #0
 800393c:	d038      	beq.n	80039b0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d019      	beq.n	800397a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003946:	4b16      	ldr	r3, [pc, #88]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 8003948:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800394a:	4a15      	ldr	r2, [pc, #84]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 800394c:	f043 0301 	orr.w	r3, r3, #1
 8003950:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003952:	f7fe fc8b 	bl	800226c <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800395a:	f7fe fc87 	bl	800226c <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e180      	b.n	8003c6e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800396c:	4b0c      	ldr	r3, [pc, #48]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 800396e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0f0      	beq.n	800395a <HAL_RCC_OscConfig+0x23a>
 8003978:	e01a      	b.n	80039b0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800397a:	4b09      	ldr	r3, [pc, #36]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 800397c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800397e:	4a08      	ldr	r2, [pc, #32]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 8003980:	f023 0301 	bic.w	r3, r3, #1
 8003984:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003986:	f7fe fc71 	bl	800226c <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800398c:	e00a      	b.n	80039a4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800398e:	f7fe fc6d 	bl	800226c <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d903      	bls.n	80039a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e166      	b.n	8003c6e <HAL_RCC_OscConfig+0x54e>
 80039a0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039a4:	4b92      	ldr	r3, [pc, #584]	@ (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 80039a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1ee      	bne.n	800398e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 80a4 	beq.w	8003b06 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039be:	4b8c      	ldr	r3, [pc, #560]	@ (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 80039c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10d      	bne.n	80039e6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ca:	4b89      	ldr	r3, [pc, #548]	@ (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 80039cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ce:	4a88      	ldr	r2, [pc, #544]	@ (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 80039d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80039d6:	4b86      	ldr	r3, [pc, #536]	@ (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 80039d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039de:	60bb      	str	r3, [r7, #8]
 80039e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039e2:	2301      	movs	r3, #1
 80039e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039e6:	4b83      	ldr	r3, [pc, #524]	@ (8003bf4 <HAL_RCC_OscConfig+0x4d4>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d118      	bne.n	8003a24 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80039f2:	4b80      	ldr	r3, [pc, #512]	@ (8003bf4 <HAL_RCC_OscConfig+0x4d4>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a7f      	ldr	r2, [pc, #508]	@ (8003bf4 <HAL_RCC_OscConfig+0x4d4>)
 80039f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039fe:	f7fe fc35 	bl	800226c <HAL_GetTick>
 8003a02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a04:	e008      	b.n	8003a18 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a06:	f7fe fc31 	bl	800226c <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b64      	cmp	r3, #100	@ 0x64
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e12a      	b.n	8003c6e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a18:	4b76      	ldr	r3, [pc, #472]	@ (8003bf4 <HAL_RCC_OscConfig+0x4d4>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0f0      	beq.n	8003a06 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d106      	bne.n	8003a3a <HAL_RCC_OscConfig+0x31a>
 8003a2c:	4b70      	ldr	r3, [pc, #448]	@ (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a30:	4a6f      	ldr	r2, [pc, #444]	@ (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003a32:	f043 0301 	orr.w	r3, r3, #1
 8003a36:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a38:	e02d      	b.n	8003a96 <HAL_RCC_OscConfig+0x376>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10c      	bne.n	8003a5c <HAL_RCC_OscConfig+0x33c>
 8003a42:	4b6b      	ldr	r3, [pc, #428]	@ (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a46:	4a6a      	ldr	r2, [pc, #424]	@ (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003a48:	f023 0301 	bic.w	r3, r3, #1
 8003a4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a4e:	4b68      	ldr	r3, [pc, #416]	@ (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a52:	4a67      	ldr	r2, [pc, #412]	@ (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003a54:	f023 0304 	bic.w	r3, r3, #4
 8003a58:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a5a:	e01c      	b.n	8003a96 <HAL_RCC_OscConfig+0x376>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	2b05      	cmp	r3, #5
 8003a62:	d10c      	bne.n	8003a7e <HAL_RCC_OscConfig+0x35e>
 8003a64:	4b62      	ldr	r3, [pc, #392]	@ (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a68:	4a61      	ldr	r2, [pc, #388]	@ (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003a6a:	f043 0304 	orr.w	r3, r3, #4
 8003a6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a70:	4b5f      	ldr	r3, [pc, #380]	@ (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a74:	4a5e      	ldr	r2, [pc, #376]	@ (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003a76:	f043 0301 	orr.w	r3, r3, #1
 8003a7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a7c:	e00b      	b.n	8003a96 <HAL_RCC_OscConfig+0x376>
 8003a7e:	4b5c      	ldr	r3, [pc, #368]	@ (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a82:	4a5b      	ldr	r2, [pc, #364]	@ (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003a84:	f023 0301 	bic.w	r3, r3, #1
 8003a88:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a8a:	4b59      	ldr	r3, [pc, #356]	@ (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a8e:	4a58      	ldr	r2, [pc, #352]	@ (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003a90:	f023 0304 	bic.w	r3, r3, #4
 8003a94:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d015      	beq.n	8003aca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a9e:	f7fe fbe5 	bl	800226c <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa4:	e00a      	b.n	8003abc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa6:	f7fe fbe1 	bl	800226c <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e0d8      	b.n	8003c6e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003abc:	4b4c      	ldr	r3, [pc, #304]	@ (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0ee      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x386>
 8003ac8:	e014      	b.n	8003af4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aca:	f7fe fbcf 	bl	800226c <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ad0:	e00a      	b.n	8003ae8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad2:	f7fe fbcb 	bl	800226c <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e0c2      	b.n	8003c6e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ae8:	4b41      	ldr	r3, [pc, #260]	@ (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1ee      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003af4:	7dfb      	ldrb	r3, [r7, #23]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d105      	bne.n	8003b06 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003afa:	4b3d      	ldr	r3, [pc, #244]	@ (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afe:	4a3c      	ldr	r2, [pc, #240]	@ (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003b00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b04:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f000 80ae 	beq.w	8003c6c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b10:	4b37      	ldr	r3, [pc, #220]	@ (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 030c 	and.w	r3, r3, #12
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d06d      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d14b      	bne.n	8003bbc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b24:	4b32      	ldr	r3, [pc, #200]	@ (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a31      	ldr	r2, [pc, #196]	@ (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003b2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b30:	f7fe fb9c 	bl	800226c <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b38:	f7fe fb98 	bl	800226c <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e091      	b.n	8003c6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b4a:	4b29      	ldr	r3, [pc, #164]	@ (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1f0      	bne.n	8003b38 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	69da      	ldr	r2, [r3, #28]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b64:	019b      	lsls	r3, r3, #6
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b6c:	085b      	lsrs	r3, r3, #1
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	041b      	lsls	r3, r3, #16
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b78:	061b      	lsls	r3, r3, #24
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b80:	071b      	lsls	r3, r3, #28
 8003b82:	491b      	ldr	r1, [pc, #108]	@ (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b88:	4b19      	ldr	r3, [pc, #100]	@ (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a18      	ldr	r2, [pc, #96]	@ (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003b8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b94:	f7fe fb6a 	bl	800226c <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b9c:	f7fe fb66 	bl	800226c <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e05f      	b.n	8003c6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bae:	4b10      	ldr	r3, [pc, #64]	@ (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0f0      	beq.n	8003b9c <HAL_RCC_OscConfig+0x47c>
 8003bba:	e057      	b.n	8003c6c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a0b      	ldr	r2, [pc, #44]	@ (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003bc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc8:	f7fe fb50 	bl	800226c <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd0:	f7fe fb4c 	bl	800226c <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e045      	b.n	8003c6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be2:	4b03      	ldr	r3, [pc, #12]	@ (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1f0      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x4b0>
 8003bee:	e03d      	b.n	8003c6c <HAL_RCC_OscConfig+0x54c>
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8003c78 <HAL_RCC_OscConfig+0x558>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d030      	beq.n	8003c68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d129      	bne.n	8003c68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d122      	bne.n	8003c68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c28:	4013      	ands	r3, r2
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c2e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d119      	bne.n	8003c68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c3e:	085b      	lsrs	r3, r3, #1
 8003c40:	3b01      	subs	r3, #1
 8003c42:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d10f      	bne.n	8003c68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c52:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d107      	bne.n	8003c68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c62:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d001      	beq.n	8003c6c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e000      	b.n	8003c6e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40023800 	.word	0x40023800

08003c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003c86:	2300      	movs	r3, #0
 8003c88:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e0d0      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c94:	4b6a      	ldr	r3, [pc, #424]	@ (8003e40 <HAL_RCC_ClockConfig+0x1c4>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 030f 	and.w	r3, r3, #15
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d910      	bls.n	8003cc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca2:	4b67      	ldr	r3, [pc, #412]	@ (8003e40 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f023 020f 	bic.w	r2, r3, #15
 8003caa:	4965      	ldr	r1, [pc, #404]	@ (8003e40 <HAL_RCC_ClockConfig+0x1c4>)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb2:	4b63      	ldr	r3, [pc, #396]	@ (8003e40 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 030f 	and.w	r3, r3, #15
 8003cba:	683a      	ldr	r2, [r7, #0]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d001      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e0b8      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d020      	beq.n	8003d12 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cdc:	4b59      	ldr	r3, [pc, #356]	@ (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	4a58      	ldr	r2, [pc, #352]	@ (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003ce2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ce6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0308 	and.w	r3, r3, #8
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cf4:	4b53      	ldr	r3, [pc, #332]	@ (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	4a52      	ldr	r2, [pc, #328]	@ (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003cfa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003cfe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d00:	4b50      	ldr	r3, [pc, #320]	@ (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	494d      	ldr	r1, [pc, #308]	@ (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d040      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d107      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d26:	4b47      	ldr	r3, [pc, #284]	@ (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d115      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e07f      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d107      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d3e:	4b41      	ldr	r3, [pc, #260]	@ (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d109      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e073      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d4e:	4b3d      	ldr	r3, [pc, #244]	@ (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e06b      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d5e:	4b39      	ldr	r3, [pc, #228]	@ (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f023 0203 	bic.w	r2, r3, #3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	4936      	ldr	r1, [pc, #216]	@ (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d70:	f7fe fa7c 	bl	800226c <HAL_GetTick>
 8003d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d76:	e00a      	b.n	8003d8e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d78:	f7fe fa78 	bl	800226c <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e053      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8e:	4b2d      	ldr	r3, [pc, #180]	@ (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f003 020c 	and.w	r2, r3, #12
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d1eb      	bne.n	8003d78 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003da0:	4b27      	ldr	r3, [pc, #156]	@ (8003e40 <HAL_RCC_ClockConfig+0x1c4>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 030f 	and.w	r3, r3, #15
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d210      	bcs.n	8003dd0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dae:	4b24      	ldr	r3, [pc, #144]	@ (8003e40 <HAL_RCC_ClockConfig+0x1c4>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f023 020f 	bic.w	r2, r3, #15
 8003db6:	4922      	ldr	r1, [pc, #136]	@ (8003e40 <HAL_RCC_ClockConfig+0x1c4>)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dbe:	4b20      	ldr	r3, [pc, #128]	@ (8003e40 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d001      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e032      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d008      	beq.n	8003dee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ddc:	4b19      	ldr	r3, [pc, #100]	@ (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	4916      	ldr	r1, [pc, #88]	@ (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d009      	beq.n	8003e0e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003dfa:	4b12      	ldr	r3, [pc, #72]	@ (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	490e      	ldr	r1, [pc, #56]	@ (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e0e:	f000 f821 	bl	8003e54 <HAL_RCC_GetSysClockFreq>
 8003e12:	4602      	mov	r2, r0
 8003e14:	4b0b      	ldr	r3, [pc, #44]	@ (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	091b      	lsrs	r3, r3, #4
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	490a      	ldr	r1, [pc, #40]	@ (8003e48 <HAL_RCC_ClockConfig+0x1cc>)
 8003e20:	5ccb      	ldrb	r3, [r1, r3]
 8003e22:	fa22 f303 	lsr.w	r3, r2, r3
 8003e26:	4a09      	ldr	r2, [pc, #36]	@ (8003e4c <HAL_RCC_ClockConfig+0x1d0>)
 8003e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e2a:	4b09      	ldr	r3, [pc, #36]	@ (8003e50 <HAL_RCC_ClockConfig+0x1d4>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fe f9d8 	bl	80021e4 <HAL_InitTick>

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	40023c00 	.word	0x40023c00
 8003e44:	40023800 	.word	0x40023800
 8003e48:	08007ac0 	.word	0x08007ac0
 8003e4c:	20000024 	.word	0x20000024
 8003e50:	20000028 	.word	0x20000028

08003e54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e58:	b090      	sub	sp, #64	@ 0x40
 8003e5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e60:	2300      	movs	r3, #0
 8003e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e64:	2300      	movs	r3, #0
 8003e66:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e6c:	4b59      	ldr	r3, [pc, #356]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 030c 	and.w	r3, r3, #12
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d00d      	beq.n	8003e94 <HAL_RCC_GetSysClockFreq+0x40>
 8003e78:	2b08      	cmp	r3, #8
 8003e7a:	f200 80a1 	bhi.w	8003fc0 <HAL_RCC_GetSysClockFreq+0x16c>
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d002      	beq.n	8003e88 <HAL_RCC_GetSysClockFreq+0x34>
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	d003      	beq.n	8003e8e <HAL_RCC_GetSysClockFreq+0x3a>
 8003e86:	e09b      	b.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e88:	4b53      	ldr	r3, [pc, #332]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e8c:	e09b      	b.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e8e:	4b53      	ldr	r3, [pc, #332]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x188>)
 8003e90:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e92:	e098      	b.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e94:	4b4f      	ldr	r3, [pc, #316]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e9c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003e9e:	4b4d      	ldr	r3, [pc, #308]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d028      	beq.n	8003efc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eaa:	4b4a      	ldr	r3, [pc, #296]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	099b      	lsrs	r3, r3, #6
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	623b      	str	r3, [r7, #32]
 8003eb4:	627a      	str	r2, [r7, #36]	@ 0x24
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	4b47      	ldr	r3, [pc, #284]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x188>)
 8003ec0:	fb03 f201 	mul.w	r2, r3, r1
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	fb00 f303 	mul.w	r3, r0, r3
 8003eca:	4413      	add	r3, r2
 8003ecc:	4a43      	ldr	r2, [pc, #268]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x188>)
 8003ece:	fba0 1202 	umull	r1, r2, r0, r2
 8003ed2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ed4:	460a      	mov	r2, r1
 8003ed6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003ed8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003eda:	4413      	add	r3, r2
 8003edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	61bb      	str	r3, [r7, #24]
 8003ee4:	61fa      	str	r2, [r7, #28]
 8003ee6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003eea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003eee:	f7fc f9a3 	bl	8000238 <__aeabi_uldivmod>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003efa:	e053      	b.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003efc:	4b35      	ldr	r3, [pc, #212]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	099b      	lsrs	r3, r3, #6
 8003f02:	2200      	movs	r2, #0
 8003f04:	613b      	str	r3, [r7, #16]
 8003f06:	617a      	str	r2, [r7, #20]
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003f0e:	f04f 0b00 	mov.w	fp, #0
 8003f12:	4652      	mov	r2, sl
 8003f14:	465b      	mov	r3, fp
 8003f16:	f04f 0000 	mov.w	r0, #0
 8003f1a:	f04f 0100 	mov.w	r1, #0
 8003f1e:	0159      	lsls	r1, r3, #5
 8003f20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f24:	0150      	lsls	r0, r2, #5
 8003f26:	4602      	mov	r2, r0
 8003f28:	460b      	mov	r3, r1
 8003f2a:	ebb2 080a 	subs.w	r8, r2, sl
 8003f2e:	eb63 090b 	sbc.w	r9, r3, fp
 8003f32:	f04f 0200 	mov.w	r2, #0
 8003f36:	f04f 0300 	mov.w	r3, #0
 8003f3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003f3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003f42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003f46:	ebb2 0408 	subs.w	r4, r2, r8
 8003f4a:	eb63 0509 	sbc.w	r5, r3, r9
 8003f4e:	f04f 0200 	mov.w	r2, #0
 8003f52:	f04f 0300 	mov.w	r3, #0
 8003f56:	00eb      	lsls	r3, r5, #3
 8003f58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f5c:	00e2      	lsls	r2, r4, #3
 8003f5e:	4614      	mov	r4, r2
 8003f60:	461d      	mov	r5, r3
 8003f62:	eb14 030a 	adds.w	r3, r4, sl
 8003f66:	603b      	str	r3, [r7, #0]
 8003f68:	eb45 030b 	adc.w	r3, r5, fp
 8003f6c:	607b      	str	r3, [r7, #4]
 8003f6e:	f04f 0200 	mov.w	r2, #0
 8003f72:	f04f 0300 	mov.w	r3, #0
 8003f76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f7a:	4629      	mov	r1, r5
 8003f7c:	028b      	lsls	r3, r1, #10
 8003f7e:	4621      	mov	r1, r4
 8003f80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f84:	4621      	mov	r1, r4
 8003f86:	028a      	lsls	r2, r1, #10
 8003f88:	4610      	mov	r0, r2
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f8e:	2200      	movs	r2, #0
 8003f90:	60bb      	str	r3, [r7, #8]
 8003f92:	60fa      	str	r2, [r7, #12]
 8003f94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f98:	f7fc f94e 	bl	8000238 <__aeabi_uldivmod>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	0c1b      	lsrs	r3, r3, #16
 8003faa:	f003 0303 	and.w	r3, r3, #3
 8003fae:	3301      	adds	r3, #1
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003fb4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fbc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003fbe:	e002      	b.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fc0:	4b05      	ldr	r3, [pc, #20]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3740      	adds	r7, #64	@ 0x40
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	00f42400 	.word	0x00f42400
 8003fdc:	017d7840 	.word	0x017d7840

08003fe0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fe4:	4b03      	ldr	r3, [pc, #12]	@ (8003ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	20000024 	.word	0x20000024

08003ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ffc:	f7ff fff0 	bl	8003fe0 <HAL_RCC_GetHCLKFreq>
 8004000:	4602      	mov	r2, r0
 8004002:	4b05      	ldr	r3, [pc, #20]	@ (8004018 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	0a9b      	lsrs	r3, r3, #10
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	4903      	ldr	r1, [pc, #12]	@ (800401c <HAL_RCC_GetPCLK1Freq+0x24>)
 800400e:	5ccb      	ldrb	r3, [r1, r3]
 8004010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004014:	4618      	mov	r0, r3
 8004016:	bd80      	pop	{r7, pc}
 8004018:	40023800 	.word	0x40023800
 800401c:	08007ad0 	.word	0x08007ad0

08004020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004024:	f7ff ffdc 	bl	8003fe0 <HAL_RCC_GetHCLKFreq>
 8004028:	4602      	mov	r2, r0
 800402a:	4b05      	ldr	r3, [pc, #20]	@ (8004040 <HAL_RCC_GetPCLK2Freq+0x20>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	0b5b      	lsrs	r3, r3, #13
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	4903      	ldr	r1, [pc, #12]	@ (8004044 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004036:	5ccb      	ldrb	r3, [r1, r3]
 8004038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800403c:	4618      	mov	r0, r3
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40023800 	.word	0x40023800
 8004044:	08007ad0 	.word	0x08007ad0

08004048 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b088      	sub	sp, #32
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004050:	2300      	movs	r3, #0
 8004052:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004054:	2300      	movs	r3, #0
 8004056:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004058:	2300      	movs	r3, #0
 800405a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800405c:	2300      	movs	r3, #0
 800405e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004060:	2300      	movs	r3, #0
 8004062:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d012      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004070:	4b69      	ldr	r3, [pc, #420]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	4a68      	ldr	r2, [pc, #416]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004076:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800407a:	6093      	str	r3, [r2, #8]
 800407c:	4b66      	ldr	r3, [pc, #408]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004084:	4964      	ldr	r1, [pc, #400]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004086:	4313      	orrs	r3, r2
 8004088:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004092:	2301      	movs	r3, #1
 8004094:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d017      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040a2:	4b5d      	ldr	r3, [pc, #372]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040a8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b0:	4959      	ldr	r1, [pc, #356]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040c0:	d101      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80040c2:	2301      	movs	r3, #1
 80040c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80040ce:	2301      	movs	r3, #1
 80040d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d017      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80040de:	4b4e      	ldr	r3, [pc, #312]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040e4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ec:	494a      	ldr	r1, [pc, #296]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040fc:	d101      	bne.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80040fe:	2301      	movs	r3, #1
 8004100:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800410a:	2301      	movs	r3, #1
 800410c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800411a:	2301      	movs	r3, #1
 800411c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0320 	and.w	r3, r3, #32
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 808b 	beq.w	8004242 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800412c:	4b3a      	ldr	r3, [pc, #232]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800412e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004130:	4a39      	ldr	r2, [pc, #228]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004132:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004136:	6413      	str	r3, [r2, #64]	@ 0x40
 8004138:	4b37      	ldr	r3, [pc, #220]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800413a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004140:	60bb      	str	r3, [r7, #8]
 8004142:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004144:	4b35      	ldr	r3, [pc, #212]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a34      	ldr	r2, [pc, #208]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800414a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800414e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004150:	f7fe f88c 	bl	800226c <HAL_GetTick>
 8004154:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004156:	e008      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004158:	f7fe f888 	bl	800226c <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b64      	cmp	r3, #100	@ 0x64
 8004164:	d901      	bls.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e38f      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800416a:	4b2c      	ldr	r3, [pc, #176]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0f0      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004176:	4b28      	ldr	r3, [pc, #160]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800417a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800417e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d035      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	429a      	cmp	r2, r3
 8004192:	d02e      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004194:	4b20      	ldr	r3, [pc, #128]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004198:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800419c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800419e:	4b1e      	ldr	r3, [pc, #120]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041a2:	4a1d      	ldr	r2, [pc, #116]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041a8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ae:	4a1a      	ldr	r2, [pc, #104]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041b4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80041b6:	4a18      	ldr	r2, [pc, #96]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80041bc:	4b16      	ldr	r3, [pc, #88]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d114      	bne.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c8:	f7fe f850 	bl	800226c <HAL_GetTick>
 80041cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ce:	e00a      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041d0:	f7fe f84c 	bl	800226c <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041de:	4293      	cmp	r3, r2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e351      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0ee      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041fe:	d111      	bne.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004200:	4b05      	ldr	r3, [pc, #20]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800420c:	4b04      	ldr	r3, [pc, #16]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800420e:	400b      	ands	r3, r1
 8004210:	4901      	ldr	r1, [pc, #4]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004212:	4313      	orrs	r3, r2
 8004214:	608b      	str	r3, [r1, #8]
 8004216:	e00b      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004218:	40023800 	.word	0x40023800
 800421c:	40007000 	.word	0x40007000
 8004220:	0ffffcff 	.word	0x0ffffcff
 8004224:	4bac      	ldr	r3, [pc, #688]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	4aab      	ldr	r2, [pc, #684]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800422a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800422e:	6093      	str	r3, [r2, #8]
 8004230:	4ba9      	ldr	r3, [pc, #676]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004232:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800423c:	49a6      	ldr	r1, [pc, #664]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800423e:	4313      	orrs	r3, r2
 8004240:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0310 	and.w	r3, r3, #16
 800424a:	2b00      	cmp	r3, #0
 800424c:	d010      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800424e:	4ba2      	ldr	r3, [pc, #648]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004250:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004254:	4aa0      	ldr	r2, [pc, #640]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004256:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800425a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800425e:	4b9e      	ldr	r3, [pc, #632]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004260:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004268:	499b      	ldr	r1, [pc, #620]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800426a:	4313      	orrs	r3, r2
 800426c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00a      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800427c:	4b96      	ldr	r3, [pc, #600]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800427e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004282:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800428a:	4993      	ldr	r1, [pc, #588]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800428c:	4313      	orrs	r3, r2
 800428e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00a      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800429e:	4b8e      	ldr	r3, [pc, #568]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042ac:	498a      	ldr	r1, [pc, #552]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042c0:	4b85      	ldr	r3, [pc, #532]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042ce:	4982      	ldr	r1, [pc, #520]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00a      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042e2:	4b7d      	ldr	r3, [pc, #500]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042e8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f0:	4979      	ldr	r1, [pc, #484]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00a      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004304:	4b74      	ldr	r3, [pc, #464]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800430a:	f023 0203 	bic.w	r2, r3, #3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004312:	4971      	ldr	r1, [pc, #452]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004314:	4313      	orrs	r3, r2
 8004316:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00a      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004326:	4b6c      	ldr	r3, [pc, #432]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800432c:	f023 020c 	bic.w	r2, r3, #12
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004334:	4968      	ldr	r1, [pc, #416]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004336:	4313      	orrs	r3, r2
 8004338:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00a      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004348:	4b63      	ldr	r3, [pc, #396]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800434a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800434e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004356:	4960      	ldr	r1, [pc, #384]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004358:	4313      	orrs	r3, r2
 800435a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00a      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800436a:	4b5b      	ldr	r3, [pc, #364]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800436c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004370:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004378:	4957      	ldr	r1, [pc, #348]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800437a:	4313      	orrs	r3, r2
 800437c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00a      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800438c:	4b52      	ldr	r3, [pc, #328]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800438e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004392:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800439a:	494f      	ldr	r1, [pc, #316]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800439c:	4313      	orrs	r3, r2
 800439e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00a      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80043ae:	4b4a      	ldr	r3, [pc, #296]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043b4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043bc:	4946      	ldr	r1, [pc, #280]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00a      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80043d0:	4b41      	ldr	r3, [pc, #260]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043d6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043de:	493e      	ldr	r1, [pc, #248]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00a      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80043f2:	4b39      	ldr	r3, [pc, #228]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043f8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004400:	4935      	ldr	r1, [pc, #212]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004402:	4313      	orrs	r3, r2
 8004404:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00a      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004414:	4b30      	ldr	r3, [pc, #192]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800441a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004422:	492d      	ldr	r1, [pc, #180]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004424:	4313      	orrs	r3, r2
 8004426:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d011      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004436:	4b28      	ldr	r3, [pc, #160]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800443c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004444:	4924      	ldr	r1, [pc, #144]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004446:	4313      	orrs	r3, r2
 8004448:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004450:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004454:	d101      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004456:	2301      	movs	r3, #1
 8004458:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0308 	and.w	r3, r3, #8
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004466:	2301      	movs	r3, #1
 8004468:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00a      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004476:	4b18      	ldr	r3, [pc, #96]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800447c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004484:	4914      	ldr	r1, [pc, #80]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004486:	4313      	orrs	r3, r2
 8004488:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00b      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004498:	4b0f      	ldr	r3, [pc, #60]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800449a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800449e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044a8:	490b      	ldr	r1, [pc, #44]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00f      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80044bc:	4b06      	ldr	r3, [pc, #24]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044c2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044cc:	4902      	ldr	r1, [pc, #8]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80044d4:	e002      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x494>
 80044d6:	bf00      	nop
 80044d8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00b      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044e8:	4b8a      	ldr	r3, [pc, #552]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044ee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044f8:	4986      	ldr	r1, [pc, #536]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00b      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800450c:	4b81      	ldr	r3, [pc, #516]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800450e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004512:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800451c:	497d      	ldr	r1, [pc, #500]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d006      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004532:	2b00      	cmp	r3, #0
 8004534:	f000 80d6 	beq.w	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004538:	4b76      	ldr	r3, [pc, #472]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a75      	ldr	r2, [pc, #468]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800453e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004542:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004544:	f7fd fe92 	bl	800226c <HAL_GetTick>
 8004548:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800454a:	e008      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800454c:	f7fd fe8e 	bl	800226c <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b64      	cmp	r3, #100	@ 0x64
 8004558:	d901      	bls.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e195      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800455e:	4b6d      	ldr	r3, [pc, #436]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1f0      	bne.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d021      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800457a:	2b00      	cmp	r3, #0
 800457c:	d11d      	bne.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800457e:	4b65      	ldr	r3, [pc, #404]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004580:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004584:	0c1b      	lsrs	r3, r3, #16
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800458c:	4b61      	ldr	r3, [pc, #388]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800458e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004592:	0e1b      	lsrs	r3, r3, #24
 8004594:	f003 030f 	and.w	r3, r3, #15
 8004598:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	019a      	lsls	r2, r3, #6
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	041b      	lsls	r3, r3, #16
 80045a4:	431a      	orrs	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	061b      	lsls	r3, r3, #24
 80045aa:	431a      	orrs	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	071b      	lsls	r3, r3, #28
 80045b2:	4958      	ldr	r1, [pc, #352]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d004      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045ce:	d00a      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d02e      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045e4:	d129      	bne.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80045e6:	4b4b      	ldr	r3, [pc, #300]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045ec:	0c1b      	lsrs	r3, r3, #16
 80045ee:	f003 0303 	and.w	r3, r3, #3
 80045f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045f4:	4b47      	ldr	r3, [pc, #284]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045fa:	0f1b      	lsrs	r3, r3, #28
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	019a      	lsls	r2, r3, #6
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	041b      	lsls	r3, r3, #16
 800460c:	431a      	orrs	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	061b      	lsls	r3, r3, #24
 8004614:	431a      	orrs	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	071b      	lsls	r3, r3, #28
 800461a:	493e      	ldr	r1, [pc, #248]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800461c:	4313      	orrs	r3, r2
 800461e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004622:	4b3c      	ldr	r3, [pc, #240]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004624:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004628:	f023 021f 	bic.w	r2, r3, #31
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004630:	3b01      	subs	r3, #1
 8004632:	4938      	ldr	r1, [pc, #224]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d01d      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004646:	4b33      	ldr	r3, [pc, #204]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004648:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800464c:	0e1b      	lsrs	r3, r3, #24
 800464e:	f003 030f 	and.w	r3, r3, #15
 8004652:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004654:	4b2f      	ldr	r3, [pc, #188]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004656:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800465a:	0f1b      	lsrs	r3, r3, #28
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	019a      	lsls	r2, r3, #6
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	041b      	lsls	r3, r3, #16
 800466e:	431a      	orrs	r2, r3
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	061b      	lsls	r3, r3, #24
 8004674:	431a      	orrs	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	071b      	lsls	r3, r3, #28
 800467a:	4926      	ldr	r1, [pc, #152]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800467c:	4313      	orrs	r3, r2
 800467e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d011      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	019a      	lsls	r2, r3, #6
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	041b      	lsls	r3, r3, #16
 800469a:	431a      	orrs	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	061b      	lsls	r3, r3, #24
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	071b      	lsls	r3, r3, #28
 80046aa:	491a      	ldr	r1, [pc, #104]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80046b2:	4b18      	ldr	r3, [pc, #96]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a17      	ldr	r2, [pc, #92]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80046bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046be:	f7fd fdd5 	bl	800226c <HAL_GetTick>
 80046c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046c4:	e008      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046c6:	f7fd fdd1 	bl	800226c <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b64      	cmp	r3, #100	@ 0x64
 80046d2:	d901      	bls.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e0d8      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0f0      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	f040 80ce 	bne.w	8004888 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80046ec:	4b09      	ldr	r3, [pc, #36]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a08      	ldr	r2, [pc, #32]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046f8:	f7fd fdb8 	bl	800226c <HAL_GetTick>
 80046fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80046fe:	e00b      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004700:	f7fd fdb4 	bl	800226c <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b64      	cmp	r3, #100	@ 0x64
 800470c:	d904      	bls.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e0bb      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004712:	bf00      	nop
 8004714:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004718:	4b5e      	ldr	r3, [pc, #376]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004720:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004724:	d0ec      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004736:	2b00      	cmp	r3, #0
 8004738:	d009      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004742:	2b00      	cmp	r3, #0
 8004744:	d02e      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474a:	2b00      	cmp	r3, #0
 800474c:	d12a      	bne.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800474e:	4b51      	ldr	r3, [pc, #324]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004754:	0c1b      	lsrs	r3, r3, #16
 8004756:	f003 0303 	and.w	r3, r3, #3
 800475a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800475c:	4b4d      	ldr	r3, [pc, #308]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800475e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004762:	0f1b      	lsrs	r3, r3, #28
 8004764:	f003 0307 	and.w	r3, r3, #7
 8004768:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	019a      	lsls	r2, r3, #6
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	041b      	lsls	r3, r3, #16
 8004774:	431a      	orrs	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	061b      	lsls	r3, r3, #24
 800477c:	431a      	orrs	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	071b      	lsls	r3, r3, #28
 8004782:	4944      	ldr	r1, [pc, #272]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004784:	4313      	orrs	r3, r2
 8004786:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800478a:	4b42      	ldr	r3, [pc, #264]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800478c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004790:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004798:	3b01      	subs	r3, #1
 800479a:	021b      	lsls	r3, r3, #8
 800479c:	493d      	ldr	r1, [pc, #244]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d022      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047b8:	d11d      	bne.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80047ba:	4b36      	ldr	r3, [pc, #216]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c0:	0e1b      	lsrs	r3, r3, #24
 80047c2:	f003 030f 	and.w	r3, r3, #15
 80047c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80047c8:	4b32      	ldr	r3, [pc, #200]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ce:	0f1b      	lsrs	r3, r3, #28
 80047d0:	f003 0307 	and.w	r3, r3, #7
 80047d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	019a      	lsls	r2, r3, #6
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	041b      	lsls	r3, r3, #16
 80047e2:	431a      	orrs	r2, r3
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	061b      	lsls	r3, r3, #24
 80047e8:	431a      	orrs	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	071b      	lsls	r3, r3, #28
 80047ee:	4929      	ldr	r1, [pc, #164]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0308 	and.w	r3, r3, #8
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d028      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004802:	4b24      	ldr	r3, [pc, #144]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004808:	0e1b      	lsrs	r3, r3, #24
 800480a:	f003 030f 	and.w	r3, r3, #15
 800480e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004810:	4b20      	ldr	r3, [pc, #128]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004816:	0c1b      	lsrs	r3, r3, #16
 8004818:	f003 0303 	and.w	r3, r3, #3
 800481c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	019a      	lsls	r2, r3, #6
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	041b      	lsls	r3, r3, #16
 8004828:	431a      	orrs	r2, r3
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	061b      	lsls	r3, r3, #24
 800482e:	431a      	orrs	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	071b      	lsls	r3, r3, #28
 8004836:	4917      	ldr	r1, [pc, #92]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800483e:	4b15      	ldr	r3, [pc, #84]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004840:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004844:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800484c:	4911      	ldr	r1, [pc, #68]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800484e:	4313      	orrs	r3, r2
 8004850:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004854:	4b0f      	ldr	r3, [pc, #60]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a0e      	ldr	r2, [pc, #56]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800485a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800485e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004860:	f7fd fd04 	bl	800226c <HAL_GetTick>
 8004864:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004866:	e008      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004868:	f7fd fd00 	bl	800226c <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b64      	cmp	r3, #100	@ 0x64
 8004874:	d901      	bls.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e007      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800487a:	4b06      	ldr	r3, [pc, #24]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004882:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004886:	d1ef      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3720      	adds	r7, #32
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	40023800 	.word	0x40023800

08004898 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e049      	b.n	800493e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d106      	bne.n	80048c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7fd f9f6 	bl	8001cb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3304      	adds	r3, #4
 80048d4:	4619      	mov	r1, r3
 80048d6:	4610      	mov	r0, r2
 80048d8:	f000 fe9a 	bl	8005610 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
	...

08004948 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b01      	cmp	r3, #1
 800495a:	d001      	beq.n	8004960 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e054      	b.n	8004a0a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68da      	ldr	r2, [r3, #12]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0201 	orr.w	r2, r2, #1
 8004976:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a26      	ldr	r2, [pc, #152]	@ (8004a18 <HAL_TIM_Base_Start_IT+0xd0>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d022      	beq.n	80049c8 <HAL_TIM_Base_Start_IT+0x80>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800498a:	d01d      	beq.n	80049c8 <HAL_TIM_Base_Start_IT+0x80>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a22      	ldr	r2, [pc, #136]	@ (8004a1c <HAL_TIM_Base_Start_IT+0xd4>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d018      	beq.n	80049c8 <HAL_TIM_Base_Start_IT+0x80>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a21      	ldr	r2, [pc, #132]	@ (8004a20 <HAL_TIM_Base_Start_IT+0xd8>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d013      	beq.n	80049c8 <HAL_TIM_Base_Start_IT+0x80>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a1f      	ldr	r2, [pc, #124]	@ (8004a24 <HAL_TIM_Base_Start_IT+0xdc>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d00e      	beq.n	80049c8 <HAL_TIM_Base_Start_IT+0x80>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a1e      	ldr	r2, [pc, #120]	@ (8004a28 <HAL_TIM_Base_Start_IT+0xe0>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d009      	beq.n	80049c8 <HAL_TIM_Base_Start_IT+0x80>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a1c      	ldr	r2, [pc, #112]	@ (8004a2c <HAL_TIM_Base_Start_IT+0xe4>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d004      	beq.n	80049c8 <HAL_TIM_Base_Start_IT+0x80>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a1b      	ldr	r2, [pc, #108]	@ (8004a30 <HAL_TIM_Base_Start_IT+0xe8>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d115      	bne.n	80049f4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689a      	ldr	r2, [r3, #8]
 80049ce:	4b19      	ldr	r3, [pc, #100]	@ (8004a34 <HAL_TIM_Base_Start_IT+0xec>)
 80049d0:	4013      	ands	r3, r2
 80049d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2b06      	cmp	r3, #6
 80049d8:	d015      	beq.n	8004a06 <HAL_TIM_Base_Start_IT+0xbe>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049e0:	d011      	beq.n	8004a06 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f042 0201 	orr.w	r2, r2, #1
 80049f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f2:	e008      	b.n	8004a06 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0201 	orr.w	r2, r2, #1
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	e000      	b.n	8004a08 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	40010000 	.word	0x40010000
 8004a1c:	40000400 	.word	0x40000400
 8004a20:	40000800 	.word	0x40000800
 8004a24:	40000c00 	.word	0x40000c00
 8004a28:	40010400 	.word	0x40010400
 8004a2c:	40014000 	.word	0x40014000
 8004a30:	40001800 	.word	0x40001800
 8004a34:	00010007 	.word	0x00010007

08004a38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e049      	b.n	8004ade <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d106      	bne.n	8004a64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7fd fa44 	bl	8001eec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	3304      	adds	r3, #4
 8004a74:	4619      	mov	r1, r3
 8004a76:	4610      	mov	r0, r2
 8004a78:	f000 fdca 	bl	8005610 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3708      	adds	r7, #8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b082      	sub	sp, #8
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e049      	b.n	8004b8c <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d106      	bne.n	8004b12 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f841 	bl	8004b94 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2202      	movs	r2, #2
 8004b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	3304      	adds	r3, #4
 8004b22:	4619      	mov	r1, r3
 8004b24:	4610      	mov	r0, r2
 8004b26:	f000 fd73 	bl	8005610 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d104      	bne.n	8004bc6 <HAL_TIM_IC_Start_IT+0x1e>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	e023      	b.n	8004c0e <HAL_TIM_IC_Start_IT+0x66>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b04      	cmp	r3, #4
 8004bca:	d104      	bne.n	8004bd6 <HAL_TIM_IC_Start_IT+0x2e>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	e01b      	b.n	8004c0e <HAL_TIM_IC_Start_IT+0x66>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d104      	bne.n	8004be6 <HAL_TIM_IC_Start_IT+0x3e>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	e013      	b.n	8004c0e <HAL_TIM_IC_Start_IT+0x66>
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b0c      	cmp	r3, #12
 8004bea:	d104      	bne.n	8004bf6 <HAL_TIM_IC_Start_IT+0x4e>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	e00b      	b.n	8004c0e <HAL_TIM_IC_Start_IT+0x66>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b10      	cmp	r3, #16
 8004bfa:	d104      	bne.n	8004c06 <HAL_TIM_IC_Start_IT+0x5e>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	e003      	b.n	8004c0e <HAL_TIM_IC_Start_IT+0x66>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d104      	bne.n	8004c20 <HAL_TIM_IC_Start_IT+0x78>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	e013      	b.n	8004c48 <HAL_TIM_IC_Start_IT+0xa0>
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	2b04      	cmp	r3, #4
 8004c24:	d104      	bne.n	8004c30 <HAL_TIM_IC_Start_IT+0x88>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	e00b      	b.n	8004c48 <HAL_TIM_IC_Start_IT+0xa0>
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	2b08      	cmp	r3, #8
 8004c34:	d104      	bne.n	8004c40 <HAL_TIM_IC_Start_IT+0x98>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	e003      	b.n	8004c48 <HAL_TIM_IC_Start_IT+0xa0>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c4a:	7bbb      	ldrb	r3, [r7, #14]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d102      	bne.n	8004c56 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c50:	7b7b      	ldrb	r3, [r7, #13]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d001      	beq.n	8004c5a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e0e2      	b.n	8004e20 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d104      	bne.n	8004c6a <HAL_TIM_IC_Start_IT+0xc2>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c68:	e023      	b.n	8004cb2 <HAL_TIM_IC_Start_IT+0x10a>
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	d104      	bne.n	8004c7a <HAL_TIM_IC_Start_IT+0xd2>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2202      	movs	r2, #2
 8004c74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c78:	e01b      	b.n	8004cb2 <HAL_TIM_IC_Start_IT+0x10a>
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b08      	cmp	r3, #8
 8004c7e:	d104      	bne.n	8004c8a <HAL_TIM_IC_Start_IT+0xe2>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2202      	movs	r2, #2
 8004c84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c88:	e013      	b.n	8004cb2 <HAL_TIM_IC_Start_IT+0x10a>
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2b0c      	cmp	r3, #12
 8004c8e:	d104      	bne.n	8004c9a <HAL_TIM_IC_Start_IT+0xf2>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2202      	movs	r2, #2
 8004c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c98:	e00b      	b.n	8004cb2 <HAL_TIM_IC_Start_IT+0x10a>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b10      	cmp	r3, #16
 8004c9e:	d104      	bne.n	8004caa <HAL_TIM_IC_Start_IT+0x102>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ca8:	e003      	b.n	8004cb2 <HAL_TIM_IC_Start_IT+0x10a>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2202      	movs	r2, #2
 8004cae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d104      	bne.n	8004cc2 <HAL_TIM_IC_Start_IT+0x11a>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cc0:	e013      	b.n	8004cea <HAL_TIM_IC_Start_IT+0x142>
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	d104      	bne.n	8004cd2 <HAL_TIM_IC_Start_IT+0x12a>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004cd0:	e00b      	b.n	8004cea <HAL_TIM_IC_Start_IT+0x142>
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d104      	bne.n	8004ce2 <HAL_TIM_IC_Start_IT+0x13a>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ce0:	e003      	b.n	8004cea <HAL_TIM_IC_Start_IT+0x142>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b0c      	cmp	r3, #12
 8004cee:	d841      	bhi.n	8004d74 <HAL_TIM_IC_Start_IT+0x1cc>
 8004cf0:	a201      	add	r2, pc, #4	@ (adr r2, 8004cf8 <HAL_TIM_IC_Start_IT+0x150>)
 8004cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf6:	bf00      	nop
 8004cf8:	08004d2d 	.word	0x08004d2d
 8004cfc:	08004d75 	.word	0x08004d75
 8004d00:	08004d75 	.word	0x08004d75
 8004d04:	08004d75 	.word	0x08004d75
 8004d08:	08004d3f 	.word	0x08004d3f
 8004d0c:	08004d75 	.word	0x08004d75
 8004d10:	08004d75 	.word	0x08004d75
 8004d14:	08004d75 	.word	0x08004d75
 8004d18:	08004d51 	.word	0x08004d51
 8004d1c:	08004d75 	.word	0x08004d75
 8004d20:	08004d75 	.word	0x08004d75
 8004d24:	08004d75 	.word	0x08004d75
 8004d28:	08004d63 	.word	0x08004d63
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68da      	ldr	r2, [r3, #12]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f042 0202 	orr.w	r2, r2, #2
 8004d3a:	60da      	str	r2, [r3, #12]
      break;
 8004d3c:	e01d      	b.n	8004d7a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68da      	ldr	r2, [r3, #12]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f042 0204 	orr.w	r2, r2, #4
 8004d4c:	60da      	str	r2, [r3, #12]
      break;
 8004d4e:	e014      	b.n	8004d7a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68da      	ldr	r2, [r3, #12]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0208 	orr.w	r2, r2, #8
 8004d5e:	60da      	str	r2, [r3, #12]
      break;
 8004d60:	e00b      	b.n	8004d7a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68da      	ldr	r2, [r3, #12]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f042 0210 	orr.w	r2, r2, #16
 8004d70:	60da      	str	r2, [r3, #12]
      break;
 8004d72:	e002      	b.n	8004d7a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	73fb      	strb	r3, [r7, #15]
      break;
 8004d78:	bf00      	nop
  }

  if (status == HAL_OK)
 8004d7a:	7bfb      	ldrb	r3, [r7, #15]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d14e      	bne.n	8004e1e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2201      	movs	r2, #1
 8004d86:	6839      	ldr	r1, [r7, #0]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f001 f90f 	bl	8005fac <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a25      	ldr	r2, [pc, #148]	@ (8004e28 <HAL_TIM_IC_Start_IT+0x280>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d022      	beq.n	8004dde <HAL_TIM_IC_Start_IT+0x236>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004da0:	d01d      	beq.n	8004dde <HAL_TIM_IC_Start_IT+0x236>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a21      	ldr	r2, [pc, #132]	@ (8004e2c <HAL_TIM_IC_Start_IT+0x284>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d018      	beq.n	8004dde <HAL_TIM_IC_Start_IT+0x236>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a1f      	ldr	r2, [pc, #124]	@ (8004e30 <HAL_TIM_IC_Start_IT+0x288>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d013      	beq.n	8004dde <HAL_TIM_IC_Start_IT+0x236>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a1e      	ldr	r2, [pc, #120]	@ (8004e34 <HAL_TIM_IC_Start_IT+0x28c>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d00e      	beq.n	8004dde <HAL_TIM_IC_Start_IT+0x236>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a1c      	ldr	r2, [pc, #112]	@ (8004e38 <HAL_TIM_IC_Start_IT+0x290>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d009      	beq.n	8004dde <HAL_TIM_IC_Start_IT+0x236>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a1b      	ldr	r2, [pc, #108]	@ (8004e3c <HAL_TIM_IC_Start_IT+0x294>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d004      	beq.n	8004dde <HAL_TIM_IC_Start_IT+0x236>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a19      	ldr	r2, [pc, #100]	@ (8004e40 <HAL_TIM_IC_Start_IT+0x298>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d115      	bne.n	8004e0a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	4b17      	ldr	r3, [pc, #92]	@ (8004e44 <HAL_TIM_IC_Start_IT+0x29c>)
 8004de6:	4013      	ands	r3, r2
 8004de8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	2b06      	cmp	r3, #6
 8004dee:	d015      	beq.n	8004e1c <HAL_TIM_IC_Start_IT+0x274>
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004df6:	d011      	beq.n	8004e1c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f042 0201 	orr.w	r2, r2, #1
 8004e06:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e08:	e008      	b.n	8004e1c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f042 0201 	orr.w	r2, r2, #1
 8004e18:	601a      	str	r2, [r3, #0]
 8004e1a:	e000      	b.n	8004e1e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e1c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	40010000 	.word	0x40010000
 8004e2c:	40000400 	.word	0x40000400
 8004e30:	40000800 	.word	0x40000800
 8004e34:	40000c00 	.word	0x40000c00
 8004e38:	40010400 	.word	0x40010400
 8004e3c:	40014000 	.word	0x40014000
 8004e40:	40001800 	.word	0x40001800
 8004e44:	00010007 	.word	0x00010007

08004e48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d020      	beq.n	8004eac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d01b      	beq.n	8004eac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f06f 0202 	mvn.w	r2, #2
 8004e7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	f003 0303 	and.w	r3, r3, #3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7fb fec4 	bl	8000c20 <HAL_TIM_IC_CaptureCallback>
 8004e98:	e005      	b.n	8004ea6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fb9a 	bl	80055d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 fba1 	bl	80055e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	f003 0304 	and.w	r3, r3, #4
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d020      	beq.n	8004ef8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f003 0304 	and.w	r3, r3, #4
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d01b      	beq.n	8004ef8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f06f 0204 	mvn.w	r2, #4
 8004ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2202      	movs	r2, #2
 8004ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f7fb fe9e 	bl	8000c20 <HAL_TIM_IC_CaptureCallback>
 8004ee4:	e005      	b.n	8004ef2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 fb74 	bl	80055d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 fb7b 	bl	80055e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	f003 0308 	and.w	r3, r3, #8
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d020      	beq.n	8004f44 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f003 0308 	and.w	r3, r3, #8
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d01b      	beq.n	8004f44 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f06f 0208 	mvn.w	r2, #8
 8004f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2204      	movs	r2, #4
 8004f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	f003 0303 	and.w	r3, r3, #3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f7fb fe78 	bl	8000c20 <HAL_TIM_IC_CaptureCallback>
 8004f30:	e005      	b.n	8004f3e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 fb4e 	bl	80055d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 fb55 	bl	80055e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f003 0310 	and.w	r3, r3, #16
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d020      	beq.n	8004f90 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f003 0310 	and.w	r3, r3, #16
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d01b      	beq.n	8004f90 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f06f 0210 	mvn.w	r2, #16
 8004f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2208      	movs	r2, #8
 8004f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7fb fe52 	bl	8000c20 <HAL_TIM_IC_CaptureCallback>
 8004f7c:	e005      	b.n	8004f8a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 fb28 	bl	80055d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 fb2f 	bl	80055e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00c      	beq.n	8004fb4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d007      	beq.n	8004fb4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f06f 0201 	mvn.w	r2, #1
 8004fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7fc f872 	bl	8001098 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d104      	bne.n	8004fc8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00c      	beq.n	8004fe2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d007      	beq.n	8004fe2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004fda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f001 f921 	bl	8006224 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00c      	beq.n	8005006 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d007      	beq.n	8005006 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004ffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f001 f919 	bl	8006238 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00c      	beq.n	800502a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005016:	2b00      	cmp	r3, #0
 8005018:	d007      	beq.n	800502a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 fae9 	bl	80055fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	f003 0320 	and.w	r3, r3, #32
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00c      	beq.n	800504e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f003 0320 	and.w	r3, r3, #32
 800503a:	2b00      	cmp	r3, #0
 800503c:	d007      	beq.n	800504e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f06f 0220 	mvn.w	r2, #32
 8005046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f001 f8e1 	bl	8006210 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800504e:	bf00      	nop
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b086      	sub	sp, #24
 800505a:	af00      	add	r7, sp, #0
 800505c:	60f8      	str	r0, [r7, #12]
 800505e:	60b9      	str	r1, [r7, #8]
 8005060:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005062:	2300      	movs	r3, #0
 8005064:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800506c:	2b01      	cmp	r3, #1
 800506e:	d101      	bne.n	8005074 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005070:	2302      	movs	r3, #2
 8005072:	e088      	b.n	8005186 <HAL_TIM_IC_ConfigChannel+0x130>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d11b      	bne.n	80050ba <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005092:	f000 fdc7 	bl	8005c24 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	699a      	ldr	r2, [r3, #24]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 020c 	bic.w	r2, r2, #12
 80050a4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	6999      	ldr	r1, [r3, #24]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	619a      	str	r2, [r3, #24]
 80050b8:	e060      	b.n	800517c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b04      	cmp	r3, #4
 80050be:	d11c      	bne.n	80050fa <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80050d0:	f000 fe4b 	bl	8005d6a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	699a      	ldr	r2, [r3, #24]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80050e2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6999      	ldr	r1, [r3, #24]
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	021a      	lsls	r2, r3, #8
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	619a      	str	r2, [r3, #24]
 80050f8:	e040      	b.n	800517c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d11b      	bne.n	8005138 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005110:	f000 fe98 	bl	8005e44 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	69da      	ldr	r2, [r3, #28]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 020c 	bic.w	r2, r2, #12
 8005122:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	69d9      	ldr	r1, [r3, #28]
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	689a      	ldr	r2, [r3, #8]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	61da      	str	r2, [r3, #28]
 8005136:	e021      	b.n	800517c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b0c      	cmp	r3, #12
 800513c:	d11c      	bne.n	8005178 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800514e:	f000 feb5 	bl	8005ebc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	69da      	ldr	r2, [r3, #28]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005160:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	69d9      	ldr	r1, [r3, #28]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	021a      	lsls	r2, r3, #8
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	61da      	str	r2, [r3, #28]
 8005176:	e001      	b.n	800517c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005184:	7dfb      	ldrb	r3, [r7, #23]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3718      	adds	r7, #24
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
	...

08005190 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800519c:	2300      	movs	r3, #0
 800519e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d101      	bne.n	80051ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051aa:	2302      	movs	r3, #2
 80051ac:	e0ff      	b.n	80053ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b14      	cmp	r3, #20
 80051ba:	f200 80f0 	bhi.w	800539e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80051be:	a201      	add	r2, pc, #4	@ (adr r2, 80051c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c4:	08005219 	.word	0x08005219
 80051c8:	0800539f 	.word	0x0800539f
 80051cc:	0800539f 	.word	0x0800539f
 80051d0:	0800539f 	.word	0x0800539f
 80051d4:	08005259 	.word	0x08005259
 80051d8:	0800539f 	.word	0x0800539f
 80051dc:	0800539f 	.word	0x0800539f
 80051e0:	0800539f 	.word	0x0800539f
 80051e4:	0800529b 	.word	0x0800529b
 80051e8:	0800539f 	.word	0x0800539f
 80051ec:	0800539f 	.word	0x0800539f
 80051f0:	0800539f 	.word	0x0800539f
 80051f4:	080052db 	.word	0x080052db
 80051f8:	0800539f 	.word	0x0800539f
 80051fc:	0800539f 	.word	0x0800539f
 8005200:	0800539f 	.word	0x0800539f
 8005204:	0800531d 	.word	0x0800531d
 8005208:	0800539f 	.word	0x0800539f
 800520c:	0800539f 	.word	0x0800539f
 8005210:	0800539f 	.word	0x0800539f
 8005214:	0800535d 	.word	0x0800535d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68b9      	ldr	r1, [r7, #8]
 800521e:	4618      	mov	r0, r3
 8005220:	f000 faa2 	bl	8005768 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	699a      	ldr	r2, [r3, #24]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 0208 	orr.w	r2, r2, #8
 8005232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	699a      	ldr	r2, [r3, #24]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 0204 	bic.w	r2, r2, #4
 8005242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6999      	ldr	r1, [r3, #24]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	691a      	ldr	r2, [r3, #16]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	619a      	str	r2, [r3, #24]
      break;
 8005256:	e0a5      	b.n	80053a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68b9      	ldr	r1, [r7, #8]
 800525e:	4618      	mov	r0, r3
 8005260:	f000 faf4 	bl	800584c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699a      	ldr	r2, [r3, #24]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	699a      	ldr	r2, [r3, #24]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6999      	ldr	r1, [r3, #24]
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	021a      	lsls	r2, r3, #8
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	619a      	str	r2, [r3, #24]
      break;
 8005298:	e084      	b.n	80053a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68b9      	ldr	r1, [r7, #8]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 fb4b 	bl	800593c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	69da      	ldr	r2, [r3, #28]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f042 0208 	orr.w	r2, r2, #8
 80052b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	69da      	ldr	r2, [r3, #28]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 0204 	bic.w	r2, r2, #4
 80052c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	69d9      	ldr	r1, [r3, #28]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	691a      	ldr	r2, [r3, #16]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	430a      	orrs	r2, r1
 80052d6:	61da      	str	r2, [r3, #28]
      break;
 80052d8:	e064      	b.n	80053a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68b9      	ldr	r1, [r7, #8]
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 fba1 	bl	8005a28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	69da      	ldr	r2, [r3, #28]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	69da      	ldr	r2, [r3, #28]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	69d9      	ldr	r1, [r3, #28]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	021a      	lsls	r2, r3, #8
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	61da      	str	r2, [r3, #28]
      break;
 800531a:	e043      	b.n	80053a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68b9      	ldr	r1, [r7, #8]
 8005322:	4618      	mov	r0, r3
 8005324:	f000 fbd8 	bl	8005ad8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f042 0208 	orr.w	r2, r2, #8
 8005336:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0204 	bic.w	r2, r2, #4
 8005346:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	691a      	ldr	r2, [r3, #16]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800535a:	e023      	b.n	80053a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68b9      	ldr	r1, [r7, #8]
 8005362:	4618      	mov	r0, r3
 8005364:	f000 fc0a 	bl	8005b7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005376:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005386:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	021a      	lsls	r2, r3, #8
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	430a      	orrs	r2, r1
 800539a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800539c:	e002      	b.n	80053a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	75fb      	strb	r3, [r7, #23]
      break;
 80053a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80053ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3718      	adds	r7, #24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop

080053b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053c2:	2300      	movs	r3, #0
 80053c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d101      	bne.n	80053d4 <HAL_TIM_ConfigClockSource+0x1c>
 80053d0:	2302      	movs	r3, #2
 80053d2:	e0b4      	b.n	800553e <HAL_TIM_ConfigClockSource+0x186>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	4b56      	ldr	r3, [pc, #344]	@ (8005548 <HAL_TIM_ConfigClockSource+0x190>)
 80053f0:	4013      	ands	r3, r2
 80053f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800540c:	d03e      	beq.n	800548c <HAL_TIM_ConfigClockSource+0xd4>
 800540e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005412:	f200 8087 	bhi.w	8005524 <HAL_TIM_ConfigClockSource+0x16c>
 8005416:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800541a:	f000 8086 	beq.w	800552a <HAL_TIM_ConfigClockSource+0x172>
 800541e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005422:	d87f      	bhi.n	8005524 <HAL_TIM_ConfigClockSource+0x16c>
 8005424:	2b70      	cmp	r3, #112	@ 0x70
 8005426:	d01a      	beq.n	800545e <HAL_TIM_ConfigClockSource+0xa6>
 8005428:	2b70      	cmp	r3, #112	@ 0x70
 800542a:	d87b      	bhi.n	8005524 <HAL_TIM_ConfigClockSource+0x16c>
 800542c:	2b60      	cmp	r3, #96	@ 0x60
 800542e:	d050      	beq.n	80054d2 <HAL_TIM_ConfigClockSource+0x11a>
 8005430:	2b60      	cmp	r3, #96	@ 0x60
 8005432:	d877      	bhi.n	8005524 <HAL_TIM_ConfigClockSource+0x16c>
 8005434:	2b50      	cmp	r3, #80	@ 0x50
 8005436:	d03c      	beq.n	80054b2 <HAL_TIM_ConfigClockSource+0xfa>
 8005438:	2b50      	cmp	r3, #80	@ 0x50
 800543a:	d873      	bhi.n	8005524 <HAL_TIM_ConfigClockSource+0x16c>
 800543c:	2b40      	cmp	r3, #64	@ 0x40
 800543e:	d058      	beq.n	80054f2 <HAL_TIM_ConfigClockSource+0x13a>
 8005440:	2b40      	cmp	r3, #64	@ 0x40
 8005442:	d86f      	bhi.n	8005524 <HAL_TIM_ConfigClockSource+0x16c>
 8005444:	2b30      	cmp	r3, #48	@ 0x30
 8005446:	d064      	beq.n	8005512 <HAL_TIM_ConfigClockSource+0x15a>
 8005448:	2b30      	cmp	r3, #48	@ 0x30
 800544a:	d86b      	bhi.n	8005524 <HAL_TIM_ConfigClockSource+0x16c>
 800544c:	2b20      	cmp	r3, #32
 800544e:	d060      	beq.n	8005512 <HAL_TIM_ConfigClockSource+0x15a>
 8005450:	2b20      	cmp	r3, #32
 8005452:	d867      	bhi.n	8005524 <HAL_TIM_ConfigClockSource+0x16c>
 8005454:	2b00      	cmp	r3, #0
 8005456:	d05c      	beq.n	8005512 <HAL_TIM_ConfigClockSource+0x15a>
 8005458:	2b10      	cmp	r3, #16
 800545a:	d05a      	beq.n	8005512 <HAL_TIM_ConfigClockSource+0x15a>
 800545c:	e062      	b.n	8005524 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800546e:	f000 fd7d 	bl	8005f6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005480:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	609a      	str	r2, [r3, #8]
      break;
 800548a:	e04f      	b.n	800552c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800549c:	f000 fd66 	bl	8005f6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689a      	ldr	r2, [r3, #8]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054ae:	609a      	str	r2, [r3, #8]
      break;
 80054b0:	e03c      	b.n	800552c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054be:	461a      	mov	r2, r3
 80054c0:	f000 fc24 	bl	8005d0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2150      	movs	r1, #80	@ 0x50
 80054ca:	4618      	mov	r0, r3
 80054cc:	f000 fd33 	bl	8005f36 <TIM_ITRx_SetConfig>
      break;
 80054d0:	e02c      	b.n	800552c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054de:	461a      	mov	r2, r3
 80054e0:	f000 fc80 	bl	8005de4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2160      	movs	r1, #96	@ 0x60
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 fd23 	bl	8005f36 <TIM_ITRx_SetConfig>
      break;
 80054f0:	e01c      	b.n	800552c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054fe:	461a      	mov	r2, r3
 8005500:	f000 fc04 	bl	8005d0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2140      	movs	r1, #64	@ 0x40
 800550a:	4618      	mov	r0, r3
 800550c:	f000 fd13 	bl	8005f36 <TIM_ITRx_SetConfig>
      break;
 8005510:	e00c      	b.n	800552c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4619      	mov	r1, r3
 800551c:	4610      	mov	r0, r2
 800551e:	f000 fd0a 	bl	8005f36 <TIM_ITRx_SetConfig>
      break;
 8005522:	e003      	b.n	800552c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	73fb      	strb	r3, [r7, #15]
      break;
 8005528:	e000      	b.n	800552c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800552a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800553c:	7bfb      	ldrb	r3, [r7, #15]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	fffeff88 	.word	0xfffeff88

0800554c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005556:	2300      	movs	r3, #0
 8005558:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b0c      	cmp	r3, #12
 800555e:	d831      	bhi.n	80055c4 <HAL_TIM_ReadCapturedValue+0x78>
 8005560:	a201      	add	r2, pc, #4	@ (adr r2, 8005568 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005566:	bf00      	nop
 8005568:	0800559d 	.word	0x0800559d
 800556c:	080055c5 	.word	0x080055c5
 8005570:	080055c5 	.word	0x080055c5
 8005574:	080055c5 	.word	0x080055c5
 8005578:	080055a7 	.word	0x080055a7
 800557c:	080055c5 	.word	0x080055c5
 8005580:	080055c5 	.word	0x080055c5
 8005584:	080055c5 	.word	0x080055c5
 8005588:	080055b1 	.word	0x080055b1
 800558c:	080055c5 	.word	0x080055c5
 8005590:	080055c5 	.word	0x080055c5
 8005594:	080055c5 	.word	0x080055c5
 8005598:	080055bb 	.word	0x080055bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055a2:	60fb      	str	r3, [r7, #12]

      break;
 80055a4:	e00f      	b.n	80055c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ac:	60fb      	str	r3, [r7, #12]

      break;
 80055ae:	e00a      	b.n	80055c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055b6:	60fb      	str	r3, [r7, #12]

      break;
 80055b8:	e005      	b.n	80055c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c0:	60fb      	str	r3, [r7, #12]

      break;
 80055c2:	e000      	b.n	80055c6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80055c4:	bf00      	nop
  }

  return tmpreg;
 80055c6:	68fb      	ldr	r3, [r7, #12]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a46      	ldr	r2, [pc, #280]	@ (800573c <TIM_Base_SetConfig+0x12c>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d013      	beq.n	8005650 <TIM_Base_SetConfig+0x40>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800562e:	d00f      	beq.n	8005650 <TIM_Base_SetConfig+0x40>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a43      	ldr	r2, [pc, #268]	@ (8005740 <TIM_Base_SetConfig+0x130>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00b      	beq.n	8005650 <TIM_Base_SetConfig+0x40>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a42      	ldr	r2, [pc, #264]	@ (8005744 <TIM_Base_SetConfig+0x134>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d007      	beq.n	8005650 <TIM_Base_SetConfig+0x40>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a41      	ldr	r2, [pc, #260]	@ (8005748 <TIM_Base_SetConfig+0x138>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d003      	beq.n	8005650 <TIM_Base_SetConfig+0x40>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a40      	ldr	r2, [pc, #256]	@ (800574c <TIM_Base_SetConfig+0x13c>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d108      	bne.n	8005662 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005656:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	4313      	orrs	r3, r2
 8005660:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a35      	ldr	r2, [pc, #212]	@ (800573c <TIM_Base_SetConfig+0x12c>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d02b      	beq.n	80056c2 <TIM_Base_SetConfig+0xb2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005670:	d027      	beq.n	80056c2 <TIM_Base_SetConfig+0xb2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a32      	ldr	r2, [pc, #200]	@ (8005740 <TIM_Base_SetConfig+0x130>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d023      	beq.n	80056c2 <TIM_Base_SetConfig+0xb2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a31      	ldr	r2, [pc, #196]	@ (8005744 <TIM_Base_SetConfig+0x134>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d01f      	beq.n	80056c2 <TIM_Base_SetConfig+0xb2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a30      	ldr	r2, [pc, #192]	@ (8005748 <TIM_Base_SetConfig+0x138>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d01b      	beq.n	80056c2 <TIM_Base_SetConfig+0xb2>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a2f      	ldr	r2, [pc, #188]	@ (800574c <TIM_Base_SetConfig+0x13c>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d017      	beq.n	80056c2 <TIM_Base_SetConfig+0xb2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a2e      	ldr	r2, [pc, #184]	@ (8005750 <TIM_Base_SetConfig+0x140>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d013      	beq.n	80056c2 <TIM_Base_SetConfig+0xb2>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a2d      	ldr	r2, [pc, #180]	@ (8005754 <TIM_Base_SetConfig+0x144>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d00f      	beq.n	80056c2 <TIM_Base_SetConfig+0xb2>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a2c      	ldr	r2, [pc, #176]	@ (8005758 <TIM_Base_SetConfig+0x148>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d00b      	beq.n	80056c2 <TIM_Base_SetConfig+0xb2>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a2b      	ldr	r2, [pc, #172]	@ (800575c <TIM_Base_SetConfig+0x14c>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d007      	beq.n	80056c2 <TIM_Base_SetConfig+0xb2>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a2a      	ldr	r2, [pc, #168]	@ (8005760 <TIM_Base_SetConfig+0x150>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d003      	beq.n	80056c2 <TIM_Base_SetConfig+0xb2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a29      	ldr	r2, [pc, #164]	@ (8005764 <TIM_Base_SetConfig+0x154>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d108      	bne.n	80056d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a10      	ldr	r2, [pc, #64]	@ (800573c <TIM_Base_SetConfig+0x12c>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d003      	beq.n	8005708 <TIM_Base_SetConfig+0xf8>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a12      	ldr	r2, [pc, #72]	@ (800574c <TIM_Base_SetConfig+0x13c>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d103      	bne.n	8005710 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	691a      	ldr	r2, [r3, #16]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b01      	cmp	r3, #1
 8005720:	d105      	bne.n	800572e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	f023 0201 	bic.w	r2, r3, #1
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	611a      	str	r2, [r3, #16]
  }
}
 800572e:	bf00      	nop
 8005730:	3714      	adds	r7, #20
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	40010000 	.word	0x40010000
 8005740:	40000400 	.word	0x40000400
 8005744:	40000800 	.word	0x40000800
 8005748:	40000c00 	.word	0x40000c00
 800574c:	40010400 	.word	0x40010400
 8005750:	40014000 	.word	0x40014000
 8005754:	40014400 	.word	0x40014400
 8005758:	40014800 	.word	0x40014800
 800575c:	40001800 	.word	0x40001800
 8005760:	40001c00 	.word	0x40001c00
 8005764:	40002000 	.word	0x40002000

08005768 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005768:	b480      	push	{r7}
 800576a:	b087      	sub	sp, #28
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a1b      	ldr	r3, [r3, #32]
 800577c:	f023 0201 	bic.w	r2, r3, #1
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	4b2b      	ldr	r3, [pc, #172]	@ (8005840 <TIM_OC1_SetConfig+0xd8>)
 8005794:	4013      	ands	r3, r2
 8005796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f023 0303 	bic.w	r3, r3, #3
 800579e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f023 0302 	bic.w	r3, r3, #2
 80057b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a21      	ldr	r2, [pc, #132]	@ (8005844 <TIM_OC1_SetConfig+0xdc>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d003      	beq.n	80057cc <TIM_OC1_SetConfig+0x64>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a20      	ldr	r2, [pc, #128]	@ (8005848 <TIM_OC1_SetConfig+0xe0>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d10c      	bne.n	80057e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f023 0308 	bic.w	r3, r3, #8
 80057d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	4313      	orrs	r3, r2
 80057dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f023 0304 	bic.w	r3, r3, #4
 80057e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a16      	ldr	r2, [pc, #88]	@ (8005844 <TIM_OC1_SetConfig+0xdc>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d003      	beq.n	80057f6 <TIM_OC1_SetConfig+0x8e>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a15      	ldr	r2, [pc, #84]	@ (8005848 <TIM_OC1_SetConfig+0xe0>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d111      	bne.n	800581a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005804:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	4313      	orrs	r3, r2
 800580e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	4313      	orrs	r3, r2
 8005818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	621a      	str	r2, [r3, #32]
}
 8005834:	bf00      	nop
 8005836:	371c      	adds	r7, #28
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	fffeff8f 	.word	0xfffeff8f
 8005844:	40010000 	.word	0x40010000
 8005848:	40010400 	.word	0x40010400

0800584c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800584c:	b480      	push	{r7}
 800584e:	b087      	sub	sp, #28
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a1b      	ldr	r3, [r3, #32]
 8005860:	f023 0210 	bic.w	r2, r3, #16
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	4b2e      	ldr	r3, [pc, #184]	@ (8005930 <TIM_OC2_SetConfig+0xe4>)
 8005878:	4013      	ands	r3, r2
 800587a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005882:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	021b      	lsls	r3, r3, #8
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	4313      	orrs	r3, r2
 800588e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f023 0320 	bic.w	r3, r3, #32
 8005896:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	011b      	lsls	r3, r3, #4
 800589e:	697a      	ldr	r2, [r7, #20]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a23      	ldr	r2, [pc, #140]	@ (8005934 <TIM_OC2_SetConfig+0xe8>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d003      	beq.n	80058b4 <TIM_OC2_SetConfig+0x68>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a22      	ldr	r2, [pc, #136]	@ (8005938 <TIM_OC2_SetConfig+0xec>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d10d      	bne.n	80058d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	011b      	lsls	r3, r3, #4
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a18      	ldr	r2, [pc, #96]	@ (8005934 <TIM_OC2_SetConfig+0xe8>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d003      	beq.n	80058e0 <TIM_OC2_SetConfig+0x94>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a17      	ldr	r2, [pc, #92]	@ (8005938 <TIM_OC2_SetConfig+0xec>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d113      	bne.n	8005908 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	4313      	orrs	r3, r2
 8005906:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	621a      	str	r2, [r3, #32]
}
 8005922:	bf00      	nop
 8005924:	371c      	adds	r7, #28
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	feff8fff 	.word	0xfeff8fff
 8005934:	40010000 	.word	0x40010000
 8005938:	40010400 	.word	0x40010400

0800593c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800593c:	b480      	push	{r7}
 800593e:	b087      	sub	sp, #28
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a1b      	ldr	r3, [r3, #32]
 8005950:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	69db      	ldr	r3, [r3, #28]
 8005962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4b2d      	ldr	r3, [pc, #180]	@ (8005a1c <TIM_OC3_SetConfig+0xe0>)
 8005968:	4013      	ands	r3, r2
 800596a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f023 0303 	bic.w	r3, r3, #3
 8005972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	4313      	orrs	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	021b      	lsls	r3, r3, #8
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	4313      	orrs	r3, r2
 8005990:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a22      	ldr	r2, [pc, #136]	@ (8005a20 <TIM_OC3_SetConfig+0xe4>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d003      	beq.n	80059a2 <TIM_OC3_SetConfig+0x66>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a21      	ldr	r2, [pc, #132]	@ (8005a24 <TIM_OC3_SetConfig+0xe8>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d10d      	bne.n	80059be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80059a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	021b      	lsls	r3, r3, #8
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a17      	ldr	r2, [pc, #92]	@ (8005a20 <TIM_OC3_SetConfig+0xe4>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d003      	beq.n	80059ce <TIM_OC3_SetConfig+0x92>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a16      	ldr	r2, [pc, #88]	@ (8005a24 <TIM_OC3_SetConfig+0xe8>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d113      	bne.n	80059f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80059dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	011b      	lsls	r3, r3, #4
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	011b      	lsls	r3, r3, #4
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	685a      	ldr	r2, [r3, #4]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	621a      	str	r2, [r3, #32]
}
 8005a10:	bf00      	nop
 8005a12:	371c      	adds	r7, #28
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr
 8005a1c:	fffeff8f 	.word	0xfffeff8f
 8005a20:	40010000 	.word	0x40010000
 8005a24:	40010400 	.word	0x40010400

08005a28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	4b1e      	ldr	r3, [pc, #120]	@ (8005acc <TIM_OC4_SetConfig+0xa4>)
 8005a54:	4013      	ands	r3, r2
 8005a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	021b      	lsls	r3, r3, #8
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	031b      	lsls	r3, r3, #12
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a13      	ldr	r2, [pc, #76]	@ (8005ad0 <TIM_OC4_SetConfig+0xa8>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d003      	beq.n	8005a90 <TIM_OC4_SetConfig+0x68>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a12      	ldr	r2, [pc, #72]	@ (8005ad4 <TIM_OC4_SetConfig+0xac>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d109      	bne.n	8005aa4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	019b      	lsls	r3, r3, #6
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	621a      	str	r2, [r3, #32]
}
 8005abe:	bf00      	nop
 8005ac0:	371c      	adds	r7, #28
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	feff8fff 	.word	0xfeff8fff
 8005ad0:	40010000 	.word	0x40010000
 8005ad4:	40010400 	.word	0x40010400

08005ad8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b087      	sub	sp, #28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	4b1b      	ldr	r3, [pc, #108]	@ (8005b70 <TIM_OC5_SetConfig+0x98>)
 8005b04:	4013      	ands	r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005b18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	041b      	lsls	r3, r3, #16
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a12      	ldr	r2, [pc, #72]	@ (8005b74 <TIM_OC5_SetConfig+0x9c>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d003      	beq.n	8005b36 <TIM_OC5_SetConfig+0x5e>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a11      	ldr	r2, [pc, #68]	@ (8005b78 <TIM_OC5_SetConfig+0xa0>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d109      	bne.n	8005b4a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	021b      	lsls	r3, r3, #8
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	621a      	str	r2, [r3, #32]
}
 8005b64:	bf00      	nop
 8005b66:	371c      	adds	r7, #28
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr
 8005b70:	fffeff8f 	.word	0xfffeff8f
 8005b74:	40010000 	.word	0x40010000
 8005b78:	40010400 	.word	0x40010400

08005b7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b087      	sub	sp, #28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8005c18 <TIM_OC6_SetConfig+0x9c>)
 8005ba8:	4013      	ands	r3, r2
 8005baa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	021b      	lsls	r3, r3, #8
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005bbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	051b      	lsls	r3, r3, #20
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a13      	ldr	r2, [pc, #76]	@ (8005c1c <TIM_OC6_SetConfig+0xa0>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d003      	beq.n	8005bdc <TIM_OC6_SetConfig+0x60>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a12      	ldr	r2, [pc, #72]	@ (8005c20 <TIM_OC6_SetConfig+0xa4>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d109      	bne.n	8005bf0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005be2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	029b      	lsls	r3, r3, #10
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	621a      	str	r2, [r3, #32]
}
 8005c0a:	bf00      	nop
 8005c0c:	371c      	adds	r7, #28
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	feff8fff 	.word	0xfeff8fff
 8005c1c:	40010000 	.word	0x40010000
 8005c20:	40010400 	.word	0x40010400

08005c24 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b087      	sub	sp, #28
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
 8005c30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	f023 0201 	bic.w	r2, r3, #1
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	4a28      	ldr	r2, [pc, #160]	@ (8005cf0 <TIM_TI1_SetConfig+0xcc>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d01b      	beq.n	8005c8a <TIM_TI1_SetConfig+0x66>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c58:	d017      	beq.n	8005c8a <TIM_TI1_SetConfig+0x66>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	4a25      	ldr	r2, [pc, #148]	@ (8005cf4 <TIM_TI1_SetConfig+0xd0>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d013      	beq.n	8005c8a <TIM_TI1_SetConfig+0x66>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	4a24      	ldr	r2, [pc, #144]	@ (8005cf8 <TIM_TI1_SetConfig+0xd4>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d00f      	beq.n	8005c8a <TIM_TI1_SetConfig+0x66>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	4a23      	ldr	r2, [pc, #140]	@ (8005cfc <TIM_TI1_SetConfig+0xd8>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d00b      	beq.n	8005c8a <TIM_TI1_SetConfig+0x66>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	4a22      	ldr	r2, [pc, #136]	@ (8005d00 <TIM_TI1_SetConfig+0xdc>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d007      	beq.n	8005c8a <TIM_TI1_SetConfig+0x66>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	4a21      	ldr	r2, [pc, #132]	@ (8005d04 <TIM_TI1_SetConfig+0xe0>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d003      	beq.n	8005c8a <TIM_TI1_SetConfig+0x66>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	4a20      	ldr	r2, [pc, #128]	@ (8005d08 <TIM_TI1_SetConfig+0xe4>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d101      	bne.n	8005c8e <TIM_TI1_SetConfig+0x6a>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e000      	b.n	8005c90 <TIM_TI1_SetConfig+0x6c>
 8005c8e:	2300      	movs	r3, #0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d008      	beq.n	8005ca6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	f023 0303 	bic.w	r3, r3, #3
 8005c9a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	617b      	str	r3, [r7, #20]
 8005ca4:	e003      	b.n	8005cae <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f043 0301 	orr.w	r3, r3, #1
 8005cac:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005cb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	011b      	lsls	r3, r3, #4
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	f023 030a 	bic.w	r3, r3, #10
 8005cc8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	f003 030a 	and.w	r3, r3, #10
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	621a      	str	r2, [r3, #32]
}
 8005ce2:	bf00      	nop
 8005ce4:	371c      	adds	r7, #28
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	40010000 	.word	0x40010000
 8005cf4:	40000400 	.word	0x40000400
 8005cf8:	40000800 	.word	0x40000800
 8005cfc:	40000c00 	.word	0x40000c00
 8005d00:	40010400 	.word	0x40010400
 8005d04:	40014000 	.word	0x40014000
 8005d08:	40001800 	.word	0x40001800

08005d0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b087      	sub	sp, #28
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6a1b      	ldr	r3, [r3, #32]
 8005d1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	f023 0201 	bic.w	r2, r3, #1
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	011b      	lsls	r3, r3, #4
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f023 030a 	bic.w	r3, r3, #10
 8005d48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	621a      	str	r2, [r3, #32]
}
 8005d5e:	bf00      	nop
 8005d60:	371c      	adds	r7, #28
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b087      	sub	sp, #28
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	60f8      	str	r0, [r7, #12]
 8005d72:	60b9      	str	r1, [r7, #8]
 8005d74:	607a      	str	r2, [r7, #4]
 8005d76:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6a1b      	ldr	r3, [r3, #32]
 8005d7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	f023 0210 	bic.w	r2, r3, #16
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	021b      	lsls	r3, r3, #8
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005da8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	031b      	lsls	r3, r3, #12
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005dbc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	011b      	lsls	r3, r3, #4
 8005dc2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	621a      	str	r2, [r3, #32]
}
 8005dd8:	bf00      	nop
 8005dda:	371c      	adds	r7, #28
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b087      	sub	sp, #28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6a1b      	ldr	r3, [r3, #32]
 8005df4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	f023 0210 	bic.w	r2, r3, #16
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	031b      	lsls	r3, r3, #12
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e20:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	011b      	lsls	r3, r3, #4
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	621a      	str	r2, [r3, #32]
}
 8005e38:	bf00      	nop
 8005e3a:	371c      	adds	r7, #28
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
 8005e50:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6a1b      	ldr	r3, [r3, #32]
 8005e5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	69db      	ldr	r3, [r3, #28]
 8005e68:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	f023 0303 	bic.w	r3, r3, #3
 8005e70:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e80:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	011b      	lsls	r3, r3, #4
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005e94:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	021b      	lsls	r3, r3, #8
 8005e9a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	621a      	str	r2, [r3, #32]
}
 8005eb0:	bf00      	nop
 8005eb2:	371c      	adds	r7, #28
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
 8005ec8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6a1b      	ldr	r3, [r3, #32]
 8005ed4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	69db      	ldr	r3, [r3, #28]
 8005ee0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ee8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	021b      	lsls	r3, r3, #8
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005efa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	031b      	lsls	r3, r3, #12
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005f0e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	031b      	lsls	r3, r3, #12
 8005f14:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	621a      	str	r2, [r3, #32]
}
 8005f2a:	bf00      	nop
 8005f2c:	371c      	adds	r7, #28
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b085      	sub	sp, #20
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
 8005f3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	f043 0307 	orr.w	r3, r3, #7
 8005f58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	609a      	str	r2, [r3, #8]
}
 8005f60:	bf00      	nop
 8005f62:	3714      	adds	r7, #20
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b087      	sub	sp, #28
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
 8005f78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	021a      	lsls	r2, r3, #8
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	431a      	orrs	r2, r3
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	609a      	str	r2, [r3, #8]
}
 8005fa0:	bf00      	nop
 8005fa2:	371c      	adds	r7, #28
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	f003 031f 	and.w	r3, r3, #31
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6a1a      	ldr	r2, [r3, #32]
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	43db      	mvns	r3, r3
 8005fce:	401a      	ands	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6a1a      	ldr	r2, [r3, #32]
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f003 031f 	and.w	r3, r3, #31
 8005fde:	6879      	ldr	r1, [r7, #4]
 8005fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8005fe4:	431a      	orrs	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	621a      	str	r2, [r3, #32]
}
 8005fea:	bf00      	nop
 8005fec:	371c      	adds	r7, #28
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
	...

08005ff8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006008:	2b01      	cmp	r3, #1
 800600a:	d101      	bne.n	8006010 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800600c:	2302      	movs	r3, #2
 800600e:	e06d      	b.n	80060ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2202      	movs	r2, #2
 800601c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a30      	ldr	r2, [pc, #192]	@ (80060f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d004      	beq.n	8006044 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a2f      	ldr	r2, [pc, #188]	@ (80060fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d108      	bne.n	8006056 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800604a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	4313      	orrs	r3, r2
 8006054:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800605c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	4313      	orrs	r3, r2
 8006066:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a20      	ldr	r2, [pc, #128]	@ (80060f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d022      	beq.n	80060c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006082:	d01d      	beq.n	80060c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a1d      	ldr	r2, [pc, #116]	@ (8006100 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d018      	beq.n	80060c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a1c      	ldr	r2, [pc, #112]	@ (8006104 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d013      	beq.n	80060c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a1a      	ldr	r2, [pc, #104]	@ (8006108 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d00e      	beq.n	80060c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a15      	ldr	r2, [pc, #84]	@ (80060fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d009      	beq.n	80060c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a16      	ldr	r2, [pc, #88]	@ (800610c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d004      	beq.n	80060c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a15      	ldr	r2, [pc, #84]	@ (8006110 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d10c      	bne.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3714      	adds	r7, #20
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr
 80060f8:	40010000 	.word	0x40010000
 80060fc:	40010400 	.word	0x40010400
 8006100:	40000400 	.word	0x40000400
 8006104:	40000800 	.word	0x40000800
 8006108:	40000c00 	.word	0x40000c00
 800610c:	40014000 	.word	0x40014000
 8006110:	40001800 	.word	0x40001800

08006114 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800611e:	2300      	movs	r3, #0
 8006120:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006128:	2b01      	cmp	r3, #1
 800612a:	d101      	bne.n	8006130 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800612c:	2302      	movs	r3, #2
 800612e:	e065      	b.n	80061fc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	4313      	orrs	r3, r2
 8006144:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	4313      	orrs	r3, r2
 8006152:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	4313      	orrs	r3, r2
 8006160:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4313      	orrs	r3, r2
 800616e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	4313      	orrs	r3, r2
 800617c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	695b      	ldr	r3, [r3, #20]
 8006188:	4313      	orrs	r3, r2
 800618a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006196:	4313      	orrs	r3, r2
 8006198:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	041b      	lsls	r3, r3, #16
 80061a6:	4313      	orrs	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a16      	ldr	r2, [pc, #88]	@ (8006208 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d004      	beq.n	80061be <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a14      	ldr	r2, [pc, #80]	@ (800620c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d115      	bne.n	80061ea <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c8:	051b      	lsls	r3, r3, #20
 80061ca:	4313      	orrs	r3, r2
 80061cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	69db      	ldr	r3, [r3, #28]
 80061d8:	4313      	orrs	r3, r2
 80061da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3714      	adds	r7, #20
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr
 8006208:	40010000 	.word	0x40010000
 800620c:	40010400 	.word	0x40010400

08006210 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d101      	bne.n	800625e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e040      	b.n	80062e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006262:	2b00      	cmp	r3, #0
 8006264:	d106      	bne.n	8006274 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f7fb fe94 	bl	8001f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2224      	movs	r2, #36	@ 0x24
 8006278:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f022 0201 	bic.w	r2, r2, #1
 8006288:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800628e:	2b00      	cmp	r3, #0
 8006290:	d002      	beq.n	8006298 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fe36 	bl	8006f04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fbcf 	bl	8006a3c <UART_SetConfig>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d101      	bne.n	80062a8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e01b      	b.n	80062e0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685a      	ldr	r2, [r3, #4]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80062b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	689a      	ldr	r2, [r3, #8]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80062c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f042 0201 	orr.w	r2, r2, #1
 80062d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 feb5 	bl	8007048 <UART_CheckIdleState>
 80062de:	4603      	mov	r3, r0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3708      	adds	r7, #8
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b08b      	sub	sp, #44	@ 0x2c
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	4613      	mov	r3, r2
 80062f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062fa:	2b20      	cmp	r3, #32
 80062fc:	d147      	bne.n	800638e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <HAL_UART_Transmit_IT+0x22>
 8006304:	88fb      	ldrh	r3, [r7, #6]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d101      	bne.n	800630e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e040      	b.n	8006390 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	68ba      	ldr	r2, [r7, #8]
 8006312:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	88fa      	ldrh	r2, [r7, #6]
 8006318:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	88fa      	ldrh	r2, [r7, #6]
 8006320:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2221      	movs	r2, #33	@ 0x21
 8006336:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006340:	d107      	bne.n	8006352 <HAL_UART_Transmit_IT+0x6a>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d103      	bne.n	8006352 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	4a13      	ldr	r2, [pc, #76]	@ (800639c <HAL_UART_Transmit_IT+0xb4>)
 800634e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8006350:	e002      	b.n	8006358 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	4a12      	ldr	r2, [pc, #72]	@ (80063a0 <HAL_UART_Transmit_IT+0xb8>)
 8006356:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	e853 3f00 	ldrex	r3, [r3]
 8006364:	613b      	str	r3, [r7, #16]
   return(result);
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800636c:	627b      	str	r3, [r7, #36]	@ 0x24
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	461a      	mov	r2, r3
 8006374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006376:	623b      	str	r3, [r7, #32]
 8006378:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637a:	69f9      	ldr	r1, [r7, #28]
 800637c:	6a3a      	ldr	r2, [r7, #32]
 800637e:	e841 2300 	strex	r3, r2, [r1]
 8006382:	61bb      	str	r3, [r7, #24]
   return(result);
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1e6      	bne.n	8006358 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	e000      	b.n	8006390 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800638e:	2302      	movs	r3, #2
  }
}
 8006390:	4618      	mov	r0, r3
 8006392:	372c      	adds	r7, #44	@ 0x2c
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr
 800639c:	080075ab 	.word	0x080075ab
 80063a0:	080074f5 	.word	0x080074f5

080063a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b08a      	sub	sp, #40	@ 0x28
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	4613      	mov	r3, r2
 80063b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063b8:	2b20      	cmp	r3, #32
 80063ba:	d132      	bne.n	8006422 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d002      	beq.n	80063c8 <HAL_UART_Receive_IT+0x24>
 80063c2:	88fb      	ldrh	r3, [r7, #6]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d101      	bne.n	80063cc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e02b      	b.n	8006424 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d018      	beq.n	8006412 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	e853 3f00 	ldrex	r3, [r3]
 80063ec:	613b      	str	r3, [r7, #16]
   return(result);
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80063f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	461a      	mov	r2, r3
 80063fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fe:	623b      	str	r3, [r7, #32]
 8006400:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006402:	69f9      	ldr	r1, [r7, #28]
 8006404:	6a3a      	ldr	r2, [r7, #32]
 8006406:	e841 2300 	strex	r3, r2, [r1]
 800640a:	61bb      	str	r3, [r7, #24]
   return(result);
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1e6      	bne.n	80063e0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006412:	88fb      	ldrh	r3, [r7, #6]
 8006414:	461a      	mov	r2, r3
 8006416:	68b9      	ldr	r1, [r7, #8]
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f000 ff2b 	bl	8007274 <UART_Start_Receive_IT>
 800641e:	4603      	mov	r3, r0
 8006420:	e000      	b.n	8006424 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006422:	2302      	movs	r3, #2
  }
}
 8006424:	4618      	mov	r0, r3
 8006426:	3728      	adds	r7, #40	@ 0x28
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b0ba      	sub	sp, #232	@ 0xe8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006452:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006456:	f640 030f 	movw	r3, #2063	@ 0x80f
 800645a:	4013      	ands	r3, r2
 800645c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006460:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006464:	2b00      	cmp	r3, #0
 8006466:	d115      	bne.n	8006494 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800646c:	f003 0320 	and.w	r3, r3, #32
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00f      	beq.n	8006494 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006478:	f003 0320 	and.w	r3, r3, #32
 800647c:	2b00      	cmp	r3, #0
 800647e:	d009      	beq.n	8006494 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006484:	2b00      	cmp	r3, #0
 8006486:	f000 82ac 	beq.w	80069e2 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	4798      	blx	r3
      }
      return;
 8006492:	e2a6      	b.n	80069e2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006494:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006498:	2b00      	cmp	r3, #0
 800649a:	f000 8117 	beq.w	80066cc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800649e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064a2:	f003 0301 	and.w	r3, r3, #1
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d106      	bne.n	80064b8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80064aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80064ae:	4b85      	ldr	r3, [pc, #532]	@ (80066c4 <HAL_UART_IRQHandler+0x298>)
 80064b0:	4013      	ands	r3, r2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f000 810a 	beq.w	80066cc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80064b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d011      	beq.n	80064e8 <HAL_UART_IRQHandler+0xbc>
 80064c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00b      	beq.n	80064e8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2201      	movs	r2, #1
 80064d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064de:	f043 0201 	orr.w	r2, r3, #1
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064ec:	f003 0302 	and.w	r3, r3, #2
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d011      	beq.n	8006518 <HAL_UART_IRQHandler+0xec>
 80064f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064f8:	f003 0301 	and.w	r3, r3, #1
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00b      	beq.n	8006518 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2202      	movs	r2, #2
 8006506:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800650e:	f043 0204 	orr.w	r2, r3, #4
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800651c:	f003 0304 	and.w	r3, r3, #4
 8006520:	2b00      	cmp	r3, #0
 8006522:	d011      	beq.n	8006548 <HAL_UART_IRQHandler+0x11c>
 8006524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006528:	f003 0301 	and.w	r3, r3, #1
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00b      	beq.n	8006548 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2204      	movs	r2, #4
 8006536:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800653e:	f043 0202 	orr.w	r2, r3, #2
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800654c:	f003 0308 	and.w	r3, r3, #8
 8006550:	2b00      	cmp	r3, #0
 8006552:	d017      	beq.n	8006584 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006558:	f003 0320 	and.w	r3, r3, #32
 800655c:	2b00      	cmp	r3, #0
 800655e:	d105      	bne.n	800656c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006560:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006564:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00b      	beq.n	8006584 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2208      	movs	r2, #8
 8006572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800657a:	f043 0208 	orr.w	r2, r3, #8
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006588:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800658c:	2b00      	cmp	r3, #0
 800658e:	d012      	beq.n	80065b6 <HAL_UART_IRQHandler+0x18a>
 8006590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006594:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00c      	beq.n	80065b6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065ac:	f043 0220 	orr.w	r2, r3, #32
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f000 8212 	beq.w	80069e6 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80065c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065c6:	f003 0320 	and.w	r3, r3, #32
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00d      	beq.n	80065ea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80065ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065d2:	f003 0320 	and.w	r3, r3, #32
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d007      	beq.n	80065ea <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d003      	beq.n	80065ea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065fe:	2b40      	cmp	r3, #64	@ 0x40
 8006600:	d005      	beq.n	800660e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006602:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006606:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800660a:	2b00      	cmp	r3, #0
 800660c:	d04f      	beq.n	80066ae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 fef6 	bl	8007400 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800661e:	2b40      	cmp	r3, #64	@ 0x40
 8006620:	d141      	bne.n	80066a6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	3308      	adds	r3, #8
 8006628:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006630:	e853 3f00 	ldrex	r3, [r3]
 8006634:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006638:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800663c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006640:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	3308      	adds	r3, #8
 800664a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800664e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006652:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006656:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800665a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800665e:	e841 2300 	strex	r3, r2, [r1]
 8006662:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006666:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1d9      	bne.n	8006622 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006672:	2b00      	cmp	r3, #0
 8006674:	d013      	beq.n	800669e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800667a:	4a13      	ldr	r2, [pc, #76]	@ (80066c8 <HAL_UART_IRQHandler+0x29c>)
 800667c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006682:	4618      	mov	r0, r3
 8006684:	f7fc f81c 	bl	80026c0 <HAL_DMA_Abort_IT>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d017      	beq.n	80066be <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006692:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006698:	4610      	mov	r0, r2
 800669a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800669c:	e00f      	b.n	80066be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f9ac 	bl	80069fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a4:	e00b      	b.n	80066be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f9a8 	bl	80069fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ac:	e007      	b.n	80066be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f9a4 	bl	80069fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80066bc:	e193      	b.n	80069e6 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066be:	bf00      	nop
    return;
 80066c0:	e191      	b.n	80069e6 <HAL_UART_IRQHandler+0x5ba>
 80066c2:	bf00      	nop
 80066c4:	04000120 	.word	0x04000120
 80066c8:	080074c9 	.word	0x080074c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	f040 814c 	bne.w	800696e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80066d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066da:	f003 0310 	and.w	r3, r3, #16
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f000 8145 	beq.w	800696e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80066e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066e8:	f003 0310 	and.w	r3, r3, #16
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f000 813e 	beq.w	800696e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2210      	movs	r2, #16
 80066f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006704:	2b40      	cmp	r3, #64	@ 0x40
 8006706:	f040 80b6 	bne.w	8006876 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006716:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 8165 	beq.w	80069ea <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006726:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800672a:	429a      	cmp	r2, r3
 800672c:	f080 815d 	bcs.w	80069ea <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006736:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800673e:	69db      	ldr	r3, [r3, #28]
 8006740:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006744:	f000 8086 	beq.w	8006854 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006750:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006754:	e853 3f00 	ldrex	r3, [r3]
 8006758:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800675c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006760:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006764:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	461a      	mov	r2, r3
 800676e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006772:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006776:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800677e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006782:	e841 2300 	strex	r3, r2, [r1]
 8006786:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800678a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1da      	bne.n	8006748 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	3308      	adds	r3, #8
 8006798:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800679c:	e853 3f00 	ldrex	r3, [r3]
 80067a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80067a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80067a4:	f023 0301 	bic.w	r3, r3, #1
 80067a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	3308      	adds	r3, #8
 80067b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80067b6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80067ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80067be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80067c2:	e841 2300 	strex	r3, r2, [r1]
 80067c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80067c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1e1      	bne.n	8006792 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3308      	adds	r3, #8
 80067d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80067d8:	e853 3f00 	ldrex	r3, [r3]
 80067dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80067de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	3308      	adds	r3, #8
 80067ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80067f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80067f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80067f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80067fa:	e841 2300 	strex	r3, r2, [r1]
 80067fe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006800:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1e3      	bne.n	80067ce <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2220      	movs	r2, #32
 800680a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800681c:	e853 3f00 	ldrex	r3, [r3]
 8006820:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006822:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006824:	f023 0310 	bic.w	r3, r3, #16
 8006828:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	461a      	mov	r2, r3
 8006832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006836:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006838:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800683c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800683e:	e841 2300 	strex	r3, r2, [r1]
 8006842:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006844:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1e4      	bne.n	8006814 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800684e:	4618      	mov	r0, r3
 8006850:	f7fb fec6 	bl	80025e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2202      	movs	r2, #2
 8006858:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006866:	b29b      	uxth	r3, r3
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	b29b      	uxth	r3, r3
 800686c:	4619      	mov	r1, r3
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 f8ce 	bl	8006a10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006874:	e0b9      	b.n	80069ea <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006882:	b29b      	uxth	r3, r3
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006890:	b29b      	uxth	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	f000 80ab 	beq.w	80069ee <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006898:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800689c:	2b00      	cmp	r3, #0
 800689e:	f000 80a6 	beq.w	80069ee <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068aa:	e853 3f00 	ldrex	r3, [r3]
 80068ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80068b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	461a      	mov	r2, r3
 80068c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80068c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80068c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80068ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068cc:	e841 2300 	strex	r3, r2, [r1]
 80068d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80068d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1e4      	bne.n	80068a2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	3308      	adds	r3, #8
 80068de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e2:	e853 3f00 	ldrex	r3, [r3]
 80068e6:	623b      	str	r3, [r7, #32]
   return(result);
 80068e8:	6a3b      	ldr	r3, [r7, #32]
 80068ea:	f023 0301 	bic.w	r3, r3, #1
 80068ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	3308      	adds	r3, #8
 80068f8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80068fc:	633a      	str	r2, [r7, #48]	@ 0x30
 80068fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006900:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006902:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006904:	e841 2300 	strex	r3, r2, [r1]
 8006908:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800690a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1e3      	bne.n	80068d8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2220      	movs	r2, #32
 8006914:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	e853 3f00 	ldrex	r3, [r3]
 8006930:	60fb      	str	r3, [r7, #12]
   return(result);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f023 0310 	bic.w	r3, r3, #16
 8006938:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	461a      	mov	r2, r3
 8006942:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006946:	61fb      	str	r3, [r7, #28]
 8006948:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694a:	69b9      	ldr	r1, [r7, #24]
 800694c:	69fa      	ldr	r2, [r7, #28]
 800694e:	e841 2300 	strex	r3, r2, [r1]
 8006952:	617b      	str	r3, [r7, #20]
   return(result);
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1e4      	bne.n	8006924 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2202      	movs	r2, #2
 800695e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006960:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006964:	4619      	mov	r1, r3
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f852 	bl	8006a10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800696c:	e03f      	b.n	80069ee <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800696e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006972:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00e      	beq.n	8006998 <HAL_UART_IRQHandler+0x56c>
 800697a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800697e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d008      	beq.n	8006998 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800698e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 f849 	bl	8006a28 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006996:	e02d      	b.n	80069f4 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800699c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00e      	beq.n	80069c2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80069a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d008      	beq.n	80069c2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d01c      	beq.n	80069f2 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	4798      	blx	r3
    }
    return;
 80069c0:	e017      	b.n	80069f2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80069c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d012      	beq.n	80069f4 <HAL_UART_IRQHandler+0x5c8>
 80069ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00c      	beq.n	80069f4 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fe45 	bl	800766a <UART_EndTransmit_IT>
    return;
 80069e0:	e008      	b.n	80069f4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80069e2:	bf00      	nop
 80069e4:	e006      	b.n	80069f4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80069e6:	bf00      	nop
 80069e8:	e004      	b.n	80069f4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80069ea:	bf00      	nop
 80069ec:	e002      	b.n	80069f4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80069ee:	bf00      	nop
 80069f0:	e000      	b.n	80069f4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80069f2:	bf00      	nop
  }

}
 80069f4:	37e8      	adds	r7, #232	@ 0xe8
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop

080069fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006a04:	bf00      	nop
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	460b      	mov	r3, r1
 8006a1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006a30:	bf00      	nop
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b088      	sub	sp, #32
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a44:	2300      	movs	r3, #0
 8006a46:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	689a      	ldr	r2, [r3, #8]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	431a      	orrs	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	431a      	orrs	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	69db      	ldr	r3, [r3, #28]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	4ba6      	ldr	r3, [pc, #664]	@ (8006d00 <UART_SetConfig+0x2c4>)
 8006a68:	4013      	ands	r3, r2
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	6812      	ldr	r2, [r2, #0]
 8006a6e:	6979      	ldr	r1, [r7, #20]
 8006a70:	430b      	orrs	r3, r1
 8006a72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	68da      	ldr	r2, [r3, #12]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	430a      	orrs	r2, r1
 8006a88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a1b      	ldr	r3, [r3, #32]
 8006a94:	697a      	ldr	r2, [r7, #20]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	697a      	ldr	r2, [r7, #20]
 8006aaa:	430a      	orrs	r2, r1
 8006aac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a94      	ldr	r2, [pc, #592]	@ (8006d04 <UART_SetConfig+0x2c8>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d120      	bne.n	8006afa <UART_SetConfig+0xbe>
 8006ab8:	4b93      	ldr	r3, [pc, #588]	@ (8006d08 <UART_SetConfig+0x2cc>)
 8006aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006abe:	f003 0303 	and.w	r3, r3, #3
 8006ac2:	2b03      	cmp	r3, #3
 8006ac4:	d816      	bhi.n	8006af4 <UART_SetConfig+0xb8>
 8006ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8006acc <UART_SetConfig+0x90>)
 8006ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006acc:	08006add 	.word	0x08006add
 8006ad0:	08006ae9 	.word	0x08006ae9
 8006ad4:	08006ae3 	.word	0x08006ae3
 8006ad8:	08006aef 	.word	0x08006aef
 8006adc:	2301      	movs	r3, #1
 8006ade:	77fb      	strb	r3, [r7, #31]
 8006ae0:	e150      	b.n	8006d84 <UART_SetConfig+0x348>
 8006ae2:	2302      	movs	r3, #2
 8006ae4:	77fb      	strb	r3, [r7, #31]
 8006ae6:	e14d      	b.n	8006d84 <UART_SetConfig+0x348>
 8006ae8:	2304      	movs	r3, #4
 8006aea:	77fb      	strb	r3, [r7, #31]
 8006aec:	e14a      	b.n	8006d84 <UART_SetConfig+0x348>
 8006aee:	2308      	movs	r3, #8
 8006af0:	77fb      	strb	r3, [r7, #31]
 8006af2:	e147      	b.n	8006d84 <UART_SetConfig+0x348>
 8006af4:	2310      	movs	r3, #16
 8006af6:	77fb      	strb	r3, [r7, #31]
 8006af8:	e144      	b.n	8006d84 <UART_SetConfig+0x348>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a83      	ldr	r2, [pc, #524]	@ (8006d0c <UART_SetConfig+0x2d0>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d132      	bne.n	8006b6a <UART_SetConfig+0x12e>
 8006b04:	4b80      	ldr	r3, [pc, #512]	@ (8006d08 <UART_SetConfig+0x2cc>)
 8006b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b0a:	f003 030c 	and.w	r3, r3, #12
 8006b0e:	2b0c      	cmp	r3, #12
 8006b10:	d828      	bhi.n	8006b64 <UART_SetConfig+0x128>
 8006b12:	a201      	add	r2, pc, #4	@ (adr r2, 8006b18 <UART_SetConfig+0xdc>)
 8006b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b18:	08006b4d 	.word	0x08006b4d
 8006b1c:	08006b65 	.word	0x08006b65
 8006b20:	08006b65 	.word	0x08006b65
 8006b24:	08006b65 	.word	0x08006b65
 8006b28:	08006b59 	.word	0x08006b59
 8006b2c:	08006b65 	.word	0x08006b65
 8006b30:	08006b65 	.word	0x08006b65
 8006b34:	08006b65 	.word	0x08006b65
 8006b38:	08006b53 	.word	0x08006b53
 8006b3c:	08006b65 	.word	0x08006b65
 8006b40:	08006b65 	.word	0x08006b65
 8006b44:	08006b65 	.word	0x08006b65
 8006b48:	08006b5f 	.word	0x08006b5f
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	77fb      	strb	r3, [r7, #31]
 8006b50:	e118      	b.n	8006d84 <UART_SetConfig+0x348>
 8006b52:	2302      	movs	r3, #2
 8006b54:	77fb      	strb	r3, [r7, #31]
 8006b56:	e115      	b.n	8006d84 <UART_SetConfig+0x348>
 8006b58:	2304      	movs	r3, #4
 8006b5a:	77fb      	strb	r3, [r7, #31]
 8006b5c:	e112      	b.n	8006d84 <UART_SetConfig+0x348>
 8006b5e:	2308      	movs	r3, #8
 8006b60:	77fb      	strb	r3, [r7, #31]
 8006b62:	e10f      	b.n	8006d84 <UART_SetConfig+0x348>
 8006b64:	2310      	movs	r3, #16
 8006b66:	77fb      	strb	r3, [r7, #31]
 8006b68:	e10c      	b.n	8006d84 <UART_SetConfig+0x348>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a68      	ldr	r2, [pc, #416]	@ (8006d10 <UART_SetConfig+0x2d4>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d120      	bne.n	8006bb6 <UART_SetConfig+0x17a>
 8006b74:	4b64      	ldr	r3, [pc, #400]	@ (8006d08 <UART_SetConfig+0x2cc>)
 8006b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b7a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006b7e:	2b30      	cmp	r3, #48	@ 0x30
 8006b80:	d013      	beq.n	8006baa <UART_SetConfig+0x16e>
 8006b82:	2b30      	cmp	r3, #48	@ 0x30
 8006b84:	d814      	bhi.n	8006bb0 <UART_SetConfig+0x174>
 8006b86:	2b20      	cmp	r3, #32
 8006b88:	d009      	beq.n	8006b9e <UART_SetConfig+0x162>
 8006b8a:	2b20      	cmp	r3, #32
 8006b8c:	d810      	bhi.n	8006bb0 <UART_SetConfig+0x174>
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d002      	beq.n	8006b98 <UART_SetConfig+0x15c>
 8006b92:	2b10      	cmp	r3, #16
 8006b94:	d006      	beq.n	8006ba4 <UART_SetConfig+0x168>
 8006b96:	e00b      	b.n	8006bb0 <UART_SetConfig+0x174>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	77fb      	strb	r3, [r7, #31]
 8006b9c:	e0f2      	b.n	8006d84 <UART_SetConfig+0x348>
 8006b9e:	2302      	movs	r3, #2
 8006ba0:	77fb      	strb	r3, [r7, #31]
 8006ba2:	e0ef      	b.n	8006d84 <UART_SetConfig+0x348>
 8006ba4:	2304      	movs	r3, #4
 8006ba6:	77fb      	strb	r3, [r7, #31]
 8006ba8:	e0ec      	b.n	8006d84 <UART_SetConfig+0x348>
 8006baa:	2308      	movs	r3, #8
 8006bac:	77fb      	strb	r3, [r7, #31]
 8006bae:	e0e9      	b.n	8006d84 <UART_SetConfig+0x348>
 8006bb0:	2310      	movs	r3, #16
 8006bb2:	77fb      	strb	r3, [r7, #31]
 8006bb4:	e0e6      	b.n	8006d84 <UART_SetConfig+0x348>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a56      	ldr	r2, [pc, #344]	@ (8006d14 <UART_SetConfig+0x2d8>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d120      	bne.n	8006c02 <UART_SetConfig+0x1c6>
 8006bc0:	4b51      	ldr	r3, [pc, #324]	@ (8006d08 <UART_SetConfig+0x2cc>)
 8006bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bc6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006bca:	2bc0      	cmp	r3, #192	@ 0xc0
 8006bcc:	d013      	beq.n	8006bf6 <UART_SetConfig+0x1ba>
 8006bce:	2bc0      	cmp	r3, #192	@ 0xc0
 8006bd0:	d814      	bhi.n	8006bfc <UART_SetConfig+0x1c0>
 8006bd2:	2b80      	cmp	r3, #128	@ 0x80
 8006bd4:	d009      	beq.n	8006bea <UART_SetConfig+0x1ae>
 8006bd6:	2b80      	cmp	r3, #128	@ 0x80
 8006bd8:	d810      	bhi.n	8006bfc <UART_SetConfig+0x1c0>
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d002      	beq.n	8006be4 <UART_SetConfig+0x1a8>
 8006bde:	2b40      	cmp	r3, #64	@ 0x40
 8006be0:	d006      	beq.n	8006bf0 <UART_SetConfig+0x1b4>
 8006be2:	e00b      	b.n	8006bfc <UART_SetConfig+0x1c0>
 8006be4:	2300      	movs	r3, #0
 8006be6:	77fb      	strb	r3, [r7, #31]
 8006be8:	e0cc      	b.n	8006d84 <UART_SetConfig+0x348>
 8006bea:	2302      	movs	r3, #2
 8006bec:	77fb      	strb	r3, [r7, #31]
 8006bee:	e0c9      	b.n	8006d84 <UART_SetConfig+0x348>
 8006bf0:	2304      	movs	r3, #4
 8006bf2:	77fb      	strb	r3, [r7, #31]
 8006bf4:	e0c6      	b.n	8006d84 <UART_SetConfig+0x348>
 8006bf6:	2308      	movs	r3, #8
 8006bf8:	77fb      	strb	r3, [r7, #31]
 8006bfa:	e0c3      	b.n	8006d84 <UART_SetConfig+0x348>
 8006bfc:	2310      	movs	r3, #16
 8006bfe:	77fb      	strb	r3, [r7, #31]
 8006c00:	e0c0      	b.n	8006d84 <UART_SetConfig+0x348>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a44      	ldr	r2, [pc, #272]	@ (8006d18 <UART_SetConfig+0x2dc>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d125      	bne.n	8006c58 <UART_SetConfig+0x21c>
 8006c0c:	4b3e      	ldr	r3, [pc, #248]	@ (8006d08 <UART_SetConfig+0x2cc>)
 8006c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c1a:	d017      	beq.n	8006c4c <UART_SetConfig+0x210>
 8006c1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c20:	d817      	bhi.n	8006c52 <UART_SetConfig+0x216>
 8006c22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c26:	d00b      	beq.n	8006c40 <UART_SetConfig+0x204>
 8006c28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c2c:	d811      	bhi.n	8006c52 <UART_SetConfig+0x216>
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d003      	beq.n	8006c3a <UART_SetConfig+0x1fe>
 8006c32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c36:	d006      	beq.n	8006c46 <UART_SetConfig+0x20a>
 8006c38:	e00b      	b.n	8006c52 <UART_SetConfig+0x216>
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	77fb      	strb	r3, [r7, #31]
 8006c3e:	e0a1      	b.n	8006d84 <UART_SetConfig+0x348>
 8006c40:	2302      	movs	r3, #2
 8006c42:	77fb      	strb	r3, [r7, #31]
 8006c44:	e09e      	b.n	8006d84 <UART_SetConfig+0x348>
 8006c46:	2304      	movs	r3, #4
 8006c48:	77fb      	strb	r3, [r7, #31]
 8006c4a:	e09b      	b.n	8006d84 <UART_SetConfig+0x348>
 8006c4c:	2308      	movs	r3, #8
 8006c4e:	77fb      	strb	r3, [r7, #31]
 8006c50:	e098      	b.n	8006d84 <UART_SetConfig+0x348>
 8006c52:	2310      	movs	r3, #16
 8006c54:	77fb      	strb	r3, [r7, #31]
 8006c56:	e095      	b.n	8006d84 <UART_SetConfig+0x348>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a2f      	ldr	r2, [pc, #188]	@ (8006d1c <UART_SetConfig+0x2e0>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d125      	bne.n	8006cae <UART_SetConfig+0x272>
 8006c62:	4b29      	ldr	r3, [pc, #164]	@ (8006d08 <UART_SetConfig+0x2cc>)
 8006c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c68:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006c6c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c70:	d017      	beq.n	8006ca2 <UART_SetConfig+0x266>
 8006c72:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c76:	d817      	bhi.n	8006ca8 <UART_SetConfig+0x26c>
 8006c78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c7c:	d00b      	beq.n	8006c96 <UART_SetConfig+0x25a>
 8006c7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c82:	d811      	bhi.n	8006ca8 <UART_SetConfig+0x26c>
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d003      	beq.n	8006c90 <UART_SetConfig+0x254>
 8006c88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c8c:	d006      	beq.n	8006c9c <UART_SetConfig+0x260>
 8006c8e:	e00b      	b.n	8006ca8 <UART_SetConfig+0x26c>
 8006c90:	2301      	movs	r3, #1
 8006c92:	77fb      	strb	r3, [r7, #31]
 8006c94:	e076      	b.n	8006d84 <UART_SetConfig+0x348>
 8006c96:	2302      	movs	r3, #2
 8006c98:	77fb      	strb	r3, [r7, #31]
 8006c9a:	e073      	b.n	8006d84 <UART_SetConfig+0x348>
 8006c9c:	2304      	movs	r3, #4
 8006c9e:	77fb      	strb	r3, [r7, #31]
 8006ca0:	e070      	b.n	8006d84 <UART_SetConfig+0x348>
 8006ca2:	2308      	movs	r3, #8
 8006ca4:	77fb      	strb	r3, [r7, #31]
 8006ca6:	e06d      	b.n	8006d84 <UART_SetConfig+0x348>
 8006ca8:	2310      	movs	r3, #16
 8006caa:	77fb      	strb	r3, [r7, #31]
 8006cac:	e06a      	b.n	8006d84 <UART_SetConfig+0x348>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a1b      	ldr	r2, [pc, #108]	@ (8006d20 <UART_SetConfig+0x2e4>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d138      	bne.n	8006d2a <UART_SetConfig+0x2ee>
 8006cb8:	4b13      	ldr	r3, [pc, #76]	@ (8006d08 <UART_SetConfig+0x2cc>)
 8006cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cbe:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006cc2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006cc6:	d017      	beq.n	8006cf8 <UART_SetConfig+0x2bc>
 8006cc8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ccc:	d82a      	bhi.n	8006d24 <UART_SetConfig+0x2e8>
 8006cce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cd2:	d00b      	beq.n	8006cec <UART_SetConfig+0x2b0>
 8006cd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cd8:	d824      	bhi.n	8006d24 <UART_SetConfig+0x2e8>
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d003      	beq.n	8006ce6 <UART_SetConfig+0x2aa>
 8006cde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ce2:	d006      	beq.n	8006cf2 <UART_SetConfig+0x2b6>
 8006ce4:	e01e      	b.n	8006d24 <UART_SetConfig+0x2e8>
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	77fb      	strb	r3, [r7, #31]
 8006cea:	e04b      	b.n	8006d84 <UART_SetConfig+0x348>
 8006cec:	2302      	movs	r3, #2
 8006cee:	77fb      	strb	r3, [r7, #31]
 8006cf0:	e048      	b.n	8006d84 <UART_SetConfig+0x348>
 8006cf2:	2304      	movs	r3, #4
 8006cf4:	77fb      	strb	r3, [r7, #31]
 8006cf6:	e045      	b.n	8006d84 <UART_SetConfig+0x348>
 8006cf8:	2308      	movs	r3, #8
 8006cfa:	77fb      	strb	r3, [r7, #31]
 8006cfc:	e042      	b.n	8006d84 <UART_SetConfig+0x348>
 8006cfe:	bf00      	nop
 8006d00:	efff69f3 	.word	0xefff69f3
 8006d04:	40011000 	.word	0x40011000
 8006d08:	40023800 	.word	0x40023800
 8006d0c:	40004400 	.word	0x40004400
 8006d10:	40004800 	.word	0x40004800
 8006d14:	40004c00 	.word	0x40004c00
 8006d18:	40005000 	.word	0x40005000
 8006d1c:	40011400 	.word	0x40011400
 8006d20:	40007800 	.word	0x40007800
 8006d24:	2310      	movs	r3, #16
 8006d26:	77fb      	strb	r3, [r7, #31]
 8006d28:	e02c      	b.n	8006d84 <UART_SetConfig+0x348>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a72      	ldr	r2, [pc, #456]	@ (8006ef8 <UART_SetConfig+0x4bc>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d125      	bne.n	8006d80 <UART_SetConfig+0x344>
 8006d34:	4b71      	ldr	r3, [pc, #452]	@ (8006efc <UART_SetConfig+0x4c0>)
 8006d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d3a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006d3e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006d42:	d017      	beq.n	8006d74 <UART_SetConfig+0x338>
 8006d44:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006d48:	d817      	bhi.n	8006d7a <UART_SetConfig+0x33e>
 8006d4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d4e:	d00b      	beq.n	8006d68 <UART_SetConfig+0x32c>
 8006d50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d54:	d811      	bhi.n	8006d7a <UART_SetConfig+0x33e>
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d003      	beq.n	8006d62 <UART_SetConfig+0x326>
 8006d5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d5e:	d006      	beq.n	8006d6e <UART_SetConfig+0x332>
 8006d60:	e00b      	b.n	8006d7a <UART_SetConfig+0x33e>
 8006d62:	2300      	movs	r3, #0
 8006d64:	77fb      	strb	r3, [r7, #31]
 8006d66:	e00d      	b.n	8006d84 <UART_SetConfig+0x348>
 8006d68:	2302      	movs	r3, #2
 8006d6a:	77fb      	strb	r3, [r7, #31]
 8006d6c:	e00a      	b.n	8006d84 <UART_SetConfig+0x348>
 8006d6e:	2304      	movs	r3, #4
 8006d70:	77fb      	strb	r3, [r7, #31]
 8006d72:	e007      	b.n	8006d84 <UART_SetConfig+0x348>
 8006d74:	2308      	movs	r3, #8
 8006d76:	77fb      	strb	r3, [r7, #31]
 8006d78:	e004      	b.n	8006d84 <UART_SetConfig+0x348>
 8006d7a:	2310      	movs	r3, #16
 8006d7c:	77fb      	strb	r3, [r7, #31]
 8006d7e:	e001      	b.n	8006d84 <UART_SetConfig+0x348>
 8006d80:	2310      	movs	r3, #16
 8006d82:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	69db      	ldr	r3, [r3, #28]
 8006d88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d8c:	d15b      	bne.n	8006e46 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006d8e:	7ffb      	ldrb	r3, [r7, #31]
 8006d90:	2b08      	cmp	r3, #8
 8006d92:	d828      	bhi.n	8006de6 <UART_SetConfig+0x3aa>
 8006d94:	a201      	add	r2, pc, #4	@ (adr r2, 8006d9c <UART_SetConfig+0x360>)
 8006d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d9a:	bf00      	nop
 8006d9c:	08006dc1 	.word	0x08006dc1
 8006da0:	08006dc9 	.word	0x08006dc9
 8006da4:	08006dd1 	.word	0x08006dd1
 8006da8:	08006de7 	.word	0x08006de7
 8006dac:	08006dd7 	.word	0x08006dd7
 8006db0:	08006de7 	.word	0x08006de7
 8006db4:	08006de7 	.word	0x08006de7
 8006db8:	08006de7 	.word	0x08006de7
 8006dbc:	08006ddf 	.word	0x08006ddf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dc0:	f7fd f91a 	bl	8003ff8 <HAL_RCC_GetPCLK1Freq>
 8006dc4:	61b8      	str	r0, [r7, #24]
        break;
 8006dc6:	e013      	b.n	8006df0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dc8:	f7fd f92a 	bl	8004020 <HAL_RCC_GetPCLK2Freq>
 8006dcc:	61b8      	str	r0, [r7, #24]
        break;
 8006dce:	e00f      	b.n	8006df0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dd0:	4b4b      	ldr	r3, [pc, #300]	@ (8006f00 <UART_SetConfig+0x4c4>)
 8006dd2:	61bb      	str	r3, [r7, #24]
        break;
 8006dd4:	e00c      	b.n	8006df0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dd6:	f7fd f83d 	bl	8003e54 <HAL_RCC_GetSysClockFreq>
 8006dda:	61b8      	str	r0, [r7, #24]
        break;
 8006ddc:	e008      	b.n	8006df0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006de2:	61bb      	str	r3, [r7, #24]
        break;
 8006de4:	e004      	b.n	8006df0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006de6:	2300      	movs	r3, #0
 8006de8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	77bb      	strb	r3, [r7, #30]
        break;
 8006dee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d074      	beq.n	8006ee0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	005a      	lsls	r2, r3, #1
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	085b      	lsrs	r3, r3, #1
 8006e00:	441a      	add	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e0a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	2b0f      	cmp	r3, #15
 8006e10:	d916      	bls.n	8006e40 <UART_SetConfig+0x404>
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e18:	d212      	bcs.n	8006e40 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	f023 030f 	bic.w	r3, r3, #15
 8006e22:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	085b      	lsrs	r3, r3, #1
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	f003 0307 	and.w	r3, r3, #7
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	89fb      	ldrh	r3, [r7, #14]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	89fa      	ldrh	r2, [r7, #14]
 8006e3c:	60da      	str	r2, [r3, #12]
 8006e3e:	e04f      	b.n	8006ee0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	77bb      	strb	r3, [r7, #30]
 8006e44:	e04c      	b.n	8006ee0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e46:	7ffb      	ldrb	r3, [r7, #31]
 8006e48:	2b08      	cmp	r3, #8
 8006e4a:	d828      	bhi.n	8006e9e <UART_SetConfig+0x462>
 8006e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e54 <UART_SetConfig+0x418>)
 8006e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e52:	bf00      	nop
 8006e54:	08006e79 	.word	0x08006e79
 8006e58:	08006e81 	.word	0x08006e81
 8006e5c:	08006e89 	.word	0x08006e89
 8006e60:	08006e9f 	.word	0x08006e9f
 8006e64:	08006e8f 	.word	0x08006e8f
 8006e68:	08006e9f 	.word	0x08006e9f
 8006e6c:	08006e9f 	.word	0x08006e9f
 8006e70:	08006e9f 	.word	0x08006e9f
 8006e74:	08006e97 	.word	0x08006e97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e78:	f7fd f8be 	bl	8003ff8 <HAL_RCC_GetPCLK1Freq>
 8006e7c:	61b8      	str	r0, [r7, #24]
        break;
 8006e7e:	e013      	b.n	8006ea8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e80:	f7fd f8ce 	bl	8004020 <HAL_RCC_GetPCLK2Freq>
 8006e84:	61b8      	str	r0, [r7, #24]
        break;
 8006e86:	e00f      	b.n	8006ea8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e88:	4b1d      	ldr	r3, [pc, #116]	@ (8006f00 <UART_SetConfig+0x4c4>)
 8006e8a:	61bb      	str	r3, [r7, #24]
        break;
 8006e8c:	e00c      	b.n	8006ea8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e8e:	f7fc ffe1 	bl	8003e54 <HAL_RCC_GetSysClockFreq>
 8006e92:	61b8      	str	r0, [r7, #24]
        break;
 8006e94:	e008      	b.n	8006ea8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e9a:	61bb      	str	r3, [r7, #24]
        break;
 8006e9c:	e004      	b.n	8006ea8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	77bb      	strb	r3, [r7, #30]
        break;
 8006ea6:	bf00      	nop
    }

    if (pclk != 0U)
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d018      	beq.n	8006ee0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	085a      	lsrs	r2, r3, #1
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	441a      	add	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ec0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	2b0f      	cmp	r3, #15
 8006ec6:	d909      	bls.n	8006edc <UART_SetConfig+0x4a0>
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ece:	d205      	bcs.n	8006edc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	60da      	str	r2, [r3, #12]
 8006eda:	e001      	b.n	8006ee0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006eec:	7fbb      	ldrb	r3, [r7, #30]
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3720      	adds	r7, #32
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	40007c00 	.word	0x40007c00
 8006efc:	40023800 	.word	0x40023800
 8006f00:	00f42400 	.word	0x00f42400

08006f04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f10:	f003 0308 	and.w	r3, r3, #8
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00a      	beq.n	8006f2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	430a      	orrs	r2, r1
 8006f2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f32:	f003 0301 	and.w	r3, r3, #1
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00a      	beq.n	8006f50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	430a      	orrs	r2, r1
 8006f4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f54:	f003 0302 	and.w	r3, r3, #2
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00a      	beq.n	8006f72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	430a      	orrs	r2, r1
 8006f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f76:	f003 0304 	and.w	r3, r3, #4
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00a      	beq.n	8006f94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	430a      	orrs	r2, r1
 8006f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f98:	f003 0310 	and.w	r3, r3, #16
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00a      	beq.n	8006fb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	430a      	orrs	r2, r1
 8006fb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fba:	f003 0320 	and.w	r3, r3, #32
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00a      	beq.n	8006fd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	430a      	orrs	r2, r1
 8006fd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d01a      	beq.n	800701a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ffe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007002:	d10a      	bne.n	800701a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	430a      	orrs	r2, r1
 8007018:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800701e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00a      	beq.n	800703c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	430a      	orrs	r2, r1
 800703a:	605a      	str	r2, [r3, #4]
  }
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b098      	sub	sp, #96	@ 0x60
 800704c:	af02      	add	r7, sp, #8
 800704e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007058:	f7fb f908 	bl	800226c <HAL_GetTick>
 800705c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0308 	and.w	r3, r3, #8
 8007068:	2b08      	cmp	r3, #8
 800706a:	d12e      	bne.n	80070ca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800706c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007070:	9300      	str	r3, [sp, #0]
 8007072:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007074:	2200      	movs	r2, #0
 8007076:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f88c 	bl	8007198 <UART_WaitOnFlagUntilTimeout>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d021      	beq.n	80070ca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800708e:	e853 3f00 	ldrex	r3, [r3]
 8007092:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007096:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800709a:	653b      	str	r3, [r7, #80]	@ 0x50
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	461a      	mov	r2, r3
 80070a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80070a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80070aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070ac:	e841 2300 	strex	r3, r2, [r1]
 80070b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80070b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1e6      	bne.n	8007086 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2220      	movs	r2, #32
 80070bc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e062      	b.n	8007190 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0304 	and.w	r3, r3, #4
 80070d4:	2b04      	cmp	r3, #4
 80070d6:	d149      	bne.n	800716c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80070dc:	9300      	str	r3, [sp, #0]
 80070de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070e0:	2200      	movs	r2, #0
 80070e2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f856 	bl	8007198 <UART_WaitOnFlagUntilTimeout>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d03c      	beq.n	800716c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070fa:	e853 3f00 	ldrex	r3, [r3]
 80070fe:	623b      	str	r3, [r7, #32]
   return(result);
 8007100:	6a3b      	ldr	r3, [r7, #32]
 8007102:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007106:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	461a      	mov	r2, r3
 800710e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007110:	633b      	str	r3, [r7, #48]	@ 0x30
 8007112:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007114:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007116:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007118:	e841 2300 	strex	r3, r2, [r1]
 800711c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800711e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007120:	2b00      	cmp	r3, #0
 8007122:	d1e6      	bne.n	80070f2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	3308      	adds	r3, #8
 800712a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	e853 3f00 	ldrex	r3, [r3]
 8007132:	60fb      	str	r3, [r7, #12]
   return(result);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f023 0301 	bic.w	r3, r3, #1
 800713a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	3308      	adds	r3, #8
 8007142:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007144:	61fa      	str	r2, [r7, #28]
 8007146:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007148:	69b9      	ldr	r1, [r7, #24]
 800714a:	69fa      	ldr	r2, [r7, #28]
 800714c:	e841 2300 	strex	r3, r2, [r1]
 8007150:	617b      	str	r3, [r7, #20]
   return(result);
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1e5      	bne.n	8007124 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2220      	movs	r2, #32
 800715c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e011      	b.n	8007190 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2220      	movs	r2, #32
 8007170:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2220      	movs	r2, #32
 8007176:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3758      	adds	r7, #88	@ 0x58
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	603b      	str	r3, [r7, #0]
 80071a4:	4613      	mov	r3, r2
 80071a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071a8:	e04f      	b.n	800724a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b0:	d04b      	beq.n	800724a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071b2:	f7fb f85b 	bl	800226c <HAL_GetTick>
 80071b6:	4602      	mov	r2, r0
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	69ba      	ldr	r2, [r7, #24]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d302      	bcc.n	80071c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d101      	bne.n	80071cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80071c8:	2303      	movs	r3, #3
 80071ca:	e04e      	b.n	800726a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 0304 	and.w	r3, r3, #4
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d037      	beq.n	800724a <UART_WaitOnFlagUntilTimeout+0xb2>
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	2b80      	cmp	r3, #128	@ 0x80
 80071de:	d034      	beq.n	800724a <UART_WaitOnFlagUntilTimeout+0xb2>
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	2b40      	cmp	r3, #64	@ 0x40
 80071e4:	d031      	beq.n	800724a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	69db      	ldr	r3, [r3, #28]
 80071ec:	f003 0308 	and.w	r3, r3, #8
 80071f0:	2b08      	cmp	r3, #8
 80071f2:	d110      	bne.n	8007216 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2208      	movs	r2, #8
 80071fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f000 f8ff 	bl	8007400 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2208      	movs	r2, #8
 8007206:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	e029      	b.n	800726a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	69db      	ldr	r3, [r3, #28]
 800721c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007220:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007224:	d111      	bne.n	800724a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800722e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f000 f8e5 	bl	8007400 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2220      	movs	r2, #32
 800723a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2200      	movs	r2, #0
 8007242:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	e00f      	b.n	800726a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	69da      	ldr	r2, [r3, #28]
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	4013      	ands	r3, r2
 8007254:	68ba      	ldr	r2, [r7, #8]
 8007256:	429a      	cmp	r2, r3
 8007258:	bf0c      	ite	eq
 800725a:	2301      	moveq	r3, #1
 800725c:	2300      	movne	r3, #0
 800725e:	b2db      	uxtb	r3, r3
 8007260:	461a      	mov	r2, r3
 8007262:	79fb      	ldrb	r3, [r7, #7]
 8007264:	429a      	cmp	r2, r3
 8007266:	d0a0      	beq.n	80071aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
	...

08007274 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007274:	b480      	push	{r7}
 8007276:	b097      	sub	sp, #92	@ 0x5c
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	4613      	mov	r3, r2
 8007280:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	68ba      	ldr	r2, [r7, #8]
 8007286:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	88fa      	ldrh	r2, [r7, #6]
 800728c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	88fa      	ldrh	r2, [r7, #6]
 8007294:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2200      	movs	r2, #0
 800729c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072a6:	d10e      	bne.n	80072c6 <UART_Start_Receive_IT+0x52>
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d105      	bne.n	80072bc <UART_Start_Receive_IT+0x48>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80072b6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80072ba:	e02d      	b.n	8007318 <UART_Start_Receive_IT+0xa4>
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	22ff      	movs	r2, #255	@ 0xff
 80072c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80072c4:	e028      	b.n	8007318 <UART_Start_Receive_IT+0xa4>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10d      	bne.n	80072ea <UART_Start_Receive_IT+0x76>
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d104      	bne.n	80072e0 <UART_Start_Receive_IT+0x6c>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	22ff      	movs	r2, #255	@ 0xff
 80072da:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80072de:	e01b      	b.n	8007318 <UART_Start_Receive_IT+0xa4>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	227f      	movs	r2, #127	@ 0x7f
 80072e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80072e8:	e016      	b.n	8007318 <UART_Start_Receive_IT+0xa4>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072f2:	d10d      	bne.n	8007310 <UART_Start_Receive_IT+0x9c>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d104      	bne.n	8007306 <UART_Start_Receive_IT+0x92>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	227f      	movs	r2, #127	@ 0x7f
 8007300:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007304:	e008      	b.n	8007318 <UART_Start_Receive_IT+0xa4>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	223f      	movs	r2, #63	@ 0x3f
 800730a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800730e:	e003      	b.n	8007318 <UART_Start_Receive_IT+0xa4>
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2200      	movs	r2, #0
 8007314:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2222      	movs	r2, #34	@ 0x22
 8007324:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	3308      	adds	r3, #8
 800732e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007330:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007332:	e853 3f00 	ldrex	r3, [r3]
 8007336:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800733a:	f043 0301 	orr.w	r3, r3, #1
 800733e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	3308      	adds	r3, #8
 8007346:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007348:	64ba      	str	r2, [r7, #72]	@ 0x48
 800734a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800734e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007350:	e841 2300 	strex	r3, r2, [r1]
 8007354:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007356:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007358:	2b00      	cmp	r3, #0
 800735a:	d1e5      	bne.n	8007328 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007364:	d107      	bne.n	8007376 <UART_Start_Receive_IT+0x102>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d103      	bne.n	8007376 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	4a21      	ldr	r2, [pc, #132]	@ (80073f8 <UART_Start_Receive_IT+0x184>)
 8007372:	669a      	str	r2, [r3, #104]	@ 0x68
 8007374:	e002      	b.n	800737c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	4a20      	ldr	r2, [pc, #128]	@ (80073fc <UART_Start_Receive_IT+0x188>)
 800737a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d019      	beq.n	80073b8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800738c:	e853 3f00 	ldrex	r3, [r3]
 8007390:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007394:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007398:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	461a      	mov	r2, r3
 80073a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80073a4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80073a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80073aa:	e841 2300 	strex	r3, r2, [r1]
 80073ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80073b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1e6      	bne.n	8007384 <UART_Start_Receive_IT+0x110>
 80073b6:	e018      	b.n	80073ea <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	e853 3f00 	ldrex	r3, [r3]
 80073c4:	613b      	str	r3, [r7, #16]
   return(result);
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	f043 0320 	orr.w	r3, r3, #32
 80073cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	461a      	mov	r2, r3
 80073d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073d6:	623b      	str	r3, [r7, #32]
 80073d8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073da:	69f9      	ldr	r1, [r7, #28]
 80073dc:	6a3a      	ldr	r2, [r7, #32]
 80073de:	e841 2300 	strex	r3, r2, [r1]
 80073e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1e6      	bne.n	80073b8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	375c      	adds	r7, #92	@ 0x5c
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr
 80073f8:	08007867 	.word	0x08007867
 80073fc:	080076bf 	.word	0x080076bf

08007400 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007400:	b480      	push	{r7}
 8007402:	b095      	sub	sp, #84	@ 0x54
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007410:	e853 3f00 	ldrex	r3, [r3]
 8007414:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007418:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800741c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	461a      	mov	r2, r3
 8007424:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007426:	643b      	str	r3, [r7, #64]	@ 0x40
 8007428:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800742c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800742e:	e841 2300 	strex	r3, r2, [r1]
 8007432:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1e6      	bne.n	8007408 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	3308      	adds	r3, #8
 8007440:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007442:	6a3b      	ldr	r3, [r7, #32]
 8007444:	e853 3f00 	ldrex	r3, [r3]
 8007448:	61fb      	str	r3, [r7, #28]
   return(result);
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	f023 0301 	bic.w	r3, r3, #1
 8007450:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	3308      	adds	r3, #8
 8007458:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800745a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800745c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007460:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007462:	e841 2300 	strex	r3, r2, [r1]
 8007466:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1e5      	bne.n	800743a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007472:	2b01      	cmp	r3, #1
 8007474:	d118      	bne.n	80074a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	e853 3f00 	ldrex	r3, [r3]
 8007482:	60bb      	str	r3, [r7, #8]
   return(result);
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	f023 0310 	bic.w	r3, r3, #16
 800748a:	647b      	str	r3, [r7, #68]	@ 0x44
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	461a      	mov	r2, r3
 8007492:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007494:	61bb      	str	r3, [r7, #24]
 8007496:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007498:	6979      	ldr	r1, [r7, #20]
 800749a:	69ba      	ldr	r2, [r7, #24]
 800749c:	e841 2300 	strex	r3, r2, [r1]
 80074a0:	613b      	str	r3, [r7, #16]
   return(result);
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1e6      	bne.n	8007476 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2220      	movs	r2, #32
 80074ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80074bc:	bf00      	nop
 80074be:	3754      	adds	r7, #84	@ 0x54
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f7ff fa88 	bl	80069fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074ec:	bf00      	nop
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b08f      	sub	sp, #60	@ 0x3c
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007500:	2b21      	cmp	r3, #33	@ 0x21
 8007502:	d14c      	bne.n	800759e <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800750a:	b29b      	uxth	r3, r3
 800750c:	2b00      	cmp	r3, #0
 800750e:	d132      	bne.n	8007576 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007516:	6a3b      	ldr	r3, [r7, #32]
 8007518:	e853 3f00 	ldrex	r3, [r3]
 800751c:	61fb      	str	r3, [r7, #28]
   return(result);
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007524:	637b      	str	r3, [r7, #52]	@ 0x34
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	461a      	mov	r2, r3
 800752c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800752e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007530:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007532:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007534:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007536:	e841 2300 	strex	r3, r2, [r1]
 800753a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800753c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1e6      	bne.n	8007510 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	e853 3f00 	ldrex	r3, [r3]
 800754e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007556:	633b      	str	r3, [r7, #48]	@ 0x30
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	461a      	mov	r2, r3
 800755e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007560:	61bb      	str	r3, [r7, #24]
 8007562:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007564:	6979      	ldr	r1, [r7, #20]
 8007566:	69ba      	ldr	r2, [r7, #24]
 8007568:	e841 2300 	strex	r3, r2, [r1]
 800756c:	613b      	str	r3, [r7, #16]
   return(result);
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1e6      	bne.n	8007542 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007574:	e013      	b.n	800759e <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800757a:	781a      	ldrb	r2, [r3, #0]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007586:	1c5a      	adds	r2, r3, #1
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007592:	b29b      	uxth	r3, r3
 8007594:	3b01      	subs	r3, #1
 8007596:	b29a      	uxth	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800759e:	bf00      	nop
 80075a0:	373c      	adds	r7, #60	@ 0x3c
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80075aa:	b480      	push	{r7}
 80075ac:	b091      	sub	sp, #68	@ 0x44
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075b6:	2b21      	cmp	r3, #33	@ 0x21
 80075b8:	d151      	bne.n	800765e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d132      	bne.n	800762c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ce:	e853 3f00 	ldrex	r3, [r3]
 80075d2:	623b      	str	r3, [r7, #32]
   return(result);
 80075d4:	6a3b      	ldr	r3, [r7, #32]
 80075d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	461a      	mov	r2, r3
 80075e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80075e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075ec:	e841 2300 	strex	r3, r2, [r1]
 80075f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80075f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1e6      	bne.n	80075c6 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	e853 3f00 	ldrex	r3, [r3]
 8007604:	60fb      	str	r3, [r7, #12]
   return(result);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800760c:	637b      	str	r3, [r7, #52]	@ 0x34
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	461a      	mov	r2, r3
 8007614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007616:	61fb      	str	r3, [r7, #28]
 8007618:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761a:	69b9      	ldr	r1, [r7, #24]
 800761c:	69fa      	ldr	r2, [r7, #28]
 800761e:	e841 2300 	strex	r3, r2, [r1]
 8007622:	617b      	str	r3, [r7, #20]
   return(result);
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1e6      	bne.n	80075f8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800762a:	e018      	b.n	800765e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007630:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007632:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007634:	881b      	ldrh	r3, [r3, #0]
 8007636:	461a      	mov	r2, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007640:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007646:	1c9a      	adds	r2, r3, #2
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007652:	b29b      	uxth	r3, r3
 8007654:	3b01      	subs	r3, #1
 8007656:	b29a      	uxth	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800765e:	bf00      	nop
 8007660:	3744      	adds	r7, #68	@ 0x44
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b088      	sub	sp, #32
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	e853 3f00 	ldrex	r3, [r3]
 800767e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007686:	61fb      	str	r3, [r7, #28]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	461a      	mov	r2, r3
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	61bb      	str	r3, [r7, #24]
 8007692:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007694:	6979      	ldr	r1, [r7, #20]
 8007696:	69ba      	ldr	r2, [r7, #24]
 8007698:	e841 2300 	strex	r3, r2, [r1]
 800769c:	613b      	str	r3, [r7, #16]
   return(result);
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1e6      	bne.n	8007672 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2220      	movs	r2, #32
 80076a8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f7f9 f9af 	bl	8000a14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076b6:	bf00      	nop
 80076b8:	3720      	adds	r7, #32
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b09c      	sub	sp, #112	@ 0x70
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80076cc:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076d6:	2b22      	cmp	r3, #34	@ 0x22
 80076d8:	f040 80b9 	bne.w	800784e <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076e2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80076e6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80076ea:	b2d9      	uxtb	r1, r3
 80076ec:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80076f0:	b2da      	uxtb	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076f6:	400a      	ands	r2, r1
 80076f8:	b2d2      	uxtb	r2, r2
 80076fa:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007700:	1c5a      	adds	r2, r3, #1
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800770c:	b29b      	uxth	r3, r3
 800770e:	3b01      	subs	r3, #1
 8007710:	b29a      	uxth	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800771e:	b29b      	uxth	r3, r3
 8007720:	2b00      	cmp	r3, #0
 8007722:	f040 809c 	bne.w	800785e <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800772e:	e853 3f00 	ldrex	r3, [r3]
 8007732:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007734:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007736:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800773a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	461a      	mov	r2, r3
 8007742:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007744:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007746:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007748:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800774a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800774c:	e841 2300 	strex	r3, r2, [r1]
 8007750:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007752:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1e6      	bne.n	8007726 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	3308      	adds	r3, #8
 800775e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007762:	e853 3f00 	ldrex	r3, [r3]
 8007766:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800776a:	f023 0301 	bic.w	r3, r3, #1
 800776e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	3308      	adds	r3, #8
 8007776:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007778:	647a      	str	r2, [r7, #68]	@ 0x44
 800777a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800777e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007780:	e841 2300 	strex	r3, r2, [r1]
 8007784:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007788:	2b00      	cmp	r3, #0
 800778a:	d1e5      	bne.n	8007758 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2220      	movs	r2, #32
 8007790:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d018      	beq.n	80077e0 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b6:	e853 3f00 	ldrex	r3, [r3]
 80077ba:	623b      	str	r3, [r7, #32]
   return(result);
 80077bc:	6a3b      	ldr	r3, [r7, #32]
 80077be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80077c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	461a      	mov	r2, r3
 80077ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80077ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077d4:	e841 2300 	strex	r3, r2, [r1]
 80077d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80077da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1e6      	bne.n	80077ae <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d12e      	bne.n	8007846 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	e853 3f00 	ldrex	r3, [r3]
 80077fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f023 0310 	bic.w	r3, r3, #16
 8007802:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	461a      	mov	r2, r3
 800780a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800780c:	61fb      	str	r3, [r7, #28]
 800780e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007810:	69b9      	ldr	r1, [r7, #24]
 8007812:	69fa      	ldr	r2, [r7, #28]
 8007814:	e841 2300 	strex	r3, r2, [r1]
 8007818:	617b      	str	r3, [r7, #20]
   return(result);
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1e6      	bne.n	80077ee <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	69db      	ldr	r3, [r3, #28]
 8007826:	f003 0310 	and.w	r3, r3, #16
 800782a:	2b10      	cmp	r3, #16
 800782c:	d103      	bne.n	8007836 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2210      	movs	r2, #16
 8007834:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800783c:	4619      	mov	r1, r3
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f7ff f8e6 	bl	8006a10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007844:	e00b      	b.n	800785e <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f7f9 f8fc 	bl	8000a44 <HAL_UART_RxCpltCallback>
}
 800784c:	e007      	b.n	800785e <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	699a      	ldr	r2, [r3, #24]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f042 0208 	orr.w	r2, r2, #8
 800785c:	619a      	str	r2, [r3, #24]
}
 800785e:	bf00      	nop
 8007860:	3770      	adds	r7, #112	@ 0x70
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b09c      	sub	sp, #112	@ 0x70
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007874:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800787e:	2b22      	cmp	r3, #34	@ 0x22
 8007880:	f040 80b9 	bne.w	80079f6 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800788a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007892:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007894:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007898:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800789c:	4013      	ands	r3, r2
 800789e:	b29a      	uxth	r2, r3
 80078a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80078a2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078a8:	1c9a      	adds	r2, r3, #2
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	3b01      	subs	r3, #1
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	f040 809c 	bne.w	8007a06 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078d6:	e853 3f00 	ldrex	r3, [r3]
 80078da:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80078dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	461a      	mov	r2, r3
 80078ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80078ee:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80078f2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80078f4:	e841 2300 	strex	r3, r2, [r1]
 80078f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80078fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d1e6      	bne.n	80078ce <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	3308      	adds	r3, #8
 8007906:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800790a:	e853 3f00 	ldrex	r3, [r3]
 800790e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007912:	f023 0301 	bic.w	r3, r3, #1
 8007916:	663b      	str	r3, [r7, #96]	@ 0x60
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	3308      	adds	r3, #8
 800791e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007920:	643a      	str	r2, [r7, #64]	@ 0x40
 8007922:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007924:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007926:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007928:	e841 2300 	strex	r3, r2, [r1]
 800792c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800792e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1e5      	bne.n	8007900 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2220      	movs	r2, #32
 8007938:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007952:	2b00      	cmp	r3, #0
 8007954:	d018      	beq.n	8007988 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795c:	6a3b      	ldr	r3, [r7, #32]
 800795e:	e853 3f00 	ldrex	r3, [r3]
 8007962:	61fb      	str	r3, [r7, #28]
   return(result);
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800796a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	461a      	mov	r2, r3
 8007972:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007974:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007976:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007978:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800797a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800797c:	e841 2300 	strex	r3, r2, [r1]
 8007980:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007984:	2b00      	cmp	r3, #0
 8007986:	d1e6      	bne.n	8007956 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800798c:	2b01      	cmp	r3, #1
 800798e:	d12e      	bne.n	80079ee <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	e853 3f00 	ldrex	r3, [r3]
 80079a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	f023 0310 	bic.w	r3, r3, #16
 80079aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	461a      	mov	r2, r3
 80079b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80079b4:	61bb      	str	r3, [r7, #24]
 80079b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b8:	6979      	ldr	r1, [r7, #20]
 80079ba:	69ba      	ldr	r2, [r7, #24]
 80079bc:	e841 2300 	strex	r3, r2, [r1]
 80079c0:	613b      	str	r3, [r7, #16]
   return(result);
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1e6      	bne.n	8007996 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	69db      	ldr	r3, [r3, #28]
 80079ce:	f003 0310 	and.w	r3, r3, #16
 80079d2:	2b10      	cmp	r3, #16
 80079d4:	d103      	bne.n	80079de <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2210      	movs	r2, #16
 80079dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80079e4:	4619      	mov	r1, r3
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f7ff f812 	bl	8006a10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80079ec:	e00b      	b.n	8007a06 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f7f9 f828 	bl	8000a44 <HAL_UART_RxCpltCallback>
}
 80079f4:	e007      	b.n	8007a06 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	699a      	ldr	r2, [r3, #24]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f042 0208 	orr.w	r2, r2, #8
 8007a04:	619a      	str	r2, [r3, #24]
}
 8007a06:	bf00      	nop
 8007a08:	3770      	adds	r7, #112	@ 0x70
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <memset>:
 8007a0e:	4402      	add	r2, r0
 8007a10:	4603      	mov	r3, r0
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d100      	bne.n	8007a18 <memset+0xa>
 8007a16:	4770      	bx	lr
 8007a18:	f803 1b01 	strb.w	r1, [r3], #1
 8007a1c:	e7f9      	b.n	8007a12 <memset+0x4>

08007a1e <strstr>:
 8007a1e:	780a      	ldrb	r2, [r1, #0]
 8007a20:	b570      	push	{r4, r5, r6, lr}
 8007a22:	b96a      	cbnz	r2, 8007a40 <strstr+0x22>
 8007a24:	bd70      	pop	{r4, r5, r6, pc}
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d109      	bne.n	8007a3e <strstr+0x20>
 8007a2a:	460c      	mov	r4, r1
 8007a2c:	4605      	mov	r5, r0
 8007a2e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d0f6      	beq.n	8007a24 <strstr+0x6>
 8007a36:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007a3a:	429e      	cmp	r6, r3
 8007a3c:	d0f7      	beq.n	8007a2e <strstr+0x10>
 8007a3e:	3001      	adds	r0, #1
 8007a40:	7803      	ldrb	r3, [r0, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1ef      	bne.n	8007a26 <strstr+0x8>
 8007a46:	4618      	mov	r0, r3
 8007a48:	e7ec      	b.n	8007a24 <strstr+0x6>
	...

08007a4c <__libc_init_array>:
 8007a4c:	b570      	push	{r4, r5, r6, lr}
 8007a4e:	4d0d      	ldr	r5, [pc, #52]	@ (8007a84 <__libc_init_array+0x38>)
 8007a50:	4c0d      	ldr	r4, [pc, #52]	@ (8007a88 <__libc_init_array+0x3c>)
 8007a52:	1b64      	subs	r4, r4, r5
 8007a54:	10a4      	asrs	r4, r4, #2
 8007a56:	2600      	movs	r6, #0
 8007a58:	42a6      	cmp	r6, r4
 8007a5a:	d109      	bne.n	8007a70 <__libc_init_array+0x24>
 8007a5c:	4d0b      	ldr	r5, [pc, #44]	@ (8007a8c <__libc_init_array+0x40>)
 8007a5e:	4c0c      	ldr	r4, [pc, #48]	@ (8007a90 <__libc_init_array+0x44>)
 8007a60:	f000 f818 	bl	8007a94 <_init>
 8007a64:	1b64      	subs	r4, r4, r5
 8007a66:	10a4      	asrs	r4, r4, #2
 8007a68:	2600      	movs	r6, #0
 8007a6a:	42a6      	cmp	r6, r4
 8007a6c:	d105      	bne.n	8007a7a <__libc_init_array+0x2e>
 8007a6e:	bd70      	pop	{r4, r5, r6, pc}
 8007a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a74:	4798      	blx	r3
 8007a76:	3601      	adds	r6, #1
 8007a78:	e7ee      	b.n	8007a58 <__libc_init_array+0xc>
 8007a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a7e:	4798      	blx	r3
 8007a80:	3601      	adds	r6, #1
 8007a82:	e7f2      	b.n	8007a6a <__libc_init_array+0x1e>
 8007a84:	08007ae0 	.word	0x08007ae0
 8007a88:	08007ae0 	.word	0x08007ae0
 8007a8c:	08007ae0 	.word	0x08007ae0
 8007a90:	08007ae4 	.word	0x08007ae4

08007a94 <_init>:
 8007a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a96:	bf00      	nop
 8007a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a9a:	bc08      	pop	{r3}
 8007a9c:	469e      	mov	lr, r3
 8007a9e:	4770      	bx	lr

08007aa0 <_fini>:
 8007aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aa2:	bf00      	nop
 8007aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aa6:	bc08      	pop	{r3}
 8007aa8:	469e      	mov	lr, r3
 8007aaa:	4770      	bx	lr
