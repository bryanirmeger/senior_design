
robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063e0  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080065d8  080065d8  000075d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006620  08006620  00008018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006620  08006620  00007620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006628  08006628  00008018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006628  08006628  00007628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800662c  0800662c  0000762c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08006630  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  20000018  08006648  00008018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08006648  000082d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a5b  00000000  00000000  00008046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000269e  00000000  00000000  0001baa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001110  00000000  00000000  0001e140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d85  00000000  00000000  0001f250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000022be  00000000  00000000  0001ffd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000154dd  00000000  00000000  00022293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc44f  00000000  00000000  00037770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00133bbf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004890  00000000  00000000  00133c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  00138494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000018 	.word	0x20000018
 8000214:	00000000 	.word	0x00000000
 8000218:	080065c0 	.word	0x080065c0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000001c 	.word	0x2000001c
 8000234:	080065c0 	.word	0x080065c0

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b988 	b.w	8000560 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	468e      	mov	lr, r1
 8000270:	4604      	mov	r4, r0
 8000272:	4688      	mov	r8, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d962      	bls.n	8000344 <__udivmoddi4+0xdc>
 800027e:	fab2 f682 	clz	r6, r2
 8000282:	b14e      	cbz	r6, 8000298 <__udivmoddi4+0x30>
 8000284:	f1c6 0320 	rsb	r3, r6, #32
 8000288:	fa01 f806 	lsl.w	r8, r1, r6
 800028c:	fa20 f303 	lsr.w	r3, r0, r3
 8000290:	40b7      	lsls	r7, r6
 8000292:	ea43 0808 	orr.w	r8, r3, r8
 8000296:	40b4      	lsls	r4, r6
 8000298:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800029c:	fa1f fc87 	uxth.w	ip, r7
 80002a0:	fbb8 f1fe 	udiv	r1, r8, lr
 80002a4:	0c23      	lsrs	r3, r4, #16
 80002a6:	fb0e 8811 	mls	r8, lr, r1, r8
 80002aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ae:	fb01 f20c 	mul.w	r2, r1, ip
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002bc:	f080 80ea 	bcs.w	8000494 <__udivmoddi4+0x22c>
 80002c0:	429a      	cmp	r2, r3
 80002c2:	f240 80e7 	bls.w	8000494 <__udivmoddi4+0x22c>
 80002c6:	3902      	subs	r1, #2
 80002c8:	443b      	add	r3, r7
 80002ca:	1a9a      	subs	r2, r3, r2
 80002cc:	b2a3      	uxth	r3, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002da:	fb00 fc0c 	mul.w	ip, r0, ip
 80002de:	459c      	cmp	ip, r3
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0x8e>
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e8:	f080 80d6 	bcs.w	8000498 <__udivmoddi4+0x230>
 80002ec:	459c      	cmp	ip, r3
 80002ee:	f240 80d3 	bls.w	8000498 <__udivmoddi4+0x230>
 80002f2:	443b      	add	r3, r7
 80002f4:	3802      	subs	r0, #2
 80002f6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fa:	eba3 030c 	sub.w	r3, r3, ip
 80002fe:	2100      	movs	r1, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0xa2>
 8000302:	40f3      	lsrs	r3, r6
 8000304:	2200      	movs	r2, #0
 8000306:	e9c5 3200 	strd	r3, r2, [r5]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d905      	bls.n	800031e <__udivmoddi4+0xb6>
 8000312:	b10d      	cbz	r5, 8000318 <__udivmoddi4+0xb0>
 8000314:	e9c5 0100 	strd	r0, r1, [r5]
 8000318:	2100      	movs	r1, #0
 800031a:	4608      	mov	r0, r1
 800031c:	e7f5      	b.n	800030a <__udivmoddi4+0xa2>
 800031e:	fab3 f183 	clz	r1, r3
 8000322:	2900      	cmp	r1, #0
 8000324:	d146      	bne.n	80003b4 <__udivmoddi4+0x14c>
 8000326:	4573      	cmp	r3, lr
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xc8>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 8105 	bhi.w	800053a <__udivmoddi4+0x2d2>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb6e 0203 	sbc.w	r2, lr, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4690      	mov	r8, r2
 800033a:	2d00      	cmp	r5, #0
 800033c:	d0e5      	beq.n	800030a <__udivmoddi4+0xa2>
 800033e:	e9c5 4800 	strd	r4, r8, [r5]
 8000342:	e7e2      	b.n	800030a <__udivmoddi4+0xa2>
 8000344:	2a00      	cmp	r2, #0
 8000346:	f000 8090 	beq.w	800046a <__udivmoddi4+0x202>
 800034a:	fab2 f682 	clz	r6, r2
 800034e:	2e00      	cmp	r6, #0
 8000350:	f040 80a4 	bne.w	800049c <__udivmoddi4+0x234>
 8000354:	1a8a      	subs	r2, r1, r2
 8000356:	0c03      	lsrs	r3, r0, #16
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	b280      	uxth	r0, r0
 800035e:	b2bc      	uxth	r4, r7
 8000360:	2101      	movs	r1, #1
 8000362:	fbb2 fcfe 	udiv	ip, r2, lr
 8000366:	fb0e 221c 	mls	r2, lr, ip, r2
 800036a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800036e:	fb04 f20c 	mul.w	r2, r4, ip
 8000372:	429a      	cmp	r2, r3
 8000374:	d907      	bls.n	8000386 <__udivmoddi4+0x11e>
 8000376:	18fb      	adds	r3, r7, r3
 8000378:	f10c 38ff 	add.w	r8, ip, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x11c>
 800037e:	429a      	cmp	r2, r3
 8000380:	f200 80e0 	bhi.w	8000544 <__udivmoddi4+0x2dc>
 8000384:	46c4      	mov	ip, r8
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	fbb3 f2fe 	udiv	r2, r3, lr
 800038c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000390:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000394:	fb02 f404 	mul.w	r4, r2, r4
 8000398:	429c      	cmp	r4, r3
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x144>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f102 30ff 	add.w	r0, r2, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x142>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f200 80ca 	bhi.w	800053e <__udivmoddi4+0x2d6>
 80003aa:	4602      	mov	r2, r0
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0x98>
 80003b4:	f1c1 0620 	rsb	r6, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 f706 	lsr.w	r7, r2, r6
 80003be:	431f      	orrs	r7, r3
 80003c0:	fa0e f401 	lsl.w	r4, lr, r1
 80003c4:	fa20 f306 	lsr.w	r3, r0, r6
 80003c8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003cc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d0:	4323      	orrs	r3, r4
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	fa1f fc87 	uxth.w	ip, r7
 80003da:	fbbe f0f9 	udiv	r0, lr, r9
 80003de:	0c1c      	lsrs	r4, r3, #16
 80003e0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003e4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003ec:	45a6      	cmp	lr, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d909      	bls.n	8000408 <__udivmoddi4+0x1a0>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003fa:	f080 809c 	bcs.w	8000536 <__udivmoddi4+0x2ce>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f240 8099 	bls.w	8000536 <__udivmoddi4+0x2ce>
 8000404:	3802      	subs	r0, #2
 8000406:	443c      	add	r4, r7
 8000408:	eba4 040e 	sub.w	r4, r4, lr
 800040c:	fa1f fe83 	uxth.w	lr, r3
 8000410:	fbb4 f3f9 	udiv	r3, r4, r9
 8000414:	fb09 4413 	mls	r4, r9, r3, r4
 8000418:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800041c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000420:	45a4      	cmp	ip, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1ce>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f103 3eff 	add.w	lr, r3, #4294967295
 800042a:	f080 8082 	bcs.w	8000532 <__udivmoddi4+0x2ca>
 800042e:	45a4      	cmp	ip, r4
 8000430:	d97f      	bls.n	8000532 <__udivmoddi4+0x2ca>
 8000432:	3b02      	subs	r3, #2
 8000434:	443c      	add	r4, r7
 8000436:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000442:	4564      	cmp	r4, ip
 8000444:	4673      	mov	r3, lr
 8000446:	46e1      	mov	r9, ip
 8000448:	d362      	bcc.n	8000510 <__udivmoddi4+0x2a8>
 800044a:	d05f      	beq.n	800050c <__udivmoddi4+0x2a4>
 800044c:	b15d      	cbz	r5, 8000466 <__udivmoddi4+0x1fe>
 800044e:	ebb8 0203 	subs.w	r2, r8, r3
 8000452:	eb64 0409 	sbc.w	r4, r4, r9
 8000456:	fa04 f606 	lsl.w	r6, r4, r6
 800045a:	fa22 f301 	lsr.w	r3, r2, r1
 800045e:	431e      	orrs	r6, r3
 8000460:	40cc      	lsrs	r4, r1
 8000462:	e9c5 6400 	strd	r6, r4, [r5]
 8000466:	2100      	movs	r1, #0
 8000468:	e74f      	b.n	800030a <__udivmoddi4+0xa2>
 800046a:	fbb1 fcf2 	udiv	ip, r1, r2
 800046e:	0c01      	lsrs	r1, r0, #16
 8000470:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000474:	b280      	uxth	r0, r0
 8000476:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800047a:	463b      	mov	r3, r7
 800047c:	4638      	mov	r0, r7
 800047e:	463c      	mov	r4, r7
 8000480:	46b8      	mov	r8, r7
 8000482:	46be      	mov	lr, r7
 8000484:	2620      	movs	r6, #32
 8000486:	fbb1 f1f7 	udiv	r1, r1, r7
 800048a:	eba2 0208 	sub.w	r2, r2, r8
 800048e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000492:	e766      	b.n	8000362 <__udivmoddi4+0xfa>
 8000494:	4601      	mov	r1, r0
 8000496:	e718      	b.n	80002ca <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e72c      	b.n	80002f6 <__udivmoddi4+0x8e>
 800049c:	f1c6 0220 	rsb	r2, r6, #32
 80004a0:	fa2e f302 	lsr.w	r3, lr, r2
 80004a4:	40b7      	lsls	r7, r6
 80004a6:	40b1      	lsls	r1, r6
 80004a8:	fa20 f202 	lsr.w	r2, r0, r2
 80004ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b0:	430a      	orrs	r2, r1
 80004b2:	fbb3 f8fe 	udiv	r8, r3, lr
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	fb0e 3318 	mls	r3, lr, r8, r3
 80004bc:	0c11      	lsrs	r1, r2, #16
 80004be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c2:	fb08 f904 	mul.w	r9, r8, r4
 80004c6:	40b0      	lsls	r0, r6
 80004c8:	4589      	cmp	r9, r1
 80004ca:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ce:	b280      	uxth	r0, r0
 80004d0:	d93e      	bls.n	8000550 <__udivmoddi4+0x2e8>
 80004d2:	1879      	adds	r1, r7, r1
 80004d4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d8:	d201      	bcs.n	80004de <__udivmoddi4+0x276>
 80004da:	4589      	cmp	r9, r1
 80004dc:	d81f      	bhi.n	800051e <__udivmoddi4+0x2b6>
 80004de:	eba1 0109 	sub.w	r1, r1, r9
 80004e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e6:	fb09 f804 	mul.w	r8, r9, r4
 80004ea:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ee:	b292      	uxth	r2, r2
 80004f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f4:	4542      	cmp	r2, r8
 80004f6:	d229      	bcs.n	800054c <__udivmoddi4+0x2e4>
 80004f8:	18ba      	adds	r2, r7, r2
 80004fa:	f109 31ff 	add.w	r1, r9, #4294967295
 80004fe:	d2c4      	bcs.n	800048a <__udivmoddi4+0x222>
 8000500:	4542      	cmp	r2, r8
 8000502:	d2c2      	bcs.n	800048a <__udivmoddi4+0x222>
 8000504:	f1a9 0102 	sub.w	r1, r9, #2
 8000508:	443a      	add	r2, r7
 800050a:	e7be      	b.n	800048a <__udivmoddi4+0x222>
 800050c:	45f0      	cmp	r8, lr
 800050e:	d29d      	bcs.n	800044c <__udivmoddi4+0x1e4>
 8000510:	ebbe 0302 	subs.w	r3, lr, r2
 8000514:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000518:	3801      	subs	r0, #1
 800051a:	46e1      	mov	r9, ip
 800051c:	e796      	b.n	800044c <__udivmoddi4+0x1e4>
 800051e:	eba7 0909 	sub.w	r9, r7, r9
 8000522:	4449      	add	r1, r9
 8000524:	f1a8 0c02 	sub.w	ip, r8, #2
 8000528:	fbb1 f9fe 	udiv	r9, r1, lr
 800052c:	fb09 f804 	mul.w	r8, r9, r4
 8000530:	e7db      	b.n	80004ea <__udivmoddi4+0x282>
 8000532:	4673      	mov	r3, lr
 8000534:	e77f      	b.n	8000436 <__udivmoddi4+0x1ce>
 8000536:	4650      	mov	r0, sl
 8000538:	e766      	b.n	8000408 <__udivmoddi4+0x1a0>
 800053a:	4608      	mov	r0, r1
 800053c:	e6fd      	b.n	800033a <__udivmoddi4+0xd2>
 800053e:	443b      	add	r3, r7
 8000540:	3a02      	subs	r2, #2
 8000542:	e733      	b.n	80003ac <__udivmoddi4+0x144>
 8000544:	f1ac 0c02 	sub.w	ip, ip, #2
 8000548:	443b      	add	r3, r7
 800054a:	e71c      	b.n	8000386 <__udivmoddi4+0x11e>
 800054c:	4649      	mov	r1, r9
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x222>
 8000550:	eba1 0109 	sub.w	r1, r1, r9
 8000554:	46c4      	mov	ip, r8
 8000556:	fbb1 f9fe 	udiv	r9, r1, lr
 800055a:	fb09 f804 	mul.w	r8, r9, r4
 800055e:	e7c4      	b.n	80004ea <__udivmoddi4+0x282>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af02      	add	r7, sp, #8
 800056a:	4603      	mov	r3, r0
 800056c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	f023 030f 	bic.w	r3, r3, #15
 8000574:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	011b      	lsls	r3, r3, #4
 800057a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	f043 030c 	orr.w	r3, r3, #12
 8000582:	b2db      	uxtb	r3, r3
 8000584:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000586:	7bfb      	ldrb	r3, [r7, #15]
 8000588:	f043 0308 	orr.w	r3, r3, #8
 800058c:	b2db      	uxtb	r3, r3
 800058e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000590:	7bbb      	ldrb	r3, [r7, #14]
 8000592:	f043 030c 	orr.w	r3, r3, #12
 8000596:	b2db      	uxtb	r3, r3
 8000598:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800059a:	7bbb      	ldrb	r3, [r7, #14]
 800059c:	f043 0308 	orr.w	r3, r3, #8
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005a4:	f107 0208 	add.w	r2, r7, #8
 80005a8:	2364      	movs	r3, #100	@ 0x64
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	2304      	movs	r3, #4
 80005ae:	214e      	movs	r1, #78	@ 0x4e
 80005b0:	4803      	ldr	r0, [pc, #12]	@ (80005c0 <lcd_send_cmd+0x5c>)
 80005b2:	f001 fee7 	bl	8002384 <HAL_I2C_Master_Transmit>
}
 80005b6:	bf00      	nop
 80005b8:	3710      	adds	r7, #16
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000034 	.word	0x20000034

080005c4 <lcd_send_data>:

void lcd_send_data (char data)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af02      	add	r7, sp, #8
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	f023 030f 	bic.w	r3, r3, #15
 80005d4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	011b      	lsls	r3, r3, #4
 80005da:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	f043 030d 	orr.w	r3, r3, #13
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	f043 0309 	orr.w	r3, r3, #9
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80005f0:	7bbb      	ldrb	r3, [r7, #14]
 80005f2:	f043 030d 	orr.w	r3, r3, #13
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80005fa:	7bbb      	ldrb	r3, [r7, #14]
 80005fc:	f043 0309 	orr.w	r3, r3, #9
 8000600:	b2db      	uxtb	r3, r3
 8000602:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000604:	f107 0208 	add.w	r2, r7, #8
 8000608:	2364      	movs	r3, #100	@ 0x64
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	2304      	movs	r3, #4
 800060e:	214e      	movs	r1, #78	@ 0x4e
 8000610:	4803      	ldr	r0, [pc, #12]	@ (8000620 <lcd_send_data+0x5c>)
 8000612:	f001 feb7 	bl	8002384 <HAL_I2C_Master_Transmit>
}
 8000616:	bf00      	nop
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000034 	.word	0x20000034

08000624 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
    switch (row)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d003      	beq.n	800063c <lcd_put_cur+0x18>
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b01      	cmp	r3, #1
 8000638:	d005      	beq.n	8000646 <lcd_put_cur+0x22>
 800063a:	e009      	b.n	8000650 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000642:	603b      	str	r3, [r7, #0]
            break;
 8000644:	e004      	b.n	8000650 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800064c:	603b      	str	r3, [r7, #0]
            break;
 800064e:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	b2db      	uxtb	r3, r3
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff ff85 	bl	8000564 <lcd_send_cmd>
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <lcd_init>:


void lcd_init (void)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000666:	2032      	movs	r0, #50	@ 0x32
 8000668:	f001 f9c6 	bl	80019f8 <HAL_Delay>
	lcd_send_cmd (0x30);
 800066c:	2030      	movs	r0, #48	@ 0x30
 800066e:	f7ff ff79 	bl	8000564 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000672:	2005      	movs	r0, #5
 8000674:	f001 f9c0 	bl	80019f8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000678:	2030      	movs	r0, #48	@ 0x30
 800067a:	f7ff ff73 	bl	8000564 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800067e:	2001      	movs	r0, #1
 8000680:	f001 f9ba 	bl	80019f8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000684:	2030      	movs	r0, #48	@ 0x30
 8000686:	f7ff ff6d 	bl	8000564 <lcd_send_cmd>
	HAL_Delay(10);
 800068a:	200a      	movs	r0, #10
 800068c:	f001 f9b4 	bl	80019f8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000690:	2020      	movs	r0, #32
 8000692:	f7ff ff67 	bl	8000564 <lcd_send_cmd>
	HAL_Delay(10);
 8000696:	200a      	movs	r0, #10
 8000698:	f001 f9ae 	bl	80019f8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800069c:	2028      	movs	r0, #40	@ 0x28
 800069e:	f7ff ff61 	bl	8000564 <lcd_send_cmd>
	HAL_Delay(1);
 80006a2:	2001      	movs	r0, #1
 80006a4:	f001 f9a8 	bl	80019f8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80006a8:	2008      	movs	r0, #8
 80006aa:	f7ff ff5b 	bl	8000564 <lcd_send_cmd>
	HAL_Delay(1);
 80006ae:	2001      	movs	r0, #1
 80006b0:	f001 f9a2 	bl	80019f8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80006b4:	2001      	movs	r0, #1
 80006b6:	f7ff ff55 	bl	8000564 <lcd_send_cmd>
	HAL_Delay(1);
 80006ba:	2001      	movs	r0, #1
 80006bc:	f001 f99c 	bl	80019f8 <HAL_Delay>
	HAL_Delay(1);
 80006c0:	2001      	movs	r0, #1
 80006c2:	f001 f999 	bl	80019f8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80006c6:	2006      	movs	r0, #6
 80006c8:	f7ff ff4c 	bl	8000564 <lcd_send_cmd>
	HAL_Delay(1);
 80006cc:	2001      	movs	r0, #1
 80006ce:	f001 f993 	bl	80019f8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80006d2:	200c      	movs	r0, #12
 80006d4:	f7ff ff46 	bl	8000564 <lcd_send_cmd>
}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}

080006dc <lcd_send_string>:

void lcd_send_string (char *str)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80006e4:	e006      	b.n	80006f4 <lcd_send_string+0x18>
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	1c5a      	adds	r2, r3, #1
 80006ea:	607a      	str	r2, [r7, #4]
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ff68 	bl	80005c4 <lcd_send_data>
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d1f4      	bne.n	80006e6 <lcd_send_string+0xa>
}
 80006fc:	bf00      	nop
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <Interpret_Commands>:
/* USER CODE BEGIN 0 */

/************************ DEVICE COMMUNICATION (BLUETOOTH) ********************/

// Interpret commands
void Interpret_Commands(uint8_t *rx_buffer) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	// Respond after establishing connection with Jetson
	if (strstr((const char * ) rx_buffer, "jrdy")) {
 8000710:	490c      	ldr	r1, [pc, #48]	@ (8000744 <Interpret_Commands+0x3c>)
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f005 ff19 	bl	800654a <strstr>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d005      	beq.n	800072a <Interpret_Commands+0x22>
		Send_to_Base('0', ready_confirm_string, 1);
 800071e:	2201      	movs	r2, #1
 8000720:	4909      	ldr	r1, [pc, #36]	@ (8000748 <Interpret_Commands+0x40>)
 8000722:	2030      	movs	r0, #48	@ 0x30
 8000724:	f000 f814 	bl	8000750 <Send_to_Base>
	else if (strstr((const char * ) rx_buffer, "poll")) {
		poll_ultrasonic();
		// TODO: Delete line below after debugging
		// Send_to_Base('0', test2, 1);
	}
}
 8000728:	e008      	b.n	800073c <Interpret_Commands+0x34>
	else if (strstr((const char * ) rx_buffer, "poll")) {
 800072a:	4908      	ldr	r1, [pc, #32]	@ (800074c <Interpret_Commands+0x44>)
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f005 ff0c 	bl	800654a <strstr>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <Interpret_Commands+0x34>
		poll_ultrasonic();
 8000738:	f000 f8a8 	bl	800088c <poll_ultrasonic>
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	080065d8 	.word	0x080065d8
 8000748:	20000000 	.word	0x20000000
 800074c:	080065e0 	.word	0x080065e0

08000750 <Send_to_Base>:

// Function to send bytes to Base
void Send_to_Base (uint8_t addr, uint8_t *data, uint8_t is_ready) {
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	6039      	str	r1, [r7, #0]
 800075a:	71fb      	strb	r3, [r7, #7]
 800075c:	4613      	mov	r3, r2
 800075e:	71bb      	strb	r3, [r7, #6]
	while (base_state != BASE_STATE_READY) {}
 8000760:	bf00      	nop
 8000762:	4b17      	ldr	r3, [pc, #92]	@ (80007c0 <Send_to_Base+0x70>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	b2db      	uxtb	r3, r3
 8000768:	2b01      	cmp	r3, #1
 800076a:	d1fa      	bne.n	8000762 <Send_to_Base+0x12>
	// Assign address
	base_tx_buffer[0] = addr;
 800076c:	4a15      	ldr	r2, [pc, #84]	@ (80007c4 <Send_to_Base+0x74>)
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	7013      	strb	r3, [r2, #0]
	// Assign data (until before the last byte)
	for (int i = 1; i < BUFFER_SIZE - 1; i++) {
 8000772:	2301      	movs	r3, #1
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	e00c      	b.n	8000792 <Send_to_Base+0x42>
		base_tx_buffer[i] = data[i - 1];
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	3b01      	subs	r3, #1
 800077c:	683a      	ldr	r2, [r7, #0]
 800077e:	4413      	add	r3, r2
 8000780:	7819      	ldrb	r1, [r3, #0]
 8000782:	4a10      	ldr	r2, [pc, #64]	@ (80007c4 <Send_to_Base+0x74>)
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	4413      	add	r3, r2
 8000788:	460a      	mov	r2, r1
 800078a:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < BUFFER_SIZE - 1; i++) {
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	3301      	adds	r3, #1
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	2b06      	cmp	r3, #6
 8000796:	ddef      	ble.n	8000778 <Send_to_Base+0x28>
	}
	// Assign status byte
	if (is_ready) {
 8000798:	79bb      	ldrb	r3, [r7, #6]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d003      	beq.n	80007a6 <Send_to_Base+0x56>
		base_tx_buffer[BUFFER_SIZE - 1] = 'r';
 800079e:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <Send_to_Base+0x74>)
 80007a0:	2272      	movs	r2, #114	@ 0x72
 80007a2:	71da      	strb	r2, [r3, #7]
 80007a4:	e002      	b.n	80007ac <Send_to_Base+0x5c>
	}
	else {
		base_tx_buffer[BUFFER_SIZE - 1] = 'n';
 80007a6:	4b07      	ldr	r3, [pc, #28]	@ (80007c4 <Send_to_Base+0x74>)
 80007a8:	226e      	movs	r2, #110	@ 0x6e
 80007aa:	71da      	strb	r2, [r3, #7]
	}
	// Transmit data packet
	HAL_UART_Transmit_IT(&huart2, base_tx_buffer, BUFFER_SIZE);
 80007ac:	2208      	movs	r2, #8
 80007ae:	4905      	ldr	r1, [pc, #20]	@ (80007c4 <Send_to_Base+0x74>)
 80007b0:	4805      	ldr	r0, [pc, #20]	@ (80007c8 <Send_to_Base+0x78>)
 80007b2:	f004 fb2f 	bl	8004e14 <HAL_UART_Transmit_IT>
}
 80007b6:	bf00      	nop
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200002a4 	.word	0x200002a4
 80007c4:	2000029c 	.word	0x2000029c
 80007c8:	2000020c 	.word	0x2000020c

080007cc <Receive_from_Base>:

// Function to Receive bytes from Base
void Receive_from_Base(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, base_rx_buffer, BUFFER_SIZE);
 80007d0:	2208      	movs	r2, #8
 80007d2:	4903      	ldr	r1, [pc, #12]	@ (80007e0 <Receive_from_Base+0x14>)
 80007d4:	4803      	ldr	r0, [pc, #12]	@ (80007e4 <Receive_from_Base+0x18>)
 80007d6:	f004 fb7b 	bl	8004ed0 <HAL_UART_Receive_IT>
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000294 	.word	0x20000294
 80007e4:	2000020c 	.word	0x2000020c

080007e8 <HAL_UART_TxCpltCallback>:

// Callback function after transmitting data
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart2.Instance) {
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <HAL_UART_TxCpltCallback+0x28>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d104      	bne.n	8000806 <HAL_UART_TxCpltCallback+0x1e>
		// Transmission fully complete, now listen for any messages from base
		base_state = BASE_STATE_BUSY;
 80007fc:	4b05      	ldr	r3, [pc, #20]	@ (8000814 <HAL_UART_TxCpltCallback+0x2c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	701a      	strb	r2, [r3, #0]
		Receive_from_Base();
 8000802:	f7ff ffe3 	bl	80007cc <Receive_from_Base>
	}
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	2000020c 	.word	0x2000020c
 8000814:	200002a4 	.word	0x200002a4

08000818 <HAL_UART_RxCpltCallback>:

// Callback function after receiving data
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart2.Instance) {
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	4b0a      	ldr	r3, [pc, #40]	@ (8000850 <HAL_UART_RxCpltCallback+0x38>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	429a      	cmp	r2, r3
 800082a:	d10d      	bne.n	8000848 <HAL_UART_RxCpltCallback+0x30>
		// Ready?
		if (base_rx_buffer[BUFFER_SIZE - 1] == 'r') {
 800082c:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <HAL_UART_RxCpltCallback+0x3c>)
 800082e:	79db      	ldrb	r3, [r3, #7]
 8000830:	2b72      	cmp	r3, #114	@ 0x72
 8000832:	d102      	bne.n	800083a <HAL_UART_RxCpltCallback+0x22>
			base_state = BASE_STATE_READY;
 8000834:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <HAL_UART_RxCpltCallback+0x40>)
 8000836:	2201      	movs	r2, #1
 8000838:	701a      	strb	r2, [r3, #0]
		}
		// Is this for Robot?
		if (base_rx_buffer[0] == '2') {
 800083a:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <HAL_UART_RxCpltCallback+0x3c>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b32      	cmp	r3, #50	@ 0x32
 8000840:	d102      	bne.n	8000848 <HAL_UART_RxCpltCallback+0x30>
			// Interpret commands
			Interpret_Commands(base_rx_buffer);
 8000842:	4804      	ldr	r0, [pc, #16]	@ (8000854 <HAL_UART_RxCpltCallback+0x3c>)
 8000844:	f7ff ff60 	bl	8000708 <Interpret_Commands>
		}
	}
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	2000020c 	.word	0x2000020c
 8000854:	20000294 	.word	0x20000294
 8000858:	200002a4 	.word	0x200002a4

0800085c <delay_in_us>:

/*************************** ULTRASONIC SENSOR READING ************************/

// Function that delays in microseconds (usec)
void delay_in_us (uint16_t time, TIM_HandleTypeDef *htim) {
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	6039      	str	r1, [r7, #0]
 8000866:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(htim, 0);
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2200      	movs	r2, #0
 800086e:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(htim) <  time);
 8000870:	bf00      	nop
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000878:	88fb      	ldrh	r3, [r7, #6]
 800087a:	429a      	cmp	r2, r3
 800087c:	d3f9      	bcc.n	8000872 <delay_in_us+0x16>
}
 800087e:	bf00      	nop
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <poll_ultrasonic>:


// Poll ultrasonic sensors
void poll_ultrasonic (void) {
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	// Front Sensor
	idx = 0;
 8000890:	4b42      	ldr	r3, [pc, #264]	@ (800099c <poll_ultrasonic+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(TRIG_PORT_FRONT, TRIG_PIN_FRONT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000896:	2201      	movs	r2, #1
 8000898:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800089c:	4840      	ldr	r0, [pc, #256]	@ (80009a0 <poll_ultrasonic+0x114>)
 800089e:	f001 fc97 	bl	80021d0 <HAL_GPIO_WritePin>
	delay_in_us(10, &htim1);  // wait for 10 us
 80008a2:	4940      	ldr	r1, [pc, #256]	@ (80009a4 <poll_ultrasonic+0x118>)
 80008a4:	200a      	movs	r0, #10
 80008a6:	f7ff ffd9 	bl	800085c <delay_in_us>
	HAL_GPIO_WritePin(TRIG_PORT_FRONT, TRIG_PIN_FRONT, GPIO_PIN_RESET);  // pull the TRIG pin low
 80008aa:	2200      	movs	r2, #0
 80008ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008b0:	483b      	ldr	r0, [pc, #236]	@ (80009a0 <poll_ultrasonic+0x114>)
 80008b2:	f001 fc8d 	bl	80021d0 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 80008b6:	4b3b      	ldr	r3, [pc, #236]	@ (80009a4 <poll_ultrasonic+0x118>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	68da      	ldr	r2, [r3, #12]
 80008bc:	4b39      	ldr	r3, [pc, #228]	@ (80009a4 <poll_ultrasonic+0x118>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f042 0202 	orr.w	r2, r2, #2
 80008c4:	60da      	str	r2, [r3, #12]
	HAL_Delay(10);
 80008c6:	200a      	movs	r0, #10
 80008c8:	f001 f896 	bl	80019f8 <HAL_Delay>

	// Back Sensor
	idx = 1;
 80008cc:	4b33      	ldr	r3, [pc, #204]	@ (800099c <poll_ultrasonic+0x110>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	601a      	str	r2, [r3, #0]
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80008d2:	2100      	movs	r1, #0
 80008d4:	4834      	ldr	r0, [pc, #208]	@ (80009a8 <poll_ultrasonic+0x11c>)
 80008d6:	f003 fae3 	bl	8003ea0 <HAL_TIM_IC_Start_IT>
	HAL_GPIO_WritePin(TRIG_PORT_BACK, TRIG_PIN_BACK, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80008da:	2201      	movs	r2, #1
 80008dc:	2180      	movs	r1, #128	@ 0x80
 80008de:	4833      	ldr	r0, [pc, #204]	@ (80009ac <poll_ultrasonic+0x120>)
 80008e0:	f001 fc76 	bl	80021d0 <HAL_GPIO_WritePin>
	delay_in_us(10, &htim3);  // wait for 10 us
 80008e4:	4930      	ldr	r1, [pc, #192]	@ (80009a8 <poll_ultrasonic+0x11c>)
 80008e6:	200a      	movs	r0, #10
 80008e8:	f7ff ffb8 	bl	800085c <delay_in_us>
	HAL_GPIO_WritePin(TRIG_PORT_BACK, TRIG_PIN_BACK, GPIO_PIN_RESET);  // pull the TRIG pin low
 80008ec:	2200      	movs	r2, #0
 80008ee:	2180      	movs	r1, #128	@ 0x80
 80008f0:	482e      	ldr	r0, [pc, #184]	@ (80009ac <poll_ultrasonic+0x120>)
 80008f2:	f001 fc6d 	bl	80021d0 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 80008f6:	4b2c      	ldr	r3, [pc, #176]	@ (80009a8 <poll_ultrasonic+0x11c>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	68da      	ldr	r2, [r3, #12]
 80008fc:	4b2a      	ldr	r3, [pc, #168]	@ (80009a8 <poll_ultrasonic+0x11c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f042 0202 	orr.w	r2, r2, #2
 8000904:	60da      	str	r2, [r3, #12]
	HAL_Delay(10);
 8000906:	200a      	movs	r0, #10
 8000908:	f001 f876 	bl	80019f8 <HAL_Delay>

	// Left Sensor
	idx = 2;
 800090c:	4b23      	ldr	r3, [pc, #140]	@ (800099c <poll_ultrasonic+0x110>)
 800090e:	2202      	movs	r2, #2
 8000910:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(TRIG_PORT_LEFT, TRIG_PIN_LEFT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000912:	2201      	movs	r2, #1
 8000914:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000918:	4825      	ldr	r0, [pc, #148]	@ (80009b0 <poll_ultrasonic+0x124>)
 800091a:	f001 fc59 	bl	80021d0 <HAL_GPIO_WritePin>
	delay_in_us(10, &htim4);  // wait for 10 us
 800091e:	4925      	ldr	r1, [pc, #148]	@ (80009b4 <poll_ultrasonic+0x128>)
 8000920:	200a      	movs	r0, #10
 8000922:	f7ff ff9b 	bl	800085c <delay_in_us>
	HAL_GPIO_WritePin(TRIG_PORT_LEFT, TRIG_PIN_LEFT, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800092c:	4820      	ldr	r0, [pc, #128]	@ (80009b0 <poll_ultrasonic+0x124>)
 800092e:	f001 fc4f 	bl	80021d0 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 8000932:	4b20      	ldr	r3, [pc, #128]	@ (80009b4 <poll_ultrasonic+0x128>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	68da      	ldr	r2, [r3, #12]
 8000938:	4b1e      	ldr	r3, [pc, #120]	@ (80009b4 <poll_ultrasonic+0x128>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f042 0202 	orr.w	r2, r2, #2
 8000940:	60da      	str	r2, [r3, #12]
	HAL_Delay(10);
 8000942:	200a      	movs	r0, #10
 8000944:	f001 f858 	bl	80019f8 <HAL_Delay>

	// Right Sensor
	idx = 3;
 8000948:	4b14      	ldr	r3, [pc, #80]	@ (800099c <poll_ultrasonic+0x110>)
 800094a:	2203      	movs	r2, #3
 800094c:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(TRIG_PORT_RIGHT, TRIG_PIN_RIGHT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800094e:	2201      	movs	r2, #1
 8000950:	2140      	movs	r1, #64	@ 0x40
 8000952:	4819      	ldr	r0, [pc, #100]	@ (80009b8 <poll_ultrasonic+0x12c>)
 8000954:	f001 fc3c 	bl	80021d0 <HAL_GPIO_WritePin>
	delay_in_us(10, &htim2);  // wait for 10 us
 8000958:	4918      	ldr	r1, [pc, #96]	@ (80009bc <poll_ultrasonic+0x130>)
 800095a:	200a      	movs	r0, #10
 800095c:	f7ff ff7e 	bl	800085c <delay_in_us>
	HAL_GPIO_WritePin(TRIG_PORT_RIGHT, TRIG_PIN_RIGHT, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000960:	2200      	movs	r2, #0
 8000962:	2140      	movs	r1, #64	@ 0x40
 8000964:	4814      	ldr	r0, [pc, #80]	@ (80009b8 <poll_ultrasonic+0x12c>)
 8000966:	f001 fc33 	bl	80021d0 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 800096a:	4b14      	ldr	r3, [pc, #80]	@ (80009bc <poll_ultrasonic+0x130>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	68da      	ldr	r2, [r3, #12]
 8000970:	4b12      	ldr	r3, [pc, #72]	@ (80009bc <poll_ultrasonic+0x130>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f042 0202 	orr.w	r2, r2, #2
 8000978:	60da      	str	r2, [r3, #12]
	HAL_Delay(10);
 800097a:	200a      	movs	r0, #10
 800097c:	f001 f83c 	bl	80019f8 <HAL_Delay>

	// Set last bytes to '0'
	detection_status[4] = '0';
 8000980:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <poll_ultrasonic+0x134>)
 8000982:	2230      	movs	r2, #48	@ 0x30
 8000984:	711a      	strb	r2, [r3, #4]
	detection_status[5] = '0';
 8000986:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <poll_ultrasonic+0x134>)
 8000988:	2230      	movs	r2, #48	@ 0x30
 800098a:	715a      	strb	r2, [r3, #5]

	// Send detection status to Jetson
	Send_to_Base('0', detection_status, 1);
 800098c:	2201      	movs	r2, #1
 800098e:	490c      	ldr	r1, [pc, #48]	@ (80009c0 <poll_ultrasonic+0x134>)
 8000990:	2030      	movs	r0, #48	@ 0x30
 8000992:	f7ff fedd 	bl	8000750 <Send_to_Base>
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200002a8 	.word	0x200002a8
 80009a0:	40021000 	.word	0x40021000
 80009a4:	200000dc 	.word	0x200000dc
 80009a8:	20000174 	.word	0x20000174
 80009ac:	40020800 	.word	0x40020800
 80009b0:	40020c00 	.word	0x40020c00
 80009b4:	200001c0 	.word	0x200001c0
 80009b8:	40020000 	.word	0x40020000
 80009bc:	20000128 	.word	0x20000128
 80009c0:	200002c8 	.word	0x200002c8
 80009c4:	00000000 	.word	0x00000000

080009c8 <HAL_TIM_IC_CaptureCallback>:
	}
}
*/

// Input Capture Callback Function
void HAL_TIM_IC_CaptureCallback (TIM_HandleTypeDef *htim) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) { // If the interrupt source is channel 1
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	7f1b      	ldrb	r3, [r3, #28]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	f040 808d 	bne.w	8000af4 <HAL_TIM_IC_CaptureCallback+0x12c>
		if (is_first_captured == 0) { // If the first value is not captured
 80009da:	4b4b      	ldr	r3, [pc, #300]	@ (8000b08 <HAL_TIM_IC_CaptureCallback+0x140>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d11a      	bne.n	8000a18 <HAL_TIM_IC_CaptureCallback+0x50>
			val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // Read the first value
 80009e2:	2100      	movs	r1, #0
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f003 fe19 	bl	800461c <HAL_TIM_ReadCapturedValue>
 80009ea:	4603      	mov	r3, r0
 80009ec:	4a47      	ldr	r2, [pc, #284]	@ (8000b0c <HAL_TIM_IC_CaptureCallback+0x144>)
 80009ee:	6013      	str	r3, [r2, #0]
			is_first_captured = 1;
 80009f0:	4b45      	ldr	r3, [pc, #276]	@ (8000b08 <HAL_TIM_IC_CaptureCallback+0x140>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	701a      	strb	r2, [r3, #0]
			// Change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	6a1a      	ldr	r2, [r3, #32]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f022 020a 	bic.w	r2, r2, #10
 8000a04:	621a      	str	r2, [r3, #32]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	6a1a      	ldr	r2, [r3, #32]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f042 0202 	orr.w	r2, r2, #2
 8000a14:	621a      	str	r2, [r3, #32]
			else {
				detection_status[idx] = '0';  // no obstacle detected
			}
		}
	}
}
 8000a16:	e06d      	b.n	8000af4 <HAL_TIM_IC_CaptureCallback+0x12c>
		else if (is_first_captured == 1) { // If the first is already captured
 8000a18:	4b3b      	ldr	r3, [pc, #236]	@ (8000b08 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d169      	bne.n	8000af4 <HAL_TIM_IC_CaptureCallback+0x12c>
			val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // Read second value
 8000a20:	2100      	movs	r1, #0
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f003 fdfa 	bl	800461c <HAL_TIM_ReadCapturedValue>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	4a39      	ldr	r2, [pc, #228]	@ (8000b10 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000a2c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // Reset the counter
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2200      	movs	r2, #0
 8000a34:	625a      	str	r2, [r3, #36]	@ 0x24
			if (val2 > val1) {
 8000a36:	4b36      	ldr	r3, [pc, #216]	@ (8000b10 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	4b34      	ldr	r3, [pc, #208]	@ (8000b0c <HAL_TIM_IC_CaptureCallback+0x144>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	d906      	bls.n	8000a50 <HAL_TIM_IC_CaptureCallback+0x88>
				diff = val2 - val1; // diff is in microseconds
 8000a42:	4b33      	ldr	r3, [pc, #204]	@ (8000b10 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	4b31      	ldr	r3, [pc, #196]	@ (8000b0c <HAL_TIM_IC_CaptureCallback+0x144>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	1ad3      	subs	r3, r2, r3
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	e00e      	b.n	8000a6e <HAL_TIM_IC_CaptureCallback+0xa6>
			else if (val1 > val2) {
 8000a50:	4b2e      	ldr	r3, [pc, #184]	@ (8000b0c <HAL_TIM_IC_CaptureCallback+0x144>)
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	4b2e      	ldr	r3, [pc, #184]	@ (8000b10 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d908      	bls.n	8000a6e <HAL_TIM_IC_CaptureCallback+0xa6>
				diff = (0xffff - val1) + val2;  // diff is in microseconds
 8000a5c:	4b2c      	ldr	r3, [pc, #176]	@ (8000b10 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4b2a      	ldr	r3, [pc, #168]	@ (8000b0c <HAL_TIM_IC_CaptureCallback+0x144>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	1ad2      	subs	r2, r2, r3
 8000a66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a6a:	4413      	add	r3, r2
 8000a6c:	60fb      	str	r3, [r7, #12]
			distance[idx] = diff * .034/2;  // UNITS BREAKDOWN: (10^(-6) s) * (10^4 m/s) = 10^(-2) m = cm -> distance is in cm
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	ee07 3a90 	vmov	s15, r3
 8000a74:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000a78:	ed9f 6b21 	vldr	d6, [pc, #132]	@ 8000b00 <HAL_TIM_IC_CaptureCallback+0x138>
 8000a7c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000a80:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 8000a84:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a88:	4b22      	ldr	r3, [pc, #136]	@ (8000b14 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a90:	ee17 1a90 	vmov	r1, s15
 8000a94:	4a20      	ldr	r2, [pc, #128]	@ (8000b18 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000a96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			is_first_captured = 0; // Set back to false
 8000a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8000b08 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	6a1a      	ldr	r2, [r3, #32]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f022 020a 	bic.w	r2, r2, #10
 8000aae:	621a      	str	r2, [r3, #32]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	6a12      	ldr	r2, [r2, #32]
 8000aba:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	68da      	ldr	r2, [r3, #12]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f022 0202 	bic.w	r2, r2, #2
 8000aca:	60da      	str	r2, [r3, #12]
			if (distance[idx] < distance_threshold) {
 8000acc:	4b11      	ldr	r3, [pc, #68]	@ (8000b14 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a11      	ldr	r2, [pc, #68]	@ (8000b18 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000ad2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ad6:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <HAL_TIM_IC_CaptureCallback+0x154>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d205      	bcs.n	8000aea <HAL_TIM_IC_CaptureCallback+0x122>
				detection_status[idx] = '1';  // obstacle detected!
 8000ade:	4b0d      	ldr	r3, [pc, #52]	@ (8000b14 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a0f      	ldr	r2, [pc, #60]	@ (8000b20 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000ae4:	2131      	movs	r1, #49	@ 0x31
 8000ae6:	54d1      	strb	r1, [r2, r3]
}
 8000ae8:	e004      	b.n	8000af4 <HAL_TIM_IC_CaptureCallback+0x12c>
				detection_status[idx] = '0';  // no obstacle detected
 8000aea:	4b0a      	ldr	r3, [pc, #40]	@ (8000b14 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a0c      	ldr	r2, [pc, #48]	@ (8000b20 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000af0:	2130      	movs	r1, #48	@ 0x30
 8000af2:	54d1      	strb	r1, [r2, r3]
}
 8000af4:	bf00      	nop
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	f3af 8000 	nop.w
 8000b00:	b020c49c 	.word	0xb020c49c
 8000b04:	3fa16872 	.word	0x3fa16872
 8000b08:	200002c4 	.word	0x200002c4
 8000b0c:	200002ac 	.word	0x200002ac
 8000b10:	200002b0 	.word	0x200002b0
 8000b14:	200002a8 	.word	0x200002a8
 8000b18:	200002b4 	.word	0x200002b4
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	200002c8 	.word	0x200002c8

08000b24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000b28:	f000 fc0a 	bl	8001340 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2c:	f000 ff07 	bl	800193e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b30:	f000 f82c 	bl	8000b8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b34:	f000 fb24 	bl	8001180 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000b38:	f000 f8d8 	bl	8000cec <MX_I2C2_Init>
  MX_TIM1_Init();
 8000b3c:	f000 f916 	bl	8000d6c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b40:	f000 f98e 	bl	8000e60 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b44:	f000 fa00 	bl	8000f48 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b48:	f000 fa74 	bl	8001034 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000b4c:	f000 fae8 	bl	8001120 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000b50:	f000 f88c 	bl	8000c6c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Turn ON Debug LED
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000b54:	2201      	movs	r2, #1
 8000b56:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b5a:	4809      	ldr	r0, [pc, #36]	@ (8000b80 <main+0x5c>)
 8000b5c:	f001 fb38 	bl	80021d0 <HAL_GPIO_WritePin>

  // TODO: Comment when not using LCD screen
  lcd_init();
 8000b60:	f7ff fd7f 	bl	8000662 <lcd_init>
  lcd_send_string (" Px  Nx  Py  Ny");
 8000b64:	4807      	ldr	r0, [pc, #28]	@ (8000b84 <main+0x60>)
 8000b66:	f7ff fdb9 	bl	80006dc <lcd_send_string>
  lcd_put_cur(1, 2);
 8000b6a:	2102      	movs	r1, #2
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	f7ff fd59 	bl	8000624 <lcd_put_cur>
  lcd_send_string("0   0   0   0");
 8000b72:	4805      	ldr	r0, [pc, #20]	@ (8000b88 <main+0x64>)
 8000b74:	f7ff fdb2 	bl	80006dc <lcd_send_string>

  // TODO: Uncomment when testing with device comms
  // Start receiving from base
  Receive_from_Base();
 8000b78:	f7ff fe28 	bl	80007cc <Receive_from_Base>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <main+0x58>
 8000b80:	40020400 	.word	0x40020400
 8000b84:	080065e8 	.word	0x080065e8
 8000b88:	080065f8 	.word	0x080065f8

08000b8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b094      	sub	sp, #80	@ 0x50
 8000b90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b92:	f107 031c 	add.w	r3, r7, #28
 8000b96:	2234      	movs	r2, #52	@ 0x34
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f005 fccd 	bl	800653a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba0:	f107 0308 	add.w	r3, r7, #8
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb0:	4b2c      	ldr	r3, [pc, #176]	@ (8000c64 <SystemClock_Config+0xd8>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb4:	4a2b      	ldr	r2, [pc, #172]	@ (8000c64 <SystemClock_Config+0xd8>)
 8000bb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bba:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bbc:	4b29      	ldr	r3, [pc, #164]	@ (8000c64 <SystemClock_Config+0xd8>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bc8:	4b27      	ldr	r3, [pc, #156]	@ (8000c68 <SystemClock_Config+0xdc>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bd0:	4a25      	ldr	r2, [pc, #148]	@ (8000c68 <SystemClock_Config+0xdc>)
 8000bd2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bd6:	6013      	str	r3, [r2, #0]
 8000bd8:	4b23      	ldr	r3, [pc, #140]	@ (8000c68 <SystemClock_Config+0xdc>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000be0:	603b      	str	r3, [r7, #0]
 8000be2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000be4:	2302      	movs	r3, #2
 8000be6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000be8:	2301      	movs	r3, #1
 8000bea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bec:	2310      	movs	r3, #16
 8000bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000bf8:	2310      	movs	r3, #16
 8000bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000bfc:	23c0      	movs	r3, #192	@ 0xc0
 8000bfe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c00:	2302      	movs	r3, #2
 8000c02:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c04:	2302      	movs	r3, #2
 8000c06:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0c:	f107 031c 	add.w	r3, r7, #28
 8000c10:	4618      	mov	r0, r3
 8000c12:	f001 ffd1 	bl	8002bb8 <HAL_RCC_OscConfig>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c1c:	f000 fbbc 	bl	8001398 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c20:	f001 ff7a 	bl	8002b18 <HAL_PWREx_EnableOverDrive>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000c2a:	f000 fbb5 	bl	8001398 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2e:	230f      	movs	r3, #15
 8000c30:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c32:	2302      	movs	r3, #2
 8000c34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c44:	f107 0308 	add.w	r3, r7, #8
 8000c48:	2103      	movs	r1, #3
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f002 fa62 	bl	8003114 <HAL_RCC_ClockConfig>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000c56:	f000 fb9f 	bl	8001398 <Error_Handler>
  }
}
 8000c5a:	bf00      	nop
 8000c5c:	3750      	adds	r7, #80	@ 0x50
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40007000 	.word	0x40007000

08000c6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c70:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce0 <MX_I2C1_Init+0x74>)
 8000c72:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce4 <MX_I2C1_Init+0x78>)
 8000c74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000c76:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce0 <MX_I2C1_Init+0x74>)
 8000c78:	4a1b      	ldr	r2, [pc, #108]	@ (8000ce8 <MX_I2C1_Init+0x7c>)
 8000c7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c7c:	4b18      	ldr	r3, [pc, #96]	@ (8000ce0 <MX_I2C1_Init+0x74>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c82:	4b17      	ldr	r3, [pc, #92]	@ (8000ce0 <MX_I2C1_Init+0x74>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c88:	4b15      	ldr	r3, [pc, #84]	@ (8000ce0 <MX_I2C1_Init+0x74>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ce0 <MX_I2C1_Init+0x74>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c94:	4b12      	ldr	r3, [pc, #72]	@ (8000ce0 <MX_I2C1_Init+0x74>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ce0 <MX_I2C1_Init+0x74>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce0 <MX_I2C1_Init+0x74>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ca6:	480e      	ldr	r0, [pc, #56]	@ (8000ce0 <MX_I2C1_Init+0x74>)
 8000ca8:	f001 fad0 	bl	800224c <HAL_I2C_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cb2:	f000 fb71 	bl	8001398 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4809      	ldr	r0, [pc, #36]	@ (8000ce0 <MX_I2C1_Init+0x74>)
 8000cba:	f001 fe95 	bl	80029e8 <HAL_I2CEx_ConfigAnalogFilter>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cc4:	f000 fb68 	bl	8001398 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4805      	ldr	r0, [pc, #20]	@ (8000ce0 <MX_I2C1_Init+0x74>)
 8000ccc:	f001 fed7 	bl	8002a7e <HAL_I2CEx_ConfigDigitalFilter>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cd6:	f000 fb5f 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000034 	.word	0x20000034
 8000ce4:	40005400 	.word	0x40005400
 8000ce8:	20303e5d 	.word	0x20303e5d

08000cec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d60 <MX_I2C2_Init+0x74>)
 8000cf2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d64 <MX_I2C2_Init+0x78>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d60 <MX_I2C2_Init+0x74>)
 8000cf8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d68 <MX_I2C2_Init+0x7c>)
 8000cfa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000cfc:	4b18      	ldr	r3, [pc, #96]	@ (8000d60 <MX_I2C2_Init+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d02:	4b17      	ldr	r3, [pc, #92]	@ (8000d60 <MX_I2C2_Init+0x74>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d08:	4b15      	ldr	r3, [pc, #84]	@ (8000d60 <MX_I2C2_Init+0x74>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d0e:	4b14      	ldr	r3, [pc, #80]	@ (8000d60 <MX_I2C2_Init+0x74>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d14:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <MX_I2C2_Init+0x74>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d1a:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <MX_I2C2_Init+0x74>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <MX_I2C2_Init+0x74>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d26:	480e      	ldr	r0, [pc, #56]	@ (8000d60 <MX_I2C2_Init+0x74>)
 8000d28:	f001 fa90 	bl	800224c <HAL_I2C_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d32:	f000 fb31 	bl	8001398 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d36:	2100      	movs	r1, #0
 8000d38:	4809      	ldr	r0, [pc, #36]	@ (8000d60 <MX_I2C2_Init+0x74>)
 8000d3a:	f001 fe55 	bl	80029e8 <HAL_I2CEx_ConfigAnalogFilter>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d44:	f000 fb28 	bl	8001398 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4805      	ldr	r0, [pc, #20]	@ (8000d60 <MX_I2C2_Init+0x74>)
 8000d4c:	f001 fe97 	bl	8002a7e <HAL_I2CEx_ConfigDigitalFilter>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000d56:	f000 fb1f 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000088 	.word	0x20000088
 8000d64:	40005800 	.word	0x40005800
 8000d68:	20303e5d 	.word	0x20303e5d

08000d6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08c      	sub	sp, #48	@ 0x30
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d72:	f107 0320 	add.w	r3, r7, #32
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d98:	4b2f      	ldr	r3, [pc, #188]	@ (8000e58 <MX_TIM1_Init+0xec>)
 8000d9a:	4a30      	ldr	r2, [pc, #192]	@ (8000e5c <MX_TIM1_Init+0xf0>)
 8000d9c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 8000d9e:	4b2e      	ldr	r3, [pc, #184]	@ (8000e58 <MX_TIM1_Init+0xec>)
 8000da0:	225f      	movs	r2, #95	@ 0x5f
 8000da2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da4:	4b2c      	ldr	r3, [pc, #176]	@ (8000e58 <MX_TIM1_Init+0xec>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000daa:	4b2b      	ldr	r3, [pc, #172]	@ (8000e58 <MX_TIM1_Init+0xec>)
 8000dac:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000db0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db2:	4b29      	ldr	r3, [pc, #164]	@ (8000e58 <MX_TIM1_Init+0xec>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000db8:	4b27      	ldr	r3, [pc, #156]	@ (8000e58 <MX_TIM1_Init+0xec>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dbe:	4b26      	ldr	r3, [pc, #152]	@ (8000e58 <MX_TIM1_Init+0xec>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dc4:	4824      	ldr	r0, [pc, #144]	@ (8000e58 <MX_TIM1_Init+0xec>)
 8000dc6:	f002 ffb3 	bl	8003d30 <HAL_TIM_Base_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000dd0:	f000 fae2 	bl	8001398 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dd8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dda:	f107 0320 	add.w	r3, r7, #32
 8000dde:	4619      	mov	r1, r3
 8000de0:	481d      	ldr	r0, [pc, #116]	@ (8000e58 <MX_TIM1_Init+0xec>)
 8000de2:	f003 fb51 	bl	8004488 <HAL_TIM_ConfigClockSource>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000dec:	f000 fad4 	bl	8001398 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000df0:	4819      	ldr	r0, [pc, #100]	@ (8000e58 <MX_TIM1_Init+0xec>)
 8000df2:	f002 fff4 	bl	8003dde <HAL_TIM_IC_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000dfc:	f000 facc 	bl	8001398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	4619      	mov	r1, r3
 8000e12:	4811      	ldr	r0, [pc, #68]	@ (8000e58 <MX_TIM1_Init+0xec>)
 8000e14:	f003 ff04 	bl	8004c20 <HAL_TIMEx_MasterConfigSynchronization>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000e1e:	f000 fabb 	bl	8001398 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e22:	2300      	movs	r3, #0
 8000e24:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e26:	2301      	movs	r3, #1
 8000e28:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	2200      	movs	r2, #0
 8000e36:	4619      	mov	r1, r3
 8000e38:	4807      	ldr	r0, [pc, #28]	@ (8000e58 <MX_TIM1_Init+0xec>)
 8000e3a:	f003 fa88 	bl	800434e <HAL_TIM_IC_ConfigChannel>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000e44:	f000 faa8 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4803      	ldr	r0, [pc, #12]	@ (8000e58 <MX_TIM1_Init+0xec>)
 8000e4c:	f003 f828 	bl	8003ea0 <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM1_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	3730      	adds	r7, #48	@ 0x30
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	200000dc 	.word	0x200000dc
 8000e5c:	40010000 	.word	0x40010000

08000e60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08c      	sub	sp, #48	@ 0x30
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e66:	f107 0320 	add.w	r3, r7, #32
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e8c:	4b2d      	ldr	r3, [pc, #180]	@ (8000f44 <MX_TIM2_Init+0xe4>)
 8000e8e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 8000e94:	4b2b      	ldr	r3, [pc, #172]	@ (8000f44 <MX_TIM2_Init+0xe4>)
 8000e96:	225f      	movs	r2, #95	@ 0x5f
 8000e98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f44 <MX_TIM2_Init+0xe4>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8000ea0:	4b28      	ldr	r3, [pc, #160]	@ (8000f44 <MX_TIM2_Init+0xe4>)
 8000ea2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000ea6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea8:	4b26      	ldr	r3, [pc, #152]	@ (8000f44 <MX_TIM2_Init+0xe4>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eae:	4b25      	ldr	r3, [pc, #148]	@ (8000f44 <MX_TIM2_Init+0xe4>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000eb4:	4823      	ldr	r0, [pc, #140]	@ (8000f44 <MX_TIM2_Init+0xe4>)
 8000eb6:	f002 ff3b 	bl	8003d30 <HAL_TIM_Base_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000ec0:	f000 fa6a 	bl	8001398 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ec4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ec8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eca:	f107 0320 	add.w	r3, r7, #32
 8000ece:	4619      	mov	r1, r3
 8000ed0:	481c      	ldr	r0, [pc, #112]	@ (8000f44 <MX_TIM2_Init+0xe4>)
 8000ed2:	f003 fad9 	bl	8004488 <HAL_TIM_ConfigClockSource>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000edc:	f000 fa5c 	bl	8001398 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000ee0:	4818      	ldr	r0, [pc, #96]	@ (8000f44 <MX_TIM2_Init+0xe4>)
 8000ee2:	f002 ff7c 	bl	8003dde <HAL_TIM_IC_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000eec:	f000 fa54 	bl	8001398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	4619      	mov	r1, r3
 8000efe:	4811      	ldr	r0, [pc, #68]	@ (8000f44 <MX_TIM2_Init+0xe4>)
 8000f00:	f003 fe8e 	bl	8004c20 <HAL_TIMEx_MasterConfigSynchronization>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000f0a:	f000 fa45 	bl	8001398 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f12:	2301      	movs	r3, #1
 8000f14:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2200      	movs	r2, #0
 8000f22:	4619      	mov	r1, r3
 8000f24:	4807      	ldr	r0, [pc, #28]	@ (8000f44 <MX_TIM2_Init+0xe4>)
 8000f26:	f003 fa12 	bl	800434e <HAL_TIM_IC_ConfigChannel>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000f30:	f000 fa32 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000f34:	2100      	movs	r1, #0
 8000f36:	4803      	ldr	r0, [pc, #12]	@ (8000f44 <MX_TIM2_Init+0xe4>)
 8000f38:	f002 ffb2 	bl	8003ea0 <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8000f3c:	bf00      	nop
 8000f3e:	3730      	adds	r7, #48	@ 0x30
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000128 	.word	0x20000128

08000f48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08c      	sub	sp, #48	@ 0x30
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f4e:	f107 0320 	add.w	r3, r7, #32
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f74:	4b2d      	ldr	r3, [pc, #180]	@ (800102c <MX_TIM3_Init+0xe4>)
 8000f76:	4a2e      	ldr	r2, [pc, #184]	@ (8001030 <MX_TIM3_Init+0xe8>)
 8000f78:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96-1;
 8000f7a:	4b2c      	ldr	r3, [pc, #176]	@ (800102c <MX_TIM3_Init+0xe4>)
 8000f7c:	225f      	movs	r2, #95	@ 0x5f
 8000f7e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f80:	4b2a      	ldr	r3, [pc, #168]	@ (800102c <MX_TIM3_Init+0xe4>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 8000f86:	4b29      	ldr	r3, [pc, #164]	@ (800102c <MX_TIM3_Init+0xe4>)
 8000f88:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000f8c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f8e:	4b27      	ldr	r3, [pc, #156]	@ (800102c <MX_TIM3_Init+0xe4>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f94:	4b25      	ldr	r3, [pc, #148]	@ (800102c <MX_TIM3_Init+0xe4>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f9a:	4824      	ldr	r0, [pc, #144]	@ (800102c <MX_TIM3_Init+0xe4>)
 8000f9c:	f002 fec8 	bl	8003d30 <HAL_TIM_Base_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8000fa6:	f000 f9f7 	bl	8001398 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000faa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fae:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fb0:	f107 0320 	add.w	r3, r7, #32
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	481d      	ldr	r0, [pc, #116]	@ (800102c <MX_TIM3_Init+0xe4>)
 8000fb8:	f003 fa66 	bl	8004488 <HAL_TIM_ConfigClockSource>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000fc2:	f000 f9e9 	bl	8001398 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000fc6:	4819      	ldr	r0, [pc, #100]	@ (800102c <MX_TIM3_Init+0xe4>)
 8000fc8:	f002 ff09 	bl	8003dde <HAL_TIM_IC_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000fd2:	f000 f9e1 	bl	8001398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4811      	ldr	r0, [pc, #68]	@ (800102c <MX_TIM3_Init+0xe4>)
 8000fe6:	f003 fe1b 	bl	8004c20 <HAL_TIMEx_MasterConfigSynchronization>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8000ff0:	f000 f9d2 	bl	8001398 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	2200      	movs	r2, #0
 8001008:	4619      	mov	r1, r3
 800100a:	4808      	ldr	r0, [pc, #32]	@ (800102c <MX_TIM3_Init+0xe4>)
 800100c:	f003 f99f 	bl	800434e <HAL_TIM_IC_ConfigChannel>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8001016:	f000 f9bf 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800101a:	2100      	movs	r1, #0
 800101c:	4803      	ldr	r0, [pc, #12]	@ (800102c <MX_TIM3_Init+0xe4>)
 800101e:	f002 ff3f 	bl	8003ea0 <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM3_Init 2 */

}
 8001022:	bf00      	nop
 8001024:	3730      	adds	r7, #48	@ 0x30
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000174 	.word	0x20000174
 8001030:	40000400 	.word	0x40000400

08001034 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08c      	sub	sp, #48	@ 0x30
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800103a:	f107 0320 	add.w	r3, r7, #32
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001060:	4b2d      	ldr	r3, [pc, #180]	@ (8001118 <MX_TIM4_Init+0xe4>)
 8001062:	4a2e      	ldr	r2, [pc, #184]	@ (800111c <MX_TIM4_Init+0xe8>)
 8001064:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 96-1;
 8001066:	4b2c      	ldr	r3, [pc, #176]	@ (8001118 <MX_TIM4_Init+0xe4>)
 8001068:	225f      	movs	r2, #95	@ 0x5f
 800106a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106c:	4b2a      	ldr	r3, [pc, #168]	@ (8001118 <MX_TIM4_Init+0xe4>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 8001072:	4b29      	ldr	r3, [pc, #164]	@ (8001118 <MX_TIM4_Init+0xe4>)
 8001074:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001078:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107a:	4b27      	ldr	r3, [pc, #156]	@ (8001118 <MX_TIM4_Init+0xe4>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001080:	4b25      	ldr	r3, [pc, #148]	@ (8001118 <MX_TIM4_Init+0xe4>)
 8001082:	2200      	movs	r2, #0
 8001084:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001086:	4824      	ldr	r0, [pc, #144]	@ (8001118 <MX_TIM4_Init+0xe4>)
 8001088:	f002 fe52 	bl	8003d30 <HAL_TIM_Base_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8001092:	f000 f981 	bl	8001398 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001096:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800109a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800109c:	f107 0320 	add.w	r3, r7, #32
 80010a0:	4619      	mov	r1, r3
 80010a2:	481d      	ldr	r0, [pc, #116]	@ (8001118 <MX_TIM4_Init+0xe4>)
 80010a4:	f003 f9f0 	bl	8004488 <HAL_TIM_ConfigClockSource>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80010ae:	f000 f973 	bl	8001398 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80010b2:	4819      	ldr	r0, [pc, #100]	@ (8001118 <MX_TIM4_Init+0xe4>)
 80010b4:	f002 fe93 	bl	8003dde <HAL_TIM_IC_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80010be:	f000 f96b 	bl	8001398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4619      	mov	r1, r3
 80010d0:	4811      	ldr	r0, [pc, #68]	@ (8001118 <MX_TIM4_Init+0xe4>)
 80010d2:	f003 fda5 	bl	8004c20 <HAL_TIMEx_MasterConfigSynchronization>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 80010dc:	f000 f95c 	bl	8001398 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010e0:	2300      	movs	r3, #0
 80010e2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010e4:	2301      	movs	r3, #1
 80010e6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	2200      	movs	r2, #0
 80010f4:	4619      	mov	r1, r3
 80010f6:	4808      	ldr	r0, [pc, #32]	@ (8001118 <MX_TIM4_Init+0xe4>)
 80010f8:	f003 f929 	bl	800434e <HAL_TIM_IC_ConfigChannel>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8001102:	f000 f949 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001106:	2100      	movs	r1, #0
 8001108:	4803      	ldr	r0, [pc, #12]	@ (8001118 <MX_TIM4_Init+0xe4>)
 800110a:	f002 fec9 	bl	8003ea0 <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM4_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	3730      	adds	r7, #48	@ 0x30
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200001c0 	.word	0x200001c0
 800111c:	40000800 	.word	0x40000800

08001120 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001124:	4b14      	ldr	r3, [pc, #80]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 8001126:	4a15      	ldr	r2, [pc, #84]	@ (800117c <MX_USART2_UART_Init+0x5c>)
 8001128:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800112a:	4b13      	ldr	r3, [pc, #76]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 800112c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001130:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001132:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001138:	4b0f      	ldr	r3, [pc, #60]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800113e:	4b0e      	ldr	r3, [pc, #56]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001144:	4b0c      	ldr	r3, [pc, #48]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 8001146:	220c      	movs	r2, #12
 8001148:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114a:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001150:	4b09      	ldr	r3, [pc, #36]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001156:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 8001158:	2200      	movs	r2, #0
 800115a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800115c:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 800115e:	2200      	movs	r2, #0
 8001160:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001162:	4805      	ldr	r0, [pc, #20]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 8001164:	f003 fe08 	bl	8004d78 <HAL_UART_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800116e:	f000 f913 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	2000020c 	.word	0x2000020c
 800117c:	40004400 	.word	0x40004400

08001180 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08c      	sub	sp, #48	@ 0x30
 8001184:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001186:	f107 031c 	add.w	r3, r7, #28
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
 8001194:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001196:	4b63      	ldr	r3, [pc, #396]	@ (8001324 <MX_GPIO_Init+0x1a4>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	4a62      	ldr	r2, [pc, #392]	@ (8001324 <MX_GPIO_Init+0x1a4>)
 800119c:	f043 0320 	orr.w	r3, r3, #32
 80011a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a2:	4b60      	ldr	r3, [pc, #384]	@ (8001324 <MX_GPIO_Init+0x1a4>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	f003 0320 	and.w	r3, r3, #32
 80011aa:	61bb      	str	r3, [r7, #24]
 80011ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001324 <MX_GPIO_Init+0x1a4>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	4a5c      	ldr	r2, [pc, #368]	@ (8001324 <MX_GPIO_Init+0x1a4>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ba:	4b5a      	ldr	r3, [pc, #360]	@ (8001324 <MX_GPIO_Init+0x1a4>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	617b      	str	r3, [r7, #20]
 80011c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011c6:	4b57      	ldr	r3, [pc, #348]	@ (8001324 <MX_GPIO_Init+0x1a4>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	4a56      	ldr	r2, [pc, #344]	@ (8001324 <MX_GPIO_Init+0x1a4>)
 80011cc:	f043 0310 	orr.w	r3, r3, #16
 80011d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d2:	4b54      	ldr	r3, [pc, #336]	@ (8001324 <MX_GPIO_Init+0x1a4>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	f003 0310 	and.w	r3, r3, #16
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011de:	4b51      	ldr	r3, [pc, #324]	@ (8001324 <MX_GPIO_Init+0x1a4>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	4a50      	ldr	r2, [pc, #320]	@ (8001324 <MX_GPIO_Init+0x1a4>)
 80011e4:	f043 0302 	orr.w	r3, r3, #2
 80011e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ea:	4b4e      	ldr	r3, [pc, #312]	@ (8001324 <MX_GPIO_Init+0x1a4>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f6:	4b4b      	ldr	r3, [pc, #300]	@ (8001324 <MX_GPIO_Init+0x1a4>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	4a4a      	ldr	r2, [pc, #296]	@ (8001324 <MX_GPIO_Init+0x1a4>)
 80011fc:	f043 0308 	orr.w	r3, r3, #8
 8001200:	6313      	str	r3, [r2, #48]	@ 0x30
 8001202:	4b48      	ldr	r3, [pc, #288]	@ (8001324 <MX_GPIO_Init+0x1a4>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	f003 0308 	and.w	r3, r3, #8
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800120e:	4b45      	ldr	r3, [pc, #276]	@ (8001324 <MX_GPIO_Init+0x1a4>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a44      	ldr	r2, [pc, #272]	@ (8001324 <MX_GPIO_Init+0x1a4>)
 8001214:	f043 0304 	orr.w	r3, r3, #4
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
 800121a:	4b42      	ldr	r3, [pc, #264]	@ (8001324 <MX_GPIO_Init+0x1a4>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	f003 0304 	and.w	r3, r3, #4
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(US2_TRIG_GPIO_Port, US2_TRIG_Pin, GPIO_PIN_RESET);
 8001226:	2200      	movs	r2, #0
 8001228:	2140      	movs	r1, #64	@ 0x40
 800122a:	483f      	ldr	r0, [pc, #252]	@ (8001328 <MX_GPIO_Init+0x1a8>)
 800122c:	f000 ffd0 	bl	80021d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(US1_TRIG_GPIO_Port, US1_TRIG_Pin, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001236:	483d      	ldr	r0, [pc, #244]	@ (800132c <MX_GPIO_Init+0x1ac>)
 8001238:	f000 ffca 	bl	80021d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Debug_LED_GPIO_Port, Debug_LED_Pin, GPIO_PIN_RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001242:	483b      	ldr	r0, [pc, #236]	@ (8001330 <MX_GPIO_Init+0x1b0>)
 8001244:	f000 ffc4 	bl	80021d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(US4_TRIG_GPIO_Port, US4_TRIG_Pin, GPIO_PIN_RESET);
 8001248:	2200      	movs	r2, #0
 800124a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800124e:	4839      	ldr	r0, [pc, #228]	@ (8001334 <MX_GPIO_Init+0x1b4>)
 8001250:	f000 ffbe 	bl	80021d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(US3_TRIG_GPIO_Port, US3_TRIG_Pin, GPIO_PIN_RESET);
 8001254:	2200      	movs	r2, #0
 8001256:	2180      	movs	r1, #128	@ 0x80
 8001258:	4837      	ldr	r0, [pc, #220]	@ (8001338 <MX_GPIO_Init+0x1b8>)
 800125a:	f000 ffb9 	bl	80021d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BNO055_INT_Pin */
  GPIO_InitStruct.Pin = BNO055_INT_Pin;
 800125e:	2308      	movs	r3, #8
 8001260:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001262:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001266:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BNO055_INT_GPIO_Port, &GPIO_InitStruct);
 800126c:	f107 031c 	add.w	r3, r7, #28
 8001270:	4619      	mov	r1, r3
 8001272:	4832      	ldr	r0, [pc, #200]	@ (800133c <MX_GPIO_Init+0x1bc>)
 8001274:	f000 fe00 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : US2_TRIG_Pin */
  GPIO_InitStruct.Pin = US2_TRIG_Pin;
 8001278:	2340      	movs	r3, #64	@ 0x40
 800127a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127c:	2301      	movs	r3, #1
 800127e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(US2_TRIG_GPIO_Port, &GPIO_InitStruct);
 8001288:	f107 031c 	add.w	r3, r7, #28
 800128c:	4619      	mov	r1, r3
 800128e:	4826      	ldr	r0, [pc, #152]	@ (8001328 <MX_GPIO_Init+0x1a8>)
 8001290:	f000 fdf2 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : US1_TRIG_Pin */
  GPIO_InitStruct.Pin = US1_TRIG_Pin;
 8001294:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001298:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129a:	2301      	movs	r3, #1
 800129c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2300      	movs	r3, #0
 80012a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(US1_TRIG_GPIO_Port, &GPIO_InitStruct);
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	4619      	mov	r1, r3
 80012ac:	481f      	ldr	r0, [pc, #124]	@ (800132c <MX_GPIO_Init+0x1ac>)
 80012ae:	f000 fde3 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : Debug_LED_Pin */
  GPIO_InitStruct.Pin = Debug_LED_Pin;
 80012b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Debug_LED_GPIO_Port, &GPIO_InitStruct);
 80012c4:	f107 031c 	add.w	r3, r7, #28
 80012c8:	4619      	mov	r1, r3
 80012ca:	4819      	ldr	r0, [pc, #100]	@ (8001330 <MX_GPIO_Init+0x1b0>)
 80012cc:	f000 fdd4 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : US4_TRIG_Pin */
  GPIO_InitStruct.Pin = US4_TRIG_Pin;
 80012d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(US4_TRIG_GPIO_Port, &GPIO_InitStruct);
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	4619      	mov	r1, r3
 80012e8:	4812      	ldr	r0, [pc, #72]	@ (8001334 <MX_GPIO_Init+0x1b4>)
 80012ea:	f000 fdc5 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : US3_TRIG_Pin */
  GPIO_InitStruct.Pin = US3_TRIG_Pin;
 80012ee:	2380      	movs	r3, #128	@ 0x80
 80012f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f2:	2301      	movs	r3, #1
 80012f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2300      	movs	r3, #0
 80012fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(US3_TRIG_GPIO_Port, &GPIO_InitStruct);
 80012fe:	f107 031c 	add.w	r3, r7, #28
 8001302:	4619      	mov	r1, r3
 8001304:	480c      	ldr	r0, [pc, #48]	@ (8001338 <MX_GPIO_Init+0x1b8>)
 8001306:	f000 fdb7 	bl	8001e78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	2100      	movs	r1, #0
 800130e:	2009      	movs	r0, #9
 8001310:	f000 fc71 	bl	8001bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001314:	2009      	movs	r0, #9
 8001316:	f000 fc8a 	bl	8001c2e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800131a:	bf00      	nop
 800131c:	3730      	adds	r7, #48	@ 0x30
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800
 8001328:	40020000 	.word	0x40020000
 800132c:	40021000 	.word	0x40021000
 8001330:	40020400 	.word	0x40020400
 8001334:	40020c00 	.word	0x40020c00
 8001338:	40020800 	.word	0x40020800
 800133c:	40021400 	.word	0x40021400

08001340 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001346:	463b      	mov	r3, r7
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001352:	f000 fc87 	bl	8001c64 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001356:	2301      	movs	r3, #1
 8001358:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800135a:	2300      	movs	r3, #0
 800135c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001362:	231f      	movs	r3, #31
 8001364:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001366:	2387      	movs	r3, #135	@ 0x87
 8001368:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800136a:	2300      	movs	r3, #0
 800136c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800136e:	2300      	movs	r3, #0
 8001370:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001372:	2301      	movs	r3, #1
 8001374:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001376:	2301      	movs	r3, #1
 8001378:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001382:	463b      	mov	r3, r7
 8001384:	4618      	mov	r0, r3
 8001386:	f000 fca5 	bl	8001cd4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800138a:	2004      	movs	r0, #4
 800138c:	f000 fc82 	bl	8001c94 <HAL_MPU_Enable>

}
 8001390:	bf00      	nop
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800139c:	b672      	cpsid	i
}
 800139e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a0:	bf00      	nop
 80013a2:	e7fd      	b.n	80013a0 <Error_Handler+0x8>

080013a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013aa:	4b0f      	ldr	r3, [pc, #60]	@ (80013e8 <HAL_MspInit+0x44>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ae:	4a0e      	ldr	r2, [pc, #56]	@ (80013e8 <HAL_MspInit+0x44>)
 80013b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013b6:	4b0c      	ldr	r3, [pc, #48]	@ (80013e8 <HAL_MspInit+0x44>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c2:	4b09      	ldr	r3, [pc, #36]	@ (80013e8 <HAL_MspInit+0x44>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c6:	4a08      	ldr	r2, [pc, #32]	@ (80013e8 <HAL_MspInit+0x44>)
 80013c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ce:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <HAL_MspInit+0x44>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800

080013ec <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b0b0      	sub	sp, #192	@ 0xc0
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001404:	f107 031c 	add.w	r3, r7, #28
 8001408:	2290      	movs	r2, #144	@ 0x90
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f005 f894 	bl	800653a <memset>
  if(hi2c->Instance==I2C1)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a43      	ldr	r2, [pc, #268]	@ (8001524 <HAL_I2C_MspInit+0x138>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d13d      	bne.n	8001498 <HAL_I2C_MspInit+0xac>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800141c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001420:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001422:	2300      	movs	r3, #0
 8001424:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001428:	f107 031c 	add.w	r3, r7, #28
 800142c:	4618      	mov	r0, r3
 800142e:	f002 f857 	bl	80034e0 <HAL_RCCEx_PeriphCLKConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001438:	f7ff ffae 	bl	8001398 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143c:	4b3a      	ldr	r3, [pc, #232]	@ (8001528 <HAL_I2C_MspInit+0x13c>)
 800143e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001440:	4a39      	ldr	r2, [pc, #228]	@ (8001528 <HAL_I2C_MspInit+0x13c>)
 8001442:	f043 0302 	orr.w	r3, r3, #2
 8001446:	6313      	str	r3, [r2, #48]	@ 0x30
 8001448:	4b37      	ldr	r3, [pc, #220]	@ (8001528 <HAL_I2C_MspInit+0x13c>)
 800144a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	61bb      	str	r3, [r7, #24]
 8001452:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001454:	23c0      	movs	r3, #192	@ 0xc0
 8001456:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800145a:	2312      	movs	r3, #18
 800145c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001460:	2301      	movs	r3, #1
 8001462:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001466:	2303      	movs	r3, #3
 8001468:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800146c:	2304      	movs	r3, #4
 800146e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001472:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001476:	4619      	mov	r1, r3
 8001478:	482c      	ldr	r0, [pc, #176]	@ (800152c <HAL_I2C_MspInit+0x140>)
 800147a:	f000 fcfd 	bl	8001e78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800147e:	4b2a      	ldr	r3, [pc, #168]	@ (8001528 <HAL_I2C_MspInit+0x13c>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001482:	4a29      	ldr	r2, [pc, #164]	@ (8001528 <HAL_I2C_MspInit+0x13c>)
 8001484:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001488:	6413      	str	r3, [r2, #64]	@ 0x40
 800148a:	4b27      	ldr	r3, [pc, #156]	@ (8001528 <HAL_I2C_MspInit+0x13c>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001496:	e041      	b.n	800151c <HAL_I2C_MspInit+0x130>
  else if(hi2c->Instance==I2C2)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a24      	ldr	r2, [pc, #144]	@ (8001530 <HAL_I2C_MspInit+0x144>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d13c      	bne.n	800151c <HAL_I2C_MspInit+0x130>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80014a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014a6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ae:	f107 031c 	add.w	r3, r7, #28
 80014b2:	4618      	mov	r0, r3
 80014b4:	f002 f814 	bl	80034e0 <HAL_RCCEx_PeriphCLKConfig>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 80014be:	f7ff ff6b 	bl	8001398 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014c2:	4b19      	ldr	r3, [pc, #100]	@ (8001528 <HAL_I2C_MspInit+0x13c>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c6:	4a18      	ldr	r2, [pc, #96]	@ (8001528 <HAL_I2C_MspInit+0x13c>)
 80014c8:	f043 0320 	orr.w	r3, r3, #32
 80014cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ce:	4b16      	ldr	r3, [pc, #88]	@ (8001528 <HAL_I2C_MspInit+0x13c>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	f003 0320 	and.w	r3, r3, #32
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BNO055_SDA_Pin|BNO055_SCL_Pin;
 80014da:	2303      	movs	r3, #3
 80014dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014e0:	2312      	movs	r3, #18
 80014e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ec:	2303      	movs	r3, #3
 80014ee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014f2:	2304      	movs	r3, #4
 80014f4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014f8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80014fc:	4619      	mov	r1, r3
 80014fe:	480d      	ldr	r0, [pc, #52]	@ (8001534 <HAL_I2C_MspInit+0x148>)
 8001500:	f000 fcba 	bl	8001e78 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001504:	4b08      	ldr	r3, [pc, #32]	@ (8001528 <HAL_I2C_MspInit+0x13c>)
 8001506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001508:	4a07      	ldr	r2, [pc, #28]	@ (8001528 <HAL_I2C_MspInit+0x13c>)
 800150a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800150e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001510:	4b05      	ldr	r3, [pc, #20]	@ (8001528 <HAL_I2C_MspInit+0x13c>)
 8001512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001514:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	68fb      	ldr	r3, [r7, #12]
}
 800151c:	bf00      	nop
 800151e:	37c0      	adds	r7, #192	@ 0xc0
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40005400 	.word	0x40005400
 8001528:	40023800 	.word	0x40023800
 800152c:	40020400 	.word	0x40020400
 8001530:	40005800 	.word	0x40005800
 8001534:	40021400 	.word	0x40021400

08001538 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b090      	sub	sp, #64	@ 0x40
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a6d      	ldr	r2, [pc, #436]	@ (800170c <HAL_TIM_Base_MspInit+0x1d4>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d131      	bne.n	80015be <HAL_TIM_Base_MspInit+0x86>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800155a:	4b6d      	ldr	r3, [pc, #436]	@ (8001710 <HAL_TIM_Base_MspInit+0x1d8>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800155e:	4a6c      	ldr	r2, [pc, #432]	@ (8001710 <HAL_TIM_Base_MspInit+0x1d8>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6453      	str	r3, [r2, #68]	@ 0x44
 8001566:	4b6a      	ldr	r3, [pc, #424]	@ (8001710 <HAL_TIM_Base_MspInit+0x1d8>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001570:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001572:	4b67      	ldr	r3, [pc, #412]	@ (8001710 <HAL_TIM_Base_MspInit+0x1d8>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	4a66      	ldr	r2, [pc, #408]	@ (8001710 <HAL_TIM_Base_MspInit+0x1d8>)
 8001578:	f043 0310 	orr.w	r3, r3, #16
 800157c:	6313      	str	r3, [r2, #48]	@ 0x30
 800157e:	4b64      	ldr	r3, [pc, #400]	@ (8001710 <HAL_TIM_Base_MspInit+0x1d8>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	f003 0310 	and.w	r3, r3, #16
 8001586:	627b      	str	r3, [r7, #36]	@ 0x24
 8001588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = US1_ECHO_Pin;
 800158a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800158e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800159c:	2301      	movs	r3, #1
 800159e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(US1_ECHO_GPIO_Port, &GPIO_InitStruct);
 80015a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015a4:	4619      	mov	r1, r3
 80015a6:	485b      	ldr	r0, [pc, #364]	@ (8001714 <HAL_TIM_Base_MspInit+0x1dc>)
 80015a8:	f000 fc66 	bl	8001e78 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2100      	movs	r1, #0
 80015b0:	201b      	movs	r0, #27
 80015b2:	f000 fb20 	bl	8001bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80015b6:	201b      	movs	r0, #27
 80015b8:	f000 fb39 	bl	8001c2e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80015bc:	e0a1      	b.n	8001702 <HAL_TIM_Base_MspInit+0x1ca>
  else if(htim_base->Instance==TIM2)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015c6:	d130      	bne.n	800162a <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015c8:	4b51      	ldr	r3, [pc, #324]	@ (8001710 <HAL_TIM_Base_MspInit+0x1d8>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015cc:	4a50      	ldr	r2, [pc, #320]	@ (8001710 <HAL_TIM_Base_MspInit+0x1d8>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80015d4:	4b4e      	ldr	r3, [pc, #312]	@ (8001710 <HAL_TIM_Base_MspInit+0x1d8>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	623b      	str	r3, [r7, #32]
 80015de:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e0:	4b4b      	ldr	r3, [pc, #300]	@ (8001710 <HAL_TIM_Base_MspInit+0x1d8>)
 80015e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e4:	4a4a      	ldr	r2, [pc, #296]	@ (8001710 <HAL_TIM_Base_MspInit+0x1d8>)
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ec:	4b48      	ldr	r3, [pc, #288]	@ (8001710 <HAL_TIM_Base_MspInit+0x1d8>)
 80015ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	61fb      	str	r3, [r7, #28]
 80015f6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = US2_ECHO_Pin;
 80015f8:	2320      	movs	r3, #32
 80015fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2302      	movs	r3, #2
 80015fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001604:	2300      	movs	r3, #0
 8001606:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001608:	2301      	movs	r3, #1
 800160a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(US2_ECHO_GPIO_Port, &GPIO_InitStruct);
 800160c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001610:	4619      	mov	r1, r3
 8001612:	4841      	ldr	r0, [pc, #260]	@ (8001718 <HAL_TIM_Base_MspInit+0x1e0>)
 8001614:	f000 fc30 	bl	8001e78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001618:	2200      	movs	r2, #0
 800161a:	2100      	movs	r1, #0
 800161c:	201c      	movs	r0, #28
 800161e:	f000 faea 	bl	8001bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001622:	201c      	movs	r0, #28
 8001624:	f000 fb03 	bl	8001c2e <HAL_NVIC_EnableIRQ>
}
 8001628:	e06b      	b.n	8001702 <HAL_TIM_Base_MspInit+0x1ca>
  else if(htim_base->Instance==TIM3)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a3b      	ldr	r2, [pc, #236]	@ (800171c <HAL_TIM_Base_MspInit+0x1e4>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d130      	bne.n	8001696 <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001634:	4b36      	ldr	r3, [pc, #216]	@ (8001710 <HAL_TIM_Base_MspInit+0x1d8>)
 8001636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001638:	4a35      	ldr	r2, [pc, #212]	@ (8001710 <HAL_TIM_Base_MspInit+0x1d8>)
 800163a:	f043 0302 	orr.w	r3, r3, #2
 800163e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001640:	4b33      	ldr	r3, [pc, #204]	@ (8001710 <HAL_TIM_Base_MspInit+0x1d8>)
 8001642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	61bb      	str	r3, [r7, #24]
 800164a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800164c:	4b30      	ldr	r3, [pc, #192]	@ (8001710 <HAL_TIM_Base_MspInit+0x1d8>)
 800164e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001650:	4a2f      	ldr	r2, [pc, #188]	@ (8001710 <HAL_TIM_Base_MspInit+0x1d8>)
 8001652:	f043 0304 	orr.w	r3, r3, #4
 8001656:	6313      	str	r3, [r2, #48]	@ 0x30
 8001658:	4b2d      	ldr	r3, [pc, #180]	@ (8001710 <HAL_TIM_Base_MspInit+0x1d8>)
 800165a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	617b      	str	r3, [r7, #20]
 8001662:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = US3_ECHO_Pin;
 8001664:	2340      	movs	r3, #64	@ 0x40
 8001666:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	2300      	movs	r3, #0
 8001672:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001674:	2302      	movs	r3, #2
 8001676:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(US3_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001678:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800167c:	4619      	mov	r1, r3
 800167e:	4828      	ldr	r0, [pc, #160]	@ (8001720 <HAL_TIM_Base_MspInit+0x1e8>)
 8001680:	f000 fbfa 	bl	8001e78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001684:	2200      	movs	r2, #0
 8001686:	2100      	movs	r1, #0
 8001688:	201d      	movs	r0, #29
 800168a:	f000 fab4 	bl	8001bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800168e:	201d      	movs	r0, #29
 8001690:	f000 facd 	bl	8001c2e <HAL_NVIC_EnableIRQ>
}
 8001694:	e035      	b.n	8001702 <HAL_TIM_Base_MspInit+0x1ca>
  else if(htim_base->Instance==TIM4)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a22      	ldr	r2, [pc, #136]	@ (8001724 <HAL_TIM_Base_MspInit+0x1ec>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d130      	bne.n	8001702 <HAL_TIM_Base_MspInit+0x1ca>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001710 <HAL_TIM_Base_MspInit+0x1d8>)
 80016a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a4:	4a1a      	ldr	r2, [pc, #104]	@ (8001710 <HAL_TIM_Base_MspInit+0x1d8>)
 80016a6:	f043 0304 	orr.w	r3, r3, #4
 80016aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ac:	4b18      	ldr	r3, [pc, #96]	@ (8001710 <HAL_TIM_Base_MspInit+0x1d8>)
 80016ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b8:	4b15      	ldr	r3, [pc, #84]	@ (8001710 <HAL_TIM_Base_MspInit+0x1d8>)
 80016ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016bc:	4a14      	ldr	r2, [pc, #80]	@ (8001710 <HAL_TIM_Base_MspInit+0x1d8>)
 80016be:	f043 0308 	orr.w	r3, r3, #8
 80016c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c4:	4b12      	ldr	r3, [pc, #72]	@ (8001710 <HAL_TIM_Base_MspInit+0x1d8>)
 80016c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c8:	f003 0308 	and.w	r3, r3, #8
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = US4_ECHO_Pin;
 80016d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	2302      	movs	r3, #2
 80016d8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016de:	2300      	movs	r3, #0
 80016e0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016e2:	2302      	movs	r3, #2
 80016e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(US4_ECHO_GPIO_Port, &GPIO_InitStruct);
 80016e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016ea:	4619      	mov	r1, r3
 80016ec:	480e      	ldr	r0, [pc, #56]	@ (8001728 <HAL_TIM_Base_MspInit+0x1f0>)
 80016ee:	f000 fbc3 	bl	8001e78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2100      	movs	r1, #0
 80016f6:	201e      	movs	r0, #30
 80016f8:	f000 fa7d 	bl	8001bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80016fc:	201e      	movs	r0, #30
 80016fe:	f000 fa96 	bl	8001c2e <HAL_NVIC_EnableIRQ>
}
 8001702:	bf00      	nop
 8001704:	3740      	adds	r7, #64	@ 0x40
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40010000 	.word	0x40010000
 8001710:	40023800 	.word	0x40023800
 8001714:	40021000 	.word	0x40021000
 8001718:	40020000 	.word	0x40020000
 800171c:	40000400 	.word	0x40000400
 8001720:	40020800 	.word	0x40020800
 8001724:	40000800 	.word	0x40000800
 8001728:	40020c00 	.word	0x40020c00

0800172c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b0ae      	sub	sp, #184	@ 0xb8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	2290      	movs	r2, #144	@ 0x90
 800174a:	2100      	movs	r1, #0
 800174c:	4618      	mov	r0, r3
 800174e:	f004 fef4 	bl	800653a <memset>
  if(huart->Instance==USART2)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a25      	ldr	r2, [pc, #148]	@ (80017ec <HAL_UART_MspInit+0xc0>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d142      	bne.n	80017e2 <HAL_UART_MspInit+0xb6>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800175c:	2380      	movs	r3, #128	@ 0x80
 800175e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001760:	2300      	movs	r3, #0
 8001762:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	4618      	mov	r0, r3
 800176a:	f001 feb9 	bl	80034e0 <HAL_RCCEx_PeriphCLKConfig>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001774:	f7ff fe10 	bl	8001398 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001778:	4b1d      	ldr	r3, [pc, #116]	@ (80017f0 <HAL_UART_MspInit+0xc4>)
 800177a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177c:	4a1c      	ldr	r2, [pc, #112]	@ (80017f0 <HAL_UART_MspInit+0xc4>)
 800177e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001782:	6413      	str	r3, [r2, #64]	@ 0x40
 8001784:	4b1a      	ldr	r3, [pc, #104]	@ (80017f0 <HAL_UART_MspInit+0xc4>)
 8001786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001788:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001790:	4b17      	ldr	r3, [pc, #92]	@ (80017f0 <HAL_UART_MspInit+0xc4>)
 8001792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001794:	4a16      	ldr	r2, [pc, #88]	@ (80017f0 <HAL_UART_MspInit+0xc4>)
 8001796:	f043 0308 	orr.w	r3, r3, #8
 800179a:	6313      	str	r3, [r2, #48]	@ 0x30
 800179c:	4b14      	ldr	r3, [pc, #80]	@ (80017f0 <HAL_UART_MspInit+0xc4>)
 800179e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a0:	f003 0308 	and.w	r3, r3, #8
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = Bluetooth_TX_Pin|Bluetooth_RX_Pin;
 80017a8:	2360      	movs	r3, #96	@ 0x60
 80017aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ae:	2302      	movs	r3, #2
 80017b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ba:	2303      	movs	r3, #3
 80017bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017c0:	2307      	movs	r3, #7
 80017c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80017ca:	4619      	mov	r1, r3
 80017cc:	4809      	ldr	r0, [pc, #36]	@ (80017f4 <HAL_UART_MspInit+0xc8>)
 80017ce:	f000 fb53 	bl	8001e78 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2102      	movs	r1, #2
 80017d6:	2026      	movs	r0, #38	@ 0x26
 80017d8:	f000 fa0d 	bl	8001bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017dc:	2026      	movs	r0, #38	@ 0x26
 80017de:	f000 fa26 	bl	8001c2e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80017e2:	bf00      	nop
 80017e4:	37b8      	adds	r7, #184	@ 0xb8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40004400 	.word	0x40004400
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40020c00 	.word	0x40020c00

080017f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017fc:	bf00      	nop
 80017fe:	e7fd      	b.n	80017fc <NMI_Handler+0x4>

08001800 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001804:	bf00      	nop
 8001806:	e7fd      	b.n	8001804 <HardFault_Handler+0x4>

08001808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800180c:	bf00      	nop
 800180e:	e7fd      	b.n	800180c <MemManage_Handler+0x4>

08001810 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <BusFault_Handler+0x4>

08001818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800181c:	bf00      	nop
 800181e:	e7fd      	b.n	800181c <UsageFault_Handler+0x4>

08001820 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800184e:	f000 f8b3 	bl	80019b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}

08001856 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BNO055_INT_Pin);
 800185a:	2008      	movs	r0, #8
 800185c:	f000 fcd2 	bl	8002204 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}

08001864 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001868:	4802      	ldr	r0, [pc, #8]	@ (8001874 <TIM1_CC_IRQHandler+0x10>)
 800186a:	f002 fc69 	bl	8004140 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	200000dc 	.word	0x200000dc

08001878 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800187c:	4802      	ldr	r0, [pc, #8]	@ (8001888 <TIM2_IRQHandler+0x10>)
 800187e:	f002 fc5f 	bl	8004140 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000128 	.word	0x20000128

0800188c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001890:	4802      	ldr	r0, [pc, #8]	@ (800189c <TIM3_IRQHandler+0x10>)
 8001892:	f002 fc55 	bl	8004140 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000174 	.word	0x20000174

080018a0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80018a4:	4802      	ldr	r0, [pc, #8]	@ (80018b0 <TIM4_IRQHandler+0x10>)
 80018a6:	f002 fc4b 	bl	8004140 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200001c0 	.word	0x200001c0

080018b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018b8:	4802      	ldr	r0, [pc, #8]	@ (80018c4 <USART2_IRQHandler+0x10>)
 80018ba:	f003 fb4d 	bl	8004f58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	2000020c 	.word	0x2000020c

080018c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018cc:	4b06      	ldr	r3, [pc, #24]	@ (80018e8 <SystemInit+0x20>)
 80018ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018d2:	4a05      	ldr	r2, [pc, #20]	@ (80018e8 <SystemInit+0x20>)
 80018d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001924 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018f0:	f7ff ffea 	bl	80018c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018f4:	480c      	ldr	r0, [pc, #48]	@ (8001928 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018f6:	490d      	ldr	r1, [pc, #52]	@ (800192c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001930 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018fc:	e002      	b.n	8001904 <LoopCopyDataInit>

080018fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001902:	3304      	adds	r3, #4

08001904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001908:	d3f9      	bcc.n	80018fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800190a:	4a0a      	ldr	r2, [pc, #40]	@ (8001934 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800190c:	4c0a      	ldr	r4, [pc, #40]	@ (8001938 <LoopFillZerobss+0x22>)
  movs r3, #0
 800190e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001910:	e001      	b.n	8001916 <LoopFillZerobss>

08001912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001914:	3204      	adds	r2, #4

08001916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001918:	d3fb      	bcc.n	8001912 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800191a:	f004 fe2d 	bl	8006578 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800191e:	f7ff f901 	bl	8000b24 <main>
  bx  lr    
 8001922:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001924:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800192c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001930:	08006630 	.word	0x08006630
  ldr r2, =_sbss
 8001934:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001938:	200002d4 	.word	0x200002d4

0800193c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800193c:	e7fe      	b.n	800193c <ADC_IRQHandler>

0800193e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001942:	2003      	movs	r0, #3
 8001944:	f000 f94c 	bl	8001be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001948:	2001      	movs	r0, #1
 800194a:	f000 f805 	bl	8001958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800194e:	f7ff fd29 	bl	80013a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001960:	4b12      	ldr	r3, [pc, #72]	@ (80019ac <HAL_InitTick+0x54>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4b12      	ldr	r3, [pc, #72]	@ (80019b0 <HAL_InitTick+0x58>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	4619      	mov	r1, r3
 800196a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800196e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001972:	fbb2 f3f3 	udiv	r3, r2, r3
 8001976:	4618      	mov	r0, r3
 8001978:	f000 f967 	bl	8001c4a <HAL_SYSTICK_Config>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e00e      	b.n	80019a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b0f      	cmp	r3, #15
 800198a:	d80a      	bhi.n	80019a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800198c:	2200      	movs	r2, #0
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	f04f 30ff 	mov.w	r0, #4294967295
 8001994:	f000 f92f 	bl	8001bf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001998:	4a06      	ldr	r2, [pc, #24]	@ (80019b4 <HAL_InitTick+0x5c>)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800199e:	2300      	movs	r3, #0
 80019a0:	e000      	b.n	80019a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	2000000c 	.word	0x2000000c
 80019b0:	20000014 	.word	0x20000014
 80019b4:	20000010 	.word	0x20000010

080019b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019bc:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <HAL_IncTick+0x20>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	4b06      	ldr	r3, [pc, #24]	@ (80019dc <HAL_IncTick+0x24>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4413      	add	r3, r2
 80019c8:	4a04      	ldr	r2, [pc, #16]	@ (80019dc <HAL_IncTick+0x24>)
 80019ca:	6013      	str	r3, [r2, #0]
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	20000014 	.word	0x20000014
 80019dc:	200002d0 	.word	0x200002d0

080019e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return uwTick;
 80019e4:	4b03      	ldr	r3, [pc, #12]	@ (80019f4 <HAL_GetTick+0x14>)
 80019e6:	681b      	ldr	r3, [r3, #0]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	200002d0 	.word	0x200002d0

080019f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a00:	f7ff ffee 	bl	80019e0 <HAL_GetTick>
 8001a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a10:	d005      	beq.n	8001a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a12:	4b0a      	ldr	r3, [pc, #40]	@ (8001a3c <HAL_Delay+0x44>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a1e:	bf00      	nop
 8001a20:	f7ff ffde 	bl	80019e0 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d8f7      	bhi.n	8001a20 <HAL_Delay+0x28>
  {
  }
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000014 	.word	0x20000014

08001a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a50:	4b0b      	ldr	r3, [pc, #44]	@ (8001a80 <__NVIC_SetPriorityGrouping+0x40>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a68:	4b06      	ldr	r3, [pc, #24]	@ (8001a84 <__NVIC_SetPriorityGrouping+0x44>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a6e:	4a04      	ldr	r2, [pc, #16]	@ (8001a80 <__NVIC_SetPriorityGrouping+0x40>)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	60d3      	str	r3, [r2, #12]
}
 8001a74:	bf00      	nop
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000ed00 	.word	0xe000ed00
 8001a84:	05fa0000 	.word	0x05fa0000

08001a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a8c:	4b04      	ldr	r3, [pc, #16]	@ (8001aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	0a1b      	lsrs	r3, r3, #8
 8001a92:	f003 0307 	and.w	r3, r3, #7
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	db0b      	blt.n	8001ace <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	f003 021f 	and.w	r2, r3, #31
 8001abc:	4907      	ldr	r1, [pc, #28]	@ (8001adc <__NVIC_EnableIRQ+0x38>)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	095b      	lsrs	r3, r3, #5
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	e000e100 	.word	0xe000e100

08001ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	6039      	str	r1, [r7, #0]
 8001aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	db0a      	blt.n	8001b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	490c      	ldr	r1, [pc, #48]	@ (8001b2c <__NVIC_SetPriority+0x4c>)
 8001afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afe:	0112      	lsls	r2, r2, #4
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	440b      	add	r3, r1
 8001b04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b08:	e00a      	b.n	8001b20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	4908      	ldr	r1, [pc, #32]	@ (8001b30 <__NVIC_SetPriority+0x50>)
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	3b04      	subs	r3, #4
 8001b18:	0112      	lsls	r2, r2, #4
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	761a      	strb	r2, [r3, #24]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	e000e100 	.word	0xe000e100
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b089      	sub	sp, #36	@ 0x24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f1c3 0307 	rsb	r3, r3, #7
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	bf28      	it	cs
 8001b52:	2304      	movcs	r3, #4
 8001b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3304      	adds	r3, #4
 8001b5a:	2b06      	cmp	r3, #6
 8001b5c:	d902      	bls.n	8001b64 <NVIC_EncodePriority+0x30>
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3b03      	subs	r3, #3
 8001b62:	e000      	b.n	8001b66 <NVIC_EncodePriority+0x32>
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b68:	f04f 32ff 	mov.w	r2, #4294967295
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43da      	mvns	r2, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	401a      	ands	r2, r3
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	fa01 f303 	lsl.w	r3, r1, r3
 8001b86:	43d9      	mvns	r1, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b8c:	4313      	orrs	r3, r2
         );
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3724      	adds	r7, #36	@ 0x24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
	...

08001b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bac:	d301      	bcc.n	8001bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e00f      	b.n	8001bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bdc <SysTick_Config+0x40>)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bba:	210f      	movs	r1, #15
 8001bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc0:	f7ff ff8e 	bl	8001ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc4:	4b05      	ldr	r3, [pc, #20]	@ (8001bdc <SysTick_Config+0x40>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bca:	4b04      	ldr	r3, [pc, #16]	@ (8001bdc <SysTick_Config+0x40>)
 8001bcc:	2207      	movs	r2, #7
 8001bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	e000e010 	.word	0xe000e010

08001be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff ff29 	bl	8001a40 <__NVIC_SetPriorityGrouping>
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b086      	sub	sp, #24
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	60b9      	str	r1, [r7, #8]
 8001c00:	607a      	str	r2, [r7, #4]
 8001c02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c08:	f7ff ff3e 	bl	8001a88 <__NVIC_GetPriorityGrouping>
 8001c0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	68b9      	ldr	r1, [r7, #8]
 8001c12:	6978      	ldr	r0, [r7, #20]
 8001c14:	f7ff ff8e 	bl	8001b34 <NVIC_EncodePriority>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c1e:	4611      	mov	r1, r2
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff ff5d 	bl	8001ae0 <__NVIC_SetPriority>
}
 8001c26:	bf00      	nop
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	4603      	mov	r3, r0
 8001c36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff31 	bl	8001aa4 <__NVIC_EnableIRQ>
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff ffa2 	bl	8001b9c <SysTick_Config>
 8001c58:	4603      	mov	r3, r0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001c68:	f3bf 8f5f 	dmb	sy
}
 8001c6c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001c6e:	4b07      	ldr	r3, [pc, #28]	@ (8001c8c <HAL_MPU_Disable+0x28>)
 8001c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c72:	4a06      	ldr	r2, [pc, #24]	@ (8001c8c <HAL_MPU_Disable+0x28>)
 8001c74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c78:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001c7a:	4b05      	ldr	r3, [pc, #20]	@ (8001c90 <HAL_MPU_Disable+0x2c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	605a      	str	r2, [r3, #4]
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	e000ed00 	.word	0xe000ed00
 8001c90:	e000ed90 	.word	0xe000ed90

08001c94 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001c9c:	4a0b      	ldr	r2, [pc, #44]	@ (8001ccc <HAL_MPU_Enable+0x38>)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd0 <HAL_MPU_Enable+0x3c>)
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001caa:	4a09      	ldr	r2, [pc, #36]	@ (8001cd0 <HAL_MPU_Enable+0x3c>)
 8001cac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cb0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001cb2:	f3bf 8f4f 	dsb	sy
}
 8001cb6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cb8:	f3bf 8f6f 	isb	sy
}
 8001cbc:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	e000ed90 	.word	0xe000ed90
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	785a      	ldrb	r2, [r3, #1]
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d50 <HAL_MPU_ConfigRegion+0x7c>)
 8001ce2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d50 <HAL_MPU_ConfigRegion+0x7c>)
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	4a19      	ldr	r2, [pc, #100]	@ (8001d50 <HAL_MPU_ConfigRegion+0x7c>)
 8001cea:	f023 0301 	bic.w	r3, r3, #1
 8001cee:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001cf0:	4a17      	ldr	r2, [pc, #92]	@ (8001d50 <HAL_MPU_ConfigRegion+0x7c>)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	7b1b      	ldrb	r3, [r3, #12]
 8001cfc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	7adb      	ldrb	r3, [r3, #11]
 8001d02:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	7a9b      	ldrb	r3, [r3, #10]
 8001d0a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	7b5b      	ldrb	r3, [r3, #13]
 8001d12:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	7b9b      	ldrb	r3, [r3, #14]
 8001d1a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	7bdb      	ldrb	r3, [r3, #15]
 8001d22:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	7a5b      	ldrb	r3, [r3, #9]
 8001d2a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	7a1b      	ldrb	r3, [r3, #8]
 8001d32:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d34:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	7812      	ldrb	r2, [r2, #0]
 8001d3a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d3c:	4a04      	ldr	r2, [pc, #16]	@ (8001d50 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d3e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d40:	6113      	str	r3, [r2, #16]
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	e000ed90 	.word	0xe000ed90

08001d54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d60:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d62:	f7ff fe3d 	bl	80019e0 <HAL_GetTick>
 8001d66:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d008      	beq.n	8001d86 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2280      	movs	r2, #128	@ 0x80
 8001d78:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e052      	b.n	8001e2c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 0216 	bic.w	r2, r2, #22
 8001d94:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	695a      	ldr	r2, [r3, #20]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001da4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d103      	bne.n	8001db6 <HAL_DMA_Abort+0x62>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d007      	beq.n	8001dc6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 0208 	bic.w	r2, r2, #8
 8001dc4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 0201 	bic.w	r2, r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dd6:	e013      	b.n	8001e00 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dd8:	f7ff fe02 	bl	80019e0 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b05      	cmp	r3, #5
 8001de4:	d90c      	bls.n	8001e00 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2220      	movs	r2, #32
 8001dea:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2203      	movs	r2, #3
 8001df0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e015      	b.n	8001e2c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1e4      	bne.n	8001dd8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e12:	223f      	movs	r2, #63	@ 0x3f
 8001e14:	409a      	lsls	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d004      	beq.n	8001e52 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2280      	movs	r2, #128	@ 0x80
 8001e4c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e00c      	b.n	8001e6c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2205      	movs	r2, #5
 8001e56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0201 	bic.w	r2, r2, #1
 8001e68:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b089      	sub	sp, #36	@ 0x24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001e92:	2300      	movs	r3, #0
 8001e94:	61fb      	str	r3, [r7, #28]
 8001e96:	e175      	b.n	8002184 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e98:	2201      	movs	r2, #1
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	f040 8164 	bne.w	800217e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d005      	beq.n	8001ece <HAL_GPIO_Init+0x56>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d130      	bne.n	8001f30 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	2203      	movs	r2, #3
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f04:	2201      	movs	r2, #1
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	f003 0201 	and.w	r2, r3, #1
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	d017      	beq.n	8001f6c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	2203      	movs	r2, #3
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d123      	bne.n	8001fc0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	08da      	lsrs	r2, r3, #3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3208      	adds	r2, #8
 8001f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	220f      	movs	r2, #15
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	691a      	ldr	r2, [r3, #16]
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	08da      	lsrs	r2, r3, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3208      	adds	r2, #8
 8001fba:	69b9      	ldr	r1, [r7, #24]
 8001fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	2203      	movs	r2, #3
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 0203 	and.w	r2, r3, #3
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 80be 	beq.w	800217e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002002:	4b66      	ldr	r3, [pc, #408]	@ (800219c <HAL_GPIO_Init+0x324>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002006:	4a65      	ldr	r2, [pc, #404]	@ (800219c <HAL_GPIO_Init+0x324>)
 8002008:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800200c:	6453      	str	r3, [r2, #68]	@ 0x44
 800200e:	4b63      	ldr	r3, [pc, #396]	@ (800219c <HAL_GPIO_Init+0x324>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002012:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800201a:	4a61      	ldr	r2, [pc, #388]	@ (80021a0 <HAL_GPIO_Init+0x328>)
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	089b      	lsrs	r3, r3, #2
 8002020:	3302      	adds	r3, #2
 8002022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002026:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	220f      	movs	r2, #15
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a58      	ldr	r2, [pc, #352]	@ (80021a4 <HAL_GPIO_Init+0x32c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d037      	beq.n	80020b6 <HAL_GPIO_Init+0x23e>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a57      	ldr	r2, [pc, #348]	@ (80021a8 <HAL_GPIO_Init+0x330>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d031      	beq.n	80020b2 <HAL_GPIO_Init+0x23a>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a56      	ldr	r2, [pc, #344]	@ (80021ac <HAL_GPIO_Init+0x334>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d02b      	beq.n	80020ae <HAL_GPIO_Init+0x236>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a55      	ldr	r2, [pc, #340]	@ (80021b0 <HAL_GPIO_Init+0x338>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d025      	beq.n	80020aa <HAL_GPIO_Init+0x232>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a54      	ldr	r2, [pc, #336]	@ (80021b4 <HAL_GPIO_Init+0x33c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d01f      	beq.n	80020a6 <HAL_GPIO_Init+0x22e>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a53      	ldr	r2, [pc, #332]	@ (80021b8 <HAL_GPIO_Init+0x340>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d019      	beq.n	80020a2 <HAL_GPIO_Init+0x22a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a52      	ldr	r2, [pc, #328]	@ (80021bc <HAL_GPIO_Init+0x344>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d013      	beq.n	800209e <HAL_GPIO_Init+0x226>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a51      	ldr	r2, [pc, #324]	@ (80021c0 <HAL_GPIO_Init+0x348>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d00d      	beq.n	800209a <HAL_GPIO_Init+0x222>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a50      	ldr	r2, [pc, #320]	@ (80021c4 <HAL_GPIO_Init+0x34c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d007      	beq.n	8002096 <HAL_GPIO_Init+0x21e>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a4f      	ldr	r2, [pc, #316]	@ (80021c8 <HAL_GPIO_Init+0x350>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d101      	bne.n	8002092 <HAL_GPIO_Init+0x21a>
 800208e:	2309      	movs	r3, #9
 8002090:	e012      	b.n	80020b8 <HAL_GPIO_Init+0x240>
 8002092:	230a      	movs	r3, #10
 8002094:	e010      	b.n	80020b8 <HAL_GPIO_Init+0x240>
 8002096:	2308      	movs	r3, #8
 8002098:	e00e      	b.n	80020b8 <HAL_GPIO_Init+0x240>
 800209a:	2307      	movs	r3, #7
 800209c:	e00c      	b.n	80020b8 <HAL_GPIO_Init+0x240>
 800209e:	2306      	movs	r3, #6
 80020a0:	e00a      	b.n	80020b8 <HAL_GPIO_Init+0x240>
 80020a2:	2305      	movs	r3, #5
 80020a4:	e008      	b.n	80020b8 <HAL_GPIO_Init+0x240>
 80020a6:	2304      	movs	r3, #4
 80020a8:	e006      	b.n	80020b8 <HAL_GPIO_Init+0x240>
 80020aa:	2303      	movs	r3, #3
 80020ac:	e004      	b.n	80020b8 <HAL_GPIO_Init+0x240>
 80020ae:	2302      	movs	r3, #2
 80020b0:	e002      	b.n	80020b8 <HAL_GPIO_Init+0x240>
 80020b2:	2301      	movs	r3, #1
 80020b4:	e000      	b.n	80020b8 <HAL_GPIO_Init+0x240>
 80020b6:	2300      	movs	r3, #0
 80020b8:	69fa      	ldr	r2, [r7, #28]
 80020ba:	f002 0203 	and.w	r2, r2, #3
 80020be:	0092      	lsls	r2, r2, #2
 80020c0:	4093      	lsls	r3, r2
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80020c8:	4935      	ldr	r1, [pc, #212]	@ (80021a0 <HAL_GPIO_Init+0x328>)
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	089b      	lsrs	r3, r3, #2
 80020ce:	3302      	adds	r3, #2
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020d6:	4b3d      	ldr	r3, [pc, #244]	@ (80021cc <HAL_GPIO_Init+0x354>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	43db      	mvns	r3, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4013      	ands	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020fa:	4a34      	ldr	r2, [pc, #208]	@ (80021cc <HAL_GPIO_Init+0x354>)
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002100:	4b32      	ldr	r3, [pc, #200]	@ (80021cc <HAL_GPIO_Init+0x354>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002124:	4a29      	ldr	r2, [pc, #164]	@ (80021cc <HAL_GPIO_Init+0x354>)
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800212a:	4b28      	ldr	r3, [pc, #160]	@ (80021cc <HAL_GPIO_Init+0x354>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	43db      	mvns	r3, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4013      	ands	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800214e:	4a1f      	ldr	r2, [pc, #124]	@ (80021cc <HAL_GPIO_Init+0x354>)
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002154:	4b1d      	ldr	r3, [pc, #116]	@ (80021cc <HAL_GPIO_Init+0x354>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	4313      	orrs	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002178:	4a14      	ldr	r2, [pc, #80]	@ (80021cc <HAL_GPIO_Init+0x354>)
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	3301      	adds	r3, #1
 8002182:	61fb      	str	r3, [r7, #28]
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	2b0f      	cmp	r3, #15
 8002188:	f67f ae86 	bls.w	8001e98 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800218c:	bf00      	nop
 800218e:	bf00      	nop
 8002190:	3724      	adds	r7, #36	@ 0x24
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	40023800 	.word	0x40023800
 80021a0:	40013800 	.word	0x40013800
 80021a4:	40020000 	.word	0x40020000
 80021a8:	40020400 	.word	0x40020400
 80021ac:	40020800 	.word	0x40020800
 80021b0:	40020c00 	.word	0x40020c00
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40021400 	.word	0x40021400
 80021bc:	40021800 	.word	0x40021800
 80021c0:	40021c00 	.word	0x40021c00
 80021c4:	40022000 	.word	0x40022000
 80021c8:	40022400 	.word	0x40022400
 80021cc:	40013c00 	.word	0x40013c00

080021d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	807b      	strh	r3, [r7, #2]
 80021dc:	4613      	mov	r3, r2
 80021de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021e0:	787b      	ldrb	r3, [r7, #1]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021e6:	887a      	ldrh	r2, [r7, #2]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80021ec:	e003      	b.n	80021f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80021ee:	887b      	ldrh	r3, [r7, #2]
 80021f0:	041a      	lsls	r2, r3, #16
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	619a      	str	r2, [r3, #24]
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
	...

08002204 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800220e:	4b08      	ldr	r3, [pc, #32]	@ (8002230 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002210:	695a      	ldr	r2, [r3, #20]
 8002212:	88fb      	ldrh	r3, [r7, #6]
 8002214:	4013      	ands	r3, r2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d006      	beq.n	8002228 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800221a:	4a05      	ldr	r2, [pc, #20]	@ (8002230 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800221c:	88fb      	ldrh	r3, [r7, #6]
 800221e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002220:	88fb      	ldrh	r3, [r7, #6]
 8002222:	4618      	mov	r0, r3
 8002224:	f000 f806 	bl	8002234 <HAL_GPIO_EXTI_Callback>
  }
}
 8002228:	bf00      	nop
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40013c00 	.word	0x40013c00

08002234 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
	...

0800224c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e08b      	b.n	8002376 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d106      	bne.n	8002278 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff f8ba 	bl	80013ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2224      	movs	r2, #36	@ 0x24
 800227c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0201 	bic.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800229c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d107      	bne.n	80022c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	e006      	b.n	80022d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80022d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d108      	bne.n	80022ee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022ea:	605a      	str	r2, [r3, #4]
 80022ec:	e007      	b.n	80022fe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6859      	ldr	r1, [r3, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	4b1d      	ldr	r3, [pc, #116]	@ (8002380 <HAL_I2C_Init+0x134>)
 800230a:	430b      	orrs	r3, r1
 800230c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68da      	ldr	r2, [r3, #12]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800231c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69d9      	ldr	r1, [r3, #28]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a1a      	ldr	r2, [r3, #32]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0201 	orr.w	r2, r2, #1
 8002356:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2220      	movs	r2, #32
 8002362:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	02008000 	.word	0x02008000

08002384 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b088      	sub	sp, #32
 8002388:	af02      	add	r7, sp, #8
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	607a      	str	r2, [r7, #4]
 800238e:	461a      	mov	r2, r3
 8002390:	460b      	mov	r3, r1
 8002392:	817b      	strh	r3, [r7, #10]
 8002394:	4613      	mov	r3, r2
 8002396:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b20      	cmp	r3, #32
 80023a2:	f040 80fd 	bne.w	80025a0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d101      	bne.n	80023b4 <HAL_I2C_Master_Transmit+0x30>
 80023b0:	2302      	movs	r3, #2
 80023b2:	e0f6      	b.n	80025a2 <HAL_I2C_Master_Transmit+0x21e>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023bc:	f7ff fb10 	bl	80019e0 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	2319      	movs	r3, #25
 80023c8:	2201      	movs	r2, #1
 80023ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 f914 	bl	80025fc <I2C_WaitOnFlagUntilTimeout>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e0e1      	b.n	80025a2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2221      	movs	r2, #33	@ 0x21
 80023e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2210      	movs	r2, #16
 80023ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	893a      	ldrh	r2, [r7, #8]
 80023fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800240a:	b29b      	uxth	r3, r3
 800240c:	2bff      	cmp	r3, #255	@ 0xff
 800240e:	d906      	bls.n	800241e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	22ff      	movs	r2, #255	@ 0xff
 8002414:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002416:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	e007      	b.n	800242e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002422:	b29a      	uxth	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002428:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800242c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002432:	2b00      	cmp	r3, #0
 8002434:	d024      	beq.n	8002480 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243a:	781a      	ldrb	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002446:	1c5a      	adds	r2, r3, #1
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002450:	b29b      	uxth	r3, r3
 8002452:	3b01      	subs	r3, #1
 8002454:	b29a      	uxth	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800245e:	3b01      	subs	r3, #1
 8002460:	b29a      	uxth	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800246a:	b2db      	uxtb	r3, r3
 800246c:	3301      	adds	r3, #1
 800246e:	b2da      	uxtb	r2, r3
 8002470:	8979      	ldrh	r1, [r7, #10]
 8002472:	4b4e      	ldr	r3, [pc, #312]	@ (80025ac <HAL_I2C_Master_Transmit+0x228>)
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 fa83 	bl	8002984 <I2C_TransferConfig>
 800247e:	e066      	b.n	800254e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002484:	b2da      	uxtb	r2, r3
 8002486:	8979      	ldrh	r1, [r7, #10]
 8002488:	4b48      	ldr	r3, [pc, #288]	@ (80025ac <HAL_I2C_Master_Transmit+0x228>)
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f000 fa78 	bl	8002984 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002494:	e05b      	b.n	800254e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	6a39      	ldr	r1, [r7, #32]
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f000 f907 	bl	80026ae <I2C_WaitOnTXISFlagUntilTimeout>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e07b      	b.n	80025a2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ae:	781a      	ldrb	r2, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ba:	1c5a      	adds	r2, r3, #1
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	3b01      	subs	r3, #1
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024d2:	3b01      	subs	r3, #1
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024de:	b29b      	uxth	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d034      	beq.n	800254e <HAL_I2C_Master_Transmit+0x1ca>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d130      	bne.n	800254e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	2200      	movs	r2, #0
 80024f4:	2180      	movs	r1, #128	@ 0x80
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 f880 	bl	80025fc <I2C_WaitOnFlagUntilTimeout>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e04d      	b.n	80025a2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800250a:	b29b      	uxth	r3, r3
 800250c:	2bff      	cmp	r3, #255	@ 0xff
 800250e:	d90e      	bls.n	800252e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	22ff      	movs	r2, #255	@ 0xff
 8002514:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800251a:	b2da      	uxtb	r2, r3
 800251c:	8979      	ldrh	r1, [r7, #10]
 800251e:	2300      	movs	r3, #0
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 fa2c 	bl	8002984 <I2C_TransferConfig>
 800252c:	e00f      	b.n	800254e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800253c:	b2da      	uxtb	r2, r3
 800253e:	8979      	ldrh	r1, [r7, #10]
 8002540:	2300      	movs	r3, #0
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 fa1b 	bl	8002984 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002552:	b29b      	uxth	r3, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	d19e      	bne.n	8002496 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	6a39      	ldr	r1, [r7, #32]
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f000 f8ed 	bl	800273c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e01a      	b.n	80025a2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2220      	movs	r2, #32
 8002572:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6859      	ldr	r1, [r3, #4]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	4b0c      	ldr	r3, [pc, #48]	@ (80025b0 <HAL_I2C_Master_Transmit+0x22c>)
 8002580:	400b      	ands	r3, r1
 8002582:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2220      	movs	r2, #32
 8002588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800259c:	2300      	movs	r3, #0
 800259e:	e000      	b.n	80025a2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80025a0:	2302      	movs	r3, #2
  }
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	80002000 	.word	0x80002000
 80025b0:	fe00e800 	.word	0xfe00e800

080025b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d103      	bne.n	80025d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2200      	movs	r2, #0
 80025d0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d007      	beq.n	80025f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	699a      	ldr	r2, [r3, #24]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0201 	orr.w	r2, r2, #1
 80025ee:	619a      	str	r2, [r3, #24]
  }
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	603b      	str	r3, [r7, #0]
 8002608:	4613      	mov	r3, r2
 800260a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800260c:	e03b      	b.n	8002686 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	6839      	ldr	r1, [r7, #0]
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 f8d6 	bl	80027c4 <I2C_IsErrorOccurred>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e041      	b.n	80026a6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002628:	d02d      	beq.n	8002686 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800262a:	f7ff f9d9 	bl	80019e0 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d302      	bcc.n	8002640 <I2C_WaitOnFlagUntilTimeout+0x44>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d122      	bne.n	8002686 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699a      	ldr	r2, [r3, #24]
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	4013      	ands	r3, r2
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	429a      	cmp	r2, r3
 800264e:	bf0c      	ite	eq
 8002650:	2301      	moveq	r3, #1
 8002652:	2300      	movne	r3, #0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	461a      	mov	r2, r3
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	429a      	cmp	r2, r3
 800265c:	d113      	bne.n	8002686 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002662:	f043 0220 	orr.w	r2, r3, #32
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2220      	movs	r2, #32
 800266e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e00f      	b.n	80026a6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	699a      	ldr	r2, [r3, #24]
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	4013      	ands	r3, r2
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	429a      	cmp	r2, r3
 8002694:	bf0c      	ite	eq
 8002696:	2301      	moveq	r3, #1
 8002698:	2300      	movne	r3, #0
 800269a:	b2db      	uxtb	r3, r3
 800269c:	461a      	mov	r2, r3
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d0b4      	beq.n	800260e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b084      	sub	sp, #16
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	60f8      	str	r0, [r7, #12]
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026ba:	e033      	b.n	8002724 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	68b9      	ldr	r1, [r7, #8]
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 f87f 	bl	80027c4 <I2C_IsErrorOccurred>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e031      	b.n	8002734 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d6:	d025      	beq.n	8002724 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026d8:	f7ff f982 	bl	80019e0 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d302      	bcc.n	80026ee <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d11a      	bne.n	8002724 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d013      	beq.n	8002724 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002700:	f043 0220 	orr.w	r2, r3, #32
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2220      	movs	r2, #32
 800270c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e007      	b.n	8002734 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b02      	cmp	r3, #2
 8002730:	d1c4      	bne.n	80026bc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002748:	e02f      	b.n	80027aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	68b9      	ldr	r1, [r7, #8]
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 f838 	bl	80027c4 <I2C_IsErrorOccurred>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e02d      	b.n	80027ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800275e:	f7ff f93f 	bl	80019e0 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	429a      	cmp	r2, r3
 800276c:	d302      	bcc.n	8002774 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d11a      	bne.n	80027aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	f003 0320 	and.w	r3, r3, #32
 800277e:	2b20      	cmp	r3, #32
 8002780:	d013      	beq.n	80027aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002786:	f043 0220 	orr.w	r2, r3, #32
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2220      	movs	r2, #32
 8002792:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e007      	b.n	80027ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	f003 0320 	and.w	r3, r3, #32
 80027b4:	2b20      	cmp	r3, #32
 80027b6:	d1c8      	bne.n	800274a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
	...

080027c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08a      	sub	sp, #40	@ 0x28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027d0:	2300      	movs	r3, #0
 80027d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80027de:	2300      	movs	r3, #0
 80027e0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	f003 0310 	and.w	r3, r3, #16
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d068      	beq.n	80028c2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2210      	movs	r2, #16
 80027f6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80027f8:	e049      	b.n	800288e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002800:	d045      	beq.n	800288e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002802:	f7ff f8ed 	bl	80019e0 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	429a      	cmp	r2, r3
 8002810:	d302      	bcc.n	8002818 <I2C_IsErrorOccurred+0x54>
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d13a      	bne.n	800288e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002822:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800282a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002836:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800283a:	d121      	bne.n	8002880 <I2C_IsErrorOccurred+0xbc>
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002842:	d01d      	beq.n	8002880 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002844:	7cfb      	ldrb	r3, [r7, #19]
 8002846:	2b20      	cmp	r3, #32
 8002848:	d01a      	beq.n	8002880 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002858:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800285a:	f7ff f8c1 	bl	80019e0 <HAL_GetTick>
 800285e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002860:	e00e      	b.n	8002880 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002862:	f7ff f8bd 	bl	80019e0 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b19      	cmp	r3, #25
 800286e:	d907      	bls.n	8002880 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002870:	6a3b      	ldr	r3, [r7, #32]
 8002872:	f043 0320 	orr.w	r3, r3, #32
 8002876:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800287e:	e006      	b.n	800288e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	f003 0320 	and.w	r3, r3, #32
 800288a:	2b20      	cmp	r3, #32
 800288c:	d1e9      	bne.n	8002862 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	f003 0320 	and.w	r3, r3, #32
 8002898:	2b20      	cmp	r3, #32
 800289a:	d003      	beq.n	80028a4 <I2C_IsErrorOccurred+0xe0>
 800289c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0aa      	beq.n	80027fa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80028a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d103      	bne.n	80028b4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2220      	movs	r2, #32
 80028b2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80028b4:	6a3b      	ldr	r3, [r7, #32]
 80028b6:	f043 0304 	orr.w	r3, r3, #4
 80028ba:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00b      	beq.n	80028ec <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80028d4:	6a3b      	ldr	r3, [r7, #32]
 80028d6:	f043 0301 	orr.w	r3, r3, #1
 80028da:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00b      	beq.n	800290e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80028f6:	6a3b      	ldr	r3, [r7, #32]
 80028f8:	f043 0308 	orr.w	r3, r3, #8
 80028fc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002906:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00b      	beq.n	8002930 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	f043 0302 	orr.w	r3, r3, #2
 800291e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002928:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002930:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002934:	2b00      	cmp	r3, #0
 8002936:	d01c      	beq.n	8002972 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f7ff fe3b 	bl	80025b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6859      	ldr	r1, [r3, #4]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	4b0d      	ldr	r3, [pc, #52]	@ (8002980 <I2C_IsErrorOccurred+0x1bc>)
 800294a:	400b      	ands	r3, r1
 800294c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	431a      	orrs	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2220      	movs	r2, #32
 800295e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002972:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002976:	4618      	mov	r0, r3
 8002978:	3728      	adds	r7, #40	@ 0x28
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	fe00e800 	.word	0xfe00e800

08002984 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002984:	b480      	push	{r7}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	607b      	str	r3, [r7, #4]
 800298e:	460b      	mov	r3, r1
 8002990:	817b      	strh	r3, [r7, #10]
 8002992:	4613      	mov	r3, r2
 8002994:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002996:	897b      	ldrh	r3, [r7, #10]
 8002998:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800299c:	7a7b      	ldrb	r3, [r7, #9]
 800299e:	041b      	lsls	r3, r3, #16
 80029a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029a4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80029b2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	0d5b      	lsrs	r3, r3, #21
 80029be:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80029c2:	4b08      	ldr	r3, [pc, #32]	@ (80029e4 <I2C_TransferConfig+0x60>)
 80029c4:	430b      	orrs	r3, r1
 80029c6:	43db      	mvns	r3, r3
 80029c8:	ea02 0103 	and.w	r1, r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80029d6:	bf00      	nop
 80029d8:	371c      	adds	r7, #28
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	03ff63ff 	.word	0x03ff63ff

080029e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b20      	cmp	r3, #32
 80029fc:	d138      	bne.n	8002a70 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d101      	bne.n	8002a0c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e032      	b.n	8002a72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2224      	movs	r2, #36	@ 0x24
 8002a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0201 	bic.w	r2, r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a3a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6819      	ldr	r1, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0201 	orr.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	e000      	b.n	8002a72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a70:	2302      	movs	r3, #2
  }
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b085      	sub	sp, #20
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b20      	cmp	r3, #32
 8002a92:	d139      	bne.n	8002b08 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d101      	bne.n	8002aa2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	e033      	b.n	8002b0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2224      	movs	r2, #36	@ 0x24
 8002aae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 0201 	bic.w	r2, r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002ad0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	021b      	lsls	r3, r3, #8
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 0201 	orr.w	r2, r2, #1
 8002af2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2220      	movs	r2, #32
 8002af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b04:	2300      	movs	r3, #0
 8002b06:	e000      	b.n	8002b0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b08:	2302      	movs	r3, #2
  }
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
	...

08002b18 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b22:	4b23      	ldr	r3, [pc, #140]	@ (8002bb0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b26:	4a22      	ldr	r2, [pc, #136]	@ (8002bb0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b2e:	4b20      	ldr	r3, [pc, #128]	@ (8002bb0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b36:	603b      	str	r3, [r7, #0]
 8002b38:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b3a:	4b1e      	ldr	r3, [pc, #120]	@ (8002bb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a1d      	ldr	r2, [pc, #116]	@ (8002bb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b44:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b46:	f7fe ff4b 	bl	80019e0 <HAL_GetTick>
 8002b4a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b4c:	e009      	b.n	8002b62 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b4e:	f7fe ff47 	bl	80019e0 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b5c:	d901      	bls.n	8002b62 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e022      	b.n	8002ba8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b62:	4b14      	ldr	r3, [pc, #80]	@ (8002bb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b6e:	d1ee      	bne.n	8002b4e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b70:	4b10      	ldr	r3, [pc, #64]	@ (8002bb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a0f      	ldr	r2, [pc, #60]	@ (8002bb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b7a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b7c:	f7fe ff30 	bl	80019e0 <HAL_GetTick>
 8002b80:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b82:	e009      	b.n	8002b98 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b84:	f7fe ff2c 	bl	80019e0 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b92:	d901      	bls.n	8002b98 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e007      	b.n	8002ba8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b98:	4b06      	ldr	r3, [pc, #24]	@ (8002bb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ba4:	d1ee      	bne.n	8002b84 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	40007000 	.word	0x40007000

08002bb8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e29b      	b.n	8003106 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 8087 	beq.w	8002cea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bdc:	4b96      	ldr	r3, [pc, #600]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 030c 	and.w	r3, r3, #12
 8002be4:	2b04      	cmp	r3, #4
 8002be6:	d00c      	beq.n	8002c02 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002be8:	4b93      	ldr	r3, [pc, #588]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 030c 	and.w	r3, r3, #12
 8002bf0:	2b08      	cmp	r3, #8
 8002bf2:	d112      	bne.n	8002c1a <HAL_RCC_OscConfig+0x62>
 8002bf4:	4b90      	ldr	r3, [pc, #576]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bfc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c00:	d10b      	bne.n	8002c1a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c02:	4b8d      	ldr	r3, [pc, #564]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d06c      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x130>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d168      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e275      	b.n	8003106 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c22:	d106      	bne.n	8002c32 <HAL_RCC_OscConfig+0x7a>
 8002c24:	4b84      	ldr	r3, [pc, #528]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a83      	ldr	r2, [pc, #524]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c2e:	6013      	str	r3, [r2, #0]
 8002c30:	e02e      	b.n	8002c90 <HAL_RCC_OscConfig+0xd8>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10c      	bne.n	8002c54 <HAL_RCC_OscConfig+0x9c>
 8002c3a:	4b7f      	ldr	r3, [pc, #508]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a7e      	ldr	r2, [pc, #504]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	4b7c      	ldr	r3, [pc, #496]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a7b      	ldr	r2, [pc, #492]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	e01d      	b.n	8002c90 <HAL_RCC_OscConfig+0xd8>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c5c:	d10c      	bne.n	8002c78 <HAL_RCC_OscConfig+0xc0>
 8002c5e:	4b76      	ldr	r3, [pc, #472]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a75      	ldr	r2, [pc, #468]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	4b73      	ldr	r3, [pc, #460]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a72      	ldr	r2, [pc, #456]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	e00b      	b.n	8002c90 <HAL_RCC_OscConfig+0xd8>
 8002c78:	4b6f      	ldr	r3, [pc, #444]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a6e      	ldr	r2, [pc, #440]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	4b6c      	ldr	r3, [pc, #432]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a6b      	ldr	r2, [pc, #428]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d013      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c98:	f7fe fea2 	bl	80019e0 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca0:	f7fe fe9e 	bl	80019e0 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b64      	cmp	r3, #100	@ 0x64
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e229      	b.n	8003106 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb2:	4b61      	ldr	r3, [pc, #388]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCC_OscConfig+0xe8>
 8002cbe:	e014      	b.n	8002cea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc0:	f7fe fe8e 	bl	80019e0 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc8:	f7fe fe8a 	bl	80019e0 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	@ 0x64
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e215      	b.n	8003106 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cda:	4b57      	ldr	r3, [pc, #348]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x110>
 8002ce6:	e000      	b.n	8002cea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d069      	beq.n	8002dca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cf6:	4b50      	ldr	r3, [pc, #320]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00b      	beq.n	8002d1a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d02:	4b4d      	ldr	r3, [pc, #308]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 030c 	and.w	r3, r3, #12
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d11c      	bne.n	8002d48 <HAL_RCC_OscConfig+0x190>
 8002d0e:	4b4a      	ldr	r3, [pc, #296]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d116      	bne.n	8002d48 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d1a:	4b47      	ldr	r3, [pc, #284]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d005      	beq.n	8002d32 <HAL_RCC_OscConfig+0x17a>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d001      	beq.n	8002d32 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e1e9      	b.n	8003106 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d32:	4b41      	ldr	r3, [pc, #260]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	493d      	ldr	r1, [pc, #244]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d46:	e040      	b.n	8002dca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d023      	beq.n	8002d98 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d50:	4b39      	ldr	r3, [pc, #228]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a38      	ldr	r2, [pc, #224]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5c:	f7fe fe40 	bl	80019e0 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d64:	f7fe fe3c 	bl	80019e0 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e1c7      	b.n	8003106 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d76:	4b30      	ldr	r3, [pc, #192]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d82:	4b2d      	ldr	r3, [pc, #180]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	4929      	ldr	r1, [pc, #164]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	600b      	str	r3, [r1, #0]
 8002d96:	e018      	b.n	8002dca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d98:	4b27      	ldr	r3, [pc, #156]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a26      	ldr	r2, [pc, #152]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002d9e:	f023 0301 	bic.w	r3, r3, #1
 8002da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da4:	f7fe fe1c 	bl	80019e0 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dac:	f7fe fe18 	bl	80019e0 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e1a3      	b.n	8003106 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dbe:	4b1e      	ldr	r3, [pc, #120]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f0      	bne.n	8002dac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d038      	beq.n	8002e48 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d019      	beq.n	8002e12 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dde:	4b16      	ldr	r3, [pc, #88]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002de0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002de2:	4a15      	ldr	r2, [pc, #84]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dea:	f7fe fdf9 	bl	80019e0 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df2:	f7fe fdf5 	bl	80019e0 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e180      	b.n	8003106 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e04:	4b0c      	ldr	r3, [pc, #48]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002e06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0f0      	beq.n	8002df2 <HAL_RCC_OscConfig+0x23a>
 8002e10:	e01a      	b.n	8002e48 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e12:	4b09      	ldr	r3, [pc, #36]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e16:	4a08      	ldr	r2, [pc, #32]	@ (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002e18:	f023 0301 	bic.w	r3, r3, #1
 8002e1c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1e:	f7fe fddf 	bl	80019e0 <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e24:	e00a      	b.n	8002e3c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e26:	f7fe fddb 	bl	80019e0 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d903      	bls.n	8002e3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e166      	b.n	8003106 <HAL_RCC_OscConfig+0x54e>
 8002e38:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e3c:	4b92      	ldr	r3, [pc, #584]	@ (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002e3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1ee      	bne.n	8002e26 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 80a4 	beq.w	8002f9e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e56:	4b8c      	ldr	r3, [pc, #560]	@ (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10d      	bne.n	8002e7e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e62:	4b89      	ldr	r3, [pc, #548]	@ (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e66:	4a88      	ldr	r2, [pc, #544]	@ (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002e68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e6e:	4b86      	ldr	r3, [pc, #536]	@ (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e76:	60bb      	str	r3, [r7, #8]
 8002e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e7e:	4b83      	ldr	r3, [pc, #524]	@ (800308c <HAL_RCC_OscConfig+0x4d4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d118      	bne.n	8002ebc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e8a:	4b80      	ldr	r3, [pc, #512]	@ (800308c <HAL_RCC_OscConfig+0x4d4>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a7f      	ldr	r2, [pc, #508]	@ (800308c <HAL_RCC_OscConfig+0x4d4>)
 8002e90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e96:	f7fe fda3 	bl	80019e0 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e9e:	f7fe fd9f 	bl	80019e0 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b64      	cmp	r3, #100	@ 0x64
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e12a      	b.n	8003106 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eb0:	4b76      	ldr	r3, [pc, #472]	@ (800308c <HAL_RCC_OscConfig+0x4d4>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f0      	beq.n	8002e9e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d106      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x31a>
 8002ec4:	4b70      	ldr	r3, [pc, #448]	@ (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec8:	4a6f      	ldr	r2, [pc, #444]	@ (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ed0:	e02d      	b.n	8002f2e <HAL_RCC_OscConfig+0x376>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10c      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x33c>
 8002eda:	4b6b      	ldr	r3, [pc, #428]	@ (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ede:	4a6a      	ldr	r2, [pc, #424]	@ (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002ee0:	f023 0301 	bic.w	r3, r3, #1
 8002ee4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ee6:	4b68      	ldr	r3, [pc, #416]	@ (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eea:	4a67      	ldr	r2, [pc, #412]	@ (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002eec:	f023 0304 	bic.w	r3, r3, #4
 8002ef0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ef2:	e01c      	b.n	8002f2e <HAL_RCC_OscConfig+0x376>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2b05      	cmp	r3, #5
 8002efa:	d10c      	bne.n	8002f16 <HAL_RCC_OscConfig+0x35e>
 8002efc:	4b62      	ldr	r3, [pc, #392]	@ (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f00:	4a61      	ldr	r2, [pc, #388]	@ (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002f02:	f043 0304 	orr.w	r3, r3, #4
 8002f06:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f08:	4b5f      	ldr	r3, [pc, #380]	@ (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f0c:	4a5e      	ldr	r2, [pc, #376]	@ (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002f0e:	f043 0301 	orr.w	r3, r3, #1
 8002f12:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f14:	e00b      	b.n	8002f2e <HAL_RCC_OscConfig+0x376>
 8002f16:	4b5c      	ldr	r3, [pc, #368]	@ (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f1a:	4a5b      	ldr	r2, [pc, #364]	@ (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002f1c:	f023 0301 	bic.w	r3, r3, #1
 8002f20:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f22:	4b59      	ldr	r3, [pc, #356]	@ (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f26:	4a58      	ldr	r2, [pc, #352]	@ (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002f28:	f023 0304 	bic.w	r3, r3, #4
 8002f2c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d015      	beq.n	8002f62 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f36:	f7fe fd53 	bl	80019e0 <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f3c:	e00a      	b.n	8002f54 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f3e:	f7fe fd4f 	bl	80019e0 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e0d8      	b.n	8003106 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f54:	4b4c      	ldr	r3, [pc, #304]	@ (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0ee      	beq.n	8002f3e <HAL_RCC_OscConfig+0x386>
 8002f60:	e014      	b.n	8002f8c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f62:	f7fe fd3d 	bl	80019e0 <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f68:	e00a      	b.n	8002f80 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f6a:	f7fe fd39 	bl	80019e0 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e0c2      	b.n	8003106 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f80:	4b41      	ldr	r3, [pc, #260]	@ (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1ee      	bne.n	8002f6a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f8c:	7dfb      	ldrb	r3, [r7, #23]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d105      	bne.n	8002f9e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f92:	4b3d      	ldr	r3, [pc, #244]	@ (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f96:	4a3c      	ldr	r2, [pc, #240]	@ (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002f98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f9c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 80ae 	beq.w	8003104 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fa8:	4b37      	ldr	r3, [pc, #220]	@ (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 030c 	and.w	r3, r3, #12
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d06d      	beq.n	8003090 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d14b      	bne.n	8003054 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fbc:	4b32      	ldr	r3, [pc, #200]	@ (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a31      	ldr	r2, [pc, #196]	@ (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002fc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc8:	f7fe fd0a 	bl	80019e0 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd0:	f7fe fd06 	bl	80019e0 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e091      	b.n	8003106 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe2:	4b29      	ldr	r3, [pc, #164]	@ (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69da      	ldr	r2, [r3, #28]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffc:	019b      	lsls	r3, r3, #6
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003004:	085b      	lsrs	r3, r3, #1
 8003006:	3b01      	subs	r3, #1
 8003008:	041b      	lsls	r3, r3, #16
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003010:	061b      	lsls	r3, r3, #24
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003018:	071b      	lsls	r3, r3, #28
 800301a:	491b      	ldr	r1, [pc, #108]	@ (8003088 <HAL_RCC_OscConfig+0x4d0>)
 800301c:	4313      	orrs	r3, r2
 800301e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003020:	4b19      	ldr	r3, [pc, #100]	@ (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a18      	ldr	r2, [pc, #96]	@ (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8003026:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800302a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302c:	f7fe fcd8 	bl	80019e0 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003034:	f7fe fcd4 	bl	80019e0 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e05f      	b.n	8003106 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003046:	4b10      	ldr	r3, [pc, #64]	@ (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f0      	beq.n	8003034 <HAL_RCC_OscConfig+0x47c>
 8003052:	e057      	b.n	8003104 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003054:	4b0c      	ldr	r3, [pc, #48]	@ (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a0b      	ldr	r2, [pc, #44]	@ (8003088 <HAL_RCC_OscConfig+0x4d0>)
 800305a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800305e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003060:	f7fe fcbe 	bl	80019e0 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003068:	f7fe fcba 	bl	80019e0 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e045      	b.n	8003106 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307a:	4b03      	ldr	r3, [pc, #12]	@ (8003088 <HAL_RCC_OscConfig+0x4d0>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f0      	bne.n	8003068 <HAL_RCC_OscConfig+0x4b0>
 8003086:	e03d      	b.n	8003104 <HAL_RCC_OscConfig+0x54c>
 8003088:	40023800 	.word	0x40023800
 800308c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003090:	4b1f      	ldr	r3, [pc, #124]	@ (8003110 <HAL_RCC_OscConfig+0x558>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d030      	beq.n	8003100 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d129      	bne.n	8003100 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d122      	bne.n	8003100 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80030c0:	4013      	ands	r3, r2
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d119      	bne.n	8003100 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d6:	085b      	lsrs	r3, r3, #1
 80030d8:	3b01      	subs	r3, #1
 80030da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030dc:	429a      	cmp	r2, r3
 80030de:	d10f      	bne.n	8003100 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d107      	bne.n	8003100 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d001      	beq.n	8003104 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e000      	b.n	8003106 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40023800 	.word	0x40023800

08003114 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800311e:	2300      	movs	r3, #0
 8003120:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0d0      	b.n	80032ce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800312c:	4b6a      	ldr	r3, [pc, #424]	@ (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 030f 	and.w	r3, r3, #15
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	429a      	cmp	r2, r3
 8003138:	d910      	bls.n	800315c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313a:	4b67      	ldr	r3, [pc, #412]	@ (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f023 020f 	bic.w	r2, r3, #15
 8003142:	4965      	ldr	r1, [pc, #404]	@ (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	4313      	orrs	r3, r2
 8003148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800314a:	4b63      	ldr	r3, [pc, #396]	@ (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	429a      	cmp	r2, r3
 8003156:	d001      	beq.n	800315c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e0b8      	b.n	80032ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d020      	beq.n	80031aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b00      	cmp	r3, #0
 8003172:	d005      	beq.n	8003180 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003174:	4b59      	ldr	r3, [pc, #356]	@ (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	4a58      	ldr	r2, [pc, #352]	@ (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 800317a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800317e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0308 	and.w	r3, r3, #8
 8003188:	2b00      	cmp	r3, #0
 800318a:	d005      	beq.n	8003198 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800318c:	4b53      	ldr	r3, [pc, #332]	@ (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	4a52      	ldr	r2, [pc, #328]	@ (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 8003192:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003196:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003198:	4b50      	ldr	r3, [pc, #320]	@ (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	494d      	ldr	r1, [pc, #308]	@ (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d040      	beq.n	8003238 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d107      	bne.n	80031ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031be:	4b47      	ldr	r3, [pc, #284]	@ (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d115      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e07f      	b.n	80032ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d107      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d6:	4b41      	ldr	r3, [pc, #260]	@ (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d109      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e073      	b.n	80032ce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e6:	4b3d      	ldr	r3, [pc, #244]	@ (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e06b      	b.n	80032ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031f6:	4b39      	ldr	r3, [pc, #228]	@ (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f023 0203 	bic.w	r2, r3, #3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	4936      	ldr	r1, [pc, #216]	@ (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 8003204:	4313      	orrs	r3, r2
 8003206:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003208:	f7fe fbea 	bl	80019e0 <HAL_GetTick>
 800320c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320e:	e00a      	b.n	8003226 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003210:	f7fe fbe6 	bl	80019e0 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800321e:	4293      	cmp	r3, r2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e053      	b.n	80032ce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003226:	4b2d      	ldr	r3, [pc, #180]	@ (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 020c 	and.w	r2, r3, #12
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	429a      	cmp	r2, r3
 8003236:	d1eb      	bne.n	8003210 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003238:	4b27      	ldr	r3, [pc, #156]	@ (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 030f 	and.w	r3, r3, #15
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d210      	bcs.n	8003268 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003246:	4b24      	ldr	r3, [pc, #144]	@ (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f023 020f 	bic.w	r2, r3, #15
 800324e:	4922      	ldr	r1, [pc, #136]	@ (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	4313      	orrs	r3, r2
 8003254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003256:	4b20      	ldr	r3, [pc, #128]	@ (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	429a      	cmp	r2, r3
 8003262:	d001      	beq.n	8003268 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e032      	b.n	80032ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b00      	cmp	r3, #0
 8003272:	d008      	beq.n	8003286 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003274:	4b19      	ldr	r3, [pc, #100]	@ (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	4916      	ldr	r1, [pc, #88]	@ (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 8003282:	4313      	orrs	r3, r2
 8003284:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b00      	cmp	r3, #0
 8003290:	d009      	beq.n	80032a6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003292:	4b12      	ldr	r3, [pc, #72]	@ (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	490e      	ldr	r1, [pc, #56]	@ (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032a6:	f000 f821 	bl	80032ec <HAL_RCC_GetSysClockFreq>
 80032aa:	4602      	mov	r2, r0
 80032ac:	4b0b      	ldr	r3, [pc, #44]	@ (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	091b      	lsrs	r3, r3, #4
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	490a      	ldr	r1, [pc, #40]	@ (80032e0 <HAL_RCC_ClockConfig+0x1cc>)
 80032b8:	5ccb      	ldrb	r3, [r1, r3]
 80032ba:	fa22 f303 	lsr.w	r3, r2, r3
 80032be:	4a09      	ldr	r2, [pc, #36]	@ (80032e4 <HAL_RCC_ClockConfig+0x1d0>)
 80032c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032c2:	4b09      	ldr	r3, [pc, #36]	@ (80032e8 <HAL_RCC_ClockConfig+0x1d4>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fe fb46 	bl	8001958 <HAL_InitTick>

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40023c00 	.word	0x40023c00
 80032dc:	40023800 	.word	0x40023800
 80032e0:	08006608 	.word	0x08006608
 80032e4:	2000000c 	.word	0x2000000c
 80032e8:	20000010 	.word	0x20000010

080032ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032f0:	b090      	sub	sp, #64	@ 0x40
 80032f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80032f4:	2300      	movs	r3, #0
 80032f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80032f8:	2300      	movs	r3, #0
 80032fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032fc:	2300      	movs	r3, #0
 80032fe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003300:	2300      	movs	r3, #0
 8003302:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003304:	4b59      	ldr	r3, [pc, #356]	@ (800346c <HAL_RCC_GetSysClockFreq+0x180>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 030c 	and.w	r3, r3, #12
 800330c:	2b08      	cmp	r3, #8
 800330e:	d00d      	beq.n	800332c <HAL_RCC_GetSysClockFreq+0x40>
 8003310:	2b08      	cmp	r3, #8
 8003312:	f200 80a1 	bhi.w	8003458 <HAL_RCC_GetSysClockFreq+0x16c>
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <HAL_RCC_GetSysClockFreq+0x34>
 800331a:	2b04      	cmp	r3, #4
 800331c:	d003      	beq.n	8003326 <HAL_RCC_GetSysClockFreq+0x3a>
 800331e:	e09b      	b.n	8003458 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003320:	4b53      	ldr	r3, [pc, #332]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x184>)
 8003322:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003324:	e09b      	b.n	800345e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003326:	4b53      	ldr	r3, [pc, #332]	@ (8003474 <HAL_RCC_GetSysClockFreq+0x188>)
 8003328:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800332a:	e098      	b.n	800345e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800332c:	4b4f      	ldr	r3, [pc, #316]	@ (800346c <HAL_RCC_GetSysClockFreq+0x180>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003334:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003336:	4b4d      	ldr	r3, [pc, #308]	@ (800346c <HAL_RCC_GetSysClockFreq+0x180>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d028      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003342:	4b4a      	ldr	r3, [pc, #296]	@ (800346c <HAL_RCC_GetSysClockFreq+0x180>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	099b      	lsrs	r3, r3, #6
 8003348:	2200      	movs	r2, #0
 800334a:	623b      	str	r3, [r7, #32]
 800334c:	627a      	str	r2, [r7, #36]	@ 0x24
 800334e:	6a3b      	ldr	r3, [r7, #32]
 8003350:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003354:	2100      	movs	r1, #0
 8003356:	4b47      	ldr	r3, [pc, #284]	@ (8003474 <HAL_RCC_GetSysClockFreq+0x188>)
 8003358:	fb03 f201 	mul.w	r2, r3, r1
 800335c:	2300      	movs	r3, #0
 800335e:	fb00 f303 	mul.w	r3, r0, r3
 8003362:	4413      	add	r3, r2
 8003364:	4a43      	ldr	r2, [pc, #268]	@ (8003474 <HAL_RCC_GetSysClockFreq+0x188>)
 8003366:	fba0 1202 	umull	r1, r2, r0, r2
 800336a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800336c:	460a      	mov	r2, r1
 800336e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003370:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003372:	4413      	add	r3, r2
 8003374:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003378:	2200      	movs	r2, #0
 800337a:	61bb      	str	r3, [r7, #24]
 800337c:	61fa      	str	r2, [r7, #28]
 800337e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003382:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003386:	f7fc ff57 	bl	8000238 <__aeabi_uldivmod>
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	4613      	mov	r3, r2
 8003390:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003392:	e053      	b.n	800343c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003394:	4b35      	ldr	r3, [pc, #212]	@ (800346c <HAL_RCC_GetSysClockFreq+0x180>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	099b      	lsrs	r3, r3, #6
 800339a:	2200      	movs	r2, #0
 800339c:	613b      	str	r3, [r7, #16]
 800339e:	617a      	str	r2, [r7, #20]
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80033a6:	f04f 0b00 	mov.w	fp, #0
 80033aa:	4652      	mov	r2, sl
 80033ac:	465b      	mov	r3, fp
 80033ae:	f04f 0000 	mov.w	r0, #0
 80033b2:	f04f 0100 	mov.w	r1, #0
 80033b6:	0159      	lsls	r1, r3, #5
 80033b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033bc:	0150      	lsls	r0, r2, #5
 80033be:	4602      	mov	r2, r0
 80033c0:	460b      	mov	r3, r1
 80033c2:	ebb2 080a 	subs.w	r8, r2, sl
 80033c6:	eb63 090b 	sbc.w	r9, r3, fp
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	f04f 0300 	mov.w	r3, #0
 80033d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80033d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80033da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80033de:	ebb2 0408 	subs.w	r4, r2, r8
 80033e2:	eb63 0509 	sbc.w	r5, r3, r9
 80033e6:	f04f 0200 	mov.w	r2, #0
 80033ea:	f04f 0300 	mov.w	r3, #0
 80033ee:	00eb      	lsls	r3, r5, #3
 80033f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033f4:	00e2      	lsls	r2, r4, #3
 80033f6:	4614      	mov	r4, r2
 80033f8:	461d      	mov	r5, r3
 80033fa:	eb14 030a 	adds.w	r3, r4, sl
 80033fe:	603b      	str	r3, [r7, #0]
 8003400:	eb45 030b 	adc.w	r3, r5, fp
 8003404:	607b      	str	r3, [r7, #4]
 8003406:	f04f 0200 	mov.w	r2, #0
 800340a:	f04f 0300 	mov.w	r3, #0
 800340e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003412:	4629      	mov	r1, r5
 8003414:	028b      	lsls	r3, r1, #10
 8003416:	4621      	mov	r1, r4
 8003418:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800341c:	4621      	mov	r1, r4
 800341e:	028a      	lsls	r2, r1, #10
 8003420:	4610      	mov	r0, r2
 8003422:	4619      	mov	r1, r3
 8003424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003426:	2200      	movs	r2, #0
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	60fa      	str	r2, [r7, #12]
 800342c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003430:	f7fc ff02 	bl	8000238 <__aeabi_uldivmod>
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	4613      	mov	r3, r2
 800343a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800343c:	4b0b      	ldr	r3, [pc, #44]	@ (800346c <HAL_RCC_GetSysClockFreq+0x180>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	0c1b      	lsrs	r3, r3, #16
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	3301      	adds	r3, #1
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800344c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800344e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003450:	fbb2 f3f3 	udiv	r3, r2, r3
 8003454:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003456:	e002      	b.n	800345e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003458:	4b05      	ldr	r3, [pc, #20]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x184>)
 800345a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800345c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800345e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003460:	4618      	mov	r0, r3
 8003462:	3740      	adds	r7, #64	@ 0x40
 8003464:	46bd      	mov	sp, r7
 8003466:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800346a:	bf00      	nop
 800346c:	40023800 	.word	0x40023800
 8003470:	00f42400 	.word	0x00f42400
 8003474:	017d7840 	.word	0x017d7840

08003478 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800347c:	4b03      	ldr	r3, [pc, #12]	@ (800348c <HAL_RCC_GetHCLKFreq+0x14>)
 800347e:	681b      	ldr	r3, [r3, #0]
}
 8003480:	4618      	mov	r0, r3
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	2000000c 	.word	0x2000000c

08003490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003494:	f7ff fff0 	bl	8003478 <HAL_RCC_GetHCLKFreq>
 8003498:	4602      	mov	r2, r0
 800349a:	4b05      	ldr	r3, [pc, #20]	@ (80034b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	0a9b      	lsrs	r3, r3, #10
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	4903      	ldr	r1, [pc, #12]	@ (80034b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034a6:	5ccb      	ldrb	r3, [r1, r3]
 80034a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40023800 	.word	0x40023800
 80034b4:	08006618 	.word	0x08006618

080034b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034bc:	f7ff ffdc 	bl	8003478 <HAL_RCC_GetHCLKFreq>
 80034c0:	4602      	mov	r2, r0
 80034c2:	4b05      	ldr	r3, [pc, #20]	@ (80034d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	0b5b      	lsrs	r3, r3, #13
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	4903      	ldr	r1, [pc, #12]	@ (80034dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80034ce:	5ccb      	ldrb	r3, [r1, r3]
 80034d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40023800 	.word	0x40023800
 80034dc:	08006618 	.word	0x08006618

080034e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b088      	sub	sp, #32
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80034ec:	2300      	movs	r3, #0
 80034ee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80034f0:	2300      	movs	r3, #0
 80034f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80034f4:	2300      	movs	r3, #0
 80034f6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80034f8:	2300      	movs	r3, #0
 80034fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d012      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003508:	4b69      	ldr	r3, [pc, #420]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	4a68      	ldr	r2, [pc, #416]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800350e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003512:	6093      	str	r3, [r2, #8]
 8003514:	4b66      	ldr	r3, [pc, #408]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800351c:	4964      	ldr	r1, [pc, #400]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800351e:	4313      	orrs	r3, r2
 8003520:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800352a:	2301      	movs	r3, #1
 800352c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d017      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800353a:	4b5d      	ldr	r3, [pc, #372]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003540:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003548:	4959      	ldr	r1, [pc, #356]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003554:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003558:	d101      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800355a:	2301      	movs	r3, #1
 800355c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003566:	2301      	movs	r3, #1
 8003568:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d017      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003576:	4b4e      	ldr	r3, [pc, #312]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003578:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800357c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003584:	494a      	ldr	r1, [pc, #296]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003586:	4313      	orrs	r3, r2
 8003588:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003590:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003594:	d101      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003596:	2301      	movs	r3, #1
 8003598:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80035a2:	2301      	movs	r3, #1
 80035a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80035b2:	2301      	movs	r3, #1
 80035b4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0320 	and.w	r3, r3, #32
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 808b 	beq.w	80036da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80035c4:	4b3a      	ldr	r3, [pc, #232]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c8:	4a39      	ldr	r2, [pc, #228]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80035d0:	4b37      	ldr	r3, [pc, #220]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035d8:	60bb      	str	r3, [r7, #8]
 80035da:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80035dc:	4b35      	ldr	r3, [pc, #212]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a34      	ldr	r2, [pc, #208]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035e8:	f7fe f9fa 	bl	80019e0 <HAL_GetTick>
 80035ec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f0:	f7fe f9f6 	bl	80019e0 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b64      	cmp	r3, #100	@ 0x64
 80035fc:	d901      	bls.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e38f      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003602:	4b2c      	ldr	r3, [pc, #176]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0f0      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800360e:	4b28      	ldr	r3, [pc, #160]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003612:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003616:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d035      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003622:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	429a      	cmp	r2, r3
 800362a:	d02e      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800362c:	4b20      	ldr	r3, [pc, #128]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800362e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003630:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003634:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003636:	4b1e      	ldr	r3, [pc, #120]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800363a:	4a1d      	ldr	r2, [pc, #116]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800363c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003640:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003642:	4b1b      	ldr	r3, [pc, #108]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003646:	4a1a      	ldr	r2, [pc, #104]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003648:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800364c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800364e:	4a18      	ldr	r2, [pc, #96]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003654:	4b16      	ldr	r3, [pc, #88]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b01      	cmp	r3, #1
 800365e:	d114      	bne.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003660:	f7fe f9be 	bl	80019e0 <HAL_GetTick>
 8003664:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003666:	e00a      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003668:	f7fe f9ba 	bl	80019e0 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003676:	4293      	cmp	r3, r2
 8003678:	d901      	bls.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e351      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800367e:	4b0c      	ldr	r3, [pc, #48]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d0ee      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003692:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003696:	d111      	bne.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003698:	4b05      	ldr	r3, [pc, #20]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80036a4:	4b04      	ldr	r3, [pc, #16]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80036a6:	400b      	ands	r3, r1
 80036a8:	4901      	ldr	r1, [pc, #4]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	608b      	str	r3, [r1, #8]
 80036ae:	e00b      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80036b0:	40023800 	.word	0x40023800
 80036b4:	40007000 	.word	0x40007000
 80036b8:	0ffffcff 	.word	0x0ffffcff
 80036bc:	4bac      	ldr	r3, [pc, #688]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	4aab      	ldr	r2, [pc, #684]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036c2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80036c6:	6093      	str	r3, [r2, #8]
 80036c8:	4ba9      	ldr	r3, [pc, #676]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036d4:	49a6      	ldr	r1, [pc, #664]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0310 	and.w	r3, r3, #16
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d010      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80036e6:	4ba2      	ldr	r3, [pc, #648]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036ec:	4aa0      	ldr	r2, [pc, #640]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80036f6:	4b9e      	ldr	r3, [pc, #632]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003700:	499b      	ldr	r1, [pc, #620]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003702:	4313      	orrs	r3, r2
 8003704:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00a      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003714:	4b96      	ldr	r3, [pc, #600]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800371a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003722:	4993      	ldr	r1, [pc, #588]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00a      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003736:	4b8e      	ldr	r3, [pc, #568]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800373c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003744:	498a      	ldr	r1, [pc, #552]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003746:	4313      	orrs	r3, r2
 8003748:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00a      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003758:	4b85      	ldr	r3, [pc, #532]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800375a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800375e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003766:	4982      	ldr	r1, [pc, #520]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003768:	4313      	orrs	r3, r2
 800376a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00a      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800377a:	4b7d      	ldr	r3, [pc, #500]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800377c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003780:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003788:	4979      	ldr	r1, [pc, #484]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800378a:	4313      	orrs	r3, r2
 800378c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00a      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800379c:	4b74      	ldr	r3, [pc, #464]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800379e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a2:	f023 0203 	bic.w	r2, r3, #3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037aa:	4971      	ldr	r1, [pc, #452]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037be:	4b6c      	ldr	r3, [pc, #432]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037c4:	f023 020c 	bic.w	r2, r3, #12
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037cc:	4968      	ldr	r1, [pc, #416]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037e0:	4b63      	ldr	r3, [pc, #396]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ee:	4960      	ldr	r1, [pc, #384]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00a      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003802:	4b5b      	ldr	r3, [pc, #364]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003808:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003810:	4957      	ldr	r1, [pc, #348]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00a      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003824:	4b52      	ldr	r3, [pc, #328]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800382a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003832:	494f      	ldr	r1, [pc, #316]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003834:	4313      	orrs	r3, r2
 8003836:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00a      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003846:	4b4a      	ldr	r3, [pc, #296]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003848:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800384c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003854:	4946      	ldr	r1, [pc, #280]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003856:	4313      	orrs	r3, r2
 8003858:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003868:	4b41      	ldr	r3, [pc, #260]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800386a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800386e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003876:	493e      	ldr	r1, [pc, #248]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800388a:	4b39      	ldr	r3, [pc, #228]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800388c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003890:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003898:	4935      	ldr	r1, [pc, #212]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038ac:	4b30      	ldr	r3, [pc, #192]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038b2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038ba:	492d      	ldr	r1, [pc, #180]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d011      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80038ce:	4b28      	ldr	r3, [pc, #160]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038d4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038dc:	4924      	ldr	r1, [pc, #144]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038ec:	d101      	bne.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80038ee:	2301      	movs	r3, #1
 80038f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0308 	and.w	r3, r3, #8
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80038fe:	2301      	movs	r3, #1
 8003900:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800390e:	4b18      	ldr	r3, [pc, #96]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003910:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003914:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800391c:	4914      	ldr	r1, [pc, #80]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00b      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003930:	4b0f      	ldr	r3, [pc, #60]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003936:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003940:	490b      	ldr	r1, [pc, #44]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00f      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003954:	4b06      	ldr	r3, [pc, #24]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800395a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003964:	4902      	ldr	r1, [pc, #8]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800396c:	e002      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800396e:	bf00      	nop
 8003970:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00b      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003980:	4b8a      	ldr	r3, [pc, #552]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003982:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003986:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003990:	4986      	ldr	r1, [pc, #536]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003992:	4313      	orrs	r3, r2
 8003994:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00b      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80039a4:	4b81      	ldr	r3, [pc, #516]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039aa:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039b4:	497d      	ldr	r1, [pc, #500]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d006      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 80d6 	beq.w	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039d0:	4b76      	ldr	r3, [pc, #472]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a75      	ldr	r2, [pc, #468]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80039da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039dc:	f7fe f800 	bl	80019e0 <HAL_GetTick>
 80039e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039e2:	e008      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039e4:	f7fd fffc 	bl	80019e0 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b64      	cmp	r3, #100	@ 0x64
 80039f0:	d901      	bls.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e195      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039f6:	4b6d      	ldr	r3, [pc, #436]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1f0      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d021      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d11d      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a16:	4b65      	ldr	r3, [pc, #404]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a1c:	0c1b      	lsrs	r3, r3, #16
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a24:	4b61      	ldr	r3, [pc, #388]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a2a:	0e1b      	lsrs	r3, r3, #24
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	019a      	lsls	r2, r3, #6
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	041b      	lsls	r3, r3, #16
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	061b      	lsls	r3, r3, #24
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	071b      	lsls	r3, r3, #28
 8003a4a:	4958      	ldr	r1, [pc, #352]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d004      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a66:	d00a      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d02e      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a7c:	d129      	bne.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a7e:	4b4b      	ldr	r3, [pc, #300]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a84:	0c1b      	lsrs	r3, r3, #16
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a8c:	4b47      	ldr	r3, [pc, #284]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a92:	0f1b      	lsrs	r3, r3, #28
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	019a      	lsls	r2, r3, #6
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	041b      	lsls	r3, r3, #16
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	061b      	lsls	r3, r3, #24
 8003aac:	431a      	orrs	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	071b      	lsls	r3, r3, #28
 8003ab2:	493e      	ldr	r1, [pc, #248]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003aba:	4b3c      	ldr	r3, [pc, #240]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003abc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ac0:	f023 021f 	bic.w	r2, r3, #31
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	4938      	ldr	r1, [pc, #224]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d01d      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ade:	4b33      	ldr	r3, [pc, #204]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ae4:	0e1b      	lsrs	r3, r3, #24
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003aec:	4b2f      	ldr	r3, [pc, #188]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003af2:	0f1b      	lsrs	r3, r3, #28
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	019a      	lsls	r2, r3, #6
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	041b      	lsls	r3, r3, #16
 8003b06:	431a      	orrs	r2, r3
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	061b      	lsls	r3, r3, #24
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	071b      	lsls	r3, r3, #28
 8003b12:	4926      	ldr	r1, [pc, #152]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d011      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	019a      	lsls	r2, r3, #6
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	041b      	lsls	r3, r3, #16
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	061b      	lsls	r3, r3, #24
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	071b      	lsls	r3, r3, #28
 8003b42:	491a      	ldr	r1, [pc, #104]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b4a:	4b18      	ldr	r3, [pc, #96]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a17      	ldr	r2, [pc, #92]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b50:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b56:	f7fd ff43 	bl	80019e0 <HAL_GetTick>
 8003b5a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b5c:	e008      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b5e:	f7fd ff3f 	bl	80019e0 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b64      	cmp	r3, #100	@ 0x64
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e0d8      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b70:	4b0e      	ldr	r3, [pc, #56]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d0f0      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	f040 80ce 	bne.w	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b84:	4b09      	ldr	r3, [pc, #36]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a08      	ldr	r2, [pc, #32]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b90:	f7fd ff26 	bl	80019e0 <HAL_GetTick>
 8003b94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b96:	e00b      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b98:	f7fd ff22 	bl	80019e0 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b64      	cmp	r3, #100	@ 0x64
 8003ba4:	d904      	bls.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e0bb      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003baa:	bf00      	nop
 8003bac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bb0:	4b5e      	ldr	r3, [pc, #376]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003bb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bbc:	d0ec      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d009      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d02e      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d12a      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003be6:	4b51      	ldr	r3, [pc, #324]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bec:	0c1b      	lsrs	r3, r3, #16
 8003bee:	f003 0303 	and.w	r3, r3, #3
 8003bf2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bf4:	4b4d      	ldr	r3, [pc, #308]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bfa:	0f1b      	lsrs	r3, r3, #28
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	019a      	lsls	r2, r3, #6
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	041b      	lsls	r3, r3, #16
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	061b      	lsls	r3, r3, #24
 8003c14:	431a      	orrs	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	071b      	lsls	r3, r3, #28
 8003c1a:	4944      	ldr	r1, [pc, #272]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c22:	4b42      	ldr	r3, [pc, #264]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c28:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c30:	3b01      	subs	r3, #1
 8003c32:	021b      	lsls	r3, r3, #8
 8003c34:	493d      	ldr	r1, [pc, #244]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d022      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c50:	d11d      	bne.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c52:	4b36      	ldr	r3, [pc, #216]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c58:	0e1b      	lsrs	r3, r3, #24
 8003c5a:	f003 030f 	and.w	r3, r3, #15
 8003c5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c60:	4b32      	ldr	r3, [pc, #200]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c66:	0f1b      	lsrs	r3, r3, #28
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	019a      	lsls	r2, r3, #6
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	041b      	lsls	r3, r3, #16
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	061b      	lsls	r3, r3, #24
 8003c80:	431a      	orrs	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	071b      	lsls	r3, r3, #28
 8003c86:	4929      	ldr	r1, [pc, #164]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d028      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c9a:	4b24      	ldr	r3, [pc, #144]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca0:	0e1b      	lsrs	r3, r3, #24
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ca8:	4b20      	ldr	r3, [pc, #128]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cae:	0c1b      	lsrs	r3, r3, #16
 8003cb0:	f003 0303 	and.w	r3, r3, #3
 8003cb4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	019a      	lsls	r2, r3, #6
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	041b      	lsls	r3, r3, #16
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	061b      	lsls	r3, r3, #24
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	071b      	lsls	r3, r3, #28
 8003cce:	4917      	ldr	r1, [pc, #92]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003cd6:	4b15      	ldr	r3, [pc, #84]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cdc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce4:	4911      	ldr	r1, [pc, #68]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003cec:	4b0f      	ldr	r3, [pc, #60]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a0e      	ldr	r2, [pc, #56]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cf8:	f7fd fe72 	bl	80019e0 <HAL_GetTick>
 8003cfc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d00:	f7fd fe6e 	bl	80019e0 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b64      	cmp	r3, #100	@ 0x64
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e007      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d12:	4b06      	ldr	r3, [pc, #24]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d1e:	d1ef      	bne.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3720      	adds	r7, #32
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40023800 	.word	0x40023800

08003d30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e049      	b.n	8003dd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d106      	bne.n	8003d5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7fd fbee 	bl	8001538 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4610      	mov	r0, r2
 8003d70:	f000 fcc0 	bl	80046f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b082      	sub	sp, #8
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e049      	b.n	8003e84 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d106      	bne.n	8003e0a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f841 	bl	8003e8c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2202      	movs	r2, #2
 8003e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	3304      	adds	r3, #4
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4610      	mov	r0, r2
 8003e1e:	f000 fc69 	bl	80046f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d104      	bne.n	8003ebe <HAL_TIM_IC_Start_IT+0x1e>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	e023      	b.n	8003f06 <HAL_TIM_IC_Start_IT+0x66>
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b04      	cmp	r3, #4
 8003ec2:	d104      	bne.n	8003ece <HAL_TIM_IC_Start_IT+0x2e>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	e01b      	b.n	8003f06 <HAL_TIM_IC_Start_IT+0x66>
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d104      	bne.n	8003ede <HAL_TIM_IC_Start_IT+0x3e>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	e013      	b.n	8003f06 <HAL_TIM_IC_Start_IT+0x66>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2b0c      	cmp	r3, #12
 8003ee2:	d104      	bne.n	8003eee <HAL_TIM_IC_Start_IT+0x4e>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	e00b      	b.n	8003f06 <HAL_TIM_IC_Start_IT+0x66>
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2b10      	cmp	r3, #16
 8003ef2:	d104      	bne.n	8003efe <HAL_TIM_IC_Start_IT+0x5e>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	e003      	b.n	8003f06 <HAL_TIM_IC_Start_IT+0x66>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d104      	bne.n	8003f18 <HAL_TIM_IC_Start_IT+0x78>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	e013      	b.n	8003f40 <HAL_TIM_IC_Start_IT+0xa0>
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	2b04      	cmp	r3, #4
 8003f1c:	d104      	bne.n	8003f28 <HAL_TIM_IC_Start_IT+0x88>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	e00b      	b.n	8003f40 <HAL_TIM_IC_Start_IT+0xa0>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	2b08      	cmp	r3, #8
 8003f2c:	d104      	bne.n	8003f38 <HAL_TIM_IC_Start_IT+0x98>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	e003      	b.n	8003f40 <HAL_TIM_IC_Start_IT+0xa0>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f42:	7bbb      	ldrb	r3, [r7, #14]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d102      	bne.n	8003f4e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f48:	7b7b      	ldrb	r3, [r7, #13]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d001      	beq.n	8003f52 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e0e2      	b.n	8004118 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d104      	bne.n	8003f62 <HAL_TIM_IC_Start_IT+0xc2>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f60:	e023      	b.n	8003faa <HAL_TIM_IC_Start_IT+0x10a>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2b04      	cmp	r3, #4
 8003f66:	d104      	bne.n	8003f72 <HAL_TIM_IC_Start_IT+0xd2>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f70:	e01b      	b.n	8003faa <HAL_TIM_IC_Start_IT+0x10a>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2b08      	cmp	r3, #8
 8003f76:	d104      	bne.n	8003f82 <HAL_TIM_IC_Start_IT+0xe2>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f80:	e013      	b.n	8003faa <HAL_TIM_IC_Start_IT+0x10a>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b0c      	cmp	r3, #12
 8003f86:	d104      	bne.n	8003f92 <HAL_TIM_IC_Start_IT+0xf2>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f90:	e00b      	b.n	8003faa <HAL_TIM_IC_Start_IT+0x10a>
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2b10      	cmp	r3, #16
 8003f96:	d104      	bne.n	8003fa2 <HAL_TIM_IC_Start_IT+0x102>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fa0:	e003      	b.n	8003faa <HAL_TIM_IC_Start_IT+0x10a>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d104      	bne.n	8003fba <HAL_TIM_IC_Start_IT+0x11a>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fb8:	e013      	b.n	8003fe2 <HAL_TIM_IC_Start_IT+0x142>
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d104      	bne.n	8003fca <HAL_TIM_IC_Start_IT+0x12a>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003fc8:	e00b      	b.n	8003fe2 <HAL_TIM_IC_Start_IT+0x142>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d104      	bne.n	8003fda <HAL_TIM_IC_Start_IT+0x13a>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003fd8:	e003      	b.n	8003fe2 <HAL_TIM_IC_Start_IT+0x142>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2202      	movs	r2, #2
 8003fde:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b0c      	cmp	r3, #12
 8003fe6:	d841      	bhi.n	800406c <HAL_TIM_IC_Start_IT+0x1cc>
 8003fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ff0 <HAL_TIM_IC_Start_IT+0x150>)
 8003fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fee:	bf00      	nop
 8003ff0:	08004025 	.word	0x08004025
 8003ff4:	0800406d 	.word	0x0800406d
 8003ff8:	0800406d 	.word	0x0800406d
 8003ffc:	0800406d 	.word	0x0800406d
 8004000:	08004037 	.word	0x08004037
 8004004:	0800406d 	.word	0x0800406d
 8004008:	0800406d 	.word	0x0800406d
 800400c:	0800406d 	.word	0x0800406d
 8004010:	08004049 	.word	0x08004049
 8004014:	0800406d 	.word	0x0800406d
 8004018:	0800406d 	.word	0x0800406d
 800401c:	0800406d 	.word	0x0800406d
 8004020:	0800405b 	.word	0x0800405b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0202 	orr.w	r2, r2, #2
 8004032:	60da      	str	r2, [r3, #12]
      break;
 8004034:	e01d      	b.n	8004072 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f042 0204 	orr.w	r2, r2, #4
 8004044:	60da      	str	r2, [r3, #12]
      break;
 8004046:	e014      	b.n	8004072 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0208 	orr.w	r2, r2, #8
 8004056:	60da      	str	r2, [r3, #12]
      break;
 8004058:	e00b      	b.n	8004072 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68da      	ldr	r2, [r3, #12]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f042 0210 	orr.w	r2, r2, #16
 8004068:	60da      	str	r2, [r3, #12]
      break;
 800406a:	e002      	b.n	8004072 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	73fb      	strb	r3, [r7, #15]
      break;
 8004070:	bf00      	nop
  }

  if (status == HAL_OK)
 8004072:	7bfb      	ldrb	r3, [r7, #15]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d14e      	bne.n	8004116 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2201      	movs	r2, #1
 800407e:	6839      	ldr	r1, [r7, #0]
 8004080:	4618      	mov	r0, r3
 8004082:	f000 fda7 	bl	8004bd4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a25      	ldr	r2, [pc, #148]	@ (8004120 <HAL_TIM_IC_Start_IT+0x280>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d022      	beq.n	80040d6 <HAL_TIM_IC_Start_IT+0x236>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004098:	d01d      	beq.n	80040d6 <HAL_TIM_IC_Start_IT+0x236>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a21      	ldr	r2, [pc, #132]	@ (8004124 <HAL_TIM_IC_Start_IT+0x284>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d018      	beq.n	80040d6 <HAL_TIM_IC_Start_IT+0x236>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a1f      	ldr	r2, [pc, #124]	@ (8004128 <HAL_TIM_IC_Start_IT+0x288>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d013      	beq.n	80040d6 <HAL_TIM_IC_Start_IT+0x236>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a1e      	ldr	r2, [pc, #120]	@ (800412c <HAL_TIM_IC_Start_IT+0x28c>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d00e      	beq.n	80040d6 <HAL_TIM_IC_Start_IT+0x236>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a1c      	ldr	r2, [pc, #112]	@ (8004130 <HAL_TIM_IC_Start_IT+0x290>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d009      	beq.n	80040d6 <HAL_TIM_IC_Start_IT+0x236>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a1b      	ldr	r2, [pc, #108]	@ (8004134 <HAL_TIM_IC_Start_IT+0x294>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d004      	beq.n	80040d6 <HAL_TIM_IC_Start_IT+0x236>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a19      	ldr	r2, [pc, #100]	@ (8004138 <HAL_TIM_IC_Start_IT+0x298>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d115      	bne.n	8004102 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689a      	ldr	r2, [r3, #8]
 80040dc:	4b17      	ldr	r3, [pc, #92]	@ (800413c <HAL_TIM_IC_Start_IT+0x29c>)
 80040de:	4013      	ands	r3, r2
 80040e0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	2b06      	cmp	r3, #6
 80040e6:	d015      	beq.n	8004114 <HAL_TIM_IC_Start_IT+0x274>
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040ee:	d011      	beq.n	8004114 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f042 0201 	orr.w	r2, r2, #1
 80040fe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004100:	e008      	b.n	8004114 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f042 0201 	orr.w	r2, r2, #1
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	e000      	b.n	8004116 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004114:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004116:	7bfb      	ldrb	r3, [r7, #15]
}
 8004118:	4618      	mov	r0, r3
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40010000 	.word	0x40010000
 8004124:	40000400 	.word	0x40000400
 8004128:	40000800 	.word	0x40000800
 800412c:	40000c00 	.word	0x40000c00
 8004130:	40010400 	.word	0x40010400
 8004134:	40014000 	.word	0x40014000
 8004138:	40001800 	.word	0x40001800
 800413c:	00010007 	.word	0x00010007

08004140 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d020      	beq.n	80041a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d01b      	beq.n	80041a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f06f 0202 	mvn.w	r2, #2
 8004174:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7fc fc1c 	bl	80009c8 <HAL_TIM_IC_CaptureCallback>
 8004190:	e005      	b.n	800419e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 fa90 	bl	80046b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 fa97 	bl	80046cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	f003 0304 	and.w	r3, r3, #4
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d020      	beq.n	80041f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d01b      	beq.n	80041f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f06f 0204 	mvn.w	r2, #4
 80041c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2202      	movs	r2, #2
 80041c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7fc fbf6 	bl	80009c8 <HAL_TIM_IC_CaptureCallback>
 80041dc:	e005      	b.n	80041ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 fa6a 	bl	80046b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 fa71 	bl	80046cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f003 0308 	and.w	r3, r3, #8
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d020      	beq.n	800423c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f003 0308 	and.w	r3, r3, #8
 8004200:	2b00      	cmp	r3, #0
 8004202:	d01b      	beq.n	800423c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f06f 0208 	mvn.w	r2, #8
 800420c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2204      	movs	r2, #4
 8004212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7fc fbd0 	bl	80009c8 <HAL_TIM_IC_CaptureCallback>
 8004228:	e005      	b.n	8004236 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 fa44 	bl	80046b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 fa4b 	bl	80046cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	f003 0310 	and.w	r3, r3, #16
 8004242:	2b00      	cmp	r3, #0
 8004244:	d020      	beq.n	8004288 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f003 0310 	and.w	r3, r3, #16
 800424c:	2b00      	cmp	r3, #0
 800424e:	d01b      	beq.n	8004288 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f06f 0210 	mvn.w	r2, #16
 8004258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2208      	movs	r2, #8
 800425e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7fc fbaa 	bl	80009c8 <HAL_TIM_IC_CaptureCallback>
 8004274:	e005      	b.n	8004282 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 fa1e 	bl	80046b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 fa25 	bl	80046cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00c      	beq.n	80042ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b00      	cmp	r3, #0
 800429a:	d007      	beq.n	80042ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f06f 0201 	mvn.w	r2, #1
 80042a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f9fc 	bl	80046a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d104      	bne.n	80042c0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00c      	beq.n	80042da <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d007      	beq.n	80042da <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80042d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 fd3b 	bl	8004d50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00c      	beq.n	80042fe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d007      	beq.n	80042fe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80042f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 fd33 	bl	8004d64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00c      	beq.n	8004322 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800430e:	2b00      	cmp	r3, #0
 8004310:	d007      	beq.n	8004322 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800431a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f9df 	bl	80046e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	f003 0320 	and.w	r3, r3, #32
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00c      	beq.n	8004346 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f003 0320 	and.w	r3, r3, #32
 8004332:	2b00      	cmp	r3, #0
 8004334:	d007      	beq.n	8004346 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f06f 0220 	mvn.w	r2, #32
 800433e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 fcfb 	bl	8004d3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004346:	bf00      	nop
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b086      	sub	sp, #24
 8004352:	af00      	add	r7, sp, #0
 8004354:	60f8      	str	r0, [r7, #12]
 8004356:	60b9      	str	r1, [r7, #8]
 8004358:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <HAL_TIM_IC_ConfigChannel+0x1e>
 8004368:	2302      	movs	r3, #2
 800436a:	e088      	b.n	800447e <HAL_TIM_IC_ConfigChannel+0x130>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d11b      	bne.n	80043b2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800438a:	f000 fa5f 	bl	800484c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	699a      	ldr	r2, [r3, #24]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 020c 	bic.w	r2, r2, #12
 800439c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6999      	ldr	r1, [r3, #24]
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	619a      	str	r2, [r3, #24]
 80043b0:	e060      	b.n	8004474 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b04      	cmp	r3, #4
 80043b6:	d11c      	bne.n	80043f2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80043c8:	f000 fae3 	bl	8004992 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	699a      	ldr	r2, [r3, #24]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80043da:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6999      	ldr	r1, [r3, #24]
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	021a      	lsls	r2, r3, #8
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	430a      	orrs	r2, r1
 80043ee:	619a      	str	r2, [r3, #24]
 80043f0:	e040      	b.n	8004474 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d11b      	bne.n	8004430 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004408:	f000 fb30 	bl	8004a6c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	69da      	ldr	r2, [r3, #28]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 020c 	bic.w	r2, r2, #12
 800441a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	69d9      	ldr	r1, [r3, #28]
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	689a      	ldr	r2, [r3, #8]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	61da      	str	r2, [r3, #28]
 800442e:	e021      	b.n	8004474 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b0c      	cmp	r3, #12
 8004434:	d11c      	bne.n	8004470 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004446:	f000 fb4d 	bl	8004ae4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	69da      	ldr	r2, [r3, #28]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004458:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	69d9      	ldr	r1, [r3, #28]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	021a      	lsls	r2, r3, #8
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	61da      	str	r2, [r3, #28]
 800446e:	e001      	b.n	8004474 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800447c:	7dfb      	ldrb	r3, [r7, #23]
}
 800447e:	4618      	mov	r0, r3
 8004480:	3718      	adds	r7, #24
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
	...

08004488 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004492:	2300      	movs	r3, #0
 8004494:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800449c:	2b01      	cmp	r3, #1
 800449e:	d101      	bne.n	80044a4 <HAL_TIM_ConfigClockSource+0x1c>
 80044a0:	2302      	movs	r3, #2
 80044a2:	e0b4      	b.n	800460e <HAL_TIM_ConfigClockSource+0x186>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2202      	movs	r2, #2
 80044b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	4b56      	ldr	r3, [pc, #344]	@ (8004618 <HAL_TIM_ConfigClockSource+0x190>)
 80044c0:	4013      	ands	r3, r2
 80044c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044dc:	d03e      	beq.n	800455c <HAL_TIM_ConfigClockSource+0xd4>
 80044de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044e2:	f200 8087 	bhi.w	80045f4 <HAL_TIM_ConfigClockSource+0x16c>
 80044e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044ea:	f000 8086 	beq.w	80045fa <HAL_TIM_ConfigClockSource+0x172>
 80044ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044f2:	d87f      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x16c>
 80044f4:	2b70      	cmp	r3, #112	@ 0x70
 80044f6:	d01a      	beq.n	800452e <HAL_TIM_ConfigClockSource+0xa6>
 80044f8:	2b70      	cmp	r3, #112	@ 0x70
 80044fa:	d87b      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x16c>
 80044fc:	2b60      	cmp	r3, #96	@ 0x60
 80044fe:	d050      	beq.n	80045a2 <HAL_TIM_ConfigClockSource+0x11a>
 8004500:	2b60      	cmp	r3, #96	@ 0x60
 8004502:	d877      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004504:	2b50      	cmp	r3, #80	@ 0x50
 8004506:	d03c      	beq.n	8004582 <HAL_TIM_ConfigClockSource+0xfa>
 8004508:	2b50      	cmp	r3, #80	@ 0x50
 800450a:	d873      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x16c>
 800450c:	2b40      	cmp	r3, #64	@ 0x40
 800450e:	d058      	beq.n	80045c2 <HAL_TIM_ConfigClockSource+0x13a>
 8004510:	2b40      	cmp	r3, #64	@ 0x40
 8004512:	d86f      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004514:	2b30      	cmp	r3, #48	@ 0x30
 8004516:	d064      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004518:	2b30      	cmp	r3, #48	@ 0x30
 800451a:	d86b      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x16c>
 800451c:	2b20      	cmp	r3, #32
 800451e:	d060      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004520:	2b20      	cmp	r3, #32
 8004522:	d867      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004524:	2b00      	cmp	r3, #0
 8004526:	d05c      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004528:	2b10      	cmp	r3, #16
 800452a:	d05a      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0x15a>
 800452c:	e062      	b.n	80045f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800453e:	f000 fb29 	bl	8004b94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004550:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	609a      	str	r2, [r3, #8]
      break;
 800455a:	e04f      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800456c:	f000 fb12 	bl	8004b94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800457e:	609a      	str	r2, [r3, #8]
      break;
 8004580:	e03c      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800458e:	461a      	mov	r2, r3
 8004590:	f000 f9d0 	bl	8004934 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2150      	movs	r1, #80	@ 0x50
 800459a:	4618      	mov	r0, r3
 800459c:	f000 fadf 	bl	8004b5e <TIM_ITRx_SetConfig>
      break;
 80045a0:	e02c      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045ae:	461a      	mov	r2, r3
 80045b0:	f000 fa2c 	bl	8004a0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2160      	movs	r1, #96	@ 0x60
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 facf 	bl	8004b5e <TIM_ITRx_SetConfig>
      break;
 80045c0:	e01c      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ce:	461a      	mov	r2, r3
 80045d0:	f000 f9b0 	bl	8004934 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2140      	movs	r1, #64	@ 0x40
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 fabf 	bl	8004b5e <TIM_ITRx_SetConfig>
      break;
 80045e0:	e00c      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4619      	mov	r1, r3
 80045ec:	4610      	mov	r0, r2
 80045ee:	f000 fab6 	bl	8004b5e <TIM_ITRx_SetConfig>
      break;
 80045f2:	e003      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	73fb      	strb	r3, [r7, #15]
      break;
 80045f8:	e000      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80045fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800460c:	7bfb      	ldrb	r3, [r7, #15]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	fffeff88 	.word	0xfffeff88

0800461c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004626:	2300      	movs	r3, #0
 8004628:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b0c      	cmp	r3, #12
 800462e:	d831      	bhi.n	8004694 <HAL_TIM_ReadCapturedValue+0x78>
 8004630:	a201      	add	r2, pc, #4	@ (adr r2, 8004638 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004636:	bf00      	nop
 8004638:	0800466d 	.word	0x0800466d
 800463c:	08004695 	.word	0x08004695
 8004640:	08004695 	.word	0x08004695
 8004644:	08004695 	.word	0x08004695
 8004648:	08004677 	.word	0x08004677
 800464c:	08004695 	.word	0x08004695
 8004650:	08004695 	.word	0x08004695
 8004654:	08004695 	.word	0x08004695
 8004658:	08004681 	.word	0x08004681
 800465c:	08004695 	.word	0x08004695
 8004660:	08004695 	.word	0x08004695
 8004664:	08004695 	.word	0x08004695
 8004668:	0800468b 	.word	0x0800468b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004672:	60fb      	str	r3, [r7, #12]

      break;
 8004674:	e00f      	b.n	8004696 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800467c:	60fb      	str	r3, [r7, #12]

      break;
 800467e:	e00a      	b.n	8004696 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004686:	60fb      	str	r3, [r7, #12]

      break;
 8004688:	e005      	b.n	8004696 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004690:	60fb      	str	r3, [r7, #12]

      break;
 8004692:	e000      	b.n	8004696 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004694:	bf00      	nop
  }

  return tmpreg;
 8004696:	68fb      	ldr	r3, [r7, #12]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a46      	ldr	r2, [pc, #280]	@ (8004820 <TIM_Base_SetConfig+0x12c>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d013      	beq.n	8004734 <TIM_Base_SetConfig+0x40>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004712:	d00f      	beq.n	8004734 <TIM_Base_SetConfig+0x40>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a43      	ldr	r2, [pc, #268]	@ (8004824 <TIM_Base_SetConfig+0x130>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d00b      	beq.n	8004734 <TIM_Base_SetConfig+0x40>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a42      	ldr	r2, [pc, #264]	@ (8004828 <TIM_Base_SetConfig+0x134>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d007      	beq.n	8004734 <TIM_Base_SetConfig+0x40>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a41      	ldr	r2, [pc, #260]	@ (800482c <TIM_Base_SetConfig+0x138>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d003      	beq.n	8004734 <TIM_Base_SetConfig+0x40>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a40      	ldr	r2, [pc, #256]	@ (8004830 <TIM_Base_SetConfig+0x13c>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d108      	bne.n	8004746 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800473a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a35      	ldr	r2, [pc, #212]	@ (8004820 <TIM_Base_SetConfig+0x12c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d02b      	beq.n	80047a6 <TIM_Base_SetConfig+0xb2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004754:	d027      	beq.n	80047a6 <TIM_Base_SetConfig+0xb2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a32      	ldr	r2, [pc, #200]	@ (8004824 <TIM_Base_SetConfig+0x130>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d023      	beq.n	80047a6 <TIM_Base_SetConfig+0xb2>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a31      	ldr	r2, [pc, #196]	@ (8004828 <TIM_Base_SetConfig+0x134>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d01f      	beq.n	80047a6 <TIM_Base_SetConfig+0xb2>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a30      	ldr	r2, [pc, #192]	@ (800482c <TIM_Base_SetConfig+0x138>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d01b      	beq.n	80047a6 <TIM_Base_SetConfig+0xb2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a2f      	ldr	r2, [pc, #188]	@ (8004830 <TIM_Base_SetConfig+0x13c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d017      	beq.n	80047a6 <TIM_Base_SetConfig+0xb2>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a2e      	ldr	r2, [pc, #184]	@ (8004834 <TIM_Base_SetConfig+0x140>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d013      	beq.n	80047a6 <TIM_Base_SetConfig+0xb2>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a2d      	ldr	r2, [pc, #180]	@ (8004838 <TIM_Base_SetConfig+0x144>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d00f      	beq.n	80047a6 <TIM_Base_SetConfig+0xb2>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a2c      	ldr	r2, [pc, #176]	@ (800483c <TIM_Base_SetConfig+0x148>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d00b      	beq.n	80047a6 <TIM_Base_SetConfig+0xb2>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a2b      	ldr	r2, [pc, #172]	@ (8004840 <TIM_Base_SetConfig+0x14c>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d007      	beq.n	80047a6 <TIM_Base_SetConfig+0xb2>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a2a      	ldr	r2, [pc, #168]	@ (8004844 <TIM_Base_SetConfig+0x150>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d003      	beq.n	80047a6 <TIM_Base_SetConfig+0xb2>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a29      	ldr	r2, [pc, #164]	@ (8004848 <TIM_Base_SetConfig+0x154>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d108      	bne.n	80047b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a10      	ldr	r2, [pc, #64]	@ (8004820 <TIM_Base_SetConfig+0x12c>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d003      	beq.n	80047ec <TIM_Base_SetConfig+0xf8>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a12      	ldr	r2, [pc, #72]	@ (8004830 <TIM_Base_SetConfig+0x13c>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d103      	bne.n	80047f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	691a      	ldr	r2, [r3, #16]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b01      	cmp	r3, #1
 8004804:	d105      	bne.n	8004812 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	f023 0201 	bic.w	r2, r3, #1
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	611a      	str	r2, [r3, #16]
  }
}
 8004812:	bf00      	nop
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	40010000 	.word	0x40010000
 8004824:	40000400 	.word	0x40000400
 8004828:	40000800 	.word	0x40000800
 800482c:	40000c00 	.word	0x40000c00
 8004830:	40010400 	.word	0x40010400
 8004834:	40014000 	.word	0x40014000
 8004838:	40014400 	.word	0x40014400
 800483c:	40014800 	.word	0x40014800
 8004840:	40001800 	.word	0x40001800
 8004844:	40001c00 	.word	0x40001c00
 8004848:	40002000 	.word	0x40002000

0800484c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800484c:	b480      	push	{r7}
 800484e:	b087      	sub	sp, #28
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
 8004858:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	f023 0201 	bic.w	r2, r3, #1
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	4a28      	ldr	r2, [pc, #160]	@ (8004918 <TIM_TI1_SetConfig+0xcc>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d01b      	beq.n	80048b2 <TIM_TI1_SetConfig+0x66>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004880:	d017      	beq.n	80048b2 <TIM_TI1_SetConfig+0x66>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	4a25      	ldr	r2, [pc, #148]	@ (800491c <TIM_TI1_SetConfig+0xd0>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d013      	beq.n	80048b2 <TIM_TI1_SetConfig+0x66>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	4a24      	ldr	r2, [pc, #144]	@ (8004920 <TIM_TI1_SetConfig+0xd4>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d00f      	beq.n	80048b2 <TIM_TI1_SetConfig+0x66>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	4a23      	ldr	r2, [pc, #140]	@ (8004924 <TIM_TI1_SetConfig+0xd8>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00b      	beq.n	80048b2 <TIM_TI1_SetConfig+0x66>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4a22      	ldr	r2, [pc, #136]	@ (8004928 <TIM_TI1_SetConfig+0xdc>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d007      	beq.n	80048b2 <TIM_TI1_SetConfig+0x66>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	4a21      	ldr	r2, [pc, #132]	@ (800492c <TIM_TI1_SetConfig+0xe0>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d003      	beq.n	80048b2 <TIM_TI1_SetConfig+0x66>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	4a20      	ldr	r2, [pc, #128]	@ (8004930 <TIM_TI1_SetConfig+0xe4>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d101      	bne.n	80048b6 <TIM_TI1_SetConfig+0x6a>
 80048b2:	2301      	movs	r3, #1
 80048b4:	e000      	b.n	80048b8 <TIM_TI1_SetConfig+0x6c>
 80048b6:	2300      	movs	r3, #0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d008      	beq.n	80048ce <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f023 0303 	bic.w	r3, r3, #3
 80048c2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	617b      	str	r3, [r7, #20]
 80048cc:	e003      	b.n	80048d6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	f043 0301 	orr.w	r3, r3, #1
 80048d4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	011b      	lsls	r3, r3, #4
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	f023 030a 	bic.w	r3, r3, #10
 80048f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	f003 030a 	and.w	r3, r3, #10
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	621a      	str	r2, [r3, #32]
}
 800490a:	bf00      	nop
 800490c:	371c      	adds	r7, #28
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	40010000 	.word	0x40010000
 800491c:	40000400 	.word	0x40000400
 8004920:	40000800 	.word	0x40000800
 8004924:	40000c00 	.word	0x40000c00
 8004928:	40010400 	.word	0x40010400
 800492c:	40014000 	.word	0x40014000
 8004930:	40001800 	.word	0x40001800

08004934 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004934:	b480      	push	{r7}
 8004936:	b087      	sub	sp, #28
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	f023 0201 	bic.w	r2, r3, #1
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800495e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	011b      	lsls	r3, r3, #4
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	4313      	orrs	r3, r2
 8004968:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f023 030a 	bic.w	r3, r3, #10
 8004970:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	4313      	orrs	r3, r2
 8004978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	621a      	str	r2, [r3, #32]
}
 8004986:	bf00      	nop
 8004988:	371c      	adds	r7, #28
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004992:	b480      	push	{r7}
 8004994:	b087      	sub	sp, #28
 8004996:	af00      	add	r7, sp, #0
 8004998:	60f8      	str	r0, [r7, #12]
 800499a:	60b9      	str	r1, [r7, #8]
 800499c:	607a      	str	r2, [r7, #4]
 800499e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6a1b      	ldr	r3, [r3, #32]
 80049a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	f023 0210 	bic.w	r2, r3, #16
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	021b      	lsls	r3, r3, #8
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80049d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	031b      	lsls	r3, r3, #12
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	4313      	orrs	r3, r2
 80049dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80049e4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	011b      	lsls	r3, r3, #4
 80049ea:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	621a      	str	r2, [r3, #32]
}
 8004a00:	bf00      	nop
 8004a02:	371c      	adds	r7, #28
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	f023 0210 	bic.w	r2, r3, #16
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	031b      	lsls	r3, r3, #12
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a48:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	011b      	lsls	r3, r3, #4
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	621a      	str	r2, [r3, #32]
}
 8004a60:	bf00      	nop
 8004a62:	371c      	adds	r7, #28
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
 8004a78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	f023 0303 	bic.w	r3, r3, #3
 8004a98:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004aa8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004abc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	021b      	lsls	r3, r3, #8
 8004ac2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	621a      	str	r2, [r3, #32]
}
 8004ad8:	bf00      	nop
 8004ada:	371c      	adds	r7, #28
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b087      	sub	sp, #28
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
 8004af0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	69db      	ldr	r3, [r3, #28]
 8004b08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b10:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	021b      	lsls	r3, r3, #8
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b22:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	031b      	lsls	r3, r3, #12
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004b36:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	031b      	lsls	r3, r3, #12
 8004b3c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	621a      	str	r2, [r3, #32]
}
 8004b52:	bf00      	nop
 8004b54:	371c      	adds	r7, #28
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b085      	sub	sp, #20
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	f043 0307 	orr.w	r3, r3, #7
 8004b80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	609a      	str	r2, [r3, #8]
}
 8004b88:	bf00      	nop
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b087      	sub	sp, #28
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
 8004ba0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	021a      	lsls	r2, r3, #8
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	609a      	str	r2, [r3, #8]
}
 8004bc8:	bf00      	nop
 8004bca:	371c      	adds	r7, #28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b087      	sub	sp, #28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f003 031f 	and.w	r3, r3, #31
 8004be6:	2201      	movs	r2, #1
 8004be8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6a1a      	ldr	r2, [r3, #32]
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	43db      	mvns	r3, r3
 8004bf6:	401a      	ands	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6a1a      	ldr	r2, [r3, #32]
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f003 031f 	and.w	r3, r3, #31
 8004c06:	6879      	ldr	r1, [r7, #4]
 8004c08:	fa01 f303 	lsl.w	r3, r1, r3
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	621a      	str	r2, [r3, #32]
}
 8004c12:	bf00      	nop
 8004c14:	371c      	adds	r7, #28
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
	...

08004c20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d101      	bne.n	8004c38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c34:	2302      	movs	r3, #2
 8004c36:	e06d      	b.n	8004d14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2202      	movs	r2, #2
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a30      	ldr	r2, [pc, #192]	@ (8004d20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d004      	beq.n	8004c6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a2f      	ldr	r2, [pc, #188]	@ (8004d24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d108      	bne.n	8004c7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004c72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a20      	ldr	r2, [pc, #128]	@ (8004d20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d022      	beq.n	8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004caa:	d01d      	beq.n	8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8004d28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d018      	beq.n	8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a1c      	ldr	r2, [pc, #112]	@ (8004d2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d013      	beq.n	8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a1a      	ldr	r2, [pc, #104]	@ (8004d30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d00e      	beq.n	8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a15      	ldr	r2, [pc, #84]	@ (8004d24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d009      	beq.n	8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a16      	ldr	r2, [pc, #88]	@ (8004d34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d004      	beq.n	8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a15      	ldr	r2, [pc, #84]	@ (8004d38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d10c      	bne.n	8004d02 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3714      	adds	r7, #20
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	40010000 	.word	0x40010000
 8004d24:	40010400 	.word	0x40010400
 8004d28:	40000400 	.word	0x40000400
 8004d2c:	40000800 	.word	0x40000800
 8004d30:	40000c00 	.word	0x40000c00
 8004d34:	40014000 	.word	0x40014000
 8004d38:	40001800 	.word	0x40001800

08004d3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e040      	b.n	8004e0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d106      	bne.n	8004da0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7fc fcc6 	bl	800172c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2224      	movs	r2, #36	@ 0x24
 8004da4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 0201 	bic.w	r2, r2, #1
 8004db4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d002      	beq.n	8004dc4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fe36 	bl	8005a30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 fbcf 	bl	8005568 <UART_SetConfig>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d101      	bne.n	8004dd4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e01b      	b.n	8004e0c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004de2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689a      	ldr	r2, [r3, #8]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004df2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f042 0201 	orr.w	r2, r2, #1
 8004e02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 feb5 	bl	8005b74 <UART_CheckIdleState>
 8004e0a:	4603      	mov	r3, r0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3708      	adds	r7, #8
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b08b      	sub	sp, #44	@ 0x2c
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e26:	2b20      	cmp	r3, #32
 8004e28:	d147      	bne.n	8004eba <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d002      	beq.n	8004e36 <HAL_UART_Transmit_IT+0x22>
 8004e30:	88fb      	ldrh	r3, [r7, #6]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e040      	b.n	8004ebc <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	88fa      	ldrh	r2, [r7, #6]
 8004e44:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	88fa      	ldrh	r2, [r7, #6]
 8004e4c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2221      	movs	r2, #33	@ 0x21
 8004e62:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e6c:	d107      	bne.n	8004e7e <HAL_UART_Transmit_IT+0x6a>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d103      	bne.n	8004e7e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4a13      	ldr	r2, [pc, #76]	@ (8004ec8 <HAL_UART_Transmit_IT+0xb4>)
 8004e7a:	66da      	str	r2, [r3, #108]	@ 0x6c
 8004e7c:	e002      	b.n	8004e84 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	4a12      	ldr	r2, [pc, #72]	@ (8004ecc <HAL_UART_Transmit_IT+0xb8>)
 8004e82:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	e853 3f00 	ldrex	r3, [r3]
 8004e90:	613b      	str	r3, [r7, #16]
   return(result);
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e98:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea2:	623b      	str	r3, [r7, #32]
 8004ea4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea6:	69f9      	ldr	r1, [r7, #28]
 8004ea8:	6a3a      	ldr	r2, [r7, #32]
 8004eaa:	e841 2300 	strex	r3, r2, [r1]
 8004eae:	61bb      	str	r3, [r7, #24]
   return(result);
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1e6      	bne.n	8004e84 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	e000      	b.n	8004ebc <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004eba:	2302      	movs	r3, #2
  }
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	372c      	adds	r7, #44	@ 0x2c
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr
 8004ec8:	080060d7 	.word	0x080060d7
 8004ecc:	08006021 	.word	0x08006021

08004ed0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b08a      	sub	sp, #40	@ 0x28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	4613      	mov	r3, r2
 8004edc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ee4:	2b20      	cmp	r3, #32
 8004ee6:	d132      	bne.n	8004f4e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d002      	beq.n	8004ef4 <HAL_UART_Receive_IT+0x24>
 8004eee:	88fb      	ldrh	r3, [r7, #6]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d101      	bne.n	8004ef8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e02b      	b.n	8004f50 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d018      	beq.n	8004f3e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	e853 3f00 	ldrex	r3, [r3]
 8004f18:	613b      	str	r3, [r7, #16]
   return(result);
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f20:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	461a      	mov	r2, r3
 8004f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2a:	623b      	str	r3, [r7, #32]
 8004f2c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2e:	69f9      	ldr	r1, [r7, #28]
 8004f30:	6a3a      	ldr	r2, [r7, #32]
 8004f32:	e841 2300 	strex	r3, r2, [r1]
 8004f36:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1e6      	bne.n	8004f0c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f3e:	88fb      	ldrh	r3, [r7, #6]
 8004f40:	461a      	mov	r2, r3
 8004f42:	68b9      	ldr	r1, [r7, #8]
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f000 ff2b 	bl	8005da0 <UART_Start_Receive_IT>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	e000      	b.n	8004f50 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004f4e:	2302      	movs	r3, #2
  }
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3728      	adds	r7, #40	@ 0x28
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b0ba      	sub	sp, #232	@ 0xe8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	69db      	ldr	r3, [r3, #28]
 8004f66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004f82:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004f86:	4013      	ands	r3, r2
 8004f88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004f8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d115      	bne.n	8004fc0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f98:	f003 0320 	and.w	r3, r3, #32
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00f      	beq.n	8004fc0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fa4:	f003 0320 	and.w	r3, r3, #32
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d009      	beq.n	8004fc0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f000 82ac 	beq.w	800550e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	4798      	blx	r3
      }
      return;
 8004fbe:	e2a6      	b.n	800550e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004fc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 8117 	beq.w	80051f8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004fca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d106      	bne.n	8004fe4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004fd6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004fda:	4b85      	ldr	r3, [pc, #532]	@ (80051f0 <HAL_UART_IRQHandler+0x298>)
 8004fdc:	4013      	ands	r3, r2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f000 810a 	beq.w	80051f8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d011      	beq.n	8005014 <HAL_UART_IRQHandler+0xbc>
 8004ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00b      	beq.n	8005014 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2201      	movs	r2, #1
 8005002:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800500a:	f043 0201 	orr.w	r2, r3, #1
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d011      	beq.n	8005044 <HAL_UART_IRQHandler+0xec>
 8005020:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00b      	beq.n	8005044 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2202      	movs	r2, #2
 8005032:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800503a:	f043 0204 	orr.w	r2, r3, #4
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b00      	cmp	r3, #0
 800504e:	d011      	beq.n	8005074 <HAL_UART_IRQHandler+0x11c>
 8005050:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00b      	beq.n	8005074 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2204      	movs	r2, #4
 8005062:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800506a:	f043 0202 	orr.w	r2, r3, #2
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005078:	f003 0308 	and.w	r3, r3, #8
 800507c:	2b00      	cmp	r3, #0
 800507e:	d017      	beq.n	80050b0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005084:	f003 0320 	and.w	r3, r3, #32
 8005088:	2b00      	cmp	r3, #0
 800508a:	d105      	bne.n	8005098 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800508c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005090:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00b      	beq.n	80050b0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2208      	movs	r2, #8
 800509e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050a6:	f043 0208 	orr.w	r2, r3, #8
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80050b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d012      	beq.n	80050e2 <HAL_UART_IRQHandler+0x18a>
 80050bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00c      	beq.n	80050e2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80050d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050d8:	f043 0220 	orr.w	r2, r3, #32
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 8212 	beq.w	8005512 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80050ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050f2:	f003 0320 	and.w	r3, r3, #32
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00d      	beq.n	8005116 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80050fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050fe:	f003 0320 	and.w	r3, r3, #32
 8005102:	2b00      	cmp	r3, #0
 8005104:	d007      	beq.n	8005116 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800511c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800512a:	2b40      	cmp	r3, #64	@ 0x40
 800512c:	d005      	beq.n	800513a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800512e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005132:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005136:	2b00      	cmp	r3, #0
 8005138:	d04f      	beq.n	80051da <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 fef6 	bl	8005f2c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800514a:	2b40      	cmp	r3, #64	@ 0x40
 800514c:	d141      	bne.n	80051d2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	3308      	adds	r3, #8
 8005154:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005158:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800515c:	e853 3f00 	ldrex	r3, [r3]
 8005160:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005164:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005168:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800516c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	3308      	adds	r3, #8
 8005176:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800517a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800517e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005182:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005186:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800518a:	e841 2300 	strex	r3, r2, [r1]
 800518e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005192:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1d9      	bne.n	800514e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d013      	beq.n	80051ca <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051a6:	4a13      	ldr	r2, [pc, #76]	@ (80051f4 <HAL_UART_IRQHandler+0x29c>)
 80051a8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7fc fe40 	bl	8001e34 <HAL_DMA_Abort_IT>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d017      	beq.n	80051ea <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80051c4:	4610      	mov	r0, r2
 80051c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051c8:	e00f      	b.n	80051ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f9ac 	bl	8005528 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d0:	e00b      	b.n	80051ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f9a8 	bl	8005528 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d8:	e007      	b.n	80051ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f9a4 	bl	8005528 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80051e8:	e193      	b.n	8005512 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ea:	bf00      	nop
    return;
 80051ec:	e191      	b.n	8005512 <HAL_UART_IRQHandler+0x5ba>
 80051ee:	bf00      	nop
 80051f0:	04000120 	.word	0x04000120
 80051f4:	08005ff5 	.word	0x08005ff5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	f040 814c 	bne.w	800549a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005206:	f003 0310 	and.w	r3, r3, #16
 800520a:	2b00      	cmp	r3, #0
 800520c:	f000 8145 	beq.w	800549a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005214:	f003 0310 	and.w	r3, r3, #16
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 813e 	beq.w	800549a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2210      	movs	r2, #16
 8005224:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005230:	2b40      	cmp	r3, #64	@ 0x40
 8005232:	f040 80b6 	bne.w	80053a2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005242:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005246:	2b00      	cmp	r3, #0
 8005248:	f000 8165 	beq.w	8005516 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005252:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005256:	429a      	cmp	r2, r3
 8005258:	f080 815d 	bcs.w	8005516 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005262:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800526a:	69db      	ldr	r3, [r3, #28]
 800526c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005270:	f000 8086 	beq.w	8005380 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005280:	e853 3f00 	ldrex	r3, [r3]
 8005284:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005288:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800528c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005290:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	461a      	mov	r2, r3
 800529a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800529e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80052a2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80052aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80052ae:	e841 2300 	strex	r3, r2, [r1]
 80052b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80052b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1da      	bne.n	8005274 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	3308      	adds	r3, #8
 80052c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80052c8:	e853 3f00 	ldrex	r3, [r3]
 80052cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80052ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80052d0:	f023 0301 	bic.w	r3, r3, #1
 80052d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	3308      	adds	r3, #8
 80052de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80052e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80052e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80052ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80052ee:	e841 2300 	strex	r3, r2, [r1]
 80052f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80052f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1e1      	bne.n	80052be <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	3308      	adds	r3, #8
 8005300:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005302:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005304:	e853 3f00 	ldrex	r3, [r3]
 8005308:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800530a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800530c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005310:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	3308      	adds	r3, #8
 800531a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800531e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005320:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005322:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005324:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005326:	e841 2300 	strex	r3, r2, [r1]
 800532a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800532c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1e3      	bne.n	80052fa <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2220      	movs	r2, #32
 8005336:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005346:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005348:	e853 3f00 	ldrex	r3, [r3]
 800534c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800534e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005350:	f023 0310 	bic.w	r3, r3, #16
 8005354:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	461a      	mov	r2, r3
 800535e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005362:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005364:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005366:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005368:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800536a:	e841 2300 	strex	r3, r2, [r1]
 800536e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005370:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1e4      	bne.n	8005340 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800537a:	4618      	mov	r0, r3
 800537c:	f7fc fcea 	bl	8001d54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2202      	movs	r2, #2
 8005384:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005392:	b29b      	uxth	r3, r3
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	b29b      	uxth	r3, r3
 8005398:	4619      	mov	r1, r3
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f8ce 	bl	800553c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80053a0:	e0b9      	b.n	8005516 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80053bc:	b29b      	uxth	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f000 80ab 	beq.w	800551a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80053c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 80a6 	beq.w	800551a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053d6:	e853 3f00 	ldrex	r3, [r3]
 80053da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	461a      	mov	r2, r3
 80053ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80053f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80053f2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053f8:	e841 2300 	strex	r3, r2, [r1]
 80053fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1e4      	bne.n	80053ce <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	3308      	adds	r3, #8
 800540a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540e:	e853 3f00 	ldrex	r3, [r3]
 8005412:	623b      	str	r3, [r7, #32]
   return(result);
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	f023 0301 	bic.w	r3, r3, #1
 800541a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3308      	adds	r3, #8
 8005424:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005428:	633a      	str	r2, [r7, #48]	@ 0x30
 800542a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800542e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005430:	e841 2300 	strex	r3, r2, [r1]
 8005434:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1e3      	bne.n	8005404 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2220      	movs	r2, #32
 8005440:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	e853 3f00 	ldrex	r3, [r3]
 800545c:	60fb      	str	r3, [r7, #12]
   return(result);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f023 0310 	bic.w	r3, r3, #16
 8005464:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	461a      	mov	r2, r3
 800546e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005472:	61fb      	str	r3, [r7, #28]
 8005474:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005476:	69b9      	ldr	r1, [r7, #24]
 8005478:	69fa      	ldr	r2, [r7, #28]
 800547a:	e841 2300 	strex	r3, r2, [r1]
 800547e:	617b      	str	r3, [r7, #20]
   return(result);
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1e4      	bne.n	8005450 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2202      	movs	r2, #2
 800548a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800548c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005490:	4619      	mov	r1, r3
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f852 	bl	800553c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005498:	e03f      	b.n	800551a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800549a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800549e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00e      	beq.n	80054c4 <HAL_UART_IRQHandler+0x56c>
 80054a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d008      	beq.n	80054c4 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80054ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 f849 	bl	8005554 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80054c2:	e02d      	b.n	8005520 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80054c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00e      	beq.n	80054ee <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80054d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d008      	beq.n	80054ee <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d01c      	beq.n	800551e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	4798      	blx	r3
    }
    return;
 80054ec:	e017      	b.n	800551e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80054ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d012      	beq.n	8005520 <HAL_UART_IRQHandler+0x5c8>
 80054fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00c      	beq.n	8005520 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 fe45 	bl	8006196 <UART_EndTransmit_IT>
    return;
 800550c:	e008      	b.n	8005520 <HAL_UART_IRQHandler+0x5c8>
      return;
 800550e:	bf00      	nop
 8005510:	e006      	b.n	8005520 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005512:	bf00      	nop
 8005514:	e004      	b.n	8005520 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005516:	bf00      	nop
 8005518:	e002      	b.n	8005520 <HAL_UART_IRQHandler+0x5c8>
      return;
 800551a:	bf00      	nop
 800551c:	e000      	b.n	8005520 <HAL_UART_IRQHandler+0x5c8>
    return;
 800551e:	bf00      	nop
  }

}
 8005520:	37e8      	adds	r7, #232	@ 0xe8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop

08005528 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	460b      	mov	r3, r1
 8005546:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b088      	sub	sp, #32
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005570:	2300      	movs	r3, #0
 8005572:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689a      	ldr	r2, [r3, #8]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	431a      	orrs	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	431a      	orrs	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	69db      	ldr	r3, [r3, #28]
 8005588:	4313      	orrs	r3, r2
 800558a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	4ba6      	ldr	r3, [pc, #664]	@ (800582c <UART_SetConfig+0x2c4>)
 8005594:	4013      	ands	r3, r2
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	6812      	ldr	r2, [r2, #0]
 800559a:	6979      	ldr	r1, [r7, #20]
 800559c:	430b      	orrs	r3, r1
 800559e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68da      	ldr	r2, [r3, #12]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a94      	ldr	r2, [pc, #592]	@ (8005830 <UART_SetConfig+0x2c8>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d120      	bne.n	8005626 <UART_SetConfig+0xbe>
 80055e4:	4b93      	ldr	r3, [pc, #588]	@ (8005834 <UART_SetConfig+0x2cc>)
 80055e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ea:	f003 0303 	and.w	r3, r3, #3
 80055ee:	2b03      	cmp	r3, #3
 80055f0:	d816      	bhi.n	8005620 <UART_SetConfig+0xb8>
 80055f2:	a201      	add	r2, pc, #4	@ (adr r2, 80055f8 <UART_SetConfig+0x90>)
 80055f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f8:	08005609 	.word	0x08005609
 80055fc:	08005615 	.word	0x08005615
 8005600:	0800560f 	.word	0x0800560f
 8005604:	0800561b 	.word	0x0800561b
 8005608:	2301      	movs	r3, #1
 800560a:	77fb      	strb	r3, [r7, #31]
 800560c:	e150      	b.n	80058b0 <UART_SetConfig+0x348>
 800560e:	2302      	movs	r3, #2
 8005610:	77fb      	strb	r3, [r7, #31]
 8005612:	e14d      	b.n	80058b0 <UART_SetConfig+0x348>
 8005614:	2304      	movs	r3, #4
 8005616:	77fb      	strb	r3, [r7, #31]
 8005618:	e14a      	b.n	80058b0 <UART_SetConfig+0x348>
 800561a:	2308      	movs	r3, #8
 800561c:	77fb      	strb	r3, [r7, #31]
 800561e:	e147      	b.n	80058b0 <UART_SetConfig+0x348>
 8005620:	2310      	movs	r3, #16
 8005622:	77fb      	strb	r3, [r7, #31]
 8005624:	e144      	b.n	80058b0 <UART_SetConfig+0x348>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a83      	ldr	r2, [pc, #524]	@ (8005838 <UART_SetConfig+0x2d0>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d132      	bne.n	8005696 <UART_SetConfig+0x12e>
 8005630:	4b80      	ldr	r3, [pc, #512]	@ (8005834 <UART_SetConfig+0x2cc>)
 8005632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005636:	f003 030c 	and.w	r3, r3, #12
 800563a:	2b0c      	cmp	r3, #12
 800563c:	d828      	bhi.n	8005690 <UART_SetConfig+0x128>
 800563e:	a201      	add	r2, pc, #4	@ (adr r2, 8005644 <UART_SetConfig+0xdc>)
 8005640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005644:	08005679 	.word	0x08005679
 8005648:	08005691 	.word	0x08005691
 800564c:	08005691 	.word	0x08005691
 8005650:	08005691 	.word	0x08005691
 8005654:	08005685 	.word	0x08005685
 8005658:	08005691 	.word	0x08005691
 800565c:	08005691 	.word	0x08005691
 8005660:	08005691 	.word	0x08005691
 8005664:	0800567f 	.word	0x0800567f
 8005668:	08005691 	.word	0x08005691
 800566c:	08005691 	.word	0x08005691
 8005670:	08005691 	.word	0x08005691
 8005674:	0800568b 	.word	0x0800568b
 8005678:	2300      	movs	r3, #0
 800567a:	77fb      	strb	r3, [r7, #31]
 800567c:	e118      	b.n	80058b0 <UART_SetConfig+0x348>
 800567e:	2302      	movs	r3, #2
 8005680:	77fb      	strb	r3, [r7, #31]
 8005682:	e115      	b.n	80058b0 <UART_SetConfig+0x348>
 8005684:	2304      	movs	r3, #4
 8005686:	77fb      	strb	r3, [r7, #31]
 8005688:	e112      	b.n	80058b0 <UART_SetConfig+0x348>
 800568a:	2308      	movs	r3, #8
 800568c:	77fb      	strb	r3, [r7, #31]
 800568e:	e10f      	b.n	80058b0 <UART_SetConfig+0x348>
 8005690:	2310      	movs	r3, #16
 8005692:	77fb      	strb	r3, [r7, #31]
 8005694:	e10c      	b.n	80058b0 <UART_SetConfig+0x348>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a68      	ldr	r2, [pc, #416]	@ (800583c <UART_SetConfig+0x2d4>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d120      	bne.n	80056e2 <UART_SetConfig+0x17a>
 80056a0:	4b64      	ldr	r3, [pc, #400]	@ (8005834 <UART_SetConfig+0x2cc>)
 80056a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056a6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80056aa:	2b30      	cmp	r3, #48	@ 0x30
 80056ac:	d013      	beq.n	80056d6 <UART_SetConfig+0x16e>
 80056ae:	2b30      	cmp	r3, #48	@ 0x30
 80056b0:	d814      	bhi.n	80056dc <UART_SetConfig+0x174>
 80056b2:	2b20      	cmp	r3, #32
 80056b4:	d009      	beq.n	80056ca <UART_SetConfig+0x162>
 80056b6:	2b20      	cmp	r3, #32
 80056b8:	d810      	bhi.n	80056dc <UART_SetConfig+0x174>
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d002      	beq.n	80056c4 <UART_SetConfig+0x15c>
 80056be:	2b10      	cmp	r3, #16
 80056c0:	d006      	beq.n	80056d0 <UART_SetConfig+0x168>
 80056c2:	e00b      	b.n	80056dc <UART_SetConfig+0x174>
 80056c4:	2300      	movs	r3, #0
 80056c6:	77fb      	strb	r3, [r7, #31]
 80056c8:	e0f2      	b.n	80058b0 <UART_SetConfig+0x348>
 80056ca:	2302      	movs	r3, #2
 80056cc:	77fb      	strb	r3, [r7, #31]
 80056ce:	e0ef      	b.n	80058b0 <UART_SetConfig+0x348>
 80056d0:	2304      	movs	r3, #4
 80056d2:	77fb      	strb	r3, [r7, #31]
 80056d4:	e0ec      	b.n	80058b0 <UART_SetConfig+0x348>
 80056d6:	2308      	movs	r3, #8
 80056d8:	77fb      	strb	r3, [r7, #31]
 80056da:	e0e9      	b.n	80058b0 <UART_SetConfig+0x348>
 80056dc:	2310      	movs	r3, #16
 80056de:	77fb      	strb	r3, [r7, #31]
 80056e0:	e0e6      	b.n	80058b0 <UART_SetConfig+0x348>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a56      	ldr	r2, [pc, #344]	@ (8005840 <UART_SetConfig+0x2d8>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d120      	bne.n	800572e <UART_SetConfig+0x1c6>
 80056ec:	4b51      	ldr	r3, [pc, #324]	@ (8005834 <UART_SetConfig+0x2cc>)
 80056ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056f2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80056f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80056f8:	d013      	beq.n	8005722 <UART_SetConfig+0x1ba>
 80056fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80056fc:	d814      	bhi.n	8005728 <UART_SetConfig+0x1c0>
 80056fe:	2b80      	cmp	r3, #128	@ 0x80
 8005700:	d009      	beq.n	8005716 <UART_SetConfig+0x1ae>
 8005702:	2b80      	cmp	r3, #128	@ 0x80
 8005704:	d810      	bhi.n	8005728 <UART_SetConfig+0x1c0>
 8005706:	2b00      	cmp	r3, #0
 8005708:	d002      	beq.n	8005710 <UART_SetConfig+0x1a8>
 800570a:	2b40      	cmp	r3, #64	@ 0x40
 800570c:	d006      	beq.n	800571c <UART_SetConfig+0x1b4>
 800570e:	e00b      	b.n	8005728 <UART_SetConfig+0x1c0>
 8005710:	2300      	movs	r3, #0
 8005712:	77fb      	strb	r3, [r7, #31]
 8005714:	e0cc      	b.n	80058b0 <UART_SetConfig+0x348>
 8005716:	2302      	movs	r3, #2
 8005718:	77fb      	strb	r3, [r7, #31]
 800571a:	e0c9      	b.n	80058b0 <UART_SetConfig+0x348>
 800571c:	2304      	movs	r3, #4
 800571e:	77fb      	strb	r3, [r7, #31]
 8005720:	e0c6      	b.n	80058b0 <UART_SetConfig+0x348>
 8005722:	2308      	movs	r3, #8
 8005724:	77fb      	strb	r3, [r7, #31]
 8005726:	e0c3      	b.n	80058b0 <UART_SetConfig+0x348>
 8005728:	2310      	movs	r3, #16
 800572a:	77fb      	strb	r3, [r7, #31]
 800572c:	e0c0      	b.n	80058b0 <UART_SetConfig+0x348>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a44      	ldr	r2, [pc, #272]	@ (8005844 <UART_SetConfig+0x2dc>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d125      	bne.n	8005784 <UART_SetConfig+0x21c>
 8005738:	4b3e      	ldr	r3, [pc, #248]	@ (8005834 <UART_SetConfig+0x2cc>)
 800573a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800573e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005742:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005746:	d017      	beq.n	8005778 <UART_SetConfig+0x210>
 8005748:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800574c:	d817      	bhi.n	800577e <UART_SetConfig+0x216>
 800574e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005752:	d00b      	beq.n	800576c <UART_SetConfig+0x204>
 8005754:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005758:	d811      	bhi.n	800577e <UART_SetConfig+0x216>
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <UART_SetConfig+0x1fe>
 800575e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005762:	d006      	beq.n	8005772 <UART_SetConfig+0x20a>
 8005764:	e00b      	b.n	800577e <UART_SetConfig+0x216>
 8005766:	2300      	movs	r3, #0
 8005768:	77fb      	strb	r3, [r7, #31]
 800576a:	e0a1      	b.n	80058b0 <UART_SetConfig+0x348>
 800576c:	2302      	movs	r3, #2
 800576e:	77fb      	strb	r3, [r7, #31]
 8005770:	e09e      	b.n	80058b0 <UART_SetConfig+0x348>
 8005772:	2304      	movs	r3, #4
 8005774:	77fb      	strb	r3, [r7, #31]
 8005776:	e09b      	b.n	80058b0 <UART_SetConfig+0x348>
 8005778:	2308      	movs	r3, #8
 800577a:	77fb      	strb	r3, [r7, #31]
 800577c:	e098      	b.n	80058b0 <UART_SetConfig+0x348>
 800577e:	2310      	movs	r3, #16
 8005780:	77fb      	strb	r3, [r7, #31]
 8005782:	e095      	b.n	80058b0 <UART_SetConfig+0x348>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a2f      	ldr	r2, [pc, #188]	@ (8005848 <UART_SetConfig+0x2e0>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d125      	bne.n	80057da <UART_SetConfig+0x272>
 800578e:	4b29      	ldr	r3, [pc, #164]	@ (8005834 <UART_SetConfig+0x2cc>)
 8005790:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005794:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005798:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800579c:	d017      	beq.n	80057ce <UART_SetConfig+0x266>
 800579e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80057a2:	d817      	bhi.n	80057d4 <UART_SetConfig+0x26c>
 80057a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057a8:	d00b      	beq.n	80057c2 <UART_SetConfig+0x25a>
 80057aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057ae:	d811      	bhi.n	80057d4 <UART_SetConfig+0x26c>
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d003      	beq.n	80057bc <UART_SetConfig+0x254>
 80057b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057b8:	d006      	beq.n	80057c8 <UART_SetConfig+0x260>
 80057ba:	e00b      	b.n	80057d4 <UART_SetConfig+0x26c>
 80057bc:	2301      	movs	r3, #1
 80057be:	77fb      	strb	r3, [r7, #31]
 80057c0:	e076      	b.n	80058b0 <UART_SetConfig+0x348>
 80057c2:	2302      	movs	r3, #2
 80057c4:	77fb      	strb	r3, [r7, #31]
 80057c6:	e073      	b.n	80058b0 <UART_SetConfig+0x348>
 80057c8:	2304      	movs	r3, #4
 80057ca:	77fb      	strb	r3, [r7, #31]
 80057cc:	e070      	b.n	80058b0 <UART_SetConfig+0x348>
 80057ce:	2308      	movs	r3, #8
 80057d0:	77fb      	strb	r3, [r7, #31]
 80057d2:	e06d      	b.n	80058b0 <UART_SetConfig+0x348>
 80057d4:	2310      	movs	r3, #16
 80057d6:	77fb      	strb	r3, [r7, #31]
 80057d8:	e06a      	b.n	80058b0 <UART_SetConfig+0x348>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a1b      	ldr	r2, [pc, #108]	@ (800584c <UART_SetConfig+0x2e4>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d138      	bne.n	8005856 <UART_SetConfig+0x2ee>
 80057e4:	4b13      	ldr	r3, [pc, #76]	@ (8005834 <UART_SetConfig+0x2cc>)
 80057e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057ea:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80057ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80057f2:	d017      	beq.n	8005824 <UART_SetConfig+0x2bc>
 80057f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80057f8:	d82a      	bhi.n	8005850 <UART_SetConfig+0x2e8>
 80057fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057fe:	d00b      	beq.n	8005818 <UART_SetConfig+0x2b0>
 8005800:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005804:	d824      	bhi.n	8005850 <UART_SetConfig+0x2e8>
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <UART_SetConfig+0x2aa>
 800580a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800580e:	d006      	beq.n	800581e <UART_SetConfig+0x2b6>
 8005810:	e01e      	b.n	8005850 <UART_SetConfig+0x2e8>
 8005812:	2300      	movs	r3, #0
 8005814:	77fb      	strb	r3, [r7, #31]
 8005816:	e04b      	b.n	80058b0 <UART_SetConfig+0x348>
 8005818:	2302      	movs	r3, #2
 800581a:	77fb      	strb	r3, [r7, #31]
 800581c:	e048      	b.n	80058b0 <UART_SetConfig+0x348>
 800581e:	2304      	movs	r3, #4
 8005820:	77fb      	strb	r3, [r7, #31]
 8005822:	e045      	b.n	80058b0 <UART_SetConfig+0x348>
 8005824:	2308      	movs	r3, #8
 8005826:	77fb      	strb	r3, [r7, #31]
 8005828:	e042      	b.n	80058b0 <UART_SetConfig+0x348>
 800582a:	bf00      	nop
 800582c:	efff69f3 	.word	0xefff69f3
 8005830:	40011000 	.word	0x40011000
 8005834:	40023800 	.word	0x40023800
 8005838:	40004400 	.word	0x40004400
 800583c:	40004800 	.word	0x40004800
 8005840:	40004c00 	.word	0x40004c00
 8005844:	40005000 	.word	0x40005000
 8005848:	40011400 	.word	0x40011400
 800584c:	40007800 	.word	0x40007800
 8005850:	2310      	movs	r3, #16
 8005852:	77fb      	strb	r3, [r7, #31]
 8005854:	e02c      	b.n	80058b0 <UART_SetConfig+0x348>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a72      	ldr	r2, [pc, #456]	@ (8005a24 <UART_SetConfig+0x4bc>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d125      	bne.n	80058ac <UART_SetConfig+0x344>
 8005860:	4b71      	ldr	r3, [pc, #452]	@ (8005a28 <UART_SetConfig+0x4c0>)
 8005862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005866:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800586a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800586e:	d017      	beq.n	80058a0 <UART_SetConfig+0x338>
 8005870:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005874:	d817      	bhi.n	80058a6 <UART_SetConfig+0x33e>
 8005876:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800587a:	d00b      	beq.n	8005894 <UART_SetConfig+0x32c>
 800587c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005880:	d811      	bhi.n	80058a6 <UART_SetConfig+0x33e>
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <UART_SetConfig+0x326>
 8005886:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800588a:	d006      	beq.n	800589a <UART_SetConfig+0x332>
 800588c:	e00b      	b.n	80058a6 <UART_SetConfig+0x33e>
 800588e:	2300      	movs	r3, #0
 8005890:	77fb      	strb	r3, [r7, #31]
 8005892:	e00d      	b.n	80058b0 <UART_SetConfig+0x348>
 8005894:	2302      	movs	r3, #2
 8005896:	77fb      	strb	r3, [r7, #31]
 8005898:	e00a      	b.n	80058b0 <UART_SetConfig+0x348>
 800589a:	2304      	movs	r3, #4
 800589c:	77fb      	strb	r3, [r7, #31]
 800589e:	e007      	b.n	80058b0 <UART_SetConfig+0x348>
 80058a0:	2308      	movs	r3, #8
 80058a2:	77fb      	strb	r3, [r7, #31]
 80058a4:	e004      	b.n	80058b0 <UART_SetConfig+0x348>
 80058a6:	2310      	movs	r3, #16
 80058a8:	77fb      	strb	r3, [r7, #31]
 80058aa:	e001      	b.n	80058b0 <UART_SetConfig+0x348>
 80058ac:	2310      	movs	r3, #16
 80058ae:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	69db      	ldr	r3, [r3, #28]
 80058b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058b8:	d15b      	bne.n	8005972 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80058ba:	7ffb      	ldrb	r3, [r7, #31]
 80058bc:	2b08      	cmp	r3, #8
 80058be:	d828      	bhi.n	8005912 <UART_SetConfig+0x3aa>
 80058c0:	a201      	add	r2, pc, #4	@ (adr r2, 80058c8 <UART_SetConfig+0x360>)
 80058c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c6:	bf00      	nop
 80058c8:	080058ed 	.word	0x080058ed
 80058cc:	080058f5 	.word	0x080058f5
 80058d0:	080058fd 	.word	0x080058fd
 80058d4:	08005913 	.word	0x08005913
 80058d8:	08005903 	.word	0x08005903
 80058dc:	08005913 	.word	0x08005913
 80058e0:	08005913 	.word	0x08005913
 80058e4:	08005913 	.word	0x08005913
 80058e8:	0800590b 	.word	0x0800590b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058ec:	f7fd fdd0 	bl	8003490 <HAL_RCC_GetPCLK1Freq>
 80058f0:	61b8      	str	r0, [r7, #24]
        break;
 80058f2:	e013      	b.n	800591c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058f4:	f7fd fde0 	bl	80034b8 <HAL_RCC_GetPCLK2Freq>
 80058f8:	61b8      	str	r0, [r7, #24]
        break;
 80058fa:	e00f      	b.n	800591c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058fc:	4b4b      	ldr	r3, [pc, #300]	@ (8005a2c <UART_SetConfig+0x4c4>)
 80058fe:	61bb      	str	r3, [r7, #24]
        break;
 8005900:	e00c      	b.n	800591c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005902:	f7fd fcf3 	bl	80032ec <HAL_RCC_GetSysClockFreq>
 8005906:	61b8      	str	r0, [r7, #24]
        break;
 8005908:	e008      	b.n	800591c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800590a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800590e:	61bb      	str	r3, [r7, #24]
        break;
 8005910:	e004      	b.n	800591c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005912:	2300      	movs	r3, #0
 8005914:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	77bb      	strb	r3, [r7, #30]
        break;
 800591a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d074      	beq.n	8005a0c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	005a      	lsls	r2, r3, #1
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	085b      	lsrs	r3, r3, #1
 800592c:	441a      	add	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	fbb2 f3f3 	udiv	r3, r2, r3
 8005936:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	2b0f      	cmp	r3, #15
 800593c:	d916      	bls.n	800596c <UART_SetConfig+0x404>
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005944:	d212      	bcs.n	800596c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	b29b      	uxth	r3, r3
 800594a:	f023 030f 	bic.w	r3, r3, #15
 800594e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	085b      	lsrs	r3, r3, #1
 8005954:	b29b      	uxth	r3, r3
 8005956:	f003 0307 	and.w	r3, r3, #7
 800595a:	b29a      	uxth	r2, r3
 800595c:	89fb      	ldrh	r3, [r7, #14]
 800595e:	4313      	orrs	r3, r2
 8005960:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	89fa      	ldrh	r2, [r7, #14]
 8005968:	60da      	str	r2, [r3, #12]
 800596a:	e04f      	b.n	8005a0c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	77bb      	strb	r3, [r7, #30]
 8005970:	e04c      	b.n	8005a0c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005972:	7ffb      	ldrb	r3, [r7, #31]
 8005974:	2b08      	cmp	r3, #8
 8005976:	d828      	bhi.n	80059ca <UART_SetConfig+0x462>
 8005978:	a201      	add	r2, pc, #4	@ (adr r2, 8005980 <UART_SetConfig+0x418>)
 800597a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597e:	bf00      	nop
 8005980:	080059a5 	.word	0x080059a5
 8005984:	080059ad 	.word	0x080059ad
 8005988:	080059b5 	.word	0x080059b5
 800598c:	080059cb 	.word	0x080059cb
 8005990:	080059bb 	.word	0x080059bb
 8005994:	080059cb 	.word	0x080059cb
 8005998:	080059cb 	.word	0x080059cb
 800599c:	080059cb 	.word	0x080059cb
 80059a0:	080059c3 	.word	0x080059c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059a4:	f7fd fd74 	bl	8003490 <HAL_RCC_GetPCLK1Freq>
 80059a8:	61b8      	str	r0, [r7, #24]
        break;
 80059aa:	e013      	b.n	80059d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059ac:	f7fd fd84 	bl	80034b8 <HAL_RCC_GetPCLK2Freq>
 80059b0:	61b8      	str	r0, [r7, #24]
        break;
 80059b2:	e00f      	b.n	80059d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059b4:	4b1d      	ldr	r3, [pc, #116]	@ (8005a2c <UART_SetConfig+0x4c4>)
 80059b6:	61bb      	str	r3, [r7, #24]
        break;
 80059b8:	e00c      	b.n	80059d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059ba:	f7fd fc97 	bl	80032ec <HAL_RCC_GetSysClockFreq>
 80059be:	61b8      	str	r0, [r7, #24]
        break;
 80059c0:	e008      	b.n	80059d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059c6:	61bb      	str	r3, [r7, #24]
        break;
 80059c8:	e004      	b.n	80059d4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80059ca:	2300      	movs	r3, #0
 80059cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	77bb      	strb	r3, [r7, #30]
        break;
 80059d2:	bf00      	nop
    }

    if (pclk != 0U)
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d018      	beq.n	8005a0c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	085a      	lsrs	r2, r3, #1
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	441a      	add	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	2b0f      	cmp	r3, #15
 80059f2:	d909      	bls.n	8005a08 <UART_SetConfig+0x4a0>
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059fa:	d205      	bcs.n	8005a08 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	60da      	str	r2, [r3, #12]
 8005a06:	e001      	b.n	8005a0c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005a18:	7fbb      	ldrb	r3, [r7, #30]
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3720      	adds	r7, #32
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	40007c00 	.word	0x40007c00
 8005a28:	40023800 	.word	0x40023800
 8005a2c:	00f42400 	.word	0x00f42400

08005a30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3c:	f003 0308 	and.w	r3, r3, #8
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00a      	beq.n	8005a5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	430a      	orrs	r2, r1
 8005a58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00a      	beq.n	8005a7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a80:	f003 0302 	and.w	r3, r3, #2
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00a      	beq.n	8005a9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa2:	f003 0304 	and.w	r3, r3, #4
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00a      	beq.n	8005ac0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	430a      	orrs	r2, r1
 8005abe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac4:	f003 0310 	and.w	r3, r3, #16
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00a      	beq.n	8005ae2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae6:	f003 0320 	and.w	r3, r3, #32
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00a      	beq.n	8005b04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	430a      	orrs	r2, r1
 8005b02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d01a      	beq.n	8005b46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b2e:	d10a      	bne.n	8005b46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	430a      	orrs	r2, r1
 8005b44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00a      	beq.n	8005b68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	430a      	orrs	r2, r1
 8005b66:	605a      	str	r2, [r3, #4]
  }
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b098      	sub	sp, #96	@ 0x60
 8005b78:	af02      	add	r7, sp, #8
 8005b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b84:	f7fb ff2c 	bl	80019e0 <HAL_GetTick>
 8005b88:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0308 	and.w	r3, r3, #8
 8005b94:	2b08      	cmp	r3, #8
 8005b96:	d12e      	bne.n	8005bf6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f88c 	bl	8005cc4 <UART_WaitOnFlagUntilTimeout>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d021      	beq.n	8005bf6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bba:	e853 3f00 	ldrex	r3, [r3]
 8005bbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	461a      	mov	r2, r3
 8005bce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bd2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005bd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bd8:	e841 2300 	strex	r3, r2, [r1]
 8005bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1e6      	bne.n	8005bb2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2220      	movs	r2, #32
 8005be8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e062      	b.n	8005cbc <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0304 	and.w	r3, r3, #4
 8005c00:	2b04      	cmp	r3, #4
 8005c02:	d149      	bne.n	8005c98 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f856 	bl	8005cc4 <UART_WaitOnFlagUntilTimeout>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d03c      	beq.n	8005c98 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c26:	e853 3f00 	ldrex	r3, [r3]
 8005c2a:	623b      	str	r3, [r7, #32]
   return(result);
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	461a      	mov	r2, r3
 8005c3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c44:	e841 2300 	strex	r3, r2, [r1]
 8005c48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1e6      	bne.n	8005c1e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3308      	adds	r3, #8
 8005c56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	e853 3f00 	ldrex	r3, [r3]
 8005c5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f023 0301 	bic.w	r3, r3, #1
 8005c66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3308      	adds	r3, #8
 8005c6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c70:	61fa      	str	r2, [r7, #28]
 8005c72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c74:	69b9      	ldr	r1, [r7, #24]
 8005c76:	69fa      	ldr	r2, [r7, #28]
 8005c78:	e841 2300 	strex	r3, r2, [r1]
 8005c7c:	617b      	str	r3, [r7, #20]
   return(result);
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1e5      	bne.n	8005c50 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2220      	movs	r2, #32
 8005c88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e011      	b.n	8005cbc <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2220      	movs	r2, #32
 8005ca2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3758      	adds	r7, #88	@ 0x58
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	603b      	str	r3, [r7, #0]
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cd4:	e04f      	b.n	8005d76 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cdc:	d04b      	beq.n	8005d76 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cde:	f7fb fe7f 	bl	80019e0 <HAL_GetTick>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	69ba      	ldr	r2, [r7, #24]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d302      	bcc.n	8005cf4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d101      	bne.n	8005cf8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e04e      	b.n	8005d96 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0304 	and.w	r3, r3, #4
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d037      	beq.n	8005d76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	2b80      	cmp	r3, #128	@ 0x80
 8005d0a:	d034      	beq.n	8005d76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	2b40      	cmp	r3, #64	@ 0x40
 8005d10:	d031      	beq.n	8005d76 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	69db      	ldr	r3, [r3, #28]
 8005d18:	f003 0308 	and.w	r3, r3, #8
 8005d1c:	2b08      	cmp	r3, #8
 8005d1e:	d110      	bne.n	8005d42 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2208      	movs	r2, #8
 8005d26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 f8ff 	bl	8005f2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2208      	movs	r2, #8
 8005d32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e029      	b.n	8005d96 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	69db      	ldr	r3, [r3, #28]
 8005d48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d50:	d111      	bne.n	8005d76 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f000 f8e5 	bl	8005f2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2220      	movs	r2, #32
 8005d66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e00f      	b.n	8005d96 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	69da      	ldr	r2, [r3, #28]
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	4013      	ands	r3, r2
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	bf0c      	ite	eq
 8005d86:	2301      	moveq	r3, #1
 8005d88:	2300      	movne	r3, #0
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	79fb      	ldrb	r3, [r7, #7]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d0a0      	beq.n	8005cd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
	...

08005da0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b097      	sub	sp, #92	@ 0x5c
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	4613      	mov	r3, r2
 8005dac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	88fa      	ldrh	r2, [r7, #6]
 8005db8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	88fa      	ldrh	r2, [r7, #6]
 8005dc0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dd2:	d10e      	bne.n	8005df2 <UART_Start_Receive_IT+0x52>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d105      	bne.n	8005de8 <UART_Start_Receive_IT+0x48>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005de2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005de6:	e02d      	b.n	8005e44 <UART_Start_Receive_IT+0xa4>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	22ff      	movs	r2, #255	@ 0xff
 8005dec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005df0:	e028      	b.n	8005e44 <UART_Start_Receive_IT+0xa4>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10d      	bne.n	8005e16 <UART_Start_Receive_IT+0x76>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d104      	bne.n	8005e0c <UART_Start_Receive_IT+0x6c>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	22ff      	movs	r2, #255	@ 0xff
 8005e06:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005e0a:	e01b      	b.n	8005e44 <UART_Start_Receive_IT+0xa4>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	227f      	movs	r2, #127	@ 0x7f
 8005e10:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005e14:	e016      	b.n	8005e44 <UART_Start_Receive_IT+0xa4>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e1e:	d10d      	bne.n	8005e3c <UART_Start_Receive_IT+0x9c>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d104      	bne.n	8005e32 <UART_Start_Receive_IT+0x92>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	227f      	movs	r2, #127	@ 0x7f
 8005e2c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005e30:	e008      	b.n	8005e44 <UART_Start_Receive_IT+0xa4>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	223f      	movs	r2, #63	@ 0x3f
 8005e36:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005e3a:	e003      	b.n	8005e44 <UART_Start_Receive_IT+0xa4>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2222      	movs	r2, #34	@ 0x22
 8005e50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	3308      	adds	r3, #8
 8005e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e5e:	e853 3f00 	ldrex	r3, [r3]
 8005e62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e66:	f043 0301 	orr.w	r3, r3, #1
 8005e6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	3308      	adds	r3, #8
 8005e72:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005e74:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005e76:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e78:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005e7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e7c:	e841 2300 	strex	r3, r2, [r1]
 8005e80:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005e82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1e5      	bne.n	8005e54 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e90:	d107      	bne.n	8005ea2 <UART_Start_Receive_IT+0x102>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d103      	bne.n	8005ea2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	4a21      	ldr	r2, [pc, #132]	@ (8005f24 <UART_Start_Receive_IT+0x184>)
 8005e9e:	669a      	str	r2, [r3, #104]	@ 0x68
 8005ea0:	e002      	b.n	8005ea8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	4a20      	ldr	r2, [pc, #128]	@ (8005f28 <UART_Start_Receive_IT+0x188>)
 8005ea6:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d019      	beq.n	8005ee4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb8:	e853 3f00 	ldrex	r3, [r3]
 8005ebc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005ec4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	461a      	mov	r2, r3
 8005ecc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ece:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ed0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005ed4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ed6:	e841 2300 	strex	r3, r2, [r1]
 8005eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1e6      	bne.n	8005eb0 <UART_Start_Receive_IT+0x110>
 8005ee2:	e018      	b.n	8005f16 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	e853 3f00 	ldrex	r3, [r3]
 8005ef0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	f043 0320 	orr.w	r3, r3, #32
 8005ef8:	653b      	str	r3, [r7, #80]	@ 0x50
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	461a      	mov	r2, r3
 8005f00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f02:	623b      	str	r3, [r7, #32]
 8005f04:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f06:	69f9      	ldr	r1, [r7, #28]
 8005f08:	6a3a      	ldr	r2, [r7, #32]
 8005f0a:	e841 2300 	strex	r3, r2, [r1]
 8005f0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1e6      	bne.n	8005ee4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	375c      	adds	r7, #92	@ 0x5c
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr
 8005f24:	08006393 	.word	0x08006393
 8005f28:	080061eb 	.word	0x080061eb

08005f2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b095      	sub	sp, #84	@ 0x54
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f3c:	e853 3f00 	ldrex	r3, [r3]
 8005f40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f52:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f54:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f5a:	e841 2300 	strex	r3, r2, [r1]
 8005f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1e6      	bne.n	8005f34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	3308      	adds	r3, #8
 8005f6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6e:	6a3b      	ldr	r3, [r7, #32]
 8005f70:	e853 3f00 	ldrex	r3, [r3]
 8005f74:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	f023 0301 	bic.w	r3, r3, #1
 8005f7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	3308      	adds	r3, #8
 8005f84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f8e:	e841 2300 	strex	r3, r2, [r1]
 8005f92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1e5      	bne.n	8005f66 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d118      	bne.n	8005fd4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	e853 3f00 	ldrex	r3, [r3]
 8005fae:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	f023 0310 	bic.w	r3, r3, #16
 8005fb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fc0:	61bb      	str	r3, [r7, #24]
 8005fc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc4:	6979      	ldr	r1, [r7, #20]
 8005fc6:	69ba      	ldr	r2, [r7, #24]
 8005fc8:	e841 2300 	strex	r3, r2, [r1]
 8005fcc:	613b      	str	r3, [r7, #16]
   return(result);
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1e6      	bne.n	8005fa2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005fe8:	bf00      	nop
 8005fea:	3754      	adds	r7, #84	@ 0x54
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006000:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f7ff fa88 	bl	8005528 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006018:	bf00      	nop
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006020:	b480      	push	{r7}
 8006022:	b08f      	sub	sp, #60	@ 0x3c
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800602c:	2b21      	cmp	r3, #33	@ 0x21
 800602e:	d14c      	bne.n	80060ca <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006036:	b29b      	uxth	r3, r3
 8006038:	2b00      	cmp	r3, #0
 800603a:	d132      	bne.n	80060a2 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006042:	6a3b      	ldr	r3, [r7, #32]
 8006044:	e853 3f00 	ldrex	r3, [r3]
 8006048:	61fb      	str	r3, [r7, #28]
   return(result);
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006050:	637b      	str	r3, [r7, #52]	@ 0x34
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	461a      	mov	r2, r3
 8006058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800605a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800605c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006060:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006062:	e841 2300 	strex	r3, r2, [r1]
 8006066:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1e6      	bne.n	800603c <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	e853 3f00 	ldrex	r3, [r3]
 800607a:	60bb      	str	r3, [r7, #8]
   return(result);
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006082:	633b      	str	r3, [r7, #48]	@ 0x30
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	461a      	mov	r2, r3
 800608a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800608c:	61bb      	str	r3, [r7, #24]
 800608e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006090:	6979      	ldr	r1, [r7, #20]
 8006092:	69ba      	ldr	r2, [r7, #24]
 8006094:	e841 2300 	strex	r3, r2, [r1]
 8006098:	613b      	str	r3, [r7, #16]
   return(result);
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1e6      	bne.n	800606e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80060a0:	e013      	b.n	80060ca <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060a6:	781a      	ldrb	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060b2:	1c5a      	adds	r2, r3, #1
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80060be:	b29b      	uxth	r3, r3
 80060c0:	3b01      	subs	r3, #1
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80060ca:	bf00      	nop
 80060cc:	373c      	adds	r7, #60	@ 0x3c
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b091      	sub	sp, #68	@ 0x44
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060e2:	2b21      	cmp	r3, #33	@ 0x21
 80060e4:	d151      	bne.n	800618a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d132      	bne.n	8006158 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fa:	e853 3f00 	ldrex	r3, [r3]
 80060fe:	623b      	str	r3, [r7, #32]
   return(result);
 8006100:	6a3b      	ldr	r3, [r7, #32]
 8006102:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006106:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	461a      	mov	r2, r3
 800610e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006110:	633b      	str	r3, [r7, #48]	@ 0x30
 8006112:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006114:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006116:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006118:	e841 2300 	strex	r3, r2, [r1]
 800611c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800611e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006120:	2b00      	cmp	r3, #0
 8006122:	d1e6      	bne.n	80060f2 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	e853 3f00 	ldrex	r3, [r3]
 8006130:	60fb      	str	r3, [r7, #12]
   return(result);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006138:	637b      	str	r3, [r7, #52]	@ 0x34
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	461a      	mov	r2, r3
 8006140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006142:	61fb      	str	r3, [r7, #28]
 8006144:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006146:	69b9      	ldr	r1, [r7, #24]
 8006148:	69fa      	ldr	r2, [r7, #28]
 800614a:	e841 2300 	strex	r3, r2, [r1]
 800614e:	617b      	str	r3, [r7, #20]
   return(result);
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1e6      	bne.n	8006124 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006156:	e018      	b.n	800618a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800615c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800615e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006160:	881b      	ldrh	r3, [r3, #0]
 8006162:	461a      	mov	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800616c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006172:	1c9a      	adds	r2, r3, #2
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800617e:	b29b      	uxth	r3, r3
 8006180:	3b01      	subs	r3, #1
 8006182:	b29a      	uxth	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800618a:	bf00      	nop
 800618c:	3744      	adds	r7, #68	@ 0x44
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b088      	sub	sp, #32
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	e853 3f00 	ldrex	r3, [r3]
 80061aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061b2:	61fb      	str	r3, [r7, #28]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	461a      	mov	r2, r3
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	61bb      	str	r3, [r7, #24]
 80061be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c0:	6979      	ldr	r1, [r7, #20]
 80061c2:	69ba      	ldr	r2, [r7, #24]
 80061c4:	e841 2300 	strex	r3, r2, [r1]
 80061c8:	613b      	str	r3, [r7, #16]
   return(result);
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1e6      	bne.n	800619e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2220      	movs	r2, #32
 80061d4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f7fa fb03 	bl	80007e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061e2:	bf00      	nop
 80061e4:	3720      	adds	r7, #32
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b09c      	sub	sp, #112	@ 0x70
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80061f8:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006202:	2b22      	cmp	r3, #34	@ 0x22
 8006204:	f040 80b9 	bne.w	800637a <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800620e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006212:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006216:	b2d9      	uxtb	r1, r3
 8006218:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800621c:	b2da      	uxtb	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006222:	400a      	ands	r2, r1
 8006224:	b2d2      	uxtb	r2, r2
 8006226:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800622c:	1c5a      	adds	r2, r3, #1
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006238:	b29b      	uxth	r3, r3
 800623a:	3b01      	subs	r3, #1
 800623c:	b29a      	uxth	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800624a:	b29b      	uxth	r3, r3
 800624c:	2b00      	cmp	r3, #0
 800624e:	f040 809c 	bne.w	800638a <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006258:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800625a:	e853 3f00 	ldrex	r3, [r3]
 800625e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006260:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006262:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006266:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	461a      	mov	r2, r3
 800626e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006270:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006272:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006274:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006276:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006278:	e841 2300 	strex	r3, r2, [r1]
 800627c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800627e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1e6      	bne.n	8006252 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	3308      	adds	r3, #8
 800628a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800628e:	e853 3f00 	ldrex	r3, [r3]
 8006292:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006296:	f023 0301 	bic.w	r3, r3, #1
 800629a:	667b      	str	r3, [r7, #100]	@ 0x64
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	3308      	adds	r3, #8
 80062a2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80062a4:	647a      	str	r2, [r7, #68]	@ 0x44
 80062a6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062ac:	e841 2300 	strex	r3, r2, [r1]
 80062b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1e5      	bne.n	8006284 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2220      	movs	r2, #32
 80062bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d018      	beq.n	800630c <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e2:	e853 3f00 	ldrex	r3, [r3]
 80062e6:	623b      	str	r3, [r7, #32]
   return(result);
 80062e8:	6a3b      	ldr	r3, [r7, #32]
 80062ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80062ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	461a      	mov	r2, r3
 80062f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80062f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80062fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006300:	e841 2300 	strex	r3, r2, [r1]
 8006304:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1e6      	bne.n	80062da <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006310:	2b01      	cmp	r3, #1
 8006312:	d12e      	bne.n	8006372 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	e853 3f00 	ldrex	r3, [r3]
 8006326:	60fb      	str	r3, [r7, #12]
   return(result);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f023 0310 	bic.w	r3, r3, #16
 800632e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	461a      	mov	r2, r3
 8006336:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006338:	61fb      	str	r3, [r7, #28]
 800633a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633c:	69b9      	ldr	r1, [r7, #24]
 800633e:	69fa      	ldr	r2, [r7, #28]
 8006340:	e841 2300 	strex	r3, r2, [r1]
 8006344:	617b      	str	r3, [r7, #20]
   return(result);
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1e6      	bne.n	800631a <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	f003 0310 	and.w	r3, r3, #16
 8006356:	2b10      	cmp	r3, #16
 8006358:	d103      	bne.n	8006362 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2210      	movs	r2, #16
 8006360:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006368:	4619      	mov	r1, r3
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f7ff f8e6 	bl	800553c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006370:	e00b      	b.n	800638a <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f7fa fa50 	bl	8000818 <HAL_UART_RxCpltCallback>
}
 8006378:	e007      	b.n	800638a <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	699a      	ldr	r2, [r3, #24]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f042 0208 	orr.w	r2, r2, #8
 8006388:	619a      	str	r2, [r3, #24]
}
 800638a:	bf00      	nop
 800638c:	3770      	adds	r7, #112	@ 0x70
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b09c      	sub	sp, #112	@ 0x70
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80063a0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063aa:	2b22      	cmp	r3, #34	@ 0x22
 80063ac:	f040 80b9 	bne.w	8006522 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063b6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063be:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80063c0:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80063c4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80063c8:	4013      	ands	r3, r2
 80063ca:	b29a      	uxth	r2, r3
 80063cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80063ce:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063d4:	1c9a      	adds	r2, r3, #2
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	3b01      	subs	r3, #1
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f040 809c 	bne.w	8006532 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006400:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006402:	e853 3f00 	ldrex	r3, [r3]
 8006406:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006408:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800640a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800640e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	461a      	mov	r2, r3
 8006416:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006418:	657b      	str	r3, [r7, #84]	@ 0x54
 800641a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800641e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006420:	e841 2300 	strex	r3, r2, [r1]
 8006424:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006426:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1e6      	bne.n	80063fa <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	3308      	adds	r3, #8
 8006432:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006436:	e853 3f00 	ldrex	r3, [r3]
 800643a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800643c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643e:	f023 0301 	bic.w	r3, r3, #1
 8006442:	663b      	str	r3, [r7, #96]	@ 0x60
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	3308      	adds	r3, #8
 800644a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800644c:	643a      	str	r2, [r7, #64]	@ 0x40
 800644e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006450:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006452:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006454:	e841 2300 	strex	r3, r2, [r1]
 8006458:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800645a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1e5      	bne.n	800642c <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2220      	movs	r2, #32
 8006464:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d018      	beq.n	80064b4 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006488:	6a3b      	ldr	r3, [r7, #32]
 800648a:	e853 3f00 	ldrex	r3, [r3]
 800648e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006496:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	461a      	mov	r2, r3
 800649e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064a2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064a8:	e841 2300 	strex	r3, r2, [r1]
 80064ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80064ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1e6      	bne.n	8006482 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d12e      	bne.n	800651a <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	e853 3f00 	ldrex	r3, [r3]
 80064ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	f023 0310 	bic.w	r3, r3, #16
 80064d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	461a      	mov	r2, r3
 80064de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80064e0:	61bb      	str	r3, [r7, #24]
 80064e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e4:	6979      	ldr	r1, [r7, #20]
 80064e6:	69ba      	ldr	r2, [r7, #24]
 80064e8:	e841 2300 	strex	r3, r2, [r1]
 80064ec:	613b      	str	r3, [r7, #16]
   return(result);
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d1e6      	bne.n	80064c2 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	f003 0310 	and.w	r3, r3, #16
 80064fe:	2b10      	cmp	r3, #16
 8006500:	d103      	bne.n	800650a <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2210      	movs	r2, #16
 8006508:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006510:	4619      	mov	r1, r3
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7ff f812 	bl	800553c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006518:	e00b      	b.n	8006532 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7fa f97c 	bl	8000818 <HAL_UART_RxCpltCallback>
}
 8006520:	e007      	b.n	8006532 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	699a      	ldr	r2, [r3, #24]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f042 0208 	orr.w	r2, r2, #8
 8006530:	619a      	str	r2, [r3, #24]
}
 8006532:	bf00      	nop
 8006534:	3770      	adds	r7, #112	@ 0x70
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <memset>:
 800653a:	4402      	add	r2, r0
 800653c:	4603      	mov	r3, r0
 800653e:	4293      	cmp	r3, r2
 8006540:	d100      	bne.n	8006544 <memset+0xa>
 8006542:	4770      	bx	lr
 8006544:	f803 1b01 	strb.w	r1, [r3], #1
 8006548:	e7f9      	b.n	800653e <memset+0x4>

0800654a <strstr>:
 800654a:	780a      	ldrb	r2, [r1, #0]
 800654c:	b570      	push	{r4, r5, r6, lr}
 800654e:	b96a      	cbnz	r2, 800656c <strstr+0x22>
 8006550:	bd70      	pop	{r4, r5, r6, pc}
 8006552:	429a      	cmp	r2, r3
 8006554:	d109      	bne.n	800656a <strstr+0x20>
 8006556:	460c      	mov	r4, r1
 8006558:	4605      	mov	r5, r0
 800655a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800655e:	2b00      	cmp	r3, #0
 8006560:	d0f6      	beq.n	8006550 <strstr+0x6>
 8006562:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006566:	429e      	cmp	r6, r3
 8006568:	d0f7      	beq.n	800655a <strstr+0x10>
 800656a:	3001      	adds	r0, #1
 800656c:	7803      	ldrb	r3, [r0, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1ef      	bne.n	8006552 <strstr+0x8>
 8006572:	4618      	mov	r0, r3
 8006574:	e7ec      	b.n	8006550 <strstr+0x6>
	...

08006578 <__libc_init_array>:
 8006578:	b570      	push	{r4, r5, r6, lr}
 800657a:	4d0d      	ldr	r5, [pc, #52]	@ (80065b0 <__libc_init_array+0x38>)
 800657c:	4c0d      	ldr	r4, [pc, #52]	@ (80065b4 <__libc_init_array+0x3c>)
 800657e:	1b64      	subs	r4, r4, r5
 8006580:	10a4      	asrs	r4, r4, #2
 8006582:	2600      	movs	r6, #0
 8006584:	42a6      	cmp	r6, r4
 8006586:	d109      	bne.n	800659c <__libc_init_array+0x24>
 8006588:	4d0b      	ldr	r5, [pc, #44]	@ (80065b8 <__libc_init_array+0x40>)
 800658a:	4c0c      	ldr	r4, [pc, #48]	@ (80065bc <__libc_init_array+0x44>)
 800658c:	f000 f818 	bl	80065c0 <_init>
 8006590:	1b64      	subs	r4, r4, r5
 8006592:	10a4      	asrs	r4, r4, #2
 8006594:	2600      	movs	r6, #0
 8006596:	42a6      	cmp	r6, r4
 8006598:	d105      	bne.n	80065a6 <__libc_init_array+0x2e>
 800659a:	bd70      	pop	{r4, r5, r6, pc}
 800659c:	f855 3b04 	ldr.w	r3, [r5], #4
 80065a0:	4798      	blx	r3
 80065a2:	3601      	adds	r6, #1
 80065a4:	e7ee      	b.n	8006584 <__libc_init_array+0xc>
 80065a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80065aa:	4798      	blx	r3
 80065ac:	3601      	adds	r6, #1
 80065ae:	e7f2      	b.n	8006596 <__libc_init_array+0x1e>
 80065b0:	08006628 	.word	0x08006628
 80065b4:	08006628 	.word	0x08006628
 80065b8:	08006628 	.word	0x08006628
 80065bc:	0800662c 	.word	0x0800662c

080065c0 <_init>:
 80065c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c2:	bf00      	nop
 80065c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065c6:	bc08      	pop	{r3}
 80065c8:	469e      	mov	lr, r3
 80065ca:	4770      	bx	lr

080065cc <_fini>:
 80065cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ce:	bf00      	nop
 80065d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065d2:	bc08      	pop	{r3}
 80065d4:	469e      	mov	lr, r3
 80065d6:	4770      	bx	lr
